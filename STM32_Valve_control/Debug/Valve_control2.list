
Valve_control2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002338  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080023f8  080023f8  000123f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002438  08002438  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002438  08002438  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002438  08002438  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000010  08002450  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08002450  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139c2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f6  00000000  00000000  000339fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  000360f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00010c13  00000000  00000000  00036ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014a2b  00000000  00000000  000476f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00064df5  00000000  00000000  0005c11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000c0f13  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0000bcf6  00000000  00000000  000c0f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001168  00000000  00000000  000ccc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f4c  00000000  00000000  000cddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023e0 	.word	0x080023e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080023e0 	.word	0x080023e0

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_uhi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5a09      	ldrh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <Btn_read.part.0>:
			break;
		}
	return retval;
}
*/
Btn_state Btn_read(uint8_t Btn){
 800025c:	b510      	push	{r4, lr}
	switch (Btn){
		case Btn_open:
			if(HAL_GPIO_ReadPin(GPIOB, Btn_open) == GPIO_PIN_RESET)
 800025e:	2102      	movs	r1, #2
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <Btn_read.part.0+0x14>)
 8000262:	f000 fef7 	bl	8001054 <HAL_GPIO_ReadPin>
 8000266:	1e43      	subs	r3, r0, #1
 8000268:	4198      	sbcs	r0, r3
				{
				return Released;
				}
	}
	return Released;
}
 800026a:	b2c0      	uxtb	r0, r0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	48000400 	.word	0x48000400

08000274 <gpio_SetPin.part.0>:


void gpio_SetPin(uint8_t led_pin, Led_state state){
	switch (state){
		case On:
			HAL_GPIO_WritePin(GPIOA, led_pin, GPIO_PIN_RESET);
 8000274:	0001      	movs	r1, r0
 8000276:	2090      	movs	r0, #144	; 0x90
void gpio_SetPin(uint8_t led_pin, Led_state state){
 8000278:	b510      	push	{r4, lr}
			HAL_GPIO_WritePin(GPIOA, led_pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	05c0      	lsls	r0, r0, #23
 800027e:	f000 feef 	bl	8001060 <HAL_GPIO_WritePin>
			break;
		case Off:
			HAL_GPIO_WritePin(GPIOA, led_pin, GPIO_PIN_SET);
		break;
	}
}
 8000282:	bd10      	pop	{r4, pc}

08000284 <Valve_control.part.0>:
void Delay_ms(uint32_t time){
	HAL_Delay(time);
}

void Valve_control(Valve_control_state state)
 8000284:	b510      	push	{r4, lr}
{
	switch (state){
		case Valve_On:
			HAL_GPIO_WritePin(GPIOA, Valve_control_2, GPIO_PIN_RESET);
 8000286:	2490      	movs	r4, #144	; 0x90
 8000288:	05e4      	lsls	r4, r4, #23
 800028a:	2200      	movs	r2, #0
 800028c:	2104      	movs	r1, #4
 800028e:	0020      	movs	r0, r4
 8000290:	f000 fee6 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 8000294:	20fa      	movs	r0, #250	; 0xfa
 8000296:	0080      	lsls	r0, r0, #2
 8000298:	f000 fd82 	bl	8000da0 <HAL_Delay>
			Delay_ms(1000);
			HAL_GPIO_WritePin(GPIOA, Valve_control_1, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2108      	movs	r1, #8
 80002a0:	0020      	movs	r0, r4
 80002a2:	f000 fedd 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 80002a6:	4804      	ldr	r0, [pc, #16]	; (80002b8 <Valve_control.part.0+0x34>)
 80002a8:	f000 fd7a 	bl	8000da0 <HAL_Delay>
			Delay_ms(7000);
			HAL_GPIO_WritePin(GPIOA, Valve_control_1, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2108      	movs	r1, #8
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 fed5 	bl	8001060 <HAL_GPIO_WritePin>
			Delay_ms(1000);
			HAL_GPIO_WritePin(GPIOA, Valve_control_2, GPIO_PIN_SET);
			Delay_ms(7000);
			HAL_GPIO_WritePin(GPIOA, Valve_control_2, GPIO_PIN_RESET);
	}
}
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	00001b58 	.word	0x00001b58

080002bc <memcopy>:
	for(int i = 0; i < length ; i++){
 80002bc:	2300      	movs	r3, #0
void memcopy(uint8_t *des, uint8_t *src, uint8_t length){
 80002be:	b510      	push	{r4, lr}
	for(int i = 0; i < length ; i++){
 80002c0:	429a      	cmp	r2, r3
 80002c2:	dc00      	bgt.n	80002c6 <memcopy+0xa>
}
 80002c4:	bd10      	pop	{r4, pc}
		des[i] = src[i];
 80002c6:	5ccc      	ldrb	r4, [r1, r3]
 80002c8:	54c4      	strb	r4, [r0, r3]
	for(int i = 0; i < length ; i++){
 80002ca:	3301      	adds	r3, #1
 80002cc:	e7f8      	b.n	80002c0 <memcopy+0x4>
	...

080002d0 <HAL_UART_RxCpltCallback>:
	if (huart->Instance == USART1)
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <HAL_UART_RxCpltCallback+0xa0>)
 80002d2:	6802      	ldr	r2, [r0, #0]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002d4:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1)
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d138      	bne.n	800034c <HAL_UART_RxCpltCallback+0x7c>
		cmd_ready = uart_check_protocol(rx_receive[0], TRUE);
 80002da:	4d26      	ldr	r5, [pc, #152]	; (8000374 <HAL_UART_RxCpltCallback+0xa4>)
 80002dc:	2101      	movs	r1, #1
 80002de:	7828      	ldrb	r0, [r5, #0]
 80002e0:	f000 fc8e 	bl	8000c00 <uart_check_protocol>
 80002e4:	4c24      	ldr	r4, [pc, #144]	; (8000378 <HAL_UART_RxCpltCallback+0xa8>)
		HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_receive, 1);
 80002e6:	2201      	movs	r2, #1
		cmd_ready = uart_check_protocol(rx_receive[0], TRUE);
 80002e8:	7020      	strb	r0, [r4, #0]
		HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_receive, 1);
 80002ea:	0029      	movs	r1, r5
 80002ec:	4823      	ldr	r0, [pc, #140]	; (800037c <HAL_UART_RxCpltCallback+0xac>)
 80002ee:	f002 f80b 	bl	8002308 <HAL_UART_Receive_IT>
		if(cmd_ready == conFrameReceived){
 80002f2:	7823      	ldrb	r3, [r4, #0]
 80002f4:	b2de      	uxtb	r6, r3
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d128      	bne.n	800034c <HAL_UART_RxCpltCallback+0x7c>
			cmd_ready = conIdle;
 80002fa:	2500      	movs	r5, #0
			memcopy(&cmd, &serBuf[0], serBufLen);
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <HAL_UART_RxCpltCallback+0xb0>)
			cmd_ready = conIdle;
 80002fe:	7025      	strb	r5, [r4, #0]
			memcopy(&cmd, &serBuf[0], serBufLen);
 8000300:	4c20      	ldr	r4, [pc, #128]	; (8000384 <HAL_UART_RxCpltCallback+0xb4>)
 8000302:	781a      	ldrb	r2, [r3, #0]
 8000304:	0020      	movs	r0, r4
 8000306:	4920      	ldr	r1, [pc, #128]	; (8000388 <HAL_UART_RxCpltCallback+0xb8>)
 8000308:	f7ff ffd8 	bl	80002bc <memcopy>
			switch (cmd.zw_uartcommandset.cmd)
 800030c:	78a3      	ldrb	r3, [r4, #2]
 800030e:	2b11      	cmp	r3, #17
 8000310:	d009      	beq.n	8000326 <HAL_UART_RxCpltCallback+0x56>
 8000312:	2b13      	cmp	r3, #19
 8000314:	d013      	beq.n	800033e <HAL_UART_RxCpltCallback+0x6e>
 8000316:	2b0d      	cmp	r3, #13
 8000318:	d118      	bne.n	800034c <HAL_UART_RxCpltCallback+0x7c>
					if(cmd.zw_uartcommandset.type == ZW_METER_SET){
 800031a:	7863      	ldrb	r3, [r4, #1]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d11b      	bne.n	8000358 <HAL_UART_RxCpltCallback+0x88>
						Meter_scale_value = cmd.zw_uartcommandset.value1;
 8000320:	78e2      	ldrb	r2, [r4, #3]
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <HAL_UART_RxCpltCallback+0xbc>)
 8000324:	e004      	b.n	8000330 <HAL_UART_RxCpltCallback+0x60>
					if(cmd.zw_uartcommandset.value1 == ZW_VALVE_ON){
 8000326:	78e3      	ldrb	r3, [r4, #3]
 8000328:	2b03      	cmp	r3, #3
 800032a:	d103      	bne.n	8000334 <HAL_UART_RxCpltCallback+0x64>
					 	next_state = VALVE_OPEN		;
 800032c:	2204      	movs	r2, #4
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <HAL_UART_RxCpltCallback+0xc0>)
						next_state = VALVE_METER_REPORT;
 8000330:	701a      	strb	r2, [r3, #0]
					if(cmd.zw_uartcommandset.type == ZW_METER_REPORT){
 8000332:	e00b      	b.n	800034c <HAL_UART_RxCpltCallback+0x7c>
					if(cmd.zw_uartcommandset.value1 == ZW_VALVE_OFF){
 8000334:	2b04      	cmp	r3, #4
 8000336:	d109      	bne.n	800034c <HAL_UART_RxCpltCallback+0x7c>
					 	next_state = VALVE_CLOSE	;
 8000338:	2205      	movs	r2, #5
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <HAL_UART_RxCpltCallback+0xc0>)
 800033c:	e7f8      	b.n	8000330 <HAL_UART_RxCpltCallback+0x60>
					Zw_connect_status = TRUE;
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <HAL_UART_RxCpltCallback+0xc4>)
 8000340:	701e      	strb	r6, [r3, #0]
					if(cmd.zw_uartcommandset.value1 == ZW_CONFIGURATION_SET)
 8000342:	78e3      	ldrb	r3, [r4, #3]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d102      	bne.n	800034e <HAL_UART_RxCpltCallback+0x7e>
						Valve_mode = 1;
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <HAL_UART_RxCpltCallback+0xc8>)
 800034a:	701e      	strb	r6, [r3, #0]
}
 800034c:	bd70      	pop	{r4, r5, r6, pc}
					if(cmd.zw_uartcommandset.value1 == ZW_CONFIGURATION_RESET)
 800034e:	2b03      	cmp	r3, #3
 8000350:	d1fc      	bne.n	800034c <HAL_UART_RxCpltCallback+0x7c>
						Valve_mode = 0;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <HAL_UART_RxCpltCallback+0xc8>)
						Meter_mode = 0;
 8000354:	701d      	strb	r5, [r3, #0]
}
 8000356:	e7f9      	b.n	800034c <HAL_UART_RxCpltCallback+0x7c>
					if(cmd.zw_uartcommandset.type == ZW_METER_GET){
 8000358:	2b02      	cmp	r3, #2
 800035a:	d003      	beq.n	8000364 <HAL_UART_RxCpltCallback+0x94>
					if(cmd.zw_uartcommandset.type == ZW_METER_RESET){
 800035c:	2b03      	cmp	r3, #3
 800035e:	d004      	beq.n	800036a <HAL_UART_RxCpltCallback+0x9a>
					if(cmd.zw_uartcommandset.type == ZW_METER_REPORT){
 8000360:	2b04      	cmp	r3, #4
 8000362:	d1f3      	bne.n	800034c <HAL_UART_RxCpltCallback+0x7c>
						next_state = VALVE_METER_REPORT;
 8000364:	2208      	movs	r2, #8
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_UART_RxCpltCallback+0xc0>)
 8000368:	e7e2      	b.n	8000330 <HAL_UART_RxCpltCallback+0x60>
						Meter_mode = 0;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <HAL_UART_RxCpltCallback+0xcc>)
 800036c:	e7f2      	b.n	8000354 <HAL_UART_RxCpltCallback+0x84>
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40013800 	.word	0x40013800
 8000374:	200000be 	.word	0x200000be
 8000378:	200000bc 	.word	0x200000bc
 800037c:	20000034 	.word	0x20000034
 8000380:	200001da 	.word	0x200001da
 8000384:	200001dd 	.word	0x200001dd
 8000388:	200000cc 	.word	0x200000cc
 800038c:	200001c8 	.word	0x200001c8
 8000390:	20000000 	.word	0x20000000
 8000394:	2000002f 	.word	0x2000002f
 8000398:	2000002d 	.word	0x2000002d
 800039c:	200001c9 	.word	0x200001c9

080003a0 <Flow_meter_cal>:
void Flow_meter_cal(uint32_t Tick){
 80003a0:	b510      	push	{r4, lr}
	uint32_t Tick2 = 2*Tick/60000 ;
 80003a2:	4907      	ldr	r1, [pc, #28]	; (80003c0 <Flow_meter_cal+0x20>)
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	f7ff fecd 	bl	8000144 <__udivsi3>
 80003aa:	0001      	movs	r1, r0
	uint32_t Frequency = 1/Tick2;
 80003ac:	2001      	movs	r0, #1
 80003ae:	f7ff fec9 	bl	8000144 <__udivsi3>
	Meter_value = Meter_scale_value * Frequency;
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <Flow_meter_cal+0x24>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4358      	muls	r0, r3
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <Flow_meter_cal+0x28>)
 80003ba:	7018      	strb	r0, [r3, #0]
}
 80003bc:	bd10      	pop	{r4, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	0000ea60 	.word	0x0000ea60
 80003c4:	200001c8 	.word	0x200001c8
 80003c8:	200001db 	.word	0x200001db

080003cc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80003cc:	b510      	push	{r4, lr}
	if(GPIO_Pin == Flow_meter)
 80003ce:	2801      	cmp	r0, #1
 80003d0:	d10d      	bne.n	80003ee <HAL_GPIO_EXTI_Callback+0x22>
		if(FLow_reading_state){
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80003d4:	4c09      	ldr	r4, [pc, #36]	; (80003fc <HAL_GPIO_EXTI_Callback+0x30>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d009      	beq.n	80003f0 <HAL_GPIO_EXTI_Callback+0x24>
			Flow_pulse_value = __HAL_TIM_GET_COUNTER(&htim1);
 80003dc:	6823      	ldr	r3, [r4, #0]
 80003de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <HAL_GPIO_EXTI_Callback+0x34>)
 80003e2:	6018      	str	r0, [r3, #0]
			Flow_meter_cal(Flow_pulse_value);
 80003e4:	f7ff ffdc 	bl	80003a0 <Flow_meter_cal>
			HAL_TIM_Base_Stop(&htim1);
 80003e8:	0020      	movs	r0, r4
 80003ea:	f001 f9bb 	bl	8001764 <HAL_TIM_Base_Stop>
}
 80003ee:	bd10      	pop	{r4, pc}
		HAL_TIM_Base_Start(&htim1);
 80003f0:	0020      	movs	r0, r4
 80003f2:	f001 f993 	bl	800171c <HAL_TIM_Base_Start>
}
 80003f6:	e7fa      	b.n	80003ee <HAL_GPIO_EXTI_Callback+0x22>
 80003f8:	2000002c 	.word	0x2000002c
 80003fc:	20000180 	.word	0x20000180
 8000400:	200000b8 	.word	0x200000b8

08000404 <SystemClock_Config>:
{
 8000404:	b510      	push	{r4, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2401      	movs	r4, #1
{
 8000408:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	a80a      	add	r0, sp, #40	; 0x28
 8000410:	f001 ffdd 	bl	80023ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	2210      	movs	r2, #16
 8000416:	2100      	movs	r1, #0
 8000418:	4668      	mov	r0, sp
 800041a:	f001 ffd8 	bl	80023ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041e:	2100      	movs	r1, #0
 8000420:	2210      	movs	r2, #16
 8000422:	a804      	add	r0, sp, #16
 8000424:	f001 ffd3 	bl	80023ce <memset>
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042e:	f000 fe29 	bl	8001084 <HAL_RCC_OscConfig>
 8000432:	1e01      	subs	r1, r0, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000436:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	e7fe      	b.n	8000438 <SystemClock_Config+0x34>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000440:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000444:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000446:	f001 f84f 	bl	80014e8 <HAL_RCC_ClockConfig>
 800044a:	2800      	cmp	r0, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x4e>
 800044e:	b672      	cpsid	i
  while (1)
 8000450:	e7fe      	b.n	8000450 <SystemClock_Config+0x4c>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000452:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000454:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000456:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000458:	f001 f8da 	bl	8001610 <HAL_RCCEx_PeriphCLKConfig>
 800045c:	2800      	cmp	r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x60>
 8000460:	b672      	cpsid	i
  while (1)
 8000462:	e7fe      	b.n	8000462 <SystemClock_Config+0x5e>
}
 8000464:	b014      	add	sp, #80	; 0x50
 8000466:	bd10      	pop	{r4, pc}

08000468 <Btn_read>:
Btn_state Btn_read(uint8_t Btn){
 8000468:	0001      	movs	r1, r0
 800046a:	b510      	push	{r4, lr}
	switch (Btn){
 800046c:	2802      	cmp	r0, #2
 800046e:	d00a      	beq.n	8000486 <Btn_read+0x1e>
 8000470:	2001      	movs	r0, #1
 8000472:	2910      	cmp	r1, #16
 8000474:	d109      	bne.n	800048a <Btn_read+0x22>
			if(HAL_GPIO_ReadPin(GPIOA, Btn_close) == GPIO_PIN_RESET)
 8000476:	2090      	movs	r0, #144	; 0x90
 8000478:	05c0      	lsls	r0, r0, #23
 800047a:	f000 fdeb 	bl	8001054 <HAL_GPIO_ReadPin>
 800047e:	1e43      	subs	r3, r0, #1
 8000480:	4198      	sbcs	r0, r3
	return Released;
 8000482:	b2c0      	uxtb	r0, r0
 8000484:	e001      	b.n	800048a <Btn_read+0x22>
 8000486:	f7ff fee9 	bl	800025c <Btn_read.part.0>
}
 800048a:	bd10      	pop	{r4, pc}

0800048c <gpio_SetPin>:
void gpio_SetPin(uint8_t led_pin, Led_state state){
 800048c:	000a      	movs	r2, r1
 800048e:	b510      	push	{r4, lr}
	switch (state){
 8000490:	2900      	cmp	r1, #0
 8000492:	d002      	beq.n	800049a <gpio_SetPin+0xe>
 8000494:	2901      	cmp	r1, #1
 8000496:	d003      	beq.n	80004a0 <gpio_SetPin+0x14>
}
 8000498:	bd10      	pop	{r4, pc}
 800049a:	f7ff feeb 	bl	8000274 <gpio_SetPin.part.0>
 800049e:	e7fb      	b.n	8000498 <gpio_SetPin+0xc>
			HAL_GPIO_WritePin(GPIOA, led_pin, GPIO_PIN_SET);
 80004a0:	b281      	uxth	r1, r0
 80004a2:	2090      	movs	r0, #144	; 0x90
 80004a4:	05c0      	lsls	r0, r0, #23
 80004a6:	f000 fddb 	bl	8001060 <HAL_GPIO_WritePin>
}
 80004aa:	e7f5      	b.n	8000498 <gpio_SetPin+0xc>

080004ac <Valve_control>:
{
 80004ac:	b510      	push	{r4, lr}
 80004ae:	1e04      	subs	r4, r0, #0
	switch (state){
 80004b0:	d002      	beq.n	80004b8 <Valve_control+0xc>
 80004b2:	2801      	cmp	r0, #1
 80004b4:	d003      	beq.n	80004be <Valve_control+0x12>
}
 80004b6:	bd10      	pop	{r4, pc}
 80004b8:	f7ff fee4 	bl	8000284 <Valve_control.part.0>
 80004bc:	e7fb      	b.n	80004b6 <Valve_control+0xa>
			HAL_GPIO_WritePin(GPIOA, Valve_control_1, GPIO_PIN_RESET);
 80004be:	2090      	movs	r0, #144	; 0x90
 80004c0:	2200      	movs	r2, #0
 80004c2:	2108      	movs	r1, #8
 80004c4:	05c0      	lsls	r0, r0, #23
 80004c6:	f000 fdcb 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 80004ca:	20fa      	movs	r0, #250	; 0xfa
 80004cc:	0080      	lsls	r0, r0, #2
 80004ce:	f000 fc67 	bl	8000da0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, Valve_control_2, GPIO_PIN_SET);
 80004d2:	2090      	movs	r0, #144	; 0x90
 80004d4:	0022      	movs	r2, r4
 80004d6:	2104      	movs	r1, #4
 80004d8:	05c0      	lsls	r0, r0, #23
 80004da:	f000 fdc1 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <Valve_control+0x48>)
 80004e0:	f000 fc5e 	bl	8000da0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, Valve_control_2, GPIO_PIN_RESET);
 80004e4:	2090      	movs	r0, #144	; 0x90
 80004e6:	2200      	movs	r2, #0
 80004e8:	2104      	movs	r1, #4
 80004ea:	05c0      	lsls	r0, r0, #23
 80004ec:	f000 fdb8 	bl	8001060 <HAL_GPIO_WritePin>
}
 80004f0:	e7e1      	b.n	80004b6 <Valve_control+0xa>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	00001b58 	.word	0x00001b58

080004f8 <State>:
void State(void){
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	4bc4      	ldr	r3, [pc, #784]	; (800080c <State+0x314>)
 80004fc:	7818      	ldrb	r0, [r3, #0]
 80004fe:	2805      	cmp	r0, #5
 8000500:	d837      	bhi.n	8000572 <State+0x7a>
 8000502:	f7ff fe15 	bl	8000130 <__gnu_thumb1_case_uhi>
 8000506:	0006      	.short	0x0006
 8000508:	00360037 	.word	0x00360037
 800050c:	01410036 	.word	0x01410036
 8000510:	0199      	.short	0x0199
		 if(Zw_connect_status){
 8000512:	4bbf      	ldr	r3, [pc, #764]	; (8000810 <State+0x318>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d028      	beq.n	800056c <State+0x74>
			 uart_cmd.zw_uartcommandset.cmd = COMMAND_ZW_CONNECT;
 800051a:	2302      	movs	r3, #2
			 uart_cmd.zw_uartcommandset.length = 3;
 800051c:	2003      	movs	r0, #3
 800051e:	4dbd      	ldr	r5, [pc, #756]	; (8000814 <State+0x31c>)
			 uart_cmd.zw_uartcommandset.cmd = COMMAND_ZW_CONNECT;
 8000520:	70ab      	strb	r3, [r5, #2]
			 uart_cmd.zw_uartcommandset.type = COMMAND_ZW_CONNECT;
 8000522:	706b      	strb	r3, [r5, #1]
			 uart_cmd.zw_uartcommandset.value1 = COMMAND_ZW_CONNECT;
 8000524:	70eb      	strb	r3, [r5, #3]
			 if(ZW_UART_transmit(uart_cmd))
 8000526:	4bbc      	ldr	r3, [pc, #752]	; (8000818 <State+0x320>)
			 uart_cmd.zw_uartcommandset.length = 3;
 8000528:	7028      	strb	r0, [r5, #0]
			 if(ZW_UART_transmit(uart_cmd))
 800052a:	4318      	orrs	r0, r3
 800052c:	796b      	ldrb	r3, [r5, #5]
 800052e:	7929      	ldrb	r1, [r5, #4]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	430b      	orrs	r3, r1
 8000534:	79a9      	ldrb	r1, [r5, #6]
 8000536:	7a2a      	ldrb	r2, [r5, #8]
 8000538:	0409      	lsls	r1, r1, #16
 800053a:	430b      	orrs	r3, r1
 800053c:	79e9      	ldrb	r1, [r5, #7]
 800053e:	7b6e      	ldrb	r6, [r5, #13]
 8000540:	0609      	lsls	r1, r1, #24
 8000542:	4319      	orrs	r1, r3
 8000544:	7a6b      	ldrb	r3, [r5, #9]
 8000546:	0236      	lsls	r6, r6, #8
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	4313      	orrs	r3, r2
 800054c:	7aaa      	ldrb	r2, [r5, #10]
 800054e:	0412      	lsls	r2, r2, #16
 8000550:	4313      	orrs	r3, r2
 8000552:	7aea      	ldrb	r2, [r5, #11]
 8000554:	0612      	lsls	r2, r2, #24
 8000556:	431a      	orrs	r2, r3
 8000558:	7b2b      	ldrb	r3, [r5, #12]
 800055a:	431e      	orrs	r6, r3
 800055c:	7bab      	ldrb	r3, [r5, #14]
 800055e:	041b      	lsls	r3, r3, #16
 8000560:	431e      	orrs	r6, r3
 8000562:	7beb      	ldrb	r3, [r5, #15]
 8000564:	061b      	lsls	r3, r3, #24
 8000566:	4333      	orrs	r3, r6
 8000568:	f000 fb10 	bl	8000b8c <ZW_UART_transmit>
		  Valve_state = VALVE_IDLE;
 800056c:	2301      	movs	r3, #1
 800056e:	4aa7      	ldr	r2, [pc, #668]	; (800080c <State+0x314>)
 8000570:	7013      	strb	r3, [r2, #0]
}
 8000572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  			  if( (next_state == VALVE_OPEN) || (Btn_read(Btn_open)== Pressed)){
 8000574:	4ea9      	ldr	r6, [pc, #676]	; (800081c <State+0x324>)
 8000576:	7833      	ldrb	r3, [r6, #0]
 8000578:	2b04      	cmp	r3, #4
 800057a:	d131      	bne.n	80005e0 <State+0xe8>
		  									  uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 800057c:	2311      	movs	r3, #17
		  									  uart_cmd.zw_uartcommandset.length = 3;
 800057e:	2003      	movs	r0, #3
 8000580:	4da4      	ldr	r5, [pc, #656]	; (8000814 <State+0x31c>)
		  									  uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 8000582:	70ab      	strb	r3, [r5, #2]
		  									  uart_cmd.zw_uartcommandset.type =ZW_VALVE_SET;
 8000584:	3b0f      	subs	r3, #15
 8000586:	706b      	strb	r3, [r5, #1]
		  									  if(ZW_UART_transmit(uart_cmd)){
 8000588:	4ba5      	ldr	r3, [pc, #660]	; (8000820 <State+0x328>)
		  									  uart_cmd.zw_uartcommandset.length = 3;
 800058a:	7028      	strb	r0, [r5, #0]
		  									  uart_cmd.zw_uartcommandset.value1 = ZW_VALVE_ON;
 800058c:	70e8      	strb	r0, [r5, #3]
		  									  if(ZW_UART_transmit(uart_cmd)){
 800058e:	4318      	orrs	r0, r3
 8000590:	796b      	ldrb	r3, [r5, #5]
 8000592:	7929      	ldrb	r1, [r5, #4]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	430b      	orrs	r3, r1
 8000598:	79a9      	ldrb	r1, [r5, #6]
 800059a:	7a2a      	ldrb	r2, [r5, #8]
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	430b      	orrs	r3, r1
 80005a0:	79e9      	ldrb	r1, [r5, #7]
 80005a2:	7b6f      	ldrb	r7, [r5, #13]
 80005a4:	0609      	lsls	r1, r1, #24
 80005a6:	4319      	orrs	r1, r3
 80005a8:	7a6b      	ldrb	r3, [r5, #9]
 80005aa:	023f      	lsls	r7, r7, #8
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	4313      	orrs	r3, r2
 80005b0:	7aaa      	ldrb	r2, [r5, #10]
 80005b2:	0412      	lsls	r2, r2, #16
 80005b4:	4313      	orrs	r3, r2
 80005b6:	7aea      	ldrb	r2, [r5, #11]
 80005b8:	0612      	lsls	r2, r2, #24
 80005ba:	431a      	orrs	r2, r3
 80005bc:	7b2b      	ldrb	r3, [r5, #12]
 80005be:	431f      	orrs	r7, r3
 80005c0:	7bab      	ldrb	r3, [r5, #14]
 80005c2:	041b      	lsls	r3, r3, #16
 80005c4:	431f      	orrs	r7, r3
 80005c6:	7beb      	ldrb	r3, [r5, #15]
 80005c8:	061b      	lsls	r3, r3, #24
 80005ca:	433b      	orrs	r3, r7
 80005cc:	f000 fade 	bl	8000b8c <ZW_UART_transmit>
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d009      	beq.n	80005e8 <State+0xf0>
		  										  Valve_state = VALVE_OPEN;
 80005d4:	2304      	movs	r3, #4
 80005d6:	4a8d      	ldr	r2, [pc, #564]	; (800080c <State+0x314>)
 80005d8:	7013      	strb	r3, [r2, #0]
	switch (state){
 80005da:	f7ff fe53 	bl	8000284 <Valve_control.part.0>
 80005de:	e003      	b.n	80005e8 <State+0xf0>
	switch (Btn){
 80005e0:	f7ff fe3c 	bl	800025c <Btn_read.part.0>
		  			  if( (next_state == VALVE_OPEN) || (Btn_read(Btn_open)== Pressed)){
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d0c9      	beq.n	800057c <State+0x84>
		  			  if( (next_state == VALVE_CLOSE) || (Btn_read(Btn_close)== Pressed)){
 80005e8:	7833      	ldrb	r3, [r6, #0]
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	d133      	bne.n	8000656 <State+0x15e>
		  									  uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 80005ee:	2311      	movs	r3, #17
		  									  uart_cmd.zw_uartcommandset.length = 3;
 80005f0:	2003      	movs	r0, #3
 80005f2:	4d88      	ldr	r5, [pc, #544]	; (8000814 <State+0x31c>)
		  									  uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 80005f4:	70ab      	strb	r3, [r5, #2]
		  									  uart_cmd.zw_uartcommandset.type =ZW_VALVE_SET;
 80005f6:	3b0f      	subs	r3, #15
 80005f8:	706b      	strb	r3, [r5, #1]
		  									  uart_cmd.zw_uartcommandset.value1 = ZW_VALVE_OFF;
 80005fa:	3302      	adds	r3, #2
 80005fc:	70eb      	strb	r3, [r5, #3]
		  									  if(ZW_UART_transmit(uart_cmd)){
 80005fe:	4b89      	ldr	r3, [pc, #548]	; (8000824 <State+0x32c>)
		  									  uart_cmd.zw_uartcommandset.length = 3;
 8000600:	7028      	strb	r0, [r5, #0]
		  									  if(ZW_UART_transmit(uart_cmd)){
 8000602:	4318      	orrs	r0, r3
 8000604:	796b      	ldrb	r3, [r5, #5]
 8000606:	7929      	ldrb	r1, [r5, #4]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	430b      	orrs	r3, r1
 800060c:	79a9      	ldrb	r1, [r5, #6]
 800060e:	7a2a      	ldrb	r2, [r5, #8]
 8000610:	0409      	lsls	r1, r1, #16
 8000612:	430b      	orrs	r3, r1
 8000614:	79e9      	ldrb	r1, [r5, #7]
 8000616:	7b6e      	ldrb	r6, [r5, #13]
 8000618:	0609      	lsls	r1, r1, #24
 800061a:	4319      	orrs	r1, r3
 800061c:	7a6b      	ldrb	r3, [r5, #9]
 800061e:	0236      	lsls	r6, r6, #8
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4313      	orrs	r3, r2
 8000624:	7aaa      	ldrb	r2, [r5, #10]
 8000626:	0412      	lsls	r2, r2, #16
 8000628:	4313      	orrs	r3, r2
 800062a:	7aea      	ldrb	r2, [r5, #11]
 800062c:	0612      	lsls	r2, r2, #24
 800062e:	431a      	orrs	r2, r3
 8000630:	7b2b      	ldrb	r3, [r5, #12]
 8000632:	431e      	orrs	r6, r3
 8000634:	7bab      	ldrb	r3, [r5, #14]
 8000636:	041b      	lsls	r3, r3, #16
 8000638:	431e      	orrs	r6, r3
 800063a:	7beb      	ldrb	r3, [r5, #15]
 800063c:	061b      	lsls	r3, r3, #24
 800063e:	4333      	orrs	r3, r6
 8000640:	f000 faa4 	bl	8000b8c <ZW_UART_transmit>
 8000644:	2800      	cmp	r0, #0
 8000646:	d00b      	beq.n	8000660 <State+0x168>
		  										  Valve_state = VALVE_CLOSE;
 8000648:	2305      	movs	r3, #5
		  										  Valve_control(Off);
 800064a:	2001      	movs	r0, #1
		  										  Valve_state = VALVE_CLOSE;
 800064c:	4a6f      	ldr	r2, [pc, #444]	; (800080c <State+0x314>)
 800064e:	7013      	strb	r3, [r2, #0]
		  							  Valve_control(Off);
 8000650:	f7ff ff2c 	bl	80004ac <Valve_control>
		  			  if( (leak_state == 0) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8000654:	e004      	b.n	8000660 <State+0x168>
		  			  if( (next_state == VALVE_CLOSE) || (Btn_read(Btn_close)== Pressed)){
 8000656:	2010      	movs	r0, #16
 8000658:	f7ff ff06 	bl	8000468 <Btn_read>
 800065c:	2800      	cmp	r0, #0
 800065e:	d0c6      	beq.n	80005ee <State+0xf6>
		  			  if( (leak_state == 0) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8000660:	4f71      	ldr	r7, [pc, #452]	; (8000828 <State+0x330>)
 8000662:	783b      	ldrb	r3, [r7, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d000      	beq.n	800066a <State+0x172>
 8000668:	e12d      	b.n	80008c6 <State+0x3ce>
 800066a:	2090      	movs	r0, #144	; 0x90
 800066c:	2102      	movs	r1, #2
 800066e:	05c0      	lsls	r0, r0, #23
 8000670:	f000 fcf0 	bl	8001054 <HAL_GPIO_ReadPin>
 8000674:	2800      	cmp	r0, #0
 8000676:	d000      	beq.n	800067a <State+0x182>
 8000678:	e125      	b.n	80008c6 <State+0x3ce>
		  			  				  if(Valve_mode == 0){
 800067a:	4b6c      	ldr	r3, [pc, #432]	; (800082c <State+0x334>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d000      	beq.n	8000684 <State+0x18c>
 8000682:	e11b      	b.n	80008bc <State+0x3c4>
		  			  					  uart_cmd.zw_uartcommandset.length = 3;
 8000684:	4d63      	ldr	r5, [pc, #396]	; (8000814 <State+0x31c>)
		  			  					  uart_cmd.zw_uartcommandset.cmd = COMMAND_LEAK;
 8000686:	3312      	adds	r3, #18
 8000688:	70ab      	strb	r3, [r5, #2]
		  			  					  if(ZW_UART_transmit(uart_cmd)){
 800068a:	4b69      	ldr	r3, [pc, #420]	; (8000830 <State+0x338>)
		  			  					  uart_cmd.zw_uartcommandset.length = 3;
 800068c:	3003      	adds	r0, #3
 800068e:	7028      	strb	r0, [r5, #0]
		  			  					  if(ZW_UART_transmit(uart_cmd)){
 8000690:	4318      	orrs	r0, r3
 8000692:	796b      	ldrb	r3, [r5, #5]
 8000694:	7929      	ldrb	r1, [r5, #4]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	430b      	orrs	r3, r1
 800069a:	79a9      	ldrb	r1, [r5, #6]
 800069c:	7a2a      	ldrb	r2, [r5, #8]
 800069e:	0409      	lsls	r1, r1, #16
 80006a0:	430b      	orrs	r3, r1
 80006a2:	79e9      	ldrb	r1, [r5, #7]
		  			  					  uart_cmd.zw_uartcommandset.type =ZW_LEAK;
 80006a4:	2601      	movs	r6, #1
		  			  					  if(ZW_UART_transmit(uart_cmd)){
 80006a6:	0609      	lsls	r1, r1, #24
 80006a8:	4319      	orrs	r1, r3
 80006aa:	7a6b      	ldrb	r3, [r5, #9]
		  			  					  uart_cmd.zw_uartcommandset.type =ZW_LEAK;
 80006ac:	706e      	strb	r6, [r5, #1]
		  			  					  if(ZW_UART_transmit(uart_cmd)){
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	4313      	orrs	r3, r2
 80006b2:	7aaa      	ldrb	r2, [r5, #10]
		  			  					  uart_cmd.zw_uartcommandset.value1 = ZW_LEAK;
 80006b4:	70ee      	strb	r6, [r5, #3]
		  			  					  if(ZW_UART_transmit(uart_cmd)){
 80006b6:	0412      	lsls	r2, r2, #16
 80006b8:	4313      	orrs	r3, r2
 80006ba:	7aea      	ldrb	r2, [r5, #11]
 80006bc:	0612      	lsls	r2, r2, #24
 80006be:	431a      	orrs	r2, r3
 80006c0:	7b2b      	ldrb	r3, [r5, #12]
 80006c2:	469c      	mov	ip, r3
 80006c4:	4664      	mov	r4, ip
 80006c6:	7b6b      	ldrb	r3, [r5, #13]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	4323      	orrs	r3, r4
 80006cc:	7bac      	ldrb	r4, [r5, #14]
 80006ce:	7bed      	ldrb	r5, [r5, #15]
 80006d0:	0424      	lsls	r4, r4, #16
 80006d2:	4323      	orrs	r3, r4
 80006d4:	062d      	lsls	r5, r5, #24
 80006d6:	432b      	orrs	r3, r5
 80006d8:	f000 fa58 	bl	8000b8c <ZW_UART_transmit>
 80006dc:	2800      	cmp	r0, #0
 80006de:	d100      	bne.n	80006e2 <State+0x1ea>
 80006e0:	e0f1      	b.n	80008c6 <State+0x3ce>
	switch (state){
 80006e2:	2020      	movs	r0, #32
 80006e4:	f7ff fdc6 	bl	8000274 <gpio_SetPin.part.0>
		  			  					  Valve_state = VALVE_IDLE;
 80006e8:	4b48      	ldr	r3, [pc, #288]	; (800080c <State+0x314>)
		  			  					  leak_state = 1;
 80006ea:	703e      	strb	r6, [r7, #0]
		  			  					  Valve_state = VALVE_IDLE;
 80006ec:	701e      	strb	r6, [r3, #0]
		  			  if( (leak_state == 1) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET ){
 80006ee:	2090      	movs	r0, #144	; 0x90
 80006f0:	2102      	movs	r1, #2
 80006f2:	05c0      	lsls	r0, r0, #23
 80006f4:	f000 fcae 	bl	8001054 <HAL_GPIO_ReadPin>
 80006f8:	2801      	cmp	r0, #1
 80006fa:	d139      	bne.n	8000770 <State+0x278>
		  				  if(Valve_mode == 0){
 80006fc:	4b4b      	ldr	r3, [pc, #300]	; (800082c <State+0x334>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d12b      	bne.n	800075c <State+0x264>
		  				  					  uart_cmd.zw_uartcommandset.length = 3;
 8000704:	2003      	movs	r0, #3
 8000706:	4d43      	ldr	r5, [pc, #268]	; (8000814 <State+0x31c>)
		  				  					  uart_cmd.zw_uartcommandset.cmd = COMMAND_LEAK;
 8000708:	3312      	adds	r3, #18
 800070a:	70ab      	strb	r3, [r5, #2]
		  				  					  uart_cmd.zw_uartcommandset.type =ZW_NON_LEAK;
 800070c:	3b10      	subs	r3, #16
 800070e:	706b      	strb	r3, [r5, #1]
		  				  					  uart_cmd.zw_uartcommandset.value1 = ZW_NON_LEAK;
 8000710:	70eb      	strb	r3, [r5, #3]
		  				  					 if(ZW_UART_transmit(uart_cmd)){
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <State+0x33c>)
		  				  					  uart_cmd.zw_uartcommandset.length = 3;
 8000714:	7028      	strb	r0, [r5, #0]
		  				  					 if(ZW_UART_transmit(uart_cmd)){
 8000716:	4318      	orrs	r0, r3
 8000718:	796b      	ldrb	r3, [r5, #5]
 800071a:	7929      	ldrb	r1, [r5, #4]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	430b      	orrs	r3, r1
 8000720:	79a9      	ldrb	r1, [r5, #6]
 8000722:	7a2a      	ldrb	r2, [r5, #8]
 8000724:	0409      	lsls	r1, r1, #16
 8000726:	430b      	orrs	r3, r1
 8000728:	79e9      	ldrb	r1, [r5, #7]
 800072a:	7b6e      	ldrb	r6, [r5, #13]
 800072c:	0609      	lsls	r1, r1, #24
 800072e:	4319      	orrs	r1, r3
 8000730:	7a6b      	ldrb	r3, [r5, #9]
 8000732:	0236      	lsls	r6, r6, #8
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	4313      	orrs	r3, r2
 8000738:	7aaa      	ldrb	r2, [r5, #10]
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	4313      	orrs	r3, r2
 800073e:	7aea      	ldrb	r2, [r5, #11]
 8000740:	0612      	lsls	r2, r2, #24
 8000742:	431a      	orrs	r2, r3
 8000744:	7b2b      	ldrb	r3, [r5, #12]
 8000746:	431e      	orrs	r6, r3
 8000748:	7bab      	ldrb	r3, [r5, #14]
 800074a:	041b      	lsls	r3, r3, #16
 800074c:	431e      	orrs	r6, r3
 800074e:	7beb      	ldrb	r3, [r5, #15]
 8000750:	061b      	lsls	r3, r3, #24
 8000752:	4333      	orrs	r3, r6
 8000754:	f000 fa1a 	bl	8000b8c <ZW_UART_transmit>
 8000758:	2800      	cmp	r0, #0
 800075a:	d009      	beq.n	8000770 <State+0x278>
		  				  					  gpio_SetPin(Led_leak, Off);
 800075c:	2101      	movs	r1, #1
 800075e:	2020      	movs	r0, #32
 8000760:	f7ff fe94 	bl	800048c <gpio_SetPin>
		  				  					  Valve_state = VALVE_IDLE;
 8000764:	2301      	movs	r3, #1
 8000766:	4a29      	ldr	r2, [pc, #164]	; (800080c <State+0x314>)
 8000768:	7013      	strb	r3, [r2, #0]
		  				  					  leak_state = 0;
 800076a:	2200      	movs	r2, #0
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <State+0x330>)
 800076e:	701a      	strb	r2, [r3, #0]
		  			  if(next_state == VALVE_BEGIN){
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <State+0x324>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d000      	beq.n	800077a <State+0x282>
 8000778:	e6fb      	b.n	8000572 <State+0x7a>
		  				  Valve_state = VALVE_BEGIN;
 800077a:	2300      	movs	r3, #0
 800077c:	4a23      	ldr	r2, [pc, #140]	; (800080c <State+0x314>)
 800077e:	7013      	strb	r3, [r2, #0]
		  				  next_state = VALVE_IDLE;
 8000780:	2201      	movs	r2, #1
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <State+0x324>)
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	e6f4      	b.n	8000572 <State+0x7a>
	switch (state){
 8000788:	2080      	movs	r0, #128	; 0x80
 800078a:	f7ff fd73 	bl	8000274 <gpio_SetPin.part.0>
		  			  if( (next_state == VALVE_CLOSE) || (Btn_read(Btn_close)== Pressed)){
 800078e:	4e23      	ldr	r6, [pc, #140]	; (800081c <State+0x324>)
 8000790:	7833      	ldrb	r3, [r6, #0]
 8000792:	2b05      	cmp	r3, #5
 8000794:	d133      	bne.n	80007fe <State+0x306>
		  						  uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 8000796:	2311      	movs	r3, #17
		  				  	  	  uart_cmd.zw_uartcommandset.length = 3;
 8000798:	2003      	movs	r0, #3
 800079a:	4d1e      	ldr	r5, [pc, #120]	; (8000814 <State+0x31c>)
		  						  uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 800079c:	70ab      	strb	r3, [r5, #2]
		  						  uart_cmd.zw_uartcommandset.type =ZW_VALVE_SET;
 800079e:	3b0f      	subs	r3, #15
 80007a0:	706b      	strb	r3, [r5, #1]
		  						  uart_cmd.zw_uartcommandset.value1 = ZW_VALVE_OFF;
 80007a2:	3302      	adds	r3, #2
 80007a4:	70eb      	strb	r3, [r5, #3]
		  						  if(ZW_UART_transmit(uart_cmd)){
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <State+0x32c>)
		  				  	  	  uart_cmd.zw_uartcommandset.length = 3;
 80007a8:	7028      	strb	r0, [r5, #0]
		  						  if(ZW_UART_transmit(uart_cmd)){
 80007aa:	4318      	orrs	r0, r3
 80007ac:	796b      	ldrb	r3, [r5, #5]
 80007ae:	7929      	ldrb	r1, [r5, #4]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	430b      	orrs	r3, r1
 80007b4:	79a9      	ldrb	r1, [r5, #6]
 80007b6:	7a2a      	ldrb	r2, [r5, #8]
 80007b8:	0409      	lsls	r1, r1, #16
 80007ba:	430b      	orrs	r3, r1
 80007bc:	79e9      	ldrb	r1, [r5, #7]
 80007be:	7b6f      	ldrb	r7, [r5, #13]
 80007c0:	0609      	lsls	r1, r1, #24
 80007c2:	4319      	orrs	r1, r3
 80007c4:	7a6b      	ldrb	r3, [r5, #9]
 80007c6:	023f      	lsls	r7, r7, #8
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	4313      	orrs	r3, r2
 80007cc:	7aaa      	ldrb	r2, [r5, #10]
 80007ce:	0412      	lsls	r2, r2, #16
 80007d0:	4313      	orrs	r3, r2
 80007d2:	7aea      	ldrb	r2, [r5, #11]
 80007d4:	0612      	lsls	r2, r2, #24
 80007d6:	431a      	orrs	r2, r3
 80007d8:	7b2b      	ldrb	r3, [r5, #12]
 80007da:	431f      	orrs	r7, r3
 80007dc:	7bab      	ldrb	r3, [r5, #14]
 80007de:	041b      	lsls	r3, r3, #16
 80007e0:	431f      	orrs	r7, r3
 80007e2:	7beb      	ldrb	r3, [r5, #15]
 80007e4:	061b      	lsls	r3, r3, #24
 80007e6:	433b      	orrs	r3, r7
 80007e8:	f000 f9d0 	bl	8000b8c <ZW_UART_transmit>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d100      	bne.n	80007f2 <State+0x2fa>
 80007f0:	e736      	b.n	8000660 <State+0x168>
		  							  Valve_state = VALVE_CLOSE;
 80007f2:	2305      	movs	r3, #5
		  							  next_state = VALVE_IDLE;
 80007f4:	2001      	movs	r0, #1
		  							  Valve_state = VALVE_CLOSE;
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <State+0x314>)
		  							  next_state = VALVE_IDLE;
 80007f8:	7030      	strb	r0, [r6, #0]
		  							  Valve_state = VALVE_CLOSE;
 80007fa:	7013      	strb	r3, [r2, #0]
		  							  next_state = VALVE_IDLE;
 80007fc:	e728      	b.n	8000650 <State+0x158>
		  			  if( (next_state == VALVE_CLOSE) || (Btn_read(Btn_close)== Pressed)){
 80007fe:	2010      	movs	r0, #16
 8000800:	f7ff fe32 	bl	8000468 <Btn_read>
 8000804:	2800      	cmp	r0, #0
 8000806:	d0c6      	beq.n	8000796 <State+0x29e>
 8000808:	e72a      	b.n	8000660 <State+0x168>
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	2000002e 	.word	0x2000002e
 8000810:	2000002f 	.word	0x2000002f
 8000814:	200001ca 	.word	0x200001ca
 8000818:	02020200 	.word	0x02020200
 800081c:	20000000 	.word	0x20000000
 8000820:	03110200 	.word	0x03110200
 8000824:	04110200 	.word	0x04110200
 8000828:	20000030 	.word	0x20000030
 800082c:	2000002d 	.word	0x2000002d
 8000830:	01120100 	.word	0x01120100
 8000834:	02120200 	.word	0x02120200
		  			  gpio_SetPin(Led_open_close, Off);
 8000838:	2101      	movs	r1, #1
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff fe26 	bl	800048c <gpio_SetPin>
		  			  if( (next_state == VALVE_OPEN) || (Btn_read(Btn_open)== Pressed)){
 8000840:	4e24      	ldr	r6, [pc, #144]	; (80008d4 <State+0x3dc>)
 8000842:	7833      	ldrb	r3, [r6, #0]
 8000844:	2b04      	cmp	r3, #4
 8000846:	d134      	bne.n	80008b2 <State+0x3ba>
		  							uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 8000848:	2311      	movs	r3, #17
		  							uart_cmd.zw_uartcommandset.length = 3;
 800084a:	2003      	movs	r0, #3
 800084c:	4d22      	ldr	r5, [pc, #136]	; (80008d8 <State+0x3e0>)
		  							uart_cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 800084e:	70ab      	strb	r3, [r5, #2]
		  							uart_cmd.zw_uartcommandset.type =ZW_VALVE_SET;
 8000850:	3b0f      	subs	r3, #15
 8000852:	706b      	strb	r3, [r5, #1]
		  							if(ZW_UART_transmit(uart_cmd)){
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <State+0x3e4>)
		  							uart_cmd.zw_uartcommandset.length = 3;
 8000856:	7028      	strb	r0, [r5, #0]
		  							uart_cmd.zw_uartcommandset.value1 = ZW_VALVE_ON;
 8000858:	70e8      	strb	r0, [r5, #3]
		  							if(ZW_UART_transmit(uart_cmd)){
 800085a:	4318      	orrs	r0, r3
 800085c:	796b      	ldrb	r3, [r5, #5]
 800085e:	7929      	ldrb	r1, [r5, #4]
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	430b      	orrs	r3, r1
 8000864:	79a9      	ldrb	r1, [r5, #6]
 8000866:	7a2a      	ldrb	r2, [r5, #8]
 8000868:	0409      	lsls	r1, r1, #16
 800086a:	430b      	orrs	r3, r1
 800086c:	79e9      	ldrb	r1, [r5, #7]
 800086e:	7b6f      	ldrb	r7, [r5, #13]
 8000870:	0609      	lsls	r1, r1, #24
 8000872:	4319      	orrs	r1, r3
 8000874:	7a6b      	ldrb	r3, [r5, #9]
 8000876:	023f      	lsls	r7, r7, #8
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	4313      	orrs	r3, r2
 800087c:	7aaa      	ldrb	r2, [r5, #10]
 800087e:	0412      	lsls	r2, r2, #16
 8000880:	4313      	orrs	r3, r2
 8000882:	7aea      	ldrb	r2, [r5, #11]
 8000884:	0612      	lsls	r2, r2, #24
 8000886:	431a      	orrs	r2, r3
 8000888:	7b2b      	ldrb	r3, [r5, #12]
 800088a:	431f      	orrs	r7, r3
 800088c:	7bab      	ldrb	r3, [r5, #14]
 800088e:	041b      	lsls	r3, r3, #16
 8000890:	431f      	orrs	r7, r3
 8000892:	7beb      	ldrb	r3, [r5, #15]
 8000894:	061b      	lsls	r3, r3, #24
 8000896:	433b      	orrs	r3, r7
 8000898:	f000 f978 	bl	8000b8c <ZW_UART_transmit>
 800089c:	2800      	cmp	r0, #0
 800089e:	d100      	bne.n	80008a2 <State+0x3aa>
 80008a0:	e6de      	b.n	8000660 <State+0x168>
		  								Valve_state = VALVE_OPEN;
 80008a2:	2304      	movs	r3, #4
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <State+0x3e8>)
 80008a6:	7013      	strb	r3, [r2, #0]
		  								next_state = VALVE_IDLE;
 80008a8:	3b03      	subs	r3, #3
 80008aa:	7033      	strb	r3, [r6, #0]
	switch (state){
 80008ac:	f7ff fcea 	bl	8000284 <Valve_control.part.0>
 80008b0:	e6d6      	b.n	8000660 <State+0x168>
	switch (Btn){
 80008b2:	f7ff fcd3 	bl	800025c <Btn_read.part.0>
		  			  if( (next_state == VALVE_OPEN) || (Btn_read(Btn_open)== Pressed)){
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d0c6      	beq.n	8000848 <State+0x350>
 80008ba:	e6d1      	b.n	8000660 <State+0x168>
		  			  					  Valve_state = VALVE_IDLE;
 80008bc:	2301      	movs	r3, #1
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <State+0x3e8>)
		  			  					  leak_state = 1;
 80008c0:	703b      	strb	r3, [r7, #0]
		  			  					  Valve_state = VALVE_IDLE;
 80008c2:	7013      	strb	r3, [r2, #0]
		  			  					  leak_state = 1;
 80008c4:	e713      	b.n	80006ee <State+0x1f6>
		  			  if( (leak_state == 1) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET ){
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <State+0x3ec>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d000      	beq.n	80008d0 <State+0x3d8>
 80008ce:	e74f      	b.n	8000770 <State+0x278>
 80008d0:	e70d      	b.n	80006ee <State+0x1f6>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000000 	.word	0x20000000
 80008d8:	200001ca 	.word	0x200001ca
 80008dc:	03110200 	.word	0x03110200
 80008e0:	2000002e 	.word	0x2000002e
 80008e4:	20000030 	.word	0x20000030

080008e8 <main>:
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80008ec:	f000 fa36 	bl	8000d5c <HAL_Init>
  SystemClock_Config();
 80008f0:	f7ff fd88 	bl	8000404 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	2214      	movs	r2, #20
 80008f6:	2100      	movs	r1, #0
 80008f8:	a805      	add	r0, sp, #20
 80008fa:	f001 fd68 	bl	80023ce <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	2080      	movs	r0, #128	; 0x80
 8000900:	4b58      	ldr	r3, [pc, #352]	; (8000a64 <main+0x17c>)
 8000902:	03c0      	lsls	r0, r0, #15
 8000904:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2600      	movs	r6, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000908:	4301      	orrs	r1, r0
 800090a:	6159      	str	r1, [r3, #20]
 800090c:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800090e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000910:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	6959      	ldr	r1, [r3, #20]
 800091a:	0280      	lsls	r0, r0, #10
 800091c:	4301      	orrs	r1, r0
 800091e:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000920:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000924:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8000928:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	9201      	str	r2, [sp, #4]
 800092c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8000930:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	430a      	orrs	r2, r1
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8000938:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	400b      	ands	r3, r1
 800093c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800093e:	21ec      	movs	r1, #236	; 0xec
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8000942:	f000 fb8d 	bl	8001060 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	a905      	add	r1, sp, #20
 800094e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000950:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000954:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f000 fac7 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095a:	2384      	movs	r3, #132	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800095e:	2402      	movs	r4, #2
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000960:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	a905      	add	r1, sp, #20
 8000964:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000966:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000968:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f000 fabc 	bl	8000ee8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8000970:	23ec      	movs	r3, #236	; 0xec
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8000974:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000978:	3be9      	subs	r3, #233	; 0xe9
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f000 fab1 	bl	8000ee8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000988:	2510      	movs	r5, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	a905      	add	r1, sp, #20
 800098c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000990:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f000 faa8 	bl	8000ee8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	4833      	ldr	r0, [pc, #204]	; (8000a68 <main+0x180>)
 800099a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800099c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f000 faa1 	bl	8000ee8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009a6:	0032      	movs	r2, r6
 80009a8:	0031      	movs	r1, r6
 80009aa:	2005      	movs	r0, #5
 80009ac:	f000 fa0a 	bl	8000dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009b0:	2005      	movs	r0, #5
 80009b2:	f000 fa31 	bl	8000e18 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80009b6:	4c2d      	ldr	r4, [pc, #180]	; (8000a6c <main+0x184>)
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <main+0x188>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	0020      	movs	r0, r4
  huart1.Instance = USART1;
 80009bc:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 80009be:	2396      	movs	r3, #150	; 0x96
 80009c0:	019b      	lsls	r3, r3, #6
 80009c2:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	60a6      	str	r6, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	60e6      	str	r6, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	6126      	str	r6, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009cc:	61a6      	str	r6, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ce:	61e6      	str	r6, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d0:	6226      	str	r6, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	6266      	str	r6, [r4, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d6:	f001 fc13 	bl	8002200 <HAL_UART_Init>
 80009da:	1e06      	subs	r6, r0, #0
 80009dc:	d001      	beq.n	80009e2 <main+0xfa>
 80009de:	b672      	cpsid	i
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <main+0xf8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	002a      	movs	r2, r5
 80009e4:	0001      	movs	r1, r0
 80009e6:	a805      	add	r0, sp, #20
 80009e8:	f001 fcf1 	bl	80023ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	2208      	movs	r2, #8
 80009ee:	0031      	movs	r1, r6
 80009f0:	a803      	add	r0, sp, #12
 80009f2:	f001 fcec 	bl	80023ce <memset>
  htim1.Instance = TIM1;
 80009f6:	4d1f      	ldr	r5, [pc, #124]	; (8000a74 <main+0x18c>)
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <main+0x190>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009fa:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 80009fc:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 8;
 80009fe:	2308      	movs	r3, #8
 8000a00:	606b      	str	r3, [r5, #4]
  htim1.Init.Period = 8000;
 8000a02:	23fa      	movs	r3, #250	; 0xfa
 8000a04:	015b      	lsls	r3, r3, #5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	60ae      	str	r6, [r5, #8]
  htim1.Init.Period = 8000;
 8000a08:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	612e      	str	r6, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0c:	616e      	str	r6, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a10:	f000 fefe 	bl	8001810 <HAL_TIM_Base_Init>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d001      	beq.n	8000a1c <main+0x134>
 8000a18:	b672      	cpsid	i
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <main+0x132>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1e:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a22:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a26:	f000 ff27 	bl	8001878 <HAL_TIM_ConfigClockSource>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d001      	beq.n	8000a32 <main+0x14a>
 8000a2e:	b672      	cpsid	i
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0x148>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a36:	a903      	add	r1, sp, #12
 8000a38:	0028      	movs	r0, r5
 8000a3a:	f000 ffbd 	bl	80019b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d001      	beq.n	8000a46 <main+0x15e>
 8000a42:	b672      	cpsid	i
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x15c>
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_receive, 1);
 8000a46:	003a      	movs	r2, r7
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <main+0x194>)
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f001 fc5c 	bl	8002308 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000a50:	2090      	movs	r0, #144	; 0x90
 8000a52:	003a      	movs	r2, r7
 8000a54:	21e0      	movs	r1, #224	; 0xe0
 8000a56:	05c0      	lsls	r0, r0, #23
 8000a58:	f000 fb02 	bl	8001060 <HAL_GPIO_WritePin>
	  State();
 8000a5c:	f7ff fd4c 	bl	80004f8 <State>
  while (1)
 8000a60:	e7fc      	b.n	8000a5c <main+0x174>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	20000034 	.word	0x20000034
 8000a70:	40013800 	.word	0x40013800
 8000a74:	20000180 	.word	0x20000180
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	200000be 	.word	0x200000be

08000a80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	2001      	movs	r0, #1
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_MspInit+0x2c>)
{
 8000a84:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	6999      	ldr	r1, [r3, #24]
 8000a88:	4301      	orrs	r1, r0
 8000a8a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4002      	ands	r2, r0
 8000a94:	9200      	str	r2, [sp, #0]
 8000a96:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	69da      	ldr	r2, [r3, #28]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	61da      	str	r2, [r3, #28]
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	400b      	ands	r3, r1
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	b002      	add	sp, #8
 8000aa8:	4770      	bx	lr
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_TIM_Base_MspInit+0x24>)
 8000ab2:	6802      	ldr	r2, [r0, #0]
{
 8000ab4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d109      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	2080      	movs	r0, #128	; 0x80
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_TIM_Base_MspInit+0x28>)
 8000abe:	0100      	lsls	r0, r0, #4
 8000ac0:	6991      	ldr	r1, [r2, #24]
 8000ac2:	4301      	orrs	r1, r0
 8000ac4:	6191      	str	r1, [r2, #24]
 8000ac6:	6993      	ldr	r3, [r2, #24]
 8000ac8:	4003      	ands	r3, r0
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ace:	b002      	add	sp, #8
 8000ad0:	4770      	bx	lr
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b510      	push	{r4, lr}
 8000ade:	0004      	movs	r4, r0
 8000ae0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	2214      	movs	r2, #20
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	a803      	add	r0, sp, #12
 8000ae8:	f001 fc71 	bl	80023ce <memset>
  if(huart->Instance==USART1)
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x74>)
 8000aee:	6822      	ldr	r2, [r4, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d12a      	bne.n	8000b4a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_UART_MspInit+0x78>)
 8000af8:	01c0      	lsls	r0, r0, #7
 8000afa:	6999      	ldr	r1, [r3, #24]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	4301      	orrs	r1, r0
 8000b00:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b04:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b08:	4002      	ands	r2, r0
 8000b0a:	9201      	str	r2, [sp, #4]
 8000b0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	430a      	orrs	r2, r1
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b20:	23c0      	movs	r3, #192	; 0xc0
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b30:	3b02      	subs	r3, #2
 8000b32:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f000 f9d7 	bl	8000ee8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b3a:	201b      	movs	r0, #27
 8000b3c:	0022      	movs	r2, r4
 8000b3e:	0021      	movs	r1, r4
 8000b40:	f000 f940 	bl	8000dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b44:	201b      	movs	r0, #27
 8000b46:	f000 f967 	bl	8000e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b4a:	b008      	add	sp, #32
 8000b4c:	bd10      	pop	{r4, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40013800 	.word	0x40013800
 8000b54:	40021000 	.word	0x40021000

08000b58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler>

08000b5a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler>

08000b5c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 f90b 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bd10      	pop	{r4, pc}

08000b68 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000b68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fa7e 	bl	800106c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 fa7b 	bl	800106c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b76:	bd10      	pop	{r4, pc}

08000b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b7a:	4802      	ldr	r0, [pc, #8]	; (8000b84 <USART1_IRQHandler+0xc>)
 8000b7c:	f000 ff80 	bl	8001a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000034 	.word	0x20000034

08000b88 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b88:	4770      	bx	lr
	...

08000b8c <ZW_UART_transmit>:
**    Side effects:
**
**--------------------------------------------------------------------------*/


BOOL ZW_UART_transmit(ZW_UART_COMMAND cmd){
 8000b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8e:	b08b      	sub	sp, #44	; 0x2c
 8000b90:	0c06      	lsrs	r6, r0, #16
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	b2c2      	uxtb	r2, r0
 8000b96:	9101      	str	r1, [sp, #4]
 8000b98:	9303      	str	r3, [sp, #12]
	uint8_t command[20];

	uint8_t bChecksum = 0xFF;


	command[0] = SOF;
 8000b9a:	a905      	add	r1, sp, #20
	command[1] = cmd.zw_uartcommand.length + 3;
 8000b9c:	1cd3      	adds	r3, r2, #3
		t_command++;
	}

*/

	command[4] = cmd.zw_uartcommand.cmd;
 8000b9e:	b2f6      	uxtb	r6, r6
	command[1] = cmd.zw_uartcommand.length + 3;
 8000ba0:	b2db      	uxtb	r3, r3
	command[4] = cmd.zw_uartcommand.cmd;
 8000ba2:	710e      	strb	r6, [r1, #4]
BOOL ZW_UART_transmit(ZW_UART_COMMAND cmd){
 8000ba4:	0a05      	lsrs	r5, r0, #8
	command[6] = cmd.zw_uartcommandset.value1;
	bChecksum ^= command[6];



	command[7] = bChecksum;
 8000ba6:	4056      	eors	r6, r2
 8000ba8:	405e      	eors	r6, r3
	command[5] = cmd.zw_uartcommand.type;
 8000baa:	b2ed      	uxtb	r5, r5
 8000bac:	714d      	strb	r5, [r1, #5]
	command[7] = bChecksum;
 8000bae:	4075      	eors	r5, r6
 8000bb0:	2602      	movs	r6, #2
	command[1] = cmd.zw_uartcommand.length + 3;
 8000bb2:	704b      	strb	r3, [r1, #1]
	HAL_UART_Transmit(&huart1,(uint8_t *)command, cmd.zw_uartcommand.length + 5, 1000);
 8000bb4:	23fa      	movs	r3, #250	; 0xfa
	command[0] = SOF;
 8000bb6:	2401      	movs	r4, #1
	command[6] = cmd.zw_uartcommandset.value1;
 8000bb8:	0e07      	lsrs	r7, r0, #24
 8000bba:	718f      	strb	r7, [r1, #6]
	command[7] = bChecksum;
 8000bbc:	4276      	negs	r6, r6
 8000bbe:	406f      	eors	r7, r5
	command[3] = cmd.zw_uartcommand.length;
 8000bc0:	70ca      	strb	r2, [r1, #3]
BOOL ZW_UART_transmit(ZW_UART_COMMAND cmd){
 8000bc2:	9000      	str	r0, [sp, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)command, cmd.zw_uartcommand.length + 5, 1000);
 8000bc4:	3205      	adds	r2, #5
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <ZW_UART_transmit+0x68>)
	command[7] = bChecksum;
 8000bca:	4077      	eors	r7, r6
	command[0] = SOF;
 8000bcc:	700c      	strb	r4, [r1, #0]
	command[2] = 0x01;
 8000bce:	708c      	strb	r4, [r1, #2]
	command[7] = bChecksum;
 8000bd0:	71cf      	strb	r7, [r1, #7]
	HAL_UART_Transmit(&huart1,(uint8_t *)command, cmd.zw_uartcommand.length + 5, 1000);
 8000bd2:	f001 fa71 	bl	80020b8 <HAL_UART_Transmit>
	AckNakNeeded = TRUE;
	AckNak = NAK;
 8000bd6:	2115      	movs	r1, #21
	AckNakNeeded = TRUE;
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <ZW_UART_transmit+0x6c>)
	AckNak = NAK;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <ZW_UART_transmit+0x70>)
	AckNakNeeded = TRUE;
 8000bdc:	7014      	strb	r4, [r2, #0]
	AckNak = NAK;
 8000bde:	7019      	strb	r1, [r3, #0]

	for(uint8_t res_time; res_time < 100000; i++){

		if(AckNakNeeded == FALSE){
 8000be0:	7811      	ldrb	r1, [r2, #0]
 8000be2:	b2c8      	uxtb	r0, r1
 8000be4:	2900      	cmp	r1, #0
 8000be6:	d003      	beq.n	8000bf0 <ZW_UART_transmit+0x64>
			break;
		}

		if(AckNak == ACK)
 8000be8:	7819      	ldrb	r1, [r3, #0]
 8000bea:	2906      	cmp	r1, #6
 8000bec:	d1f8      	bne.n	8000be0 <ZW_UART_transmit+0x54>
		{
			return TRUE;
 8000bee:	2001      	movs	r0, #1
		}
	}
	return FALSE;


}
 8000bf0:	b00b      	add	sp, #44	; 0x2c
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	20000034 	.word	0x20000034
 8000bf8:	20000031 	.word	0x20000031
 8000bfc:	20000008 	.word	0x20000008

08000c00 <uart_check_protocol>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*)byte, 1, 1000);
}


T_CON_TYPE uart_check_protocol(uint8_t c , BYTE acknowledge){
 8000c00:	b570      	push	{r4, r5, r6, lr}

	static T_CON_TYPE retval = conIdle;

		switch (con_state)
 8000c02:	4a28      	ldr	r2, [pc, #160]	; (8000ca4 <uart_check_protocol+0xa4>)
T_CON_TYPE uart_check_protocol(uint8_t c , BYTE acknowledge){
 8000c04:	0003      	movs	r3, r0
		switch (con_state)
 8000c06:	7810      	ldrb	r0, [r2, #0]
 8000c08:	4c27      	ldr	r4, [pc, #156]	; (8000ca8 <uart_check_protocol+0xa8>)
 8000c0a:	2805      	cmp	r0, #5
 8000c0c:	d80d      	bhi.n	8000c2a <uart_check_protocol+0x2a>
 8000c0e:	f7ff fa85 	bl	800011c <__gnu_thumb1_case_uqi>
 8000c12:	1d03      	.short	0x1d03
 8000c14:	3e2b2923 	.word	0x3e2b2923
		{
		case stateSOFHunt:
			if(c == SOF){
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d108      	bne.n	8000c2e <uart_check_protocol+0x2e>
				bChecksum_RX = 0xff;
 8000c1c:	20ff      	movs	r0, #255	; 0xff
 8000c1e:	4923      	ldr	r1, [pc, #140]	; (8000cac <uart_check_protocol+0xac>)
 8000c20:	7008      	strb	r0, [r1, #0]
				serBufLen = 0;
 8000c22:	2000      	movs	r0, #0
 8000c24:	4922      	ldr	r1, [pc, #136]	; (8000cb0 <uart_check_protocol+0xb0>)
 8000c26:	7008      	strb	r0, [r1, #0]
					retval = conFrameReceived;
					con_state = stateSOFHunt;
				}
				else{
					retval = conFrameErr;
					con_state = stateSOFHunt;
 8000c28:	7013      	strb	r3, [r2, #0]
				}
			}
			break;
		}
	return retval;
 8000c2a:	7820      	ldrb	r0, [r4, #0]
}
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
				if (AckNakNeeded)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <uart_check_protocol+0xb4>)
 8000c30:	7811      	ldrb	r1, [r2, #0]
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d0f9      	beq.n	8000c2a <uart_check_protocol+0x2a>
				                retval = conFrameSent;
 8000c36:	2102      	movs	r1, #2
				              if (c == ACK)
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d002      	beq.n	8000c42 <uart_check_protocol+0x42>
				              else if (c == NAK)
 8000c3c:	2b15      	cmp	r3, #21
 8000c3e:	d1f4      	bne.n	8000c2a <uart_check_protocol+0x2a>
				                retval = conTxTimeout;
 8000c40:	2105      	movs	r1, #5
 8000c42:	7021      	strb	r1, [r4, #0]
				                AckNakNeeded = FALSE;
 8000c44:	2100      	movs	r1, #0
 8000c46:	7011      	strb	r1, [r2, #0]
				                AckNak = NAK;
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <uart_check_protocol+0xb8>)
 8000c4a:	e7ed      	b.n	8000c28 <uart_check_protocol+0x28>
			 if (( c< FRAME_LENGTH_MIN) || (c> FRAME_LENGTH_MAX))
 8000c4c:	1ed9      	subs	r1, r3, #3
 8000c4e:	b2c9      	uxtb	r1, r1
 8000c50:	29b1      	cmp	r1, #177	; 0xb1
 8000c52:	d901      	bls.n	8000c58 <uart_check_protocol+0x58>
					con_state = stateSOFHunt;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e7e7      	b.n	8000c28 <uart_check_protocol+0x28>
          if(serBufLen &&  (c > COMMAND_END))
 8000c58:	4915      	ldr	r1, [pc, #84]	; (8000cb0 <uart_check_protocol+0xb0>)
 8000c5a:	7809      	ldrb	r1, [r1, #0]
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d001      	beq.n	8000c64 <uart_check_protocol+0x64>
 8000c60:	2b13      	cmp	r3, #19
 8000c62:	d8f7      	bhi.n	8000c54 <uart_check_protocol+0x54>
        	con_state++;
 8000c64:	3001      	adds	r0, #1
 8000c66:	7010      	strb	r0, [r2, #0]
				if(serBufLen < SERBUF_MAX){
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <uart_check_protocol+0xb0>)
 8000c6a:	7801      	ldrb	r1, [r0, #0]
 8000c6c:	29b3      	cmp	r1, #179	; 0xb3
 8000c6e:	d80b      	bhi.n	8000c88 <uart_check_protocol+0x88>
					serBuf[serBufLen] = c;
 8000c70:	4d12      	ldr	r5, [pc, #72]	; (8000cbc <uart_check_protocol+0xbc>)
					bChecksum_RX ^= c;
 8000c72:	4e0e      	ldr	r6, [pc, #56]	; (8000cac <uart_check_protocol+0xac>)
					serBuf[serBufLen] = c;
 8000c74:	546b      	strb	r3, [r5, r1]
					serBufLen++;
 8000c76:	3101      	adds	r1, #1
 8000c78:	b2c9      	uxtb	r1, r1
 8000c7a:	7001      	strb	r1, [r0, #0]
					bChecksum_RX ^= c;
 8000c7c:	7830      	ldrb	r0, [r6, #0]
 8000c7e:	4043      	eors	r3, r0
 8000c80:	7033      	strb	r3, [r6, #0]
					if (serBufLen >= serFrameLen)
 8000c82:	782b      	ldrb	r3, [r5, #0]
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d3d0      	bcc.n	8000c2a <uart_check_protocol+0x2a>
					con_state++;
 8000c88:	7813      	ldrb	r3, [r2, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	e7cc      	b.n	8000c28 <uart_check_protocol+0x28>
			if(acknowledge){
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d0cb      	beq.n	8000c2a <uart_check_protocol+0x2a>
				if(c == bChecksum_RX)
 8000c92:	4906      	ldr	r1, [pc, #24]	; (8000cac <uart_check_protocol+0xac>)
 8000c94:	7809      	ldrb	r1, [r1, #0]
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d102      	bne.n	8000ca0 <uart_check_protocol+0xa0>
					retval = conFrameReceived;
 8000c9a:	2301      	movs	r3, #1
					retval = conFrameErr;
 8000c9c:	7023      	strb	r3, [r4, #0]
 8000c9e:	e7d9      	b.n	8000c54 <uart_check_protocol+0x54>
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e7fb      	b.n	8000c9c <uart_check_protocol+0x9c>
 8000ca4:	20000032 	.word	0x20000032
 8000ca8:	20000033 	.word	0x20000033
 8000cac:	200000bd 	.word	0x200000bd
 8000cb0:	200001da 	.word	0x200001da
 8000cb4:	20000031 	.word	0x20000031
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200000cc 	.word	0x200000cc

08000cc0 <Reset_Handler>:
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x2>)
 8000cc2:	4685      	mov	sp, r0
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopForever+0x6>)
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopForever+0xa>)
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopForever+0xe>)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:
 8000cce:	58d4      	ldr	r4, [r2, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:
 8000cd4:	18c4      	adds	r4, r0, r3
 8000cd6:	428c      	cmp	r4, r1
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopForever+0x12>)
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopForever+0x16>)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:
 8000ce6:	42a2      	cmp	r2, r4
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>
 8000cea:	f7ff ff4d 	bl	8000b88 <SystemInit>
 8000cee:	f001 fb41 	bl	8002374 <__libc_init_array>
 8000cf2:	f7ff fdf9 	bl	80008e8 <main>

08000cf6 <LoopForever>:
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
 8000cf8:	20001000 	.word	0x20001000
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000010 	.word	0x20000010
 8000d04:	08002440 	.word	0x08002440
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	200001f4 	.word	0x200001f4

08000d10 <ADC1_IRQHandler>:
 8000d10:	e7fe      	b.n	8000d10 <ADC1_IRQHandler>
	...

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	20fa      	movs	r0, #250	; 0xfa
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_InitTick+0x3c>)
 8000d1c:	0080      	lsls	r0, r0, #2
 8000d1e:	7819      	ldrb	r1, [r3, #0]
 8000d20:	f7ff fa10 	bl	8000144 <__udivsi3>
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_InitTick+0x40>)
 8000d26:	0001      	movs	r1, r0
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f7ff fa0b 	bl	8000144 <__udivsi3>
 8000d2e:	f000 f87f 	bl	8000e30 <HAL_SYSTICK_Config>
 8000d32:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000d34:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d36:	2c00      	cmp	r4, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	2d03      	cmp	r5, #3
 8000d3c:	d807      	bhi.n	8000d4e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	3802      	subs	r0, #2
 8000d40:	0022      	movs	r2, r4
 8000d42:	0029      	movs	r1, r5
 8000d44:	f000 f83e 	bl	8000dc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	0020      	movs	r0, r4
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_InitTick+0x44>)
 8000d4c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	20000009 	.word	0x20000009
 8000d54:	20000004 	.word	0x20000004
 8000d58:	2000000c 	.word	0x2000000c

08000d5c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_Init+0x1c>)
{
 8000d60:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d62:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d64:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d66:	430b      	orrs	r3, r1
 8000d68:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	f7ff ffd3 	bl	8000d14 <HAL_InitTick>
  HAL_MspInit();
 8000d6e:	f7ff fe87 	bl	8000a80 <HAL_MspInit>
}
 8000d72:	2000      	movs	r0, #0
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_IncTick+0x10>)
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <HAL_IncTick+0x14>)
 8000d80:	6811      	ldr	r1, [r2, #0]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	185b      	adds	r3, r3, r1
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	4770      	bx	lr
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	200001f0 	.word	0x200001f0
 8000d90:	20000009 	.word	0x20000009

08000d94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d94:	4b01      	ldr	r3, [pc, #4]	; (8000d9c <HAL_GetTick+0x8>)
 8000d96:	6818      	ldr	r0, [r3, #0]
}
 8000d98:	4770      	bx	lr
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	200001f0 	.word	0x200001f0

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fff6 	bl	8000d94 <HAL_GetTick>
 8000da8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	1c63      	adds	r3, r4, #1
 8000dac:	d002      	beq.n	8000db4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_Delay+0x20>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	1b40      	subs	r0, r0, r5
 8000dba:	42a0      	cmp	r0, r4
 8000dbc:	d3fa      	bcc.n	8000db4 <HAL_Delay+0x14>
  {
  }
}
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	20000009 	.word	0x20000009

08000dc4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc4:	b530      	push	{r4, r5, lr}
 8000dc6:	25ff      	movs	r5, #255	; 0xff
 8000dc8:	2403      	movs	r4, #3
 8000dca:	002a      	movs	r2, r5
 8000dcc:	4004      	ands	r4, r0
 8000dce:	00e4      	lsls	r4, r4, #3
 8000dd0:	40a2      	lsls	r2, r4
 8000dd2:	0189      	lsls	r1, r1, #6
 8000dd4:	4029      	ands	r1, r5
 8000dd6:	43d2      	mvns	r2, r2
 8000dd8:	40a1      	lsls	r1, r4
 8000dda:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	db0a      	blt.n	8000df6 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	24c0      	movs	r4, #192	; 0xc0
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_NVIC_SetPriority+0x4c>)
 8000de4:	0880      	lsrs	r0, r0, #2
 8000de6:	0080      	lsls	r0, r0, #2
 8000de8:	18c0      	adds	r0, r0, r3
 8000dea:	00a4      	lsls	r4, r4, #2
 8000dec:	5903      	ldr	r3, [r0, r4]
 8000dee:	401a      	ands	r2, r3
 8000df0:	4311      	orrs	r1, r2
 8000df2:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000df4:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df6:	200f      	movs	r0, #15
 8000df8:	4003      	ands	r3, r0
 8000dfa:	3b08      	subs	r3, #8
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_NVIC_SetPriority+0x50>)
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	181b      	adds	r3, r3, r0
 8000e04:	69d8      	ldr	r0, [r3, #28]
 8000e06:	4002      	ands	r2, r0
 8000e08:	4311      	orrs	r1, r2
 8000e0a:	61d9      	str	r1, [r3, #28]
 8000e0c:	e7f2      	b.n	8000df4 <HAL_NVIC_SetPriority+0x30>
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	db05      	blt.n	8000e28 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1c:	231f      	movs	r3, #31
 8000e1e:	4018      	ands	r0, r3
 8000e20:	3b1e      	subs	r3, #30
 8000e22:	4083      	lsls	r3, r0
 8000e24:	4a01      	ldr	r2, [pc, #4]	; (8000e2c <HAL_NVIC_EnableIRQ+0x14>)
 8000e26:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e28:	4770      	bx	lr
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	1e43      	subs	r3, r0, #1
 8000e34:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d20d      	bcs.n	8000e58 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	6a03      	ldr	r3, [r0, #32]
 8000e46:	0609      	lsls	r1, r1, #24
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e58:	4770      	bx	lr
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	e000e010 	.word	0xe000e010
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e64:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e66:	1c85      	adds	r5, r0, #2
 8000e68:	7feb      	ldrb	r3, [r5, #31]
 8000e6a:	1c44      	adds	r4, r0, #1
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d005      	beq.n	8000e7c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e70:	2304      	movs	r3, #4
 8000e72:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e74:	2300      	movs	r3, #0
    
    return HAL_ERROR;
 8000e76:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000e78:	77e3      	strb	r3, [r4, #31]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8000e7a:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e7c:	210e      	movs	r1, #14
 8000e7e:	6803      	ldr	r3, [r0, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	438a      	bics	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e86:	2201      	movs	r2, #1
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	4391      	bics	r1, r2
 8000e8c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e8e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000e90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000e92:	0010      	movs	r0, r2
 8000e94:	4088      	lsls	r0, r1
 8000e96:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8000e98:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8000e9a:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8000e9c:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8000e9e:	e7ec      	b.n	8000e7a <HAL_DMA_Abort+0x16>

08000ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ea0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea2:	1c84      	adds	r4, r0, #2
 8000ea4:	7fe3      	ldrb	r3, [r4, #31]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d004      	beq.n	8000eb4 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eae:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eb4:	210e      	movs	r1, #14
 8000eb6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eb8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	6819      	ldr	r1, [r3, #0]
 8000ec4:	4391      	bics	r1, r2
 8000ec6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ec8:	0011      	movs	r1, r2
 8000eca:	40a9      	lsls	r1, r5
 8000ecc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000ece:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000ed2:	2400      	movs	r4, #0
 8000ed4:	1883      	adds	r3, r0, r2
 8000ed6:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8000ed8:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8000eda:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000edc:	42a2      	cmp	r2, r4
 8000ede:	d0e7      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000ee0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	0023      	movs	r3, r4
 8000ee4:	e7e4      	b.n	8000eb0 <HAL_DMA_Abort_IT+0x10>
	...

08000ee8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000ee8:	2300      	movs	r3, #0
{
 8000eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eec:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	680a      	ldr	r2, [r1, #0]
 8000ef0:	0014      	movs	r4, r2
 8000ef2:	40dc      	lsrs	r4, r3
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000ef6:	b007      	add	sp, #28
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000efa:	2501      	movs	r5, #1
 8000efc:	0014      	movs	r4, r2
 8000efe:	409d      	lsls	r5, r3
 8000f00:	402c      	ands	r4, r5
 8000f02:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000f04:	422a      	tst	r2, r5
 8000f06:	d100      	bne.n	8000f0a <HAL_GPIO_Init+0x22>
 8000f08:	e095      	b.n	8001036 <HAL_GPIO_Init+0x14e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f0a:	684a      	ldr	r2, [r1, #4]
 8000f0c:	005e      	lsls	r6, r3, #1
 8000f0e:	4694      	mov	ip, r2
 8000f10:	2203      	movs	r2, #3
 8000f12:	4664      	mov	r4, ip
 8000f14:	4022      	ands	r2, r4
 8000f16:	2403      	movs	r4, #3
 8000f18:	40b4      	lsls	r4, r6
 8000f1a:	43e4      	mvns	r4, r4
 8000f1c:	9402      	str	r4, [sp, #8]
 8000f1e:	1e54      	subs	r4, r2, #1
 8000f20:	2c01      	cmp	r4, #1
 8000f22:	d82a      	bhi.n	8000f7a <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8000f24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f26:	9c02      	ldr	r4, [sp, #8]
 8000f28:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2a:	68cc      	ldr	r4, [r1, #12]
 8000f2c:	40b4      	lsls	r4, r6
 8000f2e:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8000f30:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f32:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f34:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	43ac      	bics	r4, r5
 8000f38:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3a:	4664      	mov	r4, ip
 8000f3c:	0924      	lsrs	r4, r4, #4
 8000f3e:	403c      	ands	r4, r7
 8000f40:	409c      	lsls	r4, r3
 8000f42:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000f44:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000f46:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f48:	9c02      	ldr	r4, [sp, #8]
 8000f4a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f4c:	688c      	ldr	r4, [r1, #8]
 8000f4e:	40b4      	lsls	r4, r6
 8000f50:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000f52:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	2a02      	cmp	r2, #2
 8000f56:	d112      	bne.n	8000f7e <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8000f58:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f5a:	2507      	movs	r5, #7
 8000f5c:	00a4      	lsls	r4, r4, #2
 8000f5e:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8000f60:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f62:	9403      	str	r4, [sp, #12]
 8000f64:	240f      	movs	r4, #15
 8000f66:	401d      	ands	r5, r3
 8000f68:	00ad      	lsls	r5, r5, #2
 8000f6a:	40ac      	lsls	r4, r5
 8000f6c:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6e:	690c      	ldr	r4, [r1, #16]
 8000f70:	40ac      	lsls	r4, r5
 8000f72:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000f74:	9c03      	ldr	r4, [sp, #12]
 8000f76:	6227      	str	r7, [r4, #32]
 8000f78:	e001      	b.n	8000f7e <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7a:	2a03      	cmp	r2, #3
 8000f7c:	d1e3      	bne.n	8000f46 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8000f7e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f80:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f82:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f84:	4025      	ands	r5, r4
 8000f86:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f88:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000f8a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8c:	24c0      	movs	r4, #192	; 0xc0
 8000f8e:	4662      	mov	r2, ip
 8000f90:	02a4      	lsls	r4, r4, #10
 8000f92:	4222      	tst	r2, r4
 8000f94:	d04f      	beq.n	8001036 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2501      	movs	r5, #1
 8000f98:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_GPIO_Init+0x154>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f9a:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f9e:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	432c      	orrs	r4, r5
 8000fa2:	6194      	str	r4, [r2, #24]
 8000fa4:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa6:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa8:	402a      	ands	r2, r5
 8000faa:	9205      	str	r2, [sp, #20]
 8000fac:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fae:	4a24      	ldr	r2, [pc, #144]	; (8001040 <HAL_GPIO_Init+0x158>)
 8000fb0:	00a4      	lsls	r4, r4, #2
 8000fb2:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	3502      	adds	r5, #2
 8000fb8:	401d      	ands	r5, r3
 8000fba:	00ad      	lsls	r5, r5, #2
 8000fbc:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fbe:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc0:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	42b8      	cmp	r0, r7
 8000fc6:	d00c      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000fc8:	4f1e      	ldr	r7, [pc, #120]	; (8001044 <HAL_GPIO_Init+0x15c>)
 8000fca:	3201      	adds	r2, #1
 8000fcc:	42b8      	cmp	r0, r7
 8000fce:	d008      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000fd0:	4f1d      	ldr	r7, [pc, #116]	; (8001048 <HAL_GPIO_Init+0x160>)
 8000fd2:	3201      	adds	r2, #1
 8000fd4:	42b8      	cmp	r0, r7
 8000fd6:	d004      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000fd8:	4f1c      	ldr	r7, [pc, #112]	; (800104c <HAL_GPIO_Init+0x164>)
 8000fda:	3201      	adds	r2, #1
 8000fdc:	42b8      	cmp	r0, r7
 8000fde:	d000      	beq.n	8000fe2 <HAL_GPIO_Init+0xfa>
 8000fe0:	3202      	adds	r2, #2
 8000fe2:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe4:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000fea:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_GPIO_Init+0x168>)
        temp &= ~(iocurrent);
 8000fec:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000fee:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000ff0:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8000ff2:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000ff4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff6:	03ff      	lsls	r7, r7, #15
 8000ff8:	d401      	bmi.n	8000ffe <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8000ffa:	0035      	movs	r5, r6
 8000ffc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ffe:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8001000:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001002:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001004:	9d01      	ldr	r5, [sp, #4]
 8001006:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001008:	03bf      	lsls	r7, r7, #14
 800100a:	d401      	bmi.n	8001010 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 800100c:	0035      	movs	r5, r6
 800100e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001010:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001012:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001014:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001016:	9d01      	ldr	r5, [sp, #4]
 8001018:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800101a:	02ff      	lsls	r7, r7, #11
 800101c:	d401      	bmi.n	8001022 <HAL_GPIO_Init+0x13a>
        temp &= ~(iocurrent);
 800101e:	0035      	movs	r5, r6
 8001020:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001022:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001024:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001026:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001028:	9e01      	ldr	r6, [sp, #4]
 800102a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800102c:	02bf      	lsls	r7, r7, #10
 800102e:	d401      	bmi.n	8001034 <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 8001030:	4025      	ands	r5, r4
 8001032:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001034:	60d6      	str	r6, [r2, #12]
    position++;
 8001036:	3301      	adds	r3, #1
 8001038:	e759      	b.n	8000eee <HAL_GPIO_Init+0x6>
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800
 800104c:	48000c00 	.word	0x48000c00
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001054:	6900      	ldr	r0, [r0, #16]
 8001056:	4008      	ands	r0, r1
 8001058:	1e41      	subs	r1, r0, #1
 800105a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800105c:	b2c0      	uxtb	r0, r0
  }
 800105e:	4770      	bx	lr

08001060 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001060:	2a00      	cmp	r2, #0
 8001062:	d001      	beq.n	8001068 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001064:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001066:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001068:	6281      	str	r1, [r0, #40]	; 0x28
}
 800106a:	e7fc      	b.n	8001066 <HAL_GPIO_WritePin+0x6>

0800106c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800106e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	4210      	tst	r0, r2
 8001074:	d002      	beq.n	800107c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001076:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001078:	f7ff f9a8 	bl	80003cc <HAL_GPIO_EXTI_Callback>
  }
}
 800107c:	bd10      	pop	{r4, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	0004      	movs	r4, r0
 8001088:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800108a:	2800      	cmp	r0, #0
 800108c:	d045      	beq.n	800111a <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	6803      	ldr	r3, [r0, #0]
 8001090:	07db      	lsls	r3, r3, #31
 8001092:	d42f      	bmi.n	80010f4 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	079b      	lsls	r3, r3, #30
 8001098:	d500      	bpl.n	800109c <HAL_RCC_OscConfig+0x18>
 800109a:	e081      	b.n	80011a0 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	071b      	lsls	r3, r3, #28
 80010a0:	d500      	bpl.n	80010a4 <HAL_RCC_OscConfig+0x20>
 80010a2:	e0bc      	b.n	800121e <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	075b      	lsls	r3, r3, #29
 80010a8:	d500      	bpl.n	80010ac <HAL_RCC_OscConfig+0x28>
 80010aa:	e0df      	b.n	800126c <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	06db      	lsls	r3, r3, #27
 80010b0:	d51a      	bpl.n	80010e8 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010b2:	6962      	ldr	r2, [r4, #20]
 80010b4:	2304      	movs	r3, #4
 80010b6:	4db5      	ldr	r5, [pc, #724]	; (800138c <HAL_RCC_OscConfig+0x308>)
 80010b8:	2a01      	cmp	r2, #1
 80010ba:	d000      	beq.n	80010be <HAL_RCC_OscConfig+0x3a>
 80010bc:	e14a      	b.n	8001354 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010be:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010c0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c2:	430b      	orrs	r3, r1
 80010c4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80010c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010c8:	431a      	orrs	r2, r3
 80010ca:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80010cc:	f7ff fe62 	bl	8000d94 <HAL_GetTick>
 80010d0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010d4:	423b      	tst	r3, r7
 80010d6:	d100      	bne.n	80010da <HAL_RCC_OscConfig+0x56>
 80010d8:	e135      	b.n	8001346 <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010da:	21f8      	movs	r1, #248	; 0xf8
 80010dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80010de:	69a3      	ldr	r3, [r4, #24]
 80010e0:	438a      	bics	r2, r1
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e8:	6a23      	ldr	r3, [r4, #32]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d000      	beq.n	80010f0 <HAL_RCC_OscConfig+0x6c>
 80010ee:	e159      	b.n	80013a4 <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 80010f0:	2000      	movs	r0, #0
 80010f2:	e02a      	b.n	800114a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f4:	210c      	movs	r1, #12
 80010f6:	4da5      	ldr	r5, [pc, #660]	; (800138c <HAL_RCC_OscConfig+0x308>)
 80010f8:	686a      	ldr	r2, [r5, #4]
 80010fa:	400a      	ands	r2, r1
 80010fc:	2a04      	cmp	r2, #4
 80010fe:	d006      	beq.n	800110e <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001100:	686b      	ldr	r3, [r5, #4]
 8001102:	400b      	ands	r3, r1
 8001104:	2b08      	cmp	r3, #8
 8001106:	d10a      	bne.n	800111e <HAL_RCC_OscConfig+0x9a>
 8001108:	686b      	ldr	r3, [r5, #4]
 800110a:	03db      	lsls	r3, r3, #15
 800110c:	d507      	bpl.n	800111e <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	039b      	lsls	r3, r3, #14
 8001112:	d5bf      	bpl.n	8001094 <HAL_RCC_OscConfig+0x10>
 8001114:	6863      	ldr	r3, [r4, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1bc      	bne.n	8001094 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
 800111c:	e015      	b.n	800114a <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d114      	bne.n	800114e <HAL_RCC_OscConfig+0xca>
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	682a      	ldr	r2, [r5, #0]
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	4313      	orrs	r3, r2
 800112c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800112e:	f7ff fe31 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001134:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	02bf      	lsls	r7, r7, #10
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	423b      	tst	r3, r7
 800113c:	d1aa      	bne.n	8001094 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113e:	f7ff fe29 	bl	8000d94 <HAL_GetTick>
 8001142:	1b80      	subs	r0, r0, r6
 8001144:	2864      	cmp	r0, #100	; 0x64
 8001146:	d9f7      	bls.n	8001138 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8001148:	2003      	movs	r0, #3
}
 800114a:	b005      	add	sp, #20
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_RCC_OscConfig+0xfc>
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	4a8e      	ldr	r2, [pc, #568]	; (8001390 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	4013      	ands	r3, r2
 800115a:	602b      	str	r3, [r5, #0]
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	4a8d      	ldr	r2, [pc, #564]	; (8001394 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001160:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001162:	4013      	ands	r3, r2
 8001164:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001166:	f7ff fe15 	bl	8000d94 <HAL_GetTick>
 800116a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	423b      	tst	r3, r7
 8001170:	d100      	bne.n	8001174 <HAL_RCC_OscConfig+0xf0>
 8001172:	e78f      	b.n	8001094 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fe0e 	bl	8000d94 <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	2864      	cmp	r0, #100	; 0x64
 800117c:	d9f6      	bls.n	800116c <HAL_RCC_OscConfig+0xe8>
 800117e:	e7e3      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	2b05      	cmp	r3, #5
 8001182:	d105      	bne.n	8001190 <HAL_RCC_OscConfig+0x10c>
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	682a      	ldr	r2, [r5, #0]
 8001188:	02db      	lsls	r3, r3, #11
 800118a:	4313      	orrs	r3, r2
 800118c:	602b      	str	r3, [r5, #0]
 800118e:	e7c9      	b.n	8001124 <HAL_RCC_OscConfig+0xa0>
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	4a7f      	ldr	r2, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x30c>)
 8001194:	4013      	ands	r3, r2
 8001196:	602b      	str	r3, [r5, #0]
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	4a7e      	ldr	r2, [pc, #504]	; (8001394 <HAL_RCC_OscConfig+0x310>)
 800119c:	4013      	ands	r3, r2
 800119e:	e7c5      	b.n	800112c <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011a0:	220c      	movs	r2, #12
 80011a2:	4d7a      	ldr	r5, [pc, #488]	; (800138c <HAL_RCC_OscConfig+0x308>)
 80011a4:	686b      	ldr	r3, [r5, #4]
 80011a6:	4213      	tst	r3, r2
 80011a8:	d006      	beq.n	80011b8 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011aa:	686b      	ldr	r3, [r5, #4]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d110      	bne.n	80011d4 <HAL_RCC_OscConfig+0x150>
 80011b2:	686b      	ldr	r3, [r5, #4]
 80011b4:	03db      	lsls	r3, r3, #15
 80011b6:	d40d      	bmi.n	80011d4 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	079b      	lsls	r3, r3, #30
 80011bc:	d502      	bpl.n	80011c4 <HAL_RCC_OscConfig+0x140>
 80011be:	68e3      	ldr	r3, [r4, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d1aa      	bne.n	800111a <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	21f8      	movs	r1, #248	; 0xf8
 80011c6:	682a      	ldr	r2, [r5, #0]
 80011c8:	6923      	ldr	r3, [r4, #16]
 80011ca:	438a      	bics	r2, r1
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	602b      	str	r3, [r5, #0]
 80011d2:	e763      	b.n	800109c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d4:	68e2      	ldr	r2, [r4, #12]
 80011d6:	2301      	movs	r3, #1
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d00f      	beq.n	80011fc <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 80011dc:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011de:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4313      	orrs	r3, r2
 80011e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011e4:	f7ff fdd6 	bl	8000d94 <HAL_GetTick>
 80011e8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	423b      	tst	r3, r7
 80011ee:	d1e9      	bne.n	80011c4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fdd0 	bl	8000d94 <HAL_GetTick>
 80011f4:	1b80      	subs	r0, r0, r6
 80011f6:	2802      	cmp	r0, #2
 80011f8:	d9f7      	bls.n	80011ea <HAL_RCC_OscConfig+0x166>
 80011fa:	e7a5      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 80011fc:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001200:	439a      	bics	r2, r3
 8001202:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001204:	f7ff fdc6 	bl	8000d94 <HAL_GetTick>
 8001208:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	423b      	tst	r3, r7
 800120e:	d100      	bne.n	8001212 <HAL_RCC_OscConfig+0x18e>
 8001210:	e744      	b.n	800109c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fdbf 	bl	8000d94 <HAL_GetTick>
 8001216:	1b80      	subs	r0, r0, r6
 8001218:	2802      	cmp	r0, #2
 800121a:	d9f6      	bls.n	800120a <HAL_RCC_OscConfig+0x186>
 800121c:	e794      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121e:	69e2      	ldr	r2, [r4, #28]
 8001220:	2301      	movs	r3, #1
 8001222:	4d5a      	ldr	r5, [pc, #360]	; (800138c <HAL_RCC_OscConfig+0x308>)
 8001224:	2a00      	cmp	r2, #0
 8001226:	d010      	beq.n	800124a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8001228:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800122c:	4313      	orrs	r3, r2
 800122e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001230:	f7ff fdb0 	bl	8000d94 <HAL_GetTick>
 8001234:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001238:	423b      	tst	r3, r7
 800123a:	d000      	beq.n	800123e <HAL_RCC_OscConfig+0x1ba>
 800123c:	e732      	b.n	80010a4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fda9 	bl	8000d94 <HAL_GetTick>
 8001242:	1b80      	subs	r0, r0, r6
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x1b2>
 8001248:	e77e      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 800124a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800124e:	439a      	bics	r2, r3
 8001250:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001252:	f7ff fd9f 	bl	8000d94 <HAL_GetTick>
 8001256:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800125a:	423b      	tst	r3, r7
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x1dc>
 800125e:	e721      	b.n	80010a4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fd98 	bl	8000d94 <HAL_GetTick>
 8001264:	1b80      	subs	r0, r0, r6
 8001266:	2802      	cmp	r0, #2
 8001268:	d9f6      	bls.n	8001258 <HAL_RCC_OscConfig+0x1d4>
 800126a:	e76d      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001270:	4d46      	ldr	r5, [pc, #280]	; (800138c <HAL_RCC_OscConfig+0x308>)
 8001272:	0552      	lsls	r2, r2, #21
 8001274:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001276:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001278:	4213      	tst	r3, r2
 800127a:	d108      	bne.n	800128e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	69eb      	ldr	r3, [r5, #28]
 800127e:	4313      	orrs	r3, r2
 8001280:	61eb      	str	r3, [r5, #28]
 8001282:	69eb      	ldr	r3, [r5, #28]
 8001284:	4013      	ands	r3, r2
 8001286:	9303      	str	r3, [sp, #12]
 8001288:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800128a:	2301      	movs	r3, #1
 800128c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128e:	2780      	movs	r7, #128	; 0x80
 8001290:	4e41      	ldr	r6, [pc, #260]	; (8001398 <HAL_RCC_OscConfig+0x314>)
 8001292:	007f      	lsls	r7, r7, #1
 8001294:	6833      	ldr	r3, [r6, #0]
 8001296:	423b      	tst	r3, r7
 8001298:	d006      	beq.n	80012a8 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129a:	68a3      	ldr	r3, [r4, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d113      	bne.n	80012c8 <HAL_RCC_OscConfig+0x244>
 80012a0:	6a2a      	ldr	r2, [r5, #32]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	622b      	str	r3, [r5, #32]
 80012a6:	e030      	b.n	800130a <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a8:	6833      	ldr	r3, [r6, #0]
 80012aa:	433b      	orrs	r3, r7
 80012ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012ae:	f7ff fd71 	bl	8000d94 <HAL_GetTick>
 80012b2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	6833      	ldr	r3, [r6, #0]
 80012b6:	423b      	tst	r3, r7
 80012b8:	d1ef      	bne.n	800129a <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ba:	f7ff fd6b 	bl	8000d94 <HAL_GetTick>
 80012be:	9b01      	ldr	r3, [sp, #4]
 80012c0:	1ac0      	subs	r0, r0, r3
 80012c2:	2864      	cmp	r0, #100	; 0x64
 80012c4:	d9f6      	bls.n	80012b4 <HAL_RCC_OscConfig+0x230>
 80012c6:	e73f      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d114      	bne.n	80012f8 <HAL_RCC_OscConfig+0x274>
 80012ce:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	4393      	bics	r3, r2
 80012d4:	622b      	str	r3, [r5, #32]
 80012d6:	6a2b      	ldr	r3, [r5, #32]
 80012d8:	3203      	adds	r2, #3
 80012da:	4393      	bics	r3, r2
 80012dc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80012de:	f7ff fd59 	bl	8000d94 <HAL_GetTick>
 80012e2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	6a2b      	ldr	r3, [r5, #32]
 80012e6:	423b      	tst	r3, r7
 80012e8:	d016      	beq.n	8001318 <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fd53 	bl	8000d94 <HAL_GetTick>
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_RCC_OscConfig+0x318>)
 80012f0:	1b80      	subs	r0, r0, r6
 80012f2:	4298      	cmp	r0, r3
 80012f4:	d9f6      	bls.n	80012e4 <HAL_RCC_OscConfig+0x260>
 80012f6:	e727      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	d116      	bne.n	800132a <HAL_RCC_OscConfig+0x2a6>
 80012fc:	6a29      	ldr	r1, [r5, #32]
 80012fe:	3b01      	subs	r3, #1
 8001300:	430b      	orrs	r3, r1
 8001302:	622b      	str	r3, [r5, #32]
 8001304:	6a2b      	ldr	r3, [r5, #32]
 8001306:	431a      	orrs	r2, r3
 8001308:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800130a:	f7ff fd43 	bl	8000d94 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001310:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	6a2b      	ldr	r3, [r5, #32]
 8001314:	423b      	tst	r3, r7
 8001316:	d00f      	beq.n	8001338 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8001318:	9b00      	ldr	r3, [sp, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d000      	beq.n	8001320 <HAL_RCC_OscConfig+0x29c>
 800131e:	e6c5      	b.n	80010ac <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001320:	69eb      	ldr	r3, [r5, #28]
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_RCC_OscConfig+0x31c>)
 8001324:	4013      	ands	r3, r2
 8001326:	61eb      	str	r3, [r5, #28]
 8001328:	e6c0      	b.n	80010ac <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	6a2b      	ldr	r3, [r5, #32]
 800132c:	4393      	bics	r3, r2
 800132e:	2204      	movs	r2, #4
 8001330:	622b      	str	r3, [r5, #32]
 8001332:	6a2b      	ldr	r3, [r5, #32]
 8001334:	4393      	bics	r3, r2
 8001336:	e7b5      	b.n	80012a4 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff fd2c 	bl	8000d94 <HAL_GetTick>
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_RCC_OscConfig+0x318>)
 800133e:	1b80      	subs	r0, r0, r6
 8001340:	4298      	cmp	r0, r3
 8001342:	d9e6      	bls.n	8001312 <HAL_RCC_OscConfig+0x28e>
 8001344:	e700      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001346:	f7ff fd25 	bl	8000d94 <HAL_GetTick>
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	2802      	cmp	r0, #2
 800134e:	d800      	bhi.n	8001352 <HAL_RCC_OscConfig+0x2ce>
 8001350:	e6bf      	b.n	80010d2 <HAL_RCC_OscConfig+0x4e>
 8001352:	e6f9      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001354:	3205      	adds	r2, #5
 8001356:	d103      	bne.n	8001360 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001358:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800135a:	439a      	bics	r2, r3
 800135c:	636a      	str	r2, [r5, #52]	; 0x34
 800135e:	e6bc      	b.n	80010da <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001360:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001362:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001364:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001366:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001368:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800136a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800136c:	4393      	bics	r3, r2
 800136e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001370:	f7ff fd10 	bl	8000d94 <HAL_GetTick>
 8001374:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001376:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001378:	423b      	tst	r3, r7
 800137a:	d100      	bne.n	800137e <HAL_RCC_OscConfig+0x2fa>
 800137c:	e6b4      	b.n	80010e8 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800137e:	f7ff fd09 	bl	8000d94 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	2802      	cmp	r0, #2
 8001386:	d9f6      	bls.n	8001376 <HAL_RCC_OscConfig+0x2f2>
 8001388:	e6de      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40021000 	.word	0x40021000
 8001390:	fffeffff 	.word	0xfffeffff
 8001394:	fffbffff 	.word	0xfffbffff
 8001398:	40007000 	.word	0x40007000
 800139c:	00001388 	.word	0x00001388
 80013a0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a4:	200c      	movs	r0, #12
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x3f4>)
 80013a8:	6851      	ldr	r1, [r2, #4]
 80013aa:	0015      	movs	r5, r2
 80013ac:	4001      	ands	r1, r0
 80013ae:	2908      	cmp	r1, #8
 80013b0:	d047      	beq.n	8001442 <HAL_RCC_OscConfig+0x3be>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b2:	4a32      	ldr	r2, [pc, #200]	; (800147c <HAL_RCC_OscConfig+0x3f8>)
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d132      	bne.n	800141e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 80013b8:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80013bc:	4013      	ands	r3, r2
 80013be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013c0:	f7ff fce8 	bl	8000d94 <HAL_GetTick>
 80013c4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	04bf      	lsls	r7, r7, #18
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	423b      	tst	r3, r7
 80013cc:	d121      	bne.n	8001412 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ce:	220f      	movs	r2, #15
 80013d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d4:	4393      	bics	r3, r2
 80013d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d8:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013da:	4313      	orrs	r3, r2
 80013dc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80013de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013e2:	686a      	ldr	r2, [r5, #4]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	4926      	ldr	r1, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x3fc>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	4313      	orrs	r3, r2
 80013ec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	682a      	ldr	r2, [r5, #0]
 80013f2:	045b      	lsls	r3, r3, #17
 80013f4:	4313      	orrs	r3, r2
 80013f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013f8:	f7ff fccc 	bl	8000d94 <HAL_GetTick>
 80013fc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013fe:	682b      	ldr	r3, [r5, #0]
 8001400:	4233      	tst	r3, r6
 8001402:	d000      	beq.n	8001406 <HAL_RCC_OscConfig+0x382>
 8001404:	e674      	b.n	80010f0 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fcc5 	bl	8000d94 <HAL_GetTick>
 800140a:	1b00      	subs	r0, r0, r4
 800140c:	2802      	cmp	r0, #2
 800140e:	d9f6      	bls.n	80013fe <HAL_RCC_OscConfig+0x37a>
 8001410:	e69a      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff fcbf 	bl	8000d94 <HAL_GetTick>
 8001416:	1b80      	subs	r0, r0, r6
 8001418:	2802      	cmp	r0, #2
 800141a:	d9d5      	bls.n	80013c8 <HAL_RCC_OscConfig+0x344>
 800141c:	e694      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 800141e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001422:	4013      	ands	r3, r2
 8001424:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001426:	f7ff fcb5 	bl	8000d94 <HAL_GetTick>
 800142a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142c:	04b6      	lsls	r6, r6, #18
 800142e:	682b      	ldr	r3, [r5, #0]
 8001430:	4233      	tst	r3, r6
 8001432:	d100      	bne.n	8001436 <HAL_RCC_OscConfig+0x3b2>
 8001434:	e65c      	b.n	80010f0 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001436:	f7ff fcad 	bl	8000d94 <HAL_GetTick>
 800143a:	1b00      	subs	r0, r0, r4
 800143c:	2802      	cmp	r0, #2
 800143e:	d9f6      	bls.n	800142e <HAL_RCC_OscConfig+0x3aa>
 8001440:	e682      	b.n	8001148 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8001442:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	2b01      	cmp	r3, #1
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x3c6>
 8001448:	e67f      	b.n	800114a <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800144a:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 800144c:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001450:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001452:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001454:	4019      	ands	r1, r3
 8001456:	4281      	cmp	r1, r0
 8001458:	d000      	beq.n	800145c <HAL_RCC_OscConfig+0x3d8>
 800145a:	e65e      	b.n	800111a <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800145c:	210f      	movs	r1, #15
 800145e:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001460:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001462:	428a      	cmp	r2, r1
 8001464:	d000      	beq.n	8001468 <HAL_RCC_OscConfig+0x3e4>
 8001466:	e658      	b.n	800111a <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001468:	22f0      	movs	r2, #240	; 0xf0
 800146a:	0392      	lsls	r2, r2, #14
 800146c:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800146e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001470:	4293      	cmp	r3, r2
 8001472:	d100      	bne.n	8001476 <HAL_RCC_OscConfig+0x3f2>
 8001474:	e63c      	b.n	80010f0 <HAL_RCC_OscConfig+0x6c>
 8001476:	e650      	b.n	800111a <HAL_RCC_OscConfig+0x96>
 8001478:	40021000 	.word	0x40021000
 800147c:	feffffff 	.word	0xfeffffff
 8001480:	ffc2ffff 	.word	0xffc2ffff

08001484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001488:	2210      	movs	r2, #16
 800148a:	4912      	ldr	r1, [pc, #72]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x50>)
 800148c:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800148e:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001490:	f000 ff94 	bl	80023bc <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001494:	2210      	movs	r2, #16
 8001496:	0028      	movs	r0, r5
 8001498:	490f      	ldr	r1, [pc, #60]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x54>)
 800149a:	f000 ff8f 	bl	80023bc <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800149e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80014a0:	4e0e      	ldr	r6, [pc, #56]	; (80014dc <HAL_RCC_GetSysClockFreq+0x58>)
 80014a2:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014a4:	401a      	ands	r2, r3
 80014a6:	2a08      	cmp	r2, #8
 80014a8:	d111      	bne.n	80014ce <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014aa:	200f      	movs	r0, #15
 80014ac:	466a      	mov	r2, sp
 80014ae:	0c99      	lsrs	r1, r3, #18
 80014b0:	4001      	ands	r1, r0
 80014b2:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014b4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80014b6:	4002      	ands	r2, r0
 80014b8:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014ba:	03db      	lsls	r3, r3, #15
 80014bc:	d505      	bpl.n	80014ca <HAL_RCC_GetSysClockFreq+0x46>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80014c0:	f7fe fe40 	bl	8000144 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80014c4:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014c6:	b008      	add	sp, #32
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x60>)
 80014cc:	e7fa      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = HSE_VALUE;
 80014ce:	4804      	ldr	r0, [pc, #16]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80014d0:	e7f9      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x42>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	08002410 	.word	0x08002410
 80014d8:	08002421 	.word	0x08002421
 80014dc:	40021000 	.word	0x40021000
 80014e0:	007a1200 	.word	0x007a1200
 80014e4:	003d0900 	.word	0x003d0900

080014e8 <HAL_RCC_ClockConfig>:
{
 80014e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014ea:	0005      	movs	r5, r0
 80014ec:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
}
 80014f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f6:	2201      	movs	r2, #1
 80014f8:	4c37      	ldr	r4, [pc, #220]	; (80015d8 <HAL_RCC_ClockConfig+0xf0>)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	4013      	ands	r3, r2
 80014fe:	428b      	cmp	r3, r1
 8001500:	d31c      	bcc.n	800153c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001502:	6829      	ldr	r1, [r5, #0]
 8001504:	078b      	lsls	r3, r1, #30
 8001506:	d422      	bmi.n	800154e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001508:	07cb      	lsls	r3, r1, #31
 800150a:	d42f      	bmi.n	800156c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800150c:	2301      	movs	r3, #1
 800150e:	6822      	ldr	r2, [r4, #0]
 8001510:	401a      	ands	r2, r3
 8001512:	42b2      	cmp	r2, r6
 8001514:	d851      	bhi.n	80015ba <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001516:	682b      	ldr	r3, [r5, #0]
 8001518:	4c30      	ldr	r4, [pc, #192]	; (80015dc <HAL_RCC_ClockConfig+0xf4>)
 800151a:	075b      	lsls	r3, r3, #29
 800151c:	d454      	bmi.n	80015c8 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800151e:	f7ff ffb1 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8001522:	6863      	ldr	r3, [r4, #4]
 8001524:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <HAL_RCC_ClockConfig+0xf8>)
 8001526:	061b      	lsls	r3, r3, #24
 8001528:	0f1b      	lsrs	r3, r3, #28
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	40d8      	lsrs	r0, r3
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_RCC_ClockConfig+0xfc>)
 8001530:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001532:	2003      	movs	r0, #3
 8001534:	f7ff fbee 	bl	8000d14 <HAL_InitTick>
  return HAL_OK;
 8001538:	2000      	movs	r0, #0
 800153a:	e7db      	b.n	80014f4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	4393      	bics	r3, r2
 8001540:	430b      	orrs	r3, r1
 8001542:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	4013      	ands	r3, r2
 8001548:	428b      	cmp	r3, r1
 800154a:	d1d2      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xa>
 800154c:	e7d9      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <HAL_RCC_ClockConfig+0xf4>)
 8001550:	074b      	lsls	r3, r1, #29
 8001552:	d504      	bpl.n	800155e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001554:	23e0      	movs	r3, #224	; 0xe0
 8001556:	6850      	ldr	r0, [r2, #4]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4303      	orrs	r3, r0
 800155c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800155e:	20f0      	movs	r0, #240	; 0xf0
 8001560:	6853      	ldr	r3, [r2, #4]
 8001562:	4383      	bics	r3, r0
 8001564:	68a8      	ldr	r0, [r5, #8]
 8001566:	4303      	orrs	r3, r0
 8001568:	6053      	str	r3, [r2, #4]
 800156a:	e7cd      	b.n	8001508 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156c:	4f1b      	ldr	r7, [pc, #108]	; (80015dc <HAL_RCC_ClockConfig+0xf4>)
 800156e:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001570:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	2a01      	cmp	r2, #1
 8001574:	d119      	bne.n	80015aa <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	039b      	lsls	r3, r3, #14
 8001578:	d5bb      	bpl.n	80014f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157a:	2103      	movs	r1, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	438b      	bics	r3, r1
 8001580:	4313      	orrs	r3, r2
 8001582:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8001584:	f7ff fc06 	bl	8000d94 <HAL_GetTick>
 8001588:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	230c      	movs	r3, #12
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	401a      	ands	r2, r3
 8001590:	686b      	ldr	r3, [r5, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d0b9      	beq.n	800150c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff fbfc 	bl	8000d94 <HAL_GetTick>
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	1ac0      	subs	r0, r0, r3
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_ClockConfig+0x100>)
 80015a2:	4298      	cmp	r0, r3
 80015a4:	d9f1      	bls.n	800158a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80015a6:	2003      	movs	r0, #3
 80015a8:	e7a4      	b.n	80014f4 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	2a02      	cmp	r2, #2
 80015ac:	d102      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	019b      	lsls	r3, r3, #6
 80015b0:	d4e3      	bmi.n	800157a <HAL_RCC_ClockConfig+0x92>
 80015b2:	e79e      	b.n	80014f2 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	079b      	lsls	r3, r3, #30
 80015b6:	d4e0      	bmi.n	800157a <HAL_RCC_ClockConfig+0x92>
 80015b8:	e79b      	b.n	80014f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	439a      	bics	r2, r3
 80015be:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	421a      	tst	r2, r3
 80015c4:	d0a7      	beq.n	8001516 <HAL_RCC_ClockConfig+0x2e>
 80015c6:	e794      	b.n	80014f2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_RCC_ClockConfig+0x104>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	68ea      	ldr	r2, [r5, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	6063      	str	r3, [r4, #4]
 80015d4:	e7a3      	b.n	800151e <HAL_RCC_ClockConfig+0x36>
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40022000 	.word	0x40022000
 80015dc:	40021000 	.word	0x40021000
 80015e0:	080023f8 	.word	0x080023f8
 80015e4:	20000004 	.word	0x20000004
 80015e8:	00001388 	.word	0x00001388
 80015ec:	fffff8ff 	.word	0xfffff8ff

080015f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	0f5b      	lsrs	r3, r3, #29
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015fe:	6810      	ldr	r0, [r2, #0]
 8001600:	40d8      	lsrs	r0, r3
}    
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000
 8001608:	08002408 	.word	0x08002408
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001612:	6803      	ldr	r3, [r0, #0]
{
 8001614:	0005      	movs	r5, r0
 8001616:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001618:	03db      	lsls	r3, r3, #15
 800161a:	d52a      	bpl.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001620:	4c38      	ldr	r4, [pc, #224]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001622:	0552      	lsls	r2, r2, #21
 8001624:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001626:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001628:	4213      	tst	r3, r2
 800162a:	d108      	bne.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	69e3      	ldr	r3, [r4, #28]
 800162e:	4313      	orrs	r3, r2
 8001630:	61e3      	str	r3, [r4, #28]
 8001632:	69e3      	ldr	r3, [r4, #28]
 8001634:	4013      	ands	r3, r2
 8001636:	9303      	str	r3, [sp, #12]
 8001638:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	2780      	movs	r7, #128	; 0x80
 8001640:	4e31      	ldr	r6, [pc, #196]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001642:	007f      	lsls	r7, r7, #1
 8001644:	6833      	ldr	r3, [r6, #0]
 8001646:	423b      	tst	r3, r7
 8001648:	d028      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800164a:	6a22      	ldr	r2, [r4, #32]
 800164c:	23c0      	movs	r3, #192	; 0xc0
 800164e:	0011      	movs	r1, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4e2e      	ldr	r6, [pc, #184]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8001654:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001656:	421a      	tst	r2, r3
 8001658:	d132      	bne.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800165a:	6a23      	ldr	r3, [r4, #32]
 800165c:	401e      	ands	r6, r3
 800165e:	686b      	ldr	r3, [r5, #4]
 8001660:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001662:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001664:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001666:	2b01      	cmp	r3, #1
 8001668:	d103      	bne.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	69e3      	ldr	r3, [r4, #28]
 800166c:	4a28      	ldr	r2, [pc, #160]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800166e:	4013      	ands	r3, r2
 8001670:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001672:	682a      	ldr	r2, [r5, #0]
 8001674:	07d3      	lsls	r3, r2, #31
 8001676:	d506      	bpl.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001678:	2003      	movs	r0, #3
 800167a:	4922      	ldr	r1, [pc, #136]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800167c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800167e:	4383      	bics	r3, r0
 8001680:	68a8      	ldr	r0, [r5, #8]
 8001682:	4303      	orrs	r3, r0
 8001684:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001686:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001688:	0693      	lsls	r3, r2, #26
 800168a:	d517      	bpl.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800168c:	2110      	movs	r1, #16
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001690:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001692:	438b      	bics	r3, r1
 8001694:	68e9      	ldr	r1, [r5, #12]
 8001696:	430b      	orrs	r3, r1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	e00f      	b.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0xac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169c:	6833      	ldr	r3, [r6, #0]
 800169e:	433b      	orrs	r3, r7
 80016a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016a2:	f7ff fb77 	bl	8000d94 <HAL_GetTick>
 80016a6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	6833      	ldr	r3, [r6, #0]
 80016aa:	423b      	tst	r3, r7
 80016ac:	d1cd      	bne.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff fb71 	bl	8000d94 <HAL_GetTick>
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	1ac0      	subs	r0, r0, r3
 80016b6:	2864      	cmp	r0, #100	; 0x64
 80016b8:	d9f6      	bls.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
          return HAL_TIMEOUT;
 80016ba:	2003      	movs	r0, #3
}
 80016bc:	b005      	add	sp, #20
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016c0:	686a      	ldr	r2, [r5, #4]
 80016c2:	4013      	ands	r3, r2
 80016c4:	428b      	cmp	r3, r1
 80016c6:	d0c8      	beq.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80016c8:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016ca:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80016cc:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016ce:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80016d0:	025b      	lsls	r3, r3, #9
 80016d2:	4303      	orrs	r3, r0
 80016d4:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016d6:	6a23      	ldr	r3, [r4, #32]
 80016d8:	480e      	ldr	r0, [pc, #56]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016da:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016dc:	4003      	ands	r3, r0
 80016de:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80016e0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016e2:	07d3      	lsls	r3, r2, #31
 80016e4:	d5b9      	bpl.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb55 	bl	8000d94 <HAL_GetTick>
 80016ea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	2202      	movs	r2, #2
 80016ee:	6a23      	ldr	r3, [r4, #32]
 80016f0:	4213      	tst	r3, r2
 80016f2:	d1b2      	bne.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff fb4e 	bl	8000d94 <HAL_GetTick>
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80016fa:	1bc0      	subs	r0, r0, r7
 80016fc:	4298      	cmp	r0, r3
 80016fe:	d9f5      	bls.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8001700:	e7db      	b.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	fffffcff 	.word	0xfffffcff
 8001710:	efffffff 	.word	0xefffffff
 8001714:	fffeffff 	.word	0xfffeffff
 8001718:	00001388 	.word	0x00001388

0800171c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800171c:	0002      	movs	r2, r0
{
 800171e:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8001720:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001722:	323d      	adds	r2, #61	; 0x3d
 8001724:	7811      	ldrb	r1, [r2, #0]
 8001726:	4281      	cmp	r1, r0
 8001728:	d112      	bne.n	8001750 <HAL_TIM_Base_Start+0x34>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800172a:	2102      	movs	r1, #2
 800172c:	7011      	strb	r1, [r2, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_TIM_Base_Start+0x40>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d002      	beq.n	800173c <HAL_TIM_Base_Start+0x20>
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_TIM_Base_Start+0x44>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10a      	bne.n	8001752 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800173c:	2107      	movs	r1, #7
 800173e:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001740:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001742:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001744:	2a06      	cmp	r2, #6
 8001746:	d003      	beq.n	8001750 <HAL_TIM_Base_Start+0x34>
      __HAL_TIM_ENABLE(htim);
 8001748:	2201      	movs	r2, #1
 800174a:	6819      	ldr	r1, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4310      	orrs	r0, r2
 8001756:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8001758:	2000      	movs	r0, #0
 800175a:	e7f9      	b.n	8001750 <HAL_TIM_Base_Start+0x34>
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40000400 	.word	0x40000400

08001764 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001764:	6803      	ldr	r3, [r0, #0]
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_TIM_Base_Stop+0x24>)
 8001768:	6a19      	ldr	r1, [r3, #32]
 800176a:	4211      	tst	r1, r2
 800176c:	d107      	bne.n	800177e <HAL_TIM_Base_Stop+0x1a>
 800176e:	6a19      	ldr	r1, [r3, #32]
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_TIM_Base_Stop+0x28>)
 8001772:	4211      	tst	r1, r2
 8001774:	d103      	bne.n	800177e <HAL_TIM_Base_Stop+0x1a>
 8001776:	2101      	movs	r1, #1
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	438a      	bics	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800177e:	2301      	movs	r3, #1
 8001780:	303d      	adds	r0, #61	; 0x3d
 8001782:	7003      	strb	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8001784:	2000      	movs	r0, #0
 8001786:	4770      	bx	lr
 8001788:	00001111 	.word	0x00001111
 800178c:	00000444 	.word	0x00000444

08001790 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <TIM_Base_SetConfig+0x68>)
{
 8001792:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001794:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001796:	4290      	cmp	r0, r2
 8001798:	d002      	beq.n	80017a0 <TIM_Base_SetConfig+0x10>
 800179a:	4c18      	ldr	r4, [pc, #96]	; (80017fc <TIM_Base_SetConfig+0x6c>)
 800179c:	42a0      	cmp	r0, r4
 800179e:	d108      	bne.n	80017b2 <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a0:	2470      	movs	r4, #112	; 0x70
 80017a2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80017a4:	684c      	ldr	r4, [r1, #4]
 80017a6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017a8:	4290      	cmp	r0, r2
 80017aa:	d00b      	beq.n	80017c4 <TIM_Base_SetConfig+0x34>
 80017ac:	4c13      	ldr	r4, [pc, #76]	; (80017fc <TIM_Base_SetConfig+0x6c>)
 80017ae:	42a0      	cmp	r0, r4
 80017b0:	d008      	beq.n	80017c4 <TIM_Base_SetConfig+0x34>
 80017b2:	4c13      	ldr	r4, [pc, #76]	; (8001800 <TIM_Base_SetConfig+0x70>)
 80017b4:	42a0      	cmp	r0, r4
 80017b6:	d005      	beq.n	80017c4 <TIM_Base_SetConfig+0x34>
 80017b8:	4c12      	ldr	r4, [pc, #72]	; (8001804 <TIM_Base_SetConfig+0x74>)
 80017ba:	42a0      	cmp	r0, r4
 80017bc:	d002      	beq.n	80017c4 <TIM_Base_SetConfig+0x34>
 80017be:	4c12      	ldr	r4, [pc, #72]	; (8001808 <TIM_Base_SetConfig+0x78>)
 80017c0:	42a0      	cmp	r0, r4
 80017c2:	d103      	bne.n	80017cc <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c4:	4c11      	ldr	r4, [pc, #68]	; (800180c <TIM_Base_SetConfig+0x7c>)
 80017c6:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017c8:	68cc      	ldr	r4, [r1, #12]
 80017ca:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017cc:	2480      	movs	r4, #128	; 0x80
 80017ce:	43a3      	bics	r3, r4
 80017d0:	694c      	ldr	r4, [r1, #20]
 80017d2:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80017d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d6:	688b      	ldr	r3, [r1, #8]
 80017d8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017da:	680b      	ldr	r3, [r1, #0]
 80017dc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017de:	4290      	cmp	r0, r2
 80017e0:	d005      	beq.n	80017ee <TIM_Base_SetConfig+0x5e>
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <TIM_Base_SetConfig+0x74>)
 80017e4:	4298      	cmp	r0, r3
 80017e6:	d002      	beq.n	80017ee <TIM_Base_SetConfig+0x5e>
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <TIM_Base_SetConfig+0x78>)
 80017ea:	4298      	cmp	r0, r3
 80017ec:	d101      	bne.n	80017f2 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017ee:	690b      	ldr	r3, [r1, #16]
 80017f0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017f2:	2301      	movs	r3, #1
 80017f4:	6143      	str	r3, [r0, #20]
}
 80017f6:	bd10      	pop	{r4, pc}
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40000400 	.word	0x40000400
 8001800:	40002000 	.word	0x40002000
 8001804:	40014400 	.word	0x40014400
 8001808:	40014800 	.word	0x40014800
 800180c:	fffffcff 	.word	0xfffffcff

08001810 <HAL_TIM_Base_Init>:
{
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
  if (htim == NULL)
 8001816:	2c00      	cmp	r4, #0
 8001818:	d021      	beq.n	800185e <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800181a:	0025      	movs	r5, r4
 800181c:	353d      	adds	r5, #61	; 0x3d
 800181e:	782b      	ldrb	r3, [r5, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001826:	0023      	movs	r3, r4
 8001828:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800182a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800182c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800182e:	f7ff f93f 	bl	8000ab0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001832:	2302      	movs	r3, #2
 8001834:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	1d21      	adds	r1, r4, #4
 800183a:	f7ff ffa9 	bl	8001790 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800183e:	0022      	movs	r2, r4
 8001840:	2301      	movs	r3, #1
  return HAL_OK;
 8001842:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001844:	3246      	adds	r2, #70	; 0x46
 8001846:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001848:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800184a:	3a08      	subs	r2, #8
 800184c:	7013      	strb	r3, [r2, #0]
 800184e:	7053      	strb	r3, [r2, #1]
 8001850:	7093      	strb	r3, [r2, #2]
 8001852:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001854:	7113      	strb	r3, [r2, #4]
 8001856:	7153      	strb	r3, [r2, #5]
 8001858:	7193      	strb	r3, [r2, #6]
 800185a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800185c:	702b      	strb	r3, [r5, #0]
}
 800185e:	bd70      	pop	{r4, r5, r6, pc}

08001860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001860:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001862:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001864:	4d03      	ldr	r5, [pc, #12]	; (8001874 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001866:	430a      	orrs	r2, r1
 8001868:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800186a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800186c:	4313      	orrs	r3, r2
 800186e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001870:	6083      	str	r3, [r0, #8]
}
 8001872:	bd30      	pop	{r4, r5, pc}
 8001874:	ffff00ff 	.word	0xffff00ff

08001878 <HAL_TIM_ConfigClockSource>:
{
 8001878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800187a:	0005      	movs	r5, r0
 800187c:	2302      	movs	r3, #2
 800187e:	353c      	adds	r5, #60	; 0x3c
{
 8001880:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001882:	7828      	ldrb	r0, [r5, #0]
 8001884:	001a      	movs	r2, r3
 8001886:	2801      	cmp	r0, #1
 8001888:	d01d      	beq.n	80018c6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800188a:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 800188c:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800188e:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8001890:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001892:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001894:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001896:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr = htim->Instance->SMCR;
 8001898:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800189a:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800189c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800189e:	680b      	ldr	r3, [r1, #0]
 80018a0:	2b60      	cmp	r3, #96	; 0x60
 80018a2:	d057      	beq.n	8001954 <HAL_TIM_ConfigClockSource+0xdc>
 80018a4:	d833      	bhi.n	800190e <HAL_TIM_ConfigClockSource+0x96>
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d100      	bne.n	80018ac <HAL_TIM_ConfigClockSource+0x34>
 80018aa:	e06b      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x10c>
 80018ac:	d815      	bhi.n	80018da <HAL_TIM_ConfigClockSource+0x62>
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d00d      	beq.n	80018ce <HAL_TIM_ConfigClockSource+0x56>
 80018b2:	d80a      	bhi.n	80018ca <HAL_TIM_ConfigClockSource+0x52>
 80018b4:	2210      	movs	r2, #16
 80018b6:	0019      	movs	r1, r3
 80018b8:	4391      	bics	r1, r2
 80018ba:	d008      	beq.n	80018ce <HAL_TIM_ConfigClockSource+0x56>
 80018bc:	003a      	movs	r2, r7
  htim->State = HAL_TIM_STATE_READY;
 80018be:	2301      	movs	r3, #1
 80018c0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80018c2:	2300      	movs	r3, #0
 80018c4:	702b      	strb	r3, [r5, #0]
}
 80018c6:	0010      	movs	r0, r2
 80018c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80018ca:	2b30      	cmp	r3, #48	; 0x30
 80018cc:	d1f6      	bne.n	80018bc <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 80018ce:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80018d0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018d2:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018d4:	4313      	orrs	r3, r2
 80018d6:	2207      	movs	r2, #7
 80018d8:	e016      	b.n	8001908 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 80018da:	2b50      	cmp	r3, #80	; 0x50
 80018dc:	d1ee      	bne.n	80018bc <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018de:	684a      	ldr	r2, [r1, #4]
 80018e0:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80018e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018e4:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018e6:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018e8:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018ea:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018ee:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018f0:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018f2:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018f4:	240a      	movs	r4, #10
 80018f6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80018f8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80018fa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80018fc:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018fe:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001900:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001902:	4393      	bics	r3, r2
 8001904:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001906:	2357      	movs	r3, #87	; 0x57
 8001908:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800190a:	6083      	str	r3, [r0, #8]
 800190c:	e016      	b.n	800193c <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 8001914:	2200      	movs	r2, #0
  switch (sClockSourceConfig->ClockSource)
 8001916:	4563      	cmp	r3, ip
 8001918:	d0d1      	beq.n	80018be <HAL_TIM_ConfigClockSource+0x46>
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	0192      	lsls	r2, r2, #6
 800191e:	4293      	cmp	r3, r2
 8001920:	d00e      	beq.n	8001940 <HAL_TIM_ConfigClockSource+0xc8>
 8001922:	003a      	movs	r2, r7
 8001924:	2b70      	cmp	r3, #112	; 0x70
 8001926:	d1ca      	bne.n	80018be <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 8001928:	68cb      	ldr	r3, [r1, #12]
 800192a:	684a      	ldr	r2, [r1, #4]
 800192c:	6889      	ldr	r1, [r1, #8]
 800192e:	f7ff ff97 	bl	8001860 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001932:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001938:	430b      	orrs	r3, r1
 800193a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2200      	movs	r2, #0
}
 800193e:	e7be      	b.n	80018be <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 8001940:	68cb      	ldr	r3, [r1, #12]
 8001942:	684a      	ldr	r2, [r1, #4]
 8001944:	6889      	ldr	r1, [r1, #8]
 8001946:	f7ff ff8b 	bl	8001860 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	6822      	ldr	r2, [r4, #0]
 800194e:	01db      	lsls	r3, r3, #7
 8001950:	6891      	ldr	r1, [r2, #8]
 8001952:	e7f1      	b.n	8001938 <HAL_TIM_ConfigClockSource+0xc0>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001954:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001956:	684b      	ldr	r3, [r1, #4]
 8001958:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800195a:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800195c:	4f15      	ldr	r7, [pc, #84]	; (80019b4 <HAL_TIM_ConfigClockSource+0x13c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800195e:	43a1      	bics	r1, r4
 8001960:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001962:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001964:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001966:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001968:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800196a:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800196c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800196e:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001970:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001972:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001978:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800197a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800197c:	4393      	bics	r3, r2
 800197e:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001980:	2367      	movs	r3, #103	; 0x67
 8001982:	e7c1      	b.n	8001908 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001984:	684a      	ldr	r2, [r1, #4]
 8001986:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001988:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800198a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800198c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800198e:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001990:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001992:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001994:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001996:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001998:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800199a:	240a      	movs	r4, #10
 800199c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800199e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80019a0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019a2:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019a4:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80019a6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019a8:	4393      	bics	r3, r2
 80019aa:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019ac:	2347      	movs	r3, #71	; 0x47
 80019ae:	e7ab      	b.n	8001908 <HAL_TIM_ConfigClockSource+0x90>
 80019b0:	ffff0088 	.word	0xffff0088
 80019b4:	ffff0fff 	.word	0xffff0fff

080019b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80019b8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019ba:	0004      	movs	r4, r0
 80019bc:	2202      	movs	r2, #2
 80019be:	343c      	adds	r4, #60	; 0x3c
 80019c0:	7825      	ldrb	r5, [r4, #0]
{
 80019c2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80019c4:	0010      	movs	r0, r2
 80019c6:	2d01      	cmp	r5, #1
 80019c8:	d019      	beq.n	80019fe <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ca:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019cc:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80019ce:	353d      	adds	r5, #61	; 0x3d
 80019d0:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80019d6:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80019d8:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019da:	680e      	ldr	r6, [r1, #0]
 80019dc:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019de:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
 80019e2:	4283      	cmp	r3, r0
 80019e4:	d002      	beq.n	80019ec <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80019e8:	4283      	cmp	r3, r0
 80019ea:	d104      	bne.n	80019f6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019ec:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019ee:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019f0:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019f2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80019f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019f6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80019f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019fa:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80019fc:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	40012c00 	.word	0x40012c00
 8001a04:	40000400 	.word	0x40000400

08001a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a08:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a0a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a14:	6801      	ldr	r1, [r0, #0]
 8001a16:	4d12      	ldr	r5, [pc, #72]	; (8001a60 <UART_EndRxTransfer+0x58>)
 8001a18:	680b      	ldr	r3, [r1, #0]
 8001a1a:	402b      	ands	r3, r5
 8001a1c:	600b      	str	r3, [r1, #0]
 8001a1e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a22:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a26:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a2a:	6801      	ldr	r1, [r0, #0]
 8001a2c:	688b      	ldr	r3, [r1, #8]
 8001a2e:	4393      	bics	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
 8001a32:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a36:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d10a      	bne.n	8001a52 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a3c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a40:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a44:	2410      	movs	r4, #16
 8001a46:	6802      	ldr	r2, [r0, #0]
 8001a48:	6813      	ldr	r3, [r2, #0]
 8001a4a:	43a3      	bics	r3, r4
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a52:	2320      	movs	r3, #32
 8001a54:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a56:	2300      	movs	r3, #0
 8001a58:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001a5a:	6643      	str	r3, [r0, #100]	; 0x64
}
 8001a5c:	bd30      	pop	{r4, r5, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	fffffedf 	.word	0xfffffedf

08001a64 <HAL_UART_TxCpltCallback>:
 8001a64:	4770      	bx	lr

08001a66 <HAL_UART_ErrorCallback>:
 8001a66:	4770      	bx	lr

08001a68 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001a68:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	0002      	movs	r2, r0
{
 8001a6e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001a70:	325a      	adds	r2, #90	; 0x5a
 8001a72:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001a74:	3a08      	subs	r2, #8
 8001a76:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a78:	f7ff fff5 	bl	8001a66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a7c:	bd10      	pop	{r4, pc}

08001a7e <HAL_UARTEx_RxEventCallback>:
}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a80:	6801      	ldr	r1, [r0, #0]
{
 8001a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a84:	69cb      	ldr	r3, [r1, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a86:	4d9f      	ldr	r5, [pc, #636]	; (8001d04 <HAL_UART_IRQHandler+0x284>)
{
 8001a88:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a8a:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a8c:	688a      	ldr	r2, [r1, #8]
  if (errorflags == 0U)
 8001a8e:	422b      	tst	r3, r5
 8001a90:	d10b      	bne.n	8001aaa <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a92:	2220      	movs	r2, #32
 8001a94:	4213      	tst	r3, r2
 8001a96:	d100      	bne.n	8001a9a <HAL_UART_IRQHandler+0x1a>
 8001a98:	e07e      	b.n	8001b98 <HAL_UART_IRQHandler+0x118>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a9a:	4210      	tst	r0, r2
 8001a9c:	d100      	bne.n	8001aa0 <HAL_UART_IRQHandler+0x20>
 8001a9e:	e07b      	b.n	8001b98 <HAL_UART_IRQHandler+0x118>
      if (huart->RxISR != NULL)
 8001aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8001aa2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d16d      	bne.n	8001b84 <HAL_UART_IRQHandler+0x104>
 8001aa8:	e06d      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001aaa:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001aac:	4d96      	ldr	r5, [pc, #600]	; (8001d08 <HAL_UART_IRQHandler+0x288>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001aae:	4032      	ands	r2, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001ab0:	4005      	ands	r5, r0
 8001ab2:	4315      	orrs	r5, r2
 8001ab4:	d100      	bne.n	8001ab8 <HAL_UART_IRQHandler+0x38>
 8001ab6:	e06f      	b.n	8001b98 <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ab8:	1d25      	adds	r5, r4, #4
 8001aba:	4233      	tst	r3, r6
 8001abc:	d005      	beq.n	8001aca <HAL_UART_IRQHandler+0x4a>
 8001abe:	05c7      	lsls	r7, r0, #23
 8001ac0:	d503      	bpl.n	8001aca <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001ac2:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ac4:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8001ac6:	433e      	orrs	r6, r7
 8001ac8:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001aca:	2602      	movs	r6, #2
 8001acc:	4233      	tst	r3, r6
 8001ace:	d006      	beq.n	8001ade <HAL_UART_IRQHandler+0x5e>
 8001ad0:	2a00      	cmp	r2, #0
 8001ad2:	d004      	beq.n	8001ade <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001ad4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ad6:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8001ad8:	19b6      	adds	r6, r6, r6
 8001ada:	433e      	orrs	r6, r7
 8001adc:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ade:	2604      	movs	r6, #4
 8001ae0:	4233      	tst	r3, r6
 8001ae2:	d006      	beq.n	8001af2 <HAL_UART_IRQHandler+0x72>
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ae8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aea:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8001aec:	3e02      	subs	r6, #2
 8001aee:	433e      	orrs	r6, r7
 8001af0:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001af2:	2608      	movs	r6, #8
 8001af4:	4233      	tst	r3, r6
 8001af6:	d007      	beq.n	8001b08 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001af8:	2720      	movs	r7, #32
 8001afa:	4007      	ands	r7, r0
 8001afc:	433a      	orrs	r2, r7
 8001afe:	d003      	beq.n	8001b08 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b00:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b02:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001b04:	4316      	orrs	r6, r2
 8001b06:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	4213      	tst	r3, r2
 8001b0e:	d006      	beq.n	8001b1e <HAL_UART_IRQHandler+0x9e>
 8001b10:	0146      	lsls	r6, r0, #5
 8001b12:	d504      	bpl.n	8001b1e <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b14:	620a      	str	r2, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001b16:	2220      	movs	r2, #32
 8001b18:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b1e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001b20:	2a00      	cmp	r2, #0
 8001b22:	d030      	beq.n	8001b86 <HAL_UART_IRQHandler+0x106>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b24:	2220      	movs	r2, #32
 8001b26:	4213      	tst	r3, r2
 8001b28:	d006      	beq.n	8001b38 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b2a:	4210      	tst	r0, r2
 8001b2c:	d004      	beq.n	8001b38 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8001b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8001b34:	0020      	movs	r0, r4
 8001b36:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b38:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8001b3a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b3c:	2740      	movs	r7, #64	; 0x40
 8001b3e:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001b40:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b42:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001b44:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8001b46:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b48:	431e      	orrs	r6, r3
 8001b4a:	d021      	beq.n	8001b90 <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 8001b4c:	f7ff ff5c 	bl	8001a08 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	423b      	tst	r3, r7
 8001b56:	d017      	beq.n	8001b88 <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b62:	6822      	ldr	r2, [r4, #0]
 8001b64:	6893      	ldr	r3, [r2, #8]
 8001b66:	43bb      	bics	r3, r7
 8001b68:	6093      	str	r3, [r2, #8]
 8001b6a:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8001b6e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d009      	beq.n	8001b88 <HAL_UART_IRQHandler+0x108>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b74:	4b65      	ldr	r3, [pc, #404]	; (8001d0c <HAL_UART_IRQHandler+0x28c>)
 8001b76:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b78:	f7ff f992 	bl	8000ea0 <HAL_DMA_Abort_IT>
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_UART_IRQHandler+0x106>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b80:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001b82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b84:	4798      	blx	r3
}
 8001b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001b88:	0020      	movs	r0, r4
 8001b8a:	f7ff ff6c 	bl	8001a66 <HAL_UART_ErrorCallback>
 8001b8e:	e7fa      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
        HAL_UART_ErrorCallback(huart);
 8001b90:	f7ff ff69 	bl	8001a66 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b94:	67ee      	str	r6, [r5, #124]	; 0x7c
 8001b96:	e7f6      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b98:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001b9a:	2a01      	cmp	r2, #1
 8001b9c:	d000      	beq.n	8001ba0 <HAL_UART_IRQHandler+0x120>
 8001b9e:	e090      	b.n	8001cc2 <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ba0:	2510      	movs	r5, #16
 8001ba2:	422b      	tst	r3, r5
 8001ba4:	d100      	bne.n	8001ba8 <HAL_UART_IRQHandler+0x128>
 8001ba6:	e08c      	b.n	8001cc2 <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ba8:	4228      	tst	r0, r5
 8001baa:	d100      	bne.n	8001bae <HAL_UART_IRQHandler+0x12e>
 8001bac:	e089      	b.n	8001cc2 <HAL_UART_IRQHandler+0x242>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001bae:	620d      	str	r5, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb0:	688b      	ldr	r3, [r1, #8]
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	4008      	ands	r0, r1
 8001bb8:	420b      	tst	r3, r1
 8001bba:	d04c      	beq.n	8001c56 <HAL_UART_IRQHandler+0x1d6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001bbc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001bbe:	6803      	ldr	r3, [r0, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0de      	beq.n	8001b86 <HAL_UART_IRQHandler+0x106>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bc8:	0026      	movs	r6, r4
 8001bca:	3658      	adds	r6, #88	; 0x58
 8001bcc:	8837      	ldrh	r7, [r6, #0]
 8001bce:	429f      	cmp	r7, r3
 8001bd0:	d9d9      	bls.n	8001b86 <HAL_UART_IRQHandler+0x106>
        huart->RxXferCount = nb_remaining_rx_data;
 8001bd2:	0027      	movs	r7, r4
 8001bd4:	375a      	adds	r7, #90	; 0x5a
 8001bd6:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001bd8:	6983      	ldr	r3, [r0, #24]
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d031      	beq.n	8001c42 <HAL_UART_IRQHandler+0x1c2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bde:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001be6:	6820      	ldr	r0, [r4, #0]
 8001be8:	4d49      	ldr	r5, [pc, #292]	; (8001d10 <HAL_UART_IRQHandler+0x290>)
 8001bea:	6803      	ldr	r3, [r0, #0]
 8001bec:	402b      	ands	r3, r5
 8001bee:	6003      	str	r3, [r0, #0]
 8001bf0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bf4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf8:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bfc:	6820      	ldr	r0, [r4, #0]
 8001bfe:	6883      	ldr	r3, [r0, #8]
 8001c00:	4393      	bics	r3, r2
 8001c02:	6083      	str	r3, [r0, #8]
 8001c04:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c08:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c10:	6820      	ldr	r0, [r4, #0]
 8001c12:	6883      	ldr	r3, [r0, #8]
 8001c14:	438b      	bics	r3, r1
 8001c16:	6083      	str	r3, [r0, #8]
 8001c18:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c20:	2300      	movs	r3, #0
 8001c22:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c24:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c28:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	3512      	adds	r5, #18
 8001c30:	6813      	ldr	r3, [r2, #0]
 8001c32:	35ff      	adds	r5, #255	; 0xff
 8001c34:	43ab      	bics	r3, r5
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001c3e:	f7ff f911 	bl	8000e64 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c42:	0023      	movs	r3, r4
 8001c44:	335a      	adds	r3, #90	; 0x5a
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	8831      	ldrh	r1, [r6, #0]
 8001c4a:	1ac9      	subs	r1, r1, r3
 8001c4c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c4e:	0020      	movs	r0, r4
 8001c50:	f7ff ff15 	bl	8001a7e <HAL_UARTEx_RxEventCallback>
 8001c54:	e797      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c56:	0026      	movs	r6, r4
 8001c58:	365a      	adds	r6, #90	; 0x5a
 8001c5a:	8833      	ldrh	r3, [r6, #0]
      if ((huart->RxXferCount > 0U)
 8001c5c:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c5e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8001c60:	2900      	cmp	r1, #0
 8001c62:	d100      	bne.n	8001c66 <HAL_UART_IRQHandler+0x1e6>
 8001c64:	e78f      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c66:	0021      	movs	r1, r4
 8001c68:	3158      	adds	r1, #88	; 0x58
 8001c6a:	8809      	ldrh	r1, [r1, #0]
 8001c6c:	1ac9      	subs	r1, r1, r3
 8001c6e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8001c70:	2900      	cmp	r1, #0
 8001c72:	d100      	bne.n	8001c76 <HAL_UART_IRQHandler+0x1f6>
 8001c74:	e787      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c76:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c7e:	6826      	ldr	r6, [r4, #0]
 8001c80:	4d24      	ldr	r5, [pc, #144]	; (8001d14 <HAL_UART_IRQHandler+0x294>)
 8001c82:	6833      	ldr	r3, [r6, #0]
 8001c84:	402b      	ands	r3, r5
 8001c86:	6033      	str	r3, [r6, #0]
 8001c88:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c90:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c94:	6826      	ldr	r6, [r4, #0]
 8001c96:	68b3      	ldr	r3, [r6, #8]
 8001c98:	4393      	bics	r3, r2
 8001c9a:	60b3      	str	r3, [r6, #8]
 8001c9c:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8001ca0:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 8001ca2:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8001ca4:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ca6:	6620      	str	r0, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ca8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cac:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cb0:	6822      	ldr	r2, [r4, #0]
 8001cb2:	3532      	adds	r5, #50	; 0x32
 8001cb4:	6813      	ldr	r3, [r2, #0]
 8001cb6:	35ff      	adds	r5, #255	; 0xff
 8001cb8:	43ab      	bics	r3, r5
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	f380 8810 	msr	PRIMASK, r0
 8001cc0:	e7c5      	b.n	8001c4e <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	4213      	tst	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001cc8:	4210      	tst	r0, r2
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_IRQHandler+0x250>
    if (huart->TxISR != NULL)
 8001ccc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001cce:	e6e8      	b.n	8001aa2 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001cd0:	2240      	movs	r2, #64	; 0x40
 8001cd2:	4213      	tst	r3, r2
 8001cd4:	d100      	bne.n	8001cd8 <HAL_UART_IRQHandler+0x258>
 8001cd6:	e756      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
 8001cd8:	4210      	tst	r0, r2
 8001cda:	d100      	bne.n	8001cde <HAL_UART_IRQHandler+0x25e>
 8001cdc:	e753      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cde:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ce8:	6821      	ldr	r1, [r4, #0]
 8001cea:	680b      	ldr	r3, [r1, #0]
 8001cec:	4393      	bics	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001cf8:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001cfa:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001cfc:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8001cfe:	f7ff feb1 	bl	8001a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d02:	e740      	b.n	8001b86 <HAL_UART_IRQHandler+0x106>
 8001d04:	0000080f 	.word	0x0000080f
 8001d08:	04000120 	.word	0x04000120
 8001d0c:	08001a69 	.word	0x08001a69
 8001d10:	fffffeff 	.word	0xfffffeff
 8001d14:	fffffedf 	.word	0xfffffedf

08001d18 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8001d18:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f382 8810 	msr	PRIMASK, r2
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d24:	6801      	ldr	r1, [r0, #0]
 8001d26:	4d18      	ldr	r5, [pc, #96]	; (8001d88 <UART_RxISR_16BIT.part.0+0x70>)
 8001d28:	680b      	ldr	r3, [r1, #0]
 8001d2a:	402b      	ands	r3, r5
 8001d2c:	600b      	str	r3, [r1, #0]
 8001d2e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d32:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d36:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d3a:	6801      	ldr	r1, [r0, #0]
 8001d3c:	688b      	ldr	r3, [r1, #8]
 8001d3e:	4393      	bics	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
 8001d42:	f384 8810 	msr	PRIMASK, r4

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001d46:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001d48:	2200      	movs	r2, #0
      huart->RxState = HAL_UART_STATE_READY;
 8001d4a:	67c3      	str	r3, [r0, #124]	; 0x7c

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d4c:	6e03      	ldr	r3, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8001d4e:	6642      	str	r2, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d116      	bne.n	8001d82 <UART_RxISR_16BIT.part.0+0x6a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d54:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d56:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d5a:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d5e:	6801      	ldr	r1, [r0, #0]
 8001d60:	330f      	adds	r3, #15
 8001d62:	680a      	ldr	r2, [r1, #0]
 8001d64:	439a      	bics	r2, r3
 8001d66:	600a      	str	r2, [r1, #0]
 8001d68:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8001d6c:	6802      	ldr	r2, [r0, #0]
 8001d6e:	69d1      	ldr	r1, [r2, #28]
 8001d70:	4219      	tst	r1, r3
 8001d72:	d000      	beq.n	8001d76 <UART_RxISR_16BIT.part.0+0x5e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001d74:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001d76:	0003      	movs	r3, r0
 8001d78:	3358      	adds	r3, #88	; 0x58
 8001d7a:	8819      	ldrh	r1, [r3, #0]
 8001d7c:	f7ff fe7f 	bl	8001a7e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 8001d82:	f7fe faa5 	bl	80002d0 <HAL_UART_RxCpltCallback>
}
 8001d86:	e7fb      	b.n	8001d80 <UART_RxISR_16BIT.part.0+0x68>
 8001d88:	fffffedf 	.word	0xfffffedf

08001d8c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d8c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8001d8e:	b510      	push	{r4, lr}
 8001d90:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d92:	2a22      	cmp	r2, #34	; 0x22
 8001d94:	d114      	bne.n	8001dc0 <UART_RxISR_16BIT+0x34>
  uint16_t uhMask = huart->Mask;
 8001d96:	0002      	movs	r2, r0
 8001d98:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001d9a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001d9c:	8812      	ldrh	r2, [r2, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001d9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001da0:	400a      	ands	r2, r1
 8001da2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001da4:	0002      	movs	r2, r0
    huart->pRxBuffPtr += 2U;
 8001da6:	3302      	adds	r3, #2
 8001da8:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001daa:	325a      	adds	r2, #90	; 0x5a
 8001dac:	8813      	ldrh	r3, [r2, #0]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001db4:	8813      	ldrh	r3, [r2, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <UART_RxISR_16BIT+0x32>
 8001dba:	f7ff ffad 	bl	8001d18 <UART_RxISR_16BIT.part.0>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001dbe:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	6999      	ldr	r1, [r3, #24]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	619a      	str	r2, [r3, #24]
}
 8001dc8:	e7f9      	b.n	8001dbe <UART_RxISR_16BIT+0x32>

08001dca <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dca:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dd0:	2a22      	cmp	r2, #34	; 0x22
 8001dd2:	d115      	bne.n	8001e00 <UART_RxISR_8BIT+0x36>
  uint16_t uhMask = huart->Mask;
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001dd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001de0:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8001de2:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001de4:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001de6:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001de8:	3301      	adds	r3, #1
 8001dea:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001dec:	8813      	ldrh	r3, [r2, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 8001df4:	8813      	ldrh	r3, [r2, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <UART_RxISR_8BIT+0x34>
 8001dfa:	f7ff ff8d 	bl	8001d18 <UART_RxISR_16BIT.part.0>
}
 8001dfe:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001e00:	2208      	movs	r2, #8
 8001e02:	6999      	ldr	r1, [r3, #24]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	619a      	str	r2, [r3, #24]
}
 8001e08:	e7f9      	b.n	8001dfe <UART_RxISR_8BIT+0x34>
	...

08001e0c <UART_SetConfig>:
{
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e10:	6925      	ldr	r5, [r4, #16]
 8001e12:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e14:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e16:	432a      	orrs	r2, r5
 8001e18:	6965      	ldr	r5, [r4, #20]
 8001e1a:	69c3      	ldr	r3, [r0, #28]
 8001e1c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e1e:	6808      	ldr	r0, [r1, #0]
 8001e20:	4d39      	ldr	r5, [pc, #228]	; (8001f08 <UART_SetConfig+0xfc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e22:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e24:	4028      	ands	r0, r5
 8001e26:	4302      	orrs	r2, r0
 8001e28:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e2a:	684a      	ldr	r2, [r1, #4]
 8001e2c:	4837      	ldr	r0, [pc, #220]	; (8001f0c <UART_SetConfig+0x100>)
  tmpreg |= huart->Init.OneBitSampling;
 8001e2e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e30:	4002      	ands	r2, r0
 8001e32:	68e0      	ldr	r0, [r4, #12]
 8001e34:	4302      	orrs	r2, r0
 8001e36:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001e38:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e3a:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001e3c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e3e:	4d34      	ldr	r5, [pc, #208]	; (8001f10 <UART_SetConfig+0x104>)
 8001e40:	4028      	ands	r0, r5
 8001e42:	4302      	orrs	r2, r0
 8001e44:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e46:	2103      	movs	r1, #3
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <UART_SetConfig+0x108>)
 8001e4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0209      	lsls	r1, r1, #8
 8001e54:	2a02      	cmp	r2, #2
 8001e56:	d84c      	bhi.n	8001ef2 <UART_SetConfig+0xe6>
 8001e58:	482f      	ldr	r0, [pc, #188]	; (8001f18 <UART_SetConfig+0x10c>)
 8001e5a:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d124      	bne.n	8001eaa <UART_SetConfig+0x9e>
    switch (clocksource)
 8001e60:	2808      	cmp	r0, #8
 8001e62:	d817      	bhi.n	8001e94 <UART_SetConfig+0x88>
 8001e64:	f7fe f95a 	bl	800011c <__gnu_thumb1_case_uqi>
 8001e68:	16081647 	.word	0x16081647
 8001e6c:	16161605 	.word	0x16161605
 8001e70:	09          	.byte	0x09
 8001e71:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8001e72:	f7ff fb07 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8001e76:	e040      	b.n	8001efa <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <UART_SetConfig+0x110>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e7a:	0058      	lsls	r0, r3, #1
 8001e7c:	6863      	ldr	r3, [r4, #4]
 8001e7e:	6861      	ldr	r1, [r4, #4]
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	f7fe f95e 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e88:	4925      	ldr	r1, [pc, #148]	; (8001f20 <UART_SetConfig+0x114>)
 8001e8a:	b282      	uxth	r2, r0
 8001e8c:	3a10      	subs	r2, #16
 8001e8e:	0403      	lsls	r3, r0, #16
 8001e90:	428a      	cmp	r2, r1
 8001e92:	d901      	bls.n	8001e98 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e94:	2001      	movs	r0, #1
 8001e96:	e033      	b.n	8001f00 <UART_SetConfig+0xf4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e98:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e9a:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e9c:	4390      	bics	r0, r2
 8001e9e:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8001ea0:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ea2:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	60d0      	str	r0, [r2, #12]
 8001ea8:	e029      	b.n	8001efe <UART_SetConfig+0xf2>
    switch (clocksource)
 8001eaa:	2808      	cmp	r0, #8
 8001eac:	d8f2      	bhi.n	8001e94 <UART_SetConfig+0x88>
 8001eae:	f7fe f92b 	bl	8000108 <__gnu_thumb1_case_sqi>
 8001eb2:	f116      	.short	0xf116
 8001eb4:	f11bf11e 	.word	0xf11bf11e
 8001eb8:	f1f1      	.short	0xf1f1
 8001eba:	05          	.byte	0x05
 8001ebb:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ebc:	2080      	movs	r0, #128	; 0x80
 8001ebe:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ec0:	6863      	ldr	r3, [r4, #4]
 8001ec2:	6861      	ldr	r1, [r4, #4]
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	1818      	adds	r0, r3, r0
 8001ec8:	f7fe f93c 	bl	8000144 <__udivsi3>
 8001ecc:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ece:	0002      	movs	r2, r0
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <UART_SetConfig+0x114>)
 8001ed2:	3a10      	subs	r2, #16
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8dd      	bhi.n	8001e94 <UART_SetConfig+0x88>
        huart->Instance->BRR = usartdiv;
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	60d8      	str	r0, [r3, #12]
 8001edc:	e00f      	b.n	8001efe <UART_SetConfig+0xf2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ede:	f7ff fb87 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	d00b      	beq.n	8001efe <UART_SetConfig+0xf2>
 8001ee6:	e7eb      	b.n	8001ec0 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ee8:	f7ff facc 	bl	8001484 <HAL_RCC_GetSysClockFreq>
        break;
 8001eec:	e7f9      	b.n	8001ee2 <UART_SetConfig+0xd6>
        pclk = (uint32_t) HSI_VALUE;
 8001eee:	480b      	ldr	r0, [pc, #44]	; (8001f1c <UART_SetConfig+0x110>)
 8001ef0:	e7e6      	b.n	8001ec0 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ef2:	428b      	cmp	r3, r1
 8001ef4:	d1f3      	bne.n	8001ede <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ef6:	f7ff fb7b 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001efa:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8001efc:	d1bd      	bne.n	8001e7a <UART_SetConfig+0x6e>
 8001efe:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8001f04:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	ffff69f3 	.word	0xffff69f3
 8001f0c:	ffffcfff 	.word	0xffffcfff
 8001f10:	fffff4ff 	.word	0xfffff4ff
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08002432 	.word	0x08002432
 8001f1c:	007a1200 	.word	0x007a1200
 8001f20:	0000ffef 	.word	0x0000ffef

08001f24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f24:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001f26:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f28:	07da      	lsls	r2, r3, #31
 8001f2a:	d506      	bpl.n	8001f3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f2c:	6801      	ldr	r1, [r0, #0]
 8001f2e:	4c28      	ldr	r4, [pc, #160]	; (8001fd0 <UART_AdvFeatureConfig+0xac>)
 8001f30:	684a      	ldr	r2, [r1, #4]
 8001f32:	4022      	ands	r2, r4
 8001f34:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f36:	4322      	orrs	r2, r4
 8001f38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f3a:	079a      	lsls	r2, r3, #30
 8001f3c:	d506      	bpl.n	8001f4c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f3e:	6801      	ldr	r1, [r0, #0]
 8001f40:	4c24      	ldr	r4, [pc, #144]	; (8001fd4 <UART_AdvFeatureConfig+0xb0>)
 8001f42:	684a      	ldr	r2, [r1, #4]
 8001f44:	4022      	ands	r2, r4
 8001f46:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f48:	4322      	orrs	r2, r4
 8001f4a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f4c:	075a      	lsls	r2, r3, #29
 8001f4e:	d506      	bpl.n	8001f5e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f50:	6801      	ldr	r1, [r0, #0]
 8001f52:	4c21      	ldr	r4, [pc, #132]	; (8001fd8 <UART_AdvFeatureConfig+0xb4>)
 8001f54:	684a      	ldr	r2, [r1, #4]
 8001f56:	4022      	ands	r2, r4
 8001f58:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f5a:	4322      	orrs	r2, r4
 8001f5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f5e:	071a      	lsls	r2, r3, #28
 8001f60:	d506      	bpl.n	8001f70 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f62:	6801      	ldr	r1, [r0, #0]
 8001f64:	4c1d      	ldr	r4, [pc, #116]	; (8001fdc <UART_AdvFeatureConfig+0xb8>)
 8001f66:	684a      	ldr	r2, [r1, #4]
 8001f68:	4022      	ands	r2, r4
 8001f6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f6c:	4322      	orrs	r2, r4
 8001f6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f70:	06da      	lsls	r2, r3, #27
 8001f72:	d506      	bpl.n	8001f82 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f74:	6801      	ldr	r1, [r0, #0]
 8001f76:	4c1a      	ldr	r4, [pc, #104]	; (8001fe0 <UART_AdvFeatureConfig+0xbc>)
 8001f78:	688a      	ldr	r2, [r1, #8]
 8001f7a:	4022      	ands	r2, r4
 8001f7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f7e:	4322      	orrs	r2, r4
 8001f80:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f82:	069a      	lsls	r2, r3, #26
 8001f84:	d506      	bpl.n	8001f94 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f86:	6801      	ldr	r1, [r0, #0]
 8001f88:	4c16      	ldr	r4, [pc, #88]	; (8001fe4 <UART_AdvFeatureConfig+0xc0>)
 8001f8a:	688a      	ldr	r2, [r1, #8]
 8001f8c:	4022      	ands	r2, r4
 8001f8e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f90:	4322      	orrs	r2, r4
 8001f92:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f94:	065a      	lsls	r2, r3, #25
 8001f96:	d510      	bpl.n	8001fba <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f98:	6801      	ldr	r1, [r0, #0]
 8001f9a:	4d13      	ldr	r5, [pc, #76]	; (8001fe8 <UART_AdvFeatureConfig+0xc4>)
 8001f9c:	684a      	ldr	r2, [r1, #4]
 8001f9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001fa0:	402a      	ands	r2, r5
 8001fa2:	4322      	orrs	r2, r4
 8001fa4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	0352      	lsls	r2, r2, #13
 8001faa:	4294      	cmp	r4, r2
 8001fac:	d105      	bne.n	8001fba <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fae:	684a      	ldr	r2, [r1, #4]
 8001fb0:	4c0e      	ldr	r4, [pc, #56]	; (8001fec <UART_AdvFeatureConfig+0xc8>)
 8001fb2:	4022      	ands	r2, r4
 8001fb4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fb6:	4322      	orrs	r2, r4
 8001fb8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fba:	061b      	lsls	r3, r3, #24
 8001fbc:	d506      	bpl.n	8001fcc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fbe:	6802      	ldr	r2, [r0, #0]
 8001fc0:	490b      	ldr	r1, [pc, #44]	; (8001ff0 <UART_AdvFeatureConfig+0xcc>)
 8001fc2:	6853      	ldr	r3, [r2, #4]
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6053      	str	r3, [r2, #4]
}
 8001fcc:	bd30      	pop	{r4, r5, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	fffdffff 	.word	0xfffdffff
 8001fd4:	fffeffff 	.word	0xfffeffff
 8001fd8:	fffbffff 	.word	0xfffbffff
 8001fdc:	ffff7fff 	.word	0xffff7fff
 8001fe0:	ffffefff 	.word	0xffffefff
 8001fe4:	ffffdfff 	.word	0xffffdfff
 8001fe8:	ffefffff 	.word	0xffefffff
 8001fec:	ff9fffff 	.word	0xff9fffff
 8001ff0:	fff7ffff 	.word	0xfff7ffff

08001ff4 <UART_WaitOnFlagUntilTimeout>:
{
 8001ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001ff6:	2780      	movs	r7, #128	; 0x80
{
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	000d      	movs	r5, r1
 8001ffc:	0016      	movs	r6, r2
 8001ffe:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002000:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	69d3      	ldr	r3, [r2, #28]
 8002006:	402b      	ands	r3, r5
 8002008:	1b5b      	subs	r3, r3, r5
 800200a:	4259      	negs	r1, r3
 800200c:	414b      	adcs	r3, r1
 800200e:	42b3      	cmp	r3, r6
 8002010:	d001      	beq.n	8002016 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8002012:	2000      	movs	r0, #0
 8002014:	e028      	b.n	8002068 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002016:	9b08      	ldr	r3, [sp, #32]
 8002018:	3301      	adds	r3, #1
 800201a:	d0f3      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201c:	f7fe feba 	bl	8000d94 <HAL_GetTick>
 8002020:	9b01      	ldr	r3, [sp, #4]
 8002022:	1ac0      	subs	r0, r0, r3
 8002024:	9b08      	ldr	r3, [sp, #32]
 8002026:	4298      	cmp	r0, r3
 8002028:	d801      	bhi.n	800202e <UART_WaitOnFlagUntilTimeout+0x3a>
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11d      	bne.n	800206a <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800202e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002032:	2201      	movs	r2, #1
 8002034:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002038:	6821      	ldr	r1, [r4, #0]
 800203a:	4d1e      	ldr	r5, [pc, #120]	; (80020b4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800203c:	680b      	ldr	r3, [r1, #0]
 800203e:	402b      	ands	r3, r5
 8002040:	600b      	str	r3, [r1, #0]
 8002042:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002046:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800204a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800204e:	6821      	ldr	r1, [r4, #0]
 8002050:	688b      	ldr	r3, [r1, #8]
 8002052:	4393      	bics	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
 8002056:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800205a:	2320      	movs	r3, #32
 800205c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800205e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002060:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002062:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002064:	3474      	adds	r4, #116	; 0x74
 8002066:	7023      	strb	r3, [r4, #0]
}
 8002068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800206a:	2104      	movs	r1, #4
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	420a      	tst	r2, r1
 8002072:	d0c6      	beq.n	8002002 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	423a      	tst	r2, r7
 8002078:	d0c3      	beq.n	8002002 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800207a:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800207c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002080:	2201      	movs	r2, #1
 8002082:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002086:	6821      	ldr	r1, [r4, #0]
 8002088:	4d0a      	ldr	r5, [pc, #40]	; (80020b4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800208a:	680b      	ldr	r3, [r1, #0]
 800208c:	402b      	ands	r3, r5
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002094:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002098:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209c:	6821      	ldr	r1, [r4, #0]
 800209e:	688b      	ldr	r3, [r1, #8]
 80020a0:	4393      	bics	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
 80020a4:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80020a8:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80020aa:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80020ac:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80020ae:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80020b0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80020b2:	e7d5      	b.n	8002060 <UART_WaitOnFlagUntilTimeout+0x6c>
 80020b4:	fffffe5f 	.word	0xfffffe5f

080020b8 <HAL_UART_Transmit>:
{
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80020be:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80020c0:	0004      	movs	r4, r0
 80020c2:	000d      	movs	r5, r1
 80020c4:	0016      	movs	r6, r2
    return HAL_BUSY;
 80020c6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d151      	bne.n	8002170 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 80020cc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80020ce:	2900      	cmp	r1, #0
 80020d0:	d04e      	beq.n	8002170 <HAL_UART_Transmit+0xb8>
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d04c      	beq.n	8002170 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	68a2      	ldr	r2, [r4, #8]
 80020da:	015b      	lsls	r3, r3, #5
 80020dc:	429a      	cmp	r2, r3
 80020de:	d104      	bne.n	80020ea <HAL_UART_Transmit+0x32>
 80020e0:	6923      	ldr	r3, [r4, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80020e6:	4201      	tst	r1, r0
 80020e8:	d142      	bne.n	8002170 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 80020ea:	0023      	movs	r3, r4
 80020ec:	3374      	adds	r3, #116	; 0x74
 80020ee:	9303      	str	r3, [sp, #12]
 80020f0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 80020f2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d03b      	beq.n	8002170 <HAL_UART_Transmit+0xb8>
 80020f8:	2301      	movs	r3, #1
 80020fa:	9a03      	ldr	r2, [sp, #12]
 80020fc:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fe:	2200      	movs	r2, #0
 8002100:	1d23      	adds	r3, r4, #4
 8002102:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002104:	2321      	movs	r3, #33	; 0x21
 8002106:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002108:	f7fe fe44 	bl	8000d94 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800210c:	0023      	movs	r3, r4
 800210e:	3350      	adds	r3, #80	; 0x50
 8002110:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8002112:	3302      	adds	r3, #2
 8002114:	801e      	strh	r6, [r3, #0]
 8002116:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800211c:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800211e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002120:	015b      	lsls	r3, r3, #5
 8002122:	429a      	cmp	r2, r3
 8002124:	d104      	bne.n	8002130 <HAL_UART_Transmit+0x78>
 8002126:	6923      	ldr	r3, [r4, #16]
 8002128:	42b3      	cmp	r3, r6
 800212a:	d101      	bne.n	8002130 <HAL_UART_Transmit+0x78>
 800212c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800212e:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 8002130:	2300      	movs	r3, #0
 8002132:	9a03      	ldr	r2, [sp, #12]
 8002134:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 8002136:	0023      	movs	r3, r4
 8002138:	3352      	adds	r3, #82	; 0x52
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	b29a      	uxth	r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10b      	bne.n	800215a <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002142:	9b05      	ldr	r3, [sp, #20]
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	0020      	movs	r0, r4
 800214a:	003b      	movs	r3, r7
 800214c:	f7ff ff52 	bl	8001ff4 <UART_WaitOnFlagUntilTimeout>
 8002150:	2800      	cmp	r0, #0
 8002152:	d10c      	bne.n	800216e <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002154:	2320      	movs	r3, #32
 8002156:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002158:	e00a      	b.n	8002170 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800215a:	9b05      	ldr	r3, [sp, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	003b      	movs	r3, r7
 8002164:	0020      	movs	r0, r4
 8002166:	f7ff ff45 	bl	8001ff4 <UART_WaitOnFlagUntilTimeout>
 800216a:	2800      	cmp	r0, #0
 800216c:	d002      	beq.n	8002174 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 800216e:	2003      	movs	r0, #3
}
 8002170:	b007      	add	sp, #28
 8002172:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8002174:	6822      	ldr	r2, [r4, #0]
 8002176:	2d00      	cmp	r5, #0
 8002178:	d10b      	bne.n	8002192 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800217a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800217c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800217e:	05db      	lsls	r3, r3, #23
 8002180:	0ddb      	lsrs	r3, r3, #23
 8002182:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002184:	9b04      	ldr	r3, [sp, #16]
 8002186:	9a04      	ldr	r2, [sp, #16]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	3b01      	subs	r3, #1
 800218c:	b29b      	uxth	r3, r3
 800218e:	8013      	strh	r3, [r2, #0]
 8002190:	e7d1      	b.n	8002136 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002192:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002194:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002196:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8002198:	e7f4      	b.n	8002184 <HAL_UART_Transmit+0xcc>
	...

0800219c <UART_CheckIdleState>:
{
 800219c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219e:	2600      	movs	r6, #0
{
 80021a0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	1d03      	adds	r3, r0, #4
 80021a4:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80021a6:	f7fe fdf5 	bl	8000d94 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021aa:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80021ac:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	071b      	lsls	r3, r3, #28
 80021b2:	d416      	bmi.n	80021e2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	075b      	lsls	r3, r3, #29
 80021ba:	d50a      	bpl.n	80021d2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <UART_CheckIdleState+0x60>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	0020      	movs	r0, r4
 80021c6:	002b      	movs	r3, r5
 80021c8:	03c9      	lsls	r1, r1, #15
 80021ca:	f7ff ff13 	bl	8001ff4 <UART_WaitOnFlagUntilTimeout>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d112      	bne.n	80021f8 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80021d2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80021d6:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80021d8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021da:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80021dc:	3474      	adds	r4, #116	; 0x74
 80021de:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80021e0:	e00b      	b.n	80021fa <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <UART_CheckIdleState+0x60>)
 80021e6:	0032      	movs	r2, r6
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	0389      	lsls	r1, r1, #14
 80021ec:	0003      	movs	r3, r0
 80021ee:	0020      	movs	r0, r4
 80021f0:	f7ff ff00 	bl	8001ff4 <UART_WaitOnFlagUntilTimeout>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d0dd      	beq.n	80021b4 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80021f8:	2003      	movs	r0, #3
}
 80021fa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80021fc:	01ffffff 	.word	0x01ffffff

08002200 <HAL_UART_Init>:
{
 8002200:	b510      	push	{r4, lr}
 8002202:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002204:	d101      	bne.n	800220a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002206:	2001      	movs	r0, #1
}
 8002208:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800220a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002210:	0002      	movs	r2, r0
 8002212:	3274      	adds	r2, #116	; 0x74
 8002214:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002216:	f7fe fc61 	bl	8000adc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800221a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800221c:	2101      	movs	r1, #1
 800221e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002220:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002222:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002224:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002226:	438b      	bics	r3, r1
 8002228:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800222a:	f7ff fdef 	bl	8001e0c <UART_SetConfig>
 800222e:	2801      	cmp	r0, #1
 8002230:	d0e9      	beq.n	8002206 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002238:	0020      	movs	r0, r4
 800223a:	f7ff fe73 	bl	8001f24 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <HAL_UART_Init+0x60>)
 8002242:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002244:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002246:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002248:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800224a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	438a      	bics	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002252:	2201      	movs	r2, #1
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800225a:	f7ff ff9f 	bl	800219c <UART_CheckIdleState>
 800225e:	e7d3      	b.n	8002208 <HAL_UART_Init+0x8>
 8002260:	fffff7ff 	.word	0xfffff7ff

08002264 <UART_Start_Receive_IT>:
{
 8002264:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8002266:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002268:	0001      	movs	r1, r0
{
 800226a:	0003      	movs	r3, r0
  huart->RxXferSize  = Size;
 800226c:	3158      	adds	r1, #88	; 0x58
 800226e:	800a      	strh	r2, [r1, #0]
  huart->RxXferCount = Size;
 8002270:	804a      	strh	r2, [r1, #2]
  huart->RxISR       = NULL;
 8002272:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
 8002274:	2480      	movs	r4, #128	; 0x80
 8002276:	001a      	movs	r2, r3
  huart->RxISR       = NULL;
 8002278:	6641      	str	r1, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 800227a:	6880      	ldr	r0, [r0, #8]
 800227c:	0164      	lsls	r4, r4, #5
 800227e:	325c      	adds	r2, #92	; 0x5c
 8002280:	42a0      	cmp	r0, r4
 8002282:	d133      	bne.n	80022ec <UART_Start_Receive_IT+0x88>
 8002284:	6919      	ldr	r1, [r3, #16]
 8002286:	2900      	cmp	r1, #0
 8002288:	d12e      	bne.n	80022e8 <UART_Start_Receive_IT+0x84>
 800228a:	491c      	ldr	r1, [pc, #112]	; (80022fc <UART_Start_Receive_IT+0x98>)
 800228c:	8011      	strh	r1, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	2100      	movs	r1, #0
 8002290:	1d1a      	adds	r2, r3, #4
 8002292:	67d1      	str	r1, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002294:	2222      	movs	r2, #34	; 0x22
 8002296:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002298:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229c:	3a21      	subs	r2, #33	; 0x21
 800229e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	688c      	ldr	r4, [r1, #8]
 80022a6:	4322      	orrs	r2, r4
 80022a8:	608a      	str	r2, [r1, #8]
 80022aa:	f380 8810 	msr	PRIMASK, r0
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	6898      	ldr	r0, [r3, #8]
    huart->RxISR = UART_RxISR_8BIT;
 80022b2:	4a13      	ldr	r2, [pc, #76]	; (8002300 <UART_Start_Receive_IT+0x9c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b4:	0149      	lsls	r1, r1, #5
 80022b6:	4288      	cmp	r0, r1
 80022b8:	d103      	bne.n	80022c2 <UART_Start_Receive_IT+0x5e>
 80022ba:	6919      	ldr	r1, [r3, #16]
 80022bc:	2900      	cmp	r1, #0
 80022be:	d100      	bne.n	80022c2 <UART_Start_Receive_IT+0x5e>
    huart->RxISR = UART_RxISR_16BIT;
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <UART_Start_Receive_IT+0xa0>)
 80022c2:	665a      	str	r2, [r3, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80022c4:	001a      	movs	r2, r3
 80022c6:	2000      	movs	r0, #0
 80022c8:	3274      	adds	r2, #116	; 0x74
 80022ca:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022cc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d0:	2201      	movs	r2, #1
 80022d2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2390      	movs	r3, #144	; 0x90
 80022da:	6814      	ldr	r4, [r2, #0]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4323      	orrs	r3, r4
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	f381 8810 	msr	PRIMASK, r1
}
 80022e6:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80022e8:	21ff      	movs	r1, #255	; 0xff
 80022ea:	e7cf      	b.n	800228c <UART_Start_Receive_IT+0x28>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1cd      	bne.n	800228c <UART_Start_Receive_IT+0x28>
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	2900      	cmp	r1, #0
 80022f4:	d0f8      	beq.n	80022e8 <UART_Start_Receive_IT+0x84>
 80022f6:	217f      	movs	r1, #127	; 0x7f
 80022f8:	e7c8      	b.n	800228c <UART_Start_Receive_IT+0x28>
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	000001ff 	.word	0x000001ff
 8002300:	08001dcb 	.word	0x08001dcb
 8002304:	08001d8d 	.word	0x08001d8d

08002308 <HAL_UART_Receive_IT>:
{
 8002308:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800230a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 800230c:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800230e:	2c20      	cmp	r4, #32
 8002310:	d12d      	bne.n	800236e <HAL_UART_Receive_IT+0x66>
      return HAL_ERROR;
 8002312:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8002314:	2900      	cmp	r1, #0
 8002316:	d02a      	beq.n	800236e <HAL_UART_Receive_IT+0x66>
 8002318:	2a00      	cmp	r2, #0
 800231a:	d028      	beq.n	800236e <HAL_UART_Receive_IT+0x66>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	6884      	ldr	r4, [r0, #8]
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	429c      	cmp	r4, r3
 8002324:	d106      	bne.n	8002334 <HAL_UART_Receive_IT+0x2c>
 8002326:	6903      	ldr	r3, [r0, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800232c:	2401      	movs	r4, #1
      return HAL_ERROR;
 800232e:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8002330:	4221      	tst	r1, r4
 8002332:	d11c      	bne.n	800236e <HAL_UART_Receive_IT+0x66>
    __HAL_LOCK(huart);
 8002334:	0004      	movs	r4, r0
 8002336:	3474      	adds	r4, #116	; 0x74
 8002338:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 800233c:	2d01      	cmp	r5, #1
 800233e:	d016      	beq.n	800236e <HAL_UART_Receive_IT+0x66>
 8002340:	3b01      	subs	r3, #1
 8002342:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002344:	2400      	movs	r4, #0
 8002346:	6604      	str	r4, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002348:	6804      	ldr	r4, [r0, #0]
 800234a:	6864      	ldr	r4, [r4, #4]
 800234c:	0224      	lsls	r4, r4, #8
 800234e:	d50b      	bpl.n	8002368 <HAL_UART_Receive_IT+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002350:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002354:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	6804      	ldr	r4, [r0, #0]
 800235c:	04db      	lsls	r3, r3, #19
 800235e:	6826      	ldr	r6, [r4, #0]
 8002360:	4333      	orrs	r3, r6
 8002362:	6023      	str	r3, [r4, #0]
 8002364:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002368:	f7ff ff7c 	bl	8002264 <UART_Start_Receive_IT>
 800236c:	0003      	movs	r3, r0
}
 800236e:	0018      	movs	r0, r3
 8002370:	bd70      	pop	{r4, r5, r6, pc}
	...

08002374 <__libc_init_array>:
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	2600      	movs	r6, #0
 8002378:	4d0c      	ldr	r5, [pc, #48]	; (80023ac <__libc_init_array+0x38>)
 800237a:	4c0d      	ldr	r4, [pc, #52]	; (80023b0 <__libc_init_array+0x3c>)
 800237c:	1b64      	subs	r4, r4, r5
 800237e:	10a4      	asrs	r4, r4, #2
 8002380:	42a6      	cmp	r6, r4
 8002382:	d109      	bne.n	8002398 <__libc_init_array+0x24>
 8002384:	2600      	movs	r6, #0
 8002386:	f000 f82b 	bl	80023e0 <_init>
 800238a:	4d0a      	ldr	r5, [pc, #40]	; (80023b4 <__libc_init_array+0x40>)
 800238c:	4c0a      	ldr	r4, [pc, #40]	; (80023b8 <__libc_init_array+0x44>)
 800238e:	1b64      	subs	r4, r4, r5
 8002390:	10a4      	asrs	r4, r4, #2
 8002392:	42a6      	cmp	r6, r4
 8002394:	d105      	bne.n	80023a2 <__libc_init_array+0x2e>
 8002396:	bd70      	pop	{r4, r5, r6, pc}
 8002398:	00b3      	lsls	r3, r6, #2
 800239a:	58eb      	ldr	r3, [r5, r3]
 800239c:	4798      	blx	r3
 800239e:	3601      	adds	r6, #1
 80023a0:	e7ee      	b.n	8002380 <__libc_init_array+0xc>
 80023a2:	00b3      	lsls	r3, r6, #2
 80023a4:	58eb      	ldr	r3, [r5, r3]
 80023a6:	4798      	blx	r3
 80023a8:	3601      	adds	r6, #1
 80023aa:	e7f2      	b.n	8002392 <__libc_init_array+0x1e>
 80023ac:	08002438 	.word	0x08002438
 80023b0:	08002438 	.word	0x08002438
 80023b4:	08002438 	.word	0x08002438
 80023b8:	0800243c 	.word	0x0800243c

080023bc <memcpy>:
 80023bc:	2300      	movs	r3, #0
 80023be:	b510      	push	{r4, lr}
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d100      	bne.n	80023c6 <memcpy+0xa>
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	5ccc      	ldrb	r4, [r1, r3]
 80023c8:	54c4      	strb	r4, [r0, r3]
 80023ca:	3301      	adds	r3, #1
 80023cc:	e7f8      	b.n	80023c0 <memcpy+0x4>

080023ce <memset>:
 80023ce:	0003      	movs	r3, r0
 80023d0:	1882      	adds	r2, r0, r2
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d100      	bne.n	80023d8 <memset+0xa>
 80023d6:	4770      	bx	lr
 80023d8:	7019      	strb	r1, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	e7f9      	b.n	80023d2 <memset+0x4>
	...

080023e0 <_init>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr

080023ec <_fini>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f2:	bc08      	pop	{r3}
 80023f4:	469e      	mov	lr, r3
 80023f6:	4770      	bx	lr
