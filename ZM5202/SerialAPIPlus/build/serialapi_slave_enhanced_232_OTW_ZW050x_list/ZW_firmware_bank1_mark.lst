C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE ZW_FIRMWARE_BANK1_MARK
OBJECT MODULE PLACED IN .\build\serialapi_slave_enhanced_232_OTW_ZW050x_Rels\ZW_firmware_bank1_mark.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\bin\C51.exe ..\APPLICATIONUTILITIES\ZW_FIRMWARE_BANK1_MARK.C CODE WARNINGLEVEL(2) OB
                    -JECTADVANCED LARGE LISTINCLUDE NOINTPROMOTE NOCOND INTVECTOR(0X1800) OPTIMIZE(11,SIZE) INCDIR(E:\SDK\Z-Wave\include,E:\S
                    -DK\Z-Wave\IO_defines,.\build,.\build\serialapi_slave_enhanced_232_OTW_ZW050x_Rels,C:\Keil_v5\C51\inc,..\ApplicationUtili
                    -ties,..\ApplicationCommandHandlers,..\..\zlib\cmdclass,..\..\zlib\devtypes,..\..\zlib\handler,E:\SDK\Z-Wave\\IO_defines)
                    - SYMBOLS DF(BOOTLOADER_ENABLED,slave_enhanced_232,US,ZAF_BUILD_NO=52445,ZW_SECURITY_PROTOCOL,ZW_SLAVE,ZW_SLAVE_32,ZW_SLA
                    -VE_ENHANCED_232,ZW_SLAVE_ROUTING,ZW050x,ZW0501,NEW_NODEINFO,ZW_SELF_HEAL,BANKING,ZW_ID_SERVER,SUC_SUPPORT,SERIAL_API_APP
                    -,ZW_SMARTSTART_ENABLED,ZW_EXPLORE,ENABLE_LEDS,NON_BATT,ZW_firmware_bank1_mark) PR(.\build\serialapi_slave_enhanced_232_O
                    -TW_ZW050x_list\ZW_firmware_bank1_mark.lst) OJ(.\build\serialapi_slave_enhanced_232_OTW_ZW050x_Rels\ZW_firmware_bank1_mar
                    -k.obj)

line level    source

   1          /****************************************************************************
   2           *
   3           * Copyright (c) 2001-2013
   4           * Sigma Designs, Inc.
   5           * All Rights Reserved
   6           *
   7           *---------------------------------------------------------------------------
   8           *
   9           * Description: Definition and initialization of BANK1 end marker field
  10           *
  11           * Last Changed By:  $Author: iza $
  12           * Revision:         $Revision: 22797 $
  13           * Last Changed:     $Date: 2012-05-10 15:55:06 +0200 (to, 10 maj 2012) $
  14           *
  15           ****************************************************************************/
  16          
  17          /****************************************************************************/
  18          /*                              INCLUDE FILES                               */
  19          /****************************************************************************/
  20          #include "config_app.h"
   1      =1  /**
   2      =1   *
   3      =1   * Copyright (c) 2001-2014
   4      =1   * Sigma Designs, Inc.
   5      =1   * All Rights Reserved
   6      =1   *
   7      =1   * @file config_app.h
   8      =1   *
   9      =1   * @brief This header file contains defines for application version
  10      =1   *  in a generalized way.
  11      =1   *
  12      =1   *  Don't change the name of the file, and son't change the names of
  13      =1   *  APP_VERSION and APP_REVISION, as they are handled automatically by
  14      =1   *  the release procedure. The version information will be set automatically
  15      =1   *  by the "make_release.bat"-script.
  16      =1   *
  17      =1   * Author: Erik Friis Harck
  18      =1   *
  19      =1   * Last Changed By: $Author: tro $
  20      =1   * Revision: $Revision: 0.00 $
  21      =1   * Last Changed: $Date: 2014/12/09 14:28:21 $
  22      =1   *
  23      =1   */
  24      =1  #ifndef _CONFIG_APP_H_
  25      =1  #define _CONFIG_APP_H_
  26      =1  
  27      =1  #ifdef __C51__
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 2   

  28      =1  #include <ZW_product_id_enum.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Declaration of Z-Wave Product IDs.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _PRODUCT_ID_ENUM_H_
   8      =2  #define _PRODUCT_ID_ENUM_H_
   9      =2  
  10      =2  /****************************************************************************/
  11      =2  /*                              EXPORTED DATA                               */
  12      =2  /****************************************************************************/
  13      =2  
  14      =2  /**
  15      =2   * Standard enum Product type Id
  16      =2   */
  17      =2  typedef enum _PRODUCT_TYPE_ID_ENUM_
  18      =2  {
  19      =2    PRODUCT_TYPE_ID_ZWAVE_ZIP_GATEWAY = 1,
  20      =2    PRODUCT_TYPE_ID_ZWAVE,
  21      =2    PRODUCT_TYPE_ID_ZWAVE_PLUS
  22      =2  } eProductTypeID;
  23      =2  
  24      =2  
  25      =2  /**
  26      =2   * Standard enum Product Plus Id's
  27      =2   */
  28      =2  typedef enum _PRODUCT_PLUS_ID_ENUM_
  29      =2  {
  30      =2    PRODUCT_ID_DoorLockKeyPad = 0x0001,
  31      =2    PRODUCT_ID_SwitchOnOff = 0x0002,
  32      =2    PRODUCT_ID_SensorPIR = 0x0003,
  33      =2    PRODUCT_ID_InclusionController = 0x0004,
  34      =2    PRODUCT_ID_MyProductPlus = 0x0005,
  35      =2    PRODUCT_ID_SecureSensorPIR =  0x0006,
  36      =2    PRODUCT_ID_SecureSwitchOnOff = 0x0007,
  37      =2    PRODUCT_ID_SerialAPIPlus = 0x0008,
  38      =2    PRODUCT_ID_ProdTestDUT = 0x0009,
  39      =2    PRODUCT_ID_ProdTestGen = 0x000A,
  40      =2    PRODUCT_ID_PowerStrip = 0x000B,
  41      =2    PRODUCT_ID_WallController = 0x000C,
  42      =2    PRODUCT_ID_ZIRC = 0x21ac
  43      =2  } eProductPlusID;
  44      =2  
  45      =2  #endif /* _PRODUCT_ID_ENUM_H_ */
  29      =1  #include <ZW_security_api.h>
   1      =2  /***************************************************************************
   2      =2  *
   3      =2  * Copyright (c) 2013
   4      =2  * Sigma Designs, Inc.
   5      =2  * All Rights Reserved
   6      =2  *
   7      =2  *---------------------------------------------------------------------------
   8      =2  *
   9      =2  * Description: Some nice descriptive description.
  10      =2  *
  11      =2  * Author:   Jakob Buron
  12      =2  *
  13      =2  * Last Changed By:  $Author: jdo $
  14      =2  * Revision:         $Revision: 1.38 $
  15      =2  * Last Changed:     $Date: 2005/07/27 15:12:54 $
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 3   

  16      =2  *
  17      =2  ****************************************************************************/
  18      =2  #ifndef ZW_SECURITY_API_H_
  19      =2  #define ZW_SECURITY_API_H_
  20      =2  
  21      =2  /****************************************************************************/
  22      =2  /*                              INCLUDE FILES                               */
  23      =2  /****************************************************************************/
  24      =2  #include <ZW_typedefs.h>
   1      =3  /*******************************  ZW_typedefs.h  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Products that speak Z-Wave work together better
  11      =3   *
  12      =3   *              Copyright (c) 2008
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Module description
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: efh $
  29      =3   * Revision:         $Revision: 29359 $
  30      =3   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_TYPEDEFS_H_
  34      =3  #define _ZW_TYPEDEFS_H_
  35      =3  
  36      =3  #ifndef __C51__
  44      =3  
  45      =3  /****************************************************************************/
  46      =3  /*                              INCLUDE FILES                               */
  47      =3  /****************************************************************************/
  48      =3  
  49      =3  /****************************************************************************/
  50      =3  /*                     EXPORTED TYPES and DEFINITIONS                       */
  51      =3  /****************************************************************************/
  52      =3  #ifndef BYTE
  53      =3  typedef unsigned char   BYTE;
  54      =3  typedef unsigned short  WORD;
  55      =3  typedef unsigned long   DWORD;
  56      =3  
  57      =3  #define IIBYTE BYTE idata  /* Internal indexed data byte */
  58      =3  #define IBYTE  BYTE data   /* Internal data byte */
  59      =3  #define IWORD  WORD data   /* Internal data word */
  60      =3  #define IDWORD DWORD data  /* Internal data double word*/
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 4   

  61      =3  
  62      =3  #define XBYTE  BYTE xdata  /* External data byte */
  63      =3  #define XWORD  WORD xdata  /* External data word */
  64      =3  #define XDWORD DWORD xdata /* External data double word */
  65      =3  #define BBYTE  BYTE bdata  /* Internal bit adressable byte */
  66      =3  
  67      =3  #define PBYTE  XBYTE
  68      =3  #define PWORD  XWORD
  69      =3  #define PDWORD XDWORD
  70      =3  
  71      =3  #define BOOL   bit         /* Internal bit */
  72      =3  
  73      =3  #define CODE   code        /* Used for defining callback function which allways */
  74      =3                             /* resides in code space. */
  75      =3  
  76      =3  typedef BYTE * BYTE_P;
  77      =3  typedef WORD * WORD_P;
  78      =3  typedef DWORD * DWORD_P;
  79      =3  
  80      =3  typedef struct
  81      =3  {
  82      =3    BYTE anything;
  83      =3  } sSomeXDATA4K;
  84      =3  typedef sSomeXDATA4K * XDATA4K_P;
  85      =3  #endif
  86      =3  
  87      =3  #ifndef EOF
  88      =3  #define EOF (-1)
  89      =3  #endif
  90      =3  
  91      =3  #ifndef NULL
  92      =3  #define NULL  (0)
  93      =3  #endif
  94      =3  
  95      =3  #ifndef TRUE
  96      =3  #define TRUE  (1)
  97      =3  #define FALSE (0)
  98      =3  #endif
  99      =3  
 100      =3  /* Define for making easy and consistent callback definitions */
 101      =3  #define VOID_CALLBACKFUNC(completedFunc)  void (CODE *completedFunc)
 102      =3  
 103      =3  /* Remove memory specifier byte from generic pointer
 104      =3     See also: http://www.keil.com/forum/3443/ */
 105      =3  #ifdef __C51__
 106      =3  #define STRIP_GENERIC_PTR(p) ((unsigned) (void *) (p))
 107      =3  /* Macros to test generic pointers for NULL-ness, even if they
 108      =3  have been promoted from memory specific pointers */
 109      =3  #define IS_NULL(x)  (STRIP_GENERIC_PTR(x) == 0)
 110      =3  #define NON_NULL(x) (STRIP_GENERIC_PTR(x) != 0)
 111      =3  #else
 115      =3  
 116      =3  #define UNUSED(x) x = x; /* Hack to silence warning C280 Unreferenced local variable */
 117      =3  #define UNUSED_CONST(x) if(x) ; /* Hack to silence warning C280 Unreferenced const variable */
 118      =3  
 119      =3  #define UIP_HTONL(x) x // C51 is big endian by default
 120      =3  
 121      =3  /****************************************************************************/
 122      =3  /*                                 MACROS                                   */
 123      =3  /****************************************************************************/
 124      =3  
 125      =3  /* offset of field m in a struct s */
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 5   

 126      =3  #ifndef offsetof
 127      =3  #define offsetof(s,m)   (WORD)( (BYTE_P)&(((s *)0)->m) - (BYTE_P)0 )
 128      =3  #endif
 129      =3  
 130      =3  
 131      =3  #endif /* _ZW_TYPEDEFS_H_ */
  25      =2  
  26      =2  /****************************************************************************/
  27      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  28      =2  /****************************************************************************/
  29      =2  /* The security key a frame was received with or should be sent with.
  30      =2   *
  31      =2   * Special values:
  32      =2  */
  33      =2  typedef enum SECURITY_KEY
  34      =2  {
  35      =2    SECURITY_KEY_NONE = 0x00,
  36      =2    SECURITY_KEY_S2_UNAUTHENTICATED = 0x01,
  37      =2    SECURITY_KEY_S2_AUTHENTICATED = 0x02,
  38      =2    SECURITY_KEY_S2_ACCESS = 0x03,
  39      =2    SECURITY_KEY_S0 = 0x04,
  40      =2  } security_key_t;
  41      =2  
  42      =2  
  43      =2  /**
  44      =2   * Bitmask for security keys. Used by \ref ZW_GetSecurityKeys.
  45      =2   */
  46      =2  #define SECURITY_KEY_S2_UNAUTHENTICATED_BIT 0x01
  47      =2  #define SECURITY_KEY_S2_AUTHENTICATED_BIT 0x02
  48      =2  #define SECURITY_KEY_S2_ACCESS_BIT 0x04
  49      =2  #define SECURITY_KEY_S0_BIT 0x80
  50      =2  
  51      =2  #define SECURITY_KEY_S2_MASK (SECURITY_KEY_S2_UNAUTHENTICATED_BIT \
  52      =2                                | SECURITY_KEY_S2_AUTHENTICATED_BIT \
  53      =2                                | SECURITY_KEY_S2_ACCESS_BIT)
  54      =2  #define SECURITY_KEY_NONE_MASK 0x00
  55      =2  
  56      =2  
  57      =2  /**
  58      =2   * Security S2 Public DSK Key length
  59      =2   */
  60      =2  #define SECURITY_KEY_S2_PUBLIC_DSK_LENGTH     16
  61      =2  
  62      =2  
  63      =2  /**
  64      =2   * Security S2 Public CSA DSK Key length
  65      =2   */
  66      =2  #define SECURITY_KEY_S2_PUBLIC_CSA_DSK_LENGTH 4
  67      =2  
  68      =2  
  69      =2  /**
  70      =2   *  definitions for Security S2 inclusion Authentication
  71      =2   */
  72      =2  typedef enum _E_SECURTIY_S2_AUTHENTICATION_
  73      =2  {
  74      =2    SECURITY_AUTHENTICATION_SSA = 0x00,
  75      =2    SECURITY_AUTHENTICATION_CSA = 0x01
  76      =2  } e_security_s2_authentication_t;
  77      =2  
  78      =2  
  79      =2  typedef struct _S_SECURITY_S2_INCLUSION_CSA_PUBLIC_DSK_
  80      =2  {
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 6   

  81      =2    BYTE aCSA_DSK[SECURITY_KEY_S2_PUBLIC_CSA_DSK_LENGTH];
  82      =2  } s_SecurityS2InclusionCSAPublicDSK_t;
  83      =2  
  84      =2  
  85      =2  /**
  86      =2   * Definitions for Application bound Security events
  87      =2   * Delivered from protocol to Application through the Application implmemented
  88      =2   * ApplicationSecurityEvent(s_application_security_event_data_t)
  89      =2   */
  90      =2  typedef enum _E_APPLICATION_SECURITY_EVENT_
  91      =2  {
  92      =2    E_APPLICATION_SECURITY_EVENT_S2_INCLUSION_REQUEST_DSK_CSA
  93      =2  } e_application_security_event_t;
  94      =2  
  95      =2  
  96      =2  /**
  97      =2   *
  98      =2   *
  99      =2   */
 100      =2  typedef struct _S_APPLICATION_SECURITY_EVENT_DATA_
 101      =2  {
 102      =2    e_application_security_event_t event;
 103      =2    BYTE eventDataLength;
 104      =2    BYTE *eventData;
 105      =2  } s_application_security_event_data_t;
 106      =2  
 107      =2  
 108      =2  /**
 109      =2  * Application must implement this. Used by protocol to request/inform Application
 110      =2  * of Security based Events. Currently only an event for Client Side Authentication (CSA)
 111      =2  * has been defined - E_APPLICATION_SECURITY_EVENT_S2_INCLUSION_REQUEST_DSK_CSA.
 112      =2  *
 113      =2  * \ref E_APPLICATION_SECURITY_EVENT_S2_INCLUSION_REQUEST_DSK_CSA Security Event
 114      =2  *   Is posted by protocol when in S2 inclusion with CSA enabled and the
 115      =2  *   Server side DSK is needed.
 116      =2  *   Application must call ZW_SetSecurityS2InclusionCSA_DSK(s_SecurityS2InclusionCSAPublicDSK_t *)
 117      =2  *   with the retrieved Server/Controller side DSK.
 118      =2  *
 119      =2  *   @param[in] securityEvent  Pointer to structure containing the security event
 120      =2  *                             and any possible data connected to the event.
 121      =2  */
 122      =2  void ApplicationSecurityEvent(s_application_security_event_data_t *securiyEvent);
 123      =2  
 124      =2  
 125      =2  /**
 126      =2  * Application must implement this function
 127      =2  * NOTE: If Z-Wave framework are used then ApplicationSecureCommandsSupported
 128      =2  *       are allready implemented in \ref ZW_TransportSecProtocol.c.
 129      =2  */
 130      =2  void
 131      =2  ApplicationSecureCommandsSupported(
 132      =2      enum SECURITY_KEY eKey, /* IN Security Key to report on */
 133      =2      BYTE **pCmdClasses,           /* OUT Cmd classes supported by endpoint */
 134      =2      BYTE *pLength);               /* OUT Length of pCmdClasses, 0 if endpoint does not exist */
 135      =2  
 136      =2  
 137      =2  /**
 138      =2  * Application must implement this function to return a bitmask of the
 139      =2  * security keys requested by the node when joining a network.
 140      =2  * The including controller may grant all or a subset of the requested
 141      =2  * keys.
 142      =2  * Supported keys:
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 7   

 143      =2  * \ref SECURITY_KEY_S0_BIT;
 144      =2  * \ref SECURITY_KEY_S2_ACCESS_BIT;
 145      =2  * \ref SECURITY_KEY_S2_AUTHENTICATED_BIT;
 146      =2  * \ref SECURITY_KEY_S2_UNAUTHENTICATED_BIT;
 147      =2  * \return A bitmask of supported security keys.
 148      =2  *
 149      =2  */
 150      =2  BYTE ApplicationSecureKeysRequested(void);
 151      =2  
 152      =2  
 153      =2  /**
 154      =2  * Application must implement this function to return a value of the
 155      =2  * security authentication requested by the node when joining a network.
 156      =2  * Supported methods:
 157      =2  * \ref SECURITY_AUTHENTICATION_SSA;
 158      =2  * \ref SECURITY_AUTHENTICATION_CSA;
 159      =2  *
 160      =2  */
 161      =2  BYTE ApplicationSecureAuthenticationRequested(void);
 162      =2  
 163      =2  
 164      =2  /**
 165      =2   *    @brief
 166      =2   *    Set the Controller DSK requested by protocol for CSA inclusion through
 167      =2   *    calling ApplicationSecurityS2InclusionRequestDSK_CSA
 168      =2   *
 169      =2   *    @param[in] response retrieved CSA DSK
 170      =2   *
 171      =2   */
 172      =2  void ZW_SetSecurityS2InclusionPublicDSK_CSA(s_SecurityS2InclusionCSAPublicDSK_t *response);
 173      =2  
 174      =2  
 175      =2  /*===========================   ZW_GetSecurityKeys   =========================
 176      =2  **
 177      =2  **    Returns a bitmask of security keys the application can request
 178      =2  **    ZW_SendDataEX() to use. When the node is excluded, no security keys
 179      =2  **    will be reported.
 180      =2  **
 181      =2  **    Side effects:
 182      =2  **
 183      =2  **--------------------------------------------------------------------------*/
 184      =2  BYTE ZW_GetSecurityKeys(void);
 185      =2  
 186      =2  
 187      =2  /*======================   ZW_SetSecurityS0NetworkKey   ======================
 188      =2  **    @brief
 189      =2  **    Set the network key S0 in the protocol.
 190      =2  **    This function is only to be called after a firmware update from an
 191      =2  **    application based upon an SDK prior to 6.70, as example 6.51, 6.60, or
 192      =2  **    6.61 to an application based upon SDK 6.70 or later.
 193      =2  **
 194      =2  **    Note: This is only relevant for a node that was securely included in an
 195      =2  **          S0 based network.
 196      =2  **
 197      =2  **    @param[in] network_key  Pointer to the S0 network key for the home
 198      =2  **                            network. 16 bytes long.
 199      =2  **
 200      =2  **    Side effects:
 201      =2  **
 202      =2  **--------------------------------------------------------------------------*/
 203      =2  void ZW_SetSecurityS0NetworkKey(BYTE * network_key);
 204      =2  
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 8   

 205      =2  
 206      =2  /**
 207      =2   *
 208      =2   *
 209      =2   */
 210      =2  void ZW_GetSecurityS2PublicDSK(BYTE *buf);
 211      =2  
 212      =2  
 213      =2  #ifdef ZW_SECURITY_PROTOCOL_SINGLE_NETWORK_KEY
 220      =2  
 221      =2  
 222      =2  /*
 223      =2   *
 224      =2   *
 225      =2   */
 226      =2  void ZW_s2_inclusion_init(void);
 227      =2  
 228      =2  
 229      =2  #endif /* ZW_SECURITY_API_H_ */
  30      =1  #endif
  31      =1  
  32      =1  #define APP_MANUFACTURER_ID     MFG_ID_SIGMA_DESIGNS
  33      =1  #define APP_PRODUCT_TYPE_ID     PRODUCT_TYPE_ID_ZWAVE_PLUS
  34      =1  #define APP_PRODUCT_ID          PRODUCT_ID_SerialAPIPlus
  35      =1  #define APP_FIRMWARE_ID         APP_PRODUCT_ID | (APP_PRODUCT_TYPE_ID << 8)
  36      =1  
  37      =1  
  38      =1  #ifdef ZW_SECURITY_PROTOCOL
  39      =1  
  40      =1  #define REQUESTED_SECURITY_AUTHENTICATION SECURITY_AUTHENTICATION_SSA
  41      =1  
  42      =1  #ifdef ZW_SECURITY_PROTOCOL_SINGLE_NETWORK_KEY
  48      =1  
  49      =1  #define REQUESTED_SECURITY_KEYS ( SECURITY_KEY_S0_BIT | SECURITY_KEY_S2_UNAUTHENTICATED_BIT | SECURITY_KEY
             -_S2_AUTHENTICATED_BIT | SECURITY_KEY_S2_ACCESS_BIT)
  50      =1  
  51      =1  #endif  /* ZW_SECURITY_SINGLE_NETWORK_KEY */
  52      =1  
  53      =1  #endif  /* ZW_SECURITY_PROTOCOL */
  54      =1  
  55      =1  /* Accept all incoming command classes, regardless of NIF contents. */
  56      =1  #define ACCEPT_ALL_CMD_CLASSES
  57      =1  
  58      =1  #endif /* _CONFIG_APP_H_ */
  59      =1  
  21          #include "ZW_typedefs.h"
   1      =1  /*******************************  ZW_typedefs.h  *******************************
   2      =1   *           #######
   3      =1   *           ##  ##
   4      =1   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =1   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =1   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =1   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =1   *          #######   ####   ##  ##  #####       ##  #####
   9      =1   *                                           #####
  10      =1   *          Products that speak Z-Wave work together better
  11      =1   *
  12      =1   *              Copyright (c) 2008
  13      =1   *              Zensys A/S
  14      =1   *              Denmark
  15      =1   *
  16      =1   *              All Rights Reserved
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 9   

  17      =1   *
  18      =1   *    This source file is subject to the terms and conditions of the
  19      =1   *    Zensys Software License Agreement which restricts the manner
  20      =1   *    in which it may be used.
  21      =1   *
  22      =1   *---------------------------------------------------------------------------
  23      =1   *
  24      =1   * Description: Module description
  25      =1   *
  26      =1   * Author:   Ivar Jeppesen
  27      =1   *
  28      =1   * Last Changed By:  $Author: efh $
  29      =1   * Revision:         $Revision: 29359 $
  30      =1   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =1   *
  32      =1   ****************************************************************************/
  33      =1  #ifndef _ZW_TYPEDEFS_H_
  22          #include "ZW_firmware_descriptor.h"
   1      =1  /****************************************************************************
   2      =1   *
   3      =1   * Copyright (c) 2001-2012
   4      =1   * Sigma Designs, Inc.
   5      =1   * All Rights Reserved
   6      =1   *
   7      =1   *---------------------------------------------------------------------------
   8      =1   *
   9      =1   * Description: Declaration of Z-Wave firmware descriptor.
  10      =1   *
  11      =1   * Author:   Erik Friis Harck
  12      =1   *
  13      =1   * Last Changed By:  $Author: iza $
  14      =1   * Revision:         $Revision: 22797 $
  15      =1   * Last Changed:     $Date: 2012-05-10 15:55:06 +0200 (to, 10 maj 2012) $
  16      =1   *
  17      =1   ****************************************************************************/
  18      =1  #ifndef _FIRMWARE_DESCRIPTOR_H_
  19      =1  #define _FIRMWARE_DESCRIPTOR_H_
  20      =1  
  21      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 10  

  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  22      =1  
  23      =1  /****************************************************************************/
  24      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  25      =1  /****************************************************************************/
  26      =1  
  27      =1  /* Firmware descriptor for firmware. Located at the end of firmware. */
  28      =1  typedef struct s_firmwareDescriptor_
  29      =1  {
  30      =1    /* Total amount of code used in COMMON bank */
  31      =1    WORD wFirmWareCommonSize;  /*  */
  32      =1    /* Total amount of code used in BANK1 bank */
  33      =1    WORD wFirmWareBank1Size;  /*  */
  34      =1    /* Total amount of code used in BANK2 bank */
  35      =1    WORD wFirmWareBank2Size;  /*  */
  36      =1    /* Total amount of code used in BANK3 bank */
  37      =1    WORD wFirmWareBank3Size;  /*  */
  38      =1    WORD manufacturerID;
  39      =1    WORD firmwareID;
  40      =1    WORD checksum;
  41      =1  } t_firmwareDescriptor;
  42      =1  
  43      =1  
  44      =1  /* Firmware structure */
  45      =1  typedef struct s_firmware_
  46      =1  {
  47      =1    BYTE firmwareStart[8];      /* Filler */
  48      =1    WORD firmwareDescriptorOffs; /* Offset into first 32K bytes where firmwareDescriptor structure is placed
             - */
  49      =1    BYTE applicationCode[1000]; /* 1000 is just an arbitrary example */
  50      =1                                /* Every field beyond this you must calculate the      */
  51      =1                                /* pointer to, because the size of the application     */
  52      =1                                /* is unknown at compilation time for the bootloader.  */
  53      =1    t_firmwareDescriptor firmwareDescriptor;
  54      =1  } t_firmware;
  55      =1  
  56      =1  /****************************************************************************/
  57      =1  /*                              EXPORTED DATA                               */
  58      =1  /****************************************************************************/
  59      =1  
  60      =1  extern code t_firmwareDescriptor firmwareDescriptor;
  61      =1  extern code WORD firmwareDescriptorAddr;
  62      =1  extern code BYTE bBank1EndMarker;
  63      =1  extern code BYTE bBank2EndMarker;
  64      =1  extern code BYTE bBank3EndMarker;
  65      =1  
  66      =1  
  67      =1  #endif /* _FIRMWARE_DESCRIPTOR_H_ */
  23          
  24          /****************************************************************************/
  25          /*                              EXPORTED DATA                               */
  26          /****************************************************************************/
  27          
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 11  

  28          /* BANK1 End marker for OTA firmware update.               */
  29          /* This firmware BANK1 end marker must be, and will be, located at     */
  30          /* the end of BANK1 */
  31          code BYTE bBank1EndMarker = 1;
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 13  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


sSomeXDATA4K . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  anything . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
eProductTypeID . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
eProductPlusID . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_S_SECURITY_S2_INCLUSION_CSA_PUBLIC_DSK_* TAG *  -----  STRUCT   -----  4
  aCSA_DSK . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
_PRODUCT_TYPE_ID_ENUM_ . . . . . . . .  * TAG *  -----  ENUM     -----  -----
_PRODUCT_PLUS_ID_ENUM_ . . . . . . . .  * TAG *  -----  ENUM     -----  -----
bBank1EndMarker. . . . . . . . . . . .  PUBLIC   CODE   U_CHAR   0000H  1
s_firmware_. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  1024
  firmwareStart. . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
  firmwareDescriptorOffs . . . . . . .  MEMBER   -----  U_INT    0008H  2
  applicationCode. . . . . . . . . . .  MEMBER   -----  ARRAY    000AH  1000
  firmwareDescriptor . . . . . . . . .  MEMBER   -----  STRUCT   03F2H  14
PRODUCT_ID_PowerStrip. . . . . . . . .  E_CONST  -----  INT      -----  2
e_application_security_event_t . . . .  TYPEDEF  -----  U_CHAR   -----  1
PRODUCT_ID_ProdTestDUT . . . . . . . .  E_CONST  -----  INT      -----  2
XDATA4K_P. . . . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
s_application_security_event_data_t. .  TYPEDEF  -----  STRUCT   -----  5
  event. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  eventDataLength. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  eventData. . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
PRODUCT_TYPE_ID_ZWAVE. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E_APPLICATION_SECURITY_EVENT_S2_INCLUS  E_CONST  -----  U_CHAR   -----  1
SECURITY_KEY_S0. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PRODUCT_ID_ZIRC. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
PRODUCT_ID_SecureSwitchOnOff . . . . .  E_CONST  -----  INT      -----  2
PRODUCT_ID_WallController. . . . . . .  E_CONST  -----  INT      -----  2
DWORD_P. . . . . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
t_firmware . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1024
  firmwareStart. . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
  firmwareDescriptorOffs . . . . . . .  MEMBER   -----  U_INT    0008H  2
  applicationCode. . . . . . . . . . .  MEMBER   -----  ARRAY    000AH  1000
  firmwareDescriptor . . . . . . . . .  MEMBER   -----  STRUCT   03F2H  14
SECURITY_AUTHENTICATION_CSA. . . . . .  E_CONST  -----  U_CHAR   -----  1
s_firmwareDescriptor_. . . . . . . . .  * TAG *  -----  STRUCT   -----  14
  wFirmWareCommonSize. . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  wFirmWareBank1Size . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  wFirmWareBank2Size . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  wFirmWareBank3Size . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  manufacturerID . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  firmwareID . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  checksum . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
SECURITY_KEY_S2_ACCESS . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PRODUCT_ID_SwitchOnOff . . . . . . . .  E_CONST  -----  INT      -----  2
SECURITY_KEY . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
PRODUCT_ID_MyProductPlus . . . . . . .  E_CONST  -----  INT      -----  2
PRODUCT_ID_ProdTestGen . . . . . . . .  E_CONST  -----  INT      -----  2
PRODUCT_ID_SecureSensorPIR . . . . . .  E_CONST  -----  INT      -----  2
SECURITY_AUTHENTICATION_SSA. . . . . .  E_CONST  -----  U_CHAR   -----  1
PRODUCT_TYPE_ID_ZWAVE_PLUS . . . . . .  E_CONST  -----  U_CHAR   -----  1
_E_SECURTIY_S2_AUTHENTICATION_ . . . .  * TAG *  -----  ENUM     -----  -----
SECURITY_KEY_S2_AUTHENTICATED. . . . .  E_CONST  -----  U_CHAR   -----  1
PRODUCT_ID_DoorLockKeyPad. . . . . . .  E_CONST  -----  INT      -----  2
C51 COMPILER V9.54   ZW_FIRMWARE_BANK1_MARK                                                12/14/2021 16:17:24 PAGE 14  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SECURITY_KEY_NONE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PRODUCT_ID_SerialAPIPlus . . . . . . .  E_CONST  -----  INT      -----  2
PRODUCT_ID_InclusionController . . . .  E_CONST  -----  INT      -----  2
PRODUCT_ID_SensorPIR . . . . . . . . .  E_CONST  -----  INT      -----  2
t_firmwareDescriptor . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  14
  wFirmWareCommonSize. . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  wFirmWareBank1Size . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  wFirmWareBank2Size . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  wFirmWareBank3Size . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  manufacturerID . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  firmwareID . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  checksum . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
_E_APPLICATION_SECURITY_EVENT_ . . . .  * TAG *  -----  ENUM     -----  -----
BYTE_P . . . . . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
s_SecurityS2InclusionCSAPublicDSK_t. .  TYPEDEF  -----  STRUCT   -----  4
  aCSA_DSK . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
_S_APPLICATION_SECURITY_EVENT_DATA_. .  * TAG *  -----  STRUCT   -----  5
  event. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  eventDataLength. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  eventData. . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
e_security_s2_authentication_t . . . .  TYPEDEF  -----  U_CHAR   -----  1
WORD_P . . . . . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
PRODUCT_TYPE_ID_ZWAVE_ZIP_GATEWAY. . .  E_CONST  -----  U_CHAR   -----  1
SECURITY_KEY_S2_UNAUTHENTICATED. . . .  E_CONST  -----  U_CHAR   -----  1
security_key_t . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =      1    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
