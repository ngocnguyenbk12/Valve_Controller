C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SWITCHONOFF
OBJECT MODULE PLACED IN .\build_prj\SwitchOnOff_slave_enhanced_232_OTA_ZW050x_TI_Rels\SwitchOnOff.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SwitchOnOff.c LARGE OBJECTADVANCED WARNINGLEVEL(1) OPTIMIZE(11,SIZE) BRO
                    -WSE NOINTPROMOTE INTVECTOR(0X1800) INCDIR(..\..\Z-WAVE\INCLUDE;..\..\Z-WAVE\IO_DEFINES;.\BUILD_PRJ;.\BUILD_PRJ\SWITCHONO
                    -FF_SLAVE_ENHANCED_232_OTA_ZW050X_TI_RELS;.\BUILD_PRJ\SWITCHONOFF_SLAVE_ENHANCED_232_OTA_ZW050X_TI;C:\KEIL_V5\C51\INC;..\
                    -APPLICATIONUTILITIES;..\APPLICATIONCOMMANDHANDLERS;..\..\ZLIB\CMDCLASS;..\..\ZLIB\DEVTYPES;..\..\ZLIB\HANDLER;..\Valve_f
                    -ucntion) DB OE NOCO SB LC CD DEFINE(BOOTLOADER_ENABLED,slave_enhanced_232,US,ZAF_BUILD_NO=52445,ZW_SECURITY_PROTOCOL,ZW_
                    -SLAVE,ZW_SLAVE_32,ZW_SLAVE_ENHANCED_232,ZW_SLAVE_ROUTING,ZW050x,ZW0501,NEW_NODEINFO,ZW_SELF_HEAL,BANKING,TEST_INTERFACE_
                    -SUPPORT,ZW_TEST_INTERFACE_DRIVER,NON_BATT,ZW_SMARTSTART_ENABLED,BOOTLOADER_ENABLED,slave_enhanced_232,US,ZAF_BUILD_NO=52
                    -445,ZW_SECURITY_PROTOCOL,ZW_SLAVE,ZW_SLAVE_32,ZW_SLAVE_ENHANCED_232,ZW_SLAVE_ROUTING,ZW050x,ZW0501,NEW_NODEINFO,ZW_SELF_
                    -HEAL,BANKING,TEST_INTERFACE_SUPPORT,ZW_TEST_INTERFACE_DRIVER,NON_BATT,ZW_SMARTSTART_ENABLED) DEBUG PRINT(.\build_prj\Swi
                    -tchOnOff_slave_enhanced_232_OTA_ZW050x_TI_list\SwitchOnOff.lst) TABS(2) OBJECT(.\build_prj\SwitchOnOff_slave_enhanced_23
                    -2_OTA_ZW050x_TI_Rels\SwitchOnOff.obj)

line level    source

   1          /**
   2           * @file SwitchOnOff.c
   3           * @copyright Copyright (c) 2001-2015
   4           * Sigma Designs, Inc.
   5           * All Rights Reservedï¿½
   6           * @brief Z-Wave Switch On/Off Sample Application
   7           * @details This sample application is a Z-Wave slave node which has an LED (D2
   8           * on ZDP03A) that can be turned on or off from another Z-Wave node by sending
   9           * a Basic Set On or a Basic Set Off command.
  10           *
  11           * It can be included and excluded from a Z-Wave network by pressing S1 switch
  12           * on the ZDP03A board 3 times. S2 switch toggles LED D2. S3 switch transmits
  13           * a Node Information Frame (NIF).
  14           *
  15           * Last changed by: $Author: $
  16           * Revision:        $Revision: $
  17           * Last changed:    $Date: $
  18           *
  19           * @author Someone who started this sample application at some point in time.
  20           * @author Thomas Roll (TRO)
  21           * @author Christian Salmony Olsen (COLSEN)
  22           */
  23          
  24          /****************************************************************************/
  25          /*                              INCLUDE FILES                               */
  26          /****************************************************************************/
  27          
  28          #include "config_app.h"
   1      =1  /**
   2      =1   * @file config_app.h
   3      =1   * @brief Configuration file for Power Strip sample application.
   4      =1   * @copyright Copyright (c) 2001-2017
   5      =1   * Sigma Designs, Inc.
   6      =1   * All Rights Reserved
   7      =1   * @details This file contains definitions for the Z-Wave+ Framework as well for the sample app.
   8      =1   *
   9      =1   * NOTICE: The file name must not be changed and the two definitions APP_VERSION and APP_REVISION
  10      =1   * must not be changed since they are used by the build environment.
  11      =1   */
  12      =1  #ifndef _CONFIG_APP_H_
  13      =1  #define _CONFIG_APP_H_
  14      =1  
  15      =1  #ifdef __C51__
  16      =1  #include <ZW_product_id_enum.h>
   1      =2  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 2   

   2      =2   * @file
   3      =2   * Declaration of Z-Wave Product IDs.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _PRODUCT_ID_ENUM_H_
   8      =2  #define _PRODUCT_ID_ENUM_H_
   9      =2  
  10      =2  /****************************************************************************/
  11      =2  /*                              EXPORTED DATA                               */
  12      =2  /****************************************************************************/
  13      =2  
  14      =2  /**
  15      =2   * Standard enum Product type Id
  16      =2   */
  17      =2  typedef enum _PRODUCT_TYPE_ID_ENUM_
  18      =2  {
  19      =2    PRODUCT_TYPE_ID_ZWAVE_ZIP_GATEWAY = 1,
  20      =2    PRODUCT_TYPE_ID_ZWAVE,
  21      =2    PRODUCT_TYPE_ID_ZWAVE_PLUS
  22      =2  } eProductTypeID;
  23      =2  
  24      =2  
  25      =2  /**
  26      =2   * Standard enum Product Plus Id's
  27      =2   */
  28      =2  typedef enum _PRODUCT_PLUS_ID_ENUM_
  29      =2  {
  30      =2    PRODUCT_ID_DoorLockKeyPad = 0x0001,
  31      =2    PRODUCT_ID_SwitchOnOff = 0x0002,
  32      =2    PRODUCT_ID_SensorPIR = 0x0003,
  33      =2    PRODUCT_ID_InclusionController = 0x0004,
  34      =2    PRODUCT_ID_MyProductPlus = 0x0005,
  35      =2    PRODUCT_ID_SecureSensorPIR =  0x0006,
  36      =2    PRODUCT_ID_SecureSwitchOnOff = 0x0007,
  37      =2    PRODUCT_ID_SerialAPIPlus = 0x0008,
  38      =2    PRODUCT_ID_ProdTestDUT = 0x0009,
  39      =2    PRODUCT_ID_ProdTestGen = 0x000A,
  40      =2    PRODUCT_ID_PowerStrip = 0x000B,
  41      =2    PRODUCT_ID_WallController = 0x000C,
  42      =2    PRODUCT_ID_ZIRC = 0x21ac
  43      =2  } eProductPlusID;
  44      =2  
  45      =2  #endif /* _PRODUCT_ID_ENUM_H_ */
  17      =1  #include <commandClassManufacturerSpecific.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Handler for Command Class Manufacturer Specific.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _COMMANDCLASSMANUFACTURERSPECIFIC_H_
   8      =2  #define _COMMANDCLASSMANUFACTURERSPECIFIC_H_
   9      =2  
  10      =2  /****************************************************************************/
  11      =2  /*                              INCLUDE FILES                               */
  12      =2  /****************************************************************************/
  13      =2  
  14      =2  #include <ZW_typedefs.h>
   1      =3  /*******************************  ZW_typedefs.h  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 3   

   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Products that speak Z-Wave work together better
  11      =3   *
  12      =3   *              Copyright (c) 2008
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Module description
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: efh $
  29      =3   * Revision:         $Revision: 29359 $
  30      =3   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_TYPEDEFS_H_
  34      =3  #define _ZW_TYPEDEFS_H_
  35      =3  
  36      =3  #ifndef __C51__
  44      =3  
  45      =3  /****************************************************************************/
  46      =3  /*                              INCLUDE FILES                               */
  47      =3  /****************************************************************************/
  48      =3  
  49      =3  /****************************************************************************/
  50      =3  /*                     EXPORTED TYPES and DEFINITIONS                       */
  51      =3  /****************************************************************************/
  52      =3  #ifndef BYTE
  53      =3  typedef unsigned char   BYTE;
  54      =3  typedef unsigned short  WORD;
  55      =3  typedef unsigned long   DWORD;
  56      =3  
  57      =3  #define IIBYTE BYTE idata  /* Internal indexed data byte */
  58      =3  #define IBYTE  BYTE data   /* Internal data byte */
  59      =3  #define IWORD  WORD data   /* Internal data word */
  60      =3  #define IDWORD DWORD data  /* Internal data double word*/
  61      =3  
  62      =3  #define XBYTE  BYTE xdata  /* External data byte */
  63      =3  #define XWORD  WORD xdata  /* External data word */
  64      =3  #define XDWORD DWORD xdata /* External data double word */
  65      =3  #define BBYTE  BYTE bdata  /* Internal bit adressable byte */
  66      =3  
  67      =3  #define PBYTE  XBYTE
  68      =3  #define PWORD  XWORD
  69      =3  #define PDWORD XDWORD
  70      =3  
  71      =3  #define BOOL   bit         /* Internal bit */
  72      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 4   

  73      =3  #define CODE   code        /* Used for defining callback function which allways */
  74      =3                             /* resides in code space. */
  75      =3  
  76      =3  typedef BYTE * BYTE_P;
  77      =3  typedef WORD * WORD_P;
  78      =3  typedef DWORD * DWORD_P;
  79      =3  
  80      =3  typedef struct
  81      =3  {
  82      =3    BYTE anything;
  83      =3  } sSomeXDATA4K;
  84      =3  typedef sSomeXDATA4K * XDATA4K_P;
  85      =3  #endif
  86      =3  
  87      =3  #ifndef EOF
  88      =3  #define EOF (-1)
  89      =3  #endif
  90      =3  
  91      =3  #ifndef NULL
  92      =3  #define NULL  (0)
  93      =3  #endif
  94      =3  
  95      =3  #ifndef TRUE
  96      =3  #define TRUE  (1)
  97      =3  #define FALSE (0)
  98      =3  #endif
  99      =3  
 100      =3  /* Define for making easy and consistent callback definitions */
 101      =3  #define VOID_CALLBACKFUNC(completedFunc)  void (CODE *completedFunc)
 102      =3  
 103      =3  /* Remove memory specifier byte from generic pointer
 104      =3     See also: http://www.keil.com/forum/3443/ */
 105      =3  #ifdef __C51__
 106      =3  #define STRIP_GENERIC_PTR(p) ((unsigned) (void *) (p))
 107      =3  /* Macros to test generic pointers for NULL-ness, even if they
 108      =3  have been promoted from memory specific pointers */
 109      =3  #define IS_NULL(x)  (STRIP_GENERIC_PTR(x) == 0)
 110      =3  #define NON_NULL(x) (STRIP_GENERIC_PTR(x) != 0)
 111      =3  #else
 115      =3  
 116      =3  #define UNUSED(x) x = x; /* Hack to silence warning C280 Unreferenced local variable */
 117      =3  #define UNUSED_CONST(x) if(x) ; /* Hack to silence warning C280 Unreferenced const variable */
 118      =3  
 119      =3  #define UIP_HTONL(x) x // C51 is big endian by default
 120      =3  
 121      =3  /****************************************************************************/
 122      =3  /*                                 MACROS                                   */
 123      =3  /****************************************************************************/
 124      =3  
 125      =3  /* offset of field m in a struct s */
 126      =3  #ifndef offsetof
 127      =3  #define offsetof(s,m)   (WORD)( (BYTE_P)&(((s *)0)->m) - (BYTE_P)0 )
 128      =3  #endif
 129      =3  
 130      =3  
 131      =3  #endif /* _ZW_TYPEDEFS_H_ */
  15      =2  #include <ZW_classcmd.h>
   1      =3  // Generated on: 04.08.2017 15:17:23
   2      =3  /*******************************  ZW_classcmd.h  *******************************
   3      =3   *
   4      =3   * Copyright (c) 2001-2016
   5      =3   * Sigma Designs, Inc.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 5   

   6      =3   * All Rights Reserved
   7      =3   *
   8      =3   *---------------------------------------------------------------------------
   9      =3   *
  10      =3   * Description: Device and command class types and definitions.
  11      =3   *
  12      =3   *              Be aware that temporary types and definitions can be present
  13      =3   *              in this header file. Only the types and definitions found in
  14      =3   *              the latest version of the Z-Wave Device Class Specification
  15      =3   *              (doc. nr. 9031002xx) is valid.
  16      =3   *
  17      =3   * Author: JÑrgen Franck
  18      =3   *
  19      =3   * Last Changed By:  $Author: sro $
  20      =3   * Revision:         $Revision: 35619 $
  21      =3   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =3   *
  23      =3   ****************************************************************************/
  24      =3  #ifndef _ZW_CLASSCMD_H_
  25      =3  #define _ZW_CLASSCMD_H_
  26      =3  
  27      =3  /****************************************************************************
  28      =3   *    TYPES and DEFINITIONS
  29      =3   ***************************************************************************/
  30      =3  
  31      =3  
  32      =3  #define ZW_FRAME_COLLECTION_MACRO0\
  33      =3     ZW_COMMON_FRAME                                       ZW_Common;\
  34      =3  /* Command class Alarm */\
  35      =3    ZW_ALARM_GET_FRAME                                           ZW_AlarmGetFrame;\
  36      =3    ZW_ALARM_REPORT_FRAME                                        ZW_AlarmReportFrame;\
  37      =3  /* Command class Alarm V2 */\
  38      =3    ZW_ALARM_GET_V2_FRAME                                        ZW_AlarmGetV2Frame;\
  39      =3    ZW_ALARM_REPORT_1BYTE_V2_FRAME                               ZW_AlarmReport1byteV2Frame;\
  40      =3    ZW_ALARM_REPORT_2BYTE_V2_FRAME                               ZW_AlarmReport2byteV2Frame;\
  41      =3    ZW_ALARM_REPORT_3BYTE_V2_FRAME                               ZW_AlarmReport3byteV2Frame;\
  42      =3    ZW_ALARM_REPORT_4BYTE_V2_FRAME                               ZW_AlarmReport4byteV2Frame;\
  43      =3    ZW_ALARM_SET_V2_FRAME                                        ZW_AlarmSetV2Frame;\
  44      =3    ZW_ALARM_TYPE_SUPPORTED_GET_V2_FRAME                         ZW_AlarmTypeSupportedGetV2Frame;\
  45      =3    ZW_ALARM_TYPE_SUPPORTED_REPORT_1BYTE_V2_FRAME                ZW_AlarmTypeSupportedReport1byteV2Frame;\
  46      =3    ZW_ALARM_TYPE_SUPPORTED_REPORT_2BYTE_V2_FRAME                ZW_AlarmTypeSupportedReport2byteV2Frame;\
  47      =3    ZW_ALARM_TYPE_SUPPORTED_REPORT_3BYTE_V2_FRAME                ZW_AlarmTypeSupportedReport3byteV2Frame;\
  48      =3    ZW_ALARM_TYPE_SUPPORTED_REPORT_4BYTE_V2_FRAME                ZW_AlarmTypeSupportedReport4byteV2Frame;\
  49      =3  /* Command class Notification V3 */\
  50      =3    ZW_NOTIFICATION_GET_V3_FRAME                                 ZW_NotificationGetV3Frame;\
  51      =3    ZW_NOTIFICATION_REPORT_1BYTE_V3_FRAME                        ZW_NotificationReport1byteV3Frame;\
  52      =3    ZW_NOTIFICATION_REPORT_2BYTE_V3_FRAME                        ZW_NotificationReport2byteV3Frame;\
  53      =3    ZW_NOTIFICATION_REPORT_3BYTE_V3_FRAME                        ZW_NotificationReport3byteV3Frame;\
  54      =3    ZW_NOTIFICATION_REPORT_4BYTE_V3_FRAME                        ZW_NotificationReport4byteV3Frame;\
  55      =3    ZW_NOTIFICATION_SET_V3_FRAME                                 ZW_NotificationSetV3Frame;\
  56      =3    ZW_NOTIFICATION_SUPPORTED_GET_V3_FRAME                       ZW_NotificationSupportedGetV3Frame;\
  57      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V3_FRAME              ZW_NotificationSupportedReport1byteV3Frame;
             -\
  58      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V3_FRAME              ZW_NotificationSupportedReport2byteV3Frame;
             -\
  59      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V3_FRAME              ZW_NotificationSupportedReport3byteV3Frame;
             -\
  60      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V3_FRAME              ZW_NotificationSupportedReport4byteV3Frame;
             -\
  61      =3    ZW_EVENT_SUPPORTED_GET_V3_FRAME                              ZW_EventSupportedGetV3Frame;\
  62      =3    ZW_EVENT_SUPPORTED_REPORT_1BYTE_V3_FRAME                     ZW_EventSupportedReport1byteV3Frame;\
  63      =3    ZW_EVENT_SUPPORTED_REPORT_2BYTE_V3_FRAME                     ZW_EventSupportedReport2byteV3Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 6   

  64      =3    ZW_EVENT_SUPPORTED_REPORT_3BYTE_V3_FRAME                     ZW_EventSupportedReport3byteV3Frame;\
  65      =3    ZW_EVENT_SUPPORTED_REPORT_4BYTE_V3_FRAME                     ZW_EventSupportedReport4byteV3Frame;\
  66      =3  /* Command class Notification V4 */\
  67      =3    ZW_NOTIFICATION_GET_V4_FRAME                                 ZW_NotificationGetV4Frame;\
  68      =3    ZW_NOTIFICATION_REPORT_1BYTE_V4_FRAME                        ZW_NotificationReport1byteV4Frame;\
  69      =3    ZW_NOTIFICATION_REPORT_2BYTE_V4_FRAME                        ZW_NotificationReport2byteV4Frame;\
  70      =3    ZW_NOTIFICATION_REPORT_3BYTE_V4_FRAME                        ZW_NotificationReport3byteV4Frame;\
  71      =3    ZW_NOTIFICATION_REPORT_4BYTE_V4_FRAME                        ZW_NotificationReport4byteV4Frame;\
  72      =3    ZW_NOTIFICATION_SET_V4_FRAME                                 ZW_NotificationSetV4Frame;\
  73      =3    ZW_NOTIFICATION_SUPPORTED_GET_V4_FRAME                       ZW_NotificationSupportedGetV4Frame;\
  74      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V4_FRAME              ZW_NotificationSupportedReport1byteV4Frame;
             -\
  75      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V4_FRAME              ZW_NotificationSupportedReport2byteV4Frame;
             -\
  76      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V4_FRAME              ZW_NotificationSupportedReport3byteV4Frame;
             -\
  77      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V4_FRAME              ZW_NotificationSupportedReport4byteV4Frame;
             -\
  78      =3    ZW_EVENT_SUPPORTED_GET_V4_FRAME                              ZW_EventSupportedGetV4Frame;\
  79      =3    ZW_EVENT_SUPPORTED_REPORT_1BYTE_V4_FRAME                     ZW_EventSupportedReport1byteV4Frame;\
  80      =3    ZW_EVENT_SUPPORTED_REPORT_2BYTE_V4_FRAME                     ZW_EventSupportedReport2byteV4Frame;\
  81      =3    ZW_EVENT_SUPPORTED_REPORT_3BYTE_V4_FRAME                     ZW_EventSupportedReport3byteV4Frame;\
  82      =3    ZW_EVENT_SUPPORTED_REPORT_4BYTE_V4_FRAME                     ZW_EventSupportedReport4byteV4Frame;\
  83      =3  /* Command class Notification V5 */\
  84      =3    ZW_NOTIFICATION_GET_V5_FRAME                                 ZW_NotificationGetV5Frame;\
  85      =3    ZW_NOTIFICATION_REPORT_1BYTE_V5_FRAME                        ZW_NotificationReport1byteV5Frame;\
  86      =3    ZW_NOTIFICATION_REPORT_2BYTE_V5_FRAME                        ZW_NotificationReport2byteV5Frame;\
  87      =3    ZW_NOTIFICATION_REPORT_3BYTE_V5_FRAME                        ZW_NotificationReport3byteV5Frame;\
  88      =3    ZW_NOTIFICATION_REPORT_4BYTE_V5_FRAME                        ZW_NotificationReport4byteV5Frame;\
  89      =3    ZW_NOTIFICATION_SET_V5_FRAME                                 ZW_NotificationSetV5Frame;\
  90      =3    ZW_NOTIFICATION_SUPPORTED_GET_V5_FRAME                       ZW_NotificationSupportedGetV5Frame;\
  91      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V5_FRAME              ZW_NotificationSupportedReport1byteV5Frame;
             -\
  92      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V5_FRAME              ZW_NotificationSupportedReport2byteV5Frame;
             -\
  93      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V5_FRAME              ZW_NotificationSupportedReport3byteV5Frame;
             -\
  94      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V5_FRAME              ZW_NotificationSupportedReport4byteV5Frame;
             -\
  95      =3    ZW_EVENT_SUPPORTED_GET_V5_FRAME                              ZW_EventSupportedGetV5Frame;\
  96      =3    ZW_EVENT_SUPPORTED_REPORT_1BYTE_V5_FRAME                     ZW_EventSupportedReport1byteV5Frame;\
  97      =3    ZW_EVENT_SUPPORTED_REPORT_2BYTE_V5_FRAME                     ZW_EventSupportedReport2byteV5Frame;\
  98      =3    ZW_EVENT_SUPPORTED_REPORT_3BYTE_V5_FRAME                     ZW_EventSupportedReport3byteV5Frame;\
  99      =3    ZW_EVENT_SUPPORTED_REPORT_4BYTE_V5_FRAME                     ZW_EventSupportedReport4byteV5Frame;\
 100      =3  /* Command class Notification V6 */\
 101      =3    ZW_NOTIFICATION_GET_V6_FRAME                                 ZW_NotificationGetV6Frame;\
 102      =3    ZW_NOTIFICATION_REPORT_1BYTE_V6_FRAME                        ZW_NotificationReport1byteV6Frame;\
 103      =3    ZW_NOTIFICATION_REPORT_2BYTE_V6_FRAME                        ZW_NotificationReport2byteV6Frame;\
 104      =3    ZW_NOTIFICATION_REPORT_3BYTE_V6_FRAME                        ZW_NotificationReport3byteV6Frame;\
 105      =3    ZW_NOTIFICATION_REPORT_4BYTE_V6_FRAME                        ZW_NotificationReport4byteV6Frame;\
 106      =3    ZW_NOTIFICATION_SET_V6_FRAME                                 ZW_NotificationSetV6Frame;\
 107      =3    ZW_NOTIFICATION_SUPPORTED_GET_V6_FRAME                       ZW_NotificationSupportedGetV6Frame;\
 108      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V6_FRAME              ZW_NotificationSupportedReport1byteV6Frame;
             -\
 109      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V6_FRAME              ZW_NotificationSupportedReport2byteV6Frame;
             -\
 110      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V6_FRAME              ZW_NotificationSupportedReport3byteV6Frame;
             -\
 111      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V6_FRAME              ZW_NotificationSupportedReport4byteV6Frame;
             -\
 112      =3    ZW_EVENT_SUPPORTED_GET_V6_FRAME                              ZW_EventSupportedGetV6Frame;\
 113      =3    ZW_EVENT_SUPPORTED_REPORT_1BYTE_V6_FRAME                     ZW_EventSupportedReport1byteV6Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 7   

 114      =3    ZW_EVENT_SUPPORTED_REPORT_2BYTE_V6_FRAME                     ZW_EventSupportedReport2byteV6Frame;\
 115      =3    ZW_EVENT_SUPPORTED_REPORT_3BYTE_V6_FRAME                     ZW_EventSupportedReport3byteV6Frame;\
 116      =3    ZW_EVENT_SUPPORTED_REPORT_4BYTE_V6_FRAME                     ZW_EventSupportedReport4byteV6Frame;\
 117      =3  /* Command class Notification V7 */\
 118      =3    ZW_NOTIFICATION_GET_V7_FRAME                                 ZW_NotificationGetV7Frame;\
 119      =3    ZW_NOTIFICATION_REPORT_1BYTE_V7_FRAME                        ZW_NotificationReport1byteV7Frame;\
 120      =3    ZW_NOTIFICATION_REPORT_2BYTE_V7_FRAME                        ZW_NotificationReport2byteV7Frame;\
 121      =3    ZW_NOTIFICATION_REPORT_3BYTE_V7_FRAME                        ZW_NotificationReport3byteV7Frame;\
 122      =3    ZW_NOTIFICATION_REPORT_4BYTE_V7_FRAME                        ZW_NotificationReport4byteV7Frame;\
 123      =3    ZW_NOTIFICATION_SET_V7_FRAME                                 ZW_NotificationSetV7Frame;\
 124      =3    ZW_NOTIFICATION_SUPPORTED_GET_V7_FRAME                       ZW_NotificationSupportedGetV7Frame;\
 125      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V7_FRAME              ZW_NotificationSupportedReport1byteV7Frame;
             -\
 126      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V7_FRAME              ZW_NotificationSupportedReport2byteV7Frame;
             -\
 127      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V7_FRAME              ZW_NotificationSupportedReport3byteV7Frame;
             -\
 128      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V7_FRAME              ZW_NotificationSupportedReport4byteV7Frame;
             -\
 129      =3    ZW_EVENT_SUPPORTED_GET_V7_FRAME                              ZW_EventSupportedGetV7Frame;\
 130      =3    ZW_EVENT_SUPPORTED_REPORT_1BYTE_V7_FRAME                     ZW_EventSupportedReport1byteV7Frame;\
 131      =3    ZW_EVENT_SUPPORTED_REPORT_2BYTE_V7_FRAME                     ZW_EventSupportedReport2byteV7Frame;\
 132      =3    ZW_EVENT_SUPPORTED_REPORT_3BYTE_V7_FRAME                     ZW_EventSupportedReport3byteV7Frame;\
 133      =3    ZW_EVENT_SUPPORTED_REPORT_4BYTE_V7_FRAME                     ZW_EventSupportedReport4byteV7Frame;\
 134      =3  /* Command class Notification V8 */\
 135      =3    ZW_NOTIFICATION_GET_V8_FRAME                                 ZW_NotificationGetV8Frame;\
 136      =3    ZW_NOTIFICATION_REPORT_1BYTE_V8_FRAME                        ZW_NotificationReport1byteV8Frame;\
 137      =3    ZW_NOTIFICATION_REPORT_2BYTE_V8_FRAME                        ZW_NotificationReport2byteV8Frame;\
 138      =3    ZW_NOTIFICATION_REPORT_3BYTE_V8_FRAME                        ZW_NotificationReport3byteV8Frame;\
 139      =3    ZW_NOTIFICATION_REPORT_4BYTE_V8_FRAME                        ZW_NotificationReport4byteV8Frame;\
 140      =3    ZW_NOTIFICATION_SET_V8_FRAME                                 ZW_NotificationSetV8Frame;\
 141      =3    ZW_NOTIFICATION_SUPPORTED_GET_V8_FRAME                       ZW_NotificationSupportedGetV8Frame;\
 142      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V8_FRAME              ZW_NotificationSupportedReport1byteV8Frame;
             -\
 143      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V8_FRAME              ZW_NotificationSupportedReport2byteV8Frame;
             -\
 144      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V8_FRAME              ZW_NotificationSupportedReport3byteV8Frame;
             -\
 145      =3    ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V8_FRAME              ZW_NotificationSupportedReport4byteV8Frame;
             -\
 146      =3    ZW_EVENT_SUPPORTED_GET_V8_FRAME                              ZW_EventSupportedGetV8Frame;\
 147      =3    ZW_EVENT_SUPPORTED_REPORT_1BYTE_V8_FRAME                     ZW_EventSupportedReport1byteV8Frame;\
 148      =3    ZW_EVENT_SUPPORTED_REPORT_2BYTE_V8_FRAME                     ZW_EventSupportedReport2byteV8Frame;\
 149      =3    ZW_EVENT_SUPPORTED_REPORT_3BYTE_V8_FRAME                     ZW_EventSupportedReport3byteV8Frame;\
 150      =3    ZW_EVENT_SUPPORTED_REPORT_4BYTE_V8_FRAME                     ZW_EventSupportedReport4byteV8Frame;\
 151      =3  /* Command class Application Status */\
 152      =3    ZW_APPLICATION_BUSY_FRAME                                    ZW_ApplicationBusyFrame;\
 153      =3    ZW_APPLICATION_REJECTED_REQUEST_FRAME                        ZW_ApplicationRejectedRequestFrame;\
 154      =3  /* Command class Association Command Configuration */\
 155      =3    ZW_COMMAND_CONFIGURATION_GET_FRAME                           ZW_CommandConfigurationGetFrame;\
 156      =3    ZW_COMMAND_CONFIGURATION_REPORT_1BYTE_FRAME                  ZW_CommandConfigurationReport1byteFrame;\
 157      =3    ZW_COMMAND_CONFIGURATION_REPORT_2BYTE_FRAME                  ZW_CommandConfigurationReport2byteFrame;\
 158      =3    ZW_COMMAND_CONFIGURATION_REPORT_3BYTE_FRAME                  ZW_CommandConfigurationReport3byteFrame;\
 159      =3    ZW_COMMAND_CONFIGURATION_REPORT_4BYTE_FRAME                  ZW_CommandConfigurationReport4byteFrame;\
 160      =3    ZW_COMMAND_CONFIGURATION_SET_1BYTE_FRAME                     ZW_CommandConfigurationSet1byteFrame;\
 161      =3    ZW_COMMAND_CONFIGURATION_SET_2BYTE_FRAME                     ZW_CommandConfigurationSet2byteFrame;\
 162      =3    ZW_COMMAND_CONFIGURATION_SET_3BYTE_FRAME                     ZW_CommandConfigurationSet3byteFrame;\
 163      =3    ZW_COMMAND_CONFIGURATION_SET_4BYTE_FRAME                     ZW_CommandConfigurationSet4byteFrame;\
 164      =3    ZW_COMMAND_RECORDS_SUPPORTED_GET_FRAME                       ZW_CommandRecordsSupportedGetFrame;\
 165      =3    ZW_COMMAND_RECORDS_SUPPORTED_REPORT_FRAME                    ZW_CommandRecordsSupportedReportFrame;\
 166      =3  /* Command class Association */\
 167      =3    ZW_ASSOCIATION_GET_FRAME                                     ZW_AssociationGetFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 8   

 168      =3    ZW_ASSOCIATION_GROUPINGS_GET_FRAME                           ZW_AssociationGroupingsGetFrame;\
 169      =3    ZW_ASSOCIATION_GROUPINGS_REPORT_FRAME                        ZW_AssociationGroupingsReportFrame;\
 170      =3    ZW_ASSOCIATION_REMOVE_1BYTE_FRAME                            ZW_AssociationRemove1byteFrame;\
 171      =3    ZW_ASSOCIATION_REMOVE_2BYTE_FRAME                            ZW_AssociationRemove2byteFrame;\
 172      =3    ZW_ASSOCIATION_REMOVE_3BYTE_FRAME                            ZW_AssociationRemove3byteFrame;\
 173      =3    ZW_ASSOCIATION_REMOVE_4BYTE_FRAME                            ZW_AssociationRemove4byteFrame;\
 174      =3    ZW_ASSOCIATION_REPORT_1BYTE_FRAME                            ZW_AssociationReport1byteFrame;\
 175      =3    ZW_ASSOCIATION_REPORT_2BYTE_FRAME                            ZW_AssociationReport2byteFrame;\
 176      =3    ZW_ASSOCIATION_REPORT_3BYTE_FRAME                            ZW_AssociationReport3byteFrame;\
 177      =3    ZW_ASSOCIATION_REPORT_4BYTE_FRAME                            ZW_AssociationReport4byteFrame;\
 178      =3    ZW_ASSOCIATION_SET_1BYTE_FRAME                               ZW_AssociationSet1byteFrame;\
 179      =3    ZW_ASSOCIATION_SET_2BYTE_FRAME                               ZW_AssociationSet2byteFrame;\
 180      =3    ZW_ASSOCIATION_SET_3BYTE_FRAME                               ZW_AssociationSet3byteFrame;\
 181      =3    ZW_ASSOCIATION_SET_4BYTE_FRAME                               ZW_AssociationSet4byteFrame;\
 182      =3  /* Command class Association V2 */\
 183      =3    ZW_ASSOCIATION_GET_V2_FRAME                                  ZW_AssociationGetV2Frame;\
 184      =3    ZW_ASSOCIATION_GROUPINGS_GET_V2_FRAME                        ZW_AssociationGroupingsGetV2Frame;\
 185      =3    ZW_ASSOCIATION_GROUPINGS_REPORT_V2_FRAME                     ZW_AssociationGroupingsReportV2Frame;\
 186      =3    ZW_ASSOCIATION_REMOVE_1BYTE_V2_FRAME                         ZW_AssociationRemove1byteV2Frame;\
 187      =3    ZW_ASSOCIATION_REMOVE_2BYTE_V2_FRAME                         ZW_AssociationRemove2byteV2Frame;\
 188      =3    ZW_ASSOCIATION_REMOVE_3BYTE_V2_FRAME                         ZW_AssociationRemove3byteV2Frame;\
 189      =3    ZW_ASSOCIATION_REMOVE_4BYTE_V2_FRAME                         ZW_AssociationRemove4byteV2Frame;\
 190      =3    ZW_ASSOCIATION_REPORT_1BYTE_V2_FRAME                         ZW_AssociationReport1byteV2Frame;\
 191      =3    ZW_ASSOCIATION_REPORT_2BYTE_V2_FRAME                         ZW_AssociationReport2byteV2Frame;\
 192      =3    ZW_ASSOCIATION_REPORT_3BYTE_V2_FRAME                         ZW_AssociationReport3byteV2Frame;\
 193      =3    ZW_ASSOCIATION_REPORT_4BYTE_V2_FRAME                         ZW_AssociationReport4byteV2Frame;\
 194      =3    ZW_ASSOCIATION_SET_1BYTE_V2_FRAME                            ZW_AssociationSet1byteV2Frame;\
 195      =3    ZW_ASSOCIATION_SET_2BYTE_V2_FRAME                            ZW_AssociationSet2byteV2Frame;\
 196      =3    ZW_ASSOCIATION_SET_3BYTE_V2_FRAME                            ZW_AssociationSet3byteV2Frame;\
 197      =3    ZW_ASSOCIATION_SET_4BYTE_V2_FRAME                            ZW_AssociationSet4byteV2Frame;\
 198      =3    ZW_ASSOCIATION_SPECIFIC_GROUP_GET_V2_FRAME                   ZW_AssociationSpecificGroupGetV2Frame;\
 199      =3    ZW_ASSOCIATION_SPECIFIC_GROUP_REPORT_V2_FRAME                ZW_AssociationSpecificGroupReportV2Frame;\
 200      =3  /* Command class Av Content Directory Md */\
 201      =3    ZW_AV_CONTENT_BROWSE_MD_BY_LETTER_GET_FRAME                  ZW_AvContentBrowseMdByLetterGetFrame;\
 202      =3    ZW_AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT_FRAME               ZW_AvContentBrowseMdByLetterReportFrame;\
 203      =3    ZW_AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET_FRAME                ZW_AvContentBrowseMdChildCountGetFrame;\
 204      =3    ZW_AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT_FRAME             ZW_AvContentBrowseMdChildCountReportFrame;\
 205      =3    ZW_AV_CONTENT_BROWSE_MD_GET_FRAME                            ZW_AvContentBrowseMdGetFrame;\
 206      =3    ZW_AV_CONTENT_BROWSE_MD_REPORT_FRAME                         ZW_AvContentBrowseMdReportFrame;\
 207      =3    ZW_AV_MATCH_ITEM_TO_RENDERER_MD_GET_FRAME                    ZW_AvMatchItemToRendererMdGetFrame;\
 208      =3    ZW_AV_MATCH_ITEM_TO_RENDERER_MD_REPORT_FRAME                 ZW_AvMatchItemToRendererMdReportFrame;\
 209      =3  /* Command class Av Content Search Md */\
 210      =3    ZW_AV_CONTENT_SEARCH_MD_GET_FRAME                            ZW_AvContentSearchMdGetFrame;\
 211      =3    ZW_AV_CONTENT_SEARCH_MD_REPORT_FRAME                         ZW_AvContentSearchMdReportFrame;\
 212      =3  /* Command class Av Renderer Status */\
 213      =3    ZW_AV_RENDERER_STATUS_GET_FRAME                              ZW_AvRendererStatusGetFrame;\
 214      =3    ZW_AV_RENDERER_STATUS_REPORT_FRAME                           ZW_AvRendererStatusReportFrame;\
 215      =3  /* Command class Av Tagging Md */\
 216      =3    ZW_AV_TAGGING_MD_GET_FRAME                                   ZW_AvTaggingMdGetFrame;\
 217      =3    ZW_AV_TAGGING_MD_REPORT_FRAME                                ZW_AvTaggingMdReportFrame;\
 218      =3  /* Command class Basic Tariff Info */\
 219      =3    ZW_BASIC_TARIFF_INFO_GET_FRAME                               ZW_BasicTariffInfoGetFrame;\
 220      =3    ZW_BASIC_TARIFF_INFO_REPORT_FRAME                            ZW_BasicTariffInfoReportFrame;\
 221      =3  /* Command class Basic Window Covering */\
 222      =3    ZW_BASIC_WINDOW_COVERING_START_LEVEL_CHANGE_FRAME            ZW_BasicWindowCoveringStartLevelChangeFrame
             -;\
 223      =3    ZW_BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE_FRAME             ZW_BasicWindowCoveringStopLevelChangeFrame;
             -\
 224      =3  /* Command class Basic */\
 225      =3    ZW_BASIC_GET_FRAME                                           ZW_BasicGetFrame;\
 226      =3    ZW_BASIC_REPORT_FRAME                                        ZW_BasicReportFrame;\
 227      =3    ZW_BASIC_SET_FRAME                                           ZW_BasicSetFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 9   

 228      =3  /* Command class Basic V2 */\
 229      =3    ZW_BASIC_GET_V2_FRAME                                        ZW_BasicGetV2Frame;\
 230      =3    ZW_BASIC_REPORT_V2_FRAME                                     ZW_BasicReportV2Frame;\
 231      =3    ZW_BASIC_SET_V2_FRAME                                        ZW_BasicSetV2Frame;\
 232      =3  /* Command class Battery */\
 233      =3    ZW_BATTERY_GET_FRAME                                         ZW_BatteryGetFrame;\
 234      =3    ZW_BATTERY_REPORT_FRAME                                      ZW_BatteryReportFrame;\
 235      =3  /* Command class Chimney Fan */\
 236      =3    ZW_CHIMNEY_FAN_ALARM_LOG_GET_FRAME                           ZW_ChimneyFanAlarmLogGetFrame;\
 237      =3    ZW_CHIMNEY_FAN_ALARM_LOG_REPORT_FRAME                        ZW_ChimneyFanAlarmLogReportFrame;\
 238      =3    ZW_CHIMNEY_FAN_ALARM_LOG_SET_FRAME                           ZW_ChimneyFanAlarmLogSetFrame;\
 239      =3    ZW_CHIMNEY_FAN_ALARM_STATUS_GET_FRAME                        ZW_ChimneyFanAlarmStatusGetFrame;\
 240      =3    ZW_CHIMNEY_FAN_ALARM_STATUS_REPORT_FRAME                     ZW_ChimneyFanAlarmStatusReportFrame;\
 241      =3    ZW_CHIMNEY_FAN_ALARM_STATUS_SET_FRAME                        ZW_ChimneyFanAlarmStatusSetFrame;\
 242      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_GET_FRAME                          ZW_ChimneyFanAlarmTempGetFrame;\
 243      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_1BYTE_FRAME                 ZW_ChimneyFanAlarmTempReport1byteFrame;\
 244      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_2BYTE_FRAME                 ZW_ChimneyFanAlarmTempReport2byteFrame;\
 245      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_3BYTE_FRAME                 ZW_ChimneyFanAlarmTempReport3byteFrame;\
 246      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_4BYTE_FRAME                 ZW_ChimneyFanAlarmTempReport4byteFrame;\
 247      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_SET_1BYTE_FRAME                    ZW_ChimneyFanAlarmTempSet1byteFrame;\
 248      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_SET_2BYTE_FRAME                    ZW_ChimneyFanAlarmTempSet2byteFrame;\
 249      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_SET_3BYTE_FRAME                    ZW_ChimneyFanAlarmTempSet3byteFrame;\
 250      =3    ZW_CHIMNEY_FAN_ALARM_TEMP_SET_4BYTE_FRAME                    ZW_ChimneyFanAlarmTempSet4byteFrame;\
 251      =3    ZW_CHIMNEY_FAN_BOOST_TIME_GET_FRAME                          ZW_ChimneyFanBoostTimeGetFrame;\
 252      =3    ZW_CHIMNEY_FAN_BOOST_TIME_REPORT_FRAME                       ZW_ChimneyFanBoostTimeReportFrame;\
 253      =3    ZW_CHIMNEY_FAN_BOOST_TIME_SET_FRAME                          ZW_ChimneyFanBoostTimeSetFrame;\
 254      =3    ZW_CHIMNEY_FAN_DEFAULT_SET_FRAME                             ZW_ChimneyFanDefaultSetFrame;\
 255      =3    ZW_CHIMNEY_FAN_MIN_SPEED_GET_FRAME                           ZW_ChimneyFanMinSpeedGetFrame;\
 256      =3    ZW_CHIMNEY_FAN_MIN_SPEED_REPORT_FRAME                        ZW_ChimneyFanMinSpeedReportFrame;\
 257      =3    ZW_CHIMNEY_FAN_MIN_SPEED_SET_FRAME                           ZW_ChimneyFanMinSpeedSetFrame;\
 258      =3    ZW_CHIMNEY_FAN_MODE_GET_FRAME                                ZW_ChimneyFanModeGetFrame;\
 259      =3    ZW_CHIMNEY_FAN_MODE_REPORT_FRAME                             ZW_ChimneyFanModeReportFrame;\
 260      =3    ZW_CHIMNEY_FAN_MODE_SET_FRAME                                ZW_ChimneyFanModeSetFrame;\
 261      =3    ZW_CHIMNEY_FAN_SETUP_GET_FRAME                               ZW_ChimneyFanSetupGetFrame;\
 262      =3    ZW_CHIMNEY_FAN_SETUP_REPORT_1BYTE_FRAME                      ZW_ChimneyFanSetupReport1byteFrame;\
 263      =3    ZW_CHIMNEY_FAN_SETUP_REPORT_2BYTE_FRAME                      ZW_ChimneyFanSetupReport2byteFrame;\
 264      =3    ZW_CHIMNEY_FAN_SETUP_REPORT_3BYTE_FRAME                      ZW_ChimneyFanSetupReport3byteFrame;\
 265      =3    ZW_CHIMNEY_FAN_SETUP_REPORT_4BYTE_FRAME                      ZW_ChimneyFanSetupReport4byteFrame;\
 266      =3    ZW_CHIMNEY_FAN_SETUP_SET_1BYTE_FRAME                         ZW_ChimneyFanSetupSet1byteFrame;\
 267      =3    ZW_CHIMNEY_FAN_SETUP_SET_2BYTE_FRAME                         ZW_ChimneyFanSetupSet2byteFrame;\
 268      =3    ZW_CHIMNEY_FAN_SETUP_SET_3BYTE_FRAME                         ZW_ChimneyFanSetupSet3byteFrame;\
 269      =3    ZW_CHIMNEY_FAN_SETUP_SET_4BYTE_FRAME                         ZW_ChimneyFanSetupSet4byteFrame;\
 270      =3    ZW_CHIMNEY_FAN_SPEED_GET_FRAME                               ZW_ChimneyFanSpeedGetFrame;\
 271      =3    ZW_CHIMNEY_FAN_SPEED_REPORT_FRAME                            ZW_ChimneyFanSpeedReportFrame;\
 272      =3    ZW_CHIMNEY_FAN_SPEED_SET_FRAME                               ZW_ChimneyFanSpeedSetFrame;\
 273      =3    ZW_CHIMNEY_FAN_START_TEMP_GET_FRAME                          ZW_ChimneyFanStartTempGetFrame;\
 274      =3    ZW_CHIMNEY_FAN_START_TEMP_REPORT_1BYTE_FRAME                 ZW_ChimneyFanStartTempReport1byteFrame;\
 275      =3    ZW_CHIMNEY_FAN_START_TEMP_REPORT_2BYTE_FRAME                 ZW_ChimneyFanStartTempReport2byteFrame;\
 276      =3    ZW_CHIMNEY_FAN_START_TEMP_REPORT_3BYTE_FRAME                 ZW_ChimneyFanStartTempReport3byteFrame;\
 277      =3    ZW_CHIMNEY_FAN_START_TEMP_REPORT_4BYTE_FRAME                 ZW_ChimneyFanStartTempReport4byteFrame;\
 278      =3    ZW_CHIMNEY_FAN_START_TEMP_SET_1BYTE_FRAME                    ZW_ChimneyFanStartTempSet1byteFrame;\
 279      =3    ZW_CHIMNEY_FAN_START_TEMP_SET_2BYTE_FRAME                    ZW_ChimneyFanStartTempSet2byteFrame;\
 280      =3    ZW_CHIMNEY_FAN_START_TEMP_SET_3BYTE_FRAME                    ZW_ChimneyFanStartTempSet3byteFrame;\
 281      =3    ZW_CHIMNEY_FAN_START_TEMP_SET_4BYTE_FRAME                    ZW_ChimneyFanStartTempSet4byteFrame;\
 282      =3    ZW_CHIMNEY_FAN_STATE_GET_FRAME                               ZW_ChimneyFanStateGetFrame;\
 283      =3    ZW_CHIMNEY_FAN_STATE_REPORT_FRAME                            ZW_ChimneyFanStateReportFrame;\
 284      =3    ZW_CHIMNEY_FAN_STATE_SET_FRAME                               ZW_ChimneyFanStateSetFrame;\
 285      =3    ZW_CHIMNEY_FAN_STATUS_GET_FRAME                              ZW_ChimneyFanStatusGetFrame;\
 286      =3    ZW_CHIMNEY_FAN_STATUS_REPORT_1BYTE_FRAME                     ZW_ChimneyFanStatusReport1byteFrame;\
 287      =3    ZW_CHIMNEY_FAN_STATUS_REPORT_2BYTE_FRAME                     ZW_ChimneyFanStatusReport2byteFrame;\
 288      =3    ZW_CHIMNEY_FAN_STATUS_REPORT_3BYTE_FRAME                     ZW_ChimneyFanStatusReport3byteFrame;\
 289      =3    ZW_CHIMNEY_FAN_STATUS_REPORT_4BYTE_FRAME                     ZW_ChimneyFanStatusReport4byteFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 10  

 290      =3    ZW_CHIMNEY_FAN_STOP_TEMP_GET_FRAME                           ZW_ChimneyFanStopTempGetFrame;\
 291      =3    ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_1BYTE_FRAME                  ZW_ChimneyFanStopTempReport1byteFrame;\
 292      =3    ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_2BYTE_FRAME                  ZW_ChimneyFanStopTempReport2byteFrame;\
 293      =3    ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_3BYTE_FRAME                  ZW_ChimneyFanStopTempReport3byteFrame;\
 294      =3    ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_4BYTE_FRAME                  ZW_ChimneyFanStopTempReport4byteFrame;\
 295      =3    ZW_CHIMNEY_FAN_STOP_TEMP_SET_1BYTE_FRAME                     ZW_ChimneyFanStopTempSet1byteFrame;\
 296      =3    ZW_CHIMNEY_FAN_STOP_TEMP_SET_2BYTE_FRAME                     ZW_ChimneyFanStopTempSet2byteFrame;\
 297      =3    ZW_CHIMNEY_FAN_STOP_TEMP_SET_3BYTE_FRAME                     ZW_ChimneyFanStopTempSet3byteFrame;\
 298      =3    ZW_CHIMNEY_FAN_STOP_TEMP_SET_4BYTE_FRAME                     ZW_ChimneyFanStopTempSet4byteFrame;\
 299      =3    ZW_CHIMNEY_FAN_STOP_TIME_GET_FRAME                           ZW_ChimneyFanStopTimeGetFrame;\
 300      =3    ZW_CHIMNEY_FAN_STOP_TIME_REPORT_FRAME                        ZW_ChimneyFanStopTimeReportFrame;\
 301      =3    ZW_CHIMNEY_FAN_STOP_TIME_SET_FRAME                           ZW_ChimneyFanStopTimeSetFrame;\
 302      =3  /* Command class Climate Control Schedule */\
 303      =3    ZW_SCHEDULE_CHANGED_GET_FRAME                                ZW_ScheduleChangedGetFrame;\
 304      =3    ZW_SCHEDULE_CHANGED_REPORT_FRAME                             ZW_ScheduleChangedReportFrame;\
 305      =3    ZW_SCHEDULE_GET_FRAME                                        ZW_ScheduleGetFrame;\
 306      =3    ZW_SCHEDULE_OVERRIDE_GET_FRAME                               ZW_ScheduleOverrideGetFrame;\
 307      =3    ZW_SCHEDULE_OVERRIDE_REPORT_FRAME                            ZW_ScheduleOverrideReportFrame;\
 308      =3    ZW_SCHEDULE_OVERRIDE_SET_FRAME                               ZW_ScheduleOverrideSetFrame;\
 309      =3    ZW_SCHEDULE_REPORT_FRAME                                     ZW_ScheduleReportFrame;\
 310      =3    ZW_SCHEDULE_SET_FRAME                                        ZW_ScheduleSetFrame;\
 311      =3  /* Command class Clock */\
 312      =3    ZW_CLOCK_GET_FRAME                                           ZW_ClockGetFrame;\
 313      =3    ZW_CLOCK_REPORT_FRAME                                        ZW_ClockReportFrame;\
 314      =3    ZW_CLOCK_SET_FRAME                                           ZW_ClockSetFrame;\
 315      =3  /* Command class Configuration */\
 316      =3    ZW_CONFIGURATION_GET_FRAME                                   ZW_ConfigurationGetFrame;\
 317      =3    ZW_CONFIGURATION_REPORT_1BYTE_FRAME                          ZW_ConfigurationReport1byteFrame;\
 318      =3    ZW_CONFIGURATION_REPORT_2BYTE_FRAME                          ZW_ConfigurationReport2byteFrame;\
 319      =3    ZW_CONFIGURATION_REPORT_3BYTE_FRAME                          ZW_ConfigurationReport3byteFrame;\
 320      =3    ZW_CONFIGURATION_REPORT_4BYTE_FRAME                          ZW_ConfigurationReport4byteFrame;\
 321      =3    ZW_CONFIGURATION_SET_1BYTE_FRAME                             ZW_ConfigurationSet1byteFrame;\
 322      =3    ZW_CONFIGURATION_SET_2BYTE_FRAME                             ZW_ConfigurationSet2byteFrame;\
 323      =3    ZW_CONFIGURATION_SET_3BYTE_FRAME                             ZW_ConfigurationSet3byteFrame;\
 324      =3    ZW_CONFIGURATION_SET_4BYTE_FRAME                             ZW_ConfigurationSet4byteFrame;\
 325      =3  /* Command class Configuration V2 */\
 326      =3    ZW_CONFIGURATION_BULK_GET_V2_FRAME                           ZW_ConfigurationBulkGetV2Frame;\
 327      =3    VG_CONFIGURATION_BULK_REPORT_1BYTE_V2_VG                     VG_ConfigurationBulkReport1byteV2VGroup;\
 328      =3    VG_CONFIGURATION_BULK_REPORT_2BYTE_V2_VG                     VG_ConfigurationBulkReport2byteV2VGroup;\
 329      =3    VG_CONFIGURATION_BULK_REPORT_3BYTE_V2_VG                     VG_ConfigurationBulkReport3byteV2VGroup;\
 330      =3    VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG                     VG_ConfigurationBulkReport4byteV2VGroup;\
 331      =3    ZW_CONFIGURATION_BULK_REPORT_1BYTE_V2_FRAME                  ZW_ConfigurationBulkReport1byteV2Frame;\
 332      =3    ZW_CONFIGURATION_BULK_REPORT_2BYTE_V2_FRAME                  ZW_ConfigurationBulkReport2byteV2Frame;\
 333      =3    ZW_CONFIGURATION_BULK_REPORT_3BYTE_V2_FRAME                  ZW_ConfigurationBulkReport3byteV2Frame;\
 334      =3    ZW_CONFIGURATION_BULK_REPORT_4BYTE_V2_FRAME                  ZW_ConfigurationBulkReport4byteV2Frame;\
 335      =3    VG_CONFIGURATION_BULK_SET_1BYTE_V2_VG                        VG_ConfigurationBulkSet1byteV2VGroup;\
 336      =3    VG_CONFIGURATION_BULK_SET_2BYTE_V2_VG                        VG_ConfigurationBulkSet2byteV2VGroup;\
 337      =3    VG_CONFIGURATION_BULK_SET_3BYTE_V2_VG                        VG_ConfigurationBulkSet3byteV2VGroup;\
 338      =3    VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG                        VG_ConfigurationBulkSet4byteV2VGroup;\
 339      =3    ZW_CONFIGURATION_BULK_SET_1BYTE_V2_FRAME                     ZW_ConfigurationBulkSet1byteV2Frame;\
 340      =3    ZW_CONFIGURATION_BULK_SET_2BYTE_V2_FRAME                     ZW_ConfigurationBulkSet2byteV2Frame;\
 341      =3    ZW_CONFIGURATION_BULK_SET_3BYTE_V2_FRAME                     ZW_ConfigurationBulkSet3byteV2Frame;\
 342      =3    ZW_CONFIGURATION_BULK_SET_4BYTE_V2_FRAME                     ZW_ConfigurationBulkSet4byteV2Frame;\
 343      =3    ZW_CONFIGURATION_GET_V2_FRAME                                ZW_ConfigurationGetV2Frame;\
 344      =3    ZW_CONFIGURATION_REPORT_1BYTE_V2_FRAME                       ZW_ConfigurationReport1byteV2Frame;\
 345      =3    ZW_CONFIGURATION_REPORT_2BYTE_V2_FRAME                       ZW_ConfigurationReport2byteV2Frame;\
 346      =3    ZW_CONFIGURATION_REPORT_3BYTE_V2_FRAME                       ZW_ConfigurationReport3byteV2Frame;\
 347      =3    ZW_CONFIGURATION_REPORT_4BYTE_V2_FRAME                       ZW_ConfigurationReport4byteV2Frame;\
 348      =3    ZW_CONFIGURATION_SET_1BYTE_V2_FRAME                          ZW_ConfigurationSet1byteV2Frame;\
 349      =3    ZW_CONFIGURATION_SET_2BYTE_V2_FRAME                          ZW_ConfigurationSet2byteV2Frame;\
 350      =3    ZW_CONFIGURATION_SET_3BYTE_V2_FRAME                          ZW_ConfigurationSet3byteV2Frame;\
 351      =3    ZW_CONFIGURATION_SET_4BYTE_V2_FRAME                          ZW_ConfigurationSet4byteV2Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 11  

 352      =3  /* Command class Configuration V3 */\
 353      =3    ZW_CONFIGURATION_BULK_GET_V3_FRAME                           ZW_ConfigurationBulkGetV3Frame;\
 354      =3    VG_CONFIGURATION_BULK_REPORT_1BYTE_V3_VG                     VG_ConfigurationBulkReport1byteV3VGroup;\
 355      =3    VG_CONFIGURATION_BULK_REPORT_2BYTE_V3_VG                     VG_ConfigurationBulkReport2byteV3VGroup;\
 356      =3    VG_CONFIGURATION_BULK_REPORT_3BYTE_V3_VG                     VG_ConfigurationBulkReport3byteV3VGroup;\
 357      =3    VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG                     VG_ConfigurationBulkReport4byteV3VGroup;\
 358      =3    ZW_CONFIGURATION_BULK_REPORT_1BYTE_V3_FRAME                  ZW_ConfigurationBulkReport1byteV3Frame;\
 359      =3    ZW_CONFIGURATION_BULK_REPORT_2BYTE_V3_FRAME                  ZW_ConfigurationBulkReport2byteV3Frame;\
 360      =3    ZW_CONFIGURATION_BULK_REPORT_3BYTE_V3_FRAME                  ZW_ConfigurationBulkReport3byteV3Frame;\
 361      =3    ZW_CONFIGURATION_BULK_REPORT_4BYTE_V3_FRAME                  ZW_ConfigurationBulkReport4byteV3Frame;\
 362      =3    VG_CONFIGURATION_BULK_SET_1BYTE_V3_VG                        VG_ConfigurationBulkSet1byteV3VGroup;\
 363      =3    VG_CONFIGURATION_BULK_SET_2BYTE_V3_VG                        VG_ConfigurationBulkSet2byteV3VGroup;\
 364      =3    VG_CONFIGURATION_BULK_SET_3BYTE_V3_VG                        VG_ConfigurationBulkSet3byteV3VGroup;\
 365      =3    VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG                        VG_ConfigurationBulkSet4byteV3VGroup;\
 366      =3    ZW_CONFIGURATION_BULK_SET_1BYTE_V3_FRAME                     ZW_ConfigurationBulkSet1byteV3Frame;\
 367      =3    ZW_CONFIGURATION_BULK_SET_2BYTE_V3_FRAME                     ZW_ConfigurationBulkSet2byteV3Frame;\
 368      =3    ZW_CONFIGURATION_BULK_SET_3BYTE_V3_FRAME                     ZW_ConfigurationBulkSet3byteV3Frame;\
 369      =3    ZW_CONFIGURATION_BULK_SET_4BYTE_V3_FRAME                     ZW_ConfigurationBulkSet4byteV3Frame;\
 370      =3    ZW_CONFIGURATION_GET_V3_FRAME                                ZW_ConfigurationGetV3Frame;\
 371      =3    ZW_CONFIGURATION_REPORT_1BYTE_V3_FRAME                       ZW_ConfigurationReport1byteV3Frame;\
 372      =3    ZW_CONFIGURATION_REPORT_2BYTE_V3_FRAME                       ZW_ConfigurationReport2byteV3Frame;\
 373      =3    ZW_CONFIGURATION_REPORT_3BYTE_V3_FRAME                       ZW_ConfigurationReport3byteV3Frame;\
 374      =3    ZW_CONFIGURATION_REPORT_4BYTE_V3_FRAME                       ZW_ConfigurationReport4byteV3Frame;\
 375      =3    ZW_CONFIGURATION_SET_1BYTE_V3_FRAME                          ZW_ConfigurationSet1byteV3Frame;\
 376      =3    ZW_CONFIGURATION_SET_2BYTE_V3_FRAME                          ZW_ConfigurationSet2byteV3Frame;\
 377      =3    ZW_CONFIGURATION_SET_3BYTE_V3_FRAME                          ZW_ConfigurationSet3byteV3Frame;\
 378      =3    ZW_CONFIGURATION_SET_4BYTE_V3_FRAME                          ZW_ConfigurationSet4byteV3Frame;\
 379      =3    ZW_CONFIGURATION_NAME_GET_V3_FRAME                           ZW_ConfigurationNameGetV3Frame;\
 380      =3    ZW_CONFIGURATION_NAME_REPORT_1BYTE_V3_FRAME                  ZW_ConfigurationNameReport1byteV3Frame;\
 381      =3    ZW_CONFIGURATION_NAME_REPORT_2BYTE_V3_FRAME                  ZW_ConfigurationNameReport2byteV3Frame;\
 382      =3    ZW_CONFIGURATION_NAME_REPORT_3BYTE_V3_FRAME                  ZW_ConfigurationNameReport3byteV3Frame;\
 383      =3    ZW_CONFIGURATION_NAME_REPORT_4BYTE_V3_FRAME                  ZW_ConfigurationNameReport4byteV3Frame;\
 384      =3    ZW_CONFIGURATION_INFO_GET_V3_FRAME                           ZW_ConfigurationInfoGetV3Frame;\
 385      =3    ZW_CONFIGURATION_INFO_REPORT_1BYTE_V3_FRAME                  ZW_ConfigurationInfoReport1byteV3Frame;\
 386      =3    ZW_CONFIGURATION_INFO_REPORT_2BYTE_V3_FRAME                  ZW_ConfigurationInfoReport2byteV3Frame;\
 387      =3    ZW_CONFIGURATION_INFO_REPORT_3BYTE_V3_FRAME                  ZW_ConfigurationInfoReport3byteV3Frame;\
 388      =3    ZW_CONFIGURATION_INFO_REPORT_4BYTE_V3_FRAME                  ZW_ConfigurationInfoReport4byteV3Frame;\
 389      =3    ZW_CONFIGURATION_PROPERTIES_GET_V3_FRAME                     ZW_ConfigurationPropertiesGetV3Frame;\
 390      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_1BYTE_V3_FRAME            ZW_ConfigurationPropertiesReport1byteV3Fram
             -e;\
 391      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_2BYTE_V3_FRAME            ZW_ConfigurationPropertiesReport2byteV3Fram
             -e;\
 392      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_3BYTE_V3_FRAME            ZW_ConfigurationPropertiesReport3byteV3Fram
             -e;\
 393      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_4BYTE_V3_FRAME            ZW_ConfigurationPropertiesReport4byteV3Fram
             -e;\
 394      =3  /* Command class Configuration V4 */\
 395      =3    ZW_CONFIGURATION_BULK_GET_V4_FRAME                           ZW_ConfigurationBulkGetV4Frame;\
 396      =3    VG_CONFIGURATION_BULK_REPORT_1BYTE_V4_VG                     VG_ConfigurationBulkReport1byteV4VGroup;\
 397      =3    VG_CONFIGURATION_BULK_REPORT_2BYTE_V4_VG                     VG_ConfigurationBulkReport2byteV4VGroup;\
 398      =3    VG_CONFIGURATION_BULK_REPORT_3BYTE_V4_VG                     VG_ConfigurationBulkReport3byteV4VGroup;\
 399      =3    VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG                     VG_ConfigurationBulkReport4byteV4VGroup;\
 400      =3    ZW_CONFIGURATION_BULK_REPORT_1BYTE_V4_FRAME                  ZW_ConfigurationBulkReport1byteV4Frame;\
 401      =3    ZW_CONFIGURATION_BULK_REPORT_2BYTE_V4_FRAME                  ZW_ConfigurationBulkReport2byteV4Frame;\
 402      =3    ZW_CONFIGURATION_BULK_REPORT_3BYTE_V4_FRAME                  ZW_ConfigurationBulkReport3byteV4Frame;\
 403      =3    ZW_CONFIGURATION_BULK_REPORT_4BYTE_V4_FRAME                  ZW_ConfigurationBulkReport4byteV4Frame;\
 404      =3    VG_CONFIGURATION_BULK_SET_1BYTE_V4_VG                        VG_ConfigurationBulkSet1byteV4VGroup;\
 405      =3    VG_CONFIGURATION_BULK_SET_2BYTE_V4_VG                        VG_ConfigurationBulkSet2byteV4VGroup;\
 406      =3    VG_CONFIGURATION_BULK_SET_3BYTE_V4_VG                        VG_ConfigurationBulkSet3byteV4VGroup;\
 407      =3    VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG                        VG_ConfigurationBulkSet4byteV4VGroup;\
 408      =3    ZW_CONFIGURATION_BULK_SET_1BYTE_V4_FRAME                     ZW_ConfigurationBulkSet1byteV4Frame;\
 409      =3    ZW_CONFIGURATION_BULK_SET_2BYTE_V4_FRAME                     ZW_ConfigurationBulkSet2byteV4Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 12  

 410      =3    ZW_CONFIGURATION_BULK_SET_3BYTE_V4_FRAME                     ZW_ConfigurationBulkSet3byteV4Frame;\
 411      =3    ZW_CONFIGURATION_BULK_SET_4BYTE_V4_FRAME                     ZW_ConfigurationBulkSet4byteV4Frame;\
 412      =3    ZW_CONFIGURATION_GET_V4_FRAME                                ZW_ConfigurationGetV4Frame;\
 413      =3    ZW_CONFIGURATION_REPORT_1BYTE_V4_FRAME                       ZW_ConfigurationReport1byteV4Frame;\
 414      =3    ZW_CONFIGURATION_REPORT_2BYTE_V4_FRAME                       ZW_ConfigurationReport2byteV4Frame;\
 415      =3    ZW_CONFIGURATION_REPORT_3BYTE_V4_FRAME                       ZW_ConfigurationReport3byteV4Frame;\
 416      =3    ZW_CONFIGURATION_REPORT_4BYTE_V4_FRAME                       ZW_ConfigurationReport4byteV4Frame;\
 417      =3    ZW_CONFIGURATION_SET_1BYTE_V4_FRAME                          ZW_ConfigurationSet1byteV4Frame;\
 418      =3    ZW_CONFIGURATION_SET_2BYTE_V4_FRAME                          ZW_ConfigurationSet2byteV4Frame;\
 419      =3    ZW_CONFIGURATION_SET_3BYTE_V4_FRAME                          ZW_ConfigurationSet3byteV4Frame;\
 420      =3    ZW_CONFIGURATION_SET_4BYTE_V4_FRAME                          ZW_ConfigurationSet4byteV4Frame;\
 421      =3    ZW_CONFIGURATION_NAME_GET_V4_FRAME                           ZW_ConfigurationNameGetV4Frame;\
 422      =3    ZW_CONFIGURATION_NAME_REPORT_1BYTE_V4_FRAME                  ZW_ConfigurationNameReport1byteV4Frame;\
 423      =3    ZW_CONFIGURATION_NAME_REPORT_2BYTE_V4_FRAME                  ZW_ConfigurationNameReport2byteV4Frame;\
 424      =3    ZW_CONFIGURATION_NAME_REPORT_3BYTE_V4_FRAME                  ZW_ConfigurationNameReport3byteV4Frame;\
 425      =3    ZW_CONFIGURATION_NAME_REPORT_4BYTE_V4_FRAME                  ZW_ConfigurationNameReport4byteV4Frame;\
 426      =3    ZW_CONFIGURATION_INFO_GET_V4_FRAME                           ZW_ConfigurationInfoGetV4Frame;\
 427      =3    ZW_CONFIGURATION_INFO_REPORT_1BYTE_V4_FRAME                  ZW_ConfigurationInfoReport1byteV4Frame;\
 428      =3    ZW_CONFIGURATION_INFO_REPORT_2BYTE_V4_FRAME                  ZW_ConfigurationInfoReport2byteV4Frame;\
 429      =3    ZW_CONFIGURATION_INFO_REPORT_3BYTE_V4_FRAME                  ZW_ConfigurationInfoReport3byteV4Frame;\
 430      =3    ZW_CONFIGURATION_INFO_REPORT_4BYTE_V4_FRAME                  ZW_ConfigurationInfoReport4byteV4Frame;\
 431      =3    ZW_CONFIGURATION_PROPERTIES_GET_V4_FRAME                     ZW_ConfigurationPropertiesGetV4Frame;\
 432      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_1BYTE_V4_FRAME            ZW_ConfigurationPropertiesReport1byteV4Fram
             -e;\
 433      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_2BYTE_V4_FRAME            ZW_ConfigurationPropertiesReport2byteV4Fram
             -e;\
 434      =3  
 435      =3  #define ZW_FRAME_COLLECTION_MACRO1\
 436      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_3BYTE_V4_FRAME            ZW_ConfigurationPropertiesReport3byteV4Fram
             -e;\
 437      =3    ZW_CONFIGURATION_PROPERTIES_REPORT_4BYTE_V4_FRAME            ZW_ConfigurationPropertiesReport4byteV4Fram
             -e;\
 438      =3    ZW_CONFIGURATION_DEFAULT_RESET_V4_FRAME                      ZW_ConfigurationDefaultResetV4Frame;\
 439      =3  /* Command class Controller Replication */\
 440      =3    ZW_CTRL_REPLICATION_TRANSFER_GROUP_FRAME                     ZW_CtrlReplicationTransferGroupFrame;\
 441      =3    ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_1BYTE_FRAME          ZW_CtrlReplicationTransferGroupName1byteFra
             -me;\
 442      =3    ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_2BYTE_FRAME          ZW_CtrlReplicationTransferGroupName2byteFra
             -me;\
 443      =3    ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_3BYTE_FRAME          ZW_CtrlReplicationTransferGroupName3byteFra
             -me;\
 444      =3    ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_4BYTE_FRAME          ZW_CtrlReplicationTransferGroupName4byteFra
             -me;\
 445      =3    ZW_CTRL_REPLICATION_TRANSFER_SCENE_FRAME                     ZW_CtrlReplicationTransferSceneFrame;\
 446      =3    ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_1BYTE_FRAME          ZW_CtrlReplicationTransferSceneName1byteFra
             -me;\
 447      =3    ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_2BYTE_FRAME          ZW_CtrlReplicationTransferSceneName2byteFra
             -me;\
 448      =3    ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_3BYTE_FRAME          ZW_CtrlReplicationTransferSceneName3byteFra
             -me;\
 449      =3    ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_4BYTE_FRAME          ZW_CtrlReplicationTransferSceneName4byteFra
             -me;\
 450      =3  /* Command class Dcp Config */\
 451      =3    ZW_DCP_LIST_REMOVE_FRAME                                     ZW_DcpListRemoveFrame;\
 452      =3    VG_DCP_LIST_SET_VG                                           VG_DcpListSetVGroup;\
 453      =3    ZW_DCP_LIST_SET_1BYTE_FRAME                                  ZW_DcpListSet1byteFrame;\
 454      =3    ZW_DCP_LIST_SET_2BYTE_FRAME                                  ZW_DcpListSet2byteFrame;\
 455      =3    ZW_DCP_LIST_SET_3BYTE_FRAME                                  ZW_DcpListSet3byteFrame;\
 456      =3    ZW_DCP_LIST_SET_4BYTE_FRAME                                  ZW_DcpListSet4byteFrame;\
 457      =3    ZW_DCP_LIST_SUPPORTED_GET_FRAME                              ZW_DcpListSupportedGetFrame;\
 458      =3    ZW_DCP_LIST_SUPPORTED_REPORT_FRAME                           ZW_DcpListSupportedReportFrame;\
 459      =3  /* Command class Dcp Monitor */\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 13  

 460      =3    ZW_DCP_EVENT_STATUS_GET_FRAME                                ZW_DcpEventStatusGetFrame;\
 461      =3    ZW_DCP_EVENT_STATUS_REPORT_FRAME                             ZW_DcpEventStatusReportFrame;\
 462      =3    ZW_DCP_LIST_GET_FRAME                                        ZW_DcpListGetFrame;\
 463      =3    VG_DCP_LIST_REPORT_VG                                        VG_DcpListReportVGroup;\
 464      =3    ZW_DCP_LIST_REPORT_1BYTE_FRAME                               ZW_DcpListReport1byteFrame;\
 465      =3    ZW_DCP_LIST_REPORT_2BYTE_FRAME                               ZW_DcpListReport2byteFrame;\
 466      =3    ZW_DCP_LIST_REPORT_3BYTE_FRAME                               ZW_DcpListReport3byteFrame;\
 467      =3    ZW_DCP_LIST_REPORT_4BYTE_FRAME                               ZW_DcpListReport4byteFrame;\
 468      =3  /* Command class Door Lock Logging */\
 469      =3    ZW_DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET_FRAME             ZW_DoorLockLoggingRecordsSupportedGetFrame;
             -\
 470      =3    ZW_DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT_FRAME          ZW_DoorLockLoggingRecordsSupportedReportFra
             -me;\
 471      =3    ZW_RECORD_GET_FRAME                                          ZW_RecordGetFrame;\
 472      =3    ZW_RECORD_REPORT_1BYTE_FRAME                                 ZW_RecordReport1byteFrame;\
 473      =3    ZW_RECORD_REPORT_2BYTE_FRAME                                 ZW_RecordReport2byteFrame;\
 474      =3    ZW_RECORD_REPORT_3BYTE_FRAME                                 ZW_RecordReport3byteFrame;\
 475      =3    ZW_RECORD_REPORT_4BYTE_FRAME                                 ZW_RecordReport4byteFrame;\
 476      =3  /* Command class Door Lock */\
 477      =3    ZW_DOOR_LOCK_CONFIGURATION_GET_FRAME                         ZW_DoorLockConfigurationGetFrame;\
 478      =3    ZW_DOOR_LOCK_CONFIGURATION_REPORT_FRAME                      ZW_DoorLockConfigurationReportFrame;\
 479      =3    ZW_DOOR_LOCK_CONFIGURATION_SET_FRAME                         ZW_DoorLockConfigurationSetFrame;\
 480      =3    ZW_DOOR_LOCK_OPERATION_GET_FRAME                             ZW_DoorLockOperationGetFrame;\
 481      =3    ZW_DOOR_LOCK_OPERATION_REPORT_FRAME                          ZW_DoorLockOperationReportFrame;\
 482      =3    ZW_DOOR_LOCK_OPERATION_SET_FRAME                             ZW_DoorLockOperationSetFrame;\
 483      =3  /* Command class Door Lock V2 */\
 484      =3    ZW_DOOR_LOCK_CONFIGURATION_GET_V2_FRAME                      ZW_DoorLockConfigurationGetV2Frame;\
 485      =3    ZW_DOOR_LOCK_CONFIGURATION_REPORT_V2_FRAME                   ZW_DoorLockConfigurationReportV2Frame;\
 486      =3    ZW_DOOR_LOCK_CONFIGURATION_SET_V2_FRAME                      ZW_DoorLockConfigurationSetV2Frame;\
 487      =3    ZW_DOOR_LOCK_OPERATION_GET_V2_FRAME                          ZW_DoorLockOperationGetV2Frame;\
 488      =3    ZW_DOOR_LOCK_OPERATION_REPORT_V2_FRAME                       ZW_DoorLockOperationReportV2Frame;\
 489      =3    ZW_DOOR_LOCK_OPERATION_SET_V2_FRAME                          ZW_DoorLockOperationSetV2Frame;\
 490      =3  /* Command class Door Lock V3 */\
 491      =3    ZW_DOOR_LOCK_CONFIGURATION_GET_V3_FRAME                      ZW_DoorLockConfigurationGetV3Frame;\
 492      =3    ZW_DOOR_LOCK_CONFIGURATION_REPORT_V3_FRAME                   ZW_DoorLockConfigurationReportV3Frame;\
 493      =3    ZW_DOOR_LOCK_CONFIGURATION_SET_V3_FRAME                      ZW_DoorLockConfigurationSetV3Frame;\
 494      =3    ZW_DOOR_LOCK_OPERATION_GET_V3_FRAME                          ZW_DoorLockOperationGetV3Frame;\
 495      =3    ZW_DOOR_LOCK_OPERATION_REPORT_V3_FRAME                       ZW_DoorLockOperationReportV3Frame;\
 496      =3    ZW_DOOR_LOCK_OPERATION_SET_V3_FRAME                          ZW_DoorLockOperationSetV3Frame;\
 497      =3  /* Command class Energy Production */\
 498      =3    ZW_ENERGY_PRODUCTION_GET_FRAME                               ZW_EnergyProductionGetFrame;\
 499      =3    ZW_ENERGY_PRODUCTION_REPORT_1BYTE_FRAME                      ZW_EnergyProductionReport1byteFrame;\
 500      =3    ZW_ENERGY_PRODUCTION_REPORT_2BYTE_FRAME                      ZW_EnergyProductionReport2byteFrame;\
 501      =3    ZW_ENERGY_PRODUCTION_REPORT_3BYTE_FRAME                      ZW_EnergyProductionReport3byteFrame;\
 502      =3    ZW_ENERGY_PRODUCTION_REPORT_4BYTE_FRAME                      ZW_EnergyProductionReport4byteFrame;\
 503      =3  /* Command class Firmware Update Md */\
 504      =3    ZW_FIRMWARE_MD_GET_FRAME                                     ZW_FirmwareMdGetFrame;\
 505      =3    ZW_FIRMWARE_MD_REPORT_FRAME                                  ZW_FirmwareMdReportFrame;\
 506      =3    ZW_FIRMWARE_UPDATE_MD_GET_FRAME                              ZW_FirmwareUpdateMdGetFrame;\
 507      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_FRAME                     ZW_FirmwareUpdateMdReport1byteFrame;\
 508      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_FRAME                     ZW_FirmwareUpdateMdReport2byteFrame;\
 509      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_FRAME                     ZW_FirmwareUpdateMdReport3byteFrame;\
 510      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_FRAME                     ZW_FirmwareUpdateMdReport4byteFrame;\
 511      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_FRAME                      ZW_FirmwareUpdateMdRequestGetFrame;\
 512      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_FRAME                   ZW_FirmwareUpdateMdRequestReportFrame;\
 513      =3    ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_FRAME                    ZW_FirmwareUpdateMdStatusReportFrame;\
 514      =3  /* Command class Firmware Update Md V2 */\
 515      =3    ZW_FIRMWARE_MD_GET_V2_FRAME                                  ZW_FirmwareMdGetV2Frame;\
 516      =3    ZW_FIRMWARE_MD_REPORT_V2_FRAME                               ZW_FirmwareMdReportV2Frame;\
 517      =3    ZW_FIRMWARE_UPDATE_MD_GET_V2_FRAME                           ZW_FirmwareUpdateMdGetV2Frame;\
 518      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V2_FRAME                  ZW_FirmwareUpdateMdReport1byteV2Frame;\
 519      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V2_FRAME                  ZW_FirmwareUpdateMdReport2byteV2Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 14  

 520      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V2_FRAME                  ZW_FirmwareUpdateMdReport3byteV2Frame;\
 521      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V2_FRAME                  ZW_FirmwareUpdateMdReport4byteV2Frame;\
 522      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V2_FRAME                   ZW_FirmwareUpdateMdRequestGetV2Frame;\
 523      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V2_FRAME                ZW_FirmwareUpdateMdRequestReportV2Frame;\
 524      =3    ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V2_FRAME                 ZW_FirmwareUpdateMdStatusReportV2Frame;\
 525      =3  /* Command class Firmware Update Md V3 */\
 526      =3    ZW_FIRMWARE_MD_GET_V3_FRAME                                  ZW_FirmwareMdGetV3Frame;\
 527      =3    VG_FIRMWARE_MD_REPORT_V3_VG                                  VG_FirmwareMdReportV3VGroup;\
 528      =3    ZW_FIRMWARE_MD_REPORT_1BYTE_V3_FRAME                         ZW_FirmwareMdReport1byteV3Frame;\
 529      =3    ZW_FIRMWARE_MD_REPORT_2BYTE_V3_FRAME                         ZW_FirmwareMdReport2byteV3Frame;\
 530      =3    ZW_FIRMWARE_MD_REPORT_3BYTE_V3_FRAME                         ZW_FirmwareMdReport3byteV3Frame;\
 531      =3    ZW_FIRMWARE_MD_REPORT_4BYTE_V3_FRAME                         ZW_FirmwareMdReport4byteV3Frame;\
 532      =3    ZW_FIRMWARE_UPDATE_MD_GET_V3_FRAME                           ZW_FirmwareUpdateMdGetV3Frame;\
 533      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V3_FRAME                  ZW_FirmwareUpdateMdReport1byteV3Frame;\
 534      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V3_FRAME                  ZW_FirmwareUpdateMdReport2byteV3Frame;\
 535      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V3_FRAME                  ZW_FirmwareUpdateMdReport3byteV3Frame;\
 536      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V3_FRAME                  ZW_FirmwareUpdateMdReport4byteV3Frame;\
 537      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V3_FRAME                   ZW_FirmwareUpdateMdRequestGetV3Frame;\
 538      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V3_FRAME                ZW_FirmwareUpdateMdRequestReportV3Frame;\
 539      =3    ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V3_FRAME                 ZW_FirmwareUpdateMdStatusReportV3Frame;\
 540      =3  /* Command class Firmware Update Md V4 */\
 541      =3    ZW_FIRMWARE_MD_GET_V4_FRAME                                  ZW_FirmwareMdGetV4Frame;\
 542      =3    VG_FIRMWARE_MD_REPORT_V4_VG                                  VG_FirmwareMdReportV4VGroup;\
 543      =3    ZW_FIRMWARE_MD_REPORT_1BYTE_V4_FRAME                         ZW_FirmwareMdReport1byteV4Frame;\
 544      =3    ZW_FIRMWARE_MD_REPORT_2BYTE_V4_FRAME                         ZW_FirmwareMdReport2byteV4Frame;\
 545      =3    ZW_FIRMWARE_MD_REPORT_3BYTE_V4_FRAME                         ZW_FirmwareMdReport3byteV4Frame;\
 546      =3    ZW_FIRMWARE_MD_REPORT_4BYTE_V4_FRAME                         ZW_FirmwareMdReport4byteV4Frame;\
 547      =3    ZW_FIRMWARE_UPDATE_MD_GET_V4_FRAME                           ZW_FirmwareUpdateMdGetV4Frame;\
 548      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V4_FRAME                  ZW_FirmwareUpdateMdReport1byteV4Frame;\
 549      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V4_FRAME                  ZW_FirmwareUpdateMdReport2byteV4Frame;\
 550      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V4_FRAME                  ZW_FirmwareUpdateMdReport3byteV4Frame;\
 551      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V4_FRAME                  ZW_FirmwareUpdateMdReport4byteV4Frame;\
 552      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V4_FRAME                   ZW_FirmwareUpdateMdRequestGetV4Frame;\
 553      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V4_FRAME                ZW_FirmwareUpdateMdRequestReportV4Frame;\
 554      =3    ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V4_FRAME                 ZW_FirmwareUpdateMdStatusReportV4Frame;\
 555      =3    ZW_FIRMWARE_UPDATE_ACTIVATION_SET_V4_FRAME                   ZW_FirmwareUpdateActivationSetV4Frame;\
 556      =3    ZW_FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V4_FRAME         ZW_FirmwareUpdateActivationStatusReportV4Fr
             -ame;\
 557      =3  /* Command class Firmware Update Md V5 */\
 558      =3    ZW_FIRMWARE_MD_GET_V5_FRAME                                  ZW_FirmwareMdGetV5Frame;\
 559      =3    VG_FIRMWARE_MD_REPORT_V5_VG                                  VG_FirmwareMdReportV5VGroup;\
 560      =3    ZW_FIRMWARE_MD_REPORT_1BYTE_V5_FRAME                         ZW_FirmwareMdReport1byteV5Frame;\
 561      =3    ZW_FIRMWARE_MD_REPORT_2BYTE_V5_FRAME                         ZW_FirmwareMdReport2byteV5Frame;\
 562      =3    ZW_FIRMWARE_MD_REPORT_3BYTE_V5_FRAME                         ZW_FirmwareMdReport3byteV5Frame;\
 563      =3    ZW_FIRMWARE_MD_REPORT_4BYTE_V5_FRAME                         ZW_FirmwareMdReport4byteV5Frame;\
 564      =3    ZW_FIRMWARE_UPDATE_MD_GET_V5_FRAME                           ZW_FirmwareUpdateMdGetV5Frame;\
 565      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V5_FRAME                  ZW_FirmwareUpdateMdReport1byteV5Frame;\
 566      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V5_FRAME                  ZW_FirmwareUpdateMdReport2byteV5Frame;\
 567      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V5_FRAME                  ZW_FirmwareUpdateMdReport3byteV5Frame;\
 568      =3    ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V5_FRAME                  ZW_FirmwareUpdateMdReport4byteV5Frame;\
 569      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V5_FRAME                   ZW_FirmwareUpdateMdRequestGetV5Frame;\
 570      =3    ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V5_FRAME                ZW_FirmwareUpdateMdRequestReportV5Frame;\
 571      =3    ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V5_FRAME                 ZW_FirmwareUpdateMdStatusReportV5Frame;\
 572      =3    ZW_FIRMWARE_UPDATE_ACTIVATION_SET_V5_FRAME                   ZW_FirmwareUpdateActivationSetV5Frame;\
 573      =3    ZW_FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V5_FRAME         ZW_FirmwareUpdateActivationStatusReportV5Fr
             -ame;\
 574      =3    ZW_FIRMWARE_UPDATE_MD_PREPARE_GET_V5_FRAME                   ZW_FirmwareUpdateMdPrepareGetV5Frame;\
 575      =3    ZW_FIRMWARE_UPDATE_MD_PREPARE_REPORT_V5_FRAME                ZW_FirmwareUpdateMdPrepareReportV5Frame;\
 576      =3  /* Command class Geographic Location */\
 577      =3    ZW_GEOGRAPHIC_LOCATION_GET_FRAME                             ZW_GeographicLocationGetFrame;\
 578      =3    ZW_GEOGRAPHIC_LOCATION_REPORT_FRAME                          ZW_GeographicLocationReportFrame;\
 579      =3    ZW_GEOGRAPHIC_LOCATION_SET_FRAME                             ZW_GeographicLocationSetFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 15  

 580      =3  /* Command class Grouping Name */\
 581      =3    ZW_GROUPING_NAME_GET_FRAME                                   ZW_GroupingNameGetFrame;\
 582      =3    ZW_GROUPING_NAME_REPORT_FRAME                                ZW_GroupingNameReportFrame;\
 583      =3    ZW_GROUPING_NAME_SET_FRAME                                   ZW_GroupingNameSetFrame;\
 584      =3  /* Command class Hail */\
 585      =3    ZW_HAIL_FRAME                                                ZW_HailFrame;\
 586      =3  /* Command class Hrv Control */\
 587      =3    ZW_HRV_CONTROL_BYPASS_GET_FRAME                              ZW_HrvControlBypassGetFrame;\
 588      =3    ZW_HRV_CONTROL_BYPASS_REPORT_FRAME                           ZW_HrvControlBypassReportFrame;\
 589      =3    ZW_HRV_CONTROL_BYPASS_SET_FRAME                              ZW_HrvControlBypassSetFrame;\
 590      =3    ZW_HRV_CONTROL_MODE_GET_FRAME                                ZW_HrvControlModeGetFrame;\
 591      =3    ZW_HRV_CONTROL_MODE_REPORT_FRAME                             ZW_HrvControlModeReportFrame;\
 592      =3    ZW_HRV_CONTROL_MODE_SET_FRAME                                ZW_HrvControlModeSetFrame;\
 593      =3    ZW_HRV_CONTROL_MODE_SUPPORTED_GET_FRAME                      ZW_HrvControlModeSupportedGetFrame;\
 594      =3    ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_1BYTE_FRAME             ZW_HrvControlModeSupportedReport1byteFrame;
             -\
 595      =3    ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_2BYTE_FRAME             ZW_HrvControlModeSupportedReport2byteFrame;
             -\
 596      =3    ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_3BYTE_FRAME             ZW_HrvControlModeSupportedReport3byteFrame;
             -\
 597      =3    ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_4BYTE_FRAME             ZW_HrvControlModeSupportedReport4byteFrame;
             -\
 598      =3    ZW_HRV_CONTROL_VENTILATION_RATE_GET_FRAME                    ZW_HrvControlVentilationRateGetFrame;\
 599      =3    ZW_HRV_CONTROL_VENTILATION_RATE_REPORT_FRAME                 ZW_HrvControlVentilationRateReportFrame;\
 600      =3    ZW_HRV_CONTROL_VENTILATION_RATE_SET_FRAME                    ZW_HrvControlVentilationRateSetFrame;\
 601      =3  /* Command class Hrv Status */\
 602      =3    ZW_HRV_STATUS_GET_FRAME                                      ZW_HrvStatusGetFrame;\
 603      =3    ZW_HRV_STATUS_REPORT_1BYTE_FRAME                             ZW_HrvStatusReport1byteFrame;\
 604      =3    ZW_HRV_STATUS_REPORT_2BYTE_FRAME                             ZW_HrvStatusReport2byteFrame;\
 605      =3    ZW_HRV_STATUS_REPORT_3BYTE_FRAME                             ZW_HrvStatusReport3byteFrame;\
 606      =3    ZW_HRV_STATUS_REPORT_4BYTE_FRAME                             ZW_HrvStatusReport4byteFrame;\
 607      =3    ZW_HRV_STATUS_SUPPORTED_GET_FRAME                            ZW_HrvStatusSupportedGetFrame;\
 608      =3    ZW_HRV_STATUS_SUPPORTED_REPORT_1BYTE_FRAME                   ZW_HrvStatusSupportedReport1byteFrame;\
 609      =3    ZW_HRV_STATUS_SUPPORTED_REPORT_2BYTE_FRAME                   ZW_HrvStatusSupportedReport2byteFrame;\
 610      =3    ZW_HRV_STATUS_SUPPORTED_REPORT_3BYTE_FRAME                   ZW_HrvStatusSupportedReport3byteFrame;\
 611      =3    ZW_HRV_STATUS_SUPPORTED_REPORT_4BYTE_FRAME                   ZW_HrvStatusSupportedReport4byteFrame;\
 612      =3  /* Command class Indicator */\
 613      =3    ZW_INDICATOR_GET_FRAME                                       ZW_IndicatorGetFrame;\
 614      =3    ZW_INDICATOR_REPORT_FRAME                                    ZW_IndicatorReportFrame;\
 615      =3    ZW_INDICATOR_SET_FRAME                                       ZW_IndicatorSetFrame;\
 616      =3  /* Command class Indicator V2 */\
 617      =3    ZW_INDICATOR_GET_V2_FRAME                                    ZW_IndicatorGetV2Frame;\
 618      =3    VG_INDICATOR_REPORT_V2_VG                                    VG_IndicatorReportV2VGroup;\
 619      =3    ZW_INDICATOR_REPORT_1BYTE_V2_FRAME                           ZW_IndicatorReport1byteV2Frame;\
 620      =3    ZW_INDICATOR_REPORT_2BYTE_V2_FRAME                           ZW_IndicatorReport2byteV2Frame;\
 621      =3    ZW_INDICATOR_REPORT_3BYTE_V2_FRAME                           ZW_IndicatorReport3byteV2Frame;\
 622      =3    ZW_INDICATOR_REPORT_4BYTE_V2_FRAME                           ZW_IndicatorReport4byteV2Frame;\
 623      =3    VG_INDICATOR_SET_V2_VG                                       VG_IndicatorSetV2VGroup;\
 624      =3    ZW_INDICATOR_SET_1BYTE_V2_FRAME                              ZW_IndicatorSet1byteV2Frame;\
 625      =3    ZW_INDICATOR_SET_2BYTE_V2_FRAME                              ZW_IndicatorSet2byteV2Frame;\
 626      =3    ZW_INDICATOR_SET_3BYTE_V2_FRAME                              ZW_IndicatorSet3byteV2Frame;\
 627      =3    ZW_INDICATOR_SET_4BYTE_V2_FRAME                              ZW_IndicatorSet4byteV2Frame;\
 628      =3    ZW_INDICATOR_SUPPORTED_GET_V2_FRAME                          ZW_IndicatorSupportedGetV2Frame;\
 629      =3    ZW_INDICATOR_SUPPORTED_REPORT_1BYTE_V2_FRAME                 ZW_IndicatorSupportedReport1byteV2Frame;\
 630      =3    ZW_INDICATOR_SUPPORTED_REPORT_2BYTE_V2_FRAME                 ZW_IndicatorSupportedReport2byteV2Frame;\
 631      =3    ZW_INDICATOR_SUPPORTED_REPORT_3BYTE_V2_FRAME                 ZW_IndicatorSupportedReport3byteV2Frame;\
 632      =3    ZW_INDICATOR_SUPPORTED_REPORT_4BYTE_V2_FRAME                 ZW_IndicatorSupportedReport4byteV2Frame;\
 633      =3  /* Command class Ip Configuration */\
 634      =3    ZW_IP_CONFIGURATION_GET_FRAME                                ZW_IpConfigurationGetFrame;\
 635      =3    ZW_IP_CONFIGURATION_RELEASE_FRAME                            ZW_IpConfigurationReleaseFrame;\
 636      =3    ZW_IP_CONFIGURATION_RENEW_FRAME                              ZW_IpConfigurationRenewFrame;\
 637      =3    ZW_IP_CONFIGURATION_REPORT_FRAME                             ZW_IpConfigurationReportFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 16  

 638      =3    ZW_IP_CONFIGURATION_SET_FRAME                                ZW_IpConfigurationSetFrame;\
 639      =3  /* Command class Language */\
 640      =3    ZW_LANGUAGE_GET_FRAME                                        ZW_LanguageGetFrame;\
 641      =3    ZW_LANGUAGE_REPORT_FRAME                                     ZW_LanguageReportFrame;\
 642      =3    ZW_LANGUAGE_SET_FRAME                                        ZW_LanguageSetFrame;\
 643      =3  /* Command class Lock */\
 644      =3    ZW_LOCK_GET_FRAME                                            ZW_LockGetFrame;\
 645      =3    ZW_LOCK_REPORT_FRAME                                         ZW_LockReportFrame;\
 646      =3    ZW_LOCK_SET_FRAME                                            ZW_LockSetFrame;\
 647      =3  /* Command class Manufacturer Specific */\
 648      =3    ZW_MANUFACTURER_SPECIFIC_GET_FRAME                           ZW_ManufacturerSpecificGetFrame;\
 649      =3    ZW_MANUFACTURER_SPECIFIC_REPORT_FRAME                        ZW_ManufacturerSpecificReportFrame;\
 650      =3  /* Command class Manufacturer Specific V2 */\
 651      =3    ZW_MANUFACTURER_SPECIFIC_GET_V2_FRAME                        ZW_ManufacturerSpecificGetV2Frame;\
 652      =3    ZW_MANUFACTURER_SPECIFIC_REPORT_V2_FRAME                     ZW_ManufacturerSpecificReportV2Frame;\
 653      =3    ZW_DEVICE_SPECIFIC_GET_V2_FRAME                              ZW_DeviceSpecificGetV2Frame;\
 654      =3    ZW_DEVICE_SPECIFIC_REPORT_1BYTE_V2_FRAME                     ZW_DeviceSpecificReport1byteV2Frame;\
 655      =3    ZW_DEVICE_SPECIFIC_REPORT_2BYTE_V2_FRAME                     ZW_DeviceSpecificReport2byteV2Frame;\
 656      =3    ZW_DEVICE_SPECIFIC_REPORT_3BYTE_V2_FRAME                     ZW_DeviceSpecificReport3byteV2Frame;\
 657      =3    ZW_DEVICE_SPECIFIC_REPORT_4BYTE_V2_FRAME                     ZW_DeviceSpecificReport4byteV2Frame;\
 658      =3  /* Command class Meter Pulse */\
 659      =3    ZW_METER_PULSE_GET_FRAME                                     ZW_MeterPulseGetFrame;\
 660      =3    ZW_METER_PULSE_REPORT_FRAME                                  ZW_MeterPulseReportFrame;\
 661      =3  /* Command class Meter Tbl Config */\
 662      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_1BYTE_FRAME              ZW_MeterTblTablePointAdmNoSet1byteFrame;\
 663      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_2BYTE_FRAME              ZW_MeterTblTablePointAdmNoSet2byteFrame;\
 664      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_3BYTE_FRAME              ZW_MeterTblTablePointAdmNoSet3byteFrame;\
 665      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_4BYTE_FRAME              ZW_MeterTblTablePointAdmNoSet4byteFrame;\
 666      =3  /* Command class Meter Tbl Monitor */\
 667      =3    VG_METER_TBL_STATUS_REPORT_VG                                VG_MeterTblStatusReportVGroup;\
 668      =3    ZW_METER_TBL_STATUS_REPORT_1BYTE_FRAME                       ZW_MeterTblStatusReport1byteFrame;\
 669      =3    ZW_METER_TBL_STATUS_REPORT_2BYTE_FRAME                       ZW_MeterTblStatusReport2byteFrame;\
 670      =3    ZW_METER_TBL_STATUS_REPORT_3BYTE_FRAME                       ZW_MeterTblStatusReport3byteFrame;\
 671      =3    ZW_METER_TBL_STATUS_REPORT_4BYTE_FRAME                       ZW_MeterTblStatusReport4byteFrame;\
 672      =3    ZW_METER_TBL_STATUS_DATE_GET_FRAME                           ZW_MeterTblStatusDateGetFrame;\
 673      =3    ZW_METER_TBL_STATUS_DEPTH_GET_FRAME                          ZW_MeterTblStatusDepthGetFrame;\
 674      =3    ZW_METER_TBL_STATUS_SUPPORTED_GET_FRAME                      ZW_MeterTblStatusSupportedGetFrame;\
 675      =3    ZW_METER_TBL_STATUS_SUPPORTED_REPORT_FRAME                   ZW_MeterTblStatusSupportedReportFrame;\
 676      =3    ZW_METER_TBL_CURRENT_DATA_GET_FRAME                          ZW_MeterTblCurrentDataGetFrame;\
 677      =3    VG_METER_TBL_CURRENT_DATA_REPORT_VG                          VG_MeterTblCurrentDataReportVGroup;\
 678      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_1BYTE_FRAME                 ZW_MeterTblCurrentDataReport1byteFrame;\
 679      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_2BYTE_FRAME                 ZW_MeterTblCurrentDataReport2byteFrame;\
 680      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_3BYTE_FRAME                 ZW_MeterTblCurrentDataReport3byteFrame;\
 681      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_4BYTE_FRAME                 ZW_MeterTblCurrentDataReport4byteFrame;\
 682      =3    ZW_METER_TBL_HISTORICAL_DATA_GET_FRAME                       ZW_MeterTblHistoricalDataGetFrame;\
 683      =3    VG_METER_TBL_HISTORICAL_DATA_REPORT_VG                       VG_MeterTblHistoricalDataReportVGroup;\
 684      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_1BYTE_FRAME              ZW_MeterTblHistoricalDataReport1byteFrame;\
 685      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_2BYTE_FRAME              ZW_MeterTblHistoricalDataReport2byteFrame;\
 686      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_3BYTE_FRAME              ZW_MeterTblHistoricalDataReport3byteFrame;\
 687      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_4BYTE_FRAME              ZW_MeterTblHistoricalDataReport4byteFrame;\
 688      =3    ZW_METER_TBL_REPORT_FRAME                                    ZW_MeterTblReportFrame;\
 689      =3    ZW_METER_TBL_TABLE_CAPABILITY_GET_FRAME                      ZW_MeterTblTableCapabilityGetFrame;\
 690      =3    ZW_METER_TBL_TABLE_ID_GET_FRAME                              ZW_MeterTblTableIdGetFrame;\
 691      =3    ZW_METER_TBL_TABLE_ID_REPORT_1BYTE_FRAME                     ZW_MeterTblTableIdReport1byteFrame;\
 692      =3    ZW_METER_TBL_TABLE_ID_REPORT_2BYTE_FRAME                     ZW_MeterTblTableIdReport2byteFrame;\
 693      =3    ZW_METER_TBL_TABLE_ID_REPORT_3BYTE_FRAME                     ZW_MeterTblTableIdReport3byteFrame;\
 694      =3    ZW_METER_TBL_TABLE_ID_REPORT_4BYTE_FRAME                     ZW_MeterTblTableIdReport4byteFrame;\
 695      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_GET_FRAME                    ZW_MeterTblTablePointAdmNoGetFrame;\
 696      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_1BYTE_FRAME           ZW_MeterTblTablePointAdmNoReport1byteFrame;
             -\
 697      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_2BYTE_FRAME           ZW_MeterTblTablePointAdmNoReport2byteFrame;
             -\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 17  

 698      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_3BYTE_FRAME           ZW_MeterTblTablePointAdmNoReport3byteFrame;
             -\
 699      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_4BYTE_FRAME           ZW_MeterTblTablePointAdmNoReport4byteFrame;
             -\
 700      =3  /* Command class Meter Tbl Monitor V2 */\
 701      =3    VG_METER_TBL_STATUS_REPORT_V2_VG                             VG_MeterTblStatusReportV2VGroup;\
 702      =3    ZW_METER_TBL_STATUS_REPORT_1BYTE_V2_FRAME                    ZW_MeterTblStatusReport1byteV2Frame;\
 703      =3    ZW_METER_TBL_STATUS_REPORT_2BYTE_V2_FRAME                    ZW_MeterTblStatusReport2byteV2Frame;\
 704      =3    ZW_METER_TBL_STATUS_REPORT_3BYTE_V2_FRAME                    ZW_MeterTblStatusReport3byteV2Frame;\
 705      =3    ZW_METER_TBL_STATUS_REPORT_4BYTE_V2_FRAME                    ZW_MeterTblStatusReport4byteV2Frame;\
 706      =3    ZW_METER_TBL_STATUS_DATE_GET_V2_FRAME                        ZW_MeterTblStatusDateGetV2Frame;\
 707      =3    ZW_METER_TBL_STATUS_DEPTH_GET_V2_FRAME                       ZW_MeterTblStatusDepthGetV2Frame;\
 708      =3    ZW_METER_TBL_STATUS_SUPPORTED_GET_V2_FRAME                   ZW_MeterTblStatusSupportedGetV2Frame;\
 709      =3    ZW_METER_TBL_STATUS_SUPPORTED_REPORT_V2_FRAME                ZW_MeterTblStatusSupportedReportV2Frame;\
 710      =3    ZW_METER_TBL_CURRENT_DATA_GET_V2_FRAME                       ZW_MeterTblCurrentDataGetV2Frame;\
 711      =3    VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG                       VG_MeterTblCurrentDataReportV2VGroup;\
 712      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_1BYTE_V2_FRAME              ZW_MeterTblCurrentDataReport1byteV2Frame;\
 713      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_2BYTE_V2_FRAME              ZW_MeterTblCurrentDataReport2byteV2Frame;\
 714      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_3BYTE_V2_FRAME              ZW_MeterTblCurrentDataReport3byteV2Frame;\
 715      =3    ZW_METER_TBL_CURRENT_DATA_REPORT_4BYTE_V2_FRAME              ZW_MeterTblCurrentDataReport4byteV2Frame;\
 716      =3    ZW_METER_TBL_HISTORICAL_DATA_GET_V2_FRAME                    ZW_MeterTblHistoricalDataGetV2Frame;\
 717      =3    VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG                    VG_MeterTblHistoricalDataReportV2VGroup;\
 718      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_1BYTE_V2_FRAME           ZW_MeterTblHistoricalDataReport1byteV2Frame
             -;\
 719      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_2BYTE_V2_FRAME           ZW_MeterTblHistoricalDataReport2byteV2Frame
             -;\
 720      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_3BYTE_V2_FRAME           ZW_MeterTblHistoricalDataReport3byteV2Frame
             -;\
 721      =3    ZW_METER_TBL_HISTORICAL_DATA_REPORT_4BYTE_V2_FRAME           ZW_MeterTblHistoricalDataReport4byteV2Frame
             -;\
 722      =3    ZW_METER_TBL_REPORT_V2_FRAME                                 ZW_MeterTblReportV2Frame;\
 723      =3    ZW_METER_TBL_TABLE_CAPABILITY_GET_V2_FRAME                   ZW_MeterTblTableCapabilityGetV2Frame;\
 724      =3    ZW_METER_TBL_TABLE_ID_GET_V2_FRAME                           ZW_MeterTblTableIdGetV2Frame;\
 725      =3    ZW_METER_TBL_TABLE_ID_REPORT_1BYTE_V2_FRAME                  ZW_MeterTblTableIdReport1byteV2Frame;\
 726      =3    ZW_METER_TBL_TABLE_ID_REPORT_2BYTE_V2_FRAME                  ZW_MeterTblTableIdReport2byteV2Frame;\
 727      =3    ZW_METER_TBL_TABLE_ID_REPORT_3BYTE_V2_FRAME                  ZW_MeterTblTableIdReport3byteV2Frame;\
 728      =3    ZW_METER_TBL_TABLE_ID_REPORT_4BYTE_V2_FRAME                  ZW_MeterTblTableIdReport4byteV2Frame;\
 729      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_GET_V2_FRAME                 ZW_MeterTblTablePointAdmNoGetV2Frame;\
 730      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_1BYTE_V2_FRAME        ZW_MeterTblTablePointAdmNoReport1byteV2Fram
             -e;\
 731      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_2BYTE_V2_FRAME        ZW_MeterTblTablePointAdmNoReport2byteV2Fram
             -e;\
 732      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_3BYTE_V2_FRAME        ZW_MeterTblTablePointAdmNoReport3byteV2Fram
             -e;\
 733      =3    ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_4BYTE_V2_FRAME        ZW_MeterTblTablePointAdmNoReport4byteV2Fram
             -e;\
 734      =3  /* Command class Meter Tbl Push */\
 735      =3    ZW_METER_TBL_PUSH_CONFIGURATION_GET_FRAME                    ZW_MeterTblPushConfigurationGetFrame;\
 736      =3    ZW_METER_TBL_PUSH_CONFIGURATION_REPORT_FRAME                 ZW_MeterTblPushConfigurationReportFrame;\
 737      =3    ZW_METER_TBL_PUSH_CONFIGURATION_SET_FRAME                    ZW_MeterTblPushConfigurationSetFrame;\
 738      =3  /* Command class Meter */\
 739      =3    ZW_METER_GET_FRAME                                           ZW_MeterGetFrame;\
 740      =3    ZW_METER_REPORT_1BYTE_FRAME                                  ZW_MeterReport1byteFrame;\
 741      =3    ZW_METER_REPORT_2BYTE_FRAME                                  ZW_MeterReport2byteFrame;\
 742      =3    ZW_METER_REPORT_3BYTE_FRAME                                  ZW_MeterReport3byteFrame;\
 743      =3    ZW_METER_REPORT_4BYTE_FRAME                                  ZW_MeterReport4byteFrame;\
 744      =3  /* Command class Meter V2 */\
 745      =3    ZW_METER_GET_V2_FRAME                                        ZW_MeterGetV2Frame;\
 746      =3    ZW_METER_REPORT_1BYTE_V2_FRAME                               ZW_MeterReport1byteV2Frame;\
 747      =3    ZW_METER_REPORT_2BYTE_V2_FRAME                               ZW_MeterReport2byteV2Frame;\
 748      =3    ZW_METER_REPORT_3BYTE_V2_FRAME                               ZW_MeterReport3byteV2Frame;\
 749      =3    ZW_METER_REPORT_4BYTE_V2_FRAME                               ZW_MeterReport4byteV2Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 18  

 750      =3    ZW_METER_RESET_V2_FRAME                                      ZW_MeterResetV2Frame;\
 751      =3    ZW_METER_SUPPORTED_GET_V2_FRAME                              ZW_MeterSupportedGetV2Frame;\
 752      =3    ZW_METER_SUPPORTED_REPORT_V2_FRAME                           ZW_MeterSupportedReportV2Frame;\
 753      =3  /* Command class Meter V3 */\
 754      =3    ZW_METER_GET_V3_FRAME                                        ZW_MeterGetV3Frame;\
 755      =3    ZW_METER_REPORT_1BYTE_V3_FRAME                               ZW_MeterReport1byteV3Frame;\
 756      =3    ZW_METER_REPORT_2BYTE_V3_FRAME                               ZW_MeterReport2byteV3Frame;\
 757      =3    ZW_METER_REPORT_3BYTE_V3_FRAME                               ZW_MeterReport3byteV3Frame;\
 758      =3    ZW_METER_REPORT_4BYTE_V3_FRAME                               ZW_MeterReport4byteV3Frame;\
 759      =3    ZW_METER_RESET_V3_FRAME                                      ZW_MeterResetV3Frame;\
 760      =3    ZW_METER_SUPPORTED_GET_V3_FRAME                              ZW_MeterSupportedGetV3Frame;\
 761      =3    ZW_METER_SUPPORTED_REPORT_V3_FRAME                           ZW_MeterSupportedReportV3Frame;\
 762      =3  /* Command class Meter V4 */\
 763      =3    ZW_METER_GET_V4_FRAME                                        ZW_MeterGetV4Frame;\
 764      =3    ZW_METER_REPORT_1BYTE_V4_FRAME                               ZW_MeterReport1byteV4Frame;\
 765      =3    ZW_METER_REPORT_2BYTE_V4_FRAME                               ZW_MeterReport2byteV4Frame;\
 766      =3    ZW_METER_REPORT_3BYTE_V4_FRAME                               ZW_MeterReport3byteV4Frame;\
 767      =3    ZW_METER_REPORT_4BYTE_V4_FRAME                               ZW_MeterReport4byteV4Frame;\
 768      =3    ZW_METER_RESET_V4_FRAME                                      ZW_MeterResetV4Frame;\
 769      =3    ZW_METER_SUPPORTED_GET_V4_FRAME                              ZW_MeterSupportedGetV4Frame;\
 770      =3    ZW_METER_SUPPORTED_REPORT_1BYTE_V4_FRAME                     ZW_MeterSupportedReport1byteV4Frame;\
 771      =3    ZW_METER_SUPPORTED_REPORT_2BYTE_V4_FRAME                     ZW_MeterSupportedReport2byteV4Frame;\
 772      =3    ZW_METER_SUPPORTED_REPORT_3BYTE_V4_FRAME                     ZW_MeterSupportedReport3byteV4Frame;\
 773      =3    ZW_METER_SUPPORTED_REPORT_4BYTE_V4_FRAME                     ZW_MeterSupportedReport4byteV4Frame;\
 774      =3  /* Command class Meter V5 */\
 775      =3    ZW_METER_GET_V5_FRAME                                        ZW_MeterGetV5Frame;\
 776      =3    ZW_METER_REPORT_1BYTE_V5_FRAME                               ZW_MeterReport1byteV5Frame;\
 777      =3    ZW_METER_REPORT_2BYTE_V5_FRAME                               ZW_MeterReport2byteV5Frame;\
 778      =3    ZW_METER_REPORT_3BYTE_V5_FRAME                               ZW_MeterReport3byteV5Frame;\
 779      =3    ZW_METER_REPORT_4BYTE_V5_FRAME                               ZW_MeterReport4byteV5Frame;\
 780      =3    ZW_METER_RESET_V5_FRAME                                      ZW_MeterResetV5Frame;\
 781      =3    ZW_METER_SUPPORTED_GET_V5_FRAME                              ZW_MeterSupportedGetV5Frame;\
 782      =3    ZW_METER_SUPPORTED_REPORT_1BYTE_V5_FRAME                     ZW_MeterSupportedReport1byteV5Frame;\
 783      =3    ZW_METER_SUPPORTED_REPORT_2BYTE_V5_FRAME                     ZW_MeterSupportedReport2byteV5Frame;\
 784      =3    ZW_METER_SUPPORTED_REPORT_3BYTE_V5_FRAME                     ZW_MeterSupportedReport3byteV5Frame;\
 785      =3    ZW_METER_SUPPORTED_REPORT_4BYTE_V5_FRAME                     ZW_MeterSupportedReport4byteV5Frame;\
 786      =3  /* Command class Mtp Window Covering */\
 787      =3    ZW_MOVE_TO_POSITION_GET_FRAME                                ZW_MoveToPositionGetFrame;\
 788      =3    ZW_MOVE_TO_POSITION_REPORT_FRAME                             ZW_MoveToPositionReportFrame;\
 789      =3    ZW_MOVE_TO_POSITION_SET_FRAME                                ZW_MoveToPositionSetFrame;\
 790      =3  /* Command class Multi Channel Association V2 */\
 791      =3    ZW_MULTI_CHANNEL_ASSOCIATION_GET_V2_FRAME                    ZW_MultiChannelAssociationGetV2Frame;\
 792      =3    ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V2_FRAME          ZW_MultiChannelAssociationGroupingsGetV2Fra
             -me;\
 793      =3    ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V2_FRAME       ZW_MultiChannelAssociationGroupingsReportV2
             -Frame;\
 794      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_1BYTE_V2_FRAME           ZW_MultiChannelAssociationRemove1byteV2Fram
             -e;\
 795      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_2BYTE_V2_FRAME           ZW_MultiChannelAssociationRemove2byteV2Fram
             -e;\
 796      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_3BYTE_V2_FRAME           ZW_MultiChannelAssociationRemove3byteV2Fram
             -e;\
 797      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_4BYTE_V2_FRAME           ZW_MultiChannelAssociationRemove4byteV2Fram
             -e;\
 798      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_1BYTE_V2_FRAME           ZW_MultiChannelAssociationReport1byteV2Fram
             -e;\
 799      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_2BYTE_V2_FRAME           ZW_MultiChannelAssociationReport2byteV2Fram
             -e;\
 800      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_3BYTE_V2_FRAME           ZW_MultiChannelAssociationReport3byteV2Fram
             -e;\
 801      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_4BYTE_V2_FRAME           ZW_MultiChannelAssociationReport4byteV2Fram
             -e;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 19  

 802      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V2_FRAME              ZW_MultiChannelAssociationSet1byteV2Frame;\
 803      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_2BYTE_V2_FRAME              ZW_MultiChannelAssociationSet2byteV2Frame;\
 804      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_3BYTE_V2_FRAME              ZW_MultiChannelAssociationSet3byteV2Frame;\
 805      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_4BYTE_V2_FRAME              ZW_MultiChannelAssociationSet4byteV2Frame;\
 806      =3  /* Command class Multi Channel Association V3 */\
 807      =3    ZW_MULTI_CHANNEL_ASSOCIATION_GET_V3_FRAME                    ZW_MultiChannelAssociationGetV3Frame;\
 808      =3    ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V3_FRAME          ZW_MultiChannelAssociationGroupingsGetV3Fra
             -me;\
 809      =3    ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V3_FRAME       ZW_MultiChannelAssociationGroupingsReportV3
             -Frame;\
 810      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_1BYTE_V3_FRAME           ZW_MultiChannelAssociationRemove1byteV3Fram
             -e;\
 811      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_2BYTE_V3_FRAME           ZW_MultiChannelAssociationRemove2byteV3Fram
             -e;\
 812      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_3BYTE_V3_FRAME           ZW_MultiChannelAssociationRemove3byteV3Fram
             -e;\
 813      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_4BYTE_V3_FRAME           ZW_MultiChannelAssociationRemove4byteV3Fram
             -e;\
 814      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_1BYTE_V3_FRAME           ZW_MultiChannelAssociationReport1byteV3Fram
             -e;\
 815      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_2BYTE_V3_FRAME           ZW_MultiChannelAssociationReport2byteV3Fram
             -e;\
 816      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_3BYTE_V3_FRAME           ZW_MultiChannelAssociationReport3byteV3Fram
             -e;\
 817      =3    ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_4BYTE_V3_FRAME           ZW_MultiChannelAssociationReport4byteV3Fram
             -e;\
 818      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V3_FRAME              ZW_MultiChannelAssociationSet1byteV3Frame;\
 819      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_2BYTE_V3_FRAME              ZW_MultiChannelAssociationSet2byteV3Frame;\
 820      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_3BYTE_V3_FRAME              ZW_MultiChannelAssociationSet3byteV3Frame;\
 821      =3    ZW_MULTI_CHANNEL_ASSOCIATION_SET_4BYTE_V3_FRAME              ZW_MultiChannelAssociationSet4byteV3Frame;\
 822      =3  /* Command class Multi Channel V2 */\
 823      =3    ZW_MULTI_CHANNEL_CAPABILITY_GET_V2_FRAME                     ZW_MultiChannelCapabilityGetV2Frame;\
 824      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V2_FRAME            ZW_MultiChannelCapabilityReport1byteV2Frame
             -;\
 825      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V2_FRAME            ZW_MultiChannelCapabilityReport2byteV2Frame
             -;\
 826      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V2_FRAME            ZW_MultiChannelCapabilityReport3byteV2Frame
             -;\
 827      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V2_FRAME            ZW_MultiChannelCapabilityReport4byteV2Frame
             -;\
 828      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_V2_FRAME                     ZW_MultiChannelEndPointFindV2Frame;\
 829      =3    VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG                 VG_MultiChannelEndPointFindReportV2VGroup;\
 830      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V2_FRAME        ZW_MultiChannelEndPointFindReport1byteV2Fra
             -me;\
 831      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V2_FRAME        ZW_MultiChannelEndPointFindReport2byteV2Fra
             -me;\
 832      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V2_FRAME        ZW_MultiChannelEndPointFindReport3byteV2Fra
             -me;\
 833      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V2_FRAME        ZW_MultiChannelEndPointFindReport4byteV2Fra
             -me;\
 834      =3    ZW_MULTI_CHANNEL_END_POINT_GET_V2_FRAME                      ZW_MultiChannelEndPointGetV2Frame;\
 835      =3    ZW_MULTI_CHANNEL_END_POINT_REPORT_V2_FRAME                   ZW_MultiChannelEndPointReportV2Frame;\
 836      =3  
 837      =3  #define ZW_FRAME_COLLECTION_MACRO2\
 838      =3    ZW_MULTI_INSTANCE_GET_V2_FRAME                               ZW_MultiInstanceGetV2Frame;\
 839      =3    ZW_MULTI_INSTANCE_REPORT_V2_FRAME                            ZW_MultiInstanceReportV2Frame;\
 840      =3  /* Command class Multi Channel V3 */\
 841      =3    ZW_MULTI_CHANNEL_CAPABILITY_GET_V3_FRAME                     ZW_MultiChannelCapabilityGetV3Frame;\
 842      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V3_FRAME            ZW_MultiChannelCapabilityReport1byteV3Frame
             -;\
 843      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V3_FRAME            ZW_MultiChannelCapabilityReport2byteV3Frame
             -;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 20  

 844      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V3_FRAME            ZW_MultiChannelCapabilityReport3byteV3Frame
             -;\
 845      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V3_FRAME            ZW_MultiChannelCapabilityReport4byteV3Frame
             -;\
 846      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_V3_FRAME                     ZW_MultiChannelEndPointFindV3Frame;\
 847      =3    VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG                 VG_MultiChannelEndPointFindReportV3VGroup;\
 848      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V3_FRAME        ZW_MultiChannelEndPointFindReport1byteV3Fra
             -me;\
 849      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V3_FRAME        ZW_MultiChannelEndPointFindReport2byteV3Fra
             -me;\
 850      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V3_FRAME        ZW_MultiChannelEndPointFindReport3byteV3Fra
             -me;\
 851      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V3_FRAME        ZW_MultiChannelEndPointFindReport4byteV3Fra
             -me;\
 852      =3    ZW_MULTI_CHANNEL_END_POINT_GET_V3_FRAME                      ZW_MultiChannelEndPointGetV3Frame;\
 853      =3    ZW_MULTI_CHANNEL_END_POINT_REPORT_V3_FRAME                   ZW_MultiChannelEndPointReportV3Frame;\
 854      =3    ZW_MULTI_INSTANCE_GET_V3_FRAME                               ZW_MultiInstanceGetV3Frame;\
 855      =3    ZW_MULTI_INSTANCE_REPORT_V3_FRAME                            ZW_MultiInstanceReportV3Frame;\
 856      =3  /* Command class Multi Channel V4 */\
 857      =3    ZW_MULTI_CHANNEL_CAPABILITY_GET_V4_FRAME                     ZW_MultiChannelCapabilityGetV4Frame;\
 858      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V4_FRAME            ZW_MultiChannelCapabilityReport1byteV4Frame
             -;\
 859      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V4_FRAME            ZW_MultiChannelCapabilityReport2byteV4Frame
             -;\
 860      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V4_FRAME            ZW_MultiChannelCapabilityReport3byteV4Frame
             -;\
 861      =3    ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V4_FRAME            ZW_MultiChannelCapabilityReport4byteV4Frame
             -;\
 862      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_V4_FRAME                     ZW_MultiChannelEndPointFindV4Frame;\
 863      =3    VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG                 VG_MultiChannelEndPointFindReportV4VGroup;\
 864      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V4_FRAME        ZW_MultiChannelEndPointFindReport1byteV4Fra
             -me;\
 865      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V4_FRAME        ZW_MultiChannelEndPointFindReport2byteV4Fra
             -me;\
 866      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V4_FRAME        ZW_MultiChannelEndPointFindReport3byteV4Fra
             -me;\
 867      =3    ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V4_FRAME        ZW_MultiChannelEndPointFindReport4byteV4Fra
             -me;\
 868      =3    ZW_MULTI_CHANNEL_END_POINT_GET_V4_FRAME                      ZW_MultiChannelEndPointGetV4Frame;\
 869      =3    ZW_MULTI_CHANNEL_END_POINT_REPORT_V4_FRAME                   ZW_MultiChannelEndPointReportV4Frame;\
 870      =3    ZW_MULTI_INSTANCE_GET_V4_FRAME                               ZW_MultiInstanceGetV4Frame;\
 871      =3    ZW_MULTI_INSTANCE_REPORT_V4_FRAME                            ZW_MultiInstanceReportV4Frame;\
 872      =3    ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V4_FRAME             ZW_MultiChannelAggregatedMembersGetV4Frame;
             -\
 873      =3    ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_1BYTE_V4_FRAME    ZW_MultiChannelAggregatedMembersReport1byte
             -V4Frame;\
 874      =3    ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_2BYTE_V4_FRAME    ZW_MultiChannelAggregatedMembersReport2byte
             -V4Frame;\
 875      =3    ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_3BYTE_V4_FRAME    ZW_MultiChannelAggregatedMembersReport3byte
             -V4Frame;\
 876      =3    ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_4BYTE_V4_FRAME    ZW_MultiChannelAggregatedMembersReport4byte
             -V4Frame;\
 877      =3  /* Command class Multi Instance Association */\
 878      =3    ZW_MULTI_INSTANCE_ASSOCIATION_GET_FRAME                      ZW_MultiInstanceAssociationGetFrame;\
 879      =3    ZW_MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET_FRAME            ZW_MultiInstanceAssociationGroupingsGetFram
             -e;\
 880      =3    ZW_MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT_FRAME         ZW_MultiInstanceAssociationGroupingsReportF
             -rame;\
 881      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_1BYTE_FRAME             ZW_MultiInstanceAssociationRemove1byteFrame
             -;\
 882      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_2BYTE_FRAME             ZW_MultiInstanceAssociationRemove2byteFrame
             -;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 21  

 883      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_3BYTE_FRAME             ZW_MultiInstanceAssociationRemove3byteFrame
             -;\
 884      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_4BYTE_FRAME             ZW_MultiInstanceAssociationRemove4byteFrame
             -;\
 885      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_1BYTE_FRAME             ZW_MultiInstanceAssociationReport1byteFrame
             -;\
 886      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_2BYTE_FRAME             ZW_MultiInstanceAssociationReport2byteFrame
             -;\
 887      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_3BYTE_FRAME             ZW_MultiInstanceAssociationReport3byteFrame
             -;\
 888      =3    ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_4BYTE_FRAME             ZW_MultiInstanceAssociationReport4byteFrame
             -;\
 889      =3    ZW_MULTI_INSTANCE_ASSOCIATION_SET_1BYTE_FRAME                ZW_MultiInstanceAssociationSet1byteFrame;\
 890      =3    ZW_MULTI_INSTANCE_ASSOCIATION_SET_2BYTE_FRAME                ZW_MultiInstanceAssociationSet2byteFrame;\
 891      =3    ZW_MULTI_INSTANCE_ASSOCIATION_SET_3BYTE_FRAME                ZW_MultiInstanceAssociationSet3byteFrame;\
 892      =3    ZW_MULTI_INSTANCE_ASSOCIATION_SET_4BYTE_FRAME                ZW_MultiInstanceAssociationSet4byteFrame;\
 893      =3  /* Command class Multi Instance */\
 894      =3    ZW_MULTI_INSTANCE_GET_FRAME                                  ZW_MultiInstanceGetFrame;\
 895      =3    ZW_MULTI_INSTANCE_REPORT_FRAME                               ZW_MultiInstanceReportFrame;\
 896      =3  /* Command class Network Management Proxy */\
 897      =3    ZW_NODE_INFO_CACHED_GET_FRAME                                ZW_NodeInfoCachedGetFrame;\
 898      =3    ZW_NODE_INFO_CACHED_REPORT_1BYTE_FRAME                       ZW_NodeInfoCachedReport1byteFrame;\
 899      =3    ZW_NODE_INFO_CACHED_REPORT_2BYTE_FRAME                       ZW_NodeInfoCachedReport2byteFrame;\
 900      =3    ZW_NODE_INFO_CACHED_REPORT_3BYTE_FRAME                       ZW_NodeInfoCachedReport3byteFrame;\
 901      =3    ZW_NODE_INFO_CACHED_REPORT_4BYTE_FRAME                       ZW_NodeInfoCachedReport4byteFrame;\
 902      =3    ZW_NODE_LIST_GET_FRAME                                       ZW_NodeListGetFrame;\
 903      =3    ZW_NODE_LIST_REPORT_1BYTE_FRAME                              ZW_NodeListReport1byteFrame;\
 904      =3    ZW_NODE_LIST_REPORT_2BYTE_FRAME                              ZW_NodeListReport2byteFrame;\
 905      =3    ZW_NODE_LIST_REPORT_3BYTE_FRAME                              ZW_NodeListReport3byteFrame;\
 906      =3    ZW_NODE_LIST_REPORT_4BYTE_FRAME                              ZW_NodeListReport4byteFrame;\
 907      =3  /* Command class Network Management Proxy V2 */\
 908      =3    ZW_NODE_INFO_CACHED_GET_V2_FRAME                             ZW_NodeInfoCachedGetV2Frame;\
 909      =3    ZW_NODE_INFO_CACHED_REPORT_1BYTE_V2_FRAME                    ZW_NodeInfoCachedReport1byteV2Frame;\
 910      =3    ZW_NODE_INFO_CACHED_REPORT_2BYTE_V2_FRAME                    ZW_NodeInfoCachedReport2byteV2Frame;\
 911      =3    ZW_NODE_INFO_CACHED_REPORT_3BYTE_V2_FRAME                    ZW_NodeInfoCachedReport3byteV2Frame;\
 912      =3    ZW_NODE_INFO_CACHED_REPORT_4BYTE_V2_FRAME                    ZW_NodeInfoCachedReport4byteV2Frame;\
 913      =3    ZW_NODE_LIST_GET_V2_FRAME                                    ZW_NodeListGetV2Frame;\
 914      =3    ZW_NODE_LIST_REPORT_1BYTE_V2_FRAME                           ZW_NodeListReport1byteV2Frame;\
 915      =3    ZW_NODE_LIST_REPORT_2BYTE_V2_FRAME                           ZW_NodeListReport2byteV2Frame;\
 916      =3    ZW_NODE_LIST_REPORT_3BYTE_V2_FRAME                           ZW_NodeListReport3byteV2Frame;\
 917      =3    ZW_NODE_LIST_REPORT_4BYTE_V2_FRAME                           ZW_NodeListReport4byteV2Frame;\
 918      =3    ZW_NM_MULTI_CHANNEL_END_POINT_GET_V2_FRAME                   ZW_NmMultiChannelEndPointGetV2Frame;\
 919      =3    ZW_NM_MULTI_CHANNEL_END_POINT_REPORT_V2_FRAME                ZW_NmMultiChannelEndPointReportV2Frame;\
 920      =3    ZW_NM_MULTI_CHANNEL_CAPABILITY_GET_V2_FRAME                  ZW_NmMultiChannelCapabilityGetV2Frame;\
 921      =3    ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V2_FRAME         ZW_NmMultiChannelCapabilityReport1byteV2Fra
             -me;\
 922      =3    ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V2_FRAME         ZW_NmMultiChannelCapabilityReport2byteV2Fra
             -me;\
 923      =3    ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V2_FRAME         ZW_NmMultiChannelCapabilityReport3byteV2Fra
             -me;\
 924      =3    ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V2_FRAME         ZW_NmMultiChannelCapabilityReport4byteV2Fra
             -me;\
 925      =3    ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V2_FRAME          ZW_NmMultiChannelAggregatedMembersGetV2Fram
             -e;\
 926      =3    VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG          VG_NmMultiChannelAggregatedMembersReportV2V
             -Group;\
 927      =3    ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_1BYTE_V2_FRAME ZW_NmMultiChannelAggregatedMembersReport1by
             -teV2Frame;\
 928      =3    ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_2BYTE_V2_FRAME ZW_NmMultiChannelAggregatedMembersReport2by
             -teV2Frame;\
 929      =3    ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_3BYTE_V2_FRAME ZW_NmMultiChannelAggregatedMembersReport3by
             -teV2Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 22  

 930      =3    ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_4BYTE_V2_FRAME ZW_NmMultiChannelAggregatedMembersReport4by
             -teV2Frame;\
 931      =3  /* Command class Network Management Basic */\
 932      =3    ZW_LEARN_MODE_SET_FRAME                                      ZW_LearnModeSetFrame;\
 933      =3    ZW_LEARN_MODE_SET_STATUS_FRAME                               ZW_LearnModeSetStatusFrame;\
 934      =3    ZW_NODE_INFORMATION_SEND_FRAME                               ZW_NodeInformationSendFrame;\
 935      =3    ZW_NETWORK_UPDATE_REQUEST_FRAME                              ZW_NetworkUpdateRequestFrame;\
 936      =3    ZW_NETWORK_UPDATE_REQUEST_STATUS_FRAME                       ZW_NetworkUpdateRequestStatusFrame;\
 937      =3    ZW_DEFAULT_SET_FRAME                                         ZW_DefaultSetFrame;\
 938      =3    ZW_DEFAULT_SET_COMPLETE_FRAME                                ZW_DefaultSetCompleteFrame;\
 939      =3  /* Command class Network Management Basic V2 */\
 940      =3    ZW_LEARN_MODE_SET_V2_FRAME                                   ZW_LearnModeSetV2Frame;\
 941      =3    ZW_LEARN_MODE_SET_STATUS_V2_FRAME                            ZW_LearnModeSetStatusV2Frame;\
 942      =3    ZW_NODE_INFORMATION_SEND_V2_FRAME                            ZW_NodeInformationSendV2Frame;\
 943      =3    ZW_NETWORK_UPDATE_REQUEST_V2_FRAME                           ZW_NetworkUpdateRequestV2Frame;\
 944      =3    ZW_NETWORK_UPDATE_REQUEST_STATUS_V2_FRAME                    ZW_NetworkUpdateRequestStatusV2Frame;\
 945      =3    ZW_DEFAULT_SET_V2_FRAME                                      ZW_DefaultSetV2Frame;\
 946      =3    ZW_DEFAULT_SET_COMPLETE_V2_FRAME                             ZW_DefaultSetCompleteV2Frame;\
 947      =3    ZW_DSK_GET_V2_FRAME                                          ZW_DskGetV2Frame;\
 948      =3    ZW_DSK_REPORT_V2_FRAME                                       ZW_DskReportV2Frame;\
 949      =3  /* Command class Network Management Inclusion */\
 950      =3    ZW_FAILED_NODE_REMOVE_FRAME                                  ZW_FailedNodeRemoveFrame;\
 951      =3    ZW_FAILED_NODE_REMOVE_STATUS_FRAME                           ZW_FailedNodeRemoveStatusFrame;\
 952      =3    ZW_NODE_ADD_FRAME                                            ZW_NodeAddFrame;\
 953      =3    ZW_NODE_ADD_STATUS_1BYTE_FRAME                               ZW_NodeAddStatus1byteFrame;\
 954      =3    ZW_NODE_ADD_STATUS_2BYTE_FRAME                               ZW_NodeAddStatus2byteFrame;\
 955      =3    ZW_NODE_ADD_STATUS_3BYTE_FRAME                               ZW_NodeAddStatus3byteFrame;\
 956      =3    ZW_NODE_ADD_STATUS_4BYTE_FRAME                               ZW_NodeAddStatus4byteFrame;\
 957      =3    ZW_NODE_REMOVE_FRAME                                         ZW_NodeRemoveFrame;\
 958      =3    ZW_NODE_REMOVE_STATUS_FRAME                                  ZW_NodeRemoveStatusFrame;\
 959      =3    ZW_FAILED_NODE_REPLACE_FRAME                                 ZW_FailedNodeReplaceFrame;\
 960      =3    ZW_FAILED_NODE_REPLACE_STATUS_FRAME                          ZW_FailedNodeReplaceStatusFrame;\
 961      =3    ZW_NODE_NEIGHBOR_UPDATE_REQUEST_FRAME                        ZW_NodeNeighborUpdateRequestFrame;\
 962      =3    ZW_NODE_NEIGHBOR_UPDATE_STATUS_FRAME                         ZW_NodeNeighborUpdateStatusFrame;\
 963      =3    ZW_RETURN_ROUTE_ASSIGN_FRAME                                 ZW_ReturnRouteAssignFrame;\
 964      =3    ZW_RETURN_ROUTE_ASSIGN_COMPLETE_FRAME                        ZW_ReturnRouteAssignCompleteFrame;\
 965      =3    ZW_RETURN_ROUTE_DELETE_FRAME                                 ZW_ReturnRouteDeleteFrame;\
 966      =3    ZW_RETURN_ROUTE_DELETE_COMPLETE_FRAME                        ZW_ReturnRouteDeleteCompleteFrame;\
 967      =3  /* Command class Network Management Inclusion V2 */\
 968      =3    ZW_FAILED_NODE_REMOVE_V2_FRAME                               ZW_FailedNodeRemoveV2Frame;\
 969      =3    ZW_FAILED_NODE_REMOVE_STATUS_V2_FRAME                        ZW_FailedNodeRemoveStatusV2Frame;\
 970      =3    ZW_NODE_ADD_V2_FRAME                                         ZW_NodeAddV2Frame;\
 971      =3    ZW_NODE_ADD_STATUS_1BYTE_V2_FRAME                            ZW_NodeAddStatus1byteV2Frame;\
 972      =3    ZW_NODE_ADD_STATUS_2BYTE_V2_FRAME                            ZW_NodeAddStatus2byteV2Frame;\
 973      =3    ZW_NODE_ADD_STATUS_3BYTE_V2_FRAME                            ZW_NodeAddStatus3byteV2Frame;\
 974      =3    ZW_NODE_ADD_STATUS_4BYTE_V2_FRAME                            ZW_NodeAddStatus4byteV2Frame;\
 975      =3    ZW_NODE_REMOVE_V2_FRAME                                      ZW_NodeRemoveV2Frame;\
 976      =3    ZW_NODE_REMOVE_STATUS_V2_FRAME                               ZW_NodeRemoveStatusV2Frame;\
 977      =3    ZW_FAILED_NODE_REPLACE_V2_FRAME                              ZW_FailedNodeReplaceV2Frame;\
 978      =3    ZW_FAILED_NODE_REPLACE_STATUS_V2_FRAME                       ZW_FailedNodeReplaceStatusV2Frame;\
 979      =3    ZW_NODE_NEIGHBOR_UPDATE_REQUEST_V2_FRAME                     ZW_NodeNeighborUpdateRequestV2Frame;\
 980      =3    ZW_NODE_NEIGHBOR_UPDATE_STATUS_V2_FRAME                      ZW_NodeNeighborUpdateStatusV2Frame;\
 981      =3    ZW_RETURN_ROUTE_ASSIGN_V2_FRAME                              ZW_ReturnRouteAssignV2Frame;\
 982      =3    ZW_RETURN_ROUTE_ASSIGN_COMPLETE_V2_FRAME                     ZW_ReturnRouteAssignCompleteV2Frame;\
 983      =3    ZW_RETURN_ROUTE_DELETE_V2_FRAME                              ZW_ReturnRouteDeleteV2Frame;\
 984      =3    ZW_RETURN_ROUTE_DELETE_COMPLETE_V2_FRAME                     ZW_ReturnRouteDeleteCompleteV2Frame;\
 985      =3    ZW_NODE_ADD_KEYS_REPORT_V2_FRAME                             ZW_NodeAddKeysReportV2Frame;\
 986      =3    ZW_NODE_ADD_KEYS_SET_V2_FRAME                                ZW_NodeAddKeysSetV2Frame;\
 987      =3    ZW_NODE_ADD_DSK_REPORT_V2_FRAME                              ZW_NodeAddDskReportV2Frame;\
 988      =3    ZW_NODE_ADD_DSK_SET_1BYTE_V2_FRAME                           ZW_NodeAddDskSet1byteV2Frame;\
 989      =3    ZW_NODE_ADD_DSK_SET_2BYTE_V2_FRAME                           ZW_NodeAddDskSet2byteV2Frame;\
 990      =3    ZW_NODE_ADD_DSK_SET_3BYTE_V2_FRAME                           ZW_NodeAddDskSet3byteV2Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 23  

 991      =3    ZW_NODE_ADD_DSK_SET_4BYTE_V2_FRAME                           ZW_NodeAddDskSet4byteV2Frame;\
 992      =3  /* Command class Network Management Inclusion V3 */\
 993      =3    ZW_FAILED_NODE_REMOVE_V3_FRAME                               ZW_FailedNodeRemoveV3Frame;\
 994      =3    ZW_FAILED_NODE_REMOVE_STATUS_V3_FRAME                        ZW_FailedNodeRemoveStatusV3Frame;\
 995      =3    ZW_NODE_ADD_V3_FRAME                                         ZW_NodeAddV3Frame;\
 996      =3    ZW_NODE_ADD_STATUS_1BYTE_V3_FRAME                            ZW_NodeAddStatus1byteV3Frame;\
 997      =3    ZW_NODE_ADD_STATUS_2BYTE_V3_FRAME                            ZW_NodeAddStatus2byteV3Frame;\
 998      =3    ZW_NODE_ADD_STATUS_3BYTE_V3_FRAME                            ZW_NodeAddStatus3byteV3Frame;\
 999      =3    ZW_NODE_ADD_STATUS_4BYTE_V3_FRAME                            ZW_NodeAddStatus4byteV3Frame;\
1000      =3    ZW_NODE_REMOVE_V3_FRAME                                      ZW_NodeRemoveV3Frame;\
1001      =3    ZW_NODE_REMOVE_STATUS_V3_FRAME                               ZW_NodeRemoveStatusV3Frame;\
1002      =3    ZW_FAILED_NODE_REPLACE_V3_FRAME                              ZW_FailedNodeReplaceV3Frame;\
1003      =3    ZW_FAILED_NODE_REPLACE_STATUS_V3_FRAME                       ZW_FailedNodeReplaceStatusV3Frame;\
1004      =3    ZW_NODE_NEIGHBOR_UPDATE_REQUEST_V3_FRAME                     ZW_NodeNeighborUpdateRequestV3Frame;\
1005      =3    ZW_NODE_NEIGHBOR_UPDATE_STATUS_V3_FRAME                      ZW_NodeNeighborUpdateStatusV3Frame;\
1006      =3    ZW_RETURN_ROUTE_ASSIGN_V3_FRAME                              ZW_ReturnRouteAssignV3Frame;\
1007      =3    ZW_RETURN_ROUTE_ASSIGN_COMPLETE_V3_FRAME                     ZW_ReturnRouteAssignCompleteV3Frame;\
1008      =3    ZW_RETURN_ROUTE_DELETE_V3_FRAME                              ZW_ReturnRouteDeleteV3Frame;\
1009      =3    ZW_RETURN_ROUTE_DELETE_COMPLETE_V3_FRAME                     ZW_ReturnRouteDeleteCompleteV3Frame;\
1010      =3    ZW_NODE_ADD_KEYS_REPORT_V3_FRAME                             ZW_NodeAddKeysReportV3Frame;\
1011      =3    ZW_NODE_ADD_KEYS_SET_V3_FRAME                                ZW_NodeAddKeysSetV3Frame;\
1012      =3    ZW_NODE_ADD_DSK_REPORT_V3_FRAME                              ZW_NodeAddDskReportV3Frame;\
1013      =3    ZW_NODE_ADD_DSK_SET_1BYTE_V3_FRAME                           ZW_NodeAddDskSet1byteV3Frame;\
1014      =3    ZW_NODE_ADD_DSK_SET_2BYTE_V3_FRAME                           ZW_NodeAddDskSet2byteV3Frame;\
1015      =3    ZW_NODE_ADD_DSK_SET_3BYTE_V3_FRAME                           ZW_NodeAddDskSet3byteV3Frame;\
1016      =3    ZW_NODE_ADD_DSK_SET_4BYTE_V3_FRAME                           ZW_NodeAddDskSet4byteV3Frame;\
1017      =3    ZW_S2_ADVANCED_JOIN_MODE_GET_V3_FRAME                        ZW_S2AdvancedJoinModeGetV3Frame;\
1018      =3    ZW_SMART_START_JOIN_STARTED_REPORT_1BYTE_V3_FRAME            ZW_SmartStartJoinStartedReport1byteV3Frame;
             -\
1019      =3    ZW_SMART_START_JOIN_STARTED_REPORT_2BYTE_V3_FRAME            ZW_SmartStartJoinStartedReport2byteV3Frame;
             -\
1020      =3    ZW_SMART_START_JOIN_STARTED_REPORT_3BYTE_V3_FRAME            ZW_SmartStartJoinStartedReport3byteV3Frame;
             -\
1021      =3    ZW_SMART_START_JOIN_STARTED_REPORT_4BYTE_V3_FRAME            ZW_SmartStartJoinStartedReport4byteV3Frame;
             -\
1022      =3    ZW_S2_ADVANCED_JOIN_MODE_SET_V3_FRAME                        ZW_S2AdvancedJoinModeSetV3Frame;\
1023      =3    ZW_S2_ADVANCED_JOIN_MODE_REPORT_V3_FRAME                     ZW_S2AdvancedJoinModeReportV3Frame;\
1024      =3    ZW_INCLUDED_NIF_REPORT_V3_FRAME                              ZW_IncludedNifReportV3Frame;\
1025      =3  /* Command class Node Naming */\
1026      =3    ZW_NODE_NAMING_NODE_LOCATION_REPORT_FRAME                    ZW_NodeNamingNodeLocationReportFrame;\
1027      =3    ZW_NODE_NAMING_NODE_LOCATION_SET_FRAME                       ZW_NodeNamingNodeLocationSetFrame;\
1028      =3    ZW_NODE_NAMING_NODE_LOCATION_GET_FRAME                       ZW_NodeNamingNodeLocationGetFrame;\
1029      =3    ZW_NODE_NAMING_NODE_NAME_GET_FRAME                           ZW_NodeNamingNodeNameGetFrame;\
1030      =3    ZW_NODE_NAMING_NODE_NAME_REPORT_FRAME                        ZW_NodeNamingNodeNameReportFrame;\
1031      =3    ZW_NODE_NAMING_NODE_NAME_SET_FRAME                           ZW_NodeNamingNodeNameSetFrame;\
1032      =3  /* Command class Powerlevel */\
1033      =3    ZW_POWERLEVEL_GET_FRAME                                      ZW_PowerlevelGetFrame;\
1034      =3    ZW_POWERLEVEL_REPORT_FRAME                                   ZW_PowerlevelReportFrame;\
1035      =3    ZW_POWERLEVEL_SET_FRAME                                      ZW_PowerlevelSetFrame;\
1036      =3    ZW_POWERLEVEL_TEST_NODE_GET_FRAME                            ZW_PowerlevelTestNodeGetFrame;\
1037      =3    ZW_POWERLEVEL_TEST_NODE_REPORT_FRAME                         ZW_PowerlevelTestNodeReportFrame;\
1038      =3    ZW_POWERLEVEL_TEST_NODE_SET_FRAME                            ZW_PowerlevelTestNodeSetFrame;\
1039      =3  /* Command class Prepayment Encapsulation */\
1040      =3    ZW_CMD_ENCAPSULATION_1BYTE_FRAME                             ZW_CmdEncapsulation1byteFrame;\
1041      =3    ZW_CMD_ENCAPSULATION_2BYTE_FRAME                             ZW_CmdEncapsulation2byteFrame;\
1042      =3    ZW_CMD_ENCAPSULATION_3BYTE_FRAME                             ZW_CmdEncapsulation3byteFrame;\
1043      =3    ZW_CMD_ENCAPSULATION_4BYTE_FRAME                             ZW_CmdEncapsulation4byteFrame;\
1044      =3  /* Command class Prepayment */\
1045      =3    ZW_PREPAYMENT_BALANCE_GET_FRAME                              ZW_PrepaymentBalanceGetFrame;\
1046      =3    ZW_PREPAYMENT_BALANCE_REPORT_FRAME                           ZW_PrepaymentBalanceReportFrame;\
1047      =3    ZW_PREPAYMENT_SUPPORTED_GET_FRAME                            ZW_PrepaymentSupportedGetFrame;\
1048      =3    ZW_PREPAYMENT_SUPPORTED_REPORT_FRAME                         ZW_PrepaymentSupportedReportFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 24  

1049      =3  /* Command class Proprietary */\
1050      =3    ZW_PROPRIETARY_GET_1BYTE_FRAME                               ZW_ProprietaryGet1byteFrame;\
1051      =3    ZW_PROPRIETARY_GET_2BYTE_FRAME                               ZW_ProprietaryGet2byteFrame;\
1052      =3    ZW_PROPRIETARY_GET_3BYTE_FRAME                               ZW_ProprietaryGet3byteFrame;\
1053      =3    ZW_PROPRIETARY_GET_4BYTE_FRAME                               ZW_ProprietaryGet4byteFrame;\
1054      =3    ZW_PROPRIETARY_REPORT_1BYTE_FRAME                            ZW_ProprietaryReport1byteFrame;\
1055      =3    ZW_PROPRIETARY_REPORT_2BYTE_FRAME                            ZW_ProprietaryReport2byteFrame;\
1056      =3    ZW_PROPRIETARY_REPORT_3BYTE_FRAME                            ZW_ProprietaryReport3byteFrame;\
1057      =3    ZW_PROPRIETARY_REPORT_4BYTE_FRAME                            ZW_ProprietaryReport4byteFrame;\
1058      =3    ZW_PROPRIETARY_SET_1BYTE_FRAME                               ZW_ProprietarySet1byteFrame;\
1059      =3    ZW_PROPRIETARY_SET_2BYTE_FRAME                               ZW_ProprietarySet2byteFrame;\
1060      =3    ZW_PROPRIETARY_SET_3BYTE_FRAME                               ZW_ProprietarySet3byteFrame;\
1061      =3    ZW_PROPRIETARY_SET_4BYTE_FRAME                               ZW_ProprietarySet4byteFrame;\
1062      =3  /* Command class Protection */\
1063      =3    ZW_PROTECTION_GET_FRAME                                      ZW_ProtectionGetFrame;\
1064      =3    ZW_PROTECTION_REPORT_FRAME                                   ZW_ProtectionReportFrame;\
1065      =3    ZW_PROTECTION_SET_FRAME                                      ZW_ProtectionSetFrame;\
1066      =3  /* Command class Protection V2 */\
1067      =3    ZW_PROTECTION_EC_GET_V2_FRAME                                ZW_ProtectionEcGetV2Frame;\
1068      =3    ZW_PROTECTION_EC_REPORT_V2_FRAME                             ZW_ProtectionEcReportV2Frame;\
1069      =3    ZW_PROTECTION_EC_SET_V2_FRAME                                ZW_ProtectionEcSetV2Frame;\
1070      =3    ZW_PROTECTION_GET_V2_FRAME                                   ZW_ProtectionGetV2Frame;\
1071      =3    ZW_PROTECTION_REPORT_V2_FRAME                                ZW_ProtectionReportV2Frame;\
1072      =3    ZW_PROTECTION_SET_V2_FRAME                                   ZW_ProtectionSetV2Frame;\
1073      =3    ZW_PROTECTION_SUPPORTED_GET_V2_FRAME                         ZW_ProtectionSupportedGetV2Frame;\
1074      =3    ZW_PROTECTION_SUPPORTED_REPORT_V2_FRAME                      ZW_ProtectionSupportedReportV2Frame;\
1075      =3    ZW_PROTECTION_TIMEOUT_GET_V2_FRAME                           ZW_ProtectionTimeoutGetV2Frame;\
1076      =3    ZW_PROTECTION_TIMEOUT_REPORT_V2_FRAME                        ZW_ProtectionTimeoutReportV2Frame;\
1077      =3    ZW_PROTECTION_TIMEOUT_SET_V2_FRAME                           ZW_ProtectionTimeoutSetV2Frame;\
1078      =3  /* Command class Rate Tbl Config */\
1079      =3    ZW_RATE_TBL_REMOVE_1BYTE_FRAME                               ZW_RateTblRemove1byteFrame;\
1080      =3    ZW_RATE_TBL_REMOVE_2BYTE_FRAME                               ZW_RateTblRemove2byteFrame;\
1081      =3    ZW_RATE_TBL_REMOVE_3BYTE_FRAME                               ZW_RateTblRemove3byteFrame;\
1082      =3    ZW_RATE_TBL_REMOVE_4BYTE_FRAME                               ZW_RateTblRemove4byteFrame;\
1083      =3    ZW_RATE_TBL_SET_1BYTE_FRAME                                  ZW_RateTblSet1byteFrame;\
1084      =3    ZW_RATE_TBL_SET_2BYTE_FRAME                                  ZW_RateTblSet2byteFrame;\
1085      =3    ZW_RATE_TBL_SET_3BYTE_FRAME                                  ZW_RateTblSet3byteFrame;\
1086      =3    ZW_RATE_TBL_SET_4BYTE_FRAME                                  ZW_RateTblSet4byteFrame;\
1087      =3  /* Command class Rate Tbl Monitor */\
1088      =3    ZW_RATE_TBL_ACTIVE_RATE_GET_FRAME                            ZW_RateTblActiveRateGetFrame;\
1089      =3    ZW_RATE_TBL_ACTIVE_RATE_REPORT_FRAME                         ZW_RateTblActiveRateReportFrame;\
1090      =3    ZW_RATE_TBL_CURRENT_DATA_GET_FRAME                           ZW_RateTblCurrentDataGetFrame;\
1091      =3    VG_RATE_TBL_CURRENT_DATA_REPORT_VG                           VG_RateTblCurrentDataReportVGroup;\
1092      =3    ZW_RATE_TBL_CURRENT_DATA_REPORT_1BYTE_FRAME                  ZW_RateTblCurrentDataReport1byteFrame;\
1093      =3    ZW_RATE_TBL_CURRENT_DATA_REPORT_2BYTE_FRAME                  ZW_RateTblCurrentDataReport2byteFrame;\
1094      =3    ZW_RATE_TBL_CURRENT_DATA_REPORT_3BYTE_FRAME                  ZW_RateTblCurrentDataReport3byteFrame;\
1095      =3    ZW_RATE_TBL_CURRENT_DATA_REPORT_4BYTE_FRAME                  ZW_RateTblCurrentDataReport4byteFrame;\
1096      =3    ZW_RATE_TBL_GET_FRAME                                        ZW_RateTblGetFrame;\
1097      =3    ZW_RATE_TBL_HISTORICAL_DATA_GET_FRAME                        ZW_RateTblHistoricalDataGetFrame;\
1098      =3    VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG                        VG_RateTblHistoricalDataReportVGroup;\
1099      =3    ZW_RATE_TBL_HISTORICAL_DATA_REPORT_1BYTE_FRAME               ZW_RateTblHistoricalDataReport1byteFrame;\
1100      =3    ZW_RATE_TBL_HISTORICAL_DATA_REPORT_2BYTE_FRAME               ZW_RateTblHistoricalDataReport2byteFrame;\
1101      =3    ZW_RATE_TBL_HISTORICAL_DATA_REPORT_3BYTE_FRAME               ZW_RateTblHistoricalDataReport3byteFrame;\
1102      =3    ZW_RATE_TBL_HISTORICAL_DATA_REPORT_4BYTE_FRAME               ZW_RateTblHistoricalDataReport4byteFrame;\
1103      =3    ZW_RATE_TBL_REPORT_1BYTE_FRAME                               ZW_RateTblReport1byteFrame;\
1104      =3    ZW_RATE_TBL_REPORT_2BYTE_FRAME                               ZW_RateTblReport2byteFrame;\
1105      =3    ZW_RATE_TBL_REPORT_3BYTE_FRAME                               ZW_RateTblReport3byteFrame;\
1106      =3    ZW_RATE_TBL_REPORT_4BYTE_FRAME                               ZW_RateTblReport4byteFrame;\
1107      =3    ZW_RATE_TBL_SUPPORTED_GET_FRAME                              ZW_RateTblSupportedGetFrame;\
1108      =3    ZW_RATE_TBL_SUPPORTED_REPORT_FRAME                           ZW_RateTblSupportedReportFrame;\
1109      =3  /* Command class Remote Association Activate */\
1110      =3    ZW_REMOTE_ASSOCIATION_ACTIVATE_FRAME                         ZW_RemoteAssociationActivateFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 25  

1111      =3  /* Command class Remote Association */\
1112      =3    ZW_REMOTE_ASSOCIATION_CONFIGURATION_GET_FRAME                ZW_RemoteAssociationConfigurationGetFrame;\
1113      =3    ZW_REMOTE_ASSOCIATION_CONFIGURATION_REPORT_FRAME             ZW_RemoteAssociationConfigurationReportFram
             -e;\
1114      =3    ZW_REMOTE_ASSOCIATION_CONFIGURATION_SET_FRAME                ZW_RemoteAssociationConfigurationSetFrame;\
1115      =3  /* Command class Scene Activation */\
1116      =3    ZW_SCENE_ACTIVATION_SET_FRAME                                ZW_SceneActivationSetFrame;\
1117      =3  /* Command class Scene Actuator Conf */\
1118      =3    ZW_SCENE_ACTUATOR_CONF_GET_FRAME                             ZW_SceneActuatorConfGetFrame;\
1119      =3    ZW_SCENE_ACTUATOR_CONF_REPORT_FRAME                          ZW_SceneActuatorConfReportFrame;\
1120      =3    ZW_SCENE_ACTUATOR_CONF_SET_FRAME                             ZW_SceneActuatorConfSetFrame;\
1121      =3  /* Command class Scene Controller Conf */\
1122      =3    ZW_SCENE_CONTROLLER_CONF_GET_FRAME                           ZW_SceneControllerConfGetFrame;\
1123      =3    ZW_SCENE_CONTROLLER_CONF_REPORT_FRAME                        ZW_SceneControllerConfReportFrame;\
1124      =3    ZW_SCENE_CONTROLLER_CONF_SET_FRAME                           ZW_SceneControllerConfSetFrame;\
1125      =3  /* Command class Schedule Entry Lock */\
1126      =3    ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_FRAME                  ZW_ScheduleEntryLockEnableAllSetFrame;\
1127      =3    ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_FRAME                      ZW_ScheduleEntryLockEnableSetFrame;\
1128      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_FRAME                    ZW_ScheduleEntryLockWeekDayGetFrame;\
1129      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_FRAME                 ZW_ScheduleEntryLockWeekDayReportFrame;\
1130      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_FRAME                    ZW_ScheduleEntryLockWeekDaySetFrame;\
1131      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_FRAME                    ZW_ScheduleEntryLockYearDayGetFrame;\
1132      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_FRAME                 ZW_ScheduleEntryLockYearDayReportFrame;\
1133      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_FRAME                    ZW_ScheduleEntryLockYearDaySetFrame;\
1134      =3    ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_FRAME                   ZW_ScheduleEntryTypeSupportedGetFrame;\
1135      =3    ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_FRAME                ZW_ScheduleEntryTypeSupportedReportFrame;\
1136      =3  /* Command class Schedule Entry Lock V2 */\
1137      =3    ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V2_FRAME               ZW_ScheduleEntryLockEnableAllSetV2Frame;\
1138      =3    ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_V2_FRAME                   ZW_ScheduleEntryLockEnableSetV2Frame;\
1139      =3    ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V2_FRAME              ZW_ScheduleEntryLockTimeOffsetGetV2Frame;\
1140      =3    ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V2_FRAME           ZW_ScheduleEntryLockTimeOffsetReportV2Frame
             -;\
1141      =3    ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V2_FRAME              ZW_ScheduleEntryLockTimeOffsetSetV2Frame;\
1142      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V2_FRAME                 ZW_ScheduleEntryLockWeekDayGetV2Frame;\
1143      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V2_FRAME              ZW_ScheduleEntryLockWeekDayReportV2Frame;\
1144      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V2_FRAME                 ZW_ScheduleEntryLockWeekDaySetV2Frame;\
1145      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V2_FRAME                 ZW_ScheduleEntryLockYearDayGetV2Frame;\
1146      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V2_FRAME              ZW_ScheduleEntryLockYearDayReportV2Frame;\
1147      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V2_FRAME                 ZW_ScheduleEntryLockYearDaySetV2Frame;\
1148      =3    ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V2_FRAME                ZW_ScheduleEntryTypeSupportedGetV2Frame;\
1149      =3    ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V2_FRAME             ZW_ScheduleEntryTypeSupportedReportV2Frame;
             -\
1150      =3  /* Command class Schedule Entry Lock V3 */\
1151      =3    ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V3_FRAME               ZW_ScheduleEntryLockEnableAllSetV3Frame;\
1152      =3    ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_V3_FRAME                   ZW_ScheduleEntryLockEnableSetV3Frame;\
1153      =3    ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V3_FRAME              ZW_ScheduleEntryLockTimeOffsetGetV3Frame;\
1154      =3    ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V3_FRAME           ZW_ScheduleEntryLockTimeOffsetReportV3Frame
             -;\
1155      =3    ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V3_FRAME              ZW_ScheduleEntryLockTimeOffsetSetV3Frame;\
1156      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V3_FRAME                 ZW_ScheduleEntryLockWeekDayGetV3Frame;\
1157      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V3_FRAME              ZW_ScheduleEntryLockWeekDayReportV3Frame;\
1158      =3    ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V3_FRAME                 ZW_ScheduleEntryLockWeekDaySetV3Frame;\
1159      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V3_FRAME                 ZW_ScheduleEntryLockYearDayGetV3Frame;\
1160      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V3_FRAME              ZW_ScheduleEntryLockYearDayReportV3Frame;\
1161      =3    ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V3_FRAME                 ZW_ScheduleEntryLockYearDaySetV3Frame;\
1162      =3    ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V3_FRAME                ZW_ScheduleEntryTypeSupportedGetV3Frame;\
1163      =3    ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V3_FRAME             ZW_ScheduleEntryTypeSupportedReportV3Frame;
             -\
1164      =3    ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_GET_V3_FRAME          ZW_ScheduleEntryLockDailyRepeatingGetV3Fram
             -e;\
1165      =3    ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_REPORT_V3_FRAME       ZW_ScheduleEntryLockDailyRepeatingReportV3F
             -rame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 26  

1166      =3    ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_SET_V3_FRAME          ZW_ScheduleEntryLockDailyRepeatingSetV3Fram
             -e;\
1167      =3  /* Command class Screen Attributes */\
1168      =3    ZW_SCREEN_ATTRIBUTES_GET_FRAME                               ZW_ScreenAttributesGetFrame;\
1169      =3    ZW_SCREEN_ATTRIBUTES_REPORT_FRAME                            ZW_ScreenAttributesReportFrame;\
1170      =3  /* Command class Screen Attributes V2 */\
1171      =3    ZW_SCREEN_ATTRIBUTES_GET_V2_FRAME                            ZW_ScreenAttributesGetV2Frame;\
1172      =3    ZW_SCREEN_ATTRIBUTES_REPORT_V2_FRAME                         ZW_ScreenAttributesReportV2Frame;\
1173      =3  /* Command class Screen Md */\
1174      =3    ZW_SCREEN_MD_GET_FRAME                                       ZW_ScreenMdGetFrame;\
1175      =3    VG_SCREEN_MD_REPORT_1BYTE_VG                                 VG_ScreenMdReport1byteVGroup;\
1176      =3    VG_SCREEN_MD_REPORT_2BYTE_VG                                 VG_ScreenMdReport2byteVGroup;\
1177      =3    VG_SCREEN_MD_REPORT_3BYTE_VG                                 VG_ScreenMdReport3byteVGroup;\
1178      =3    VG_SCREEN_MD_REPORT_4BYTE_VG                                 VG_ScreenMdReport4byteVGroup;\
1179      =3    ZW_SCREEN_MD_REPORT_1BYTE_FRAME                              ZW_ScreenMdReport1byteFrame;\
1180      =3    ZW_SCREEN_MD_REPORT_2BYTE_FRAME                              ZW_ScreenMdReport2byteFrame;\
1181      =3    ZW_SCREEN_MD_REPORT_3BYTE_FRAME                              ZW_ScreenMdReport3byteFrame;\
1182      =3    ZW_SCREEN_MD_REPORT_4BYTE_FRAME                              ZW_ScreenMdReport4byteFrame;\
1183      =3  /* Command class Screen Md V2 */\
1184      =3    ZW_SCREEN_MD_GET_V2_FRAME                                    ZW_ScreenMdGetV2Frame;\
1185      =3    VG_SCREEN_MD_REPORT_1BYTE_V2_VG                              VG_ScreenMdReport1byteV2VGroup;\
1186      =3    VG_SCREEN_MD_REPORT_2BYTE_V2_VG                              VG_ScreenMdReport2byteV2VGroup;\
1187      =3    VG_SCREEN_MD_REPORT_3BYTE_V2_VG                              VG_ScreenMdReport3byteV2VGroup;\
1188      =3    VG_SCREEN_MD_REPORT_4BYTE_V2_VG                              VG_ScreenMdReport4byteV2VGroup;\
1189      =3    ZW_SCREEN_MD_REPORT_1BYTE_V2_FRAME                           ZW_ScreenMdReport1byteV2Frame;\
1190      =3    ZW_SCREEN_MD_REPORT_2BYTE_V2_FRAME                           ZW_ScreenMdReport2byteV2Frame;\
1191      =3    ZW_SCREEN_MD_REPORT_3BYTE_V2_FRAME                           ZW_ScreenMdReport3byteV2Frame;\
1192      =3    ZW_SCREEN_MD_REPORT_4BYTE_V2_FRAME                           ZW_ScreenMdReport4byteV2Frame;\
1193      =3  /* Command class Security Panel Mode */\
1194      =3    ZW_SECURITY_PANEL_MODE_GET_FRAME                             ZW_SecurityPanelModeGetFrame;\
1195      =3    ZW_SECURITY_PANEL_MODE_REPORT_FRAME                          ZW_SecurityPanelModeReportFrame;\
1196      =3    ZW_SECURITY_PANEL_MODE_SET_FRAME                             ZW_SecurityPanelModeSetFrame;\
1197      =3    ZW_SECURITY_PANEL_MODE_SUPPORTED_GET_FRAME                   ZW_SecurityPanelModeSupportedGetFrame;\
1198      =3    ZW_SECURITY_PANEL_MODE_SUPPORTED_REPORT_FRAME                ZW_SecurityPanelModeSupportedReportFrame;\
1199      =3  /* Command class Security Panel Zone Sensor */\
1200      =3    ZW_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT_FRAME         ZW_CommandClassSecurityPanelZoneSensorInsta
             -lledReportFrame;\
1201      =3    ZW_SECURITY_PANEL_ZONE_SENSOR_TYPE_GET_FRAME                 ZW_SecurityPanelZoneSensorTypeGetFrame;\
1202      =3    ZW_SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT_FRAME              ZW_SecurityPanelZoneSensorTypeReportFrame;\
1203      =3    ZW_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET_FRAME            ZW_SecurityPanelZoneSensorInstalledGetFrame
             -;\
1204      =3    ZW_SECURITY_PANEL_ZONE_SENSOR_STATE_GET_FRAME                ZW_SecurityPanelZoneSensorStateGetFrame;\
1205      =3    ZW_SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT_FRAME             ZW_SecurityPanelZoneSensorStateReportFrame;
             -\
1206      =3  /* Command class Security Panel Zone */\
1207      =3    ZW_SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET_FRAME            ZW_SecurityPanelZoneNumberSupportedGetFrame
             -;\
1208      =3    ZW_SECURITY_PANEL_ZONE_STATE_GET_FRAME                       ZW_SecurityPanelZoneStateGetFrame;\
1209      =3    ZW_SECURITY_PANEL_ZONE_STATE_REPORT_FRAME                    ZW_SecurityPanelZoneStateReportFrame;\
1210      =3    ZW_SECURITY_PANEL_ZONE_SUPPORTED_REPORT_FRAME                ZW_SecurityPanelZoneSupportedReportFrame;\
1211      =3    ZW_SECURITY_PANEL_ZONE_TYPE_GET_FRAME                        ZW_SecurityPanelZoneTypeGetFrame;\
1212      =3    ZW_SECURITY_PANEL_ZONE_TYPE_REPORT_FRAME                     ZW_SecurityPanelZoneTypeReportFrame;\
1213      =3  /* Command class Security */\
1214      =3    ZW_NETWORK_KEY_SET_1BYTE_FRAME                               ZW_NetworkKeySet1byteFrame;\
1215      =3    ZW_NETWORK_KEY_SET_2BYTE_FRAME                               ZW_NetworkKeySet2byteFrame;\
1216      =3    ZW_NETWORK_KEY_SET_3BYTE_FRAME                               ZW_NetworkKeySet3byteFrame;\
1217      =3    ZW_NETWORK_KEY_SET_4BYTE_FRAME                               ZW_NetworkKeySet4byteFrame;\
1218      =3    ZW_NETWORK_KEY_VERIFY_FRAME                                  ZW_NetworkKeyVerifyFrame;\
1219      =3    ZW_SECURITY_COMMANDS_SUPPORTED_GET_FRAME                     ZW_SecurityCommandsSupportedGetFrame;\
1220      =3    ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_1BYTE_FRAME            ZW_SecurityCommandsSupportedReport1byteFram
             -e;\
1221      =3    ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_2BYTE_FRAME            ZW_SecurityCommandsSupportedReport2byteFram
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 27  

             -e;\
1222      =3    ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_3BYTE_FRAME            ZW_SecurityCommandsSupportedReport3byteFram
             -e;\
1223      =3    ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_4BYTE_FRAME            ZW_SecurityCommandsSupportedReport4byteFram
             -e;\
1224      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_1BYTE_FRAME                ZW_SecurityMessageEncapsulation1byteFrame;\
1225      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_2BYTE_FRAME                ZW_SecurityMessageEncapsulation2byteFrame;\
1226      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_3BYTE_FRAME                ZW_SecurityMessageEncapsulation3byteFrame;\
1227      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_4BYTE_FRAME                ZW_SecurityMessageEncapsulation4byteFrame;\
1228      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_1BYTE_FRAME      ZW_SecurityMessageEncapsulationNonceGet1byt
             -eFrame;\
1229      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_2BYTE_FRAME      ZW_SecurityMessageEncapsulationNonceGet2byt
             -eFrame;\
1230      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_3BYTE_FRAME      ZW_SecurityMessageEncapsulationNonceGet3byt
             -eFrame;\
1231      =3    ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_4BYTE_FRAME      ZW_SecurityMessageEncapsulationNonceGet4byt
             -eFrame;\
1232      =3    ZW_SECURITY_NONCE_GET_FRAME                                  ZW_SecurityNonceGetFrame;\
1233      =3    ZW_SECURITY_NONCE_REPORT_FRAME                               ZW_SecurityNonceReportFrame;\
1234      =3    ZW_SECURITY_SCHEME_GET_FRAME                                 ZW_SecuritySchemeGetFrame;\
1235      =3    ZW_SECURITY_SCHEME_INHERIT_FRAME                             ZW_SecuritySchemeInheritFrame;\
1236      =3    ZW_SECURITY_SCHEME_REPORT_FRAME                              ZW_SecuritySchemeReportFrame;\
1237      =3  /* Command class Sensor Alarm */\
1238      =3  
1239      =3  #define ZW_FRAME_COLLECTION_MACRO3\
1240      =3    ZW_SENSOR_ALARM_GET_FRAME                                    ZW_SensorAlarmGetFrame;\
1241      =3    ZW_SENSOR_ALARM_REPORT_FRAME                                 ZW_SensorAlarmReportFrame;\
1242      =3    ZW_SENSOR_ALARM_SUPPORTED_GET_FRAME                          ZW_SensorAlarmSupportedGetFrame;\
1243      =3    ZW_SENSOR_ALARM_SUPPORTED_REPORT_1BYTE_FRAME                 ZW_SensorAlarmSupportedReport1byteFrame;\
1244      =3    ZW_SENSOR_ALARM_SUPPORTED_REPORT_2BYTE_FRAME                 ZW_SensorAlarmSupportedReport2byteFrame;\
1245      =3    ZW_SENSOR_ALARM_SUPPORTED_REPORT_3BYTE_FRAME                 ZW_SensorAlarmSupportedReport3byteFrame;\
1246      =3    ZW_SENSOR_ALARM_SUPPORTED_REPORT_4BYTE_FRAME                 ZW_SensorAlarmSupportedReport4byteFrame;\
1247      =3  /* Command class Sensor Binary */\
1248      =3    ZW_SENSOR_BINARY_GET_FRAME                                   ZW_SensorBinaryGetFrame;\
1249      =3    ZW_SENSOR_BINARY_REPORT_FRAME                                ZW_SensorBinaryReportFrame;\
1250      =3  /* Command class Sensor Binary V2 */\
1251      =3    ZW_SENSOR_BINARY_GET_V2_FRAME                                ZW_SensorBinaryGetV2Frame;\
1252      =3    ZW_SENSOR_BINARY_REPORT_V2_FRAME                             ZW_SensorBinaryReportV2Frame;\
1253      =3    ZW_SENSOR_BINARY_SUPPORTED_GET_SENSOR_V2_FRAME               ZW_SensorBinarySupportedGetSensorV2Frame;\
1254      =3    ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_1BYTE_V2_FRAME      ZW_SensorBinarySupportedSensorReport1byteV2
             -Frame;\
1255      =3    ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_2BYTE_V2_FRAME      ZW_SensorBinarySupportedSensorReport2byteV2
             -Frame;\
1256      =3    ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_3BYTE_V2_FRAME      ZW_SensorBinarySupportedSensorReport3byteV2
             -Frame;\
1257      =3    ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_4BYTE_V2_FRAME      ZW_SensorBinarySupportedSensorReport4byteV2
             -Frame;\
1258      =3  /* Command class Sensor Configuration */\
1259      =3    ZW_SENSOR_TRIGGER_LEVEL_GET_FRAME                            ZW_SensorTriggerLevelGetFrame;\
1260      =3    ZW_SENSOR_TRIGGER_LEVEL_REPORT_1BYTE_FRAME                   ZW_SensorTriggerLevelReport1byteFrame;\
1261      =3    ZW_SENSOR_TRIGGER_LEVEL_REPORT_2BYTE_FRAME                   ZW_SensorTriggerLevelReport2byteFrame;\
1262      =3    ZW_SENSOR_TRIGGER_LEVEL_REPORT_3BYTE_FRAME                   ZW_SensorTriggerLevelReport3byteFrame;\
1263      =3    ZW_SENSOR_TRIGGER_LEVEL_REPORT_4BYTE_FRAME                   ZW_SensorTriggerLevelReport4byteFrame;\
1264      =3    ZW_SENSOR_TRIGGER_LEVEL_SET_1BYTE_FRAME                      ZW_SensorTriggerLevelSet1byteFrame;\
1265      =3    ZW_SENSOR_TRIGGER_LEVEL_SET_2BYTE_FRAME                      ZW_SensorTriggerLevelSet2byteFrame;\
1266      =3    ZW_SENSOR_TRIGGER_LEVEL_SET_3BYTE_FRAME                      ZW_SensorTriggerLevelSet3byteFrame;\
1267      =3    ZW_SENSOR_TRIGGER_LEVEL_SET_4BYTE_FRAME                      ZW_SensorTriggerLevelSet4byteFrame;\
1268      =3  /* Command class Sensor Multilevel */\
1269      =3    ZW_SENSOR_MULTILEVEL_GET_FRAME                               ZW_SensorMultilevelGetFrame;\
1270      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_FRAME                      ZW_SensorMultilevelReport1byteFrame;\
1271      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_FRAME                      ZW_SensorMultilevelReport2byteFrame;\
1272      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_FRAME                      ZW_SensorMultilevelReport3byteFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 28  

1273      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_FRAME                      ZW_SensorMultilevelReport4byteFrame;\
1274      =3  /* Command class Sensor Multilevel V2 */\
1275      =3    ZW_SENSOR_MULTILEVEL_GET_V2_FRAME                            ZW_SensorMultilevelGetV2Frame;\
1276      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V2_FRAME                   ZW_SensorMultilevelReport1byteV2Frame;\
1277      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V2_FRAME                   ZW_SensorMultilevelReport2byteV2Frame;\
1278      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V2_FRAME                   ZW_SensorMultilevelReport3byteV2Frame;\
1279      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V2_FRAME                   ZW_SensorMultilevelReport4byteV2Frame;\
1280      =3  /* Command class Sensor Multilevel V3 */\
1281      =3    ZW_SENSOR_MULTILEVEL_GET_V3_FRAME                            ZW_SensorMultilevelGetV3Frame;\
1282      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V3_FRAME                   ZW_SensorMultilevelReport1byteV3Frame;\
1283      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V3_FRAME                   ZW_SensorMultilevelReport2byteV3Frame;\
1284      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V3_FRAME                   ZW_SensorMultilevelReport3byteV3Frame;\
1285      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V3_FRAME                   ZW_SensorMultilevelReport4byteV3Frame;\
1286      =3  /* Command class Sensor Multilevel V4 */\
1287      =3    ZW_SENSOR_MULTILEVEL_GET_V4_FRAME                            ZW_SensorMultilevelGetV4Frame;\
1288      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V4_FRAME                   ZW_SensorMultilevelReport1byteV4Frame;\
1289      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V4_FRAME                   ZW_SensorMultilevelReport2byteV4Frame;\
1290      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V4_FRAME                   ZW_SensorMultilevelReport3byteV4Frame;\
1291      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V4_FRAME                   ZW_SensorMultilevelReport4byteV4Frame;\
1292      =3  /* Command class Sensor Multilevel V5 */\
1293      =3    ZW_SENSOR_MULTILEVEL_GET_V5_FRAME                            ZW_SensorMultilevelGetV5Frame;\
1294      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V5_FRAME                   ZW_SensorMultilevelReport1byteV5Frame;\
1295      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V5_FRAME                   ZW_SensorMultilevelReport2byteV5Frame;\
1296      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V5_FRAME                   ZW_SensorMultilevelReport3byteV5Frame;\
1297      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V5_FRAME                   ZW_SensorMultilevelReport4byteV5Frame;\
1298      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V5_FRAME           ZW_SensorMultilevelSupportedGetSensorV5Fram
             -e;\
1299      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V5_FRAME  ZW_SensorMultilevelSupportedSensorReport1by
             -teV5Frame;\
1300      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V5_FRAME  ZW_SensorMultilevelSupportedSensorReport2by
             -teV5Frame;\
1301      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V5_FRAME  ZW_SensorMultilevelSupportedSensorReport3by
             -teV5Frame;\
1302      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V5_FRAME  ZW_SensorMultilevelSupportedSensorReport4by
             -teV5Frame;\
1303      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V5_FRAME            ZW_SensorMultilevelSupportedGetScaleV5Frame
             -;\
1304      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V5_FRAME         ZW_SensorMultilevelSupportedScaleReportV5Fr
             -ame;\
1305      =3  /* Command class Sensor Multilevel V6 */\
1306      =3    ZW_SENSOR_MULTILEVEL_GET_V6_FRAME                            ZW_SensorMultilevelGetV6Frame;\
1307      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V6_FRAME                   ZW_SensorMultilevelReport1byteV6Frame;\
1308      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V6_FRAME                   ZW_SensorMultilevelReport2byteV6Frame;\
1309      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V6_FRAME                   ZW_SensorMultilevelReport3byteV6Frame;\
1310      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V6_FRAME                   ZW_SensorMultilevelReport4byteV6Frame;\
1311      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V6_FRAME           ZW_SensorMultilevelSupportedGetSensorV6Fram
             -e;\
1312      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V6_FRAME  ZW_SensorMultilevelSupportedSensorReport1by
             -teV6Frame;\
1313      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V6_FRAME  ZW_SensorMultilevelSupportedSensorReport2by
             -teV6Frame;\
1314      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V6_FRAME  ZW_SensorMultilevelSupportedSensorReport3by
             -teV6Frame;\
1315      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V6_FRAME  ZW_SensorMultilevelSupportedSensorReport4by
             -teV6Frame;\
1316      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V6_FRAME            ZW_SensorMultilevelSupportedGetScaleV6Frame
             -;\
1317      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V6_FRAME         ZW_SensorMultilevelSupportedScaleReportV6Fr
             -ame;\
1318      =3  /* Command class Sensor Multilevel V7 */\
1319      =3    ZW_SENSOR_MULTILEVEL_GET_V7_FRAME                            ZW_SensorMultilevelGetV7Frame;\
1320      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V7_FRAME                   ZW_SensorMultilevelReport1byteV7Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 29  

1321      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V7_FRAME                   ZW_SensorMultilevelReport2byteV7Frame;\
1322      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V7_FRAME                   ZW_SensorMultilevelReport3byteV7Frame;\
1323      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V7_FRAME                   ZW_SensorMultilevelReport4byteV7Frame;\
1324      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V7_FRAME           ZW_SensorMultilevelSupportedGetSensorV7Fram
             -e;\
1325      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V7_FRAME  ZW_SensorMultilevelSupportedSensorReport1by
             -teV7Frame;\
1326      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V7_FRAME  ZW_SensorMultilevelSupportedSensorReport2by
             -teV7Frame;\
1327      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V7_FRAME  ZW_SensorMultilevelSupportedSensorReport3by
             -teV7Frame;\
1328      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V7_FRAME  ZW_SensorMultilevelSupportedSensorReport4by
             -teV7Frame;\
1329      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V7_FRAME            ZW_SensorMultilevelSupportedGetScaleV7Frame
             -;\
1330      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V7_FRAME         ZW_SensorMultilevelSupportedScaleReportV7Fr
             -ame;\
1331      =3  /* Command class Sensor Multilevel V8 */\
1332      =3    ZW_SENSOR_MULTILEVEL_GET_V8_FRAME                            ZW_SensorMultilevelGetV8Frame;\
1333      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V8_FRAME                   ZW_SensorMultilevelReport1byteV8Frame;\
1334      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V8_FRAME                   ZW_SensorMultilevelReport2byteV8Frame;\
1335      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V8_FRAME                   ZW_SensorMultilevelReport3byteV8Frame;\
1336      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V8_FRAME                   ZW_SensorMultilevelReport4byteV8Frame;\
1337      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V8_FRAME           ZW_SensorMultilevelSupportedGetSensorV8Fram
             -e;\
1338      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V8_FRAME  ZW_SensorMultilevelSupportedSensorReport1by
             -teV8Frame;\
1339      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V8_FRAME  ZW_SensorMultilevelSupportedSensorReport2by
             -teV8Frame;\
1340      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V8_FRAME  ZW_SensorMultilevelSupportedSensorReport3by
             -teV8Frame;\
1341      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V8_FRAME  ZW_SensorMultilevelSupportedSensorReport4by
             -teV8Frame;\
1342      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V8_FRAME            ZW_SensorMultilevelSupportedGetScaleV8Frame
             -;\
1343      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V8_FRAME         ZW_SensorMultilevelSupportedScaleReportV8Fr
             -ame;\
1344      =3  /* Command class Sensor Multilevel V9 */\
1345      =3    ZW_SENSOR_MULTILEVEL_GET_V9_FRAME                            ZW_SensorMultilevelGetV9Frame;\
1346      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V9_FRAME                   ZW_SensorMultilevelReport1byteV9Frame;\
1347      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V9_FRAME                   ZW_SensorMultilevelReport2byteV9Frame;\
1348      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V9_FRAME                   ZW_SensorMultilevelReport3byteV9Frame;\
1349      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V9_FRAME                   ZW_SensorMultilevelReport4byteV9Frame;\
1350      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V9_FRAME           ZW_SensorMultilevelSupportedGetSensorV9Fram
             -e;\
1351      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V9_FRAME  ZW_SensorMultilevelSupportedSensorReport1by
             -teV9Frame;\
1352      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V9_FRAME  ZW_SensorMultilevelSupportedSensorReport2by
             -teV9Frame;\
1353      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V9_FRAME  ZW_SensorMultilevelSupportedSensorReport3by
             -teV9Frame;\
1354      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V9_FRAME  ZW_SensorMultilevelSupportedSensorReport4by
             -teV9Frame;\
1355      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V9_FRAME            ZW_SensorMultilevelSupportedGetScaleV9Frame
             -;\
1356      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V9_FRAME         ZW_SensorMultilevelSupportedScaleReportV9Fr
             -ame;\
1357      =3  /* Command class Sensor Multilevel V10 */\
1358      =3    ZW_SENSOR_MULTILEVEL_GET_V10_FRAME                           ZW_SensorMultilevelGetV10Frame;\
1359      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V10_FRAME                  ZW_SensorMultilevelReport1byteV10Frame;\
1360      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V10_FRAME                  ZW_SensorMultilevelReport2byteV10Frame;\
1361      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V10_FRAME                  ZW_SensorMultilevelReport3byteV10Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 30  

1362      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V10_FRAME                  ZW_SensorMultilevelReport4byteV10Frame;\
1363      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V10_FRAME          ZW_SensorMultilevelSupportedGetSensorV10Fra
             -me;\
1364      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V10_FRAME ZW_SensorMultilevelSupportedSensorReport1by
             -teV10Frame;\
1365      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V10_FRAME ZW_SensorMultilevelSupportedSensorReport2by
             -teV10Frame;\
1366      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V10_FRAME ZW_SensorMultilevelSupportedSensorReport3by
             -teV10Frame;\
1367      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V10_FRAME ZW_SensorMultilevelSupportedSensorReport4by
             -teV10Frame;\
1368      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V10_FRAME           ZW_SensorMultilevelSupportedGetScaleV10Fram
             -e;\
1369      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V10_FRAME        ZW_SensorMultilevelSupportedScaleReportV10F
             -rame;\
1370      =3  /* Command class Sensor Multilevel V11 */\
1371      =3    ZW_SENSOR_MULTILEVEL_GET_V11_FRAME                           ZW_SensorMultilevelGetV11Frame;\
1372      =3    ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V11_FRAME                  ZW_SensorMultilevelReport1byteV11Frame;\
1373      =3    ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V11_FRAME                  ZW_SensorMultilevelReport2byteV11Frame;\
1374      =3    ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V11_FRAME                  ZW_SensorMultilevelReport3byteV11Frame;\
1375      =3    ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V11_FRAME                  ZW_SensorMultilevelReport4byteV11Frame;\
1376      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V11_FRAME          ZW_SensorMultilevelSupportedGetSensorV11Fra
             -me;\
1377      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V11_FRAME ZW_SensorMultilevelSupportedSensorReport1by
             -teV11Frame;\
1378      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V11_FRAME ZW_SensorMultilevelSupportedSensorReport2by
             -teV11Frame;\
1379      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V11_FRAME ZW_SensorMultilevelSupportedSensorReport3by
             -teV11Frame;\
1380      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V11_FRAME ZW_SensorMultilevelSupportedSensorReport4by
             -teV11Frame;\
1381      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V11_FRAME           ZW_SensorMultilevelSupportedGetScaleV11Fram
             -e;\
1382      =3    ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V11_FRAME        ZW_SensorMultilevelSupportedScaleReportV11F
             -rame;\
1383      =3  /* Command class Silence Alarm */\
1384      =3    ZW_SENSOR_ALARM_SET_1BYTE_FRAME                              ZW_SensorAlarmSet1byteFrame;\
1385      =3    ZW_SENSOR_ALARM_SET_2BYTE_FRAME                              ZW_SensorAlarmSet2byteFrame;\
1386      =3    ZW_SENSOR_ALARM_SET_3BYTE_FRAME                              ZW_SensorAlarmSet3byteFrame;\
1387      =3    ZW_SENSOR_ALARM_SET_4BYTE_FRAME                              ZW_SensorAlarmSet4byteFrame;\
1388      =3  /* Command class Simple Av Control */\
1389      =3    ZW_SIMPLE_AV_CONTROL_GET_FRAME                               ZW_SimpleAvControlGetFrame;\
1390      =3    ZW_SIMPLE_AV_CONTROL_REPORT_FRAME                            ZW_SimpleAvControlReportFrame;\
1391      =3    VG_SIMPLE_AV_CONTROL_SET_VG                                  VG_SimpleAvControlSetVGroup;\
1392      =3    ZW_SIMPLE_AV_CONTROL_SET_1BYTE_FRAME                         ZW_SimpleAvControlSet1byteFrame;\
1393      =3    ZW_SIMPLE_AV_CONTROL_SET_2BYTE_FRAME                         ZW_SimpleAvControlSet2byteFrame;\
1394      =3    ZW_SIMPLE_AV_CONTROL_SET_3BYTE_FRAME                         ZW_SimpleAvControlSet3byteFrame;\
1395      =3    ZW_SIMPLE_AV_CONTROL_SET_4BYTE_FRAME                         ZW_SimpleAvControlSet4byteFrame;\
1396      =3    ZW_SIMPLE_AV_CONTROL_SUPPORTED_GET_FRAME                     ZW_SimpleAvControlSupportedGetFrame;\
1397      =3    ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_1BYTE_FRAME            ZW_SimpleAvControlSupportedReport1byteFrame
             -;\
1398      =3    ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_2BYTE_FRAME            ZW_SimpleAvControlSupportedReport2byteFrame
             -;\
1399      =3    ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_3BYTE_FRAME            ZW_SimpleAvControlSupportedReport3byteFrame
             -;\
1400      =3    ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_4BYTE_FRAME            ZW_SimpleAvControlSupportedReport4byteFrame
             -;\
1401      =3  /* Command class Switch All */\
1402      =3    ZW_SWITCH_ALL_GET_FRAME                                      ZW_SwitchAllGetFrame;\
1403      =3    ZW_SWITCH_ALL_OFF_FRAME                                      ZW_SwitchAllOffFrame;\
1404      =3    ZW_SWITCH_ALL_ON_FRAME                                       ZW_SwitchAllOnFrame;\
1405      =3    ZW_SWITCH_ALL_REPORT_FRAME                                   ZW_SwitchAllReportFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 31  

1406      =3    ZW_SWITCH_ALL_SET_FRAME                                      ZW_SwitchAllSetFrame;\
1407      =3  /* Command class Switch Binary */\
1408      =3    ZW_SWITCH_BINARY_GET_FRAME                                   ZW_SwitchBinaryGetFrame;\
1409      =3    ZW_SWITCH_BINARY_REPORT_FRAME                                ZW_SwitchBinaryReportFrame;\
1410      =3    ZW_SWITCH_BINARY_SET_FRAME                                   ZW_SwitchBinarySetFrame;\
1411      =3  /* Command class Switch Binary V2 */\
1412      =3    ZW_SWITCH_BINARY_GET_V2_FRAME                                ZW_SwitchBinaryGetV2Frame;\
1413      =3    ZW_SWITCH_BINARY_REPORT_V2_FRAME                             ZW_SwitchBinaryReportV2Frame;\
1414      =3    ZW_SWITCH_BINARY_SET_V2_FRAME                                ZW_SwitchBinarySetV2Frame;\
1415      =3  /* Command class Switch Multilevel */\
1416      =3    ZW_SWITCH_MULTILEVEL_GET_FRAME                               ZW_SwitchMultilevelGetFrame;\
1417      =3    ZW_SWITCH_MULTILEVEL_REPORT_FRAME                            ZW_SwitchMultilevelReportFrame;\
1418      =3    ZW_SWITCH_MULTILEVEL_SET_FRAME                               ZW_SwitchMultilevelSetFrame;\
1419      =3    ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_FRAME                ZW_SwitchMultilevelStartLevelChangeFrame;\
1420      =3    ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_FRAME                 ZW_SwitchMultilevelStopLevelChangeFrame;\
1421      =3  /* Command class Switch Multilevel V2 */\
1422      =3    ZW_SWITCH_MULTILEVEL_GET_V2_FRAME                            ZW_SwitchMultilevelGetV2Frame;\
1423      =3    ZW_SWITCH_MULTILEVEL_REPORT_V2_FRAME                         ZW_SwitchMultilevelReportV2Frame;\
1424      =3    ZW_SWITCH_MULTILEVEL_SET_V2_FRAME                            ZW_SwitchMultilevelSetV2Frame;\
1425      =3    ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V2_FRAME             ZW_SwitchMultilevelStartLevelChangeV2Frame;
             -\
1426      =3    ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V2_FRAME              ZW_SwitchMultilevelStopLevelChangeV2Frame;\
1427      =3  /* Command class Switch Multilevel V3 */\
1428      =3    ZW_SWITCH_MULTILEVEL_GET_V3_FRAME                            ZW_SwitchMultilevelGetV3Frame;\
1429      =3    ZW_SWITCH_MULTILEVEL_REPORT_V3_FRAME                         ZW_SwitchMultilevelReportV3Frame;\
1430      =3    ZW_SWITCH_MULTILEVEL_SET_V3_FRAME                            ZW_SwitchMultilevelSetV3Frame;\
1431      =3    ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V3_FRAME             ZW_SwitchMultilevelStartLevelChangeV3Frame;
             -\
1432      =3    ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V3_FRAME              ZW_SwitchMultilevelStopLevelChangeV3Frame;\
1433      =3    ZW_SWITCH_MULTILEVEL_SUPPORTED_GET_V3_FRAME                  ZW_SwitchMultilevelSupportedGetV3Frame;\
1434      =3    ZW_SWITCH_MULTILEVEL_SUPPORTED_REPORT_V3_FRAME               ZW_SwitchMultilevelSupportedReportV3Frame;\
1435      =3  /* Command class Switch Multilevel V4 */\
1436      =3    ZW_SWITCH_MULTILEVEL_GET_V4_FRAME                            ZW_SwitchMultilevelGetV4Frame;\
1437      =3    ZW_SWITCH_MULTILEVEL_REPORT_V4_FRAME                         ZW_SwitchMultilevelReportV4Frame;\
1438      =3    ZW_SWITCH_MULTILEVEL_SET_V4_FRAME                            ZW_SwitchMultilevelSetV4Frame;\
1439      =3    ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V4_FRAME             ZW_SwitchMultilevelStartLevelChangeV4Frame;
             -\
1440      =3    ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V4_FRAME              ZW_SwitchMultilevelStopLevelChangeV4Frame;\
1441      =3    ZW_SWITCH_MULTILEVEL_SUPPORTED_GET_V4_FRAME                  ZW_SwitchMultilevelSupportedGetV4Frame;\
1442      =3    ZW_SWITCH_MULTILEVEL_SUPPORTED_REPORT_V4_FRAME               ZW_SwitchMultilevelSupportedReportV4Frame;\
1443      =3  /* Command class Switch Toggle Binary */\
1444      =3    ZW_SWITCH_TOGGLE_BINARY_SET_FRAME                            ZW_SwitchToggleBinarySetFrame;\
1445      =3    ZW_SWITCH_TOGGLE_BINARY_GET_FRAME                            ZW_SwitchToggleBinaryGetFrame;\
1446      =3    ZW_SWITCH_TOGGLE_BINARY_REPORT_FRAME                         ZW_SwitchToggleBinaryReportFrame;\
1447      =3  /* Command class Switch Toggle Multilevel */\
1448      =3    ZW_SWITCH_TOGGLE_MULTILEVEL_SET_FRAME                        ZW_SwitchToggleMultilevelSetFrame;\
1449      =3    ZW_SWITCH_TOGGLE_MULTILEVEL_GET_FRAME                        ZW_SwitchToggleMultilevelGetFrame;\
1450      =3    ZW_SWITCH_TOGGLE_MULTILEVEL_REPORT_FRAME                     ZW_SwitchToggleMultilevelReportFrame;\
1451      =3    ZW_SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE_FRAME         ZW_SwitchToggleMultilevelStartLevelChangeFr
             -ame;\
1452      =3    ZW_SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE_FRAME          ZW_SwitchToggleMultilevelStopLevelChangeFra
             -me;\
1453      =3  /* Command class Tariff Config */\
1454      =3    ZW_TARIFF_TBL_REMOVE_1BYTE_FRAME                             ZW_TariffTblRemove1byteFrame;\
1455      =3    ZW_TARIFF_TBL_REMOVE_2BYTE_FRAME                             ZW_TariffTblRemove2byteFrame;\
1456      =3    ZW_TARIFF_TBL_REMOVE_3BYTE_FRAME                             ZW_TariffTblRemove3byteFrame;\
1457      =3    ZW_TARIFF_TBL_REMOVE_4BYTE_FRAME                             ZW_TariffTblRemove4byteFrame;\
1458      =3    ZW_TARIFF_TBL_SET_FRAME                                      ZW_TariffTblSetFrame;\
1459      =3    ZW_TARIFF_TBL_SUPPLIER_SET_1BYTE_FRAME                       ZW_TariffTblSupplierSet1byteFrame;\
1460      =3    ZW_TARIFF_TBL_SUPPLIER_SET_2BYTE_FRAME                       ZW_TariffTblSupplierSet2byteFrame;\
1461      =3    ZW_TARIFF_TBL_SUPPLIER_SET_3BYTE_FRAME                       ZW_TariffTblSupplierSet3byteFrame;\
1462      =3    ZW_TARIFF_TBL_SUPPLIER_SET_4BYTE_FRAME                       ZW_TariffTblSupplierSet4byteFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 32  

1463      =3  /* Command class Tariff Tbl Monitor */\
1464      =3    ZW_TARIFF_TBL_COST_GET_FRAME                                 ZW_TariffTblCostGetFrame;\
1465      =3    ZW_TARIFF_TBL_COST_REPORT_FRAME                              ZW_TariffTblCostReportFrame;\
1466      =3    ZW_TARIFF_TBL_GET_FRAME                                      ZW_TariffTblGetFrame;\
1467      =3    ZW_TARIFF_TBL_REPORT_FRAME                                   ZW_TariffTblReportFrame;\
1468      =3    ZW_TARIFF_TBL_SUPPLIER_GET_FRAME                             ZW_TariffTblSupplierGetFrame;\
1469      =3    ZW_TARIFF_TBL_SUPPLIER_REPORT_1BYTE_FRAME                    ZW_TariffTblSupplierReport1byteFrame;\
1470      =3    ZW_TARIFF_TBL_SUPPLIER_REPORT_2BYTE_FRAME                    ZW_TariffTblSupplierReport2byteFrame;\
1471      =3    ZW_TARIFF_TBL_SUPPLIER_REPORT_3BYTE_FRAME                    ZW_TariffTblSupplierReport3byteFrame;\
1472      =3    ZW_TARIFF_TBL_SUPPLIER_REPORT_4BYTE_FRAME                    ZW_TariffTblSupplierReport4byteFrame;\
1473      =3  /* Command class Thermostat Fan Mode */\
1474      =3    ZW_THERMOSTAT_FAN_MODE_GET_FRAME                             ZW_ThermostatFanModeGetFrame;\
1475      =3    ZW_THERMOSTAT_FAN_MODE_REPORT_FRAME                          ZW_ThermostatFanModeReportFrame;\
1476      =3    ZW_THERMOSTAT_FAN_MODE_SET_FRAME                             ZW_ThermostatFanModeSetFrame;\
1477      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_FRAME                   ZW_ThermostatFanModeSupportedGetFrame;\
1478      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_FRAME          ZW_ThermostatFanModeSupportedReport1byteFra
             -me;\
1479      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_FRAME          ZW_ThermostatFanModeSupportedReport2byteFra
             -me;\
1480      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_FRAME          ZW_ThermostatFanModeSupportedReport3byteFra
             -me;\
1481      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_FRAME          ZW_ThermostatFanModeSupportedReport4byteFra
             -me;\
1482      =3  /* Command class Thermostat Fan Mode V2 */\
1483      =3    ZW_THERMOSTAT_FAN_MODE_GET_V2_FRAME                          ZW_ThermostatFanModeGetV2Frame;\
1484      =3    ZW_THERMOSTAT_FAN_MODE_REPORT_V2_FRAME                       ZW_ThermostatFanModeReportV2Frame;\
1485      =3    ZW_THERMOSTAT_FAN_MODE_SET_V2_FRAME                          ZW_ThermostatFanModeSetV2Frame;\
1486      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V2_FRAME                ZW_ThermostatFanModeSupportedGetV2Frame;\
1487      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V2_FRAME       ZW_ThermostatFanModeSupportedReport1byteV2F
             -rame;\
1488      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V2_FRAME       ZW_ThermostatFanModeSupportedReport2byteV2F
             -rame;\
1489      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V2_FRAME       ZW_ThermostatFanModeSupportedReport3byteV2F
             -rame;\
1490      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V2_FRAME       ZW_ThermostatFanModeSupportedReport4byteV2F
             -rame;\
1491      =3  /* Command class Thermostat Fan Mode V3 */\
1492      =3    ZW_THERMOSTAT_FAN_MODE_GET_V3_FRAME                          ZW_ThermostatFanModeGetV3Frame;\
1493      =3    ZW_THERMOSTAT_FAN_MODE_REPORT_V3_FRAME                       ZW_ThermostatFanModeReportV3Frame;\
1494      =3    ZW_THERMOSTAT_FAN_MODE_SET_V3_FRAME                          ZW_ThermostatFanModeSetV3Frame;\
1495      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V3_FRAME                ZW_ThermostatFanModeSupportedGetV3Frame;\
1496      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V3_FRAME       ZW_ThermostatFanModeSupportedReport1byteV3F
             -rame;\
1497      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V3_FRAME       ZW_ThermostatFanModeSupportedReport2byteV3F
             -rame;\
1498      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V3_FRAME       ZW_ThermostatFanModeSupportedReport3byteV3F
             -rame;\
1499      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V3_FRAME       ZW_ThermostatFanModeSupportedReport4byteV3F
             -rame;\
1500      =3  /* Command class Thermostat Fan Mode V4 */\
1501      =3    ZW_THERMOSTAT_FAN_MODE_GET_V4_FRAME                          ZW_ThermostatFanModeGetV4Frame;\
1502      =3    ZW_THERMOSTAT_FAN_MODE_REPORT_V4_FRAME                       ZW_ThermostatFanModeReportV4Frame;\
1503      =3    ZW_THERMOSTAT_FAN_MODE_SET_V4_FRAME                          ZW_ThermostatFanModeSetV4Frame;\
1504      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V4_FRAME                ZW_ThermostatFanModeSupportedGetV4Frame;\
1505      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V4_FRAME       ZW_ThermostatFanModeSupportedReport1byteV4F
             -rame;\
1506      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V4_FRAME       ZW_ThermostatFanModeSupportedReport2byteV4F
             -rame;\
1507      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V4_FRAME       ZW_ThermostatFanModeSupportedReport3byteV4F
             -rame;\
1508      =3    ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V4_FRAME       ZW_ThermostatFanModeSupportedReport4byteV4F
             -rame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 33  

1509      =3  /* Command class Thermostat Fan State */\
1510      =3    ZW_THERMOSTAT_FAN_STATE_GET_FRAME                            ZW_ThermostatFanStateGetFrame;\
1511      =3    ZW_THERMOSTAT_FAN_STATE_REPORT_FRAME                         ZW_ThermostatFanStateReportFrame;\
1512      =3  /* Command class Thermostat Fan State V2 */\
1513      =3    ZW_THERMOSTAT_FAN_STATE_GET_V2_FRAME                         ZW_ThermostatFanStateGetV2Frame;\
1514      =3    ZW_THERMOSTAT_FAN_STATE_REPORT_V2_FRAME                      ZW_ThermostatFanStateReportV2Frame;\
1515      =3  /* Command class Thermostat Heating */\
1516      =3    ZW_THERMOSTAT_HEATING_STATUS_REPORT_FRAME                    ZW_ThermostatHeatingStatusReportFrame;\
1517      =3    ZW_THERMOSTAT_HEATING_MODE_GET_FRAME                         ZW_ThermostatHeatingModeGetFrame;\
1518      =3    ZW_THERMOSTAT_HEATING_MODE_REPORT_FRAME                      ZW_ThermostatHeatingModeReportFrame;\
1519      =3    ZW_THERMOSTAT_HEATING_MODE_SET_FRAME                         ZW_ThermostatHeatingModeSetFrame;\
1520      =3    ZW_THERMOSTAT_HEATING_RELAY_STATUS_GET_FRAME                 ZW_ThermostatHeatingRelayStatusGetFrame;\
1521      =3    ZW_THERMOSTAT_HEATING_RELAY_STATUS_REPORT_FRAME              ZW_ThermostatHeatingRelayStatusReportFrame;
             -\
1522      =3    ZW_THERMOSTAT_HEATING_SETPOINT_GET_FRAME                     ZW_ThermostatHeatingSetpointGetFrame;\
1523      =3    ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_1BYTE_FRAME            ZW_ThermostatHeatingSetpointReport1byteFram
             -e;\
1524      =3    ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_2BYTE_FRAME            ZW_ThermostatHeatingSetpointReport2byteFram
             -e;\
1525      =3    ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_3BYTE_FRAME            ZW_ThermostatHeatingSetpointReport3byteFram
             -e;\
1526      =3    ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_4BYTE_FRAME            ZW_ThermostatHeatingSetpointReport4byteFram
             -e;\
1527      =3    ZW_THERMOSTAT_HEATING_SETPOINT_SET_1BYTE_FRAME               ZW_ThermostatHeatingSetpointSet1byteFrame;\
1528      =3    ZW_THERMOSTAT_HEATING_SETPOINT_SET_2BYTE_FRAME               ZW_ThermostatHeatingSetpointSet2byteFrame;\
1529      =3    ZW_THERMOSTAT_HEATING_SETPOINT_SET_3BYTE_FRAME               ZW_ThermostatHeatingSetpointSet3byteFrame;\
1530      =3    ZW_THERMOSTAT_HEATING_SETPOINT_SET_4BYTE_FRAME               ZW_ThermostatHeatingSetpointSet4byteFrame;\
1531      =3    ZW_THERMOSTAT_HEATING_STATUS_GET_FRAME                       ZW_ThermostatHeatingStatusGetFrame;\
1532      =3    ZW_THERMOSTAT_HEATING_STATUS_SET_FRAME                       ZW_ThermostatHeatingStatusSetFrame;\
1533      =3    ZW_THERMOSTAT_HEATING_TIMED_OFF_SET_FRAME                    ZW_ThermostatHeatingTimedOffSetFrame;\
1534      =3  /* Command class Thermostat Mode */\
1535      =3    ZW_THERMOSTAT_MODE_GET_FRAME                                 ZW_ThermostatModeGetFrame;\
1536      =3    ZW_THERMOSTAT_MODE_REPORT_FRAME                              ZW_ThermostatModeReportFrame;\
1537      =3    ZW_THERMOSTAT_MODE_SET_FRAME                                 ZW_ThermostatModeSetFrame;\
1538      =3    ZW_THERMOSTAT_MODE_SUPPORTED_GET_FRAME                       ZW_ThermostatModeSupportedGetFrame;\
1539      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_FRAME              ZW_ThermostatModeSupportedReport1byteFrame;
             -\
1540      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_FRAME              ZW_ThermostatModeSupportedReport2byteFrame;
             -\
1541      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_FRAME              ZW_ThermostatModeSupportedReport3byteFrame;
             -\
1542      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_FRAME              ZW_ThermostatModeSupportedReport4byteFrame;
             -\
1543      =3  /* Command class Thermostat Mode V2 */\
1544      =3    ZW_THERMOSTAT_MODE_GET_V2_FRAME                              ZW_ThermostatModeGetV2Frame;\
1545      =3    ZW_THERMOSTAT_MODE_REPORT_V2_FRAME                           ZW_ThermostatModeReportV2Frame;\
1546      =3    ZW_THERMOSTAT_MODE_SET_V2_FRAME                              ZW_ThermostatModeSetV2Frame;\
1547      =3    ZW_THERMOSTAT_MODE_SUPPORTED_GET_V2_FRAME                    ZW_ThermostatModeSupportedGetV2Frame;\
1548      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_V2_FRAME           ZW_ThermostatModeSupportedReport1byteV2Fram
             -e;\
1549      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_V2_FRAME           ZW_ThermostatModeSupportedReport2byteV2Fram
             -e;\
1550      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_V2_FRAME           ZW_ThermostatModeSupportedReport3byteV2Fram
             -e;\
1551      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_V2_FRAME           ZW_ThermostatModeSupportedReport4byteV2Fram
             -e;\
1552      =3  /* Command class Thermostat Mode V3 */\
1553      =3    ZW_THERMOSTAT_MODE_GET_V3_FRAME                              ZW_ThermostatModeGetV3Frame;\
1554      =3    ZW_THERMOSTAT_MODE_REPORT_1BYTE_V3_FRAME                     ZW_ThermostatModeReport1byteV3Frame;\
1555      =3    ZW_THERMOSTAT_MODE_REPORT_2BYTE_V3_FRAME                     ZW_ThermostatModeReport2byteV3Frame;\
1556      =3    ZW_THERMOSTAT_MODE_REPORT_3BYTE_V3_FRAME                     ZW_ThermostatModeReport3byteV3Frame;\
1557      =3    ZW_THERMOSTAT_MODE_REPORT_4BYTE_V3_FRAME                     ZW_ThermostatModeReport4byteV3Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 34  

1558      =3    ZW_THERMOSTAT_MODE_SET_1BYTE_V3_FRAME                        ZW_ThermostatModeSet1byteV3Frame;\
1559      =3    ZW_THERMOSTAT_MODE_SET_2BYTE_V3_FRAME                        ZW_ThermostatModeSet2byteV3Frame;\
1560      =3    ZW_THERMOSTAT_MODE_SET_3BYTE_V3_FRAME                        ZW_ThermostatModeSet3byteV3Frame;\
1561      =3    ZW_THERMOSTAT_MODE_SET_4BYTE_V3_FRAME                        ZW_ThermostatModeSet4byteV3Frame;\
1562      =3    ZW_THERMOSTAT_MODE_SUPPORTED_GET_V3_FRAME                    ZW_ThermostatModeSupportedGetV3Frame;\
1563      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_V3_FRAME           ZW_ThermostatModeSupportedReport1byteV3Fram
             -e;\
1564      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_V3_FRAME           ZW_ThermostatModeSupportedReport2byteV3Fram
             -e;\
1565      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_V3_FRAME           ZW_ThermostatModeSupportedReport3byteV3Fram
             -e;\
1566      =3    ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_V3_FRAME           ZW_ThermostatModeSupportedReport4byteV3Fram
             -e;\
1567      =3  /* Command class Thermostat Operating State */\
1568      =3    ZW_THERMOSTAT_OPERATING_STATE_GET_FRAME                      ZW_ThermostatOperatingStateGetFrame;\
1569      =3    ZW_THERMOSTAT_OPERATING_STATE_REPORT_FRAME                   ZW_ThermostatOperatingStateReportFrame;\
1570      =3  /* Command class Thermostat Operating State V2 */\
1571      =3    ZW_THERMOSTAT_OPERATING_STATE_GET_V2_FRAME                   ZW_ThermostatOperatingStateGetV2Frame;\
1572      =3    ZW_THERMOSTAT_OPERATING_STATE_REPORT_V2_FRAME                ZW_ThermostatOperatingStateReportV2Frame;\
1573      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET_V2_FRAME ZW_ThermostatOperatingStateLoggingSupported
             -GetV2Frame;\
1574      =3    ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_1BYTE_V2_FRAME ZW_ThermostatOperatingLoggingSupportedRe
             -port1byteV2Frame;\
1575      =3    ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_2BYTE_V2_FRAME ZW_ThermostatOperatingLoggingSupportedRe
             -port2byteV2Frame;\
1576      =3    ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_3BYTE_V2_FRAME ZW_ThermostatOperatingLoggingSupportedRe
             -port3byteV2Frame;\
1577      =3    ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_4BYTE_V2_FRAME ZW_ThermostatOperatingLoggingSupportedRe
             -port4byteV2Frame;\
1578      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_1BYTE_V2_FRAME     ZW_ThermostatOperatingStateLoggingGet1byteV
             -2Frame;\
1579      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_2BYTE_V2_FRAME     ZW_ThermostatOperatingStateLoggingGet2byteV
             -2Frame;\
1580      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_3BYTE_V2_FRAME     ZW_ThermostatOperatingStateLoggingGet3byteV
             -2Frame;\
1581      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_4BYTE_V2_FRAME     ZW_ThermostatOperatingStateLoggingGet4byteV
             -2Frame;\
1582      =3    VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG           VG_ThermostatOperatingStateLoggingReportV2V
             -Group;\
1583      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_1BYTE_V2_FRAME  ZW_ThermostatOperatingStateLoggingReport1by
             -teV2Frame;\
1584      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_2BYTE_V2_FRAME  ZW_ThermostatOperatingStateLoggingReport2by
             -teV2Frame;\
1585      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_3BYTE_V2_FRAME  ZW_ThermostatOperatingStateLoggingReport3by
             -teV2Frame;\
1586      =3    ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_4BYTE_V2_FRAME  ZW_ThermostatOperatingStateLoggingReport4by
             -teV2Frame;\
1587      =3  /* Command class Thermostat Setback */\
1588      =3    ZW_THERMOSTAT_SETBACK_GET_FRAME                              ZW_ThermostatSetbackGetFrame;\
1589      =3    ZW_THERMOSTAT_SETBACK_REPORT_FRAME                           ZW_ThermostatSetbackReportFrame;\
1590      =3    ZW_THERMOSTAT_SETBACK_SET_FRAME                              ZW_ThermostatSetbackSetFrame;\
1591      =3  /* Command class Thermostat Setpoint */\
1592      =3    ZW_THERMOSTAT_SETPOINT_GET_FRAME                             ZW_ThermostatSetpointGetFrame;\
1593      =3    ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_FRAME                    ZW_ThermostatSetpointReport1byteFrame;\
1594      =3    ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_FRAME                    ZW_ThermostatSetpointReport2byteFrame;\
1595      =3    ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_FRAME                    ZW_ThermostatSetpointReport3byteFrame;\
1596      =3    ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_FRAME                    ZW_ThermostatSetpointReport4byteFrame;\
1597      =3    ZW_THERMOSTAT_SETPOINT_SET_1BYTE_FRAME                       ZW_ThermostatSetpointSet1byteFrame;\
1598      =3    ZW_THERMOSTAT_SETPOINT_SET_2BYTE_FRAME                       ZW_ThermostatSetpointSet2byteFrame;\
1599      =3    ZW_THERMOSTAT_SETPOINT_SET_3BYTE_FRAME                       ZW_ThermostatSetpointSet3byteFrame;\
1600      =3    ZW_THERMOSTAT_SETPOINT_SET_4BYTE_FRAME                       ZW_ThermostatSetpointSet4byteFrame;\
1601      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_FRAME                   ZW_ThermostatSetpointSupportedGetFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 35  

1602      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_FRAME          ZW_ThermostatSetpointSupportedReport1byteFr
             -ame;\
1603      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_FRAME          ZW_ThermostatSetpointSupportedReport2byteFr
             -ame;\
1604      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_FRAME          ZW_ThermostatSetpointSupportedReport3byteFr
             -ame;\
1605      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_FRAME          ZW_ThermostatSetpointSupportedReport4byteFr
             -ame;\
1606      =3  /* Command class Thermostat Setpoint V2 */\
1607      =3    ZW_THERMOSTAT_SETPOINT_GET_V2_FRAME                          ZW_ThermostatSetpointGetV2Frame;\
1608      =3    ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_V2_FRAME                 ZW_ThermostatSetpointReport1byteV2Frame;\
1609      =3    ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_V2_FRAME                 ZW_ThermostatSetpointReport2byteV2Frame;\
1610      =3    ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_V2_FRAME                 ZW_ThermostatSetpointReport3byteV2Frame;\
1611      =3    ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_V2_FRAME                 ZW_ThermostatSetpointReport4byteV2Frame;\
1612      =3    ZW_THERMOSTAT_SETPOINT_SET_1BYTE_V2_FRAME                    ZW_ThermostatSetpointSet1byteV2Frame;\
1613      =3    ZW_THERMOSTAT_SETPOINT_SET_2BYTE_V2_FRAME                    ZW_ThermostatSetpointSet2byteV2Frame;\
1614      =3    ZW_THERMOSTAT_SETPOINT_SET_3BYTE_V2_FRAME                    ZW_ThermostatSetpointSet3byteV2Frame;\
1615      =3    ZW_THERMOSTAT_SETPOINT_SET_4BYTE_V2_FRAME                    ZW_ThermostatSetpointSet4byteV2Frame;\
1616      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_V2_FRAME                ZW_ThermostatSetpointSupportedGetV2Frame;\
1617      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_V2_FRAME       ZW_ThermostatSetpointSupportedReport1byteV2
             -Frame;\
1618      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_V2_FRAME       ZW_ThermostatSetpointSupportedReport2byteV2
             -Frame;\
1619      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_V2_FRAME       ZW_ThermostatSetpointSupportedReport3byteV2
             -Frame;\
1620      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_V2_FRAME       ZW_ThermostatSetpointSupportedReport4byteV2
             -Frame;\
1621      =3  /* Command class Thermostat Setpoint V3 */\
1622      =3    ZW_THERMOSTAT_SETPOINT_GET_V3_FRAME                          ZW_ThermostatSetpointGetV3Frame;\
1623      =3    ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_V3_FRAME                 ZW_ThermostatSetpointReport1byteV3Frame;\
1624      =3    ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_V3_FRAME                 ZW_ThermostatSetpointReport2byteV3Frame;\
1625      =3    ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_V3_FRAME                 ZW_ThermostatSetpointReport3byteV3Frame;\
1626      =3    ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_V3_FRAME                 ZW_ThermostatSetpointReport4byteV3Frame;\
1627      =3    ZW_THERMOSTAT_SETPOINT_SET_1BYTE_V3_FRAME                    ZW_ThermostatSetpointSet1byteV3Frame;\
1628      =3    ZW_THERMOSTAT_SETPOINT_SET_2BYTE_V3_FRAME                    ZW_ThermostatSetpointSet2byteV3Frame;\
1629      =3    ZW_THERMOSTAT_SETPOINT_SET_3BYTE_V3_FRAME                    ZW_ThermostatSetpointSet3byteV3Frame;\
1630      =3    ZW_THERMOSTAT_SETPOINT_SET_4BYTE_V3_FRAME                    ZW_ThermostatSetpointSet4byteV3Frame;\
1631      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_V3_FRAME                ZW_ThermostatSetpointSupportedGetV3Frame;\
1632      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_V3_FRAME       ZW_ThermostatSetpointSupportedReport1byteV3
             -Frame;\
1633      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_V3_FRAME       ZW_ThermostatSetpointSupportedReport2byteV3
             -Frame;\
1634      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_V3_FRAME       ZW_ThermostatSetpointSupportedReport3byteV3
             -Frame;\
1635      =3    ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_V3_FRAME       ZW_ThermostatSetpointSupportedReport4byteV3
             -Frame;\
1636      =3    ZW_THERMOSTAT_SETPOINT_CAPABILITIES_GET_V3_FRAME             ZW_ThermostatSetpointCapabilitiesGetV3Frame
             -;\
1637      =3    ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_1BYTE_V3_FRAME    ZW_ThermostatSetpointCapabilitiesReport1byt
             -eV3Frame;\
1638      =3    ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_2BYTE_V3_FRAME    ZW_ThermostatSetpointCapabilitiesReport2byt
             -eV3Frame;\
1639      =3    ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_3BYTE_V3_FRAME    ZW_ThermostatSetpointCapabilitiesReport3byt
             -eV3Frame;\
1640      =3  
1641      =3  #define ZW_FRAME_COLLECTION_MACRO4\
1642      =3    ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_4BYTE_V3_FRAME    ZW_ThermostatSetpointCapabilitiesReport4byt
             -eV3Frame;\
1643      =3  /* Command class Time Parameters */\
1644      =3    ZW_TIME_PARAMETERS_GET_FRAME                                 ZW_TimeParametersGetFrame;\
1645      =3    ZW_TIME_PARAMETERS_REPORT_FRAME                              ZW_TimeParametersReportFrame;\
1646      =3    ZW_TIME_PARAMETERS_SET_FRAME                                 ZW_TimeParametersSetFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 36  

1647      =3  /* Command class Time */\
1648      =3    ZW_DATE_GET_FRAME                                            ZW_DateGetFrame;\
1649      =3    ZW_DATE_REPORT_FRAME                                         ZW_DateReportFrame;\
1650      =3    ZW_TIME_GET_FRAME                                            ZW_TimeGetFrame;\
1651      =3    ZW_TIME_REPORT_FRAME                                         ZW_TimeReportFrame;\
1652      =3  /* Command class Time V2 */\
1653      =3    ZW_DATE_GET_V2_FRAME                                         ZW_DateGetV2Frame;\
1654      =3    ZW_DATE_REPORT_V2_FRAME                                      ZW_DateReportV2Frame;\
1655      =3    ZW_TIME_GET_V2_FRAME                                         ZW_TimeGetV2Frame;\
1656      =3    ZW_TIME_OFFSET_GET_V2_FRAME                                  ZW_TimeOffsetGetV2Frame;\
1657      =3    ZW_TIME_OFFSET_REPORT_V2_FRAME                               ZW_TimeOffsetReportV2Frame;\
1658      =3    ZW_TIME_OFFSET_SET_V2_FRAME                                  ZW_TimeOffsetSetV2Frame;\
1659      =3    ZW_TIME_REPORT_V2_FRAME                                      ZW_TimeReportV2Frame;\
1660      =3  /* Command class Transport Service V2 */\
1661      =3    ZW_COMMAND_FIRST_SEGMENT_1BYTE_V2_FRAME                      ZW_CommandFirstSegment1byteV2Frame;\
1662      =3    ZW_COMMAND_FIRST_SEGMENT_2BYTE_V2_FRAME                      ZW_CommandFirstSegment2byteV2Frame;\
1663      =3    ZW_COMMAND_FIRST_SEGMENT_3BYTE_V2_FRAME                      ZW_CommandFirstSegment3byteV2Frame;\
1664      =3    ZW_COMMAND_FIRST_SEGMENT_4BYTE_V2_FRAME                      ZW_CommandFirstSegment4byteV2Frame;\
1665      =3    ZW_COMMAND_SEGMENT_COMPLETE_V2_FRAME                         ZW_CommandSegmentCompleteV2Frame;\
1666      =3    ZW_COMMAND_SEGMENT_REQUEST_V2_FRAME                          ZW_CommandSegmentRequestV2Frame;\
1667      =3    ZW_COMMAND_SEGMENT_WAIT_V2_FRAME                             ZW_CommandSegmentWaitV2Frame;\
1668      =3    ZW_COMMAND_SUBSEQUENT_SEGMENT_1BYTE_V2_FRAME                 ZW_CommandSubsequentSegment1byteV2Frame;\
1669      =3    ZW_COMMAND_SUBSEQUENT_SEGMENT_2BYTE_V2_FRAME                 ZW_CommandSubsequentSegment2byteV2Frame;\
1670      =3    ZW_COMMAND_SUBSEQUENT_SEGMENT_3BYTE_V2_FRAME                 ZW_CommandSubsequentSegment3byteV2Frame;\
1671      =3    ZW_COMMAND_SUBSEQUENT_SEGMENT_4BYTE_V2_FRAME                 ZW_CommandSubsequentSegment4byteV2Frame;\
1672      =3  /* Command class Transport Service */\
1673      =3    ZW_COMMAND_FIRST_FRAGMENT_1BYTE_FRAME                        ZW_CommandFirstFragment1byteFrame;\
1674      =3    ZW_COMMAND_FIRST_FRAGMENT_2BYTE_FRAME                        ZW_CommandFirstFragment2byteFrame;\
1675      =3    ZW_COMMAND_FIRST_FRAGMENT_3BYTE_FRAME                        ZW_CommandFirstFragment3byteFrame;\
1676      =3    ZW_COMMAND_FIRST_FRAGMENT_4BYTE_FRAME                        ZW_CommandFirstFragment4byteFrame;\
1677      =3    ZW_COMMAND_SUBSEQUENT_FRAGMENT_1BYTE_FRAME                   ZW_CommandSubsequentFragment1byteFrame;\
1678      =3    ZW_COMMAND_SUBSEQUENT_FRAGMENT_2BYTE_FRAME                   ZW_CommandSubsequentFragment2byteFrame;\
1679      =3    ZW_COMMAND_SUBSEQUENT_FRAGMENT_3BYTE_FRAME                   ZW_CommandSubsequentFragment3byteFrame;\
1680      =3    ZW_COMMAND_SUBSEQUENT_FRAGMENT_4BYTE_FRAME                   ZW_CommandSubsequentFragment4byteFrame;\
1681      =3  /* Command class User Code */\
1682      =3    ZW_USER_CODE_GET_FRAME                                       ZW_UserCodeGetFrame;\
1683      =3    ZW_USER_CODE_REPORT_1BYTE_FRAME                              ZW_UserCodeReport1byteFrame;\
1684      =3    ZW_USER_CODE_REPORT_2BYTE_FRAME                              ZW_UserCodeReport2byteFrame;\
1685      =3    ZW_USER_CODE_REPORT_3BYTE_FRAME                              ZW_UserCodeReport3byteFrame;\
1686      =3    ZW_USER_CODE_REPORT_4BYTE_FRAME                              ZW_UserCodeReport4byteFrame;\
1687      =3    ZW_USER_CODE_SET_1BYTE_FRAME                                 ZW_UserCodeSet1byteFrame;\
1688      =3    ZW_USER_CODE_SET_2BYTE_FRAME                                 ZW_UserCodeSet2byteFrame;\
1689      =3    ZW_USER_CODE_SET_3BYTE_FRAME                                 ZW_UserCodeSet3byteFrame;\
1690      =3    ZW_USER_CODE_SET_4BYTE_FRAME                                 ZW_UserCodeSet4byteFrame;\
1691      =3    ZW_USERS_NUMBER_GET_FRAME                                    ZW_UsersNumberGetFrame;\
1692      =3    ZW_USERS_NUMBER_REPORT_FRAME                                 ZW_UsersNumberReportFrame;\
1693      =3  /* Command class Version */\
1694      =3    ZW_VERSION_COMMAND_CLASS_GET_FRAME                           ZW_VersionCommandClassGetFrame;\
1695      =3    ZW_VERSION_COMMAND_CLASS_REPORT_FRAME                        ZW_VersionCommandClassReportFrame;\
1696      =3    ZW_VERSION_GET_FRAME                                         ZW_VersionGetFrame;\
1697      =3    ZW_VERSION_REPORT_FRAME                                      ZW_VersionReportFrame;\
1698      =3  /* Command class Version V2 */\
1699      =3    ZW_VERSION_COMMAND_CLASS_GET_V2_FRAME                        ZW_VersionCommandClassGetV2Frame;\
1700      =3    ZW_VERSION_COMMAND_CLASS_REPORT_V2_FRAME                     ZW_VersionCommandClassReportV2Frame;\
1701      =3    ZW_VERSION_GET_V2_FRAME                                      ZW_VersionGetV2Frame;\
1702      =3    VG_VERSION_REPORT_V2_VG                                      VG_VersionReportV2VGroup;\
1703      =3    ZW_VERSION_REPORT_1BYTE_V2_FRAME                             ZW_VersionReport1byteV2Frame;\
1704      =3    ZW_VERSION_REPORT_2BYTE_V2_FRAME                             ZW_VersionReport2byteV2Frame;\
1705      =3    ZW_VERSION_REPORT_3BYTE_V2_FRAME                             ZW_VersionReport3byteV2Frame;\
1706      =3    ZW_VERSION_REPORT_4BYTE_V2_FRAME                             ZW_VersionReport4byteV2Frame;\
1707      =3  /* Command class Version V3 */\
1708      =3    ZW_VERSION_COMMAND_CLASS_GET_V3_FRAME                        ZW_VersionCommandClassGetV3Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 37  

1709      =3    ZW_VERSION_COMMAND_CLASS_REPORT_V3_FRAME                     ZW_VersionCommandClassReportV3Frame;\
1710      =3    ZW_VERSION_GET_V3_FRAME                                      ZW_VersionGetV3Frame;\
1711      =3    VG_VERSION_REPORT_V3_VG                                      VG_VersionReportV3VGroup;\
1712      =3    ZW_VERSION_REPORT_1BYTE_V3_FRAME                             ZW_VersionReport1byteV3Frame;\
1713      =3    ZW_VERSION_REPORT_2BYTE_V3_FRAME                             ZW_VersionReport2byteV3Frame;\
1714      =3    ZW_VERSION_REPORT_3BYTE_V3_FRAME                             ZW_VersionReport3byteV3Frame;\
1715      =3    ZW_VERSION_REPORT_4BYTE_V3_FRAME                             ZW_VersionReport4byteV3Frame;\
1716      =3    ZW_VERSION_CAPABILITIES_GET_V3_FRAME                         ZW_VersionCapabilitiesGetV3Frame;\
1717      =3    ZW_VERSION_CAPABILITIES_REPORT_V3_FRAME                      ZW_VersionCapabilitiesReportV3Frame;\
1718      =3    ZW_VERSION_ZWAVE_SOFTWARE_GET_V3_FRAME                       ZW_VersionZwaveSoftwareGetV3Frame;\
1719      =3    ZW_VERSION_ZWAVE_SOFTWARE_REPORT_V3_FRAME                    ZW_VersionZwaveSoftwareReportV3Frame;\
1720      =3  /* Command class Wake Up */\
1721      =3    ZW_WAKE_UP_INTERVAL_GET_FRAME                                ZW_WakeUpIntervalGetFrame;\
1722      =3    ZW_WAKE_UP_INTERVAL_REPORT_FRAME                             ZW_WakeUpIntervalReportFrame;\
1723      =3    ZW_WAKE_UP_INTERVAL_SET_FRAME                                ZW_WakeUpIntervalSetFrame;\
1724      =3    ZW_WAKE_UP_NO_MORE_INFORMATION_FRAME                         ZW_WakeUpNoMoreInformationFrame;\
1725      =3    ZW_WAKE_UP_NOTIFICATION_FRAME                                ZW_WakeUpNotificationFrame;\
1726      =3  /* Command class Wake Up V2 */\
1727      =3    ZW_WAKE_UP_INTERVAL_CAPABILITIES_GET_V2_FRAME                ZW_WakeUpIntervalCapabilitiesGetV2Frame;\
1728      =3    ZW_WAKE_UP_INTERVAL_CAPABILITIES_REPORT_V2_FRAME             ZW_WakeUpIntervalCapabilitiesReportV2Frame;
             -\
1729      =3    ZW_WAKE_UP_INTERVAL_GET_V2_FRAME                             ZW_WakeUpIntervalGetV2Frame;\
1730      =3    ZW_WAKE_UP_INTERVAL_REPORT_V2_FRAME                          ZW_WakeUpIntervalReportV2Frame;\
1731      =3    ZW_WAKE_UP_INTERVAL_SET_V2_FRAME                             ZW_WakeUpIntervalSetV2Frame;\
1732      =3    ZW_WAKE_UP_NO_MORE_INFORMATION_V2_FRAME                      ZW_WakeUpNoMoreInformationV2Frame;\
1733      =3    ZW_WAKE_UP_NOTIFICATION_V2_FRAME                             ZW_WakeUpNotificationV2Frame;\
1734      =3  /* Command class Zip 6lowpan */\
1735      =3    ZW_LOWPAN_FIRST_FRAGMENT_1BYTE_FRAME                         ZW_LowpanFirstFragment1byteFrame;\
1736      =3    ZW_LOWPAN_FIRST_FRAGMENT_2BYTE_FRAME                         ZW_LowpanFirstFragment2byteFrame;\
1737      =3    ZW_LOWPAN_FIRST_FRAGMENT_3BYTE_FRAME                         ZW_LowpanFirstFragment3byteFrame;\
1738      =3    ZW_LOWPAN_FIRST_FRAGMENT_4BYTE_FRAME                         ZW_LowpanFirstFragment4byteFrame;\
1739      =3    ZW_LOWPAN_SUBSEQUENT_FRAGMENT_1BYTE_FRAME                    ZW_LowpanSubsequentFragment1byteFrame;\
1740      =3    ZW_LOWPAN_SUBSEQUENT_FRAGMENT_2BYTE_FRAME                    ZW_LowpanSubsequentFragment2byteFrame;\
1741      =3    ZW_LOWPAN_SUBSEQUENT_FRAGMENT_3BYTE_FRAME                    ZW_LowpanSubsequentFragment3byteFrame;\
1742      =3    ZW_LOWPAN_SUBSEQUENT_FRAGMENT_4BYTE_FRAME                    ZW_LowpanSubsequentFragment4byteFrame;\
1743      =3  /* Command class Zip */\
1744      =3    ZW_COMMAND_ZIP_PACKET_1BYTE_FRAME                            ZW_CommandZipPacket1byteFrame;\
1745      =3    ZW_COMMAND_ZIP_PACKET_2BYTE_FRAME                            ZW_CommandZipPacket2byteFrame;\
1746      =3    ZW_COMMAND_ZIP_PACKET_3BYTE_FRAME                            ZW_CommandZipPacket3byteFrame;\
1747      =3    ZW_COMMAND_ZIP_PACKET_4BYTE_FRAME                            ZW_CommandZipPacket4byteFrame;\
1748      =3  /* Command class Zip V2 */\
1749      =3    ZW_COMMAND_ZIP_PACKET_1BYTE_V2_FRAME                         ZW_CommandZipPacket1byteV2Frame;\
1750      =3    ZW_COMMAND_ZIP_PACKET_2BYTE_V2_FRAME                         ZW_CommandZipPacket2byteV2Frame;\
1751      =3    ZW_COMMAND_ZIP_PACKET_3BYTE_V2_FRAME                         ZW_CommandZipPacket3byteV2Frame;\
1752      =3    ZW_COMMAND_ZIP_PACKET_4BYTE_V2_FRAME                         ZW_CommandZipPacket4byteV2Frame;\
1753      =3  /* Command class Zip V3 */\
1754      =3    ZW_COMMAND_ZIP_PACKET_1BYTE_V3_FRAME                         ZW_CommandZipPacket1byteV3Frame;\
1755      =3    ZW_COMMAND_ZIP_PACKET_2BYTE_V3_FRAME                         ZW_CommandZipPacket2byteV3Frame;\
1756      =3    ZW_COMMAND_ZIP_PACKET_3BYTE_V3_FRAME                         ZW_CommandZipPacket3byteV3Frame;\
1757      =3    ZW_COMMAND_ZIP_PACKET_4BYTE_V3_FRAME                         ZW_CommandZipPacket4byteV3Frame;\
1758      =3  /* Command class Application Capability */\
1759      =3    ZW_COMMAND_COMMAND_CLASS_NOT_SUPPORTED_FRAME                 ZW_CommandCommandClassNotSupportedFrame;\
1760      =3  /* Command class Switch Color */\
1761      =3    ZW_SWITCH_COLOR_SUPPORTED_GET_FRAME                          ZW_SwitchColorSupportedGetFrame;\
1762      =3    ZW_SWITCH_COLOR_SUPPORTED_REPORT_FRAME                       ZW_SwitchColorSupportedReportFrame;\
1763      =3    ZW_SWITCH_COLOR_GET_FRAME                                    ZW_SwitchColorGetFrame;\
1764      =3    ZW_SWITCH_COLOR_REPORT_FRAME                                 ZW_SwitchColorReportFrame;\
1765      =3    VG_SWITCH_COLOR_SET_VG                                       VG_SwitchColorSetVGroup;\
1766      =3    ZW_SWITCH_COLOR_SET_1BYTE_FRAME                              ZW_SwitchColorSet1byteFrame;\
1767      =3    ZW_SWITCH_COLOR_SET_2BYTE_FRAME                              ZW_SwitchColorSet2byteFrame;\
1768      =3    ZW_SWITCH_COLOR_SET_3BYTE_FRAME                              ZW_SwitchColorSet3byteFrame;\
1769      =3    ZW_SWITCH_COLOR_SET_4BYTE_FRAME                              ZW_SwitchColorSet4byteFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 38  

1770      =3    ZW_SWITCH_COLOR_START_LEVEL_CHANGE_FRAME                     ZW_SwitchColorStartLevelChangeFrame;\
1771      =3    ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_FRAME                      ZW_SwitchColorStopLevelChangeFrame;\
1772      =3  /* Command class Switch Color V2 */\
1773      =3    ZW_SWITCH_COLOR_SUPPORTED_GET_V2_FRAME                       ZW_SwitchColorSupportedGetV2Frame;\
1774      =3    ZW_SWITCH_COLOR_SUPPORTED_REPORT_V2_FRAME                    ZW_SwitchColorSupportedReportV2Frame;\
1775      =3    ZW_SWITCH_COLOR_GET_V2_FRAME                                 ZW_SwitchColorGetV2Frame;\
1776      =3    ZW_SWITCH_COLOR_REPORT_V2_FRAME                              ZW_SwitchColorReportV2Frame;\
1777      =3    VG_SWITCH_COLOR_SET_V2_VG                                    VG_SwitchColorSetV2VGroup;\
1778      =3    ZW_SWITCH_COLOR_SET_1BYTE_V2_FRAME                           ZW_SwitchColorSet1byteV2Frame;\
1779      =3    ZW_SWITCH_COLOR_SET_2BYTE_V2_FRAME                           ZW_SwitchColorSet2byteV2Frame;\
1780      =3    ZW_SWITCH_COLOR_SET_3BYTE_V2_FRAME                           ZW_SwitchColorSet3byteV2Frame;\
1781      =3    ZW_SWITCH_COLOR_SET_4BYTE_V2_FRAME                           ZW_SwitchColorSet4byteV2Frame;\
1782      =3    ZW_SWITCH_COLOR_START_LEVEL_CHANGE_V2_FRAME                  ZW_SwitchColorStartLevelChangeV2Frame;\
1783      =3    ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_V2_FRAME                   ZW_SwitchColorStopLevelChangeV2Frame;\
1784      =3  /* Command class Switch Color V3 */\
1785      =3    ZW_SWITCH_COLOR_SUPPORTED_GET_V3_FRAME                       ZW_SwitchColorSupportedGetV3Frame;\
1786      =3    ZW_SWITCH_COLOR_SUPPORTED_REPORT_V3_FRAME                    ZW_SwitchColorSupportedReportV3Frame;\
1787      =3    ZW_SWITCH_COLOR_GET_V3_FRAME                                 ZW_SwitchColorGetV3Frame;\
1788      =3    ZW_SWITCH_COLOR_REPORT_V3_FRAME                              ZW_SwitchColorReportV3Frame;\
1789      =3    VG_SWITCH_COLOR_SET_V3_VG                                    VG_SwitchColorSetV3VGroup;\
1790      =3    ZW_SWITCH_COLOR_SET_1BYTE_V3_FRAME                           ZW_SwitchColorSet1byteV3Frame;\
1791      =3    ZW_SWITCH_COLOR_SET_2BYTE_V3_FRAME                           ZW_SwitchColorSet2byteV3Frame;\
1792      =3    ZW_SWITCH_COLOR_SET_3BYTE_V3_FRAME                           ZW_SwitchColorSet3byteV3Frame;\
1793      =3    ZW_SWITCH_COLOR_SET_4BYTE_V3_FRAME                           ZW_SwitchColorSet4byteV3Frame;\
1794      =3    ZW_SWITCH_COLOR_START_LEVEL_CHANGE_V3_FRAME                  ZW_SwitchColorStartLevelChangeV3Frame;\
1795      =3    ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_V3_FRAME                   ZW_SwitchColorStopLevelChangeV3Frame;\
1796      =3  /* Command class Schedule */\
1797      =3    ZW_SCHEDULE_SUPPORTED_GET_FRAME                              ZW_ScheduleSupportedGetFrame;\
1798      =3    VG_SCHEDULE_SUPPORTED_REPORT_VG                              VG_ScheduleSupportedReportVGroup;\
1799      =3    ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_FRAME                     ZW_ScheduleSupportedReport1byteFrame;\
1800      =3    ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_FRAME                     ZW_ScheduleSupportedReport2byteFrame;\
1801      =3    ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_FRAME                     ZW_ScheduleSupportedReport3byteFrame;\
1802      =3    ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_FRAME                     ZW_ScheduleSupportedReport4byteFrame;\
1803      =3    VG_COMMAND_SCHEDULE_SET_1BYTE_VG                             VG_CommandScheduleSet1byteVGroup;\
1804      =3    VG_COMMAND_SCHEDULE_SET_2BYTE_VG                             VG_CommandScheduleSet2byteVGroup;\
1805      =3    VG_COMMAND_SCHEDULE_SET_3BYTE_VG                             VG_CommandScheduleSet3byteVGroup;\
1806      =3    VG_COMMAND_SCHEDULE_SET_4BYTE_VG                             VG_CommandScheduleSet4byteVGroup;\
1807      =3    ZW_COMMAND_SCHEDULE_SET_1BYTE_FRAME                          ZW_CommandScheduleSet1byteFrame;\
1808      =3    ZW_COMMAND_SCHEDULE_SET_2BYTE_FRAME                          ZW_CommandScheduleSet2byteFrame;\
1809      =3    ZW_COMMAND_SCHEDULE_SET_3BYTE_FRAME                          ZW_CommandScheduleSet3byteFrame;\
1810      =3    ZW_COMMAND_SCHEDULE_SET_4BYTE_FRAME                          ZW_CommandScheduleSet4byteFrame;\
1811      =3    ZW_COMMAND_SCHEDULE_GET_FRAME                                ZW_CommandScheduleGetFrame;\
1812      =3    VG_COMMAND_SCHEDULE_REPORT_1BYTE_VG                          VG_CommandScheduleReport1byteVGroup;\
1813      =3    VG_COMMAND_SCHEDULE_REPORT_2BYTE_VG                          VG_CommandScheduleReport2byteVGroup;\
1814      =3    VG_COMMAND_SCHEDULE_REPORT_3BYTE_VG                          VG_CommandScheduleReport3byteVGroup;\
1815      =3    VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG                          VG_CommandScheduleReport4byteVGroup;\
1816      =3    ZW_COMMAND_SCHEDULE_REPORT_1BYTE_FRAME                       ZW_CommandScheduleReport1byteFrame;\
1817      =3    ZW_COMMAND_SCHEDULE_REPORT_2BYTE_FRAME                       ZW_CommandScheduleReport2byteFrame;\
1818      =3    ZW_COMMAND_SCHEDULE_REPORT_3BYTE_FRAME                       ZW_CommandScheduleReport3byteFrame;\
1819      =3    ZW_COMMAND_SCHEDULE_REPORT_4BYTE_FRAME                       ZW_CommandScheduleReport4byteFrame;\
1820      =3    ZW_SCHEDULE_REMOVE_FRAME                                     ZW_ScheduleRemoveFrame;\
1821      =3    ZW_SCHEDULE_STATE_SET_FRAME                                  ZW_ScheduleStateSetFrame;\
1822      =3    ZW_SCHEDULE_STATE_GET_FRAME                                  ZW_ScheduleStateGetFrame;\
1823      =3    VG_SCHEDULE_STATE_REPORT_VG                                  VG_ScheduleStateReportVGroup;\
1824      =3    ZW_SCHEDULE_STATE_REPORT_1BYTE_FRAME                         ZW_ScheduleStateReport1byteFrame;\
1825      =3    ZW_SCHEDULE_STATE_REPORT_2BYTE_FRAME                         ZW_ScheduleStateReport2byteFrame;\
1826      =3    ZW_SCHEDULE_STATE_REPORT_3BYTE_FRAME                         ZW_ScheduleStateReport3byteFrame;\
1827      =3    ZW_SCHEDULE_STATE_REPORT_4BYTE_FRAME                         ZW_ScheduleStateReport4byteFrame;\
1828      =3  /* Command class Schedule V2 */\
1829      =3    ZW_SCHEDULE_SUPPORTED_GET_V2_FRAME                           ZW_ScheduleSupportedGetV2Frame;\
1830      =3    VG_SCHEDULE_SUPPORTED_REPORT_V2_VG                           VG_ScheduleSupportedReportV2VGroup;\
1831      =3    ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V2_FRAME                  ZW_ScheduleSupportedReport1byteV2Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 39  

1832      =3    ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V2_FRAME                  ZW_ScheduleSupportedReport2byteV2Frame;\
1833      =3    ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V2_FRAME                  ZW_ScheduleSupportedReport3byteV2Frame;\
1834      =3    ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V2_FRAME                  ZW_ScheduleSupportedReport4byteV2Frame;\
1835      =3    VG_COMMAND_SCHEDULE_SET_1BYTE_V2_VG                          VG_CommandScheduleSet1byteV2VGroup;\
1836      =3    VG_COMMAND_SCHEDULE_SET_2BYTE_V2_VG                          VG_CommandScheduleSet2byteV2VGroup;\
1837      =3    VG_COMMAND_SCHEDULE_SET_3BYTE_V2_VG                          VG_CommandScheduleSet3byteV2VGroup;\
1838      =3    VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG                          VG_CommandScheduleSet4byteV2VGroup;\
1839      =3    ZW_COMMAND_SCHEDULE_SET_1BYTE_V2_FRAME                       ZW_CommandScheduleSet1byteV2Frame;\
1840      =3    ZW_COMMAND_SCHEDULE_SET_2BYTE_V2_FRAME                       ZW_CommandScheduleSet2byteV2Frame;\
1841      =3    ZW_COMMAND_SCHEDULE_SET_3BYTE_V2_FRAME                       ZW_CommandScheduleSet3byteV2Frame;\
1842      =3    ZW_COMMAND_SCHEDULE_SET_4BYTE_V2_FRAME                       ZW_CommandScheduleSet4byteV2Frame;\
1843      =3    ZW_COMMAND_SCHEDULE_GET_V2_FRAME                             ZW_CommandScheduleGetV2Frame;\
1844      =3    VG_COMMAND_SCHEDULE_REPORT_1BYTE_V2_VG                       VG_CommandScheduleReport1byteV2VGroup;\
1845      =3    VG_COMMAND_SCHEDULE_REPORT_2BYTE_V2_VG                       VG_CommandScheduleReport2byteV2VGroup;\
1846      =3    VG_COMMAND_SCHEDULE_REPORT_3BYTE_V2_VG                       VG_CommandScheduleReport3byteV2VGroup;\
1847      =3    VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG                       VG_CommandScheduleReport4byteV2VGroup;\
1848      =3    ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V2_FRAME                    ZW_CommandScheduleReport1byteV2Frame;\
1849      =3    ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V2_FRAME                    ZW_CommandScheduleReport2byteV2Frame;\
1850      =3    ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V2_FRAME                    ZW_CommandScheduleReport3byteV2Frame;\
1851      =3    ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V2_FRAME                    ZW_CommandScheduleReport4byteV2Frame;\
1852      =3    ZW_SCHEDULE_REMOVE_V2_FRAME                                  ZW_ScheduleRemoveV2Frame;\
1853      =3    ZW_SCHEDULE_STATE_SET_V2_FRAME                               ZW_ScheduleStateSetV2Frame;\
1854      =3    ZW_SCHEDULE_STATE_GET_V2_FRAME                               ZW_ScheduleStateGetV2Frame;\
1855      =3    VG_SCHEDULE_STATE_REPORT_V2_VG                               VG_ScheduleStateReportV2VGroup;\
1856      =3    ZW_SCHEDULE_STATE_REPORT_1BYTE_V2_FRAME                      ZW_ScheduleStateReport1byteV2Frame;\
1857      =3    ZW_SCHEDULE_STATE_REPORT_2BYTE_V2_FRAME                      ZW_ScheduleStateReport2byteV2Frame;\
1858      =3    ZW_SCHEDULE_STATE_REPORT_3BYTE_V2_FRAME                      ZW_ScheduleStateReport3byteV2Frame;\
1859      =3    ZW_SCHEDULE_STATE_REPORT_4BYTE_V2_FRAME                      ZW_ScheduleStateReport4byteV2Frame;\
1860      =3  /* Command class Schedule V3 */\
1861      =3    ZW_SCHEDULE_SUPPORTED_GET_V3_FRAME                           ZW_ScheduleSupportedGetV3Frame;\
1862      =3    VG_SCHEDULE_SUPPORTED_REPORT_V3_VG                           VG_ScheduleSupportedReportV3VGroup;\
1863      =3    ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V3_FRAME                  ZW_ScheduleSupportedReport1byteV3Frame;\
1864      =3    ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V3_FRAME                  ZW_ScheduleSupportedReport2byteV3Frame;\
1865      =3    ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V3_FRAME                  ZW_ScheduleSupportedReport3byteV3Frame;\
1866      =3    ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V3_FRAME                  ZW_ScheduleSupportedReport4byteV3Frame;\
1867      =3    VG_COMMAND_SCHEDULE_SET_1BYTE_V3_VG                          VG_CommandScheduleSet1byteV3VGroup;\
1868      =3    VG_COMMAND_SCHEDULE_SET_2BYTE_V3_VG                          VG_CommandScheduleSet2byteV3VGroup;\
1869      =3    VG_COMMAND_SCHEDULE_SET_3BYTE_V3_VG                          VG_CommandScheduleSet3byteV3VGroup;\
1870      =3    VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG                          VG_CommandScheduleSet4byteV3VGroup;\
1871      =3    ZW_COMMAND_SCHEDULE_SET_1BYTE_V3_FRAME                       ZW_CommandScheduleSet1byteV3Frame;\
1872      =3    ZW_COMMAND_SCHEDULE_SET_2BYTE_V3_FRAME                       ZW_CommandScheduleSet2byteV3Frame;\
1873      =3    ZW_COMMAND_SCHEDULE_SET_3BYTE_V3_FRAME                       ZW_CommandScheduleSet3byteV3Frame;\
1874      =3    ZW_COMMAND_SCHEDULE_SET_4BYTE_V3_FRAME                       ZW_CommandScheduleSet4byteV3Frame;\
1875      =3    ZW_COMMAND_SCHEDULE_GET_V3_FRAME                             ZW_CommandScheduleGetV3Frame;\
1876      =3    VG_COMMAND_SCHEDULE_REPORT_1BYTE_V3_VG                       VG_CommandScheduleReport1byteV3VGroup;\
1877      =3    VG_COMMAND_SCHEDULE_REPORT_2BYTE_V3_VG                       VG_CommandScheduleReport2byteV3VGroup;\
1878      =3    VG_COMMAND_SCHEDULE_REPORT_3BYTE_V3_VG                       VG_CommandScheduleReport3byteV3VGroup;\
1879      =3    VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG                       VG_CommandScheduleReport4byteV3VGroup;\
1880      =3    ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V3_FRAME                    ZW_CommandScheduleReport1byteV3Frame;\
1881      =3    ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V3_FRAME                    ZW_CommandScheduleReport2byteV3Frame;\
1882      =3    ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V3_FRAME                    ZW_CommandScheduleReport3byteV3Frame;\
1883      =3    ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V3_FRAME                    ZW_CommandScheduleReport4byteV3Frame;\
1884      =3    ZW_SCHEDULE_REMOVE_V3_FRAME                                  ZW_ScheduleRemoveV3Frame;\
1885      =3    ZW_SCHEDULE_STATE_SET_V3_FRAME                               ZW_ScheduleStateSetV3Frame;\
1886      =3    ZW_SCHEDULE_STATE_GET_V3_FRAME                               ZW_ScheduleStateGetV3Frame;\
1887      =3    VG_SCHEDULE_STATE_REPORT_V3_VG                               VG_ScheduleStateReportV3VGroup;\
1888      =3    ZW_SCHEDULE_STATE_REPORT_1BYTE_V3_FRAME                      ZW_ScheduleStateReport1byteV3Frame;\
1889      =3    ZW_SCHEDULE_STATE_REPORT_2BYTE_V3_FRAME                      ZW_ScheduleStateReport2byteV3Frame;\
1890      =3    ZW_SCHEDULE_STATE_REPORT_3BYTE_V3_FRAME                      ZW_ScheduleStateReport3byteV3Frame;\
1891      =3    ZW_SCHEDULE_STATE_REPORT_4BYTE_V3_FRAME                      ZW_ScheduleStateReport4byteV3Frame;\
1892      =3  /* Command class Schedule V4 */\
1893      =3    ZW_SCHEDULE_SUPPORTED_GET_V4_FRAME                           ZW_ScheduleSupportedGetV4Frame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 40  

1894      =3    VG_SCHEDULE_SUPPORTED_REPORT_V4_VG                           VG_ScheduleSupportedReportV4VGroup;\
1895      =3    ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V4_FRAME                  ZW_ScheduleSupportedReport1byteV4Frame;\
1896      =3    ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V4_FRAME                  ZW_ScheduleSupportedReport2byteV4Frame;\
1897      =3    ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V4_FRAME                  ZW_ScheduleSupportedReport3byteV4Frame;\
1898      =3    ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V4_FRAME                  ZW_ScheduleSupportedReport4byteV4Frame;\
1899      =3    VG_COMMAND_SCHEDULE_SET_1BYTE_V4_VG                          VG_CommandScheduleSet1byteV4VGroup;\
1900      =3    VG_COMMAND_SCHEDULE_SET_2BYTE_V4_VG                          VG_CommandScheduleSet2byteV4VGroup;\
1901      =3    VG_COMMAND_SCHEDULE_SET_3BYTE_V4_VG                          VG_CommandScheduleSet3byteV4VGroup;\
1902      =3    VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG                          VG_CommandScheduleSet4byteV4VGroup;\
1903      =3    ZW_COMMAND_SCHEDULE_SET_1BYTE_V4_FRAME                       ZW_CommandScheduleSet1byteV4Frame;\
1904      =3    ZW_COMMAND_SCHEDULE_SET_2BYTE_V4_FRAME                       ZW_CommandScheduleSet2byteV4Frame;\
1905      =3    ZW_COMMAND_SCHEDULE_SET_3BYTE_V4_FRAME                       ZW_CommandScheduleSet3byteV4Frame;\
1906      =3    ZW_COMMAND_SCHEDULE_SET_4BYTE_V4_FRAME                       ZW_CommandScheduleSet4byteV4Frame;\
1907      =3    ZW_COMMAND_SCHEDULE_GET_V4_FRAME                             ZW_CommandScheduleGetV4Frame;\
1908      =3    VG_COMMAND_SCHEDULE_REPORT_1BYTE_V4_VG                       VG_CommandScheduleReport1byteV4VGroup;\
1909      =3    VG_COMMAND_SCHEDULE_REPORT_2BYTE_V4_VG                       VG_CommandScheduleReport2byteV4VGroup;\
1910      =3    VG_COMMAND_SCHEDULE_REPORT_3BYTE_V4_VG                       VG_CommandScheduleReport3byteV4VGroup;\
1911      =3    VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG                       VG_CommandScheduleReport4byteV4VGroup;\
1912      =3    ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V4_FRAME                    ZW_CommandScheduleReport1byteV4Frame;\
1913      =3    ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V4_FRAME                    ZW_CommandScheduleReport2byteV4Frame;\
1914      =3    ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V4_FRAME                    ZW_CommandScheduleReport3byteV4Frame;\
1915      =3    ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V4_FRAME                    ZW_CommandScheduleReport4byteV4Frame;\
1916      =3    ZW_SCHEDULE_REMOVE_V4_FRAME                                  ZW_ScheduleRemoveV4Frame;\
1917      =3    ZW_SCHEDULE_STATE_SET_V4_FRAME                               ZW_ScheduleStateSetV4Frame;\
1918      =3    ZW_SCHEDULE_STATE_GET_V4_FRAME                               ZW_ScheduleStateGetV4Frame;\
1919      =3    VG_SCHEDULE_STATE_REPORT_V4_VG                               VG_ScheduleStateReportV4VGroup;\
1920      =3    ZW_SCHEDULE_STATE_REPORT_1BYTE_V4_FRAME                      ZW_ScheduleStateReport1byteV4Frame;\
1921      =3    ZW_SCHEDULE_STATE_REPORT_2BYTE_V4_FRAME                      ZW_ScheduleStateReport2byteV4Frame;\
1922      =3    ZW_SCHEDULE_STATE_REPORT_3BYTE_V4_FRAME                      ZW_ScheduleStateReport3byteV4Frame;\
1923      =3    ZW_SCHEDULE_STATE_REPORT_4BYTE_V4_FRAME                      ZW_ScheduleStateReport4byteV4Frame;\
1924      =3    ZW_SCHEDULE_SUPPORTED_COMMANDS_GET_V4_FRAME                  ZW_ScheduleSupportedCommandsGetV4Frame;\
1925      =3    VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_1BYTE_V4_VG            VG_ScheduleSupportedCommandsReport1byteV4VG
             -roup;\
1926      =3    VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_2BYTE_V4_VG            VG_ScheduleSupportedCommandsReport2byteV4VG
             -roup;\
1927      =3    VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_3BYTE_V4_VG            VG_ScheduleSupportedCommandsReport3byteV4VG
             -roup;\
1928      =3    VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG            VG_ScheduleSupportedCommandsReport4byteV4VG
             -roup;\
1929      =3    ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_1BYTE_V4_FRAME         ZW_ScheduleSupportedCommandsReport1byteV4Fr
             -ame;\
1930      =3    ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_2BYTE_V4_FRAME         ZW_ScheduleSupportedCommandsReport2byteV4Fr
             -ame;\
1931      =3    ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_3BYTE_V4_FRAME         ZW_ScheduleSupportedCommandsReport3byteV4Fr
             -ame;\
1932      =3    ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_FRAME         ZW_ScheduleSupportedCommandsReport4byteV4Fr
             -ame;\
1933      =3  /* Command class Network Management Primary */\
1934      =3    ZW_CONTROLLER_CHANGE_FRAME                                   ZW_ControllerChangeFrame;\
1935      =3    ZW_CONTROLLER_CHANGE_STATUS_1BYTE_FRAME                      ZW_ControllerChangeStatus1byteFrame;\
1936      =3    ZW_CONTROLLER_CHANGE_STATUS_2BYTE_FRAME                      ZW_ControllerChangeStatus2byteFrame;\
1937      =3    ZW_CONTROLLER_CHANGE_STATUS_3BYTE_FRAME                      ZW_ControllerChangeStatus3byteFrame;\
1938      =3    ZW_CONTROLLER_CHANGE_STATUS_4BYTE_FRAME                      ZW_ControllerChangeStatus4byteFrame;\
1939      =3  /* Command class Zip Nd */\
1940      =3    ZW_ZIP_NODE_SOLICITATION_FRAME                               ZW_ZipNodeSolicitationFrame;\
1941      =3    ZW_ZIP_INV_NODE_SOLICITATION_FRAME                           ZW_ZipInvNodeSolicitationFrame;\
1942      =3    ZW_ZIP_NODE_ADVERTISEMENT_FRAME                              ZW_ZipNodeAdvertisementFrame;\
1943      =3  /* Command class Association Grp Info */\
1944      =3    ZW_ASSOCIATION_GROUP_NAME_GET_FRAME                          ZW_AssociationGroupNameGetFrame;\
1945      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_FRAME                 ZW_AssociationGroupNameReport1byteFrame;\
1946      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_FRAME                 ZW_AssociationGroupNameReport2byteFrame;\
1947      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_FRAME                 ZW_AssociationGroupNameReport3byteFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 41  

1948      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_FRAME                 ZW_AssociationGroupNameReport4byteFrame;\
1949      =3    ZW_ASSOCIATION_GROUP_INFO_GET_FRAME                          ZW_AssociationGroupInfoGetFrame;\
1950      =3    VG_ASSOCIATION_GROUP_INFO_REPORT_VG                          VG_AssociationGroupInfoReportVGroup;\
1951      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_FRAME                 ZW_AssociationGroupInfoReport1byteFrame;\
1952      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_FRAME                 ZW_AssociationGroupInfoReport2byteFrame;\
1953      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_FRAME                 ZW_AssociationGroupInfoReport3byteFrame;\
1954      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_FRAME                 ZW_AssociationGroupInfoReport4byteFrame;\
1955      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_FRAME                  ZW_AssociationGroupCommandListGetFrame;\
1956      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_FRAME         ZW_AssociationGroupCommandListReport1byteFr
             -ame;\
1957      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_FRAME         ZW_AssociationGroupCommandListReport2byteFr
             -ame;\
1958      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_FRAME         ZW_AssociationGroupCommandListReport3byteFr
             -ame;\
1959      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_FRAME         ZW_AssociationGroupCommandListReport4byteFr
             -ame;\
1960      =3  /* Command class Association Grp Info V2 */\
1961      =3    ZW_ASSOCIATION_GROUP_NAME_GET_V2_FRAME                       ZW_AssociationGroupNameGetV2Frame;\
1962      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_V2_FRAME              ZW_AssociationGroupNameReport1byteV2Frame;\
1963      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_V2_FRAME              ZW_AssociationGroupNameReport2byteV2Frame;\
1964      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_V2_FRAME              ZW_AssociationGroupNameReport3byteV2Frame;\
1965      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_V2_FRAME              ZW_AssociationGroupNameReport4byteV2Frame;\
1966      =3    ZW_ASSOCIATION_GROUP_INFO_GET_V2_FRAME                       ZW_AssociationGroupInfoGetV2Frame;\
1967      =3    VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG                       VG_AssociationGroupInfoReportV2VGroup;\
1968      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_V2_FRAME              ZW_AssociationGroupInfoReport1byteV2Frame;\
1969      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_V2_FRAME              ZW_AssociationGroupInfoReport2byteV2Frame;\
1970      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_V2_FRAME              ZW_AssociationGroupInfoReport3byteV2Frame;\
1971      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_V2_FRAME              ZW_AssociationGroupInfoReport4byteV2Frame;\
1972      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_V2_FRAME               ZW_AssociationGroupCommandListGetV2Frame;\
1973      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_V2_FRAME      ZW_AssociationGroupCommandListReport1byteV2
             -Frame;\
1974      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_V2_FRAME      ZW_AssociationGroupCommandListReport2byteV2
             -Frame;\
1975      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_V2_FRAME      ZW_AssociationGroupCommandListReport3byteV2
             -Frame;\
1976      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_V2_FRAME      ZW_AssociationGroupCommandListReport4byteV2
             -Frame;\
1977      =3  /* Command class Association Grp Info V3 */\
1978      =3    ZW_ASSOCIATION_GROUP_NAME_GET_V3_FRAME                       ZW_AssociationGroupNameGetV3Frame;\
1979      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_V3_FRAME              ZW_AssociationGroupNameReport1byteV3Frame;\
1980      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_V3_FRAME              ZW_AssociationGroupNameReport2byteV3Frame;\
1981      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_V3_FRAME              ZW_AssociationGroupNameReport3byteV3Frame;\
1982      =3    ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_V3_FRAME              ZW_AssociationGroupNameReport4byteV3Frame;\
1983      =3    ZW_ASSOCIATION_GROUP_INFO_GET_V3_FRAME                       ZW_AssociationGroupInfoGetV3Frame;\
1984      =3    VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG                       VG_AssociationGroupInfoReportV3VGroup;\
1985      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_V3_FRAME              ZW_AssociationGroupInfoReport1byteV3Frame;\
1986      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_V3_FRAME              ZW_AssociationGroupInfoReport2byteV3Frame;\
1987      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_V3_FRAME              ZW_AssociationGroupInfoReport3byteV3Frame;\
1988      =3    ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_V3_FRAME              ZW_AssociationGroupInfoReport4byteV3Frame;\
1989      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_V3_FRAME               ZW_AssociationGroupCommandListGetV3Frame;\
1990      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_V3_FRAME      ZW_AssociationGroupCommandListReport1byteV3
             -Frame;\
1991      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_V3_FRAME      ZW_AssociationGroupCommandListReport2byteV3
             -Frame;\
1992      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_V3_FRAME      ZW_AssociationGroupCommandListReport3byteV3
             -Frame;\
1993      =3    ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_V3_FRAME      ZW_AssociationGroupCommandListReport4byteV3
             -Frame;\
1994      =3  /* Command class Device Reset Locally */\
1995      =3    ZW_DEVICE_RESET_LOCALLY_NOTIFICATION_FRAME                   ZW_DeviceResetLocallyNotificationFrame;\
1996      =3  /* Command class Central Scene */\
1997      =3    ZW_CENTRAL_SCENE_SUPPORTED_GET_FRAME                         ZW_CentralSceneSupportedGetFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 42  

1998      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_FRAME                      ZW_CentralSceneSupportedReportFrame;\
1999      =3    ZW_CENTRAL_SCENE_NOTIFICATION_FRAME                          ZW_CentralSceneNotificationFrame;\
2000      =3  /* Command class Central Scene V2 */\
2001      =3    ZW_CENTRAL_SCENE_SUPPORTED_GET_V2_FRAME                      ZW_CentralSceneSupportedGetV2Frame;\
2002      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V2_VG                VG_CentralSceneSupportedReport1byteV2VGroup
             -;\
2003      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V2_VG                VG_CentralSceneSupportedReport2byteV2VGroup
             -;\
2004      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V2_VG                VG_CentralSceneSupportedReport3byteV2VGroup
             -;\
2005      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG                VG_CentralSceneSupportedReport4byteV2VGroup
             -;\
2006      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V2_FRAME             ZW_CentralSceneSupportedReport1byteV2Frame;
             -\
2007      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V2_FRAME             ZW_CentralSceneSupportedReport2byteV2Frame;
             -\
2008      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V2_FRAME             ZW_CentralSceneSupportedReport3byteV2Frame;
             -\
2009      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_FRAME             ZW_CentralSceneSupportedReport4byteV2Frame;
             -\
2010      =3    ZW_CENTRAL_SCENE_NOTIFICATION_V2_FRAME                       ZW_CentralSceneNotificationV2Frame;\
2011      =3  /* Command class Central Scene V3 */\
2012      =3    ZW_CENTRAL_SCENE_SUPPORTED_GET_V3_FRAME                      ZW_CentralSceneSupportedGetV3Frame;\
2013      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V3_VG                VG_CentralSceneSupportedReport1byteV3VGroup
             -;\
2014      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V3_VG                VG_CentralSceneSupportedReport2byteV3VGroup
             -;\
2015      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V3_VG                VG_CentralSceneSupportedReport3byteV3VGroup
             -;\
2016      =3    VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG                VG_CentralSceneSupportedReport4byteV3VGroup
             -;\
2017      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V3_FRAME             ZW_CentralSceneSupportedReport1byteV3Frame;
             -\
2018      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V3_FRAME             ZW_CentralSceneSupportedReport2byteV3Frame;
             -\
2019      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V3_FRAME             ZW_CentralSceneSupportedReport3byteV3Frame;
             -\
2020      =3    ZW_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_FRAME             ZW_CentralSceneSupportedReport4byteV3Frame;
             -\
2021      =3    ZW_CENTRAL_SCENE_NOTIFICATION_V3_FRAME                       ZW_CentralSceneNotificationV3Frame;\
2022      =3    ZW_CENTRAL_SCENE_CONFIGURATION_SET_V3_FRAME                  ZW_CentralSceneConfigurationSetV3Frame;\
2023      =3    ZW_CENTRAL_SCENE_CONFIGURATION_GET_V3_FRAME                  ZW_CentralSceneConfigurationGetV3Frame;\
2024      =3    ZW_CENTRAL_SCENE_CONFIGURATION_REPORT_V3_FRAME               ZW_CentralSceneConfigurationReportV3Frame;\
2025      =3  /* Command class Ip Association */\
2026      =3    ZW_IP_ASSOCIATION_SET_FRAME                                  ZW_IpAssociationSetFrame;\
2027      =3    ZW_IP_ASSOCIATION_GET_FRAME                                  ZW_IpAssociationGetFrame;\
2028      =3    ZW_IP_ASSOCIATION_REPORT_FRAME                               ZW_IpAssociationReportFrame;\
2029      =3    ZW_IP_ASSOCIATION_REMOVE_FRAME                               ZW_IpAssociationRemoveFrame;\
2030      =3  /* Command class Antitheft */\
2031      =3    ZW_ANTITHEFT_SET_1BYTE_FRAME                                 ZW_AntitheftSet1byteFrame;\
2032      =3    ZW_ANTITHEFT_SET_2BYTE_FRAME                                 ZW_AntitheftSet2byteFrame;\
2033      =3    ZW_ANTITHEFT_SET_3BYTE_FRAME                                 ZW_AntitheftSet3byteFrame;\
2034      =3    ZW_ANTITHEFT_SET_4BYTE_FRAME                                 ZW_AntitheftSet4byteFrame;\
2035      =3    ZW_ANTITHEFT_GET_FRAME                                       ZW_AntitheftGetFrame;\
2036      =3    ZW_ANTITHEFT_REPORT_1BYTE_FRAME                              ZW_AntitheftReport1byteFrame;\
2037      =3    ZW_ANTITHEFT_REPORT_2BYTE_FRAME                              ZW_AntitheftReport2byteFrame;\
2038      =3    ZW_ANTITHEFT_REPORT_3BYTE_FRAME                              ZW_AntitheftReport3byteFrame;\
2039      =3    ZW_ANTITHEFT_REPORT_4BYTE_FRAME                              ZW_AntitheftReport4byteFrame;\
2040      =3  /* Command class Antitheft V2 */\
2041      =3    ZW_ANTITHEFT_SET_1BYTE_V2_FRAME                              ZW_AntitheftSet1byteV2Frame;\
2042      =3  
2043      =3  #define ZW_FRAME_COLLECTION_MACRO5\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 43  

2044      =3    ZW_ANTITHEFT_SET_2BYTE_V2_FRAME                              ZW_AntitheftSet2byteV2Frame;\
2045      =3    ZW_ANTITHEFT_SET_3BYTE_V2_FRAME                              ZW_AntitheftSet3byteV2Frame;\
2046      =3    ZW_ANTITHEFT_SET_4BYTE_V2_FRAME                              ZW_AntitheftSet4byteV2Frame;\
2047      =3    ZW_ANTITHEFT_GET_V2_FRAME                                    ZW_AntitheftGetV2Frame;\
2048      =3    ZW_ANTITHEFT_REPORT_1BYTE_V2_FRAME                           ZW_AntitheftReport1byteV2Frame;\
2049      =3    ZW_ANTITHEFT_REPORT_2BYTE_V2_FRAME                           ZW_AntitheftReport2byteV2Frame;\
2050      =3    ZW_ANTITHEFT_REPORT_3BYTE_V2_FRAME                           ZW_AntitheftReport3byteV2Frame;\
2051      =3    ZW_ANTITHEFT_REPORT_4BYTE_V2_FRAME                           ZW_AntitheftReport4byteV2Frame;\
2052      =3  /* Command class Zwaveplus Info */\
2053      =3    ZW_ZWAVEPLUS_INFO_GET_FRAME                                  ZW_ZwaveplusInfoGetFrame;\
2054      =3    ZW_ZWAVEPLUS_INFO_REPORT_FRAME                               ZW_ZwaveplusInfoReportFrame;\
2055      =3  /* Command class Zwaveplus Info V2 */\
2056      =3    ZW_ZWAVEPLUS_INFO_GET_V2_FRAME                               ZW_ZwaveplusInfoGetV2Frame;\
2057      =3    ZW_ZWAVEPLUS_INFO_REPORT_V2_FRAME                            ZW_ZwaveplusInfoReportV2Frame;\
2058      =3  /* Command class Zip Gateway */\
2059      =3    ZW_GATEWAY_MODE_SET_FRAME                                    ZW_GatewayModeSetFrame;\
2060      =3    ZW_GATEWAY_MODE_GET_FRAME                                    ZW_GatewayModeGetFrame;\
2061      =3    ZW_GATEWAY_MODE_REPORT_FRAME                                 ZW_GatewayModeReportFrame;\
2062      =3    ZW_GATEWAY_PEER_SET_1BYTE_FRAME                              ZW_GatewayPeerSet1byteFrame;\
2063      =3    ZW_GATEWAY_PEER_SET_2BYTE_FRAME                              ZW_GatewayPeerSet2byteFrame;\
2064      =3    ZW_GATEWAY_PEER_SET_3BYTE_FRAME                              ZW_GatewayPeerSet3byteFrame;\
2065      =3    ZW_GATEWAY_PEER_SET_4BYTE_FRAME                              ZW_GatewayPeerSet4byteFrame;\
2066      =3    ZW_GATEWAY_PEER_GET_FRAME                                    ZW_GatewayPeerGetFrame;\
2067      =3    ZW_GATEWAY_PEER_REPORT_1BYTE_FRAME                           ZW_GatewayPeerReport1byteFrame;\
2068      =3    ZW_GATEWAY_PEER_REPORT_2BYTE_FRAME                           ZW_GatewayPeerReport2byteFrame;\
2069      =3    ZW_GATEWAY_PEER_REPORT_3BYTE_FRAME                           ZW_GatewayPeerReport3byteFrame;\
2070      =3    ZW_GATEWAY_PEER_REPORT_4BYTE_FRAME                           ZW_GatewayPeerReport4byteFrame;\
2071      =3    ZW_GATEWAY_LOCK_SET_FRAME                                    ZW_GatewayLockSetFrame;\
2072      =3    ZW_UNSOLICITED_DESTINATION_SET_FRAME                         ZW_UnsolicitedDestinationSetFrame;\
2073      =3    ZW_UNSOLICITED_DESTINATION_GET_FRAME                         ZW_UnsolicitedDestinationGetFrame;\
2074      =3    ZW_UNSOLICITED_DESTINATION_REPORT_FRAME                      ZW_UnsolicitedDestinationReportFrame;\
2075      =3    ZW_COMMAND_APPLICATION_NODE_INFO_SET_1BYTE_FRAME             ZW_CommandApplicationNodeInfoSet1byteFrame;
             -\
2076      =3    ZW_COMMAND_APPLICATION_NODE_INFO_SET_2BYTE_FRAME             ZW_CommandApplicationNodeInfoSet2byteFrame;
             -\
2077      =3    ZW_COMMAND_APPLICATION_NODE_INFO_SET_3BYTE_FRAME             ZW_CommandApplicationNodeInfoSet3byteFrame;
             -\
2078      =3    ZW_COMMAND_APPLICATION_NODE_INFO_SET_4BYTE_FRAME             ZW_CommandApplicationNodeInfoSet4byteFrame;
             -\
2079      =3    ZW_COMMAND_APPLICATION_NODE_INFO_GET_FRAME                   ZW_CommandApplicationNodeInfoGetFrame;\
2080      =3    ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_1BYTE_FRAME          ZW_CommandApplicationNodeInfoReport1byteFra
             -me;\
2081      =3    ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_2BYTE_FRAME          ZW_CommandApplicationNodeInfoReport2byteFra
             -me;\
2082      =3    ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_3BYTE_FRAME          ZW_CommandApplicationNodeInfoReport3byteFra
             -me;\
2083      =3    ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_4BYTE_FRAME          ZW_CommandApplicationNodeInfoReport4byteFra
             -me;\
2084      =3  /* Command class Zip Portal */\
2085      =3    ZW_GATEWAY_CONFIGURATION_SET_FRAME                           ZW_GatewayConfigurationSetFrame;\
2086      =3    ZW_GATEWAY_CONFIGURATION_STATUS_FRAME                        ZW_GatewayConfigurationStatusFrame;\
2087      =3    ZW_GATEWAY_CONFIGURATION_GET_FRAME                           ZW_GatewayConfigurationGetFrame;\
2088      =3    ZW_GATEWAY_CONFIGURATION_REPORT_FRAME                        ZW_GatewayConfigurationReportFrame;\
2089      =3  /* Command class Dmx */\
2090      =3    ZW_DMX_ADDRESS_SET_FRAME                                     ZW_DmxAddressSetFrame;\
2091      =3    ZW_DMX_ADDRESS_GET_FRAME                                     ZW_DmxAddressGetFrame;\
2092      =3    ZW_DMX_ADDRESS_REPORT_FRAME                                  ZW_DmxAddressReportFrame;\
2093      =3    ZW_DMX_CAPABILITY_GET_FRAME                                  ZW_DmxCapabilityGetFrame;\
2094      =3    ZW_DMX_CAPABILITY_REPORT_FRAME                               ZW_DmxCapabilityReportFrame;\
2095      =3    ZW_DMX_DATA_1BYTE_FRAME                                      ZW_DmxData1byteFrame;\
2096      =3    ZW_DMX_DATA_2BYTE_FRAME                                      ZW_DmxData2byteFrame;\
2097      =3    ZW_DMX_DATA_3BYTE_FRAME                                      ZW_DmxData3byteFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 44  

2098      =3    ZW_DMX_DATA_4BYTE_FRAME                                      ZW_DmxData4byteFrame;\
2099      =3  /* Command class Barrier Operator */\
2100      =3    ZW_BARRIER_OPERATOR_SET_FRAME                                ZW_BarrierOperatorSetFrame;\
2101      =3    ZW_BARRIER_OPERATOR_GET_FRAME                                ZW_BarrierOperatorGetFrame;\
2102      =3    ZW_BARRIER_OPERATOR_REPORT_FRAME                             ZW_BarrierOperatorReportFrame;\
2103      =3    ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET_FRAME               ZW_BarrierOperatorSignalSupportedGetFrame;\
2104      =3    ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_1BYTE_FRAME      ZW_BarrierOperatorSignalSupportedReport1byt
             -eFrame;\
2105      =3    ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_2BYTE_FRAME      ZW_BarrierOperatorSignalSupportedReport2byt
             -eFrame;\
2106      =3    ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_3BYTE_FRAME      ZW_BarrierOperatorSignalSupportedReport3byt
             -eFrame;\
2107      =3    ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_4BYTE_FRAME      ZW_BarrierOperatorSignalSupportedReport4byt
             -eFrame;\
2108      =3    ZW_BARRIER_OPERATOR_SIGNAL_SET_FRAME                         ZW_BarrierOperatorSignalSetFrame;\
2109      =3    ZW_BARRIER_OPERATOR_SIGNAL_GET_FRAME                         ZW_BarrierOperatorSignalGetFrame;\
2110      =3    ZW_BARRIER_OPERATOR_SIGNAL_REPORT_FRAME                      ZW_BarrierOperatorSignalReportFrame;\
2111      =3  /* Command class Network Management Installation Maintenance */\
2112      =3    ZW_PRIORITY_ROUTE_SET_FRAME                                  ZW_PriorityRouteSetFrame;\
2113      =3    ZW_PRIORITY_ROUTE_GET_FRAME                                  ZW_PriorityRouteGetFrame;\
2114      =3    ZW_PRIORITY_ROUTE_REPORT_FRAME                               ZW_PriorityRouteReportFrame;\
2115      =3    ZW_STATISTICS_GET_FRAME                                      ZW_StatisticsGetFrame;\
2116      =3    VG_STATISTICS_REPORT_1BYTE_VG                                VG_StatisticsReport1byteVGroup;\
2117      =3    VG_STATISTICS_REPORT_2BYTE_VG                                VG_StatisticsReport2byteVGroup;\
2118      =3    VG_STATISTICS_REPORT_3BYTE_VG                                VG_StatisticsReport3byteVGroup;\
2119      =3    VG_STATISTICS_REPORT_4BYTE_VG                                VG_StatisticsReport4byteVGroup;\
2120      =3    ZW_STATISTICS_REPORT_1BYTE_FRAME                             ZW_StatisticsReport1byteFrame;\
2121      =3    ZW_STATISTICS_REPORT_2BYTE_FRAME                             ZW_StatisticsReport2byteFrame;\
2122      =3    ZW_STATISTICS_REPORT_3BYTE_FRAME                             ZW_StatisticsReport3byteFrame;\
2123      =3    ZW_STATISTICS_REPORT_4BYTE_FRAME                             ZW_StatisticsReport4byteFrame;\
2124      =3    ZW_STATISTICS_CLEAR_FRAME                                    ZW_StatisticsClearFrame;\
2125      =3  /* Command class Network Management Installation Maintenance V2 */\
2126      =3    ZW_PRIORITY_ROUTE_SET_V2_FRAME                               ZW_PriorityRouteSetV2Frame;\
2127      =3    ZW_PRIORITY_ROUTE_GET_V2_FRAME                               ZW_PriorityRouteGetV2Frame;\
2128      =3    ZW_PRIORITY_ROUTE_REPORT_V2_FRAME                            ZW_PriorityRouteReportV2Frame;\
2129      =3    ZW_STATISTICS_GET_V2_FRAME                                   ZW_StatisticsGetV2Frame;\
2130      =3    VG_STATISTICS_REPORT_1BYTE_V2_VG                             VG_StatisticsReport1byteV2VGroup;\
2131      =3    VG_STATISTICS_REPORT_2BYTE_V2_VG                             VG_StatisticsReport2byteV2VGroup;\
2132      =3    VG_STATISTICS_REPORT_3BYTE_V2_VG                             VG_StatisticsReport3byteV2VGroup;\
2133      =3    VG_STATISTICS_REPORT_4BYTE_V2_VG                             VG_StatisticsReport4byteV2VGroup;\
2134      =3    ZW_STATISTICS_REPORT_1BYTE_V2_FRAME                          ZW_StatisticsReport1byteV2Frame;\
2135      =3    ZW_STATISTICS_REPORT_2BYTE_V2_FRAME                          ZW_StatisticsReport2byteV2Frame;\
2136      =3    ZW_STATISTICS_REPORT_3BYTE_V2_FRAME                          ZW_StatisticsReport3byteV2Frame;\
2137      =3    ZW_STATISTICS_REPORT_4BYTE_V2_FRAME                          ZW_StatisticsReport4byteV2Frame;\
2138      =3    ZW_STATISTICS_CLEAR_V2_FRAME                                 ZW_StatisticsClearV2Frame;\
2139      =3    ZW_RSSI_GET_V2_FRAME                                         ZW_RssiGetV2Frame;\
2140      =3    ZW_RSSI_REPORT_V2_FRAME                                      ZW_RssiReportV2Frame;\
2141      =3  /* Command class Zip Naming */\
2142      =3    ZW_ZIP_NAMING_NAME_SET_1BYTE_FRAME                           ZW_ZipNamingNameSet1byteFrame;\
2143      =3    ZW_ZIP_NAMING_NAME_SET_2BYTE_FRAME                           ZW_ZipNamingNameSet2byteFrame;\
2144      =3    ZW_ZIP_NAMING_NAME_SET_3BYTE_FRAME                           ZW_ZipNamingNameSet3byteFrame;\
2145      =3    ZW_ZIP_NAMING_NAME_SET_4BYTE_FRAME                           ZW_ZipNamingNameSet4byteFrame;\
2146      =3    ZW_ZIP_NAMING_NAME_GET_FRAME                                 ZW_ZipNamingNameGetFrame;\
2147      =3    ZW_ZIP_NAMING_NAME_REPORT_1BYTE_FRAME                        ZW_ZipNamingNameReport1byteFrame;\
2148      =3    ZW_ZIP_NAMING_NAME_REPORT_2BYTE_FRAME                        ZW_ZipNamingNameReport2byteFrame;\
2149      =3    ZW_ZIP_NAMING_NAME_REPORT_3BYTE_FRAME                        ZW_ZipNamingNameReport3byteFrame;\
2150      =3    ZW_ZIP_NAMING_NAME_REPORT_4BYTE_FRAME                        ZW_ZipNamingNameReport4byteFrame;\
2151      =3    ZW_ZIP_NAMING_LOCATION_SET_1BYTE_FRAME                       ZW_ZipNamingLocationSet1byteFrame;\
2152      =3    ZW_ZIP_NAMING_LOCATION_SET_2BYTE_FRAME                       ZW_ZipNamingLocationSet2byteFrame;\
2153      =3    ZW_ZIP_NAMING_LOCATION_SET_3BYTE_FRAME                       ZW_ZipNamingLocationSet3byteFrame;\
2154      =3    ZW_ZIP_NAMING_LOCATION_SET_4BYTE_FRAME                       ZW_ZipNamingLocationSet4byteFrame;\
2155      =3    ZW_ZIP_NAMING_LOCATION_GET_FRAME                             ZW_ZipNamingLocationGetFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 45  

2156      =3    ZW_ZIP_NAMING_LOCATION_REPORT_1BYTE_FRAME                    ZW_ZipNamingLocationReport1byteFrame;\
2157      =3    ZW_ZIP_NAMING_LOCATION_REPORT_2BYTE_FRAME                    ZW_ZipNamingLocationReport2byteFrame;\
2158      =3    ZW_ZIP_NAMING_LOCATION_REPORT_3BYTE_FRAME                    ZW_ZipNamingLocationReport3byteFrame;\
2159      =3    ZW_ZIP_NAMING_LOCATION_REPORT_4BYTE_FRAME                    ZW_ZipNamingLocationReport4byteFrame;\
2160      =3  /* Command class Mailbox */\
2161      =3    ZW_MAILBOX_CONFIGURATION_GET_FRAME                           ZW_MailboxConfigurationGetFrame;\
2162      =3    ZW_MAILBOX_CONFIGURATION_SET_FRAME                           ZW_MailboxConfigurationSetFrame;\
2163      =3    ZW_MAILBOX_CONFIGURATION_REPORT_FRAME                        ZW_MailboxConfigurationReportFrame;\
2164      =3    ZW_MAILBOX_QUEUE_1BYTE_FRAME                                 ZW_MailboxQueue1byteFrame;\
2165      =3    ZW_MAILBOX_QUEUE_2BYTE_FRAME                                 ZW_MailboxQueue2byteFrame;\
2166      =3    ZW_MAILBOX_QUEUE_3BYTE_FRAME                                 ZW_MailboxQueue3byteFrame;\
2167      =3    ZW_MAILBOX_QUEUE_4BYTE_FRAME                                 ZW_MailboxQueue4byteFrame;\
2168      =3    ZW_MAILBOX_WAKEUP_NOTIFICATION_FRAME                         ZW_MailboxWakeupNotificationFrame;\
2169      =3    ZW_MAILBOX_NODE_FAILING_FRAME                                ZW_MailboxNodeFailingFrame;\
2170      =3  /* Command class Window Covering */\
2171      =3    ZW_WINDOW_COVERING_SUPPORTED_GET_FRAME                       ZW_WindowCoveringSupportedGetFrame;\
2172      =3    ZW_WINDOW_COVERING_SUPPORTED_REPORT_1BYTE_FRAME              ZW_WindowCoveringSupportedReport1byteFrame;
             -\
2173      =3    ZW_WINDOW_COVERING_SUPPORTED_REPORT_2BYTE_FRAME              ZW_WindowCoveringSupportedReport2byteFrame;
             -\
2174      =3    ZW_WINDOW_COVERING_SUPPORTED_REPORT_3BYTE_FRAME              ZW_WindowCoveringSupportedReport3byteFrame;
             -\
2175      =3    ZW_WINDOW_COVERING_SUPPORTED_REPORT_4BYTE_FRAME              ZW_WindowCoveringSupportedReport4byteFrame;
             -\
2176      =3    ZW_WINDOW_COVERING_GET_FRAME                                 ZW_WindowCoveringGetFrame;\
2177      =3    ZW_WINDOW_COVERING_REPORT_FRAME                              ZW_WindowCoveringReportFrame;\
2178      =3    VG_WINDOW_COVERING_SET_VG                                    VG_WindowCoveringSetVGroup;\
2179      =3    ZW_WINDOW_COVERING_SET_1BYTE_FRAME                           ZW_WindowCoveringSet1byteFrame;\
2180      =3    ZW_WINDOW_COVERING_SET_2BYTE_FRAME                           ZW_WindowCoveringSet2byteFrame;\
2181      =3    ZW_WINDOW_COVERING_SET_3BYTE_FRAME                           ZW_WindowCoveringSet3byteFrame;\
2182      =3    ZW_WINDOW_COVERING_SET_4BYTE_FRAME                           ZW_WindowCoveringSet4byteFrame;\
2183      =3    ZW_WINDOW_COVERING_START_LEVEL_CHANGE_FRAME                  ZW_WindowCoveringStartLevelChangeFrame;\
2184      =3    ZW_WINDOW_COVERING_STOP_LEVEL_CHANGE_FRAME                   ZW_WindowCoveringStopLevelChangeFrame;\
2185      =3  /* Command class Security 2 */\
2186      =3    ZW_SECURITY_2_NONCE_GET_FRAME                                ZW_Security2NonceGetFrame;\
2187      =3    ZW_SECURITY_2_NONCE_REPORT_FRAME                             ZW_Security2NonceReportFrame;\
2188      =3    VG_SECURITY_2_MESSAGE_ENCAPSULATION_1BYTE_VG                 VG_Security2MessageEncapsulation1byteVGroup
             -;\
2189      =3    VG_SECURITY_2_MESSAGE_ENCAPSULATION_2BYTE_VG                 VG_Security2MessageEncapsulation2byteVGroup
             -;\
2190      =3    VG_SECURITY_2_MESSAGE_ENCAPSULATION_3BYTE_VG                 VG_Security2MessageEncapsulation3byteVGroup
             -;\
2191      =3    VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG                 VG_Security2MessageEncapsulation4byteVGroup
             -;\
2192      =3    ZW_SECURITY_2_MESSAGE_ENCAPSULATION_1BYTE_FRAME              ZW_Security2MessageEncapsulation1byteFrame;
             -\
2193      =3    ZW_SECURITY_2_MESSAGE_ENCAPSULATION_2BYTE_FRAME              ZW_Security2MessageEncapsulation2byteFrame;
             -\
2194      =3    ZW_SECURITY_2_MESSAGE_ENCAPSULATION_3BYTE_FRAME              ZW_Security2MessageEncapsulation3byteFrame;
             -\
2195      =3    ZW_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_FRAME              ZW_Security2MessageEncapsulation4byteFrame;
             -\
2196      =3    ZW_KEX_GET_FRAME                                             ZW_KexGetFrame;\
2197      =3    ZW_KEX_REPORT_FRAME                                          ZW_KexReportFrame;\
2198      =3    ZW_KEX_SET_FRAME                                             ZW_KexSetFrame;\
2199      =3    ZW_KEX_FAIL_FRAME                                            ZW_KexFailFrame;\
2200      =3    ZW_PUBLIC_KEY_REPORT_1BYTE_FRAME                             ZW_PublicKeyReport1byteFrame;\
2201      =3    ZW_PUBLIC_KEY_REPORT_2BYTE_FRAME                             ZW_PublicKeyReport2byteFrame;\
2202      =3    ZW_PUBLIC_KEY_REPORT_3BYTE_FRAME                             ZW_PublicKeyReport3byteFrame;\
2203      =3    ZW_PUBLIC_KEY_REPORT_4BYTE_FRAME                             ZW_PublicKeyReport4byteFrame;\
2204      =3    ZW_SECURITY_2_NETWORK_KEY_GET_FRAME                          ZW_Security2NetworkKeyGetFrame;\
2205      =3    ZW_SECURITY_2_NETWORK_KEY_REPORT_FRAME                       ZW_Security2NetworkKeyReportFrame;\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 46  

2206      =3    ZW_SECURITY_2_NETWORK_KEY_VERIFY_FRAME                       ZW_Security2NetworkKeyVerifyFrame;\
2207      =3    ZW_SECURITY_2_TRANSFER_END_FRAME                             ZW_Security2TransferEndFrame;\
2208      =3    ZW_SECURITY_2_COMMANDS_SUPPORTED_GET_FRAME                   ZW_Security2CommandsSupportedGetFrame;\
2209      =3    ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_1BYTE_FRAME          ZW_Security2CommandsSupportedReport1byteFra
             -me;\
2210      =3    ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_2BYTE_FRAME          ZW_Security2CommandsSupportedReport2byteFra
             -me;\
2211      =3    ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_3BYTE_FRAME          ZW_Security2CommandsSupportedReport3byteFra
             -me;\
2212      =3    ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_4BYTE_FRAME          ZW_Security2CommandsSupportedReport4byteFra
             -me;\
2213      =3    ZW_SECURITY_2_CAPABILITIES_GET_FRAME                         ZW_Security2CapabilitiesGetFrame;\
2214      =3    ZW_SECURITY_2_CAPABILITIES_REPORT_FRAME                      ZW_Security2CapabilitiesReportFrame;\
2215      =3  /* Command class Irrigation */\
2216      =3    ZW_IRRIGATION_SYSTEM_INFO_GET_FRAME                          ZW_IrrigationSystemInfoGetFrame;\
2217      =3    ZW_IRRIGATION_SYSTEM_INFO_REPORT_FRAME                       ZW_IrrigationSystemInfoReportFrame;\
2218      =3    ZW_IRRIGATION_SYSTEM_STATUS_GET_FRAME                        ZW_IrrigationSystemStatusGetFrame;\
2219      =3    ZW_IRRIGATION_SYSTEM_STATUS_REPORT_1BYTE_FRAME               ZW_IrrigationSystemStatusReport1byteFrame;\
2220      =3    ZW_IRRIGATION_SYSTEM_STATUS_REPORT_2BYTE_FRAME               ZW_IrrigationSystemStatusReport2byteFrame;\
2221      =3    ZW_IRRIGATION_SYSTEM_STATUS_REPORT_3BYTE_FRAME               ZW_IrrigationSystemStatusReport3byteFrame;\
2222      =3    ZW_IRRIGATION_SYSTEM_STATUS_REPORT_4BYTE_FRAME               ZW_IrrigationSystemStatusReport4byteFrame;\
2223      =3    ZW_IRRIGATION_SYSTEM_CONFIG_SET_1BYTE_FRAME                  ZW_IrrigationSystemConfigSet1byteFrame;\
2224      =3    ZW_IRRIGATION_SYSTEM_CONFIG_SET_2BYTE_FRAME                  ZW_IrrigationSystemConfigSet2byteFrame;\
2225      =3    ZW_IRRIGATION_SYSTEM_CONFIG_SET_3BYTE_FRAME                  ZW_IrrigationSystemConfigSet3byteFrame;\
2226      =3    ZW_IRRIGATION_SYSTEM_CONFIG_SET_4BYTE_FRAME                  ZW_IrrigationSystemConfigSet4byteFrame;\
2227      =3    ZW_IRRIGATION_SYSTEM_CONFIG_GET_FRAME                        ZW_IrrigationSystemConfigGetFrame;\
2228      =3    ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_1BYTE_FRAME               ZW_IrrigationSystemConfigReport1byteFrame;\
2229      =3    ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_2BYTE_FRAME               ZW_IrrigationSystemConfigReport2byteFrame;\
2230      =3    ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_3BYTE_FRAME               ZW_IrrigationSystemConfigReport3byteFrame;\
2231      =3    ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_4BYTE_FRAME               ZW_IrrigationSystemConfigReport4byteFrame;\
2232      =3    ZW_IRRIGATION_VALVE_INFO_GET_FRAME                           ZW_IrrigationValveInfoGetFrame;\
2233      =3    ZW_IRRIGATION_VALVE_INFO_REPORT_FRAME                        ZW_IrrigationValveInfoReportFrame;\
2234      =3    ZW_IRRIGATION_VALVE_CONFIG_SET_1BYTE_FRAME                   ZW_IrrigationValveConfigSet1byteFrame;\
2235      =3    ZW_IRRIGATION_VALVE_CONFIG_SET_2BYTE_FRAME                   ZW_IrrigationValveConfigSet2byteFrame;\
2236      =3    ZW_IRRIGATION_VALVE_CONFIG_SET_3BYTE_FRAME                   ZW_IrrigationValveConfigSet3byteFrame;\
2237      =3    ZW_IRRIGATION_VALVE_CONFIG_SET_4BYTE_FRAME                   ZW_IrrigationValveConfigSet4byteFrame;\
2238      =3    ZW_IRRIGATION_VALVE_CONFIG_GET_FRAME                         ZW_IrrigationValveConfigGetFrame;\
2239      =3    ZW_IRRIGATION_VALVE_CONFIG_REPORT_1BYTE_FRAME                ZW_IrrigationValveConfigReport1byteFrame;\
2240      =3    ZW_IRRIGATION_VALVE_CONFIG_REPORT_2BYTE_FRAME                ZW_IrrigationValveConfigReport2byteFrame;\
2241      =3    ZW_IRRIGATION_VALVE_CONFIG_REPORT_3BYTE_FRAME                ZW_IrrigationValveConfigReport3byteFrame;\
2242      =3    ZW_IRRIGATION_VALVE_CONFIG_REPORT_4BYTE_FRAME                ZW_IrrigationValveConfigReport4byteFrame;\
2243      =3    ZW_IRRIGATION_VALVE_RUN_FRAME                                ZW_IrrigationValveRunFrame;\
2244      =3    VG_IRRIGATION_VALVE_TABLE_SET_VG                             VG_IrrigationValveTableSetVGroup;\
2245      =3    ZW_IRRIGATION_VALVE_TABLE_SET_1BYTE_FRAME                    ZW_IrrigationValveTableSet1byteFrame;\
2246      =3    ZW_IRRIGATION_VALVE_TABLE_SET_2BYTE_FRAME                    ZW_IrrigationValveTableSet2byteFrame;\
2247      =3    ZW_IRRIGATION_VALVE_TABLE_SET_3BYTE_FRAME                    ZW_IrrigationValveTableSet3byteFrame;\
2248      =3    ZW_IRRIGATION_VALVE_TABLE_SET_4BYTE_FRAME                    ZW_IrrigationValveTableSet4byteFrame;\
2249      =3    ZW_IRRIGATION_VALVE_TABLE_GET_FRAME                          ZW_IrrigationValveTableGetFrame;\
2250      =3    VG_IRRIGATION_VALVE_TABLE_REPORT_VG                          VG_IrrigationValveTableReportVGroup;\
2251      =3    ZW_IRRIGATION_VALVE_TABLE_REPORT_1BYTE_FRAME                 ZW_IrrigationValveTableReport1byteFrame;\
2252      =3    ZW_IRRIGATION_VALVE_TABLE_REPORT_2BYTE_FRAME                 ZW_IrrigationValveTableReport2byteFrame;\
2253      =3    ZW_IRRIGATION_VALVE_TABLE_REPORT_3BYTE_FRAME                 ZW_IrrigationValveTableReport3byteFrame;\
2254      =3    ZW_IRRIGATION_VALVE_TABLE_REPORT_4BYTE_FRAME                 ZW_IrrigationValveTableReport4byteFrame;\
2255      =3    ZW_IRRIGATION_VALVE_TABLE_RUN_1BYTE_FRAME                    ZW_IrrigationValveTableRun1byteFrame;\
2256      =3    ZW_IRRIGATION_VALVE_TABLE_RUN_2BYTE_FRAME                    ZW_IrrigationValveTableRun2byteFrame;\
2257      =3    ZW_IRRIGATION_VALVE_TABLE_RUN_3BYTE_FRAME                    ZW_IrrigationValveTableRun3byteFrame;\
2258      =3    ZW_IRRIGATION_VALVE_TABLE_RUN_4BYTE_FRAME                    ZW_IrrigationValveTableRun4byteFrame;\
2259      =3    ZW_IRRIGATION_SYSTEM_SHUTOFF_FRAME                           ZW_IrrigationSystemShutoffFrame;\
2260      =3  /* Command class Supervision */\
2261      =3    ZW_SUPERVISION_GET_FRAME                                     ZW_SupervisionGetFrame;\
2262      =3    ZW_SUPERVISION_REPORT_FRAME                                  ZW_SupervisionReportFrame;\
2263      =3  /* Command class Humidity Control Setpoint */\
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 47  

2264      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SET_1BYTE_FRAME                 ZW_HumidityControlSetpointSet1byteFrame;\
2265      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SET_2BYTE_FRAME                 ZW_HumidityControlSetpointSet2byteFrame;\
2266      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SET_3BYTE_FRAME                 ZW_HumidityControlSetpointSet3byteFrame;\
2267      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SET_4BYTE_FRAME                 ZW_HumidityControlSetpointSet4byteFrame;\
2268      =3    ZW_HUMIDITY_CONTROL_SETPOINT_GET_FRAME                       ZW_HumidityControlSetpointGetFrame;\
2269      =3    ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_1BYTE_FRAME              ZW_HumidityControlSetpointReport1byteFrame;
             -\
2270      =3    ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_2BYTE_FRAME              ZW_HumidityControlSetpointReport2byteFrame;
             -\
2271      =3    ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_3BYTE_FRAME              ZW_HumidityControlSetpointReport3byteFrame;
             -\
2272      =3    ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_4BYTE_FRAME              ZW_HumidityControlSetpointReport4byteFrame;
             -\
2273      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET_FRAME             ZW_HumidityControlSetpointSupportedGetFrame
             -;\
2274      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT_FRAME          ZW_HumidityControlSetpointSupportedReportFr
             -ame;\
2275      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_FRAME       ZW_HumidityControlSetpointScaleSupportedGet
             -Frame;\
2276      =3    ZW_HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_FRAME    ZW_HumidityControlSetpointScaleSupportedRep
             -ortFrame;\
2277      =3    ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_FRAME          ZW_HumidityControlSetpointCapabilitiesGetFr
             -ame;\
2278      =3    ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_1BYTE_FRAME ZW_HumidityControlSetpointCapabilitiesRepor
             -t1byteFrame;\
2279      =3    ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_2BYTE_FRAME ZW_HumidityControlSetpointCapabilitiesRepor
             -t2byteFrame;\
2280      =3    ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_3BYTE_FRAME ZW_HumidityControlSetpointCapabilitiesRepor
             -t3byteFrame;\
2281      =3    ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_4BYTE_FRAME ZW_HumidityControlSetpointCapabilitiesRepor
             -t4byteFrame;\
2282      =3  /* Command class Humidity Control Mode */\
2283      =3    ZW_HUMIDITY_CONTROL_MODE_SET_FRAME                           ZW_HumidityControlModeSetFrame;\
2284      =3    ZW_HUMIDITY_CONTROL_MODE_GET_FRAME                           ZW_HumidityControlModeGetFrame;\
2285      =3    ZW_HUMIDITY_CONTROL_MODE_REPORT_FRAME                        ZW_HumidityControlModeReportFrame;\
2286      =3    ZW_HUMIDITY_CONTROL_MODE_SUPPORTED_GET_FRAME                 ZW_HumidityControlModeSupportedGetFrame;\
2287      =3    ZW_HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT_FRAME              ZW_HumidityControlModeSupportedReportFrame;
             -\
2288      =3  /* Command class Humidity Control Operating State */\
2289      =3    ZW_HUMIDITY_CONTROL_OPERATING_STATE_GET_FRAME                ZW_HumidityControlOperatingStateGetFrame;\
2290      =3    ZW_HUMIDITY_CONTROL_OPERATING_STATE_REPORT_FRAME             ZW_HumidityControlOperatingStateReportFrame
             -;\
2291      =3  /* Command class Entry Control */\
2292      =3    ZW_ENTRY_CONTROL_NOTIFICATION_1BYTE_FRAME                    ZW_EntryControlNotification1byteFrame;\
2293      =3    ZW_ENTRY_CONTROL_NOTIFICATION_2BYTE_FRAME                    ZW_EntryControlNotification2byteFrame;\
2294      =3    ZW_ENTRY_CONTROL_NOTIFICATION_3BYTE_FRAME                    ZW_EntryControlNotification3byteFrame;\
2295      =3    ZW_ENTRY_CONTROL_NOTIFICATION_4BYTE_FRAME                    ZW_EntryControlNotification4byteFrame;\
2296      =3    ZW_ENTRY_CONTROL_KEY_SUPPORTED_GET_FRAME                     ZW_EntryControlKeySupportedGetFrame;\
2297      =3    ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_1BYTE_FRAME            ZW_EntryControlKeySupportedReport1byteFrame
             -;\
2298      =3    ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_2BYTE_FRAME            ZW_EntryControlKeySupportedReport2byteFrame
             -;\
2299      =3    ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_3BYTE_FRAME            ZW_EntryControlKeySupportedReport3byteFrame
             -;\
2300      =3    ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_4BYTE_FRAME            ZW_EntryControlKeySupportedReport4byteFrame
             -;\
2301      =3    ZW_ENTRY_CONTROL_EVENT_SUPPORTED_GET_FRAME                   ZW_EntryControlEventSupportedGetFrame;\
2302      =3    ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_1BYTE_FRAME          ZW_EntryControlEventSupportedReport1byteFra
             -me;\
2303      =3    ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_2BYTE_FRAME          ZW_EntryControlEventSupportedReport2byteFra
             -me;\
2304      =3    ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_3BYTE_FRAME          ZW_EntryControlEventSupportedReport3byteFra
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 48  

             -me;\
2305      =3    ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_4BYTE_FRAME          ZW_EntryControlEventSupportedReport4byteFra
             -me;\
2306      =3    ZW_ENTRY_CONTROL_CONFIGURATION_SET_FRAME                     ZW_EntryControlConfigurationSetFrame;\
2307      =3    ZW_ENTRY_CONTROL_CONFIGURATION_GET_FRAME                     ZW_EntryControlConfigurationGetFrame;\
2308      =3    ZW_ENTRY_CONTROL_CONFIGURATION_REPORT_FRAME                  ZW_EntryControlConfigurationReportFrame;\
2309      =3  /* Command class Inclusion Controller */\
2310      =3    ZW_INITIATE_FRAME                                            ZW_InitiateFrame;\
2311      =3    ZW_COMPLETE_FRAME                                            ZW_CompleteFrame;\
2312      =3  /* Command class Node Provisioning */\
2313      =3    ZW_NODE_PROVISION_SET_1BYTE_FRAME                            ZW_NodeProvisionSet1byteFrame;\
2314      =3    ZW_NODE_PROVISION_SET_2BYTE_FRAME                            ZW_NodeProvisionSet2byteFrame;\
2315      =3    ZW_NODE_PROVISION_SET_3BYTE_FRAME                            ZW_NodeProvisionSet3byteFrame;\
2316      =3    ZW_NODE_PROVISION_SET_4BYTE_FRAME                            ZW_NodeProvisionSet4byteFrame;\
2317      =3    ZW_NODE_PROVISION_DELETE_1BYTE_FRAME                         ZW_NodeProvisionDelete1byteFrame;\
2318      =3    ZW_NODE_PROVISION_DELETE_2BYTE_FRAME                         ZW_NodeProvisionDelete2byteFrame;\
2319      =3    ZW_NODE_PROVISION_DELETE_3BYTE_FRAME                         ZW_NodeProvisionDelete3byteFrame;\
2320      =3    ZW_NODE_PROVISION_DELETE_4BYTE_FRAME                         ZW_NodeProvisionDelete4byteFrame;\
2321      =3    ZW_NODE_PROVISIONING_LIST_ITERATION_GET_FRAME                ZW_NodeProvisioningListIterationGetFrame;\
2322      =3    ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_1BYTE_FRAME       ZW_NodeProvisioningListIterationReport1byte
             -Frame;\
2323      =3    ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_2BYTE_FRAME       ZW_NodeProvisioningListIterationReport2byte
             -Frame;\
2324      =3    ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_3BYTE_FRAME       ZW_NodeProvisioningListIterationReport3byte
             -Frame;\
2325      =3    ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_FRAME       ZW_NodeProvisioningListIterationReport4byte
             -Frame;\
2326      =3    ZW_NODE_PROVISION_GET_1BYTE_FRAME                            ZW_NodeProvisionGet1byteFrame;\
2327      =3    ZW_NODE_PROVISION_GET_2BYTE_FRAME                            ZW_NodeProvisionGet2byteFrame;\
2328      =3    ZW_NODE_PROVISION_GET_3BYTE_FRAME                            ZW_NodeProvisionGet3byteFrame;\
2329      =3    ZW_NODE_PROVISION_GET_4BYTE_FRAME                            ZW_NodeProvisionGet4byteFrame;\
2330      =3    ZW_NODE_PROVISION_REPORT_1BYTE_FRAME                         ZW_NodeProvisionReport1byteFrame;\
2331      =3    ZW_NODE_PROVISION_REPORT_2BYTE_FRAME                         ZW_NodeProvisionReport2byteFrame;\
2332      =3    ZW_NODE_PROVISION_REPORT_3BYTE_FRAME                         ZW_NodeProvisionReport3byteFrame;\
2333      =3    ZW_NODE_PROVISION_REPORT_4BYTE_FRAME                         ZW_NodeProvisionReport4byteFrame;\
2334      =3  
2335      =3  
2336      =3  /************ Basic Device Class identifiers **************/
2337      =3  #define BASIC_TYPE_CONTROLLER                                                            0x01 /*Node is a 
             -portable controller */
2338      =3  #define BASIC_TYPE_ROUTING_SLAVE                                                         0x04 /*Node is a 
             -slave with routing capabilities*/
2339      =3  #define BASIC_TYPE_SLAVE                                                                 0x03 /*Node is a 
             -slave*/
2340      =3  #define BASIC_TYPE_STATIC_CONTROLLER                                                     0x02 /*Node is a 
             -static controller*/
2341      =3  
2342      =3  
2343      =3  /***** Generic and Specific Device Class identifiers ******/
2344      =3  /* Device class Av Control Point */
2345      =3  #define GENERIC_TYPE_AV_CONTROL_POINT                                                    0x03 /*AV Control
             - Point*/
2346      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2347      =3  #define SPECIFIC_TYPE_DOORBELL                                                           0x12
2348      =3  #define SPECIFIC_TYPE_SATELLITE_RECEIVER                                                 0x04 /*Satellite 
             -Receiver*/
2349      =3  #define SPECIFIC_TYPE_SATELLITE_RECEIVER_V2                                              0x11 /*Satellite 
             -Receiver V2*/
2350      =3  
2351      =3  /* Device class Display */
2352      =3  #define GENERIC_TYPE_DISPLAY                                                             0x04
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 49  

2353      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2354      =3  #define SPECIFIC_TYPE_SIMPLE_DISPLAY                                                     0x01 /*Display (s
             -imple) Device Type*/
2355      =3  
2356      =3  /* Device class Entry Control */
2357      =3  #define GENERIC_TYPE_ENTRY_CONTROL                                                       0x40 /*Entry Cont
             -rol*/
2358      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2359      =3  #define SPECIFIC_TYPE_DOOR_LOCK                                                          0x01 /*Door Lock*
             -/
2360      =3  #define SPECIFIC_TYPE_ADVANCED_DOOR_LOCK                                                 0x02 /*Advanced D
             -oor Lock*/
2361      =3  #define SPECIFIC_TYPE_SECURE_KEYPAD_DOOR_LOCK                                            0x03 /*Door Lock 
             -(keypad âlever) Device Type*/
2362      =3  #define SPECIFIC_TYPE_SECURE_KEYPAD_DOOR_LOCK_DEADBOLT                                   0x04 /*Door Lock 
             -(keypad â deadbolt) Device Type*/
2363      =3  #define SPECIFIC_TYPE_SECURE_DOOR                                                        0x05 /*Barrier Op
             -erator Specific Device Class*/
2364      =3  #define SPECIFIC_TYPE_SECURE_GATE                                                        0x06 /*Barrier Op
             -erator Specific Device Class*/
2365      =3  #define SPECIFIC_TYPE_SECURE_BARRIER_ADDON                                               0x07 /*Barrier Op
             -erator Specific Device Class*/
2366      =3  #define SPECIFIC_TYPE_SECURE_BARRIER_OPEN_ONLY                                           0x08 /*Barrier Op
             -erator Specific Device Class*/
2367      =3  #define SPECIFIC_TYPE_SECURE_BARRIER_CLOSE_ONLY                                          0x09 /*Barrier Op
             -erator Specific Device Class*/
2368      =3  #define SPECIFIC_TYPE_SECURE_LOCKBOX                                                     0x0A /*SDS12724*/
2369      =3  #define SPECIFIC_TYPE_SECURE_KEYPAD                                                      0x0B
2370      =3  
2371      =3  /* Device class Generic Controller */
2372      =3  #define GENERIC_TYPE_GENERIC_CONTROLLER                                                  0x01 /*Remote Con
             -troller*/
2373      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2374      =3  #define SPECIFIC_TYPE_PORTABLE_REMOTE_CONTROLLER                                         0x01 /*Remote Con
             -trol (Multi Purpose) Device Type*/
2375      =3  #define SPECIFIC_TYPE_PORTABLE_SCENE_CONTROLLER                                          0x02 /*Portable S
             -cene Controller*/
2376      =3  #define SPECIFIC_TYPE_PORTABLE_INSTALLER_TOOL                                            0x03
2377      =3  #define SPECIFIC_TYPE_REMOTE_CONTROL_AV                                                  0x04 /*Remote Con
             -trol (AV) Device Type*/
2378      =3  #define SPECIFIC_TYPE_REMOTE_CONTROL_SIMPLE                                              0x06 /*Remote Con
             -trol (Simple) Device Type*/
2379      =3  
2380      =3  /* Device class Meter */
2381      =3  #define GENERIC_TYPE_METER                                                               0x31 /*Meter*/
2382      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2383      =3  #define SPECIFIC_TYPE_SIMPLE_METER                                                       0x01 /*Sub Energy
             - Meter Device Type*/
2384      =3  #define SPECIFIC_TYPE_ADV_ENERGY_CONTROL                                                 0x02 /*Whole Home
             - Energy Meter (Advanced) Device Type*/
2385      =3  #define SPECIFIC_TYPE_WHOLE_HOME_METER_SIMPLE                                            0x03 /*Whole Home
             - Meter (Simple) Device Type*/
2386      =3  
2387      =3  /* Device class Meter Pulse */
2388      =3  #define GENERIC_TYPE_METER_PULSE                                                         0x30 /*Pulse Mete
             -r*/
2389      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 50  

2390      =3  
2391      =3  /* Device class Non Interoperable */
2392      =3  #define GENERIC_TYPE_NON_INTEROPERABLE                                                   0xFF /*Non intero
             -perable*/
2393      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2394      =3  
2395      =3  /* Device class Repeater Slave */
2396      =3  #define GENERIC_TYPE_REPEATER_SLAVE                                                      0x0F /*Repeater S
             -lave*/
2397      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2398      =3  #define SPECIFIC_TYPE_REPEATER_SLAVE                                                     0x01 /*Basic Repe
             -ater Slave*/
2399      =3  #define SPECIFIC_TYPE_VIRTUAL_NODE                                                       0x02
2400      =3  
2401      =3  /* Device class Security Panel */
2402      =3  #define GENERIC_TYPE_SECURITY_PANEL                                                      0x17
2403      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2404      =3  #define SPECIFIC_TYPE_ZONED_SECURITY_PANEL                                               0x01
2405      =3  
2406      =3  /* Device class Semi Interoperable */
2407      =3  #define GENERIC_TYPE_SEMI_INTEROPERABLE                                                  0x50 /*Semi Inter
             -operable*/
2408      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2409      =3  #define SPECIFIC_TYPE_ENERGY_PRODUCTION                                                  0x01 /*Energy Pro
             -duction*/
2410      =3  
2411      =3  /* Device class Sensor Alarm */
2412      =3  #define GENERIC_TYPE_SENSOR_ALARM                                                        0xA1
2413      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2414      =3  #define SPECIFIC_TYPE_ADV_ZENSOR_NET_ALARM_SENSOR                                        0x05
2415      =3  #define SPECIFIC_TYPE_ADV_ZENSOR_NET_SMOKE_SENSOR                                        0x0A
2416      =3  #define SPECIFIC_TYPE_BASIC_ROUTING_ALARM_SENSOR                                         0x01
2417      =3  #define SPECIFIC_TYPE_BASIC_ROUTING_SMOKE_SENSOR                                         0x06
2418      =3  #define SPECIFIC_TYPE_BASIC_ZENSOR_NET_ALARM_SENSOR                                      0x03
2419      =3  #define SPECIFIC_TYPE_BASIC_ZENSOR_NET_SMOKE_SENSOR                                      0x08
2420      =3  #define SPECIFIC_TYPE_ROUTING_ALARM_SENSOR                                               0x02
2421      =3  #define SPECIFIC_TYPE_ROUTING_SMOKE_SENSOR                                               0x07
2422      =3  #define SPECIFIC_TYPE_ZENSOR_NET_ALARM_SENSOR                                            0x04
2423      =3  #define SPECIFIC_TYPE_ZENSOR_NET_SMOKE_SENSOR                                            0x09
2424      =3  #define SPECIFIC_TYPE_ALARM_SENSOR                                                       0x0B /*Sensor (Al
             -arm) Device Type*/
2425      =3  
2426      =3  /* Device class Sensor Binary */
2427      =3  #define GENERIC_TYPE_SENSOR_BINARY                                                       0x20 /*Binary Sen
             -sor*/
2428      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2429      =3  #define SPECIFIC_TYPE_ROUTING_SENSOR_BINARY                                              0x01 /*Routing Bi
             -nary Sensor*/
2430      =3  
2431      =3  /* Device class Sensor Multilevel */
2432      =3  #define GENERIC_TYPE_SENSOR_MULTILEVEL                                                   0x21 /*Multilevel
             - Sensor*/
2433      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2434      =3  #define SPECIFIC_TYPE_ROUTING_SENSOR_MULTILEVEL                                          0x01 /*Sensor (Mu
             -ltilevel) Device Type*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 51  

2435      =3  #define SPECIFIC_TYPE_CHIMNEY_FAN                                                        0x02
2436      =3  
2437      =3  /* Device class Static Controller */
2438      =3  #define GENERIC_TYPE_STATIC_CONTROLLER                                                   0x02 /*Static Con
             -troller*/
2439      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2440      =3  #define SPECIFIC_TYPE_PC_CONTROLLER                                                      0x01 /*Central Co
             -ntroller Device Type*/
2441      =3  #define SPECIFIC_TYPE_SCENE_CONTROLLER                                                   0x02 /*Scene Cont
             -roller*/
2442      =3  #define SPECIFIC_TYPE_STATIC_INSTALLER_TOOL                                              0x03
2443      =3  #define SPECIFIC_TYPE_SET_TOP_BOX                                                        0x04 /*Set Top Bo
             -x Device Type*/
2444      =3  #define SPECIFIC_TYPE_SUB_SYSTEM_CONTROLLER                                              0x05 /*Sub System
             - Controller Device Type*/
2445      =3  #define SPECIFIC_TYPE_TV                                                                 0x06 /*TV Device 
             -Type*/
2446      =3  #define SPECIFIC_TYPE_GATEWAY                                                            0x07 /*Gateway De
             -vice Type*/
2447      =3  
2448      =3  /* Device class Switch Binary */
2449      =3  #define GENERIC_TYPE_SWITCH_BINARY                                                       0x10 /*Binary Swi
             -tch*/
2450      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2451      =3  #define SPECIFIC_TYPE_POWER_SWITCH_BINARY                                                0x01 /*On/Off Pow
             -er Switch Device Type*/
2452      =3  #define SPECIFIC_TYPE_SCENE_SWITCH_BINARY                                                0x03 /*Binary Sce
             -ne Switch*/
2453      =3  #define SPECIFIC_TYPE_POWER_STRIP                                                        0x04 /*Power Stri
             -p Device Type*/
2454      =3  #define SPECIFIC_TYPE_SIREN                                                              0x05 /*Siren Devi
             -ce Type*/
2455      =3  #define SPECIFIC_TYPE_VALVE_OPEN_CLOSE                                                   0x06 /*Valve (ope
             -n/close) Device Type*/
2456      =3  #define SPECIFIC_TYPE_COLOR_TUNABLE_BINARY                                               0x02
2457      =3  #define SPECIFIC_TYPE_IRRIGATION_CONTROLLER                                              0x07
2458      =3  
2459      =3  /* Device class Switch Multilevel */
2460      =3  #define GENERIC_TYPE_SWITCH_MULTILEVEL                                                   0x11 /*Multilevel
             - Switch*/
2461      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2462      =3  #define SPECIFIC_TYPE_CLASS_A_MOTOR_CONTROL                                              0x05 /*Window Cov
             -ering No Position/Endpoint Device Type*/
2463      =3  #define SPECIFIC_TYPE_CLASS_B_MOTOR_CONTROL                                              0x06 /*Window Cov
             -ering Endpoint Aware Device Type*/
2464      =3  #define SPECIFIC_TYPE_CLASS_C_MOTOR_CONTROL                                              0x07 /*Window Cov
             -ering Position/Endpoint Aware Device Type*/
2465      =3  #define SPECIFIC_TYPE_MOTOR_MULTIPOSITION                                                0x03 /*Multiposit
             -ion Motor*/
2466      =3  #define SPECIFIC_TYPE_POWER_SWITCH_MULTILEVEL                                            0x01 /*Light Dimm
             -er Switch Device Type*/
2467      =3  #define SPECIFIC_TYPE_SCENE_SWITCH_MULTILEVEL                                            0x04 /*Multilevel
             - Scene Switch*/
2468      =3  #define SPECIFIC_TYPE_FAN_SWITCH                                                         0x08 /*Fan Switch
             - Device Type*/
2469      =3  #define SPECIFIC_TYPE_COLOR_TUNABLE_MULTILEVEL                                           0x02
2470      =3  
2471      =3  /* Device class Switch Remote */
2472      =3  #define GENERIC_TYPE_SWITCH_REMOTE                                                       0x12 /*Remote Swi
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 52  

             -tch*/
2473      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2474      =3  #define SPECIFIC_TYPE_SWITCH_REMOTE_BINARY                                               0x01 /*Binary Rem
             -ote Switch*/
2475      =3  #define SPECIFIC_TYPE_SWITCH_REMOTE_MULTILEVEL                                           0x02 /*Multilevel
             - Remote Switch*/
2476      =3  #define SPECIFIC_TYPE_SWITCH_REMOTE_TOGGLE_BINARY                                        0x03 /*Binary Tog
             -gle Remote Switch*/
2477      =3  #define SPECIFIC_TYPE_SWITCH_REMOTE_TOGGLE_MULTILEVEL                                    0x04 /*Multilevel
             - Toggle Remote Switch*/
2478      =3  
2479      =3  /* Device class Switch Toggle */
2480      =3  #define GENERIC_TYPE_SWITCH_TOGGLE                                                       0x13 /*Toggle Swi
             -tch*/
2481      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2482      =3  #define SPECIFIC_TYPE_SWITCH_TOGGLE_BINARY                                               0x01 /*Binary Tog
             -gle Switch*/
2483      =3  #define SPECIFIC_TYPE_SWITCH_TOGGLE_MULTILEVEL                                           0x02 /*Multilevel
             - Toggle Switch*/
2484      =3  
2485      =3  /* Device class Thermostat */
2486      =3  #define GENERIC_TYPE_THERMOSTAT                                                          0x08 /*Thermostat
             -*/
2487      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2488      =3  #define SPECIFIC_TYPE_SETBACK_SCHEDULE_THERMOSTAT                                        0x03 /*Setback Sc
             -hedule Thermostat*/
2489      =3  #define SPECIFIC_TYPE_SETBACK_THERMOSTAT                                                 0x05 /*Thermostat
             - (Setback) Device Type*/
2490      =3  #define SPECIFIC_TYPE_SETPOINT_THERMOSTAT                                                0x04
2491      =3  #define SPECIFIC_TYPE_THERMOSTAT_GENERAL                                                 0x02 /*Thermostat
             - General*/
2492      =3  #define SPECIFIC_TYPE_THERMOSTAT_GENERAL_V2                                              0x06 /*Thermostat
             - (HVAC) Device Type*/
2493      =3  #define SPECIFIC_TYPE_THERMOSTAT_HEATING                                                 0x01 /*Thermostat
             - Heating*/
2494      =3  
2495      =3  /* Device class Ventilation */
2496      =3  #define GENERIC_TYPE_VENTILATION                                                         0x16
2497      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2498      =3  #define SPECIFIC_TYPE_RESIDENTIAL_HRV                                                    0x01
2499      =3  
2500      =3  /* Device class Window Covering */
2501      =3  #define GENERIC_TYPE_WINDOW_COVERING                                                     0x09 /*Window Cov
             -ering*/
2502      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2503      =3  #define SPECIFIC_TYPE_SIMPLE_WINDOW_COVERING                                             0x01 /*Simple Win
             -dow Covering Control*/
2504      =3  
2505      =3  /* Device class Zip Node */
2506      =3  #define GENERIC_TYPE_ZIP_NODE                                                            0x15
2507      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2508      =3  #define SPECIFIC_TYPE_ZIP_ADV_NODE                                                       0x02
2509      =3  #define SPECIFIC_TYPE_ZIP_TUN_NODE                                                       0x01
2510      =3  
2511      =3  /* Device class Wall Controller */
2512      =3  #define GENERIC_TYPE_WALL_CONTROLLER                                                     0x18
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 53  

2513      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2514      =3  #define SPECIFIC_TYPE_BASIC_WALL_CONTROLLER                                              0x01 /*Wall Contr
             -oller Device Type*/
2515      =3  
2516      =3  /* Device class Network Extender */
2517      =3  #define GENERIC_TYPE_NETWORK_EXTENDER                                                    0x05 /*Network Ex
             -tender Generic Device Class*/
2518      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2519      =3  #define SPECIFIC_TYPE_SECURE_EXTENDER                                                    0x01 /*Specific D
             -evice Secure Extender*/
2520      =3  
2521      =3  /* Device class Appliance */
2522      =3  #define GENERIC_TYPE_APPLIANCE                                                           0x06
2523      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class Not Used*/
2524      =3  #define SPECIFIC_TYPE_GENERAL_APPLIANCE                                                  0x01
2525      =3  #define SPECIFIC_TYPE_KITCHEN_APPLIANCE                                                  0x02
2526      =3  #define SPECIFIC_TYPE_LAUNDRY_APPLIANCE                                                  0x03
2527      =3  
2528      =3  /* Device class Sensor Notification */
2529      =3  #define GENERIC_TYPE_SENSOR_NOTIFICATION                                                 0x07
2530      =3  #define SPECIFIC_TYPE_NOT_USED                                                           0x00 /*Specific D
             -evice Class not used*/
2531      =3  #define SPECIFIC_TYPE_NOTIFICATION_SENSOR                                                0x01
2532      =3  
2533      =3  
2534      =3  
2535      =3  /************* Z-Wave+ Role Type identifiers **************/
2536      =3  #define ROLE_TYPE_CONTROLLER_CENTRAL_STATIC                                              0x00
2537      =3  #define ROLE_TYPE_CONTROLLER_SUB_STATIC                                                  0x01
2538      =3  #define ROLE_TYPE_CONTROLLER_PORTABLE                                                    0x02
2539      =3  #define ROLE_TYPE_CONTROLLER_PORTABLE_REPORTING                                          0x03
2540      =3  #define ROLE_TYPE_SLAVE_PORTABLE                                                         0x04
2541      =3  #define ROLE_TYPE_SLAVE_ALWAYS_ON                                                        0x05
2542      =3  #define ROLE_TYPE_SLAVE_SLEEPING_REPORTING                                               0x06
2543      =3  #define ROLE_TYPE_SLAVE_SLEEPING_LISTENING                                               0x07
2544      =3  #define ROLE_TYPE_SLAVE_NETWORK_AWARE                                                    0x08
2545      =3  
2546      =3  
2547      =3  /************* Z-Wave+ Icon Type identifiers **************/
2548      =3  /* The Z-Wave+ Icon Types defined in this section is the  */
2549      =3  /* work of the Z-Wave Alliance.                           */
2550      =3  /* The most current list of Z-Wave+ Icon Types may be     */
2551      =3  /* found at Z-Wave Alliance web site along with           */
2552      =3  /* sample icons.                                          */
2553      =3  /* New Z-Wave+ Icon Types may be requested from the       */
2554      =3  /* Z-Wave Alliance.                                       */
2555      =3  /**********************************************************/
2556      =3  #define ICON_TYPE_UNASSIGNED                                                 0x0000   //MUST NOT be used b
             -y any product
2557      =3                                                                             
2558      =3  #define ICON_TYPE_GENERIC_CENTRAL_CONTROLLER                                 0x0100   //Central Controller
             - Device Type
2559      =3                                                                             
2560      =3  #define ICON_TYPE_GENERIC_DISPLAY_SIMPLE                                     0x0200   //Display Simple Dev
             -ice Type
2561      =3                                                                             
2562      =3  #define ICON_TYPE_GENERIC_DOOR_LOCK_KEYPAD                                   0x0300   //Door Lock Keypad  
             -Device Type
2563      =3                                                                             
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 54  

2564      =3  #define ICON_TYPE_GENERIC_FAN_SWITCH                                         0x0400   //Fan Switch  Device
             - Type
2565      =3                                                                             
2566      =3  #define ICON_TYPE_GENERIC_GATEWAY                                            0x0500   //Gateway  Device Ty
             -pe
2567      =3                                                                             
2568      =3  #define ICON_TYPE_GENERIC_LIGHT_DIMMER_SWITCH                                0x0600   //Light Dimmer Switc
             -h  Device Type
2569      =3  #define ICON_TYPE_SPECIFIC_LIGHT_DIMMER_SWITCH_PLUGIN                        0x0601   //Light Dimmer, impl
             -emented as a plugin device 
2570      =3  #define ICON_TYPE_SPECIFIC_LIGHT_DIMMER_SWITCH_WALL_OUTLET                   0x0602   //Light Dimmer, imple
             -mented as a wall outlet
2571      =3  #define ICON_TYPE_SPECIFIC_LIGHT_DIMMER_SWITCH_CEILING_OUTLET              0x0603   //Light Dimmer, implem
             -ented as a ceiling outlet
2572      =3  #define ICON_TYPE_SPECIFIC_LIGHT_DIMMER_SWITCH_WALL_LAMP                   0x0604   //Relay device, implem
             -ented as a wall mounted lamp
2573      =3  #define ICON_TYPE_SPECIFIC_LIGHT_DIMMER_SWITCH_LAMP_POST_HIGH              0x0605   //Relay device, implem
             -ented as a ceiling outlet
2574      =3  #define ICON_TYPE_SPECIFIC_LIGHT_DIMMER_SWITCH_LAMP_POST_LOW               0x0606   //Relay device, impleme
             -nted as a ceiling outlet
2575      =3                                                                             
2576      =3  #define ICON_TYPE_GENERIC_ON_OFF_POWER_SWITCH                                0x0700   //On/Off Power Switc
             -h  Device Type
2577      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_POWER_SWITCH_PLUGIN                      0x0701   //Relay device, implem
             -ented as a plugin device
2578      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_POWER_SWITCH_WALL_OUTLET                   0x0702   //Relay device, imple
             -mented as a wall outlet
2579      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_POWER_SWITCH_CEILING_OUTLET              0x0703   //Relay device, implem
             -ented as a ceiling outlet
2580      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_POWER_SWITCH_WALL_LAMP                   0x0704   //Relay device, impleme
             -nted as a wall mounted lamp
2581      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_POWER_SWITCH_LAMP_POST_HIGH              0x0705   //Relay device, implem
             -ented as a ceiling outlet
2582      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_POWER_SWITCH_LAMP_POST_LOW               0x0706   //Relay device, impleme
             -nted as a ceiling outlet
2583      =3                                                                             
2584      =3  #define ICON_TYPE_GENERIC_POWER_STRIP                                        0x0800   //Power Strip  Devic
             -e Type
2585      =3  #define ICON_TYPE_SPECIFIC_POWER_STRIP_INDIVIDUAL_OUTLET                   0x08FF   //Individual outlet of 
             -a power strip for showing outlets in exploded view
2586      =3                                                                             
2587      =3  #define ICON_TYPE_GENERIC_REMOTE_CONTROL_AV                                  0x0900   //Remote Control AV 
             - Device Type
2588      =3                                                                             
2589      =3  #define ICON_TYPE_GENERIC_REMOTE_CONTROL_MULTI_PURPOSE                       0x0A00   //Remote Control Mul
             -ti Purpose Device Type
2590      =3                                                                             
2591      =3  #define ICON_TYPE_GENERIC_REMOTE_CONTROL_SIMPLE                              0x0B00   //Remote Control Sim
             -ple Device Type
2592      =3  #define ICON_TYPE_SPECIFIC_REMOTE_CONTROL_SIMPLE_KEYFOB                      0x0B01   //Remote Control Sim
             -ple Device Type (Key fob)
2593      =3                                                                             
2594      =3  #define ICON_TYPE_GENERIC_SENSOR_NOTIFICATION                                0x0C00   //Sensor Notificatio
             -n Device Type
2595      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_SMOKE_ALARM                   0x0C01   //Sensor Notificatio
             -n Device Type (Notification type Smoke Alarm)
2596      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_CO_ALARM                      0x0C02   //Sensor Notificatio
             -n Device Type (Notification type CO Alarm)
2597      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_CO2_ALARM                     0x0C03   //Sensor Notificatio
             -n Device Type (Notification type CO2 Alarm)
2598      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_HEAT_ALARM                    0x0C04   //Sensor Notificatio
             -n Device Type (Notification type Heat Alarm)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 55  

2599      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_WATER_ALARM                   0x0C05   //Sensor Notificatio
             -n Device Type (Notification type Water Alarm)
2600      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_ACCESS_CONTROL                0x0C06   //Sensor Notificatio
             -n Device Type (Notification type Access Control)
2601      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_HOME_SECURITY                 0x0C07   //Sensor Notificatio
             -n Device Type (Notification type Home Security)
2602      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_POWER_MANAGEMENT              0x0C08   //Sensor Notificatio
             -n Device Type (Notification type Power Management)
2603      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_SYSTEM                        0x0C09   //Sensor Notificatio
             -n Device Type (Notification type System)
2604      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_EMERGENCY_ALARM               0x0C0A   //Sensor Notificatio
             -n Device Type (Notification type Emergency Alarm)
2605      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_CLOCK                         0x0C0B   //Sensor Notificatio
             -n Device Type (Notification type Clock)
2606      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_APPLIANCE                     0x0C0C
2607      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_HOME_HEALTH                   0x0C0D
2608      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_SIREN                         0x0C0E
2609      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_WATER_VALVE                   0x0C0F
2610      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_WEATHER_ALARM                 0x0C10
2611      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_IRRIGATION                    0x0C11
2612      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_GAS_ALARM                     0x0C12
2613      =3  #define ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_MULTIDEVICE                   0x0CFF   //Sensor Notificatio
             -n Device Type (Bundled Notification functions)
2614      =3                                                                             
2615      =3  #define ICON_TYPE_GENERIC_SENSOR_MULTILEVEL                                  0x0D00   //Sensor Multilevel 
             -Device Type
2616      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_AIR_TEMPERATURE                 0x0D01   //Sensor Multilevel 
             -Device Type (Sensor type Air Temperature)
2617      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_GENERAL_PURPOSE_VALUE           0x0D02   //Sensor Multilevel 
             -Device Type (Sensor type General Purpose Value)
2618      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_LUMINANCE                       0x0D03   //Sensor Multilevel 
             -Device Type (Sensor type Luminance)
2619      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_POWER                           0x0D04   //Sensor Multilevel 
             -Device Type (Sensor type Power)
2620      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_HUMIDITY                        0x0D05   //Sensor Multilevel 
             -Device Type (Sensor type Humidity)
2621      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_VELOCITY                        0x0D06   //Sensor Multilevel 
             -Device Type (Sensor type Velocity)
2622      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_DIRECTION                       0x0D07   //Sensor Multilevel 
             -Device Type (Sensor type Direction)
2623      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_ATMOSPHERIC_PRESSURE            0x0D08   //Sensor Multilevel 
             -Device Type (Sensor type Atmospheric Pressure)
2624      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_BAROMETRIC_PRESSURE             0x0D09   //Sensor Multilevel 
             -Device Type (Sensor type Barometric Pressure)
2625      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_SOLOR_RADIATION                 0x0D0A   //Sensor Multilevel 
             -Device Type (Sensor type Solar Radiation)
2626      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_DEW_POINT                       0x0D0B   //Sensor Multilevel 
             -Device Type (Sensor type Dew Point)
2627      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_RAIN_RATE                       0x0D0C   //Sensor Multilevel 
             -Device Type (Sensor type Rain Rate)
2628      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_TIDE_LEVEL                      0x0D0D   //Sensor Multilevel 
             -Device Type (Sensor type Tide Level)
2629      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_WEIGHT                          0x0D0E   //Sensor Multilevel 
             -Device Type (Sensor type Weight)
2630      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_VOLTAGE                         0x0D0F   //Sensor Multilevel 
             -Device Type (Sensor type Voltage)
2631      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_CURRENT                         0x0D10   //Sensor Multilevel 
             -Device Type (Sensor type Current)
2632      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_CO2_LEVEL                       0x0D11   //Sensor Multilevel 
             -Device Type (Sensor type CO2 Level)
2633      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_AIR_FLOW                        0x0D12   //Sensor Multilevel 
             -Device Type (Sensor type Air Flow)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 56  

2634      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_TANK_CAPACITY                   0x0D13   //Sensor Multilevel 
             -Device Type (Sensor type Tank Capacity)
2635      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_DISTANCE                        0x0D14   //Sensor Multilevel 
             -Device Type (Sensor type Distance)
2636      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_ANGLE_POSITION                  0x0D15   //Sensor Multilevel 
             -Device Type (Sensor type Angle Position)
2637      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_ROTATION                        0x0D16   //Sensor Multilevel 
             -Device Type (Sensor type Rotation)
2638      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_WATER_TEMPERATURE               0x0D17   //Sensor Multilevel 
             -Device Type (Sensor type Water Temperature)
2639      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_SOIL_TEMPERATURE                0x0D18   //Sensor Multilevel 
             -Device Type (Sensor type Soil Temperature)
2640      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_SEISMIC_INTENSITY               0x0D19   //Sensor Multilevel 
             -Device Type (Sensor type Seismic Intensity)
2641      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_SEISMIC_MAGNITUDE               0x0D1A   //Sensor Multilevel 
             -Device Type (Sensor type Seismic Magnitude)
2642      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_ULTRAVIOLET                     0x0D1B   //Sensor Multilevel 
             -Device Type (Sensor type Ultraviolet)
2643      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_ELECTRICAL_RESISTIVITY          0x0D1C   //Sensor Multilevel 
             -Device Type (Sensor type Electrical Resistivity)
2644      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_ELECTRICAL_CONDUCTIVITY         0x0D1D   //Sensor Multilevel 
             -Device Type (Sensor type Electrical Conductivity)
2645      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_LOUDNESS                        0x0D1E   //Sensor Multilevel 
             -Device Type (Sensor type Loudness)
2646      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_MOISTURE                        0x0D1F   //Sensor Multilevel 
             -Device Type (Sensor type Moisture)
2647      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_FREQUENCY                       0x0D20   //Sensor Multilevel 
             -Device Type (Sensor type Frequency)
2648      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_TIME                            0x0D21   //Sensor Multilevel 
             -Device Type (Sensor type Time )
2649      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_TARGET_TEMPERATURE              0x0D22   //Sensor Multilevel 
             -Device Type (Sensor type Target Temperature)
2650      =3  #define ICON_TYPE_SPECIFIC_SENSOR_MULTILEVEL_MULTIDEVICE                     0x0DFF   //Sensor Multilevel 
             -Device Type (Bundled Sensor functions)
2651      =3                                                                             
2652      =3  #define ICON_TYPE_GENERIC_SET_TOP_BOX                                        0x0E00   //Set Top Box Device
             - Type
2653      =3                                                                             
2654      =3  #define ICON_TYPE_GENERIC_SIREN                                              0x0F00   //Siren Device Type
2655      =3                                                                             
2656      =3  #define ICON_TYPE_GENERIC_SUB_ENERGY_METER                                   0x1000   //Sub Energy Meter D
             -evice Type
2657      =3                                                                             
2658      =3  #define ICON_TYPE_GENERIC_SUB_SYSTEM_CONTROLLER                              0x1100   //Sub System Control
             -ler Device Type
2659      =3                                                                             
2660      =3  #define ICON_TYPE_GENERIC_THERMOSTAT                                         0x1200   //Thermostat Device 
             -Type
2661      =3  #define ICON_TYPE_SPECIFIC_THERMOSTAT_LINE_VOLTAGE                           0x1201   //Thermostat Line Vo
             -ltage Device Type
2662      =3  #define ICON_TYPE_SPECIFIC_THERMOSTAT_SETBACK                                0x1202   //Thermostat Setback
             - Device Type
2663      =3                                                                             
2664      =3  #define ICON_TYPE_GENERIC_THERMOSTAT_SETBACK_OBSOLETED                       0x1300   //Thermostat Setback
             - [Obsoleted] Device Type
2665      =3                                                                             
2666      =3  #define ICON_TYPE_GENERIC_TV                                                 0x1400   //TV Device Type
2667      =3                                                                             
2668      =3  #define ICON_TYPE_GENERIC_VALVE_OPEN_CLOSE                                   0x1500   //Valve Open/Close D
             -evice Type
2669      =3                                                                             
2670      =3  #define ICON_TYPE_GENERIC_WALL_CONTROLLER                                    0x1600   //Wall Controller De
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 57  

             -vice Type
2671      =3                                                                             
2672      =3  #define ICON_TYPE_GENERIC_WHOLE_HOME_METER_SIMPLE                            0x1700   //Whole Home Meter S
             -imple Device Type
2673      =3                                                                             
2674      =3  #define ICON_TYPE_GENERIC_WINDOW_COVERING_NO_POSITION_ENDPOINT               0x1800   //Window Covering No
             - Position/Endpoint  Device Type
2675      =3                                                                             
2676      =3  #define ICON_TYPE_GENERIC_WINDOW_COVERING_ENDPOINT_AWARE                     0x1900   //Window Covering En
             -dpoint Aware Device Type
2677      =3                                                                             
2678      =3  #define ICON_TYPE_GENERIC_WINDOW_COVERING_POSITION_ENDPOINT_AWARE            0x1A00   //Window Covering Po
             -sition/Endpoint Aware Device Type
2679      =3  
2680      =3  #define ICON_TYPE_GENERIC_REPEATER                                           0x1B00   //Repeater Device Ty
             -pe 
2681      =3  
2682      =3  #define ICON_TYPE_GENERIC_DIMMER_WALL_SWITCH                               0x1C00   //Wall Switch
2683      =3  #define ICON_TYPE_SPECIFIC_DIMMER_WALL_SWITCH_ONE_BUTTON                   0x1C01   //Wall Switch, 1 button
2684      =3  #define ICON_TYPE_SPECIFIC_DIMMER_WALL_SWITCH_TWO_BUTTONS                  0x1C02   //Wall Switch, 2 butto
             -ns
2685      =3  #define ICON_TYPE_SPECIFIC_DIMMER_WALL_SWITCH_THREE_BUTTONS                  0x1C03   //Wall Switch, 3 but
             -tons
2686      =3  #define ICON_TYPE_SPECIFIC_DIMMER_WALL_SWITCH_FOUR_BUTTONS                   0x1C04   //Wall Switch, 4 butt
             -ons
2687      =3  #define ICON_TYPE_SPECIFIC_DIMMER_WALL_SWITCH_ONE_ROTARY                   0x1CF1   //Wall Switch, 1 rotary
             - knob
2688      =3  
2689      =3  #define ICON_TYPE_GENERIC_ON_OFF_WALL_SWITCH                               0x1D00   //Wall Switch
2690      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_WALL_SWITCH_ONE_BUTTON                   0x1D01   //Wall Switch, 1 button
2691      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_WALL_SWITCH_TWO_BUTTONS                  0x1D02   //Wall Switch, 2 butto
             -ns
2692      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_WALL_SWITCH_THREE_BUTTONS                  0x1D03   //Wall Switch, 3 but
             -tons
2693      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_WALL_SWITCH_FOUR_BUTTONS                   0x1D04   //Wall Switch, 4 butt
             -ons
2694      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_WALL_SWITCH_DOOR_BELL                      0x1DE1   //Door Bell (button)
2695      =3  #define ICON_TYPE_SPECIFIC_ON_OFF_WALL_SWITCH_ONE_ROTARY                   0x1DF1   //Wall Switch, 1 rotary
             - knob
2696      =3  
2697      =3  #define ICON_TYPE_GENERIC_BARRIER                                            0x1E00   //Barrier
2698      =3  
2699      =3  #define ICON_TYPE_GENERIC_IRRIGATION                                         0x1F00   //Irrigation
2700      =3  
2701      =3  #define ICON_TYPE_GENERIC_ENTRY_CONTROL                                      0x2000   //Entry Control
2702      =3  #define ICON_TYPE_SPECIFIC_ENTRY_CONTROL_KEYPAD_0_9                          0x2001   //Entry Control Keyp
             -ad 0-9
2703      =3  #define ICON_TYPE_SPECIFIC_ENTRY_CONTROL_RFID_TAG_READER_NO_BUTTON           0x2002   //Entry Control RFID
             - tag reader, no button
2704      =3  
2705      =3  
2706      =3  /************* Manufacturer ID identifiers **************/
2707      =3  #define MFG_ID_NOT_DEFINED                                         0xFFFF   //Not defined
2708      =3  #define MFG_ID_2B_ELECTRONICS                                      0x0028   //2B Electronics
2709      =3  #define MFG_ID_2GIG_TECHNOLOGIES_INC                               0x009B   //2gig Technologies Inc.
2710      =3  #define MFG_ID_3E_TECHNOLOGIES                                     0x002A   //3e Technologies
2711      =3  #define MFG_ID_A1_COMPONENTS                                       0x0022   //A-1 Components
2712      =3  #define MFG_ID_ABILIA                                              0x0117   //Abilia
2713      =3  #define MFG_ID_ACT_ADVANCED_CONTROL_TECHNOLOGIES                   0x0001   //ACT - Advanced Control Techn
             -ologies
2714      =3  #define MFG_ID_ADMOBILIZE_LLC                                      0x0297   //AdMobilize, LLC
2715      =3  #define MFG_ID_ADOX_INC                                            0x0101   //ADOX, Inc.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 58  

2716      =3  #define MFG_ID_ADVANCED_OPTRONIC_DEVICES_CO_LTD                    0x016C   //Advanced Optronic Devices Co
             -.,Ltd
2717      =3  #define MFG_ID_ADVENTURE_INTERACTIVE                               0x009E   //Adventure Interactive
2718      =3  #define MFG_ID_AEON_LABS                                           0x0086   //AEON Labs
2719      =3  #define MFG_ID_AIRVENT_SAM_SPA                                     0x0088   //Airvent SAM S.p.A.
2720      =3  #define MFG_ID_ALARMCOM                                            0x0094   //Alarm.com
2721      =3  #define MFG_ID_ALERTME                                             0x0126   //Alertme
2722      =3  #define MFG_ID_ALLEGION                                            0x003B   //Allegion
2723      =3  #define MFG_ID_ALPHANETWORKS                                       0x028E   //Alphanetworks
2724      =3  #define MFG_ID_ALPHONSUS_TECH                                      0x0230   //Alphonsus Tech
2725      =3  #define MFG_ID_AMADAS_CO_LTD                                       0x029F   //AMADAS Co., LTD 
2726      =3  #define MFG_ID_AMDOCS                                              0x019C   //Amdocs
2727      =3  #define MFG_ID_AMERICAN_GRID_INC                                   0x005A   //American Grid, Inc.
2728      =3  #define MFG_ID_ANCHOR_TECH                                         0x032B   //Anchor Tech 
2729      =3  #define MFG_ID_ANTIK_TECHNOLOGY_LTD                                0x026D   //Antik Technology Ltd.
2730      =3  #define MFG_ID_ANYCOMM_CORPORATION                                 0x0078   //anyCOMM Corporation
2731      =3  #define MFG_ID_APPLIED_MICRO_ELECTRONICS_AME_BV                    0x0144   //Applied Micro Electronics "A
             -ME" BV
2732      =3  #define MFG_ID_ARKEA                                               0x0291   //Arkea
2733      =3  #define MFG_ID_ASIA_HEADING                                        0x0029   //Asia Heading
2734      =3  #define MFG_ID_ASITEQ                                              0x0231   //ASITEQ
2735      =3  #define MFG_ID_ASKEY_COMPUTER_CORP                                 0x028A   //Askey Computer Corp.
2736      =3  #define MFG_ID_ASSA_ABLOY                                          0x0129   //ASSA ABLOY
2737      =3  #define MFG_ID_ASTRALINK                                           0x013B   //AstraLink
2738      =3  #define MFG_ID_ATT                                                 0x0134   //AT&T
2739      =3  #define MFG_ID_ATECH                                               0x002B   //Atech
2740      =3  #define MFG_ID_ATHOM_BV                                            0x0244   //Athom BV
2741      =3  #define MFG_ID_AUCEAN_TECHNOLOGY_INC                               0x032A   //AUCEAN TECHNOLOGY. INC
2742      =3  #define MFG_ID_AVADESIGN_TECHNOLOGY_CO_                            0x025D   //Avadesign Technology Co.,
2743      =3  #define MFG_ID_AVADESIGN_TECHNOLOGY_CO_LTD                         0x0155   //Avadesign Technology Co., Lt
             -d.
2744      =3  #define MFG_ID_AXESSTEL_INC                                        0x0146   //Axesstel Inc
2745      =3  #define MFG_ID_BALBOA_INSTRUMENTS                                  0x0018   //Balboa Instruments
2746      =3  #define MFG_ID_BANDI_COMM_TECH_INC                                 0x0236   //Bandi Comm Tech Inc.
2747      =3  #define MFG_ID_BEIJING_SINOAMERICAN_BOYI_SOFTWARE_DEVELOPMENT_CO_L 0x0204   //Beijing Sino-American Boyi S
             -oftware Development Co., Ltd
2748      =3  #define MFG_ID_BEIJING_UNIVERSAL_ENERGY_HUAXIA_TECHNOLOGY_CO_LTD   0x0251   //Beijing Universal Energy Hua
             -xia Technology Co.,Ltd
2749      =3  #define MFG_ID_BELLATRIX_SYSTEMS_INC                               0x0196   //Bellatrix Systems, Inc.
2750      =3  #define MFG_ID_BENETEK                                             0x032D   //Benetek
2751      =3  #define MFG_ID_BENEXT                                              0x008A   //BeNext
2752      =3  #define MFG_ID_BESAFER                                             0x002C   //BeSafer
2753      =3  #define MFG_ID_BFT_SPA                                             0x014B   //BFT S.p.A.
2754      =3  #define MFG_ID_BIT7_INC                                            0x0052   //Bit7 Inc.
2755      =3  #define MFG_ID_BLAZE_AUTOMATION                                    0x0311   //Blaze Automation
2756      =3  #define MFG_ID_BMS_EVLER_LTD                                       0x0213   //BMS Evler LTD
2757      =3  #define MFG_ID_BOCA_DEVICES                                        0x0023   //Boca Devices
2758      =3  #define MFG_ID_BOSCH_SECURITY_SYSTEMS_INC                          0x015C   //Bosch Security Systems, Inc
2759      =3  #define MFG_ID_BRK_BRANDS_INC                                      0x0138   //BRK Brands, Inc.
2760      =3  #define MFG_ID_BROADBAND_ENERGY_NETWORKS_INC                       0x002D   //Broadband Energy Networks In
             -c.
2761      =3  #define MFG_ID_BTSTAR_HK_TECHNOLOGY_COMPANY_LIMITED                0x024A   //BTSTAR(HK) TECHNOLOGY COMPAN
             -Y LIMITED
2762      =3  #define MFG_ID_BUFFALO_INC                                         0x0145   //Buffalo Inc.
2763      =3  #define MFG_ID_BUILDING_36_TECHNOLOGIES                            0x0190   //Building 36 Technologies
2764      =3  #define MFG_ID_BULOGICS                                            0x0026   //BuLogics
2765      =3  #define MFG_ID_BONIG_UND_KALLENBACH_OHG                            0x0169   //BÃ¶nig und Kallenbach oHG
2766      =3  #define MFG_ID_CAMEO_COMMUNICATIONS_INC                            0x009C   //Cameo Communications Inc.
2767      =3  #define MFG_ID_CARRIER                                             0x002E   //Carrier
2768      =3  #define MFG_ID_CASAWORKS                                           0x000B   //CasaWorks
2769      =3  #define MFG_ID_CASENIO_AG                                          0x0243   //casenio AG
2770      =3  #define MFG_ID_CBCC_DOMOTIQUE_SAS                                  0x0166   //CBCC Domotique SAS
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 59  

2771      =3  #define MFG_ID_CENTRALITE_SYSTEMS_INC                              0x0246   //CentraLite Systems, Inc
2772      =3  #define MFG_ID_CHECKIT_SOLUTIONS_INC                               0x014E   //Check-It Solutions Inc.
2773      =3  #define MFG_ID_CHINA_SECURITY_FIRE_IOT_SENSING_CO_LTD              0x0320   //China Security & Fire IOT Se
             -nsing CO., LTD 
2774      =3  #define MFG_ID_CHROMAGIC_TECHNOLOGIES_CORPORATION                  0x0116   //Chromagic Technologies Corpo
             -ration
2775      =3  #define MFG_ID_CHUANGO_SECURITY_TECHNOLOGY_CORPORATION             0x0280   //Chuango Security Technology 
             -Corporation
2776      =3  #define MFG_ID_CISCO_CONSUMER_BUSINESS_GROUP                       0x0082   //Cisco Consumer Business Grou
             -p
2777      =3  #define MFG_ID_CLIMAX_TECHNOLOGY_LTD                               0x018E   //Climax Technology, Ltd.
2778      =3  #define MFG_ID_CLOUD_MEDIA                                         0x0200   //Cloud Media
2779      =3  #define MFG_ID_COLOR_KINETICS_INCORPORATED                         0x002F   //Color Kinetics Incorporated
2780      =3  #define MFG_ID_COMAP                                               0x0329   //COMAP
2781      =3  #define MFG_ID_COMFORTABILITY                                      0x0309   //Comfortability
2782      =3  #define MFG_ID_COMPUTIME                                           0x0140   //Computime
2783      =3  #define MFG_ID_CONNECTED_OBJECT                                    0x011B   //Connected Object
2784      =3  #define MFG_ID_CONNECTHOME                                         0x0179   //ConnectHome
2785      =3  #define MFG_ID_CONNECTION_TECHNOLOGY_SYSTEMS                       0x0285   //CONNECTION TECHNOLOGY SYSTEM
             -S 
2786      =3  #define MFG_ID_CONTEC_INTELLIGENT_HOUSING_                         0x025D   //Contec intelligent housing 
2787      =3  #define MFG_ID_CONTROL4_CORPORATION                                0x023F   //Control4 Corporation
2788      =3  #define MFG_ID_CONTROLTHINK_LC                                     0x0019   //ControlThink LC
2789      =3  #define MFG_ID_CONVERGEX_LTD                                       0x000F   //ConvergeX Ltd.
2790      =3  #define MFG_ID_COOLGUARD                                           0x007D   //CoolGuard
2791      =3  #define MFG_ID_COOPER_LIGHTING                                     0x0079   //Cooper Lighting
2792      =3  #define MFG_ID_COOPER_WIRING_DEVICES                               0x001A   //Cooper Wiring Devices
2793      =3  #define MFG_ID_COVENTIVE_TECHNOLOGIES_INC                          0x009D   //Coventive Technologies Inc.
2794      =3  #define MFG_ID_CVNET                                               0x0328   //Cvnet
2795      =3  #define MFG_ID_CYBERHOUSE                                          0x0014   //Cyberhouse
2796      =3  #define MFG_ID_CYBERTAN_TECHNOLOGY_INC                             0x0067   //CyberTAN Technology, Inc.
2797      =3  #define MFG_ID_CYTECH_TECHNOLOGY_PRE_LTD                           0x0030   //Cytech Technology Pre Ltd.
2798      =3  #define MFG_ID_D3_TECHNOLOGY_CO_LTD                                0x0294   //D-3 Technology Co. Ltd
2799      =3  #define MFG_ID_DANFOSS                                             0x0002   //Danfoss
2800      =3  #define MFG_ID_DAWON_DNS                                           0x018C   //Dawon DNS
2801      =3  #define MFG_ID_DECORIS_INTELLIGENT_SYSTEM_LIMITED                  0x020A   //Decoris Intelligent System L
             -imited
2802      =3  #define MFG_ID_DEFACONTROLS_BV                                     0x013F   //Defacontrols BV
2803      =3  #define MFG_ID_DEFARO                                              0x032E   //DEFARO
2804      =3  #define MFG_ID_DESTINY_NETWORKS                                    0x0031   //Destiny Networks
2805      =3  #define MFG_ID_DEVOLO                                              0x0175   //Devolo
2806      =3  #define MFG_ID_DIEHL_AKO                                           0x0103   //Diehl AKO
2807      =3  #define MFG_ID_DIGITAL_5_INC                                       0x0032   //Digital 5, Inc.
2808      =3  #define MFG_ID_DIGITALZONE                                         0x0228   //DigitalZone
2809      =3  #define MFG_ID_DLINK                                               0x0108   //D-Link
2810      =3  #define MFG_ID_DMP_DIGITAL_MONITORING_PRODUCTS                     0x0127   //DMP (Digital Monitoring Prod
             -ucts)
2811      =3  #define MFG_ID_DOMINO_SISTEMI_DOO                                  0x0177   //Domino sistemi d.o.o.
2812      =3  #define MFG_ID_DOMITECH_PRODUCTS_LLC                               0x020E   //Domitech Products, LLC
2813      =3  #define MFG_ID_DONGGUAN_ZHOU_DA_ELECTRONICS_CO_LTD                 0x020C   //Dongguan Zhou Da Electronics
             - Co.,Ltd
2814      =3  #define MFG_ID_DRACOR_INC                                          0x017D   //DRACOR Inc.
2815      =3  #define MFG_ID_DRAGON_TECH_INDUSTRIAL_LTD                          0x0184   //Dragon Tech Industrial, Ltd.
2816      =3  #define MFG_ID_DTV_RESEARCH_UNIPESSOAL_LDA                         0x0223   //DTV Research Unipessoal, Lda
2817      =3  #define MFG_ID_DUNEHD                                              0x0272   //Dune-HD
2818      =3  #define MFG_ID_DVACO_GROUP                                         0x031B   //DVACO GROUP
2819      =3  #define MFG_ID_DYNAQUIP_CONTROLS                                   0x0132   //DynaQuip Controls
2820      =3  #define MFG_ID_EASY_SAVER_CO_INC                                   0x0247   //EASY SAVER Co., Inc
2821      =3  #define MFG_ID_EBV                                                 0x017C   //EbV
2822      =3  #define MFG_ID_ECHOSTAR                                            0x016B   //Echostar
2823      =3  #define MFG_ID_ECO_AUTOMATION                                      0x028F   //Eco Automation
2824      =3  #define MFG_ID_ECOLINK                                             0x014A   //Ecolink
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 60  

2825      =3  #define MFG_ID_ECONET_CONTROLS                                     0x0157   //EcoNet Controls
2826      =3  #define MFG_ID_EELECTRON_SPA                                       0x031F   //Eelectron SpA
2827      =3  #define MFG_ID_EHOME_AUTOMATION                                    0x010D   //e-Home AUTOMATION
2828      =3  #define MFG_ID_EI_ELECTRONICS                                      0x026B   //Ei Electronics 
2829      =3  #define MFG_ID_EKA_SYSTEMS                                         0x0087   //Eka Systems
2830      =3  #define MFG_ID_ELECTRONIC_SOLUTIONS                                0x0033   //Electronic Solutions
2831      =3  #define MFG_ID_ELEXA_CONSUMER_PRODUCTS_INC                         0x021F   //Elexa Consumer Products Inc.
2832      =3  #define MFG_ID_ELGEV_ELECTRONICS_LTD                               0x0034   //El-Gev Electronics LTD
2833      =3  #define MFG_ID_ELK_PRODUCTS_INC                                    0x001B   //ELK Products, Inc.
2834      =3  #define MFG_ID_EMBEDDED_SYSTEM_DESIGN_LIMITED                      0x020B   //Embedded System Design Limit
             -ed
2835      =3  #define MFG_ID_EMBEDIT_AS                                          0x0035   //Embedit A/S
2836      =3  #define MFG_ID_EMPERS_TECH_CO_LTD                                  0x0284   //Empers Tech Co., Ltd.
2837      =3  #define MFG_ID_ENBLINK_CO_LTD                                      0x014D   //Enblink Co. Ltd
2838      =3  #define MFG_ID_ENWOX_TECHNOLOGIES_SRO                              0x0219   //Enwox Technologies s.r.o.
2839      =3  #define MFG_ID_ERONE                                               0x006F   //Erone
2840      =3  #define MFG_ID_ESSENCE_SECURITY                                    0x0160   //Essence Security
2841      =3  #define MFG_ID_ESSENTIAL_TECHNOLOGIES_INC                          0x029B   //ESSENTIAL TECHNOLOGIES INC.
2842      =3  #define MFG_ID_EUROTRONICS                                         0x0148   //Eurotronics
2843      =3  #define MFG_ID_EVERSPRING                                          0x0060   //Everspring
2844      =3  #define MFG_ID_EVOLVE                                              0x0113   //Evolve
2845      =3  #define MFG_ID_EXCEPTIONAL_INNOVATIONS                             0x0036   //Exceptional Innovations
2846      =3  #define MFG_ID_EXHAUSTO                                            0x0004   //Exhausto
2847      =3  #define MFG_ID_EXIGENT_SENSORS                                     0x009F   //Exigent Sensors
2848      =3  #define MFG_ID_EXPRESS_CONTROLS                                    0x001E   //Express Controls
2849      =3  #define MFG_ID_EZEX_CORPORATION                                    0x0233   //eZEX Corporation
2850      =3  #define MFG_ID_FAKRO                                               0x0085   //Fakro
2851      =3  #define MFG_ID_FANTEM                                              0x016A   //Fantem
2852      =3  #define MFG_ID_FIBARGROUP                                          0x010F   //Fibargroup
2853      =3  #define MFG_ID_FIFTHPLAY_NV                                        0x0295   //fifthplay nv
2854      =3  #define MFG_ID_FLEXTRONICS                                         0x018D   //Flextronics
2855      =3  #define MFG_ID_FLUE_SENTINEL                                       0x0024   //Flue Sentinel
2856      =3  #define MFG_ID_FOARD_SYSTEMS                                       0x0037   //Foard Systems
2857      =3  #define MFG_ID_FOCAL_POINT_LIMITED                                 0x018F   //Focal Point Limited
2858      =3  #define MFG_ID_FOLLOWGOOD_TECHNOLOGY_COMPANY_LTD                   0x0137   //FollowGood Technology Compan
             -y Ltd.
2859      =3  #define MFG_ID_FOREST_GROUP_NEDERLAND_BV                           0x0207   //Forest Group Nederland B.V
2860      =3  #define MFG_ID_FORTREZZ_LLC                                        0x0084   //FortrezZ LLC
2861      =3  #define MFG_ID_FOXCONN                                             0x011D   //Foxconn
2862      =3  #define MFG_ID_FROSTDALE                                           0x0110   //Frostdale
2863      =3  #define MFG_ID_FUTURE_HOME_AS                                      0x0305   //Future Home AS
2864      =3  #define MFG_ID_GES                                                 0x025A   //GES
2865      =3  #define MFG_ID_GKB_SECURITY_CORPORATION                            0x022B   //GKB Security Corporation
2866      =3  #define MFG_ID_GLOBALCHINATECH                                     0x018A   //Globalchina-Tech
2867      =3  #define MFG_ID_GOAP                                                0x0159   //Goap
2868      =3  #define MFG_ID_GOGGIN_RESEARCH                                     0x0076   //Goggin Research
2869      =3  #define MFG_ID_GOOD_WAY_TECHNOLOGY_CO_LTD                          0x0068   //Good Way Technology Co., Ltd
2870      =3  #define MFG_ID_GREENWAVE_REALITY_INC                               0x0099   //GreenWave Reality Inc.
2871      =3  #define MFG_ID_GRIB                                                0x018B   //Grib
2872      =3  #define MFG_ID_GUANGZHOU_RUIXIANG_ME_CO_LTD                        0x016D   //Guangzhou Ruixiang M&E Co., 
             -Ltd
2873      =3  #define MFG_ID_GUANGZHOU_ZEEWAVE_INFORMATION_TECHNOLOGY_CO_LTD     0x0158   //GuangZhou Zeewave Informatio
             -n Technology Co., Ltd.
2874      =3  #define MFG_ID_HAB_HOME_INTELLIGENCE_LLC                           0x0287   //HAB Home Intelligence, LLC
2875      =3  #define MFG_ID_HAMPOO                                              0x030D   //Hampoo
2876      =3  #define MFG_ID_HANK_ELECTRONICS_LTD                                0x0208   //HANK Electronics Ltd
2877      =3  #define MFG_ID_HANKOOK_GAS_KIKI_CO_LTD                             0x024C   //Hankook Gas Kiki CO.,LTD. 
2878      =3  #define MFG_ID_HAUPPAUGE                                           0x025C   //Hauppauge
2879      =3  #define MFG_ID_HAWKING_TECHNOLOGIES_INC                            0x0073   //Hawking Technologies Inc.
2880      =3  #define MFG_ID_HERALD_DATANETICS_LIMITED                           0x020F   //Herald Datanetics Limited
2881      =3  #define MFG_ID_HITECH_AUTOMATION                                   0x0017   //HiTech Automation
2882      =3  #define MFG_ID_HOLION_ELECTRONIC_ENGINEERING_CO_LTD                0x0181   //Holion Electronic Engineerin
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 61  

             -g Co., Ltd
2883      =3  #define MFG_ID_HOLTEC_ELECTRONICS_BV                               0x013E   //Holtec Electronics BV
2884      =3  #define MFG_ID_HOME_AUTOMATED_LIVING                               0x000D   //Home Automated Living
2885      =3  #define MFG_ID_HOME_AUTOMATION_EUROPE                              0x009A   //Home Automation Europe
2886      =3  #define MFG_ID_HOME_AUTOMATION_INC                                 0x005B   //Home Automation Inc.
2887      =3  #define MFG_ID_HOME_CONTROLS                                       0x0293   //Home controls
2888      =3  #define MFG_ID_HOME_DIRECTOR                                       0x0038   //Home Director
2889      =3  #define MFG_ID_HOMEMANAGEABLES_INC                                 0x0070   //Homemanageables, Inc.
2890      =3  #define MFG_ID_HOMEPRO                                             0x0050   //Homepro
2891      =3  #define MFG_ID_HOMESCENARIO                                        0x0162   //HomeScenario
2892      =3  #define MFG_ID_HOMESEER_TECHNOLOGIES                               0x000C   //HomeSeer Technologies
2893      =3  #define MFG_ID_HONEST_TECHNOLOGY                                   0x0275   //Honest Technology
2894      =3  #define MFG_ID_HONEST_TECHNOLOGY_CO_LTD                            0x023D   //Honest Technology Co., Ltd.
2895      =3  #define MFG_ID_HONEYWELL                                           0x0039   //Honeywell
2896      =3  #define MFG_ID_HOPPE                                               0x0313   //Hoppe
2897      =3  #define MFG_ID_HORUS_SMART_CONTROL                                 0x0298   //Horus Smart Control
2898      =3  #define MFG_ID_HOSEOTELNET                                         0x0221   //HOSEOTELNET
2899      =3  #define MFG_ID_HUAPIN_INFORMATION_TECHNOLOGY_CO_LTD                0x0180   //Huapin Information Technolog
             -y Co.,Ltd
2900      =3  #define MFG_ID_HUAWEI_DEVICE_CO_LTD                                0x025F   //Huawei Device Co., Ltd. 
2901      =3  #define MFG_ID_HUAWEI_TECHNOLOGIES_CO_LTD                          0x024B   //Huawei Technologies Co., Ltd
             -.
2902      =3  #define MFG_ID_HUNTER_DOUGLAS                                      0x007C   //Hunter Douglas
2903      =3  #define MFG_ID_IAUTOMADE_PTE_LTD                                   0x0218   //iAutomade Pte Ltd
2904      =3  #define MFG_ID_ICOM_TECHNOLOGY_BV                                  0x0011   //iCOM Technology b.v.
2905      =3  #define MFG_ID_ICONTROL                                            0x0106   //iControl
2906      =3  #define MFG_ID_ICONTROL_NETWORKS                                   0x0106   //Icontrol Networks
2907      =3  #define MFG_ID_IDRF                                                0x0165   //ID-RF
2908      =3  #define MFG_ID_IEXERGY_GMBH                                        0x019E   //iEXERGY GmbH
2909      =3  #define MFG_ID_ILEVIA_SRL                                          0x031C   //Ilevia srl
2910      =3  #define MFG_ID_IMPACT_TECHNOLOGIES_AND_PRODUCTS                    0x0056   //Impact Technologies and Prod
             -ucts
2911      =3  #define MFG_ID_IMPACT_TECHNOLOGIES_BV                              0x0061   //Impact Technologies BV
2912      =3  #define MFG_ID_INFUSION_DEVELOPMENT                                0x012B   //Infusion Development
2913      =3  #define MFG_ID_INGERSOLL_RAND_SCHLAGE                              0x006C   //Ingersoll Rand (Schlage)
2914      =3  #define MFG_ID_INGERSOLL_RAND_ECOLINK                              0x011F   //Ingersoll Rand (was Ecolink)
2915      =3  #define MFG_ID_INKEL_CORP                                          0x0256   //Inkel Corp.
2916      =3  #define MFG_ID_INLON_SRL                                           0x003A   //Inlon Srl
2917      =3  #define MFG_ID_INNOBAND_TECHNOLOGIES_INC                           0x0141   //Innoband Technologies, Inc
2918      =3  #define MFG_ID_INNOVUS                                             0x0077   //INNOVUS
2919      =3  #define MFG_ID_INOVELLI                                            0x031E   //Inovelli
2920      =3  #define MFG_ID_INSIGNIA                                            0x0100   //Insignia
2921      =3  #define MFG_ID_INTEL                                               0x0006   //Intel
2922      =3  #define MFG_ID_INTELLICON                                          0x001C   //IntelliCon
2923      =3  #define MFG_ID_INTERACTIVE_ELECTRONICS_SYSTEMS_IES                 0x0072   //Interactive Electronics Syst
             -ems (IES)
2924      =3  #define MFG_ID_INTERMATIC                                          0x0005   //Intermatic
2925      =3  #define MFG_ID_INTERNET_DOM                                        0x0013   //Internet Dom
2926      =3  #define MFG_ID_INTERSOFT                                           0x0288   //INTERSOFT
2927      =3  #define MFG_ID_INVENTEC                                            0x0278   //Inventec
2928      =3  #define MFG_ID_IQGROUP                                             0x005F   //IQ-Group
2929      =3  #define MFG_ID_IREVO                                               0x0212   //iRevo
2930      =3  #define MFG_ID_IUNGONL_BV                                          0x0253   //iungo.nl B.V.
2931      =3  #define MFG_ID_IWATSU                                              0x0123   //IWATSU
2932      =3  #define MFG_ID_JASCO_PRODUCTS                                      0x0063   //Jasco Products
2933      =3  #define MFG_ID_JIN_TAO_BAO                                         0x015A   //Jin Tao Bao
2934      =3  #define MFG_ID_JSW_PACIFIC_CORPORATION                             0x0164   //JSW Pacific Corporation
2935      =3  #define MFG_ID_KAIPULE_TECHNOLOGY_CO_LTD                           0x0214   //Kaipule Technology Co., Ltd.
2936      =3  #define MFG_ID_KAMSTRUP_AS                                         0x0091   //Kamstrup A/S
2937      =3  #define MFG_ID_KELLENDONK_ELEKTRONIK                               0x006A   //Kellendonk Elektronik
2938      =3  #define MFG_ID_KICHLER                                             0x0114   //Kichler
2939      =3  #define MFG_ID_KLICKH_PVT_LTD                                      0x0139   //KlickH Pvt Ltd.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 62  

2940      =3  #define MFG_ID_KOOL_KONCEPTS                                       0x0261   //KOOL KONCEPTS
2941      =3  #define MFG_ID_KOPERA_DEVELOPMENT_INC                              0x0174   //Kopera Development Inc.
2942      =3  #define MFG_ID_KUMHO_ELECTRIC_INC                                  0x023A   //KUMHO ELECTRIC, INC
2943      =3  #define MFG_ID_LAGOTEK_CORPORATION                                 0x0051   //Lagotek Corporation
2944      =3  #define MFG_ID_LEAK_INTELLIGENCE_LLC                               0x0173   //Leak Intelligence, LLC
2945      =3  #define MFG_ID_LEEDARSON_LIGHTING_CO_LTD                           0x0300   //LEEDARSON LIGHTING CO., LTD.
2946      =3  #define MFG_ID_LEVION_TECHNOLOGIES_GMBH                            0x0187   //LEVION Technologies GmbH
2947      =3  #define MFG_ID_LEVITON                                             0x001D   //Leviton
2948      =3  #define MFG_ID_LEXEL                                               0x0015   //Lexel
2949      =3  #define MFG_ID_LG_ELECTRONICS                                      0x015B   //LG Electronics
2950      =3  #define MFG_ID_LIFESHIELD_LLC                                      0x0224   //LifeShield, LLC
2951      =3  #define MFG_ID_LIFESTYLE_NETWORKS                                  0x003C   //Lifestyle Networks
2952      =3  #define MFG_ID_LIGHT_ENGINE_LIMITED                                0x0210   //Light Engine Limited
2953      =3  #define MFG_ID_LITE_AUTOMATION                                     0x0316   //Lite Automation
2954      =3  #define MFG_ID_LIVEGUARD_LTD                                       0x017A   //Liveguard Ltd.
2955      =3  #define MFG_ID_LIVING_STYLE_ENTERPRISES_LTD                        0x013A   //Living Style Enterprises, Lt
             -d.
2956      =3  #define MFG_ID_LOCSTAR_TECHNOLOGY_CO_LTD                           0x015E   //Locstar Technology Co., Ltd
2957      =3  #define MFG_ID_LOGITECH                                            0x007F   //Logitech
2958      =3  #define MFG_ID_LOUDWATER_TECHNOLOGIES_LLC                          0x0025   //Loudwater Technologies, LLC
2959      =3  #define MFG_ID_LS_CONTROL                                          0x0071   //LS Control
2960      =3  #define MFG_ID_LUXEASY_TECHNOLOGY_COMPANY_LTD                      0x025E   //LUXEASY technology company L
             -TD.
2961      =3  #define MFG_ID_LVI_PRODUKTER_AB                                    0x0062   //LVI Produkter AB
2962      =3  #define MFG_ID_m2m_SOLUTION                                        0x0192   //m2m Solution
2963      =3  #define MFG_ID_M2M_SOLUTION                                        0x0195   //M2M Solution
2964      =3  #define MFG_ID_MANODO_KTC                                          0x006E   //Manodo / KTC
2965      =3  #define MFG_ID_MARMITEK_BV                                         0x003D   //Marmitek BV
2966      =3  #define MFG_ID_MARTEC_ACCESS_PRODUCTS                              0x003E   //Martec Access Products
2967      =3  #define MFG_ID_MARTIN_RENZ_GMBH                                    0x0092   //Martin Renz GmbH
2968      =3  #define MFG_ID_MB_TURN_KEY_DESIGN                                  0x008F   //MB Turn Key Design
2969      =3  #define MFG_ID_MCOHOME_TECHNOLOGY_CO_LTD                           0x015F   //McoHome Technology Co., Ltd
2970      =3  #define MFG_ID_MCT_CO_LTD                                          0x0222   //MCT CO., LTD
2971      =3  #define MFG_ID_MEEDIO_LLC                                          0x0027   //Meedio, LLC
2972      =3  #define MFG_ID_MEGACHIPS                                           0x0107   //MegaChips
2973      =3  #define MFG_ID_MERCURY_CORPORATION                                 0x022D   //Mercury Corporation
2974      =3  #define MFG_ID_MERTEN                                              0x007A   //Merten
2975      =3  #define MFG_ID_MILANITY_INC                                        0x0238   //Milanity, Inc.
2976      =3  #define MFG_ID_MITSUMI                                             0x0112   //MITSUMI
2977      =3  #define MFG_ID_MOBILUS_MOTOR_SPOLKA_Z_OO                           0x019D   //MOBILUS MOTOR SpÃ³?ka z o.o.
             - 
2978      =3  #define MFG_ID_MODACOM_CO_LTD                                      0x0232   //MODACOM CO., LTD.
2979      =3  #define MFG_ID_MODSTROM                                            0x008D   //ModstrÃ¸m
2980      =3  #define MFG_ID_MOHITO_NETWORKS                                     0x000E   //Mohito Networks
2981      =3  #define MFG_ID_MONOPRICE                                           0x0202   //Monoprice
2982      =3  #define MFG_ID_MONSTER_CABLE                                       0x007E   //Monster Cable
2983      =3  #define MFG_ID_MOTION_CONTROL_SYSTEMS                              0x0125   //Motion Control Systems
2984      =3  #define MFG_ID_MOTOROLA                                            0x003F   //Motorola
2985      =3  #define MFG_ID_MSK_MIYAKAWA_SEISAKUSHO                             0x0122   //MSK - Miyakawa Seisakusho
2986      =3  #define MFG_ID_MTC_MAINTRONIC_GERMANY                              0x0083   //MTC Maintronic Germany
2987      =3  #define MFG_ID_MYSTROM                                             0x0143   //myStrom
2988      =3  #define MFG_ID_NANJING_EASTHOUSE_ELECTRICAL_CO_LTD                 0x016E   //Nanjing Easthouse Electrical
             - Co., Ltd.
2989      =3  #define MFG_ID_NAPCO_SECURITY_TECHNOLOGIES_INC                     0x0121   //Napco Security Technologies,
             - Inc.
2990      =3  #define MFG_ID_NEFIT                                               0x006D   //Nefit
2991      =3  #define MFG_ID_NESS_CORPORATION_PTY_LTD                            0x0189   //Ness Corporation Pty Ltd
2992      =3  #define MFG_ID_NETGEAR                                             0x0133   //Netgear
2993      =3  #define MFG_ID_NEUSTA_NEXT_GMBH_CO_KG                              0x0248   //neusta next GmbH & Co. KG
2994      =3  #define MFG_ID_NEWLAND_COMMUNICATION_SCIENCE_TECHNOLOGY_CO_LTD     0x0203   //Newland Communication Scienc
             -e Technology Co., Ltd.
2995      =3  #define MFG_ID_NEXA_TRADING_AB                                     0x0268   //Nexa Trading AB
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 63  

2996      =3  #define MFG_ID_NEXIA_HOME_INTELLIGENCE                             0x0178   //Nexia Home Intelligence
2997      =3  #define MFG_ID_NEXTENERGY                                          0x0075   //NextEnergy
2998      =3  #define MFG_ID_NIE_TECHNOLOGY_CO_LTD                               0x0312   //NIE Technology Co., Ltd
2999      =3  #define MFG_ID_NINGBO_SENTEK_ELECTRONICS_CO_LTD                    0x0185   //Ningbo Sentek Electronics Co
             -., Ltd
3000      =3  #define MFG_ID_NORTEK_SECURITY_CONTROL_LLC                         0x014F   //Nortek Security & Control LL
             -C 
3001      =3  #define MFG_ID_NORTH_CHINA_UNIVERSITY_OF_TECHNOLOGY                0x0252   //North China University of Te
             -chnology
3002      =3  #define MFG_ID_NORTHQ                                              0x0096   //NorthQ
3003      =3  #define MFG_ID_NOVAR_ELECTRICAL_DEVICES_AND_SYSTEMS_EDS            0x0040   //Novar Electrical Devices and
             - Systems (EDS)
3004      =3  #define MFG_ID_NOVATEQNI_HK_LTD                                    0x020D   //Novateqni HK Ltd
3005      =3  #define MFG_ID_OBLO_LIVING_LLC                                     0x0296   //OBLO LIVING LLC
3006      =3  #define MFG_ID_OMNIMA_LIMITED                                      0x0119   //Omnima Limited
3007      =3  #define MFG_ID_ONSITE_PRO                                          0x014C   //OnSite Pro
3008      =3  #define MFG_ID_OPENPEAK_INC                                        0x0041   //OpenPeak Inc.
3009      =3  #define MFG_ID_OREGON_AUTOMATION                                   0x027D   //Oregon Automation 
3010      =3  #define MFG_ID_PANASONIC_ELECTRIC_WORKS_CO_LTD                     0x0104   //Panasonic Electric Works Co.
             -, Ltd.
3011      =3  #define MFG_ID_PANASONIC_ES_SHIN_DONGA_CO_LTD                      0x031A   //Panasonic ES Shin Dong-A Co.
             -, Ltd
3012      =3  #define MFG_ID_PANODIC_ELECTRIC_SHENZHEN_LIMITED                   0x028D   //Panodic Electric (Shenzhen) 
             -Limited
3013      =3  #define MFG_ID_PARATECH                                            0x0257   //PARATECH
3014      =3  #define MFG_ID_PASSIVSYSTEMS_LIMITED                               0x0172   //PassivSystems Limited
3015      =3  #define MFG_ID_PAXTON_ACCESS_LTD                                   0x0322   //Paxton Access Ltd
3016      =3  #define MFG_ID_PC_PARTNER                                          0x0281   //PC Partner
3017      =3  #define MFG_ID_PELLA                                               0x013D   //Pella
3018      =3  #define MFG_ID_PERMUNDO_GMBH                                       0x0245   //permundo GmbH
3019      =3  #define MFG_ID_PHILIO_TECHNOLOGY_CORP                              0x013C   //Philio Technology Corp
3020      =3  #define MFG_ID_PIXELA_CORPORATION                                  0x0277   //Pixela Corporation 
3021      =3  #define MFG_ID_POLYCONTROL                                         0x010E   //Poly-control
3022      =3  #define MFG_ID_POPP_CO                                             0x0154   //Popp & Co
3023      =3  #define MFG_ID_POWERHOUSE_DYNAMICS                                 0x0170   //Powerhouse Dynamics
3024      =3  #define MFG_ID_POWERLINX                                           0x0074   //PowerLinx
3025      =3  #define MFG_ID_POWERLYNX                                           0x0016   //PowerLynx
3026      =3  #define MFG_ID_PRAGMATIC_CONSULTING_INC                            0x0042   //Pragmatic Consulting Inc.
3027      =3  #define MFG_ID_PRODRIVE_TECHNOLOGIES                               0x0128   //Prodrive Technologies
3028      =3  #define MFG_ID_PROMIXIS_LLC                                        0x0161   //Promixis, LLC
3029      =3  #define MFG_ID_PULSE_TECHNOLOGIES_ASPALIS                          0x005D   //Pulse Technologies (Aspalis)
3030      =3  #define MFG_ID_QEES                                                0x0095   //Qees
3031      =3  #define MFG_ID_QOLSYS                                              0x012A   //Qolsys
3032      =3  #define MFG_ID_QUBY                                                0x0130   //Quby
3033      =3  #define MFG_ID_QUEENLOCK_IND_CO_LTD                                0x0163   //Queenlock Ind. Co., Ltd.
3034      =3  #define MFG_ID_RADEMACHER_GERATEELEKTRONIK_GMBH_CO_KG              0x0142   //Rademacher GerÃ¤te-Elektroni
             -k GmbH & Co. KG
3035      =3  #define MFG_ID_RADIO_THERMOSTAT_COMPANY_OF_AMERICA_RTC             0x0098   //Radio Thermostat Company of 
             -America (RTC)
3036      =3  #define MFG_ID_RAONIX_CO_LTD                                       0x0314   //Raonix Co., Ltd.
3037      =3  #define MFG_ID_RARITAN                                             0x008E   //Raritan
3038      =3  #define MFG_ID_RED_BEE_CO_LTD                                      0x021E   //Red Bee Co. Ltd
3039      =3  #define MFG_ID_REITZGROUPDE                                        0x0064   //Reitz-Group.de
3040      =3  #define MFG_ID_REMOTE_SOLUTION                                     0x022C   //Remote Solution
3041      =3  #define MFG_ID_REMOTE_TECHNOLOGIES_INCORPORATED                    0x0255   //Remote Technologies Incorpor
             -ated
3042      =3  #define MFG_ID_REMOTEC                                             0x5254   //Remotec
3043      =3  #define MFG_ID_RESIDENTIAL_CONTROL_SYSTEMS_INC_RCS                 0x0010   //Residential Control Systems,
             - Inc. (RCS)
3044      =3  #define MFG_ID_RET_NANJING_INTELLIGENCE_SYSTEM_CO_LTD              0x0216   //RET Nanjing Intelligence Sys
             -tem CO.,Ltd
3045      =3  #define MFG_ID_REVOLV_INC                                          0x0153   //Revolv Inc
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 64  

3046      =3  #define MFG_ID_RIMPORT_LTD                                         0x0147   //R-import Ltd.
3047      =3  #define MFG_ID_ROCCONNECT_INC                                      0x023B   //ROC-Connect, Inc.
3048      =3  #define MFG_ID_RPE_AJAX_LLC_DBS_SECUR_LTD                          0x0197   //RPE Ajax LLC (dbs Secur Ltd)
3049      =3  #define MFG_ID_RS_SCENE_AUTOMATION                                 0x0065   //RS Scene Automation
3050      =3  #define MFG_ID_RUBETEK                                             0x029D   //Rubetek
3051      =3  #define MFG_ID_S1                                                  0x0290   //S1
3052      =3  #define MFG_ID_SAFETECH_PRODUCTS                                   0x023C   //SafeTech Products
3053      =3  #define MFG_ID_SAMSUNG_ELECTRONICS_CO_LTD                          0x0201   //Samsung Electronics Co., Ltd
             -.
3054      =3  #define MFG_ID_SAMSUNG_SDS                                         0x022E   //Samsung SDS
3055      =3  #define MFG_ID_SAN_SHIH_ELECTRICAL_ENTERPRISE_CO_LTD               0x0093   //San Shih Electrical Enterpri
             -se Co., Ltd.
3056      =3  #define MFG_ID_SANAV                                               0x012C   //SANAV
3057      =3  #define MFG_ID_SATCO_PRODUCTS_INC                                  0x0307   //SATCO Products, Inc. 
3058      =3  #define MFG_ID_SBCK_CORP                                           0x0318   //SBCK Corp. 
3059      =3  #define MFG_ID_SCIENTIA_TECHNOLOGIES_INC                           0x001F   //Scientia Technologies, Inc.
3060      =3  #define MFG_ID_SCOUT_ALARM                                         0x029A   //Scout Alarm
3061      =3  #define MFG_ID_SECURE_CONTROLS_UK_LTD                              0x0059   //Secure Controls (UK) Ltd
3062      =3  #define MFG_ID_SECURE_WIRELESS                                     0x011E   //Secure Wireless
3063      =3  #define MFG_ID_SECURENET_TECHNOLOGIES                              0x0167   //SecureNet Technologies
3064      =3  #define MFG_ID_SECURIFI_LTD                                        0x0182   //Securifi Ltd.
3065      =3  #define MFG_ID_SELUXIT                                             0x0069   //Seluxit
3066      =3  #define MFG_ID_SENMATIC_AS                                         0x0043   //Senmatic A/S
3067      =3  #define MFG_ID_SENSATIVE_AB                                        0x019A   //Sensative AB
3068      =3  #define MFG_ID_SEQUOIA_TECHNOLOGY_LTD                              0x0044   //Sequoia Technology LTD
3069      =3  #define MFG_ID_SERCOMM_CORP                                        0x0151   //Sercomm Corp
3070      =3  #define MFG_ID_SHANDONG_SMART_LIFE_DATA_SYSTEM_CO_LTD              0x030B   //Shandong Smart Life Data Sys
             -tem Co .LTD
3071      =3  #define MFG_ID_SHANGDONG_SMART_LIFE_DATA_SYSTEM_CO_LTD             0x0215   //Shangdong Smart Life Data Sy
             -stem Co.,Ltd
3072      =3  #define MFG_ID_SHANGHAI_DORLINK_INTELLIGENT_TECHNOLOGIES_CO_LTD    0x023E   //Shanghai Dorlink Intelligent
             - Technologies Co.,Ltd
3073      =3  #define MFG_ID_SHANGHAI_LONGCHUANG_ECOENERGY_SYSTEMS_CO_LTD        0x0205   //Shanghai Longchuang Eco-ener
             -gy Systems Co., Ltd
3074      =3  #define MFG_ID_SHARP                                               0x010B   //Sharp
3075      =3  #define MFG_ID_SHENZHEN_AOYA_INDUSTRY_CO_LTD                       0x021A   //SHENZHEN AOYA INDUSTRY CO. L
             -TD
3076      =3  #define MFG_ID_SHENZHEN_EASYHOME_TECHNOLOGY_CO_LTD                 0x0286   //Shenzhen Easyhome Technology
             - Co., Ltd.
3077      =3  #define MFG_ID_SHENZHEN_ISURPASS_TECHNOLOGY_CO_LTD                 0x021C   //Shenzhen iSurpass Technology
             - Co. ,Ltd
3078      =3  #define MFG_ID_SHENZHEN_KAADAS_INTELLIGENT_TECHNOLOGY_CO_LTD       0x021D   //Shenzhen Kaadas Intelligent 
             -Technology Co., Ltd
3079      =3  #define MFG_ID_SHENZHEN_LIAO_WANG_TONG_DA_TECHNOLOGY_LTD           0x0211   //Shenzhen Liao Wang Tong Da T
             -echnology Ltd
3080      =3  #define MFG_ID_SHENZHEN_NEO_ELECTRONICS_CO_LTD                     0x0258   //Shenzhen Neo Electronics Co.
             -, Ltd
3081      =3  #define MFG_ID_SHENZHEN_TRIPATH_DIGITAL_AUDIO_EQUIPMENT_CO_LTD     0x0250   //Shenzhen Tripath Digital Aud
             -io Equipment Co.,Ltd
3082      =3  #define MFG_ID_SHENZHEN_HEIMAN_TECHNOLOGY_CO_LTD                   0x0260   //Shenzhen Heiman Technology C
             -o., Ltd
3083      =3  #define MFG_ID_SHENZHEN_SAYKEY_TECHNOLOGY_CO_LTD                   0x032C   //Shenzhen Saykey Technology C
             -o., Ltd 
3084      =3  #define MFG_ID_SIEGENIAAUBI_KG                                     0x0081   //SIEGENIA-AUBI KG
3085      =3  #define MFG_ID_SIGMA_DESIGNS                                       0x0000   //Sigma Designs (Former Zensys
             -)
3086      =3  #define MFG_ID_SIMONTECH_SLU                                       0x0267   //SimonTech S.L.U
3087      =3  #define MFG_ID_SINE_WIRELESS                                       0x0045   //Sine Wireless
3088      =3  #define MFG_ID_SITERWELL_TECHNOLOGY_HK_CO_LTD                      0x0266   //Siterwell Technology HK Co.,
             - LTD 
3089      =3  #define MFG_ID_SMART_ELECTRONIC_INDUSTRIAL_DONGGUAN_CO_LIMITED     0x0282   //Smart Electronic Industrial 
             -(Dongguan) Co., Limited
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 65  

3090      =3  #define MFG_ID_SMART_PRODUCTS_INC                                  0x0046   //Smart Products, Inc.
3091      =3  #define MFG_ID_SMARTALL_INC                                        0x026A   //SmartAll Inc.
3092      =3  #define MFG_ID_SMARTHOME_PARTNER_GMBH                              0x0323   //SmartHome Partner GmbH
3093      =3  #define MFG_ID_SMARTLY_AS                                          0x024F   //Smartly AS
3094      =3  #define MFG_ID_SMARTTHINGS_INC                                     0x0150   //SmartThings, Inc.
3095      =3  #define MFG_ID_SMK_MANUFACTURING_INC                               0x0102   //SMK Manufacturing Inc.
3096      =3  #define MFG_ID_SOFTATHOME                                          0x029C   //SoftAtHome
3097      =3  #define MFG_ID_SOMFY                                               0x0047   //Somfy
3098      =3  #define MFG_ID_SOOSAN_HOMETECH                                     0x0274   //Soosan Hometech
3099      =3  #define MFG_ID_SPECTRUM_BRANDS                                     0x0090   //Spectrum Brands
3100      =3  #define MFG_ID_SPRINGS_WINDOW_FASHIONS                             0x026E   //Springs Window Fashions
3101      =3  #define MFG_ID_SPRUE_SAFETY_PRODUCTS_LTD                           0x026F   //Sprue Safety Products Ltd
3102      =3  #define MFG_ID_SQUARE_CONNECT                                      0x0124   //Square Connect
3103      =3  #define MFG_ID_STT_ELECTRIC_CORPORATION                            0x021B   //ST&T Electric Corporation
3104      =3  #define MFG_ID_STARKOFF                                            0x0259   //Starkoff
3105      =3  #define MFG_ID_STARVEDIA                                           0x0265   //StarVedia
3106      =3  #define MFG_ID_STEINEL_GMBH                                        0x0271   //STEINEL GmbH 
3107      =3  #define MFG_ID_STELPRO                                             0x0239   //Stelpro
3108      =3  #define MFG_ID_STRATTEC_ADVANCED_LOGIC_LLC                         0x0217   //Strattec Advanced Logic,LLC
3109      =3  #define MFG_ID_STRATTEC_SECURITY_CORPORATION                       0x0168   //STRATTEC Security Corporatio
             -n
3110      =3  #define MFG_ID_SUMITOMO                                            0x0105   //Sumitomo
3111      =3  #define MFG_ID_SUNJET_COMPONENTS_CORP                              0x028B   //Sunjet Components Corp.
3112      =3  #define MFG_ID_SUPERNA                                             0x0054   //Superna
3113      =3  #define MFG_ID_SWANN_COMMUNICATIONS_PTY_LTD                        0x0191   //Swann Communications Pty Ltd
3114      =3  #define MFG_ID_SYLVANIA                                            0x0009   //Sylvania
3115      =3  #define MFG_ID_SYSTECH_CORPORATION                                 0x0136   //Systech Corporation
3116      =3  #define MFG_ID_SYSTEMAIR_SVERIGE_AB                                0x0276   //Systemair Sverige AB
3117      =3  #define MFG_ID_TAEWON_LIGHTING_CO_LTD                              0x0235   //TAEWON Lighting Co., Ltd.
3118      =3  #define MFG_ID_TAIWAN_FU_HSING_INDUSTRIAL_CO_LTD                   0x0262   //Taiwan Fu Hsing Industrial C
             -o., Ltd.
3119      =3  #define MFG_ID_TAIWAN_ICATCH_INC                                   0x0264   //Taiwan iCATCH Inc.
3120      =3  #define MFG_ID_TEAM_DIGITAL_LIMITED                                0x0186   //Team Digital Limited
3121      =3  #define MFG_ID_TEAM_PRECISION_PCL                                  0x0089   //Team Precision PCL
3122      =3  #define MFG_ID_TECHNICOLOR                                         0x0240   //Technicolor
3123      =3  #define MFG_ID_TECHNIKU                                            0x000A   //Techniku
3124      =3  #define MFG_ID_TECOM_CO_LTD                                        0x012F   //Tecom Co., Ltd.
3125      =3  #define MFG_ID_TELL_IT_ONLINE                                      0x0012   //Tell It Online
3126      =3  #define MFG_ID_TELLDUS_TECHNOLOGIES_AB                             0x0176   //Telldus Technologies AB
3127      =3  #define MFG_ID_TELSEY                                              0x0048   //Telsey
3128      =3  #define MFG_ID_TELULAR                                             0x017E   //Telular
3129      =3  #define MFG_ID_TERRA_OPTIMA_BV_PRIMAIR_SERVICES                    0x005C   //Terra Optima B.V. (tidligere
             - Primair Services)
3130      =3  #define MFG_ID_THERE_CORPORATION                                   0x010C   //There Corporation
3131      =3  #define MFG_ID_THERMOFLOOR                                         0x019B   //ThermoFloor
3132      =3  #define MFG_ID_THINK_SIMPLE_SRL                                    0x0317   //Think Simple srl
3133      =3  #define MFG_ID_TIMEVALVE_INC                                       0x022A   //TIMEVALVE, Inc.
3134      =3  #define MFG_ID_TKB_HOME                                            0x0118   //TKB Home
3135      =3  #define MFG_ID_TKH_GROUP_EMINENT                                   0x011C   //TKH Group / Eminent
3136      =3  #define MFG_ID_TMC_TECHNOLOGY_LTD                                  0x0327   //TMC Technology Ltd.
3137      =3  #define MFG_ID_TOLEDO_CO_INC                                       0x0319   //Toledo & Co., Inc.
3138      =3  #define MFG_ID_TPLINK_TECHNOLOGIES_CO_LTD                          0x0283   //TP-Link Technologies Co., Lt
             -d.
3139      =3  #define MFG_ID_TRANE_CORPORATION                                   0x008B   //Trane Corporation
3140      =3  #define MFG_ID_TRICKLESTAR                                         0x0066   //TrickleStar
3141      =3  #define MFG_ID_TRICKLESTAR_LTD_EMPOWER_CONTROLS_LTD                0x006B   //Tricklestar Ltd. (former Emp
             -ower Controls Ltd.)
3142      =3  #define MFG_ID_TRIDIUM                                             0x0055   //Tridium
3143      =3  #define MFG_ID_TRONICO_TECHNOLOGY_CO_LTD                           0x0111   //Tronico Technology Co. Ltd.
3144      =3  #define MFG_ID_TWISTHINK                                           0x0049   //Twisthink
3145      =3  #define MFG_ID_UBITECH                                             0x0270   //Ubitech
3146      =3  #define MFG_ID_UFAIRY_GR_TECH                                      0x0152   //UFairy G.R. Tech
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 66  

3147      =3  #define MFG_ID_UNIVERSAL_DEVICES_INC                               0x0193   //Universal Devices, Inc
3148      =3  #define MFG_ID_UNIVERSAL_ELECTRONICS_INC                           0x0020   //Universal Electronics Inc.
3149      =3  #define MFG_ID_UNIVERSE_FUTURE                                     0x0183   //Universe Future
3150      =3  #define MFG_ID_UTC_FIRE_AND_SECURITY_AMERICAS_CORP                 0x0209   //UTC Fire and Security Americ
             -as Corp
3151      =3  #define MFG_ID_VDA                                                 0x010A   //VDA
3152      =3  #define MFG_ID_VEMMIO                                              0x030F   //Vemmio
3153      =3  #define MFG_ID_VENSTAR_INC                                         0x0198   //Venstar Inc.
3154      =3  #define MFG_ID_VERA_CONTROL                                        0x008C   //Vera Control
3155      =3  #define MFG_ID_VERO_DUCO                                           0x0080   //Vero Duco
3156      =3  #define MFG_ID_VESTEL_ELEKTRONIK_TICARET_VE_SANAYI_AS              0x0237   //Vestel Elektronik Ticaret ve
             - Sanayi A.S. 
3157      =3  #define MFG_ID_VIEWSONIC                                           0x0053   //Viewsonic
3158      =3  #define MFG_ID_VIEWSONIC_CORPORATION                               0x005E   //ViewSonic Corporation
3159      =3  #define MFG_ID_VIMAR_CRS                                           0x0007   //Vimar CRS
3160      =3  #define MFG_ID_VIPASTAR                                            0x0188   //Vipa-Star
3161      =3  #define MFG_ID_VISION_SECURITY                                     0x0109   //Vision Security
3162      =3  #define MFG_ID_VISUALIZE                                           0x004A   //Visualize
3163      =3  #define MFG_ID_VITELEC                                             0x0058   //Vitelec
3164      =3  #define MFG_ID_VIVA_LABS_AS                                        0x0263   //Viva Labs AS
3165      =3  #define MFG_ID_VIVINT                                              0x0156   //Vivint
3166      =3  #define MFG_ID_VSSAFETY_AS                                         0x017B   //Vs-Safety AS
3167      =3  #define MFG_ID_WATT_STOPPER                                        0x004B   //Watt Stopper
3168      =3  #define MFG_ID_WAYNE_DALTON                                        0x0008   //Wayne Dalton
3169      =3  #define MFG_ID_WEBEE_LIFE                                          0x019F   //Webee Life
3170      =3  #define MFG_ID_WEBEHOME_AB                                         0x0171   //WeBeHome AB
3171      =3  #define MFG_ID_WENZHOU_MTLC_ELECTRIC_APPLIANCES_CO_LTD             0x011A   //Wenzhou MTLC Electric Applia
             -nces Co.,Ltd.
3172      =3  #define MFG_ID_WESTCONTROL_AS                                      0x026C   //Westcontrol AS
3173      =3  #define MFG_ID_WHIRLPOOL                                           0x0057   //Whirlpool
3174      =3  #define MFG_ID_WHITE_RABBIT                                        0x027B   //White Rabbit
3175      =3  #define MFG_ID_WIDOM                                               0x0149   //wiDom
3176      =3  #define MFG_ID_WILLIS_ELECTRIC_CO_LTD                              0x015D   //Willis Electric Co., Ltd.
3177      =3  #define MFG_ID_WILSHINE_HOLDING_CO_LTD                             0x012D   //Wilshine Holding Co., Ltd
3178      =3  #define MFG_ID_WINK_INC                                            0x017F   //Wink Inc.
3179      =3  #define MFG_ID_WINTOP                                              0x0097   //Wintop
3180      =3  #define MFG_ID_WINYTECHNOLOGY                                      0x0242   //Winytechnology
3181      =3  #define MFG_ID_WIRELESS_MAINGATE_AB                                0x0199   //Wireless Maingate AB
3182      =3  #define MFG_ID_WOODWARD_LABS                                       0x004C   //Woodward Labs
3183      =3  #define MFG_ID_WOOREE_LIGHTING_CO_LTD                              0x0269   //WOOREE Lighting Co.,Ltd.
3184      =3  #define MFG_ID_WRAP                                                0x0003   //Wr@p
3185      =3  #define MFG_ID_WRT_INTELLIGENT_TECHNOLOGY_CO_LTD                   0x022F   //WRT Intelligent Technology C
             -O., LTD.
3186      =3  #define MFG_ID_WUHAN_NWD_TECHNOLOGY_CO_LTD                         0x012E   //Wuhan NWD Technology Co., Lt
             -d.
3187      =3  #define MFG_ID_XANBOO                                              0x004D   //Xanboo
3188      =3  #define MFG_ID_ZCONNECT                                            0x024E   //zConnect
3189      =3  #define MFG_ID_ZDATA_LLC                                           0x004E   //Zdata, LLC.
3190      =3  #define MFG_ID_ZHEJIANG_JIUXING_ELECTRIC_CO_LTD                    0x016F   //Zhejiang Jiuxing Electric Co
             - Ltd
3191      =3  #define MFG_ID_ZIPATO                                              0x0131   //Zipato
3192      =3  #define MFG_ID_ZONOFF                                              0x0120   //Zonoff
3193      =3  #define MFG_ID_ZOOZ                                                0x027A   //Zooz
3194      =3  #define MFG_ID_ZWAVE_ALLIANCE                                      0x031D   //Z-Wave Alliance
3195      =3  #define MFG_ID_ZWAVE_TECHNOLOGIA                                   0x004F   //Z-Wave Technologia
3196      =3  #define MFG_ID_ZWAVEME                                             0x0115   //Z-Wave.Me
3197      =3  #define MFG_ID_ZWAVEPRODUCTSCOM                                    0x0315   //zwaveproducts.com
3198      =3  #define MFG_ID_ZWORKS_INC                                          0x024D   //Z-works Inc.
3199      =3  #define MFG_ID_ZYKRONIX                                            0x0021   //Zykronix
3200      =3  #define MFG_ID_ZYXEL                                               0x0135   //ZyXEL
3201      =3  #define MFG_ID_BK_NGUYEN                                           0x1510   // Nguyen MOD
3202      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 67  

3203      =3  
3204      =3  /*************** command class identifiers ****************/
3205      =3  #define COMMAND_CLASS_ALARM                                                              0x71 /*[DEPRECATE
             -D]*/
3206      =3  #define COMMAND_CLASS_ALARM_V2                                                           0x71 /*[DEPRECATE
             -D]*/
3207      =3  #define COMMAND_CLASS_NOTIFICATION_V3                                                    0x71
3208      =3  #define COMMAND_CLASS_NOTIFICATION_V4                                                    0x71
3209      =3  #define COMMAND_CLASS_NOTIFICATION_V5                                                    0x71
3210      =3  #define COMMAND_CLASS_NOTIFICATION_V6                                                    0x71
3211      =3  #define COMMAND_CLASS_NOTIFICATION_V7                                                    0x71
3212      =3  #define COMMAND_CLASS_NOTIFICATION_V8                                                    0x71
3213      =3  #define COMMAND_CLASS_APPLICATION_STATUS                                                 0x22
3214      =3  #define COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION                                  0x9B
3215      =3  #define COMMAND_CLASS_ASSOCIATION                                                        0x85
3216      =3  #define COMMAND_CLASS_ASSOCIATION_V2                                                     0x85
3217      =3  #define COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD                                            0x95
3218      =3  #define COMMAND_CLASS_AV_CONTENT_SEARCH_MD                                               0x97
3219      =3  #define COMMAND_CLASS_AV_RENDERER_STATUS                                                 0x96
3220      =3  #define COMMAND_CLASS_AV_TAGGING_MD                                                      0x99
3221      =3  #define COMMAND_CLASS_BASIC_TARIFF_INFO                                                  0x36
3222      =3  #define COMMAND_CLASS_BASIC_WINDOW_COVERING                                              0x50 /*[OBSOLETED
             -]*/
3223      =3  #define COMMAND_CLASS_BASIC                                                              0x20
3224      =3  #define COMMAND_CLASS_BASIC_V2                                                           0x20
3225      =3  #define COMMAND_CLASS_BATTERY                                                            0x80
3226      =3  #define COMMAND_CLASS_CHIMNEY_FAN                                                        0x2A
3227      =3  #define COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE                                           0x46 /*[DEPRECATE
             -D]*/
3228      =3  #define COMMAND_CLASS_CLOCK                                                              0x81
3229      =3  #define COMMAND_CLASS_CONFIGURATION                                                      0x70
3230      =3  #define COMMAND_CLASS_CONFIGURATION_V2                                                   0x70
3231      =3  #define COMMAND_CLASS_CONFIGURATION_V3                                                   0x70
3232      =3  #define COMMAND_CLASS_CONFIGURATION_V4                                                   0x70
3233      =3  #define COMMAND_CLASS_CONTROLLER_REPLICATION                                             0x21
3234      =3  #define COMMAND_CLASS_CRC_16_ENCAP                                                       0x56
3235      =3  #define COMMAND_CLASS_DCP_CONFIG                                                         0x3A
3236      =3  #define COMMAND_CLASS_DCP_MONITOR                                                        0x3B
3237      =3  #define COMMAND_CLASS_DOOR_LOCK_LOGGING                                                  0x4C
3238      =3  #define COMMAND_CLASS_DOOR_LOCK                                                          0x62
3239      =3  #define COMMAND_CLASS_DOOR_LOCK_V2                                                       0x62
3240      =3  #define COMMAND_CLASS_DOOR_LOCK_V3                                                       0x62
3241      =3  #define COMMAND_CLASS_ENERGY_PRODUCTION                                                  0x90
3242      =3  #define COMMAND_CLASS_FIRMWARE_UPDATE_MD                                                 0x7A /*[DEPRECATE
             -D]*/
3243      =3  #define COMMAND_CLASS_FIRMWARE_UPDATE_MD_V2                                              0x7A
3244      =3  #define COMMAND_CLASS_FIRMWARE_UPDATE_MD_V3                                              0x7A
3245      =3  #define COMMAND_CLASS_FIRMWARE_UPDATE_MD_V4                                              0x7A
3246      =3  #define COMMAND_CLASS_FIRMWARE_UPDATE_MD_V5                                              0x7A
3247      =3  #define COMMAND_CLASS_GEOGRAPHIC_LOCATION                                                0x8C
3248      =3  #define COMMAND_CLASS_GROUPING_NAME                                                      0x7B /*[DEPRECATE
             -D]*/
3249      =3  #define COMMAND_CLASS_HAIL                                                               0x82 /*[DEPRECATE
             -D]*/
3250      =3  #define COMMAND_CLASS_HRV_CONTROL                                                        0x39
3251      =3  #define COMMAND_CLASS_HRV_STATUS                                                         0x37
3252      =3  #define COMMAND_CLASS_INDICATOR                                                          0x87
3253      =3  #define COMMAND_CLASS_INDICATOR_V2                                                       0x87
3254      =3  #define COMMAND_CLASS_IP_CONFIGURATION                                                   0x9A /*[OBSOLETED
             -]*/
3255      =3  #define COMMAND_CLASS_LANGUAGE                                                           0x89
3256      =3  #define COMMAND_CLASS_LOCK                                                               0x76 /*[DEPRECATE
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 68  

             -D]*/
3257      =3  #define COMMAND_CLASS_MANUFACTURER_PROPRIETARY                                           0x91
3258      =3  #define COMMAND_CLASS_MANUFACTURER_SPECIFIC                                              0x72
3259      =3  #define COMMAND_CLASS_MANUFACTURER_SPECIFIC_V2                                           0x72
3260      =3  #define COMMAND_CLASS_MARK                                                               0xEF
3261      =3  #define COMMAND_CLASS_METER_PULSE                                                        0x35 /*[DEPRECATE
             -D]*/
3262      =3  #define COMMAND_CLASS_METER_TBL_CONFIG                                                   0x3C
3263      =3  #define COMMAND_CLASS_METER_TBL_MONITOR                                                  0x3D
3264      =3  #define COMMAND_CLASS_METER_TBL_MONITOR_V2                                               0x3D
3265      =3  #define COMMAND_CLASS_METER_TBL_PUSH                                                     0x3E
3266      =3  #define COMMAND_CLASS_METER                                                              0x32
3267      =3  #define COMMAND_CLASS_METER_V2                                                           0x32
3268      =3  #define COMMAND_CLASS_METER_V3                                                           0x32
3269      =3  #define COMMAND_CLASS_METER_V4                                                           0x32
3270      =3  #define COMMAND_CLASS_METER_V5                                                           0x32
3271      =3  #define COMMAND_CLASS_MTP_WINDOW_COVERING                                                0x51 /*[OBSOLETED
             -]*/
3272      =3  #define COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2                                       0x8E
3273      =3  #define COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V3                                       0x8E
3274      =3  #define COMMAND_CLASS_MULTI_CHANNEL_V2                                                   0x60 /*[OBSOLETED
             -]*/
3275      =3  #define COMMAND_CLASS_MULTI_CHANNEL_V3                                                   0x60
3276      =3  #define COMMAND_CLASS_MULTI_CHANNEL_V4                                                   0x60
3277      =3  #define COMMAND_CLASS_MULTI_CMD                                                          0x8F
3278      =3  #define COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION                                         0x8E /*[OBSOLETED
             -]*/
3279      =3  #define COMMAND_CLASS_MULTI_INSTANCE                                                     0x60 /*[OBSOLETED
             -]*/
3280      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY                                           0x52
3281      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY_V2                                        0x52
3282      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC                                           0x4D
3283      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC_V2                                        0x4D
3284      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION                                       0x34
3285      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION_V2                                    0x34
3286      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION_V3                                    0x34
3287      =3  #define COMMAND_CLASS_NO_OPERATION                                                       0x00
3288      =3  #define COMMAND_CLASS_NODE_NAMING                                                        0x77
3289      =3  #define COMMAND_CLASS_NON_INTEROPERABLE                                                  0xF0
3290      =3  #define COMMAND_CLASS_POWERLEVEL                                                         0x73
3291      =3  #define COMMAND_CLASS_PREPAYMENT_ENCAPSULATION                                           0x41
3292      =3  #define COMMAND_CLASS_PREPAYMENT                                                         0x3F
3293      =3  #define COMMAND_CLASS_PROPRIETARY                                                        0x88 /*[DEPRECATE
             -D]*/
3294      =3  #define COMMAND_CLASS_PROTECTION                                                         0x75
3295      =3  #define COMMAND_CLASS_PROTECTION_V2                                                      0x75
3296      =3  #define COMMAND_CLASS_RATE_TBL_CONFIG                                                    0x48
3297      =3  #define COMMAND_CLASS_RATE_TBL_MONITOR                                                   0x49
3298      =3  #define COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE                                        0x7C /*[OBSOLETED
             -]*/
3299      =3  #define COMMAND_CLASS_REMOTE_ASSOCIATION                                                 0x7D /*[OBSOLETED
             -]*/
3300      =3  #define COMMAND_CLASS_SCENE_ACTIVATION                                                   0x2B
3301      =3  #define COMMAND_CLASS_SCENE_ACTUATOR_CONF                                                0x2C
3302      =3  #define COMMAND_CLASS_SCENE_CONTROLLER_CONF                                              0x2D
3303      =3  #define COMMAND_CLASS_SCHEDULE_ENTRY_LOCK                                                0x4E /*[DEPRECATE
             -D]*/
3304      =3  #define COMMAND_CLASS_SCHEDULE_ENTRY_LOCK_V2                                             0x4E /*[DEPRECATE
             -D]*/
3305      =3  #define COMMAND_CLASS_SCHEDULE_ENTRY_LOCK_V3                                             0x4E /*[DEPRECATE
             -D]*/
3306      =3  #define COMMAND_CLASS_SCREEN_ATTRIBUTES                                                  0x93
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 69  

3307      =3  #define COMMAND_CLASS_SCREEN_ATTRIBUTES_V2                                               0x93
3308      =3  #define COMMAND_CLASS_SCREEN_MD                                                          0x92
3309      =3  #define COMMAND_CLASS_SCREEN_MD_V2                                                       0x92
3310      =3  #define COMMAND_CLASS_SECURITY_PANEL_MODE                                                0x24
3311      =3  #define COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR                                         0x2F
3312      =3  #define COMMAND_CLASS_SECURITY_PANEL_ZONE                                                0x2E
3313      =3  #define COMMAND_CLASS_SECURITY                                                           0x98
3314      =3  #define COMMAND_CLASS_SENSOR_ALARM                                                       0x9C /*SDS10963-4
             - The Sensor Alarm command class can be used to realize Sensor Alarms.*/
3315      =3  #define COMMAND_CLASS_SENSOR_BINARY                                                      0x30 /*[DEPRECATE
             -D]*/
3316      =3  #define COMMAND_CLASS_SENSOR_BINARY_V2                                                   0x30 /*[DEPRECATE
             -D]*/
3317      =3  #define COMMAND_CLASS_SENSOR_CONFIGURATION                                               0x9E /*[OBSOLETED
             -]*/
3318      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL                                                  0x31
3319      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V2                                               0x31
3320      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V3                                               0x31
3321      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V4                                               0x31
3322      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V5                                               0x31
3323      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V6                                               0x31
3324      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V7                                               0x31
3325      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V8                                               0x31
3326      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V9                                               0x31
3327      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V10                                              0x31
3328      =3  #define COMMAND_CLASS_SENSOR_MULTILEVEL_V11                                              0x31
3329      =3  #define COMMAND_CLASS_SILENCE_ALARM                                                      0x9D /*SDS10963-4
             - The Alarm Silence command class can be used to nuisance silence to temporarily disable the sounding*/
3330      =3  #define COMMAND_CLASS_SIMPLE_AV_CONTROL                                                  0x94
3331      =3  #define COMMAND_CLASS_SWITCH_ALL                                                         0x27
3332      =3  #define COMMAND_CLASS_SWITCH_BINARY                                                      0x25
3333      =3  #define COMMAND_CLASS_SWITCH_BINARY_V2                                                   0x25
3334      =3  #define COMMAND_CLASS_SWITCH_MULTILEVEL                                                  0x26
3335      =3  #define COMMAND_CLASS_SWITCH_MULTILEVEL_V2                                               0x26
3336      =3  #define COMMAND_CLASS_SWITCH_MULTILEVEL_V3                                               0x26
3337      =3  #define COMMAND_CLASS_SWITCH_MULTILEVEL_V4                                               0x26
3338      =3  #define COMMAND_CLASS_SWITCH_TOGGLE_BINARY                                               0x28 /*[DEPRECATE
             -D]*/
3339      =3  #define COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL                                           0x29 /*[DEPRECATE
             -D]*/
3340      =3  #define COMMAND_CLASS_TARIFF_CONFIG                                                      0x4A
3341      =3  #define COMMAND_CLASS_TARIFF_TBL_MONITOR                                                 0x4B
3342      =3  #define COMMAND_CLASS_THERMOSTAT_FAN_MODE                                                0x44
3343      =3  #define COMMAND_CLASS_THERMOSTAT_FAN_MODE_V2                                             0x44
3344      =3  #define COMMAND_CLASS_THERMOSTAT_FAN_MODE_V3                                             0x44
3345      =3  #define COMMAND_CLASS_THERMOSTAT_FAN_MODE_V4                                             0x44
3346      =3  #define COMMAND_CLASS_THERMOSTAT_FAN_STATE                                               0x45
3347      =3  #define COMMAND_CLASS_THERMOSTAT_FAN_STATE_V2                                            0x45
3348      =3  #define COMMAND_CLASS_THERMOSTAT_HEATING                                                 0x38
3349      =3  #define COMMAND_CLASS_THERMOSTAT_MODE                                                    0x40
3350      =3  #define COMMAND_CLASS_THERMOSTAT_MODE_V2                                                 0x40
3351      =3  #define COMMAND_CLASS_THERMOSTAT_MODE_V3                                                 0x40
3352      =3  #define COMMAND_CLASS_THERMOSTAT_OPERATING_STATE                                         0x42
3353      =3  #define COMMAND_CLASS_THERMOSTAT_OPERATING_STATE_V2                                      0x42
3354      =3  #define COMMAND_CLASS_THERMOSTAT_SETBACK                                                 0x47
3355      =3  #define COMMAND_CLASS_THERMOSTAT_SETPOINT                                                0x43
3356      =3  #define COMMAND_CLASS_THERMOSTAT_SETPOINT_V2                                             0x43
3357      =3  #define COMMAND_CLASS_THERMOSTAT_SETPOINT_V3                                             0x43
3358      =3  #define COMMAND_CLASS_TIME_PARAMETERS                                                    0x8B
3359      =3  #define COMMAND_CLASS_TIME                                                               0x8A
3360      =3  #define COMMAND_CLASS_TIME_V2                                                            0x8A
3361      =3  #define COMMAND_CLASS_TRANSPORT_SERVICE_V2                                               0x55
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 70  

3362      =3  #define COMMAND_CLASS_TRANSPORT_SERVICE                                                  0x55 /*[OBSOLETED
             -]*/
3363      =3  #define COMMAND_CLASS_USER_CODE                                                          0x63
3364      =3  #define COMMAND_CLASS_VERSION                                                            0x86
3365      =3  #define COMMAND_CLASS_VERSION_V2                                                         0x86
3366      =3  #define COMMAND_CLASS_VERSION_V3                                                         0x86
3367      =3  #define COMMAND_CLASS_WAKE_UP                                                            0x84
3368      =3  #define COMMAND_CLASS_WAKE_UP_V2                                                         0x84
3369      =3  #define COMMAND_CLASS_ZIP_6LOWPAN                                                        0x4F
3370      =3  #define COMMAND_CLASS_ZIP                                                                0x23 /*[OBSOLETED
             -]*/
3371      =3  #define COMMAND_CLASS_ZIP_V2                                                             0x23
3372      =3  #define COMMAND_CLASS_ZIP_V3                                                             0x23
3373      =3  #define COMMAND_CLASS_APPLICATION_CAPABILITY                                             0x57
3374      =3  #define COMMAND_CLASS_SWITCH_COLOR                                                       0x33
3375      =3  #define COMMAND_CLASS_SWITCH_COLOR_V2                                                    0x33
3376      =3  #define COMMAND_CLASS_SWITCH_COLOR_V3                                                    0x33
3377      =3  #define COMMAND_CLASS_SCHEDULE                                                           0x53
3378      =3  #define COMMAND_CLASS_SCHEDULE_V2                                                        0x53
3379      =3  #define COMMAND_CLASS_SCHEDULE_V3                                                        0x53
3380      =3  #define COMMAND_CLASS_SCHEDULE_V4                                                        0x53
3381      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY                                         0x54
3382      =3  #define COMMAND_CLASS_ZIP_ND                                                             0x58
3383      =3  #define COMMAND_CLASS_ASSOCIATION_GRP_INFO                                               0x59
3384      =3  #define COMMAND_CLASS_ASSOCIATION_GRP_INFO_V2                                            0x59
3385      =3  #define COMMAND_CLASS_ASSOCIATION_GRP_INFO_V3                                            0x59
3386      =3  #define COMMAND_CLASS_DEVICE_RESET_LOCALLY                                               0x5A
3387      =3  #define COMMAND_CLASS_CENTRAL_SCENE                                                      0x5B
3388      =3  #define COMMAND_CLASS_CENTRAL_SCENE_V2                                                   0x5B
3389      =3  #define COMMAND_CLASS_CENTRAL_SCENE_V3                                                   0x5B
3390      =3  #define COMMAND_CLASS_IP_ASSOCIATION                                                     0x5C
3391      =3  #define COMMAND_CLASS_ANTITHEFT                                                          0x5D /*[OBSOLETED
             -]*/
3392      =3  #define COMMAND_CLASS_ANTITHEFT_V2                                                       0x5D
3393      =3  #define COMMAND_CLASS_ZWAVEPLUS_INFO                                                     0x5E /*[OBSOLETED
             -]*/
3394      =3  #define COMMAND_CLASS_ZWAVEPLUS_INFO_V2                                                  0x5E /*SDS11907-3
             -*/
3395      =3  #define COMMAND_CLASS_ZIP_GATEWAY                                                        0x5F
3396      =3  #define COMMAND_CLASS_ZIP_PORTAL                                                         0x61
3397      =3  #define COMMAND_CLASS_DMX                                                                0x65
3398      =3  #define COMMAND_CLASS_BARRIER_OPERATOR                                                   0x66
3399      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE                        0x67
3400      =3  #define COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE_V2                     0x67
3401      =3  #define COMMAND_CLASS_ZIP_NAMING                                                         0x68
3402      =3  #define COMMAND_CLASS_MAILBOX                                                            0x69
3403      =3  #define COMMAND_CLASS_WINDOW_COVERING                                                    0x6A
3404      =3  #define COMMAND_CLASS_SECURITY_2                                                         0x9F
3405      =3  #define COMMAND_CLASS_IRRIGATION                                                         0x6B
3406      =3  #define COMMAND_CLASS_SUPERVISION                                                        0x6C
3407      =3  #define COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT                                          0x64
3408      =3  #define COMMAND_CLASS_HUMIDITY_CONTROL_MODE                                              0x6D
3409      =3  #define COMMAND_CLASS_HUMIDITY_CONTROL_OPERATING_STATE                                   0x6E
3410      =3  #define COMMAND_CLASS_ENTRY_CONTROL                                                      0x6F
3411      =3  #define COMMAND_CLASS_INCLUSION_CONTROLLER                                               0x74
3412      =3  #define COMMAND_CLASS_NODE_PROVISIONING                                                  0x78
3413      =3  
3414      =3  /*************** command class extended identifiers ****************/
3415      =3  #define COMMAND_CLASS_SECURITY_SCHEME0_MARK                                              0xF100
3416      =3  
3417      =3  /* Unknown command class commands */
3418      =3  #define UNKNOWN_VERSION                                                                  0x00
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 71  

3419      =3  
3420      =3  /* Alarm command class commands */
3421      =3  #define ALARM_VERSION                                                                    0x01
3422      =3  #define ALARM_GET                                                                        0x04
3423      =3  #define ALARM_REPORT                                                                     0x05
3424      =3  
3425      =3  /* Alarm command class commands */
3426      =3  #define ALARM_VERSION_V2                                                                 0x02
3427      =3  #define ALARM_GET_V2                                                                     0x04
3428      =3  #define ALARM_REPORT_V2                                                                  0x05
3429      =3  #define ALARM_SET_V2                                                                     0x06
3430      =3  #define ALARM_TYPE_SUPPORTED_GET_V2                                                      0x07
3431      =3  #define ALARM_TYPE_SUPPORTED_REPORT_V2                                                   0x08
3432      =3  /* Values used for Alarm Get command */
3433      =3  #define ALARM_GET_RESERVED_V2                                                            0x00
3434      =3  #define ALARM_GET_SMOKE_V2                                                               0x01
3435      =3  #define ALARM_GET_CO_V2                                                                  0x02
3436      =3  #define ALARM_GET_CO2_V2                                                                 0x03
3437      =3  #define ALARM_GET_HEAT_V2                                                                0x04
3438      =3  #define ALARM_GET_WATER_V2                                                               0x05
3439      =3  #define ALARM_GET_ACCESS_CONTROL_V2                                                      0x06
3440      =3  #define ALARM_GET_BURGLAR_V2                                                             0x07
3441      =3  #define ALARM_GET_POWER_MANAGEMENT_V2                                                    0x08
3442      =3  #define ALARM_GET_SYSTEM_V2                                                              0x09
3443      =3  #define ALARM_GET_EMERGENCY_V2                                                           0x0A
3444      =3  #define ALARM_GET_CLOCK_V2                                                               0x0B
3445      =3  #define ALARM_GET_FIRST_V2                                                               0xFF
3446      =3  /* Values used for Alarm Report command */
3447      =3  #define ALARM_REPORT_RESERVED_V2                                                         0x00
3448      =3  #define ALARM_REPORT_SMOKE_V2                                                            0x01
3449      =3  #define ALARM_REPORT_CO_V2                                                               0x02
3450      =3  #define ALARM_REPORT_CO2_V2                                                              0x03
3451      =3  #define ALARM_REPORT_HEAT_V2                                                             0x04
3452      =3  #define ALARM_REPORT_WATER_V2                                                            0x05
3453      =3  #define ALARM_REPORT_ACCESS_CONTROL_V2                                                   0x06
3454      =3  #define ALARM_REPORT_BURGLAR_V2                                                          0x07
3455      =3  #define ALARM_REPORT_POWER_MANAGEMENT_V2                                                 0x08
3456      =3  #define ALARM_REPORT_SYSTEM_V2                                                           0x09
3457      =3  #define ALARM_REPORT_EMERGENCY_V2                                                        0x0A
3458      =3  #define ALARM_REPORT_CLOCK_V2                                                            0x0B
3459      =3  #define ALARM_REPORT_FIRST_V2                                                            0xFF
3460      =3  /* Values used for Alarm Set command */
3461      =3  #define ALARM_SET_RESERVED_V2                                                            0x00
3462      =3  #define ALARM_SET_SMOKE_V2                                                               0x01
3463      =3  #define ALARM_SET_CO_V2                                                                  0x02
3464      =3  #define ALARM_SET_CO2_V2                                                                 0x03
3465      =3  #define ALARM_SET_HEAT_V2                                                                0x04
3466      =3  #define ALARM_SET_WATER_V2                                                               0x05
3467      =3  #define ALARM_SET_ACCESS_CONTROL_V2                                                      0x06
3468      =3  #define ALARM_SET_BURGLAR_V2                                                             0x07
3469      =3  #define ALARM_SET_POWER_MANAGEMENT_V2                                                    0x08
3470      =3  #define ALARM_SET_SYSTEM_V2                                                              0x09
3471      =3  #define ALARM_SET_EMERGENCY_V2                                                           0x0A
3472      =3  #define ALARM_SET_CLOCK_V2                                                               0x0B
3473      =3  #define ALARM_SET_FIRST_V2                                                               0xFF
3474      =3  /* Values used for Alarm Type Supported Report command */
3475      =3  #define ALARM_TYPE_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V2              0x1F
3476      =3  #define ALARM_TYPE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V2                         0x60
3477      =3  #define ALARM_TYPE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                        0x05
3478      =3  #define ALARM_TYPE_SUPPORTED_REPORT_PROPERTIES1_V1_ALARM_BIT_MASK_V2                     0x80
3479      =3  
3480      =3  /* Notification command class commands */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 72  

3481      =3  #define NOTIFICATION_VERSION_V3                                                          0x03
3482      =3  #define NOTIFICATION_GET_V3                                                              0x04
3483      =3  #define NOTIFICATION_REPORT_V3                                                           0x05
3484      =3  #define NOTIFICATION_SET_V3                                                              0x06
3485      =3  #define NOTIFICATION_SUPPORTED_GET_V3                                                    0x07
3486      =3  #define NOTIFICATION_SUPPORTED_REPORT_V3                                                 0x08
3487      =3  #define EVENT_SUPPORTED_GET_V3                                                           0x01
3488      =3  #define EVENT_SUPPORTED_REPORT_V3                                                        0x02
3489      =3  /* Values used for Notification Get command */
3490      =3  #define NOTIFICATION_GET_RESERVED_V3                                                     0x00
3491      =3  #define NOTIFICATION_GET_SMOKE_V3                                                        0x01
3492      =3  #define NOTIFICATION_GET_CO_V3                                                           0x02
3493      =3  #define NOTIFICATION_GET_CO2_V3                                                          0x03
3494      =3  #define NOTIFICATION_GET_HEAT_V3                                                         0x04
3495      =3  #define NOTIFICATION_GET_WATER_V3                                                        0x05
3496      =3  #define NOTIFICATION_GET_ACCESS_CONTROL_V3                                               0x06
3497      =3  #define NOTIFICATION_GET_BURGLAR_V3                                                      0x07
3498      =3  #define NOTIFICATION_GET_POWER_MANAGEMENT_V3                                             0x08
3499      =3  #define NOTIFICATION_GET_SYSTEM_V3                                                       0x09
3500      =3  #define NOTIFICATION_GET_EMERGENCY_V3                                                    0x0A
3501      =3  #define NOTIFICATION_GET_CLOCK_V3                                                        0x0B
3502      =3  #define NOTIFICATION_GET_FIRST_V3                                                        0xFF
3503      =3  /* Values used for Notification Report command */
3504      =3  #define NOTIFICATION_REPORT_RESERVED_V3                                                  0x00
3505      =3  #define NOTIFICATION_REPORT_SMOKE_V3                                                     0x01
3506      =3  #define NOTIFICATION_REPORT_CO_V3                                                        0x02
3507      =3  #define NOTIFICATION_REPORT_CO2_V3                                                       0x03
3508      =3  #define NOTIFICATION_REPORT_HEAT_V3                                                      0x04
3509      =3  #define NOTIFICATION_REPORT_WATER_V3                                                     0x05
3510      =3  #define NOTIFICATION_REPORT_ACCESS_CONTROL_V3                                            0x06
3511      =3  #define NOTIFICATION_REPORT_BURGLAR_V3                                                   0x07
3512      =3  #define NOTIFICATION_REPORT_POWER_MANAGEMENT_V3                                          0x08
3513      =3  #define NOTIFICATION_REPORT_SYSTEM_V3                                                    0x09
3514      =3  #define NOTIFICATION_REPORT_EMERGENCY_V3                                                 0x0A
3515      =3  #define NOTIFICATION_REPORT_CLOCK_V3                                                     0x0B
3516      =3  #define NOTIFICATION_REPORT_FIRST_V3                                                     0xFF
3517      =3  #define NOTIFICATION_REPORT_PROPERTIES1_EVENT_PARAMETERS_LENGTH_MASK_V3                  0x1F
3518      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_MASK_V3                                0x60
3519      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_SHIFT_V3                               0x05
3520      =3  #define NOTIFICATION_REPORT_PROPERTIES1_SEQUENCE_BIT_MASK_V3                             0x80
3521      =3  /* Values used for Notification Set command */
3522      =3  #define NOTIFICATION_SET_RESERVED_V3                                                     0x00
3523      =3  #define NOTIFICATION_SET_SMOKE_V3                                                        0x01
3524      =3  #define NOTIFICATION_SET_CO_V3                                                           0x02
3525      =3  #define NOTIFICATION_SET_CO2_V3                                                          0x03
3526      =3  #define NOTIFICATION_SET_HEAT_V3                                                         0x04
3527      =3  #define NOTIFICATION_SET_WATER_V3                                                        0x05
3528      =3  #define NOTIFICATION_SET_ACCESS_CONTROL_V3                                               0x06
3529      =3  #define NOTIFICATION_SET_BURGLAR_V3                                                      0x07
3530      =3  #define NOTIFICATION_SET_POWER_MANAGEMENT_V3                                             0x08
3531      =3  #define NOTIFICATION_SET_SYSTEM_V3                                                       0x09
3532      =3  #define NOTIFICATION_SET_EMERGENCY_V3                                                    0x0A
3533      =3  #define NOTIFICATION_SET_CLOCK_V3                                                        0x0B
3534      =3  #define NOTIFICATION_SET_FIRST_V3                                                        0xFF
3535      =3  /* Values used for Notification Supported Report command */
3536      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V3            0x1F
3537      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V3                       0x60
3538      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                      0x05
3539      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_V1_ALARM_BIT_MASK_V3                   0x80
3540      =3  /* Values used for Event Supported Get command */
3541      =3  #define EVENT_SUPPORTED_GET_RESERVED_V3                                                  0x00
3542      =3  #define EVENT_SUPPORTED_GET_SMOKE_V3                                                     0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 73  

3543      =3  #define EVENT_SUPPORTED_GET_CO_V3                                                        0x02
3544      =3  #define EVENT_SUPPORTED_GET_CO2_V3                                                       0x03
3545      =3  #define EVENT_SUPPORTED_GET_HEAT_V3                                                      0x04
3546      =3  #define EVENT_SUPPORTED_GET_WATER_V3                                                     0x05
3547      =3  #define EVENT_SUPPORTED_GET_ACCESS_CONTROL_V3                                            0x06
3548      =3  #define EVENT_SUPPORTED_GET_BURGLAR_V3                                                   0x07
3549      =3  #define EVENT_SUPPORTED_GET_POWER_MANAGEMENT_V3                                          0x08
3550      =3  #define EVENT_SUPPORTED_GET_SYSTEM_V3                                                    0x09
3551      =3  #define EVENT_SUPPORTED_GET_EMERGENCY_V3                                                 0x0A
3552      =3  #define EVENT_SUPPORTED_GET_CLOCK_V3                                                     0x0B
3553      =3  #define EVENT_SUPPORTED_GET_FIRST_V3                                                     0xFF
3554      =3  /* Values used for Event Supported Report command */
3555      =3  #define EVENT_SUPPORTED_REPORT_RESERVED_V3                                               0x00
3556      =3  #define EVENT_SUPPORTED_REPORT_SMOKE_V3                                                  0x01
3557      =3  #define EVENT_SUPPORTED_REPORT_CO_V3                                                     0x02
3558      =3  #define EVENT_SUPPORTED_REPORT_CO2_V3                                                    0x03
3559      =3  #define EVENT_SUPPORTED_REPORT_HEAT_V3                                                   0x04
3560      =3  #define EVENT_SUPPORTED_REPORT_WATER_V3                                                  0x05
3561      =3  #define EVENT_SUPPORTED_REPORT_ACCESS_CONTROL_V3                                         0x06
3562      =3  #define EVENT_SUPPORTED_REPORT_BURGLAR_V3                                                0x07
3563      =3  #define EVENT_SUPPORTED_REPORT_POWER_MANAGEMENT_V3                                       0x08
3564      =3  #define EVENT_SUPPORTED_REPORT_SYSTEM_V3                                                 0x09
3565      =3  #define EVENT_SUPPORTED_REPORT_EMERGENCY_V3                                              0x0A
3566      =3  #define EVENT_SUPPORTED_REPORT_CLOCK_V3                                                  0x0B
3567      =3  #define EVENT_SUPPORTED_REPORT_FIRST_V3                                                  0xFF
3568      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V3                   0x1F
3569      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V3                              0xE0
3570      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                             0x05
3571      =3  
3572      =3  /* Notification command class commands */
3573      =3  #define NOTIFICATION_VERSION_V4                                                          0x04
3574      =3  #define NOTIFICATION_GET_V4                                                              0x04
3575      =3  #define NOTIFICATION_REPORT_V4                                                           0x05
3576      =3  #define NOTIFICATION_SET_V4                                                              0x06
3577      =3  #define NOTIFICATION_SUPPORTED_GET_V4                                                    0x07
3578      =3  #define NOTIFICATION_SUPPORTED_REPORT_V4                                                 0x08
3579      =3  #define EVENT_SUPPORTED_GET_V4                                                           0x01
3580      =3  #define EVENT_SUPPORTED_REPORT_V4                                                        0x02
3581      =3  /* Values used for Notification Get command */
3582      =3  #define NOTIFICATION_GET_RESERVED_V4                                                     0x00
3583      =3  #define NOTIFICATION_GET_SMOKE_V4                                                        0x01
3584      =3  #define NOTIFICATION_GET_CO_V4                                                           0x02
3585      =3  #define NOTIFICATION_GET_CO2_V4                                                          0x03
3586      =3  #define NOTIFICATION_GET_HEAT_V4                                                         0x04
3587      =3  #define NOTIFICATION_GET_WATER_V4                                                        0x05
3588      =3  #define NOTIFICATION_GET_ACCESS_CONTROL_V4                                               0x06
3589      =3  #define NOTIFICATION_GET_HOME_SECURITY_V4                                                0x07
3590      =3  #define NOTIFICATION_GET_POWER_MANAGEMENT_V4                                             0x08
3591      =3  #define NOTIFICATION_GET_SYSTEM_V4                                                       0x09
3592      =3  #define NOTIFICATION_GET_EMERGENCY_V4                                                    0x0A
3593      =3  #define NOTIFICATION_GET_CLOCK_V4                                                        0x0B
3594      =3  #define NOTIFICATION_GET_APPLIANCE_V4                                                    0x0C
3595      =3  #define NOTIFICATION_GET_HOME_HEALTH_V4                                                  0x0D
3596      =3  #define NOTIFICATION_GET_FIRST_V4                                                        0xFF
3597      =3  /* Values used for Notification Report command */
3598      =3  #define NOTIFICATION_REPORT_OFF_V4                                                       0x00
3599      =3  #define NOTIFICATION_REPORT_NO_PENDING_NOTIFICATIONS_V4                                  0xFE
3600      =3  #define NOTIFICATION_REPORT_ON_V4                                                        0xFF
3601      =3  #define NOTIFICATION_REPORT_RESERVED_V4                                                  0x00
3602      =3  #define NOTIFICATION_REPORT_SMOKE_V4                                                     0x01
3603      =3  #define NOTIFICATION_REPORT_CO_V4                                                        0x02
3604      =3  #define NOTIFICATION_REPORT_CO2_V4                                                       0x03
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 74  

3605      =3  #define NOTIFICATION_REPORT_HEAT_V4                                                      0x04
3606      =3  #define NOTIFICATION_REPORT_WATER_V4                                                     0x05
3607      =3  #define NOTIFICATION_REPORT_ACCESS_CONTROL_V4                                            0x06
3608      =3  #define NOTIFICATION_REPORT_HOME_SECURITY_V4                                             0x07
3609      =3  #define NOTIFICATION_REPORT_POWER_MANAGEMENT_V4                                          0x08
3610      =3  #define NOTIFICATION_REPORT_SYSTEM_V4                                                    0x09
3611      =3  #define NOTIFICATION_REPORT_EMERGENCY_V4                                                 0x0A
3612      =3  #define NOTIFICATION_REPORT_CLOCK_V4                                                     0x0B
3613      =3  #define NOTIFICATION_REPORT_APPLIANCE_V4                                                 0x0C
3614      =3  #define NOTIFICATION_REPORT_HOME_HEALTH_V4                                               0x0D
3615      =3  #define NOTIFICATION_REPORT_FIRST_V4                                                     0xFF
3616      =3  #define NOTIFICATION_REPORT_PROPERTIES1_EVENT_PARAMETERS_LENGTH_MASK_V4                  0x1F
3617      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_MASK_V4                                0x60
3618      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_SHIFT_V4                               0x05
3619      =3  #define NOTIFICATION_REPORT_PROPERTIES1_SEQUENCE_BIT_MASK_V4                             0x80
3620      =3  /* Values used for Notification Set command */
3621      =3  #define NOTIFICATION_SET_RESERVED_V4                                                     0x00
3622      =3  #define NOTIFICATION_SET_SMOKE_V4                                                        0x01
3623      =3  #define NOTIFICATION_SET_CO_V4                                                           0x02
3624      =3  #define NOTIFICATION_SET_CO2_V4                                                          0x03
3625      =3  #define NOTIFICATION_SET_HEAT_V4                                                         0x04
3626      =3  #define NOTIFICATION_SET_WATER_V4                                                        0x05
3627      =3  #define NOTIFICATION_SET_ACCESS_CONTROL_V4                                               0x06
3628      =3  #define NOTIFICATION_SET_HOME_SECURITY_V4                                                0x07
3629      =3  #define NOTIFICATION_SET_POWER_MANAGEMENT_V4                                             0x08
3630      =3  #define NOTIFICATION_SET_SYSTEM_V4                                                       0x09
3631      =3  #define NOTIFICATION_SET_EMERGENCY_V4                                                    0x0A
3632      =3  #define NOTIFICATION_SET_CLOCK_V4                                                        0x0B
3633      =3  #define NOTIFICATION_SET_APPLIANCE_V4                                                    0x0C
3634      =3  #define NOTIFICATION_SET_HOME_HEALTH_V4                                                  0x0D
3635      =3  #define NOTIFICATION_SET_FIRST_V4                                                        0xFF
3636      =3  #define NOTIFICATION_SET_OFF_V4                                                          0x00
3637      =3  #define NOTIFICATION_SET_NO_PENDING_NOTIFICATIONS_V4                                     0xFE
3638      =3  #define NOTIFICATION_SET_ON_V4                                                           0xFF
3639      =3  /* Values used for Notification Supported Report command */
3640      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V4            0x1F
3641      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V4                       0x60
3642      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V4                      0x05
3643      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_V1_ALARM_BIT_MASK_V4                   0x80
3644      =3  /* Values used for Event Supported Get command */
3645      =3  #define EVENT_SUPPORTED_GET_RESERVED_V4                                                  0x00
3646      =3  #define EVENT_SUPPORTED_GET_SMOKE_V4                                                     0x01
3647      =3  #define EVENT_SUPPORTED_GET_CO_V4                                                        0x02
3648      =3  #define EVENT_SUPPORTED_GET_CO2_V4                                                       0x03
3649      =3  #define EVENT_SUPPORTED_GET_HEAT_V4                                                      0x04
3650      =3  #define EVENT_SUPPORTED_GET_WATER_V4                                                     0x05
3651      =3  #define EVENT_SUPPORTED_GET_ACCESS_CONTROL_V4                                            0x06
3652      =3  #define EVENT_SUPPORTED_GET_HOME_SECURITY_V4                                             0x07
3653      =3  #define EVENT_SUPPORTED_GET_POWER_MANAGEMENT_V4                                          0x08
3654      =3  #define EVENT_SUPPORTED_GET_SYSTEM_V4                                                    0x09
3655      =3  #define EVENT_SUPPORTED_GET_EMERGENCY_V4                                                 0x0A
3656      =3  #define EVENT_SUPPORTED_GET_CLOCK_V4                                                     0x0B
3657      =3  #define EVENT_SUPPORTED_GET_APPLIANCE_V4                                                 0x0C
3658      =3  #define EVENT_SUPPORTED_GET_HOME_HEALTH_V4                                               0x0D
3659      =3  #define EVENT_SUPPORTED_GET_FIRST_V4                                                     0xFF
3660      =3  /* Values used for Event Supported Report command */
3661      =3  #define EVENT_SUPPORTED_REPORT_RESERVED_V4                                               0x00
3662      =3  #define EVENT_SUPPORTED_REPORT_SMOKE_V4                                                  0x01
3663      =3  #define EVENT_SUPPORTED_REPORT_CO_V4                                                     0x02
3664      =3  #define EVENT_SUPPORTED_REPORT_CO2_V4                                                    0x03
3665      =3  #define EVENT_SUPPORTED_REPORT_HEAT_V4                                                   0x04
3666      =3  #define EVENT_SUPPORTED_REPORT_WATER_V4                                                  0x05
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 75  

3667      =3  #define EVENT_SUPPORTED_REPORT_ACCESS_CONTROL_V4                                         0x06
3668      =3  #define EVENT_SUPPORTED_REPORT_HOME_SECURITY_V4                                          0x07
3669      =3  #define EVENT_SUPPORTED_REPORT_POWER_MANAGEMENT_V4                                       0x08
3670      =3  #define EVENT_SUPPORTED_REPORT_SYSTEM_V4                                                 0x09
3671      =3  #define EVENT_SUPPORTED_REPORT_EMERGENCY_V4                                              0x0A
3672      =3  #define EVENT_SUPPORTED_REPORT_CLOCK_V4                                                  0x0B
3673      =3  #define EVENT_SUPPORTED_REPORT_APPLIANCE_V4                                              0x0C
3674      =3  #define EVENT_SUPPORTED_REPORT_HOME_HEALTH_V4                                            0x0D
3675      =3  #define EVENT_SUPPORTED_REPORT_FIRST_V4                                                  0xFF
3676      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V4                   0x1F
3677      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V4                              0xE0
3678      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V4                             0x05
3679      =3  
3680      =3  /* Notification command class commands */
3681      =3  #define NOTIFICATION_VERSION_V5                                                          0x05
3682      =3  #define NOTIFICATION_GET_V5                                                              0x04
3683      =3  #define NOTIFICATION_REPORT_V5                                                           0x05
3684      =3  #define NOTIFICATION_SET_V5                                                              0x06
3685      =3  #define NOTIFICATION_SUPPORTED_GET_V5                                                    0x07
3686      =3  #define NOTIFICATION_SUPPORTED_REPORT_V5                                                 0x08
3687      =3  #define EVENT_SUPPORTED_GET_V5                                                           0x01
3688      =3  #define EVENT_SUPPORTED_REPORT_V5                                                        0x02
3689      =3  /* Values used for Notification Get command */
3690      =3  #define NOTIFICATION_GET_RESERVED_V5                                                     0x00
3691      =3  #define NOTIFICATION_GET_SMOKE_V5                                                        0x01
3692      =3  #define NOTIFICATION_GET_CO_V5                                                           0x02
3693      =3  #define NOTIFICATION_GET_CO2_V5                                                          0x03
3694      =3  #define NOTIFICATION_GET_HEAT_V5                                                         0x04
3695      =3  #define NOTIFICATION_GET_WATER_V5                                                        0x05
3696      =3  #define NOTIFICATION_GET_ACCESS_CONTROL_V5                                               0x06
3697      =3  #define NOTIFICATION_GET_HOME_SECURITY_V5                                                0x07
3698      =3  #define NOTIFICATION_GET_POWER_MANAGEMENT_V5                                             0x08
3699      =3  #define NOTIFICATION_GET_SYSTEM_V5                                                       0x09
3700      =3  #define NOTIFICATION_GET_EMERGENCY_V5                                                    0x0A
3701      =3  #define NOTIFICATION_GET_CLOCK_V5                                                        0x0B
3702      =3  #define NOTIFICATION_GET_APPLIANCE_V5                                                    0x0C
3703      =3  #define NOTIFICATION_GET_HOME_HEALTH_V5                                                  0x0D
3704      =3  #define NOTIFICATION_GET_FIRST_V5                                                        0xFF
3705      =3  /* Values used for Notification Report command */
3706      =3  #define NOTIFICATION_REPORT_OFF_V5                                                       0x00
3707      =3  #define NOTIFICATION_REPORT_NO_PENDING_NOTIFICATIONS_V5                                  0xFE
3708      =3  #define NOTIFICATION_REPORT_ON_V5                                                        0xFF
3709      =3  #define NOTIFICATION_REPORT_RESERVED_V5                                                  0x00
3710      =3  #define NOTIFICATION_REPORT_SMOKE_V5                                                     0x01
3711      =3  #define NOTIFICATION_REPORT_CO_V5                                                        0x02
3712      =3  #define NOTIFICATION_REPORT_CO2_V5                                                       0x03
3713      =3  #define NOTIFICATION_REPORT_HEAT_V5                                                      0x04
3714      =3  #define NOTIFICATION_REPORT_WATER_V5                                                     0x05
3715      =3  #define NOTIFICATION_REPORT_ACCESS_CONTROL_V5                                            0x06
3716      =3  #define NOTIFICATION_REPORT_HOME_SECURITY_V5                                             0x07
3717      =3  #define NOTIFICATION_REPORT_POWER_MANAGEMENT_V5                                          0x08
3718      =3  #define NOTIFICATION_REPORT_SYSTEM_V5                                                    0x09
3719      =3  #define NOTIFICATION_REPORT_EMERGENCY_V5                                                 0x0A
3720      =3  #define NOTIFICATION_REPORT_CLOCK_V5                                                     0x0B
3721      =3  #define NOTIFICATION_REPORT_APPLIANCE_V5                                                 0x0C
3722      =3  #define NOTIFICATION_REPORT_HOME_HEALTH_V5                                               0x0D
3723      =3  #define NOTIFICATION_REPORT_FIRST_V5                                                     0xFF
3724      =3  #define NOTIFICATION_REPORT_PROPERTIES1_EVENT_PARAMETERS_LENGTH_MASK_V5                  0x1F
3725      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_MASK_V5                                0x60
3726      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_SHIFT_V5                               0x05
3727      =3  #define NOTIFICATION_REPORT_PROPERTIES1_SEQUENCE_BIT_MASK_V5                             0x80
3728      =3  /* Values used for Notification Set command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 76  

3729      =3  #define NOTIFICATION_SET_RESERVED_V5                                                     0x00
3730      =3  #define NOTIFICATION_SET_SMOKE_V5                                                        0x01
3731      =3  #define NOTIFICATION_SET_CO_V5                                                           0x02
3732      =3  #define NOTIFICATION_SET_CO2_V5                                                          0x03
3733      =3  #define NOTIFICATION_SET_HEAT_V5                                                         0x04
3734      =3  #define NOTIFICATION_SET_WATER_V5                                                        0x05
3735      =3  #define NOTIFICATION_SET_ACCESS_CONTROL_V5                                               0x06
3736      =3  #define NOTIFICATION_SET_HOME_SECURITY_V5                                                0x07
3737      =3  #define NOTIFICATION_SET_POWER_MANAGEMENT_V5                                             0x08
3738      =3  #define NOTIFICATION_SET_SYSTEM_V5                                                       0x09
3739      =3  #define NOTIFICATION_SET_EMERGENCY_V5                                                    0x0A
3740      =3  #define NOTIFICATION_SET_CLOCK_V5                                                        0x0B
3741      =3  #define NOTIFICATION_SET_APPLIANCE_V5                                                    0x0C
3742      =3  #define NOTIFICATION_SET_HOME_HEALTH_V5                                                  0x0D
3743      =3  #define NOTIFICATION_SET_FIRST_V5                                                        0xFF
3744      =3  #define NOTIFICATION_SET_OFF_V5                                                          0x00
3745      =3  #define NOTIFICATION_SET_NO_PENDING_NOTIFICATIONS_V5                                     0xFE
3746      =3  #define NOTIFICATION_SET_ON_V5                                                           0xFF
3747      =3  /* Values used for Notification Supported Report command */
3748      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V5            0x1F
3749      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V5                       0x60
3750      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V5                      0x05
3751      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_V1_ALARM_BIT_MASK_V5                   0x80
3752      =3  /* Values used for Event Supported Get command */
3753      =3  #define EVENT_SUPPORTED_GET_RESERVED_V5                                                  0x00
3754      =3  #define EVENT_SUPPORTED_GET_SMOKE_V5                                                     0x01
3755      =3  #define EVENT_SUPPORTED_GET_CO_V5                                                        0x02
3756      =3  #define EVENT_SUPPORTED_GET_CO2_V5                                                       0x03
3757      =3  #define EVENT_SUPPORTED_GET_HEAT_V5                                                      0x04
3758      =3  #define EVENT_SUPPORTED_GET_WATER_V5                                                     0x05
3759      =3  #define EVENT_SUPPORTED_GET_ACCESS_CONTROL_V5                                            0x06
3760      =3  #define EVENT_SUPPORTED_GET_HOME_SECURITY_V5                                             0x07
3761      =3  #define EVENT_SUPPORTED_GET_POWER_MANAGEMENT_V5                                          0x08
3762      =3  #define EVENT_SUPPORTED_GET_SYSTEM_V5                                                    0x09
3763      =3  #define EVENT_SUPPORTED_GET_EMERGENCY_V5                                                 0x0A
3764      =3  #define EVENT_SUPPORTED_GET_CLOCK_V5                                                     0x0B
3765      =3  #define EVENT_SUPPORTED_GET_APPLIANCE_V5                                                 0x0C
3766      =3  #define EVENT_SUPPORTED_GET_HOME_HEALTH_V5                                               0x0D
3767      =3  #define EVENT_SUPPORTED_GET_FIRST_V5                                                     0xFF
3768      =3  /* Values used for Event Supported Report command */
3769      =3  #define EVENT_SUPPORTED_REPORT_RESERVED_V5                                               0x00
3770      =3  #define EVENT_SUPPORTED_REPORT_SMOKE_V5                                                  0x01
3771      =3  #define EVENT_SUPPORTED_REPORT_CO_V5                                                     0x02
3772      =3  #define EVENT_SUPPORTED_REPORT_CO2_V5                                                    0x03
3773      =3  #define EVENT_SUPPORTED_REPORT_HEAT_V5                                                   0x04
3774      =3  #define EVENT_SUPPORTED_REPORT_WATER_V5                                                  0x05
3775      =3  #define EVENT_SUPPORTED_REPORT_ACCESS_CONTROL_V5                                         0x06
3776      =3  #define EVENT_SUPPORTED_REPORT_HOME_SECURITY_V5                                          0x07
3777      =3  #define EVENT_SUPPORTED_REPORT_POWER_MANAGEMENT_V5                                       0x08
3778      =3  #define EVENT_SUPPORTED_REPORT_SYSTEM_V5                                                 0x09
3779      =3  #define EVENT_SUPPORTED_REPORT_EMERGENCY_V5                                              0x0A
3780      =3  #define EVENT_SUPPORTED_REPORT_CLOCK_V5                                                  0x0B
3781      =3  #define EVENT_SUPPORTED_REPORT_APPLIANCE_V5                                              0x0C
3782      =3  #define EVENT_SUPPORTED_REPORT_HOME_HEALTH_V5                                            0x0D
3783      =3  #define EVENT_SUPPORTED_REPORT_FIRST_V5                                                  0xFF
3784      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V5                   0x1F
3785      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V5                              0xE0
3786      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V5                             0x05
3787      =3  
3788      =3  /* Notification command class commands */
3789      =3  #define NOTIFICATION_VERSION_V6                                                          0x06
3790      =3  #define NOTIFICATION_GET_V6                                                              0x04
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 77  

3791      =3  #define NOTIFICATION_REPORT_V6                                                           0x05
3792      =3  #define NOTIFICATION_SET_V6                                                              0x06
3793      =3  #define NOTIFICATION_SUPPORTED_GET_V6                                                    0x07
3794      =3  #define NOTIFICATION_SUPPORTED_REPORT_V6                                                 0x08
3795      =3  #define EVENT_SUPPORTED_GET_V6                                                           0x01
3796      =3  #define EVENT_SUPPORTED_REPORT_V6                                                        0x02
3797      =3  /* Values used for Notification Get command */
3798      =3  #define NOTIFICATION_GET_RESERVED_V6                                                     0x00
3799      =3  #define NOTIFICATION_GET_SMOKE_V6                                                        0x01
3800      =3  #define NOTIFICATION_GET_CO_V6                                                           0x02
3801      =3  #define NOTIFICATION_GET_CO2_V6                                                          0x03
3802      =3  #define NOTIFICATION_GET_HEAT_V6                                                         0x04
3803      =3  #define NOTIFICATION_GET_WATER_V6                                                        0x05
3804      =3  #define NOTIFICATION_GET_ACCESS_CONTROL_V6                                               0x06
3805      =3  #define NOTIFICATION_GET_HOME_SECURITY_V6                                                0x07
3806      =3  #define NOTIFICATION_GET_POWER_MANAGEMENT_V6                                             0x08
3807      =3  #define NOTIFICATION_GET_SYSTEM_V6                                                       0x09
3808      =3  #define NOTIFICATION_GET_EMERGENCY_V6                                                    0x0A
3809      =3  #define NOTIFICATION_GET_CLOCK_V6                                                        0x0B
3810      =3  #define NOTIFICATION_GET_APPLIANCE_V6                                                    0x0C
3811      =3  #define NOTIFICATION_GET_HOME_HEALTH_V6                                                  0x0D
3812      =3  #define NOTIFICATION_GET_SIREN_V6                                                        0x0E
3813      =3  #define NOTIFICATION_GET_FIRST_V6                                                        0xFF
3814      =3  /* Values used for Notification Report command */
3815      =3  #define NOTIFICATION_REPORT_OFF_V6                                                       0x00
3816      =3  #define NOTIFICATION_REPORT_NO_PENDING_NOTIFICATIONS_V6                                  0xFE
3817      =3  #define NOTIFICATION_REPORT_ON_V6                                                        0xFF
3818      =3  #define NOTIFICATION_REPORT_RESERVED_V6                                                  0x00
3819      =3  #define NOTIFICATION_REPORT_SMOKE_V6                                                     0x01
3820      =3  #define NOTIFICATION_REPORT_CO_V6                                                        0x02
3821      =3  #define NOTIFICATION_REPORT_CO2_V6                                                       0x03
3822      =3  #define NOTIFICATION_REPORT_HEAT_V6                                                      0x04
3823      =3  #define NOTIFICATION_REPORT_WATER_V6                                                     0x05
3824      =3  #define NOTIFICATION_REPORT_ACCESS_CONTROL_V6                                            0x06
3825      =3  #define NOTIFICATION_REPORT_HOME_SECURITY_V6                                             0x07
3826      =3  #define NOTIFICATION_REPORT_POWER_MANAGEMENT_V6                                          0x08
3827      =3  #define NOTIFICATION_REPORT_SYSTEM_V6                                                    0x09
3828      =3  #define NOTIFICATION_REPORT_EMERGENCY_V6                                                 0x0A
3829      =3  #define NOTIFICATION_REPORT_CLOCK_V6                                                     0x0B
3830      =3  #define NOTIFICATION_REPORT_APPLIANCE_V6                                                 0x0C
3831      =3  #define NOTIFICATION_REPORT_HOME_HEALTH_V6                                               0x0D
3832      =3  #define NOTIFICATION_REPORT_SIREN_V6                                                     0x0E
3833      =3  #define NOTIFICATION_REPORT_FIRST_V6                                                     0xFF
3834      =3  #define NOTIFICATION_REPORT_PROPERTIES1_EVENT_PARAMETERS_LENGTH_MASK_V6                  0x1F
3835      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_MASK_V6                                0x60
3836      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_SHIFT_V6                               0x05
3837      =3  #define NOTIFICATION_REPORT_PROPERTIES1_SEQUENCE_BIT_MASK_V6                             0x80
3838      =3  /* Values used for Notification Set command */
3839      =3  #define NOTIFICATION_SET_RESERVED_V6                                                     0x00
3840      =3  #define NOTIFICATION_SET_SMOKE_V6                                                        0x01
3841      =3  #define NOTIFICATION_SET_CO_V6                                                           0x02
3842      =3  #define NOTIFICATION_SET_CO2_V6                                                          0x03
3843      =3  #define NOTIFICATION_SET_HEAT_V6                                                         0x04
3844      =3  #define NOTIFICATION_SET_WATER_V6                                                        0x05
3845      =3  #define NOTIFICATION_SET_ACCESS_CONTROL_V6                                               0x06
3846      =3  #define NOTIFICATION_SET_HOME_SECURITY_V6                                                0x07
3847      =3  #define NOTIFICATION_SET_POWER_MANAGEMENT_V6                                             0x08
3848      =3  #define NOTIFICATION_SET_SYSTEM_V6                                                       0x09
3849      =3  #define NOTIFICATION_SET_EMERGENCY_V6                                                    0x0A
3850      =3  #define NOTIFICATION_SET_CLOCK_V6                                                        0x0B
3851      =3  #define NOTIFICATION_SET_APPLIANCE_V6                                                    0x0C
3852      =3  #define NOTIFICATION_SET_HOME_HEALTH_V6                                                  0x0D
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 78  

3853      =3  #define NOTIFICATION_SET_SIREN_V6                                                        0x0E
3854      =3  #define NOTIFICATION_SET_FIRST_V6                                                        0xFF
3855      =3  #define NOTIFICATION_SET_OFF_V6                                                          0x00
3856      =3  #define NOTIFICATION_SET_NO_PENDING_NOTIFICATIONS_V6                                     0xFE
3857      =3  #define NOTIFICATION_SET_ON_V6                                                           0xFF
3858      =3  /* Values used for Notification Supported Report command */
3859      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V6            0x1F
3860      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V6                       0x60
3861      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V6                      0x05
3862      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_V1_ALARM_BIT_MASK_V6                   0x80
3863      =3  /* Values used for Event Supported Get command */
3864      =3  #define EVENT_SUPPORTED_GET_RESERVED_V6                                                  0x00
3865      =3  #define EVENT_SUPPORTED_GET_SMOKE_V6                                                     0x01
3866      =3  #define EVENT_SUPPORTED_GET_CO_V6                                                        0x02
3867      =3  #define EVENT_SUPPORTED_GET_CO2_V6                                                       0x03
3868      =3  #define EVENT_SUPPORTED_GET_HEAT_V6                                                      0x04
3869      =3  #define EVENT_SUPPORTED_GET_WATER_V6                                                     0x05
3870      =3  #define EVENT_SUPPORTED_GET_ACCESS_CONTROL_V6                                            0x06
3871      =3  #define EVENT_SUPPORTED_GET_HOME_SECURITY_V6                                             0x07
3872      =3  #define EVENT_SUPPORTED_GET_POWER_MANAGEMENT_V6                                          0x08
3873      =3  #define EVENT_SUPPORTED_GET_SYSTEM_V6                                                    0x09
3874      =3  #define EVENT_SUPPORTED_GET_EMERGENCY_V6                                                 0x0A
3875      =3  #define EVENT_SUPPORTED_GET_CLOCK_V6                                                     0x0B
3876      =3  #define EVENT_SUPPORTED_GET_APPLIANCE_V6                                                 0x0C
3877      =3  #define EVENT_SUPPORTED_GET_HOME_HEALTH_V6                                               0x0D
3878      =3  #define EVENT_SUPPORTED_GET_SIREN_V6                                                     0x0E
3879      =3  #define EVENT_SUPPORTED_GET_FIRST_V6                                                     0xFF
3880      =3  /* Values used for Event Supported Report command */
3881      =3  #define EVENT_SUPPORTED_REPORT_RESERVED_V6                                               0x00
3882      =3  #define EVENT_SUPPORTED_REPORT_SMOKE_V6                                                  0x01
3883      =3  #define EVENT_SUPPORTED_REPORT_CO_V6                                                     0x02
3884      =3  #define EVENT_SUPPORTED_REPORT_CO2_V6                                                    0x03
3885      =3  #define EVENT_SUPPORTED_REPORT_HEAT_V6                                                   0x04
3886      =3  #define EVENT_SUPPORTED_REPORT_WATER_V6                                                  0x05
3887      =3  #define EVENT_SUPPORTED_REPORT_ACCESS_CONTROL_V6                                         0x06
3888      =3  #define EVENT_SUPPORTED_REPORT_HOME_SECURITY_V6                                          0x07
3889      =3  #define EVENT_SUPPORTED_REPORT_POWER_MANAGEMENT_V6                                       0x08
3890      =3  #define EVENT_SUPPORTED_REPORT_SYSTEM_V6                                                 0x09
3891      =3  #define EVENT_SUPPORTED_REPORT_EMERGENCY_V6                                              0x0A
3892      =3  #define EVENT_SUPPORTED_REPORT_CLOCK_V6                                                  0x0B
3893      =3  #define EVENT_SUPPORTED_REPORT_APPLIANCE_V6                                              0x0C
3894      =3  #define EVENT_SUPPORTED_REPORT_HOME_HEALTH_V6                                            0x0D
3895      =3  #define EVENT_SUPPORTED_REPORT_SIREN_V6                                                  0x0E
3896      =3  #define EVENT_SUPPORTED_REPORT_FIRST_V6                                                  0xFF
3897      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V6                   0x1F
3898      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V6                              0xE0
3899      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V6                             0x05
3900      =3  
3901      =3  /* Notification command class commands */
3902      =3  #define NOTIFICATION_VERSION_V7                                                          0x07
3903      =3  #define NOTIFICATION_GET_V7                                                              0x04
3904      =3  #define NOTIFICATION_REPORT_V7                                                           0x05
3905      =3  #define NOTIFICATION_SET_V7                                                              0x06
3906      =3  #define NOTIFICATION_SUPPORTED_GET_V7                                                    0x07
3907      =3  #define NOTIFICATION_SUPPORTED_REPORT_V7                                                 0x08
3908      =3  #define EVENT_SUPPORTED_GET_V7                                                           0x01
3909      =3  #define EVENT_SUPPORTED_REPORT_V7                                                        0x02
3910      =3  /* Values used for Notification Get command */
3911      =3  #define NOTIFICATION_GET_RESERVED_V7                                                     0x00
3912      =3  #define NOTIFICATION_GET_SMOKE_V7                                                        0x01
3913      =3  #define NOTIFICATION_GET_CO_V7                                                           0x02
3914      =3  #define NOTIFICATION_GET_CO2_V7                                                          0x03
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 79  

3915      =3  #define NOTIFICATION_GET_HEAT_V7                                                         0x04
3916      =3  #define NOTIFICATION_GET_WATER_V7                                                        0x05
3917      =3  #define NOTIFICATION_GET_ACCESS_CONTROL_V7                                               0x06
3918      =3  #define NOTIFICATION_GET_HOME_SECURITY_V7                                                0x07
3919      =3  #define NOTIFICATION_GET_POWER_MANAGEMENT_V7                                             0x08
3920      =3  #define NOTIFICATION_GET_SYSTEM_V7                                                       0x09
3921      =3  #define NOTIFICATION_GET_EMERGENCY_V7                                                    0x0A
3922      =3  #define NOTIFICATION_GET_CLOCK_V7                                                        0x0B
3923      =3  #define NOTIFICATION_GET_APPLIANCE_V7                                                    0x0C
3924      =3  #define NOTIFICATION_GET_HOME_HEALTH_V7                                                  0x0D
3925      =3  #define NOTIFICATION_GET_SIREN_V7                                                        0x0E
3926      =3  #define NOTIFICATION_GET_WATER_VALVE_V7                                                  0x0F
3927      =3  #define NOTIFICATION_GET_WEATHER_ALARM_V7                                                0x10
3928      =3  #define NOTIFICATION_GET_IRRIGATION_V7                                                   0x11
3929      =3  #define NOTIFICATION_GET_GAS_ALARM_V7                                                    0x12
3930      =3  #define NOTIFICATION_GET_FIRST_V7                                                        0xFF
3931      =3  /* Values used for Notification Report command */
3932      =3  #define NOTIFICATION_REPORT_OFF_V7                                                       0x00
3933      =3  #define NOTIFICATION_REPORT_NO_PENDING_NOTIFICATIONS_V7                                  0xFE
3934      =3  #define NOTIFICATION_REPORT_ON_V7                                                        0xFF
3935      =3  #define NOTIFICATION_REPORT_RESERVED_V7                                                  0x00
3936      =3  #define NOTIFICATION_REPORT_SMOKE_V7                                                     0x01
3937      =3  #define NOTIFICATION_REPORT_CO_V7                                                        0x02
3938      =3  #define NOTIFICATION_REPORT_CO2_V7                                                       0x03
3939      =3  #define NOTIFICATION_REPORT_HEAT_V7                                                      0x04
3940      =3  #define NOTIFICATION_REPORT_WATER_V7                                                     0x05
3941      =3  #define NOTIFICATION_REPORT_ACCESS_CONTROL_V7                                            0x06
3942      =3  #define NOTIFICATION_REPORT_HOME_SECURITY_V7                                             0x07
3943      =3  #define NOTIFICATION_REPORT_POWER_MANAGEMENT_V7                                          0x08
3944      =3  #define NOTIFICATION_REPORT_SYSTEM_V7                                                    0x09
3945      =3  #define NOTIFICATION_REPORT_EMERGENCY_V7                                                 0x0A
3946      =3  #define NOTIFICATION_REPORT_CLOCK_V7                                                     0x0B
3947      =3  #define NOTIFICATION_REPORT_APPLIANCE_V7                                                 0x0C
3948      =3  #define NOTIFICATION_REPORT_HOME_HEALTH_V7                                               0x0D
3949      =3  #define NOTIFICATION_REPORT_SIREN_V7                                                     0x0E
3950      =3  #define NOTIFICATION_REPORT_WATER_VALVE_V7                                               0x0F
3951      =3  #define NOTIFICATION_REPORT_WEATHER_ALARM_V7                                             0x10
3952      =3  #define NOTIFICATION_REPORT_IRRIGATION_V7                                                0x11
3953      =3  #define NOTIFICATION_REPORT_GAS_ALARM_V7                                                 0x12
3954      =3  #define NOTIFICATION_REPORT_FIRST_V7                                                     0xFF
3955      =3  #define NOTIFICATION_REPORT_PROPERTIES1_EVENT_PARAMETERS_LENGTH_MASK_V7                  0x1F
3956      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_MASK_V7                                0x60
3957      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_SHIFT_V7                               0x05
3958      =3  #define NOTIFICATION_REPORT_PROPERTIES1_SEQUENCE_BIT_MASK_V7                             0x80
3959      =3  /* Values used for Notification Set command */
3960      =3  #define NOTIFICATION_SET_RESERVED_V7                                                     0x00
3961      =3  #define NOTIFICATION_SET_SMOKE_V7                                                        0x01
3962      =3  #define NOTIFICATION_SET_CO_V7                                                           0x02
3963      =3  #define NOTIFICATION_SET_CO2_V7                                                          0x03
3964      =3  #define NOTIFICATION_SET_HEAT_V7                                                         0x04
3965      =3  #define NOTIFICATION_SET_WATER_V7                                                        0x05
3966      =3  #define NOTIFICATION_SET_ACCESS_CONTROL_V7                                               0x06
3967      =3  #define NOTIFICATION_SET_HOME_SECURITY_V7                                                0x07
3968      =3  #define NOTIFICATION_SET_POWER_MANAGEMENT_V7                                             0x08
3969      =3  #define NOTIFICATION_SET_SYSTEM_V7                                                       0x09
3970      =3  #define NOTIFICATION_SET_EMERGENCY_V7                                                    0x0A
3971      =3  #define NOTIFICATION_SET_CLOCK_V7                                                        0x0B
3972      =3  #define NOTIFICATION_SET_APPLIANCE_V7                                                    0x0C
3973      =3  #define NOTIFICATION_SET_HOME_HEALTH_V7                                                  0x0D
3974      =3  #define NOTIFICATION_SET_SIREN_V7                                                        0x0E
3975      =3  #define NOTIFICATION_SET_WATER_VALVE_V7                                                  0x0F
3976      =3  #define NOTIFICATION_SET_WEATHER_ALARM_V7                                                0x10
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 80  

3977      =3  #define NOTIFICATION_SET_IRRIGATION_V7                                                   0x11
3978      =3  #define NOTIFICATION_SET_GAS_ALARM_V7                                                    0x12
3979      =3  #define NOTIFICATION_SET_FIRST_V7                                                        0xFF
3980      =3  #define NOTIFICATION_SET_OFF_V7                                                          0x00
3981      =3  #define NOTIFICATION_SET_NO_PENDING_NOTIFICATIONS_V7                                     0xFE
3982      =3  #define NOTIFICATION_SET_ON_V7                                                           0xFF
3983      =3  /* Values used for Notification Supported Report command */
3984      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V7            0x1F
3985      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V7                       0x60
3986      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V7                      0x05
3987      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_V1_ALARM_BIT_MASK_V7                   0x80
3988      =3  /* Values used for Event Supported Get command */
3989      =3  #define EVENT_SUPPORTED_GET_RESERVED_V7                                                  0x00
3990      =3  #define EVENT_SUPPORTED_GET_SMOKE_V7                                                     0x01
3991      =3  #define EVENT_SUPPORTED_GET_CO_V7                                                        0x02
3992      =3  #define EVENT_SUPPORTED_GET_CO2_V7                                                       0x03
3993      =3  #define EVENT_SUPPORTED_GET_HEAT_V7                                                      0x04
3994      =3  #define EVENT_SUPPORTED_GET_WATER_V7                                                     0x05
3995      =3  #define EVENT_SUPPORTED_GET_ACCESS_CONTROL_V7                                            0x06
3996      =3  #define EVENT_SUPPORTED_GET_HOME_SECURITY_V7                                             0x07
3997      =3  #define EVENT_SUPPORTED_GET_POWER_MANAGEMENT_V7                                          0x08
3998      =3  #define EVENT_SUPPORTED_GET_SYSTEM_V7                                                    0x09
3999      =3  #define EVENT_SUPPORTED_GET_EMERGENCY_V7                                                 0x0A
4000      =3  #define EVENT_SUPPORTED_GET_CLOCK_V7                                                     0x0B
4001      =3  #define EVENT_SUPPORTED_GET_APPLIANCE_V7                                                 0x0C
4002      =3  #define EVENT_SUPPORTED_GET_HOME_HEALTH_V7                                               0x0D
4003      =3  #define EVENT_SUPPORTED_GET_SIREN_V7                                                     0x0E
4004      =3  #define EVENT_SUPPORTED_GET_WATER_VALVE_V7                                               0x0F
4005      =3  #define EVENT_SUPPORTED_GET_WEATHER_ALARM_V7                                             0x10
4006      =3  #define EVENT_SUPPORTED_GET_IRRIGATION_V7                                                0x11
4007      =3  #define EVENT_SUPPORTED_GET_GAS_ALARM_V7                                                 0x12
4008      =3  #define EVENT_SUPPORTED_GET_FIRST_V7                                                     0xFF
4009      =3  /* Values used for Event Supported Report command */
4010      =3  #define EVENT_SUPPORTED_REPORT_RESERVED_V7                                               0x00
4011      =3  #define EVENT_SUPPORTED_REPORT_SMOKE_V7                                                  0x01
4012      =3  #define EVENT_SUPPORTED_REPORT_CO_V7                                                     0x02
4013      =3  #define EVENT_SUPPORTED_REPORT_CO2_V7                                                    0x03
4014      =3  #define EVENT_SUPPORTED_REPORT_HEAT_V7                                                   0x04
4015      =3  #define EVENT_SUPPORTED_REPORT_WATER_V7                                                  0x05
4016      =3  #define EVENT_SUPPORTED_REPORT_ACCESS_CONTROL_V7                                         0x06
4017      =3  #define EVENT_SUPPORTED_REPORT_HOME_SECURITY_V7                                          0x07
4018      =3  #define EVENT_SUPPORTED_REPORT_POWER_MANAGEMENT_V7                                       0x08
4019      =3  #define EVENT_SUPPORTED_REPORT_SYSTEM_V7                                                 0x09
4020      =3  #define EVENT_SUPPORTED_REPORT_EMERGENCY_V7                                              0x0A
4021      =3  #define EVENT_SUPPORTED_REPORT_CLOCK_V7                                                  0x0B
4022      =3  #define EVENT_SUPPORTED_REPORT_APPLIANCE_V7                                              0x0C
4023      =3  #define EVENT_SUPPORTED_REPORT_HOME_HEALTH_V7                                            0x0D
4024      =3  #define EVENT_SUPPORTED_REPORT_SIREN_V7                                                  0x0E
4025      =3  #define EVENT_SUPPORTED_REPORT_WATER_VALVE_V7                                            0x0F
4026      =3  #define EVENT_SUPPORTED_REPORT_WEATHER_ALARM_V7                                          0x10
4027      =3  #define EVENT_SUPPORTED_REPORT_IRRIGATION_V7                                             0x11
4028      =3  #define EVENT_SUPPORTED_REPORT_GAS_ALARM_V7                                              0x12
4029      =3  #define EVENT_SUPPORTED_REPORT_FIRST_V7                                                  0xFF
4030      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V7                   0x1F
4031      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V7                              0xE0
4032      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V7                             0x05
4033      =3  
4034      =3  /* Notification command class commands */
4035      =3  #define NOTIFICATION_VERSION_V8                                                          0x08
4036      =3  #define NOTIFICATION_GET_V8                                                              0x04
4037      =3  #define NOTIFICATION_REPORT_V8                                                           0x05
4038      =3  #define NOTIFICATION_SET_V8                                                              0x06
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 81  

4039      =3  #define NOTIFICATION_SUPPORTED_GET_V8                                                    0x07
4040      =3  #define NOTIFICATION_SUPPORTED_REPORT_V8                                                 0x08
4041      =3  #define EVENT_SUPPORTED_GET_V8                                                           0x01
4042      =3  #define EVENT_SUPPORTED_REPORT_V8                                                        0x02
4043      =3  /* Values used for Notification Get command */
4044      =3  #define NOTIFICATION_GET_RESERVED_V8                                                     0x00
4045      =3  #define NOTIFICATION_GET_SMOKE_V8                                                        0x01
4046      =3  #define NOTIFICATION_GET_CO_V8                                                           0x02
4047      =3  #define NOTIFICATION_GET_CO2_V8                                                          0x03
4048      =3  #define NOTIFICATION_GET_HEAT_V8                                                         0x04
4049      =3  #define NOTIFICATION_GET_WATER_V8                                                        0x05
4050      =3  #define NOTIFICATION_GET_ACCESS_CONTROL_V8                                               0x06
4051      =3  #define NOTIFICATION_GET_HOME_SECURITY_V8                                                0x07
4052      =3  #define NOTIFICATION_GET_POWER_MANAGEMENT_V8                                             0x08
4053      =3  #define NOTIFICATION_GET_SYSTEM_V8                                                       0x09
4054      =3  #define NOTIFICATION_GET_EMERGENCY_V8                                                    0x0A
4055      =3  #define NOTIFICATION_GET_CLOCK_V8                                                        0x0B
4056      =3  #define NOTIFICATION_GET_APPLIANCE_V8                                                    0x0C
4057      =3  #define NOTIFICATION_GET_HOME_HEALTH_V8                                                  0x0D
4058      =3  #define NOTIFICATION_GET_SIREN_V8                                                        0x0E
4059      =3  #define NOTIFICATION_GET_WATER_VALVE_V8                                                  0x0F
4060      =3  #define NOTIFICATION_GET_WEATHER_ALARM_V8                                                0x10
4061      =3  #define NOTIFICATION_GET_IRRIGATION_V8                                                   0x11
4062      =3  #define NOTIFICATION_GET_GAS_ALARM_V8                                                    0x12
4063      =3  #define NOTIFICATION_GET_FIRST_V8                                                        0xFF
4064      =3  /* Values used for Notification Report command */
4065      =3  #define NOTIFICATION_REPORT_OFF_V8                                                       0x00
4066      =3  #define NOTIFICATION_REPORT_NO_PENDING_NOTIFICATIONS_V8                                  0xFE
4067      =3  #define NOTIFICATION_REPORT_ON_V8                                                        0xFF
4068      =3  #define NOTIFICATION_REPORT_RESERVED_V8                                                  0x00
4069      =3  #define NOTIFICATION_REPORT_SMOKE_V8                                                     0x01
4070      =3  #define NOTIFICATION_REPORT_CO_V8                                                        0x02
4071      =3  #define NOTIFICATION_REPORT_CO2_V8                                                       0x03
4072      =3  #define NOTIFICATION_REPORT_HEAT_V8                                                      0x04
4073      =3  #define NOTIFICATION_REPORT_WATER_V8                                                     0x05
4074      =3  #define NOTIFICATION_REPORT_ACCESS_CONTROL_V8                                            0x06
4075      =3  #define NOTIFICATION_REPORT_HOME_SECURITY_V8                                             0x07
4076      =3  #define NOTIFICATION_REPORT_POWER_MANAGEMENT_V8                                          0x08
4077      =3  #define NOTIFICATION_REPORT_SYSTEM_V8                                                    0x09
4078      =3  #define NOTIFICATION_REPORT_EMERGENCY_V8                                                 0x0A
4079      =3  #define NOTIFICATION_REPORT_CLOCK_V8                                                     0x0B
4080      =3  #define NOTIFICATION_REPORT_APPLIANCE_V8                                                 0x0C
4081      =3  #define NOTIFICATION_REPORT_HOME_HEALTH_V8                                               0x0D
4082      =3  #define NOTIFICATION_REPORT_SIREN_V8                                                     0x0E
4083      =3  #define NOTIFICATION_REPORT_WATER_VALVE_V8                                               0x0F
4084      =3  #define NOTIFICATION_REPORT_WEATHER_ALARM_V8                                             0x10
4085      =3  #define NOTIFICATION_REPORT_IRRIGATION_V8                                                0x11
4086      =3  #define NOTIFICATION_REPORT_GAS_ALARM_V8                                                 0x12
4087      =3  #define NOTIFICATION_REPORT_FIRST_V8                                                     0xFF
4088      =3  #define NOTIFICATION_REPORT_PROPERTIES1_EVENT_PARAMETERS_LENGTH_MASK_V8                  0x1F
4089      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_MASK_V8                                0x60
4090      =3  #define NOTIFICATION_REPORT_PROPERTIES1_RESERVED2_SHIFT_V8                               0x05
4091      =3  #define NOTIFICATION_REPORT_PROPERTIES1_SEQUENCE_BIT_MASK_V8                             0x80
4092      =3  /* Values used for Notification Set command */
4093      =3  #define NOTIFICATION_SET_RESERVED_V8                                                     0x00
4094      =3  #define NOTIFICATION_SET_SMOKE_V8                                                        0x01
4095      =3  #define NOTIFICATION_SET_CO_V8                                                           0x02
4096      =3  #define NOTIFICATION_SET_CO2_V8                                                          0x03
4097      =3  #define NOTIFICATION_SET_HEAT_V8                                                         0x04
4098      =3  #define NOTIFICATION_SET_WATER_V8                                                        0x05
4099      =3  #define NOTIFICATION_SET_ACCESS_CONTROL_V8                                               0x06
4100      =3  #define NOTIFICATION_SET_HOME_SECURITY_V8                                                0x07
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 82  

4101      =3  #define NOTIFICATION_SET_POWER_MANAGEMENT_V8                                             0x08
4102      =3  #define NOTIFICATION_SET_SYSTEM_V8                                                       0x09
4103      =3  #define NOTIFICATION_SET_EMERGENCY_V8                                                    0x0A
4104      =3  #define NOTIFICATION_SET_CLOCK_V8                                                        0x0B
4105      =3  #define NOTIFICATION_SET_APPLIANCE_V8                                                    0x0C
4106      =3  #define NOTIFICATION_SET_HOME_HEALTH_V8                                                  0x0D
4107      =3  #define NOTIFICATION_SET_SIREN_V8                                                        0x0E
4108      =3  #define NOTIFICATION_SET_WATER_VALVE_V8                                                  0x0F
4109      =3  #define NOTIFICATION_SET_WEATHER_ALARM_V8                                                0x10
4110      =3  #define NOTIFICATION_SET_IRRIGATION_V8                                                   0x11
4111      =3  #define NOTIFICATION_SET_GAS_ALARM_V8                                                    0x12
4112      =3  #define NOTIFICATION_SET_FIRST_V8                                                        0xFF
4113      =3  #define NOTIFICATION_SET_OFF_V8                                                          0x00
4114      =3  #define NOTIFICATION_SET_NO_PENDING_NOTIFICATIONS_V8                                     0xFE
4115      =3  #define NOTIFICATION_SET_ON_V8                                                           0xFF
4116      =3  /* Values used for Notification Supported Report command */
4117      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V8            0x1F
4118      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V8                       0x60
4119      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V8                      0x05
4120      =3  #define NOTIFICATION_SUPPORTED_REPORT_PROPERTIES1_V1_ALARM_BIT_MASK_V8                   0x80
4121      =3  /* Values used for Event Supported Get command */
4122      =3  #define EVENT_SUPPORTED_GET_RESERVED_V8                                                  0x00
4123      =3  #define EVENT_SUPPORTED_GET_SMOKE_V8                                                     0x01
4124      =3  #define EVENT_SUPPORTED_GET_CO_V8                                                        0x02
4125      =3  #define EVENT_SUPPORTED_GET_CO2_V8                                                       0x03
4126      =3  #define EVENT_SUPPORTED_GET_HEAT_V8                                                      0x04
4127      =3  #define EVENT_SUPPORTED_GET_WATER_V8                                                     0x05
4128      =3  #define EVENT_SUPPORTED_GET_ACCESS_CONTROL_V8                                            0x06
4129      =3  #define EVENT_SUPPORTED_GET_HOME_SECURITY_V8                                             0x07
4130      =3  #define EVENT_SUPPORTED_GET_POWER_MANAGEMENT_V8                                          0x08
4131      =3  #define EVENT_SUPPORTED_GET_SYSTEM_V8                                                    0x09
4132      =3  #define EVENT_SUPPORTED_GET_EMERGENCY_V8                                                 0x0A
4133      =3  #define EVENT_SUPPORTED_GET_CLOCK_V8                                                     0x0B
4134      =3  #define EVENT_SUPPORTED_GET_APPLIANCE_V8                                                 0x0C
4135      =3  #define EVENT_SUPPORTED_GET_HOME_HEALTH_V8                                               0x0D
4136      =3  #define EVENT_SUPPORTED_GET_SIREN_V8                                                     0x0E
4137      =3  #define EVENT_SUPPORTED_GET_WATER_VALVE_V8                                               0x0F
4138      =3  #define EVENT_SUPPORTED_GET_WEATHER_ALARM_V8                                             0x10
4139      =3  #define EVENT_SUPPORTED_GET_IRRIGATION_V8                                                0x11
4140      =3  #define EVENT_SUPPORTED_GET_GAS_ALARM_V8                                                 0x12
4141      =3  #define EVENT_SUPPORTED_GET_FIRST_V8                                                     0xFF
4142      =3  /* Values used for Event Supported Report command */
4143      =3  #define EVENT_SUPPORTED_REPORT_RESERVED_V8                                               0x00
4144      =3  #define EVENT_SUPPORTED_REPORT_SMOKE_V8                                                  0x01
4145      =3  #define EVENT_SUPPORTED_REPORT_CO_V8                                                     0x02
4146      =3  #define EVENT_SUPPORTED_REPORT_CO2_V8                                                    0x03
4147      =3  #define EVENT_SUPPORTED_REPORT_HEAT_V8                                                   0x04
4148      =3  #define EVENT_SUPPORTED_REPORT_WATER_V8                                                  0x05
4149      =3  #define EVENT_SUPPORTED_REPORT_ACCESS_CONTROL_V8                                         0x06
4150      =3  #define EVENT_SUPPORTED_REPORT_HOME_SECURITY_V8                                          0x07
4151      =3  #define EVENT_SUPPORTED_REPORT_POWER_MANAGEMENT_V8                                       0x08
4152      =3  #define EVENT_SUPPORTED_REPORT_SYSTEM_V8                                                 0x09
4153      =3  #define EVENT_SUPPORTED_REPORT_EMERGENCY_V8                                              0x0A
4154      =3  #define EVENT_SUPPORTED_REPORT_CLOCK_V8                                                  0x0B
4155      =3  #define EVENT_SUPPORTED_REPORT_APPLIANCE_V8                                              0x0C
4156      =3  #define EVENT_SUPPORTED_REPORT_HOME_HEALTH_V8                                            0x0D
4157      =3  #define EVENT_SUPPORTED_REPORT_SIREN_V8                                                  0x0E
4158      =3  #define EVENT_SUPPORTED_REPORT_WATER_VALVE_V8                                            0x0F
4159      =3  #define EVENT_SUPPORTED_REPORT_WEATHER_ALARM_V8                                          0x10
4160      =3  #define EVENT_SUPPORTED_REPORT_IRRIGATION_V8                                             0x11
4161      =3  #define EVENT_SUPPORTED_REPORT_GAS_ALARM_V8                                              0x12
4162      =3  #define EVENT_SUPPORTED_REPORT_FIRST_V8                                                  0xFF
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 83  

4163      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASKS_MASK_V8                   0x1F
4164      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V8                              0xE0
4165      =3  #define EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V8                             0x05
4166      =3  
4167      =3  /* Application Status command class commands */
4168      =3  #define APPLICATION_STATUS_VERSION                                                       0x01
4169      =3  #define APPLICATION_BUSY                                                                 0x01
4170      =3  #define APPLICATION_REJECTED_REQUEST                                                     0x02
4171      =3  /* Values used for Application Busy command */
4172      =3  #define APPLICATION_BUSY_TRY_AGAIN_LATER                                                 0x00
4173      =3  #define APPLICATION_BUSY_TRY_AGAIN_IN_WAIT_TIME_SECONDS                                  0x01
4174      =3  #define APPLICATION_BUSY_REQUEST_QUEUED_EXECUTED_LATER                                   0x02
4175      =3  
4176      =3  /* Association Command Configuration command class commands */
4177      =3  #define ASSOCIATION_COMMAND_CONFIGURATION_VERSION                                        0x01
4178      =3  #define COMMAND_CONFIGURATION_GET                                                        0x04
4179      =3  #define COMMAND_CONFIGURATION_REPORT                                                     0x05
4180      =3  #define COMMAND_CONFIGURATION_SET                                                        0x03
4181      =3  #define COMMAND_RECORDS_SUPPORTED_GET                                                    0x01
4182      =3  #define COMMAND_RECORDS_SUPPORTED_REPORT                                                 0x02
4183      =3  /* Values used for Command Configuration Report command */
4184      =3  #define COMMAND_CONFIGURATION_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_MASK                  0x0F
4185      =3  #define COMMAND_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_MASK                           0x70
4186      =3  #define COMMAND_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_SHIFT                          0x04
4187      =3  #define COMMAND_CONFIGURATION_REPORT_PROPERTIES1_FIRST_BIT_MASK                          0x80
4188      =3  /* Values used for Command Records Supported Report command */
4189      =3  #define COMMAND_RECORDS_SUPPORTED_REPORT_PROPERTIES1_CONF_CMD_BIT_MASK                   0x01
4190      =3  #define COMMAND_RECORDS_SUPPORTED_REPORT_PROPERTIES1_V_C_BIT_MASK                        0x02
4191      =3  #define COMMAND_RECORDS_SUPPORTED_REPORT_PROPERTIES1_MAX_COMMAND_LENGTH_MASK             0xFC
4192      =3  #define COMMAND_RECORDS_SUPPORTED_REPORT_PROPERTIES1_MAX_COMMAND_LENGTH_SHIFT            0x02
4193      =3  
4194      =3  /* Association command class commands */
4195      =3  #define ASSOCIATION_VERSION                                                              0x01
4196      =3  #define ASSOCIATION_GET                                                                  0x02
4197      =3  #define ASSOCIATION_GROUPINGS_GET                                                        0x05
4198      =3  #define ASSOCIATION_GROUPINGS_REPORT                                                     0x06
4199      =3  #define ASSOCIATION_REMOVE                                                               0x04
4200      =3  #define ASSOCIATION_REPORT                                                               0x03
4201      =3  #define ASSOCIATION_SET                                                                  0x01
4202      =3  
4203      =3  /* Association command class commands */
4204      =3  #define ASSOCIATION_VERSION_V2                                                           0x02
4205      =3  #define ASSOCIATION_GET_V2                                                               0x02
4206      =3  #define ASSOCIATION_GROUPINGS_GET_V2                                                     0x05
4207      =3  #define ASSOCIATION_GROUPINGS_REPORT_V2                                                  0x06
4208      =3  #define ASSOCIATION_REMOVE_V2                                                            0x04
4209      =3  #define ASSOCIATION_REPORT_V2                                                            0x03
4210      =3  #define ASSOCIATION_SET_V2                                                               0x01
4211      =3  #define ASSOCIATION_SPECIFIC_GROUP_GET_V2                                                0x0B
4212      =3  #define ASSOCIATION_SPECIFIC_GROUP_REPORT_V2                                             0x0C
4213      =3  
4214      =3  /* Av Content Directory Md command class commands */
4215      =3  #define AV_CONTENT_DIRECTORY_MD_VERSION                                                  0x01
4216      =3  #define AV_CONTENT_BROWSE_MD_BY_LETTER_GET                                               0x03
4217      =3  #define AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT                                            0x04
4218      =3  #define AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET                                             0x05
4219      =3  #define AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT                                          0x06
4220      =3  #define AV_CONTENT_BROWSE_MD_GET                                                         0x01
4221      =3  #define AV_CONTENT_BROWSE_MD_REPORT                                                      0x02
4222      =3  #define AV_MATCH_ITEM_TO_RENDERER_MD_GET                                                 0x07
4223      =3  #define AV_MATCH_ITEM_TO_RENDERER_MD_REPORT                                              0x08
4224      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 84  

4225      =3  /* Av Content Search Md command class commands */
4226      =3  #define AV_CONTENT_SEARCH_MD_VERSION                                                     0x01
4227      =3  #define AV_CONTENT_SEARCH_MD_GET                                                         0x01
4228      =3  #define AV_CONTENT_SEARCH_MD_REPORT                                                      0x02
4229      =3  
4230      =3  /* Av Renderer Status command class commands */
4231      =3  #define AV_RENDERER_STATUS_VERSION                                                       0x01
4232      =3  #define AV_RENDERER_STATUS_GET                                                           0x01
4233      =3  #define AV_RENDERER_STATUS_REPORT                                                        0x02
4234      =3  
4235      =3  /* Av Tagging Md command class commands */
4236      =3  #define AV_TAGGING_MD_VERSION                                                            0x01
4237      =3  #define AV_TAGGING_MD_GET                                                                0x01
4238      =3  #define AV_TAGGING_MD_REPORT                                                             0x02
4239      =3  
4240      =3  /* Basic Tariff Info command class commands */
4241      =3  #define BASIC_TARIFF_INFO_VERSION                                                        0x01
4242      =3  #define BASIC_TARIFF_INFO_GET                                                            0x01
4243      =3  #define BASIC_TARIFF_INFO_REPORT                                                         0x02
4244      =3  /* Values used for Basic Tariff Info Report command */
4245      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES1_TOTAL_NO_IMPORT_RATES_MASK                  0x0F
4246      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES1_RESERVED1_MASK                              0x70
4247      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES1_RESERVED1_SHIFT                             0x04
4248      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES1_DUAL_BIT_MASK                               0x80
4249      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES2_E1_CURRENT_RATE_IN_USE_MASK                 0x0F
4250      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES2_RESERVED2_MASK                              0xF0
4251      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES2_RESERVED2_SHIFT                             0x04
4252      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES3_E2_CURRENT_RATE_IN_USE_MASK                 0x0F
4253      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES3_RESERVED3_MASK                              0xF0
4254      =3  #define BASIC_TARIFF_INFO_REPORT_PROPERTIES3_RESERVED3_SHIFT                             0x04
4255      =3  
4256      =3  /* Basic Window Covering command class commands */
4257      =3  #define BASIC_WINDOW_COVERING_VERSION                                                    0x01
4258      =3  #define BASIC_WINDOW_COVERING_START_LEVEL_CHANGE                                         0x01
4259      =3  #define BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE                                          0x02
4260      =3  /* Values used for Basic Window Covering Start Level Change command */
4261      =3  #define BASIC_WINDOW_COVERING_START_LEVEL_CHANGE_LEVEL_RESERVED1_MASK                    0x3F
4262      =3  #define BASIC_WINDOW_COVERING_START_LEVEL_CHANGE_LEVEL_OPEN_CLOSE_BIT_MASK               0x40
4263      =3  #define BASIC_WINDOW_COVERING_START_LEVEL_CHANGE_LEVEL_RESERVED2_BIT_MASK                0x80
4264      =3  
4265      =3  /* Basic command class commands */
4266      =3  #define BASIC_VERSION                                                                    0x01
4267      =3  #define BASIC_GET                                                                        0x02
4268      =3  #define BASIC_REPORT                                                                     0x03
4269      =3  #define BASIC_SET                                                                        0x01
4270      =3  
4271      =3  /* Basic command class commands */
4272      =3  #define BASIC_VERSION_V2                                                                 0x02
4273      =3  #define BASIC_GET_V2                                                                     0x02
4274      =3  #define BASIC_REPORT_V2                                                                  0x03
4275      =3  #define BASIC_SET_V2                                                                     0x01
4276      =3  
4277      =3  /* Battery command class commands */
4278      =3  #define BATTERY_VERSION                                                                  0x01
4279      =3  #define BATTERY_GET                                                                      0x02
4280      =3  #define BATTERY_REPORT                                                                   0x03
4281      =3  
4282      =3  /* Chimney Fan command class commands */
4283      =3  #define CHIMNEY_FAN_VERSION                                                              0x01
4284      =3  #define CHIMNEY_FAN_ALARM_LOG_GET                                                        0x20
4285      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT                                                     0x21
4286      =3  #define CHIMNEY_FAN_ALARM_LOG_SET                                                        0x1F
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 85  

4287      =3  #define CHIMNEY_FAN_ALARM_STATUS_GET                                                     0x23
4288      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT                                                  0x24
4289      =3  #define CHIMNEY_FAN_ALARM_STATUS_SET                                                     0x22
4290      =3  #define CHIMNEY_FAN_ALARM_TEMP_GET                                                       0x0E
4291      =3  #define CHIMNEY_FAN_ALARM_TEMP_REPORT                                                    0x0F
4292      =3  #define CHIMNEY_FAN_ALARM_TEMP_SET                                                       0x0D
4293      =3  #define CHIMNEY_FAN_BOOST_TIME_GET                                                       0x11
4294      =3  #define CHIMNEY_FAN_BOOST_TIME_REPORT                                                    0x12
4295      =3  #define CHIMNEY_FAN_BOOST_TIME_SET                                                       0x10
4296      =3  #define CHIMNEY_FAN_DEFAULT_SET                                                          0x28
4297      =3  #define CHIMNEY_FAN_MIN_SPEED_GET                                                        0x26
4298      =3  #define CHIMNEY_FAN_MIN_SPEED_REPORT                                                     0x27
4299      =3  #define CHIMNEY_FAN_MIN_SPEED_SET                                                        0x25
4300      =3  #define CHIMNEY_FAN_MODE_GET                                                             0x17
4301      =3  #define CHIMNEY_FAN_MODE_REPORT                                                          0x18
4302      =3  #define CHIMNEY_FAN_MODE_SET                                                             0x16
4303      =3  #define CHIMNEY_FAN_SETUP_GET                                                            0x1A
4304      =3  #define CHIMNEY_FAN_SETUP_REPORT                                                         0x1B
4305      =3  #define CHIMNEY_FAN_SETUP_SET                                                            0x19
4306      =3  #define CHIMNEY_FAN_SPEED_GET                                                            0x05
4307      =3  #define CHIMNEY_FAN_SPEED_REPORT                                                         0x06
4308      =3  #define CHIMNEY_FAN_SPEED_SET                                                            0x04
4309      =3  #define CHIMNEY_FAN_START_TEMP_GET                                                       0x08
4310      =3  #define CHIMNEY_FAN_START_TEMP_REPORT                                                    0x09
4311      =3  #define CHIMNEY_FAN_START_TEMP_SET                                                       0x07
4312      =3  #define CHIMNEY_FAN_STATE_GET                                                            0x02
4313      =3  #define CHIMNEY_FAN_STATE_REPORT                                                         0x03
4314      =3  #define CHIMNEY_FAN_STATE_SET                                                            0x01
4315      =3  #define CHIMNEY_FAN_STATUS_GET                                                           0x1D
4316      =3  #define CHIMNEY_FAN_STATUS_REPORT                                                        0x1E
4317      =3  #define CHIMNEY_FAN_STOP_TEMP_GET                                                        0x0B
4318      =3  #define CHIMNEY_FAN_STOP_TEMP_REPORT                                                     0x0C
4319      =3  #define CHIMNEY_FAN_STOP_TEMP_SET                                                        0x0A
4320      =3  #define CHIMNEY_FAN_STOP_TIME_GET                                                        0x14
4321      =3  #define CHIMNEY_FAN_STOP_TIME_REPORT                                                     0x15
4322      =3  #define CHIMNEY_FAN_STOP_TIME_SET                                                        0x13
4323      =3  /* Values used for Chimney Fan Alarm Log Report command */
4324      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_1_RESERVED11_BIT_MASK                   0x01
4325      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_1_EXTERNAL_ALARM_1_BIT_MASK             0x02
4326      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_1_SENSOR_ERROR_1_BIT_MASK               0x04
4327      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_1_ALARM_TEMPERATURE_EXCEEDED_1_BIT_MASK 0x08
4328      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_1_RESERVED12_MASK                       0x70
4329      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_1_RESERVED12_SHIFT                      0x04
4330      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_1_ALARM_STILL_ACTIVE_1_BIT_MASK         0x80
4331      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_2_RESERVED21_BIT_MASK                   0x01
4332      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_2_EXTERNAL_ALARM_2_BIT_MASK             0x02
4333      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_2_SENSOR_ERROR_2_BIT_MASK               0x04
4334      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_2_ALARM_TEMPERATURE_EXCEEDED_2_BIT_MASK 0x08
4335      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_2_RESERVED22_MASK                       0x70
4336      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_2_RESERVED22_SHIFT                      0x04
4337      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_2_ALARM_STILL_ACTIVE_2_BIT_MASK         0x80
4338      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_3_RESERVED31_BIT_MASK                   0x01
4339      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_3_EXTERNAL_ALARM_3_BIT_MASK             0x02
4340      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_3_SENSOR_ERROR_3_BIT_MASK               0x04
4341      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_3_ALARM_TEMPERATURE_EXCEEDED_3_BIT_MASK 0x08
4342      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_3_RESERVED32_MASK                       0x70
4343      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_3_RESERVED32_SHIFT                      0x04
4344      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_3_ALARM_STILL_ACTIVE_3_BIT_MASK         0x80
4345      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_4_RESERVED41_BIT_MASK                   0x01
4346      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_4_EXTERNAL_ALARM_4_BIT_MASK             0x02
4347      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_4_SENSOR_ERROR_4_BIT_MASK               0x04
4348      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_4_ALARM_TEMPERATURE_EXCEEDED_4_BIT_MASK 0x08
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 86  

4349      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_4_RESERVED42_MASK                       0x70
4350      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_4_RESERVED42_SHIFT                      0x04
4351      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_4_ALARM_STILL_ACTIVE_4_BIT_MASK         0x80
4352      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_5_RESERVED51_BIT_MASK                   0x01
4353      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_5_EXTERNAL_ALARM_5_BIT_MASK             0x02
4354      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_5_SENSOR_ERROR_5_BIT_MASK               0x04
4355      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_5_ALARM_TEMPERATURE_EXCEEDED_5_BIT_MASK 0x08
4356      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_5_RESERVED52_MASK                       0x70
4357      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_5_RESERVED52_SHIFT                      0x04
4358      =3  #define CHIMNEY_FAN_ALARM_LOG_REPORT_ALARM_EVENT_5_ALARM_STILL_ACTIVE_5_BIT_MASK         0x80
4359      =3  /* Values used for Chimney Fan Alarm Log Set command */
4360      =3  #define CHIMNEY_FAN_ALARM_LOG_SET_RESET_LOG                                              0x08
4361      =3  /* Values used for Chimney Fan Alarm Status Report command */
4362      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_SERVICE_BIT_MASK                    0x01
4363      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_EXTERNAL_ALARM_BIT_MASK             0x02
4364      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_SENSOR_ERROR_BIT_MASK               0x04
4365      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_ALARM_TEMPERATURE_EXCEEDED_BIT_MASK 0x08
4366      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_NOT_USED_MASK                       0x30
4367      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_NOT_USED_SHIFT                      0x04
4368      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_SPEED_CHANGE_ENABLE_BIT_MASK        0x40
4369      =3  #define CHIMNEY_FAN_ALARM_STATUS_REPORT_ALARM_STATUS_START_TEMPERATURE_EXCEEDED_BIT_MASK 0x80
4370      =3  /* Values used for Chimney Fan Alarm Status Set command */
4371      =3  #define CHIMNEY_FAN_ALARM_STATUS_SET_MESSAGE_NOT_USED1_BIT_MASK                          0x01
4372      =3  #define CHIMNEY_FAN_ALARM_STATUS_SET_MESSAGE_ACKNOWLEDGE_EXTERNAL_ALARM_BIT_MASK         0x02
4373      =3  #define CHIMNEY_FAN_ALARM_STATUS_SET_MESSAGE_ACKNOWLEDGE_SENSOR_ERROR_BIT_MASK           0x04
4374      =3  #define CHIMNEY_FAN_ALARM_STATUS_SET_MESSAGE_ACKNOWLEDGE_ALARM_TEMPERATURE_EXCEEDED_BIT_MASK 0x08
4375      =3  #define CHIMNEY_FAN_ALARM_STATUS_SET_MESSAGE_NOT_USED2_MASK                              0xF0
4376      =3  #define CHIMNEY_FAN_ALARM_STATUS_SET_MESSAGE_NOT_USED2_SHIFT                             0x04
4377      =3  /* Values used for Chimney Fan Alarm Temp Report command */
4378      =3  #define CHIMNEY_FAN_ALARM_TEMP_REPORT_PROPERTIES1_SIZE_MASK                              0x07
4379      =3  #define CHIMNEY_FAN_ALARM_TEMP_REPORT_PROPERTIES1_SCALE_MASK                             0x18
4380      =3  #define CHIMNEY_FAN_ALARM_TEMP_REPORT_PROPERTIES1_SCALE_SHIFT                            0x03
4381      =3  #define CHIMNEY_FAN_ALARM_TEMP_REPORT_PROPERTIES1_PRECISION_MASK                         0xE0
4382      =3  #define CHIMNEY_FAN_ALARM_TEMP_REPORT_PROPERTIES1_PRECISION_SHIFT                        0x05
4383      =3  /* Values used for Chimney Fan Alarm Temp Set command */
4384      =3  #define CHIMNEY_FAN_ALARM_TEMP_SET_PROPERTIES1_SIZE_MASK                                 0x07
4385      =3  #define CHIMNEY_FAN_ALARM_TEMP_SET_PROPERTIES1_SCALE_MASK                                0x18
4386      =3  #define CHIMNEY_FAN_ALARM_TEMP_SET_PROPERTIES1_SCALE_SHIFT                               0x03
4387      =3  #define CHIMNEY_FAN_ALARM_TEMP_SET_PROPERTIES1_PRECISION_MASK                            0xE0
4388      =3  #define CHIMNEY_FAN_ALARM_TEMP_SET_PROPERTIES1_PRECISION_SHIFT                           0x05
4389      =3  /* Values used for Chimney Fan Mode Report command */
4390      =3  #define CHIMNEY_FAN_MODE_REPORT_OFF                                                      0x00
4391      =3  #define CHIMNEY_FAN_MODE_REPORT_ON                                                       0xFF
4392      =3  /* Values used for Chimney Fan Mode Set command */
4393      =3  #define CHIMNEY_FAN_MODE_SET_OFF                                                         0x00
4394      =3  #define CHIMNEY_FAN_MODE_SET_ON                                                          0xFF
4395      =3  /* Values used for Chimney Fan Setup Report command */
4396      =3  #define CHIMNEY_FAN_SETUP_REPORT_OFF                                                     0x00
4397      =3  #define CHIMNEY_FAN_SETUP_REPORT_ON                                                      0xFF
4398      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES1_SIZE_1_MASK                                 0x07
4399      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES1_SCALE_1_MASK                                0x18
4400      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES1_SCALE_1_SHIFT                               0x03
4401      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES1_PRECISION_1_MASK                            0xE0
4402      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES1_PRECISION_1_SHIFT                           0x05
4403      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES2_SIZE_2_MASK                                 0x07
4404      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES2_SCALE_2_MASK                                0x18
4405      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES2_SCALE_2_SHIFT                               0x03
4406      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES2_PRECISION_2_MASK                            0xE0
4407      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES2_PRECISION_2_SHIFT                           0x05
4408      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES3_SIZE_3_MASK                                 0x07
4409      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES3_SCALE_3_MASK                                0x18
4410      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES3_SCALE_3_SHIFT                               0x03
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 87  

4411      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES3_PRECISION_3_MASK                            0xE0
4412      =3  #define CHIMNEY_FAN_SETUP_REPORT_PROPERTIES3_PRECISION_3_SHIFT                           0x05
4413      =3  /* Values used for Chimney Fan Setup Set command */
4414      =3  #define CHIMNEY_FAN_SETUP_SET_OFF                                                        0x00
4415      =3  #define CHIMNEY_FAN_SETUP_SET_ON                                                         0xFF
4416      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES1_SIZE_1_MASK                                    0x07
4417      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES1_SCALE_1_MASK                                   0x18
4418      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES1_SCALE_1_SHIFT                                  0x03
4419      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES1_PRECISION_1_MASK                               0xE0
4420      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES1_PRECISION_1_SHIFT                              0x05
4421      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES2_SIZE_2_MASK                                    0x07
4422      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES2_SCALE_2_MASK                                   0x18
4423      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES2_SCALE_2_SHIFT                                  0x03
4424      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES2_PRECISION_2_MASK                               0xE0
4425      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES2_PRECISION_2_SHIFT                              0x05
4426      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES3_SIZE_3_MASK                                    0x07
4427      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES3_SCALE_3_MASK                                   0x18
4428      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES3_SCALE_3_SHIFT                                  0x03
4429      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES3_PRECISION_3_MASK                               0xE0
4430      =3  #define CHIMNEY_FAN_SETUP_SET_PROPERTIES3_PRECISION_3_SHIFT                              0x05
4431      =3  /* Values used for Chimney Fan Start Temp Report command */
4432      =3  #define CHIMNEY_FAN_START_TEMP_REPORT_PROPERTIES1_SIZE_MASK                              0x07
4433      =3  #define CHIMNEY_FAN_START_TEMP_REPORT_PROPERTIES1_SCALE_MASK                             0x18
4434      =3  #define CHIMNEY_FAN_START_TEMP_REPORT_PROPERTIES1_SCALE_SHIFT                            0x03
4435      =3  #define CHIMNEY_FAN_START_TEMP_REPORT_PROPERTIES1_PRECISION_MASK                         0xE0
4436      =3  #define CHIMNEY_FAN_START_TEMP_REPORT_PROPERTIES1_PRECISION_SHIFT                        0x05
4437      =3  /* Values used for Chimney Fan Start Temp Set command */
4438      =3  #define CHIMNEY_FAN_START_TEMP_SET_PROPERTIES1_SIZE_MASK                                 0x07
4439      =3  #define CHIMNEY_FAN_START_TEMP_SET_PROPERTIES1_SCALE_MASK                                0x18
4440      =3  #define CHIMNEY_FAN_START_TEMP_SET_PROPERTIES1_SCALE_SHIFT                               0x03
4441      =3  #define CHIMNEY_FAN_START_TEMP_SET_PROPERTIES1_PRECISION_MASK                            0xE0
4442      =3  #define CHIMNEY_FAN_START_TEMP_SET_PROPERTIES1_PRECISION_SHIFT                           0x05
4443      =3  /* Values used for Chimney Fan State Report command */
4444      =3  #define CHIMNEY_FAN_STATE_REPORT_OFF                                                     0x00
4445      =3  #define CHIMNEY_FAN_STATE_REPORT_BOOST                                                   0x01
4446      =3  #define CHIMNEY_FAN_STATE_REPORT_EXHAUST                                                 0x02
4447      =3  #define CHIMNEY_FAN_STATE_REPORT_RELOAD                                                  0x03
4448      =3  #define CHIMNEY_FAN_STATE_REPORT_VENTING                                                 0x04
4449      =3  #define CHIMNEY_FAN_STATE_REPORT_STOP                                                    0x05
4450      =3  #define CHIMNEY_FAN_STATE_REPORT_VENTING_EX                                              0x06
4451      =3  #define CHIMNEY_FAN_STATE_REPORT_SERVICE                                                 0x07
4452      =3  #define CHIMNEY_FAN_STATE_REPORT_SENSOR_FAILURE                                          0x08
4453      =3  #define CHIMNEY_FAN_STATE_REPORT_CHIMNEY_FIRE                                            0x09
4454      =3  #define CHIMNEY_FAN_STATE_REPORT_EXTERNAL_ALARM                                          0x0A
4455      =3  /* Values used for Chimney Fan State Set command */
4456      =3  #define CHIMNEY_FAN_STATE_SET_NEXT_STATE                                                 0x01
4457      =3  /* Values used for Chimney Fan Status Report command */
4458      =3  #define CHIMNEY_FAN_STATUS_REPORT_OFF                                                    0x00
4459      =3  #define CHIMNEY_FAN_STATUS_REPORT_BOOST                                                  0x01
4460      =3  #define CHIMNEY_FAN_STATUS_REPORT_EXHAUST                                                0x02
4461      =3  #define CHIMNEY_FAN_STATUS_REPORT_RELOAD                                                 0x03
4462      =3  #define CHIMNEY_FAN_STATUS_REPORT_VENTING                                                0x04
4463      =3  #define CHIMNEY_FAN_STATUS_REPORT_STOP                                                   0x05
4464      =3  #define CHIMNEY_FAN_STATUS_REPORT_VENTING_EX                                             0x06
4465      =3  #define CHIMNEY_FAN_STATUS_REPORT_SERVICE                                                0x07
4466      =3  #define CHIMNEY_FAN_STATUS_REPORT_SENSOR_FAILURE                                         0x08
4467      =3  #define CHIMNEY_FAN_STATUS_REPORT_CHIMNEY_FIRE                                           0x09
4468      =3  #define CHIMNEY_FAN_STATUS_REPORT_EXTERNAL_ALARM                                         0x0A
4469      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_SERVICE_BIT_MASK                          0x01
4470      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_EXTERNAL_ALARM_BIT_MASK                   0x02
4471      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_SENSOR_ERROR_BIT_MASK                     0x04
4472      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_ALARM_TEMPERATURE_EXCEEDED_BIT_MASK       0x08
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 88  

4473      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_NOT_USED_MASK                             0x30
4474      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_NOT_USED_SHIFT                            0x04
4475      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_SPEED_CHANGE_ENABLE_BIT_MASK              0x40
4476      =3  #define CHIMNEY_FAN_STATUS_REPORT_ALARM_STATUS_START_TEMPERATURE_EXCEEDED_BIT_MASK       0x80
4477      =3  #define CHIMNEY_FAN_STATUS_REPORT_PROPERTIES1_SIZE_MASK                                  0x07
4478      =3  #define CHIMNEY_FAN_STATUS_REPORT_PROPERTIES1_SCALE_MASK                                 0x18
4479      =3  #define CHIMNEY_FAN_STATUS_REPORT_PROPERTIES1_SCALE_SHIFT                                0x03
4480      =3  #define CHIMNEY_FAN_STATUS_REPORT_PROPERTIES1_PRECISION_MASK                             0xE0
4481      =3  #define CHIMNEY_FAN_STATUS_REPORT_PROPERTIES1_PRECISION_SHIFT                            0x05
4482      =3  /* Values used for Chimney Fan Stop Temp Report command */
4483      =3  #define CHIMNEY_FAN_STOP_TEMP_REPORT_PROPERTIES1_SIZE_MASK                               0x07
4484      =3  #define CHIMNEY_FAN_STOP_TEMP_REPORT_PROPERTIES1_SCALE_MASK                              0x18
4485      =3  #define CHIMNEY_FAN_STOP_TEMP_REPORT_PROPERTIES1_SCALE_SHIFT                             0x03
4486      =3  #define CHIMNEY_FAN_STOP_TEMP_REPORT_PROPERTIES1_PRECISION_MASK                          0xE0
4487      =3  #define CHIMNEY_FAN_STOP_TEMP_REPORT_PROPERTIES1_PRECISION_SHIFT                         0x05
4488      =3  /* Values used for Chimney Fan Stop Temp Set command */
4489      =3  #define CHIMNEY_FAN_STOP_TEMP_SET_PROPERTIES1_SIZE_MASK                                  0x07
4490      =3  #define CHIMNEY_FAN_STOP_TEMP_SET_PROPERTIES1_SCALE_MASK                                 0x18
4491      =3  #define CHIMNEY_FAN_STOP_TEMP_SET_PROPERTIES1_SCALE_SHIFT                                0x03
4492      =3  #define CHIMNEY_FAN_STOP_TEMP_SET_PROPERTIES1_PRECISION_MASK                             0xE0
4493      =3  #define CHIMNEY_FAN_STOP_TEMP_SET_PROPERTIES1_PRECISION_SHIFT                            0x05
4494      =3  
4495      =3  /* Climate Control Schedule command class commands */
4496      =3  #define CLIMATE_CONTROL_SCHEDULE_VERSION                                                 0x01
4497      =3  #define SCHEDULE_CHANGED_GET                                                             0x04
4498      =3  #define SCHEDULE_CHANGED_REPORT                                                          0x05
4499      =3  #define SCHEDULE_GET                                                                     0x02
4500      =3  #define SCHEDULE_OVERRIDE_GET                                                            0x07
4501      =3  #define SCHEDULE_OVERRIDE_REPORT                                                         0x08
4502      =3  #define SCHEDULE_OVERRIDE_SET                                                            0x06
4503      =3  #define SCHEDULE_REPORT                                                                  0x03
4504      =3  #define SCHEDULE_SET                                                                     0x01
4505      =3  /* Values used for Schedule Get command */
4506      =3  #define SCHEDULE_GET_PROPERTIES1_WEEKDAY_MASK                                            0x07
4507      =3  #define SCHEDULE_GET_PROPERTIES1_RESERVED_MASK                                           0xF8
4508      =3  #define SCHEDULE_GET_PROPERTIES1_RESERVED_SHIFT                                          0x03
4509      =3  /* Values used for Schedule Override Report command */
4510      =3  #define SCHEDULE_OVERRIDE_REPORT_PROPERTIES1_OVERRIDE_TYPE_MASK                          0x03
4511      =3  #define SCHEDULE_OVERRIDE_REPORT_PROPERTIES1_RESERVED_MASK                               0xFC
4512      =3  #define SCHEDULE_OVERRIDE_REPORT_PROPERTIES1_RESERVED_SHIFT                              0x02
4513      =3  #define SCHEDULE_OVERRIDE_REPORT_NO_OVERRIDE                                             0x00
4514      =3  #define SCHEDULE_OVERRIDE_REPORT_TEMPORARY_OVERRIDE                                      0x01
4515      =3  #define SCHEDULE_OVERRIDE_REPORT_PERMANENT_OVERRIDE                                      0x02
4516      =3  #define SCHEDULE_OVERRIDE_REPORT_RESERVED                                                0x03
4517      =3  /* Values used for Schedule Override Set command */
4518      =3  #define SCHEDULE_OVERRIDE_SET_PROPERTIES1_OVERRIDE_TYPE_MASK                             0x03
4519      =3  #define SCHEDULE_OVERRIDE_SET_PROPERTIES1_RESERVED_MASK                                  0xFC
4520      =3  #define SCHEDULE_OVERRIDE_SET_PROPERTIES1_RESERVED_SHIFT                                 0x02
4521      =3  #define SCHEDULE_OVERRIDE_SET_NO_OVERRIDE                                                0x00
4522      =3  #define SCHEDULE_OVERRIDE_SET_TEMPORARY_OVERRIDE                                         0x01
4523      =3  #define SCHEDULE_OVERRIDE_SET_PERMANENT_OVERRIDE                                         0x02
4524      =3  #define SCHEDULE_OVERRIDE_SET_RESERVED                                                   0x03
4525      =3  /* Values used for Schedule Report command */
4526      =3  #define SCHEDULE_REPORT_PROPERTIES1_WEEKDAY_MASK                                         0x07
4527      =3  #define SCHEDULE_REPORT_PROPERTIES1_RESERVED_MASK                                        0xF8
4528      =3  #define SCHEDULE_REPORT_PROPERTIES1_RESERVED_SHIFT                                       0x03
4529      =3  /* Values used for Schedule Set command */
4530      =3  #define SCHEDULE_SET_PROPERTIES1_WEEKDAY_MASK                                            0x07
4531      =3  #define SCHEDULE_SET_PROPERTIES1_RESERVED_MASK                                           0xF8
4532      =3  #define SCHEDULE_SET_PROPERTIES1_RESERVED_SHIFT                                          0x03
4533      =3  
4534      =3  /* Clock command class commands */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 89  

4535      =3  #define CLOCK_VERSION                                                                    0x01
4536      =3  #define CLOCK_GET                                                                        0x05
4537      =3  #define CLOCK_REPORT                                                                     0x06
4538      =3  #define CLOCK_SET                                                                        0x04
4539      =3  /* Values used for Clock Report command */
4540      =3  #define CLOCK_REPORT_LEVEL_HOUR_MASK                                                     0x1F
4541      =3  #define CLOCK_REPORT_LEVEL_WEEKDAY_MASK                                                  0xE0
4542      =3  #define CLOCK_REPORT_LEVEL_WEEKDAY_SHIFT                                                 0x05
4543      =3  /* Values used for Clock Set command */
4544      =3  #define CLOCK_SET_LEVEL_HOUR_MASK                                                        0x1F
4545      =3  #define CLOCK_SET_LEVEL_WEEKDAY_MASK                                                     0xE0
4546      =3  #define CLOCK_SET_LEVEL_WEEKDAY_SHIFT                                                    0x05
4547      =3  
4548      =3  /* Configuration command class commands */
4549      =3  #define CONFIGURATION_VERSION                                                            0x01
4550      =3  #define CONFIGURATION_GET                                                                0x05
4551      =3  #define CONFIGURATION_REPORT                                                             0x06
4552      =3  #define CONFIGURATION_SET                                                                0x04
4553      =3  /* Values used for Configuration Report command */
4554      =3  #define CONFIGURATION_REPORT_LEVEL_SIZE_MASK                                             0x07
4555      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_MASK                                         0xF8
4556      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_SHIFT                                        0x03
4557      =3  /* Values used for Configuration Set command */
4558      =3  #define CONFIGURATION_SET_LEVEL_SIZE_MASK                                                0x07
4559      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_MASK                                            0x78
4560      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_SHIFT                                           0x03
4561      =3  #define CONFIGURATION_SET_LEVEL_DEFAULT_BIT_MASK                                         0x80
4562      =3  
4563      =3  /* Configuration command class commands */
4564      =3  #define CONFIGURATION_VERSION_V2                                                         0x02
4565      =3  #define CONFIGURATION_BULK_GET_V2                                                        0x08
4566      =3  #define CONFIGURATION_BULK_REPORT_V2                                                     0x09
4567      =3  #define CONFIGURATION_BULK_SET_V2                                                        0x07
4568      =3  #define CONFIGURATION_GET_V2                                                             0x05
4569      =3  #define CONFIGURATION_REPORT_V2                                                          0x06
4570      =3  #define CONFIGURATION_SET_V2                                                             0x04
4571      =3  /* Values used for Configuration Bulk Report command */
4572      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_SIZE_MASK_V2                               0x07
4573      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_RESERVED_MASK_V2                           0x38
4574      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                          0x03
4575      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_HANDSHAKE_BIT_MASK_V2                      0x40
4576      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_DEFAULT_BIT_MASK_V2                        0x80
4577      =3  /* Values used for Configuration Bulk Set command */
4578      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_SIZE_MASK_V2                                  0x07
4579      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_RESERVED_MASK_V2                              0x38
4580      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_RESERVED_SHIFT_V2                             0x03
4581      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_HANDSHAKE_BIT_MASK_V2                         0x40
4582      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_DEFAULT_BIT_MASK_V2                           0x80
4583      =3  /* Values used for Configuration Report command */
4584      =3  #define CONFIGURATION_REPORT_LEVEL_SIZE_MASK_V2                                          0x07
4585      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_MASK_V2                                      0xF8
4586      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_SHIFT_V2                                     0x03
4587      =3  /* Values used for Configuration Set command */
4588      =3  #define CONFIGURATION_SET_LEVEL_SIZE_MASK_V2                                             0x07
4589      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_MASK_V2                                         0x78
4590      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_SHIFT_V2                                        0x03
4591      =3  #define CONFIGURATION_SET_LEVEL_DEFAULT_BIT_MASK_V2                                      0x80
4592      =3  
4593      =3  /* Configuration command class commands */
4594      =3  #define CONFIGURATION_VERSION_V3                                                         0x03
4595      =3  #define CONFIGURATION_BULK_GET_V3                                                        0x08
4596      =3  #define CONFIGURATION_BULK_REPORT_V3                                                     0x09
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 90  

4597      =3  #define CONFIGURATION_BULK_SET_V3                                                        0x07
4598      =3  #define CONFIGURATION_GET_V3                                                             0x05
4599      =3  #define CONFIGURATION_REPORT_V3                                                          0x06
4600      =3  #define CONFIGURATION_SET_V3                                                             0x04
4601      =3  #define CONFIGURATION_NAME_GET_V3                                                        0x0A
4602      =3  #define CONFIGURATION_NAME_REPORT_V3                                                     0x0B
4603      =3  #define CONFIGURATION_INFO_GET_V3                                                        0x0C
4604      =3  #define CONFIGURATION_INFO_REPORT_V3                                                     0x0D
4605      =3  #define CONFIGURATION_PROPERTIES_GET_V3                                                  0x0E
4606      =3  #define CONFIGURATION_PROPERTIES_REPORT_V3                                               0x0F
4607      =3  /* Values used for Configuration Bulk Report command */
4608      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_SIZE_MASK_V3                               0x07
4609      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_RESERVED_MASK_V3                           0x38
4610      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                          0x03
4611      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_HANDSHAKE_BIT_MASK_V3                      0x40
4612      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_DEFAULT_BIT_MASK_V3                        0x80
4613      =3  /* Values used for Configuration Bulk Set command */
4614      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_SIZE_MASK_V3                                  0x07
4615      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_RESERVED_MASK_V3                              0x38
4616      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_RESERVED_SHIFT_V3                             0x03
4617      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_HANDSHAKE_BIT_MASK_V3                         0x40
4618      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_DEFAULT_BIT_MASK_V3                           0x80
4619      =3  /* Values used for Configuration Report command */
4620      =3  #define CONFIGURATION_REPORT_LEVEL_SIZE_MASK_V3                                          0x07
4621      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_MASK_V3                                      0xF8
4622      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_SHIFT_V3                                     0x03
4623      =3  /* Values used for Configuration Set command */
4624      =3  #define CONFIGURATION_SET_LEVEL_SIZE_MASK_V3                                             0x07
4625      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_MASK_V3                                         0x78
4626      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_SHIFT_V3                                        0x03
4627      =3  #define CONFIGURATION_SET_LEVEL_DEFAULT_BIT_MASK_V3                                      0x80
4628      =3  /* Values used for Configuration Properties Report command */
4629      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_SIZE_MASK_V3                         0x07
4630      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_FORMAT_MASK_V3                       0x38
4631      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_FORMAT_SHIFT_V3                      0x03
4632      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_SIGNED_INTEGER_V3                         0x00
4633      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_UNSIGNED_INTEGER_V3                       0x01
4634      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_ENUMERATED_V3                             0x02
4635      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_BIT_FIELD_V3                              0x03
4636      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_RESERVED_MASK_V3                     0xC0
4637      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                    0x06
4638      =3  
4639      =3  /* Configuration command class commands */
4640      =3  #define CONFIGURATION_VERSION_V4                                                         0x04
4641      =3  #define CONFIGURATION_BULK_GET_V4                                                        0x08
4642      =3  #define CONFIGURATION_BULK_REPORT_V4                                                     0x09
4643      =3  #define CONFIGURATION_BULK_SET_V4                                                        0x07
4644      =3  #define CONFIGURATION_GET_V4                                                             0x05
4645      =3  #define CONFIGURATION_REPORT_V4                                                          0x06
4646      =3  #define CONFIGURATION_SET_V4                                                             0x04
4647      =3  #define CONFIGURATION_NAME_GET_V4                                                        0x0A
4648      =3  #define CONFIGURATION_NAME_REPORT_V4                                                     0x0B
4649      =3  #define CONFIGURATION_INFO_GET_V4                                                        0x0C
4650      =3  #define CONFIGURATION_INFO_REPORT_V4                                                     0x0D
4651      =3  #define CONFIGURATION_PROPERTIES_GET_V4                                                  0x0E
4652      =3  #define CONFIGURATION_PROPERTIES_REPORT_V4                                               0x0F
4653      =3  #define CONFIGURATION_DEFAULT_RESET_V4                                                   0x01
4654      =3  /* Values used for Configuration Bulk Report command */
4655      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_SIZE_MASK_V4                               0x07
4656      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_RESERVED_MASK_V4                           0x38
4657      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_RESERVED_SHIFT_V4                          0x03
4658      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_HANDSHAKE_BIT_MASK_V4                      0x40
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 91  

4659      =3  #define CONFIGURATION_BULK_REPORT_PROPERTIES1_DEFAULT_BIT_MASK_V4                        0x80
4660      =3  /* Values used for Configuration Bulk Set command */
4661      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_SIZE_MASK_V4                                  0x07
4662      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_RESERVED_MASK_V4                              0x38
4663      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_RESERVED_SHIFT_V4                             0x03
4664      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_HANDSHAKE_BIT_MASK_V4                         0x40
4665      =3  #define CONFIGURATION_BULK_SET_PROPERTIES1_DEFAULT_BIT_MASK_V4                           0x80
4666      =3  /* Values used for Configuration Report command */
4667      =3  #define CONFIGURATION_REPORT_LEVEL_SIZE_MASK_V4                                          0x07
4668      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_MASK_V4                                      0xF8
4669      =3  #define CONFIGURATION_REPORT_LEVEL_RESERVED_SHIFT_V4                                     0x03
4670      =3  /* Values used for Configuration Set command */
4671      =3  #define CONFIGURATION_SET_LEVEL_SIZE_MASK_V4                                             0x07
4672      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_MASK_V4                                         0x78
4673      =3  #define CONFIGURATION_SET_LEVEL_RESERVED_SHIFT_V4                                        0x03
4674      =3  #define CONFIGURATION_SET_LEVEL_DEFAULT_BIT_MASK_V4                                      0x80
4675      =3  /* Values used for Configuration Properties Report command */
4676      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_SIZE_MASK_V4                         0x07
4677      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_FORMAT_MASK_V4                       0x38
4678      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_FORMAT_SHIFT_V4                      0x03
4679      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_SIGNED_INTEGER_V4                         0x00
4680      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_UNSIGNED_INTEGER_V4                       0x01
4681      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_ENUMERATED_V4                             0x02
4682      =3  #define CONFIGURATION_PROPERTIES_REPORT_FORMAT_BIT_FIELD_V4                              0x03
4683      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_READONLY_BIT_MASK_V4                 0x40
4684      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES1_RE_INCLUSION_REQUIRED_BIT_MASK_V4    0x80
4685      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES2_ADVANCED_BIT_MASK_V4                 0x01
4686      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES2_NO_BULK_SUPPORT_BIT_MASK_V4          0x02
4687      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES2_RESERVED1_MASK_V4                    0xFC
4688      =3  #define CONFIGURATION_PROPERTIES_REPORT_PROPERTIES2_RESERVED1_SHIFT_V4                   0x02
4689      =3  
4690      =3  /* Controller Replication command class commands */
4691      =3  #define CONTROLLER_REPLICATION_VERSION                                                   0x01
4692      =3  #define CTRL_REPLICATION_TRANSFER_GROUP                                                  0x31
4693      =3  #define CTRL_REPLICATION_TRANSFER_GROUP_NAME                                             0x32
4694      =3  #define CTRL_REPLICATION_TRANSFER_SCENE                                                  0x33
4695      =3  #define CTRL_REPLICATION_TRANSFER_SCENE_NAME                                             0x34
4696      =3  
4697      =3  /* Crc 16 Encap command class commands */
4698      =3  #define CRC_16_ENCAP_VERSION                                                             0x01
4699      =3  #define CRC_16_ENCAP                                                                     0x01
4700      =3  
4701      =3  /* Dcp Config command class commands */
4702      =3  #define DCP_CONFIG_VERSION                                                               0x01
4703      =3  #define DCP_LIST_REMOVE                                                                  0x04
4704      =3  #define DCP_LIST_SET                                                                     0x03
4705      =3  #define DCP_LIST_SUPPORTED_GET                                                           0x01
4706      =3  #define DCP_LIST_SUPPORTED_REPORT                                                        0x02
4707      =3  /* Values used for Dcp List Set command */
4708      =3  #define DCP_LIST_SET_PROPERTIES1_NUMBER_OF_DC_MASK                                       0x03
4709      =3  #define DCP_LIST_SET_PROPERTIES1_RESERVED_MASK                                           0xFC
4710      =3  #define DCP_LIST_SET_PROPERTIES1_RESERVED_SHIFT                                          0x02
4711      =3  
4712      =3  /* Dcp Monitor command class commands */
4713      =3  #define DCP_MONITOR_VERSION                                                              0x01
4714      =3  #define DCP_EVENT_STATUS_GET                                                             0x03
4715      =3  #define DCP_EVENT_STATUS_REPORT                                                          0x04
4716      =3  #define DCP_LIST_GET                                                                     0x01
4717      =3  #define DCP_LIST_REPORT                                                                  0x02
4718      =3  /* Values used for Dcp List Report command */
4719      =3  #define DCP_LIST_REPORT_PROPERTIES1_NUMBER_OF_DC_MASK                                    0x03
4720      =3  #define DCP_LIST_REPORT_PROPERTIES1_RESERVED_MASK                                        0xFC
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 92  

4721      =3  #define DCP_LIST_REPORT_PROPERTIES1_RESERVED_SHIFT                                       0x02
4722      =3  
4723      =3  /* Door Lock Logging command class commands */
4724      =3  #define DOOR_LOCK_LOGGING_VERSION                                                        0x01
4725      =3  #define DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET                                          0x01
4726      =3  #define DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT                                       0x02
4727      =3  #define RECORD_GET                                                                       0x03
4728      =3  #define RECORD_REPORT                                                                    0x04
4729      =3  /* Values used for Record Report command */
4730      =3  #define RECORD_REPORT_PROPERTIES1_HOUR_LOCAL_TIME_MASK                                   0x1F
4731      =3  #define RECORD_REPORT_PROPERTIES1_RECORD_STATUS_MASK                                     0xE0
4732      =3  #define RECORD_REPORT_PROPERTIES1_RECORD_STATUS_SHIFT                                    0x05
4733      =3  
4734      =3  /* Door Lock command class commands */
4735      =3  #define DOOR_LOCK_VERSION                                                                0x01
4736      =3  #define DOOR_LOCK_CONFIGURATION_GET                                                      0x05
4737      =3  #define DOOR_LOCK_CONFIGURATION_REPORT                                                   0x06
4738      =3  #define DOOR_LOCK_CONFIGURATION_SET                                                      0x04
4739      =3  #define DOOR_LOCK_OPERATION_GET                                                          0x02
4740      =3  #define DOOR_LOCK_OPERATION_REPORT                                                       0x03
4741      =3  #define DOOR_LOCK_OPERATION_SET                                                          0x01
4742      =3  /* Values used for Door Lock Configuration Report command */
4743      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_CONSTANT_OPERATION                                0x01
4744      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_TIMED_OPERATION                                   0x02
4745      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_INSIDE_DOOR_HANDLES_STATE_MASK        0x0F
4746      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_MASK       0xF0
4747      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_SHIFT      0x04
4748      =3  /* Values used for Door Lock Configuration Set command */
4749      =3  #define DOOR_LOCK_CONFIGURATION_SET_CONSTANT_OPERATION                                   0x01
4750      =3  #define DOOR_LOCK_CONFIGURATION_SET_TIMED_OPERATION                                      0x02
4751      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_INSIDE_DOOR_HANDLES_STATE_MASK           0x0F
4752      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_MASK          0xF0
4753      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_SHIFT         0x04
4754      =3  /* Values used for Door Lock Operation Report command */
4755      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED                                        0x00
4756      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_WITH_TIMEOUT                           0x01
4757      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES                0x10
4758      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT   0x11
4759      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES               0x20
4760      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT  0x21
4761      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_SECURED                                          0xFF
4762      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_INSIDE_DOOR_HANDLES_MODE_MASK             0x0F
4763      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_MODE_MASK            0xF0
4764      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_MODE_SHIFT           0x04
4765      =3  /* Values used for Door Lock Operation Set command */
4766      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED                                           0x00
4767      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_WITH_TIMEOUT                              0x01
4768      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES                   0x10
4769      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT      0x11
4770      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES                  0x20
4771      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT     0x21
4772      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_SECURED                                             0xFF
4773      =3  
4774      =3  /* Door Lock command class commands */
4775      =3  #define DOOR_LOCK_VERSION_V2                                                             0x02
4776      =3  #define DOOR_LOCK_CONFIGURATION_GET_V2                                                   0x05
4777      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_V2                                                0x06
4778      =3  #define DOOR_LOCK_CONFIGURATION_SET_V2                                                   0x04
4779      =3  #define DOOR_LOCK_OPERATION_GET_V2                                                       0x02
4780      =3  #define DOOR_LOCK_OPERATION_REPORT_V2                                                    0x03
4781      =3  #define DOOR_LOCK_OPERATION_SET_V2                                                       0x01
4782      =3  /* Values used for Door Lock Configuration Report command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 93  

4783      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_CONSTANT_OPERATION_V2                             0x01
4784      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_TIMED_OPERATION_V2                                0x02
4785      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_INSIDE_DOOR_HANDLES_STATE_MASK_V2     0x0F
4786      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_MASK_V2    0xF0
4787      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_SHIFT_V2   0x04
4788      =3  /* Values used for Door Lock Configuration Set command */
4789      =3  #define DOOR_LOCK_CONFIGURATION_SET_CONSTANT_OPERATION_V2                                0x01
4790      =3  #define DOOR_LOCK_CONFIGURATION_SET_TIMED_OPERATION_V2                                   0x02
4791      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_INSIDE_DOOR_HANDLES_STATE_MASK_V2        0x0F
4792      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_MASK_V2       0xF0
4793      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_SHIFT_V2      0x04
4794      =3  /* Values used for Door Lock Operation Report command */
4795      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_V2                                     0x00
4796      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_WITH_TIMEOUT_V2                        0x01
4797      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_V2             0x10
4798      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT_V2 0x11
4799      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_V2            0x20
4800      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT_V2 0x21
4801      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_LOCK_STATE_UNKNOWN_V2                            0xFE
4802      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_SECURED_V2                                       0xFF
4803      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_INSIDE_DOOR_HANDLES_MODE_MASK_V2          0x0F
4804      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_MODE_MASK_V2         0xF0
4805      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_MODE_SHIFT_V2        0x04
4806      =3  /* Values used for Door Lock Operation Set command */
4807      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_V2                                        0x00
4808      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_WITH_TIMEOUT_V2                           0x01
4809      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_V2                0x10
4810      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT_V2   0x11
4811      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_V2               0x20
4812      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT_V2  0x21
4813      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_LOCK_STATE_UNKNOWN_V2                               0xFE
4814      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_SECURED_V2                                          0xFF
4815      =3  
4816      =3  /* Door Lock command class commands */
4817      =3  #define DOOR_LOCK_VERSION_V3                                                             0x03
4818      =3  #define DOOR_LOCK_CONFIGURATION_GET_V3                                                   0x05
4819      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_V3                                                0x06
4820      =3  #define DOOR_LOCK_CONFIGURATION_SET_V3                                                   0x04
4821      =3  #define DOOR_LOCK_OPERATION_GET_V3                                                       0x02
4822      =3  #define DOOR_LOCK_OPERATION_REPORT_V3                                                    0x03
4823      =3  #define DOOR_LOCK_OPERATION_SET_V3                                                       0x01
4824      =3  /* Values used for Door Lock Configuration Report command */
4825      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_CONSTANT_OPERATION_V3                             0x01
4826      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_TIMED_OPERATION_V3                                0x02
4827      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_INSIDE_DOOR_HANDLES_STATE_MASK_V3     0x0F
4828      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_MASK_V3    0xF0
4829      =3  #define DOOR_LOCK_CONFIGURATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_SHIFT_V3   0x04
4830      =3  /* Values used for Door Lock Configuration Set command */
4831      =3  #define DOOR_LOCK_CONFIGURATION_SET_CONSTANT_OPERATION_V3                                0x01
4832      =3  #define DOOR_LOCK_CONFIGURATION_SET_TIMED_OPERATION_V3                                   0x02
4833      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_INSIDE_DOOR_HANDLES_STATE_MASK_V3        0x0F
4834      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_MASK_V3       0xF0
4835      =3  #define DOOR_LOCK_CONFIGURATION_SET_PROPERTIES1_OUTSIDE_DOOR_HANDLES_STATE_SHIFT_V3      0x04
4836      =3  /* Values used for Door Lock Operation Report command */
4837      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_V3                                     0x00
4838      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_WITH_TIMEOUT_V3                        0x01
4839      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_V3             0x10
4840      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT_V3 0x11
4841      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_V3            0x20
4842      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT_V3 0x21
4843      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_LOCK_STATE_UNKNOWN_V3                            0xFE
4844      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_SECURED_V3                                       0xFF
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 94  

4845      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_INSIDE_DOOR_HANDLES_MODE_MASK_V3          0x0F
4846      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_MODE_MASK_V3         0xF0
4847      =3  #define DOOR_LOCK_OPERATION_REPORT_PROPERTIES1_OUTSIDE_DOOR_HANDLES_MODE_SHIFT_V3        0x04
4848      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_V3                                     0x00
4849      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_WITH_TIMEOUT_V3                        0x01
4850      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_V3             0x10
4851      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT_V3 0x11
4852      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_V3            0x20
4853      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT_V3 0x21
4854      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_LOCK_STATE_UNKNOWN_V3                            0xFE
4855      =3  #define DOOR_LOCK_OPERATION_REPORT_DOOR_SECURED_V3                                       0xFF
4856      =3  #define DOOR_LOCK_OPERATION_REPORT_ALREADY_AT_THE_TARGET_VALUE_V3                        0x00
4857      =3  #define DOOR_LOCK_OPERATION_REPORT_UNKNOWN_DURATION_V3                                   0xFE
4858      =3  #define DOOR_LOCK_OPERATION_REPORT_RESERVED_V3                                           0xFF
4859      =3  /* Values used for Door Lock Operation Set command */
4860      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_V3                                        0x00
4861      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_WITH_TIMEOUT_V3                           0x01
4862      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_V3                0x10
4863      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT_V3   0x11
4864      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_V3               0x20
4865      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT_V3  0x21
4866      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_LOCK_STATE_UNKNOWN_V3                               0xFE
4867      =3  #define DOOR_LOCK_OPERATION_SET_DOOR_SECURED_V3                                          0xFF
4868      =3  
4869      =3  /* Energy Production command class commands */
4870      =3  #define ENERGY_PRODUCTION_VERSION                                                        0x01
4871      =3  #define ENERGY_PRODUCTION_GET                                                            0x02
4872      =3  #define ENERGY_PRODUCTION_REPORT                                                         0x03
4873      =3  /* Values used for Energy Production Get command */
4874      =3  #define ENERGY_PRODUCTION_GET_INSTANT_ENERGY_PRODUCTION                                  0x00
4875      =3  #define ENERGY_PRODUCTION_GET_TOTAL_ENERGY_PRODUCTION                                    0x01
4876      =3  #define ENERGY_PRODUCTION_GET_ENERGY_PRODUCTION_TODAY                                    0x02
4877      =3  #define ENERGY_PRODUCTION_GET_TOTAL_PRODUCTION_TIME                                      0x03
4878      =3  /* Values used for Energy Production Report command */
4879      =3  #define ENERGY_PRODUCTION_REPORT_INSTANT_ENERGY_PRODUCTION                               0x00
4880      =3  #define ENERGY_PRODUCTION_REPORT_TOTAL_ENERGY_PRODUCTION                                 0x01
4881      =3  #define ENERGY_PRODUCTION_REPORT_ENERGY_PRODUCTION_TODAY                                 0x02
4882      =3  #define ENERGY_PRODUCTION_REPORT_TOTAL_PRODUCTION_TIME                                   0x03
4883      =3  #define ENERGY_PRODUCTION_REPORT_LEVEL_SIZE_MASK                                         0x07
4884      =3  #define ENERGY_PRODUCTION_REPORT_LEVEL_SCALE_MASK                                        0x18
4885      =3  #define ENERGY_PRODUCTION_REPORT_LEVEL_SCALE_SHIFT                                       0x03
4886      =3  #define ENERGY_PRODUCTION_REPORT_LEVEL_PRECISION_MASK                                    0xE0
4887      =3  #define ENERGY_PRODUCTION_REPORT_LEVEL_PRECISION_SHIFT                                   0x05
4888      =3  
4889      =3  /* Firmware Update Md command class commands */
4890      =3  #define FIRMWARE_UPDATE_MD_VERSION                                                       0x01
4891      =3  #define FIRMWARE_MD_GET                                                                  0x01
4892      =3  #define FIRMWARE_MD_REPORT                                                               0x02
4893      =3  #define FIRMWARE_UPDATE_MD_GET                                                           0x05
4894      =3  #define FIRMWARE_UPDATE_MD_REPORT                                                        0x06
4895      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET                                                   0x03
4896      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT                                                0x04
4897      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT                                                 0x07
4898      =3  /* Values used for Firmware Update Md Get command */
4899      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_REPORT_NUMBER_1_MASK                          0x7F
4900      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_ZERO_BIT_MASK                                 0x80
4901      =3  /* Values used for Firmware Update Md Report command */
4902      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_REPORT_NUMBER_1_MASK                       0x7F
4903      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_LAST_BIT_MASK                              0x80
4904      =3  /* Values used for Firmware Update Md Request Report command */
4905      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_COMBINATION                            0x00
4906      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_REQUIRES_AUTHENTICATION                        0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 95  

4907      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_VALID_COMBINATION                              0xFF
4908      =3  /* Values used for Firmware Update Md Status Report command */
4909      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR        0x00
4910      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE                               0x01
4911      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY                                    0xFF
4912      =3  
4913      =3  /* Firmware Update Md command class commands */
4914      =3  #define FIRMWARE_UPDATE_MD_VERSION_V2                                                    0x02
4915      =3  #define FIRMWARE_MD_GET_V2                                                               0x01
4916      =3  #define FIRMWARE_MD_REPORT_V2                                                            0x02
4917      =3  #define FIRMWARE_UPDATE_MD_GET_V2                                                        0x05
4918      =3  #define FIRMWARE_UPDATE_MD_REPORT_V2                                                     0x06
4919      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_V2                                                0x03
4920      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_V2                                             0x04
4921      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_V2                                              0x07
4922      =3  /* Values used for Firmware Update Md Get command */
4923      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_REPORT_NUMBER_1_MASK_V2                       0x7F
4924      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_ZERO_BIT_MASK_V2                              0x80
4925      =3  /* Values used for Firmware Update Md Report command */
4926      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_REPORT_NUMBER_1_MASK_V2                    0x7F
4927      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_LAST_BIT_MASK_V2                           0x80
4928      =3  /* Values used for Firmware Update Md Request Report command */
4929      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_COMBINATION_V2                         0x00
4930      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_REQUIRES_AUTHENTICATION_V2                     0x01
4931      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_VALID_COMBINATION_V2                           0xFF
4932      =3  /* Values used for Firmware Update Md Status Report command */
4933      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR_V2     0x00
4934      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_V2                            0x01
4935      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_V2                                 0xFF
4936      =3  
4937      =3  /* Firmware Update Md command class commands */
4938      =3  #define FIRMWARE_UPDATE_MD_VERSION_V3                                                    0x03
4939      =3  #define FIRMWARE_MD_GET_V3                                                               0x01
4940      =3  #define FIRMWARE_MD_REPORT_V3                                                            0x02
4941      =3  #define FIRMWARE_UPDATE_MD_GET_V3                                                        0x05
4942      =3  #define FIRMWARE_UPDATE_MD_REPORT_V3                                                     0x06
4943      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_V3                                                0x03
4944      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_V3                                             0x04
4945      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_V3                                              0x07
4946      =3  /* Values used for Firmware Update Md Get command */
4947      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_REPORT_NUMBER_1_MASK_V3                       0x7F
4948      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_ZERO_BIT_MASK_V3                              0x80
4949      =3  /* Values used for Firmware Update Md Report command */
4950      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_REPORT_NUMBER_1_MASK_V3                    0x7F
4951      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_LAST_BIT_MASK_V3                           0x80
4952      =3  /* Values used for Firmware Update Md Request Report command */
4953      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_COMBINATION_V3                         0x00
4954      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_REQUIRES_AUTHENTICATION_V3                     0x01
4955      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_FRAGMENT_SIZE_V3                       0x02
4956      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_NOT_UPGRADABLE_V3                              0x03
4957      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_VALID_COMBINATION_V3                           0xFF
4958      =3  /* Values used for Firmware Update Md Status Report command */
4959      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR_V3     0x00
4960      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_V3                            0x01
4961      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_STORED_V3                          0xFE
4962      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_V3                                 0xFF
4963      =3  
4964      =3  /* Firmware Update Md command class commands */
4965      =3  #define FIRMWARE_UPDATE_MD_VERSION_V4                                                    0x04
4966      =3  #define FIRMWARE_MD_GET_V4                                                               0x01
4967      =3  #define FIRMWARE_MD_REPORT_V4                                                            0x02
4968      =3  #define FIRMWARE_UPDATE_MD_GET_V4                                                        0x05
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 96  

4969      =3  #define FIRMWARE_UPDATE_MD_REPORT_V4                                                     0x06
4970      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_V4                                                0x03
4971      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_V4                                             0x04
4972      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_V4                                              0x07
4973      =3  #define FIRMWARE_UPDATE_ACTIVATION_SET_V4                                                0x08
4974      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V4                                      0x09
4975      =3  /* Values used for Firmware Update Md Get command */
4976      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_REPORT_NUMBER_1_MASK_V4                       0x7F
4977      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_ZERO_BIT_MASK_V4                              0x80
4978      =3  /* Values used for Firmware Update Md Report command */
4979      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_REPORT_NUMBER_1_MASK_V4                    0x7F
4980      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_LAST_BIT_MASK_V4                           0x80
4981      =3  /* Values used for Firmware Update Md Request Get command */
4982      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_PROPERTIES1_ACTIVATION_BIT_MASK_V4                0x01
4983      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_PROPERTIES1_RESERVED_MASK_V4                      0xFE
4984      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_PROPERTIES1_RESERVED_SHIFT_V4                     0x01
4985      =3  /* Values used for Firmware Update Md Request Report command */
4986      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_COMBINATION_V4                         0x00
4987      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_REQUIRES_AUTHENTICATION_V4                     0x01
4988      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_FRAGMENT_SIZE_V4                       0x02
4989      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_NOT_UPGRADABLE_V4                              0x03
4990      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_VALID_COMBINATION_V4                           0xFF
4991      =3  /* Values used for Firmware Update Md Status Report command */
4992      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR_V4     0x00
4993      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_V4                            0x01
4994      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_DOES_NOT_MATCH_THE_MANUFACTURER_ID_V4           0x02
4995      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_DOES_NOT_MATCH_THE_FIRMWARE_ID_V4               0x03
4996      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_DOES_NOT_MATCH_THE_FIRMWARE_TARGET_V4           0x04
4997      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_INVALID_FILE_HEADER_INFORMATION_V4              0x05
4998      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_INVALID_FILE_HEADER_FORMAT_V4                   0x06
4999      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_INSUFFICIENT_MEMORY_V4                          0x07
5000      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_WAITING_FOR_ACTIVATION_V4          0xFD
5001      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_STORED_V4                          0xFE
5002      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_V4                                 0xFF
5003      =3  /* Values used for Firmware Update Activation Status Report command */
5004      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_INVALID_COMBINATION_V4                  0x00
5005      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_ERROR_ACTIVATING_THE_FIRMWARE_V4        0x01
5006      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_FIRMWARE_UPDATE_COMPLETED_SUCCESSFULLY_V4 0xFF
5007      =3  
5008      =3  /* Firmware Update Md command class commands */
5009      =3  #define FIRMWARE_UPDATE_MD_VERSION_V5                                                    0x05
5010      =3  #define FIRMWARE_MD_GET_V5                                                               0x01
5011      =3  #define FIRMWARE_MD_REPORT_V5                                                            0x02
5012      =3  #define FIRMWARE_UPDATE_MD_GET_V5                                                        0x05
5013      =3  #define FIRMWARE_UPDATE_MD_REPORT_V5                                                     0x06
5014      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_V5                                                0x03
5015      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_V5                                             0x04
5016      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_V5                                              0x07
5017      =3  #define FIRMWARE_UPDATE_ACTIVATION_SET_V5                                                0x08
5018      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V5                                      0x09
5019      =3  #define FIRMWARE_UPDATE_MD_PREPARE_GET_V5                                                0x0A
5020      =3  #define FIRMWARE_UPDATE_MD_PREPARE_REPORT_V5                                             0x0B
5021      =3  /* Values used for Firmware Update Md Get command */
5022      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_REPORT_NUMBER_1_MASK_V5                       0x7F
5023      =3  #define FIRMWARE_UPDATE_MD_GET_PROPERTIES1_ZERO_BIT_MASK_V5                              0x80
5024      =3  /* Values used for Firmware Update Md Report command */
5025      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_REPORT_NUMBER_1_MASK_V5                    0x7F
5026      =3  #define FIRMWARE_UPDATE_MD_REPORT_PROPERTIES1_LAST_BIT_MASK_V5                           0x80
5027      =3  /* Values used for Firmware Update Md Request Get command */
5028      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_PROPERTIES1_ACTIVATION_BIT_MASK_V5                0x01
5029      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_PROPERTIES1_RESERVED_MASK_V5                      0xFE
5030      =3  #define FIRMWARE_UPDATE_MD_REQUEST_GET_PROPERTIES1_RESERVED_SHIFT_V5                     0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 97  

5031      =3  /* Values used for Firmware Update Md Request Report command */
5032      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_COMBINATION_V5                         0x00
5033      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_REQUIRES_AUTHENTICATION_V5                     0x01
5034      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_FRAGMENT_SIZE_V5                       0x02
5035      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_NOT_UPGRADABLE_V5                              0x03
5036      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_HARDWARE_VERSION_V5                    0x04
5037      =3  #define FIRMWARE_UPDATE_MD_REQUEST_REPORT_VALID_COMBINATION_V5                           0xFF
5038      =3  /* Values used for Firmware Update Md Status Report command */
5039      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR_V5     0x00
5040      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_V5                            0x01
5041      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_DOES_NOT_MATCH_THE_MANUFACTURER_ID_V5           0x02
5042      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_DOES_NOT_MATCH_THE_FIRMWARE_ID_V5               0x03
5043      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_DOES_NOT_MATCH_THE_FIRMWARE_TARGET_V5           0x04
5044      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_INVALID_FILE_HEADER_INFORMATION_V5              0x05
5045      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_INVALID_FILE_HEADER_FORMAT_V5                   0x06
5046      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_INSUFFICIENT_MEMORY_V5                          0x07
5047      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_DOES_NOT_MATCH_THE_HARDWARE_VERSION_V5          0x08
5048      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_WAITING_FOR_ACTIVATION_V5          0xFD
5049      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_STORED_V5                          0xFE
5050      =3  #define FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_V5                                 0xFF
5051      =3  /* Values used for Firmware Update Activation Status Report command */
5052      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_INVALID_COMBINATION_V5                  0x00
5053      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_ERROR_ACTIVATING_THE_FIRMWARE_V5        0x01
5054      =3  #define FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_FIRMWARE_UPDATE_COMPLETED_SUCCESSFULLY_V5 0xFF
5055      =3  /* Values used for Firmware Update Md Prepare Report command */
5056      =3  #define FIRMWARE_UPDATE_MD_PREPARE_REPORT_INVALID_COMBINATION_V5                         0x00
5057      =3  #define FIRMWARE_UPDATE_MD_PREPARE_REPORT_REQUIRES_AUTHENTICATION_V5                     0x01
5058      =3  #define FIRMWARE_UPDATE_MD_PREPARE_REPORT_INVALID_FRAGMENT_SIZE_V5                       0x02
5059      =3  #define FIRMWARE_UPDATE_MD_PREPARE_REPORT_NOT_UPGRADABLE_V5                              0x03
5060      =3  #define FIRMWARE_UPDATE_MD_PREPARE_REPORT_INVALID_HARDWARE_VERSION_V5                    0x04
5061      =3  #define FIRMWARE_UPDATE_MD_PREPARE_REPORT_VALID_COMBINATION_V5                           0xFF
5062      =3  
5063      =3  /* Geographic Location command class commands */
5064      =3  #define GEOGRAPHIC_LOCATION_VERSION                                                      0x01
5065      =3  #define GEOGRAPHIC_LOCATION_GET                                                          0x02
5066      =3  #define GEOGRAPHIC_LOCATION_REPORT                                                       0x03
5067      =3  #define GEOGRAPHIC_LOCATION_SET                                                          0x01
5068      =3  /* Values used for Geographic Location Report command */
5069      =3  #define GEOGRAPHIC_LOCATION_REPORT_LEVEL_LONGITUDE_MINUTES_MASK                          0x7F
5070      =3  #define GEOGRAPHIC_LOCATION_REPORT_LEVEL_LONG_SIGN_BIT_MASK                              0x80
5071      =3  #define GEOGRAPHIC_LOCATION_REPORT_LEVEL2_LATITUDE_MINUTES_MASK                          0x7F
5072      =3  #define GEOGRAPHIC_LOCATION_REPORT_LEVEL2_LAT_SIGN_BIT_MASK                              0x80
5073      =3  /* Values used for Geographic Location Set command */
5074      =3  #define GEOGRAPHIC_LOCATION_SET_LEVEL_LONGITUDE_MINUTES_MASK                             0x7F
5075      =3  #define GEOGRAPHIC_LOCATION_SET_LEVEL_LONG_SIGN_BIT_MASK                                 0x80
5076      =3  #define GEOGRAPHIC_LOCATION_SET_LEVEL2_LATITUDE_MINUTES_MASK                             0x7F
5077      =3  #define GEOGRAPHIC_LOCATION_SET_LEVEL2_LAT_SIGN_BIT_MASK                                 0x80
5078      =3  
5079      =3  /* Grouping Name command class commands */
5080      =3  #define GROUPING_NAME_VERSION                                                            0x01
5081      =3  #define GROUPING_NAME_GET                                                                0x02
5082      =3  #define GROUPING_NAME_REPORT                                                             0x03
5083      =3  #define GROUPING_NAME_SET                                                                0x01
5084      =3  /* Values used for Grouping Name Report command */
5085      =3  #define GROUPING_NAME_REPORT_PROPERTIES1_CHAR_PRESENTATION_MASK                          0x07
5086      =3  #define GROUPING_NAME_REPORT_PROPERTIES1_RESERVED_MASK                                   0xF8
5087      =3  #define GROUPING_NAME_REPORT_PROPERTIES1_RESERVED_SHIFT                                  0x03
5088      =3  /* Values used for Grouping Name Set command */
5089      =3  #define GROUPING_NAME_SET_PROPERTIES1_CHAR_PRESENTATION_MASK                             0x07
5090      =3  #define GROUPING_NAME_SET_PROPERTIES1_RESERVED_MASK                                      0xF8
5091      =3  #define GROUPING_NAME_SET_PROPERTIES1_RESERVED_SHIFT                                     0x03
5092      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 98  

5093      =3  /* Hail command class commands */
5094      =3  #define HAIL_VERSION                                                                     0x01
5095      =3  #define HAIL                                                                             0x01
5096      =3  
5097      =3  /* Hrv Control command class commands */
5098      =3  #define HRV_CONTROL_VERSION                                                              0x01
5099      =3  #define HRV_CONTROL_BYPASS_GET                                                           0x05
5100      =3  #define HRV_CONTROL_BYPASS_REPORT                                                        0x06
5101      =3  #define HRV_CONTROL_BYPASS_SET                                                           0x04
5102      =3  #define HRV_CONTROL_MODE_GET                                                             0x02
5103      =3  #define HRV_CONTROL_MODE_REPORT                                                          0x03
5104      =3  #define HRV_CONTROL_MODE_SET                                                             0x01
5105      =3  #define HRV_CONTROL_MODE_SUPPORTED_GET                                                   0x0A
5106      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT                                                0x0B
5107      =3  #define HRV_CONTROL_VENTILATION_RATE_GET                                                 0x08
5108      =3  #define HRV_CONTROL_VENTILATION_RATE_REPORT                                              0x09
5109      =3  #define HRV_CONTROL_VENTILATION_RATE_SET                                                 0x07
5110      =3  /* Values used for Hrv Control Mode Report command */
5111      =3  #define HRV_CONTROL_MODE_REPORT_PROPERTIES1_MODE_MASK                                    0x1F
5112      =3  #define HRV_CONTROL_MODE_REPORT_MODE_OFF                                                 0x00
5113      =3  #define HRV_CONTROL_MODE_REPORT_MODE_DEMAND_AUTOMATIC                                    0x01
5114      =3  #define HRV_CONTROL_MODE_REPORT_MODE_SCHEDULE                                            0x02
5115      =3  #define HRV_CONTROL_MODE_REPORT_MODE_ENERGY_SAVINGS_MODE                                 0x03
5116      =3  #define HRV_CONTROL_MODE_REPORT_MODE_MANUAL                                              0x04
5117      =3  #define HRV_CONTROL_MODE_REPORT_PROPERTIES1_RESERVED_MASK                                0xE0
5118      =3  #define HRV_CONTROL_MODE_REPORT_PROPERTIES1_RESERVED_SHIFT                               0x05
5119      =3  /* Values used for Hrv Control Mode Set command */
5120      =3  #define HRV_CONTROL_MODE_SET_PROPERTIES1_MODE_MASK                                       0x1F
5121      =3  #define HRV_CONTROL_MODE_SET_MODE_OFF                                                    0x00
5122      =3  #define HRV_CONTROL_MODE_SET_MODE_DEMAND_AUTOMATIC                                       0x01
5123      =3  #define HRV_CONTROL_MODE_SET_MODE_SCHEDULE                                               0x02
5124      =3  #define HRV_CONTROL_MODE_SET_MODE_ENERGY_SAVINGS_MODE                                    0x03
5125      =3  #define HRV_CONTROL_MODE_SET_MODE_MANUAL                                                 0x04
5126      =3  #define HRV_CONTROL_MODE_SET_PROPERTIES1_RESERVED_MASK                                   0xE0
5127      =3  #define HRV_CONTROL_MODE_SET_PROPERTIES1_RESERVED_SHIFT                                  0x05
5128      =3  /* Values used for Hrv Control Mode Supported Report command */
5129      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT_PROPERTIES1_MANUAL_CONTROL_SUPPORTED_MASK      0x0F
5130      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT_MANUAL_CONTROL_SUPPORTED_BYPASS_OPEN_CLOSE     0x00
5131      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT_MANUAL_CONTROL_SUPPORTED_BYPASS_AUTO           0x01
5132      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT_MANUAL_CONTROL_SUPPORTED_MODULATED_BYPASS      0x02
5133      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT_MANUAL_CONTROL_SUPPORTED_VENTILATION_RATE      0x03
5134      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK                      0xF0
5135      =3  #define HRV_CONTROL_MODE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT                     0x04
5136      =3  
5137      =3  /* Hrv Status command class commands */
5138      =3  #define HRV_STATUS_VERSION                                                               0x01
5139      =3  #define HRV_STATUS_GET                                                                   0x01
5140      =3  #define HRV_STATUS_REPORT                                                                0x02
5141      =3  #define HRV_STATUS_SUPPORTED_GET                                                         0x03
5142      =3  #define HRV_STATUS_SUPPORTED_REPORT                                                      0x04
5143      =3  /* Values used for Hrv Status Get command */
5144      =3  #define HRV_STATUS_GET_OUTDOOR_AIR_TEMPERATURE                                           0x00
5145      =3  #define HRV_STATUS_GET_SUPPLY_AIR_TEMPERATURE                                            0x01
5146      =3  #define HRV_STATUS_GET_EXHAUST_AIR_TEMPERATURE                                           0x02
5147      =3  #define HRV_STATUS_GET_DISCHARGE_AIR_TEMPERATURE                                         0x03
5148      =3  #define HRV_STATUS_GET_ROOM_TEMPERATURE                                                  0x04
5149      =3  #define HRV_STATUS_GET_RELATIVE_HUMIDITY_IN_ROOM                                         0x05
5150      =3  #define HRV_STATUS_GET_REMAINING_FILTER_LIFE                                             0x06
5151      =3  /* Values used for Hrv Status Report command */
5152      =3  #define HRV_STATUS_REPORT_OUTDOOR_AIR_TEMPERATURE                                        0x00
5153      =3  #define HRV_STATUS_REPORT_SUPPLY_AIR_TEMPERATURE                                         0x01
5154      =3  #define HRV_STATUS_REPORT_EXHAUST_AIR_TEMPERATURE                                        0x02
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 99  

5155      =3  #define HRV_STATUS_REPORT_DISCHARGE_AIR_TEMPERATURE                                      0x03
5156      =3  #define HRV_STATUS_REPORT_ROOM_TEMPERATURE                                               0x04
5157      =3  #define HRV_STATUS_REPORT_RELATIVE_HUMIDITY_IN_ROOM                                      0x05
5158      =3  #define HRV_STATUS_REPORT_REMAINING_FILTER_LIFE                                          0x06
5159      =3  #define HRV_STATUS_REPORT_PROPERTIES1_SIZE_MASK                                          0x07
5160      =3  #define HRV_STATUS_REPORT_PROPERTIES1_SCALE_MASK                                         0x18
5161      =3  #define HRV_STATUS_REPORT_PROPERTIES1_SCALE_SHIFT                                        0x03
5162      =3  #define HRV_STATUS_REPORT_PROPERTIES1_PRECISION_MASK                                     0xE0
5163      =3  #define HRV_STATUS_REPORT_PROPERTIES1_PRECISION_SHIFT                                    0x05
5164      =3  
5165      =3  /* Indicator command class commands */
5166      =3  #define INDICATOR_VERSION                                                                0x01
5167      =3  #define INDICATOR_GET                                                                    0x02
5168      =3  #define INDICATOR_REPORT                                                                 0x03
5169      =3  #define INDICATOR_SET                                                                    0x01
5170      =3  
5171      =3  /* Indicator command class commands */
5172      =3  #define INDICATOR_VERSION_V2                                                             0x02
5173      =3  #define INDICATOR_GET_V2                                                                 0x02
5174      =3  #define INDICATOR_REPORT_V2                                                              0x03
5175      =3  #define INDICATOR_SET_V2                                                                 0x01
5176      =3  #define INDICATOR_SUPPORTED_GET_V2                                                       0x04
5177      =3  #define INDICATOR_SUPPORTED_REPORT_V2                                                    0x05
5178      =3  /* Values used for Indicator Get command */
5179      =3  #define INDICATOR_GET_NA_V2                                                              0x00
5180      =3  #define INDICATOR_GET_ARMED_V2                                                           0x01
5181      =3  #define INDICATOR_GET_NOT_ARMED_V2                                                       0x02
5182      =3  #define INDICATOR_GET_READY_V2                                                           0x03
5183      =3  #define INDICATOR_GET_FAULT_V2                                                           0x04
5184      =3  #define INDICATOR_GET_BUSY_V2                                                            0x05
5185      =3  #define INDICATOR_GET_ENTER_ID_V2                                                        0x06
5186      =3  #define INDICATOR_GET_ENTER_PIN_V2                                                       0x07
5187      =3  #define INDICATOR_GET_OK_V2                                                              0x08
5188      =3  #define INDICATOR_GET_NOT_OK_V2                                                          0x09
5189      =3  #define INDICATOR_GET_ZONE1_ARMED_V2                                                     0x20
5190      =3  #define INDICATOR_GET_ZONE2_ARMED_V2                                                     0x21
5191      =3  #define INDICATOR_GET_ZONE3_ARMED_V2                                                     0x22
5192      =3  #define INDICATOR_GET_ZONE4_ARMED_V2                                                     0x23
5193      =3  #define INDICATOR_GET_ZONE5_ARMED_V2                                                     0x24
5194      =3  #define INDICATOR_GET_ZONE6_ARMED_V2                                                     0x25
5195      =3  #define INDICATOR_GET_LCD_BACKLIGHT_V2                                                   0x30
5196      =3  #define INDICATOR_GET_BUTTON_BACKLIGHT_LETTERS_V2                                        0x40
5197      =3  #define INDICATOR_GET_BUTTON_BACKLIGHT_DIGITS_V2                                         0x41
5198      =3  #define INDICATOR_GET_BUTTON_BACKLIGHT_COMMAND_V2                                        0x42
5199      =3  #define INDICATOR_GET_BUTTON1_INDICATION_V2                                              0x43
5200      =3  #define INDICATOR_GET_BUTTON2_INDICATION_V2                                              0x44
5201      =3  #define INDICATOR_GET_BUTTON3_INDICATION_V2                                              0x45
5202      =3  #define INDICATOR_GET_BUTTON4_INDICATION_V2                                              0x46
5203      =3  #define INDICATOR_GET_BUTTON5_INDICATION_V2                                              0x47
5204      =3  #define INDICATOR_GET_BUTTON6_INDICATION_V2                                              0x48
5205      =3  #define INDICATOR_GET_BUTTON7_INDICATION_V2                                              0x49
5206      =3  #define INDICATOR_GET_BUTTON8_INDICATION_V2                                              0x4A
5207      =3  #define INDICATOR_GET_BUTTON9_INDICATION_V2                                              0x4B
5208      =3  #define INDICATOR_GET_BUTTON10_INDICATION_V2                                             0x4C
5209      =3  #define INDICATOR_GET_BUTTON11_INDICATION_V2                                             0x4D
5210      =3  #define INDICATOR_GET_BUTTON12_INDICATION_V2                                             0x4E
5211      =3  #define INDICATOR_GET_BUZZER_V2                                                          0xF0
5212      =3  /* Values used for Indicator Report command */
5213      =3  #define INDICATOR_REPORT_PROPERTIES1_INDICATOR_OBJECT_COUNT_MASK_V2                      0x1F
5214      =3  #define INDICATOR_REPORT_PROPERTIES1_RESERVED_MASK_V2                                    0xE0
5215      =3  #define INDICATOR_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                                   0x05
5216      =3  #define INDICATOR_REPORT_NA_V2                                                           0x00
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 100 

5217      =3  #define INDICATOR_REPORT_ARMED_V2                                                        0x01
5218      =3  #define INDICATOR_REPORT_NOT_ARMED_V2                                                    0x02
5219      =3  #define INDICATOR_REPORT_READY_V2                                                        0x03
5220      =3  #define INDICATOR_REPORT_FAULT_V2                                                        0x04
5221      =3  #define INDICATOR_REPORT_BUSY_V2                                                         0x05
5222      =3  #define INDICATOR_REPORT_ENTER_ID_V2                                                     0x06
5223      =3  #define INDICATOR_REPORT_ENTER_PIN_V2                                                    0x07
5224      =3  #define INDICATOR_REPORT_OK_V2                                                           0x08
5225      =3  #define INDICATOR_REPORT_NOT_OK_V2                                                       0x09
5226      =3  #define INDICATOR_REPORT_ZONE1_ARMED_V2                                                  0x20
5227      =3  #define INDICATOR_REPORT_ZONE2_ARMED_V2                                                  0x21
5228      =3  #define INDICATOR_REPORT_ZONE3_ARMED_V2                                                  0x22
5229      =3  #define INDICATOR_REPORT_ZONE4_ARMED_V2                                                  0x23
5230      =3  #define INDICATOR_REPORT_ZONE5_ARMED_V2                                                  0x24
5231      =3  #define INDICATOR_REPORT_ZONE6_ARMED_V2                                                  0x25
5232      =3  #define INDICATOR_REPORT_LCD_BACKLIGHT_V2                                                0x30
5233      =3  #define INDICATOR_REPORT_BUTTON_BACKLIGHT_LETTERS_V2                                     0x40
5234      =3  #define INDICATOR_REPORT_BUTTON_BACKLIGHT_DIGITS_V2                                      0x41
5235      =3  #define INDICATOR_REPORT_BUTTON_BACKLIGHT_COMMAND_V2                                     0x42
5236      =3  #define INDICATOR_REPORT_BUTTON1_INDICATION_V2                                           0x43
5237      =3  #define INDICATOR_REPORT_BUTTON2_INDICATION_V2                                           0x44
5238      =3  #define INDICATOR_REPORT_BUTTON3_INDICATION_V2                                           0x45
5239      =3  #define INDICATOR_REPORT_BUTTON4_INDICATION_V2                                           0x46
5240      =3  #define INDICATOR_REPORT_BUTTON5_INDICATION_V2                                           0x47
5241      =3  #define INDICATOR_REPORT_BUTTON6_INDICATION_V2                                           0x48
5242      =3  #define INDICATOR_REPORT_BUTTON7_INDICATION_V2                                           0x49
5243      =3  #define INDICATOR_REPORT_BUTTON8_INDICATION_V2                                           0x4A
5244      =3  #define INDICATOR_REPORT_BUTTON9_INDICATION_V2                                           0x4B
5245      =3  #define INDICATOR_REPORT_BUTTON10_INDICATION_V2                                          0x4C
5246      =3  #define INDICATOR_REPORT_BUTTON11_INDICATION_V2                                          0x4D
5247      =3  #define INDICATOR_REPORT_BUTTON12_INDICATION_V2                                          0x4E
5248      =3  #define INDICATOR_REPORT_BUZZER_V2                                                       0xF0
5249      =3  #define INDICATOR_REPORT_MULTILEVEL_V2                                                   0x01
5250      =3  #define INDICATOR_REPORT_BINARY_V2                                                       0x02
5251      =3  #define INDICATOR_REPORT_ON_OFF_PERIOD_V2                                                0x03
5252      =3  #define INDICATOR_REPORT_ON_OFF_CYCLES_V2                                                0x04
5253      =3  #define INDICATOR_REPORT_LOW_POWER_V2                                                    0x10
5254      =3  /* Values used for Indicator Set command */
5255      =3  #define INDICATOR_SET_PROPERTIES1_INDICATOR_OBJECT_COUNT_MASK_V2                         0x1F
5256      =3  #define INDICATOR_SET_PROPERTIES1_RESERVED_MASK_V2                                       0xE0
5257      =3  #define INDICATOR_SET_PROPERTIES1_RESERVED_SHIFT_V2                                      0x05
5258      =3  #define INDICATOR_SET_NA_V2                                                              0x00
5259      =3  #define INDICATOR_SET_ARMED_V2                                                           0x01
5260      =3  #define INDICATOR_SET_NOT_ARMED_V2                                                       0x02
5261      =3  #define INDICATOR_SET_READY_V2                                                           0x03
5262      =3  #define INDICATOR_SET_FAULT_V2                                                           0x04
5263      =3  #define INDICATOR_SET_BUSY_V2                                                            0x05
5264      =3  #define INDICATOR_SET_ENTER_ID_V2                                                        0x06
5265      =3  #define INDICATOR_SET_ENTER_PIN_V2                                                       0x07
5266      =3  #define INDICATOR_SET_OK_V2                                                              0x08
5267      =3  #define INDICATOR_SET_NOT_OK_V2                                                          0x09
5268      =3  #define INDICATOR_SET_ZONE1_ARMED_V2                                                     0x20
5269      =3  #define INDICATOR_SET_ZONE2_ARMED_V2                                                     0x21
5270      =3  #define INDICATOR_SET_ZONE3_ARMED_V2                                                     0x22
5271      =3  #define INDICATOR_SET_ZONE4_ARMED_V2                                                     0x23
5272      =3  #define INDICATOR_SET_ZONE5_ARMED_V2                                                     0x24
5273      =3  #define INDICATOR_SET_ZONE6_ARMED_V2                                                     0x25
5274      =3  #define INDICATOR_SET_LCD_BACKLIGHT_V2                                                   0x30
5275      =3  #define INDICATOR_SET_BUTTON_BACKLIGHT_LETTERS_V2                                        0x40
5276      =3  #define INDICATOR_SET_BUTTON_BACKLIGHT_DIGITS_V2                                         0x41
5277      =3  #define INDICATOR_SET_BUTTON_BACKLIGHT_COMMAND_V2                                        0x42
5278      =3  #define INDICATOR_SET_BUTTON1_INDICATION_V2                                              0x43
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 101 

5279      =3  #define INDICATOR_SET_BUTTON2_INDICATION_V2                                              0x44
5280      =3  #define INDICATOR_SET_BUTTON3_INDICATION_V2                                              0x45
5281      =3  #define INDICATOR_SET_BUTTON4_INDICATION_V2                                              0x46
5282      =3  #define INDICATOR_SET_BUTTON5_INDICATION_V2                                              0x47
5283      =3  #define INDICATOR_SET_BUTTON6_INDICATION_V2                                              0x48
5284      =3  #define INDICATOR_SET_BUTTON7_INDICATION_V2                                              0x49
5285      =3  #define INDICATOR_SET_BUTTON8_INDICATION_V2                                              0x4A
5286      =3  #define INDICATOR_SET_BUTTON9_INDICATION_V2                                              0x4B
5287      =3  #define INDICATOR_SET_BUTTON10_INDICATION_V2                                             0x4C
5288      =3  #define INDICATOR_SET_BUTTON11_INDICATION_V2                                             0x4D
5289      =3  #define INDICATOR_SET_BUTTON12_INDICATION_V2                                             0x4E
5290      =3  #define INDICATOR_SET_BUZZER_V2                                                          0xF0
5291      =3  #define INDICATOR_SET_MULTILEVEL_V2                                                      0x01
5292      =3  #define INDICATOR_SET_BINARY_V2                                                          0x02
5293      =3  #define INDICATOR_SET_ON_OFF_PERIOD_V2                                                   0x03
5294      =3  #define INDICATOR_SET_ON_OFF_CYCLES_V2                                                   0x04
5295      =3  #define INDICATOR_SET_LOW_POWER_V2                                                       0x10
5296      =3  /* Values used for Indicator Supported Get command */
5297      =3  #define INDICATOR_SUPPORTED_GET_NA_V2                                                    0x00
5298      =3  #define INDICATOR_SUPPORTED_GET_ARMED_V2                                                 0x01
5299      =3  #define INDICATOR_SUPPORTED_GET_NOT_ARMED_V2                                             0x02
5300      =3  #define INDICATOR_SUPPORTED_GET_READY_V2                                                 0x03
5301      =3  #define INDICATOR_SUPPORTED_GET_FAULT_V2                                                 0x04
5302      =3  #define INDICATOR_SUPPORTED_GET_BUSY_V2                                                  0x05
5303      =3  #define INDICATOR_SUPPORTED_GET_ENTER_ID_V2                                              0x06
5304      =3  #define INDICATOR_SUPPORTED_GET_ENTER_PIN_V2                                             0x07
5305      =3  #define INDICATOR_SUPPORTED_GET_OK_V2                                                    0x08
5306      =3  #define INDICATOR_SUPPORTED_GET_NOT_OK_V2                                                0x09
5307      =3  #define INDICATOR_SUPPORTED_GET_ZONE1_ARMED_V2                                           0x20
5308      =3  #define INDICATOR_SUPPORTED_GET_ZONE2_ARMED_V2                                           0x21
5309      =3  #define INDICATOR_SUPPORTED_GET_ZONE3_ARMED_V2                                           0x22
5310      =3  #define INDICATOR_SUPPORTED_GET_ZONE4_ARMED_V2                                           0x23
5311      =3  #define INDICATOR_SUPPORTED_GET_ZONE5_ARMED_V2                                           0x24
5312      =3  #define INDICATOR_SUPPORTED_GET_ZONE6_ARMED_V2                                           0x25
5313      =3  #define INDICATOR_SUPPORTED_GET_LCD_BACKLIGHT_V2                                         0x30
5314      =3  #define INDICATOR_SUPPORTED_GET_BUTTON_BACKLIGHT_LETTERS_V2                              0x40
5315      =3  #define INDICATOR_SUPPORTED_GET_BUTTON_BACKLIGHT_DIGITS_V2                               0x41
5316      =3  #define INDICATOR_SUPPORTED_GET_BUTTON_BACKLIGHT_COMMAND_V2                              0x42
5317      =3  #define INDICATOR_SUPPORTED_GET_BUTTON1_INDICATION_V2                                    0x43
5318      =3  #define INDICATOR_SUPPORTED_GET_BUTTON2_INDICATION_V2                                    0x44
5319      =3  #define INDICATOR_SUPPORTED_GET_BUTTON3_INDICATION_V2                                    0x45
5320      =3  #define INDICATOR_SUPPORTED_GET_BUTTON4_INDICATION_V2                                    0x46
5321      =3  #define INDICATOR_SUPPORTED_GET_BUTTON5_INDICATION_V2                                    0x47
5322      =3  #define INDICATOR_SUPPORTED_GET_BUTTON6_INDICATION_V2                                    0x48
5323      =3  #define INDICATOR_SUPPORTED_GET_BUTTON7_INDICATION_V2                                    0x49
5324      =3  #define INDICATOR_SUPPORTED_GET_BUTTON8_INDICATION_V2                                    0x4A
5325      =3  #define INDICATOR_SUPPORTED_GET_BUTTON9_INDICATION_V2                                    0x4B
5326      =3  #define INDICATOR_SUPPORTED_GET_BUTTON10_INDICATION_V2                                   0x4C
5327      =3  #define INDICATOR_SUPPORTED_GET_BUTTON11_INDICATION_V2                                   0x4D
5328      =3  #define INDICATOR_SUPPORTED_GET_BUTTON12_INDICATION_V2                                   0x4E
5329      =3  #define INDICATOR_SUPPORTED_GET_BUZZER_V2                                                0xF0
5330      =3  /* Values used for Indicator Supported Report command */
5331      =3  #define INDICATOR_SUPPORTED_REPORT_NA_V2                                                 0x00
5332      =3  #define INDICATOR_SUPPORTED_REPORT_ARMED_V2                                              0x01
5333      =3  #define INDICATOR_SUPPORTED_REPORT_NOT_ARMED_V2                                          0x02
5334      =3  #define INDICATOR_SUPPORTED_REPORT_READY_V2                                              0x03
5335      =3  #define INDICATOR_SUPPORTED_REPORT_FAULT_V2                                              0x04
5336      =3  #define INDICATOR_SUPPORTED_REPORT_BUSY_V2                                               0x05
5337      =3  #define INDICATOR_SUPPORTED_REPORT_ENTER_ID_V2                                           0x06
5338      =3  #define INDICATOR_SUPPORTED_REPORT_ENTER_PIN_V2                                          0x07
5339      =3  #define INDICATOR_SUPPORTED_REPORT_OK_V2                                                 0x08
5340      =3  #define INDICATOR_SUPPORTED_REPORT_NOT_OK_V2                                             0x09
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 102 

5341      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE1_ARMED_V2                                        0x20
5342      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE2_ARMED_V2                                        0x21
5343      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE3_ARMED_V2                                        0x22
5344      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE4_ARMED_V2                                        0x23
5345      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE5_ARMED_V2                                        0x24
5346      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE6_ARMED_V2                                        0x25
5347      =3  #define INDICATOR_SUPPORTED_REPORT_LCD_BACKLIGHT_V2                                      0x30
5348      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON_BACKLIGHT_LETTERS_V2                           0x40
5349      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON_BACKLIGHT_DIGITS_V2                            0x41
5350      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON_BACKLIGHT_COMMAND_V2                           0x42
5351      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON1_INDICATION_V2                                 0x43
5352      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON2_INDICATION_V2                                 0x44
5353      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON3_INDICATION_V2                                 0x45
5354      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON4_INDICATION_V2                                 0x46
5355      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON5_INDICATION_V2                                 0x47
5356      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON6_INDICATION_V2                                 0x48
5357      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON7_INDICATION_V2                                 0x49
5358      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON8_INDICATION_V2                                 0x4A
5359      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON9_INDICATION_V2                                 0x4B
5360      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON10_INDICATION_V2                                0x4C
5361      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON11_INDICATION_V2                                0x4D
5362      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON12_INDICATION_V2                                0x4E
5363      =3  #define INDICATOR_SUPPORTED_REPORT_BUZZER_V2                                             0xF0
5364      =3  #define INDICATOR_SUPPORTED_REPORT_NA_V2                                                 0x00
5365      =3  #define INDICATOR_SUPPORTED_REPORT_ARMED_V2                                              0x01
5366      =3  #define INDICATOR_SUPPORTED_REPORT_NOT_ARMED_V2                                          0x02
5367      =3  #define INDICATOR_SUPPORTED_REPORT_READY_V2                                              0x03
5368      =3  #define INDICATOR_SUPPORTED_REPORT_FAULT_V2                                              0x04
5369      =3  #define INDICATOR_SUPPORTED_REPORT_BUSY_V2                                               0x05
5370      =3  #define INDICATOR_SUPPORTED_REPORT_ENTER_ID_V2                                           0x06
5371      =3  #define INDICATOR_SUPPORTED_REPORT_ENTER_PIN_V2                                          0x07
5372      =3  #define INDICATOR_SUPPORTED_REPORT_OK_V2                                                 0x08
5373      =3  #define INDICATOR_SUPPORTED_REPORT_NOT_OK_V2                                             0x09
5374      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE1_ARMED_V2                                        0x20
5375      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE2_ARMED_V2                                        0x21
5376      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE3_ARMED_V2                                        0x22
5377      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE4_ARMED_V2                                        0x23
5378      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE5_ARMED_V2                                        0x24
5379      =3  #define INDICATOR_SUPPORTED_REPORT_ZONE6_ARMED_V2                                        0x25
5380      =3  #define INDICATOR_SUPPORTED_REPORT_LCD_BACKLIGHT_V2                                      0x30
5381      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON_BACKLIGHT_LETTERS_V2                           0x40
5382      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON_BACKLIGHT_DIGITS_V2                            0x41
5383      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON_BACKLIGHT_COMMAND_V2                           0x42
5384      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON1_INDICATION_V2                                 0x43
5385      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON2_INDICATION_V2                                 0x44
5386      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON3_INDICATION_V2                                 0x45
5387      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON4_INDICATION_V2                                 0x46
5388      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON5_INDICATION_V2                                 0x47
5389      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON6_INDICATION_V2                                 0x48
5390      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON7_INDICATION_V2                                 0x49
5391      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON8_INDICATION_V2                                 0x4A
5392      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON9_INDICATION_V2                                 0x4B
5393      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON10_INDICATION_V2                                0x4C
5394      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON11_INDICATION_V2                                0x4D
5395      =3  #define INDICATOR_SUPPORTED_REPORT_BUTTON12_INDICATION_V2                                0x4E
5396      =3  #define INDICATOR_SUPPORTED_REPORT_BUZZER_V2                                             0xF0
5397      =3  #define INDICATOR_SUPPORTED_REPORT_PROPERTIES1_PROPERTY_SUPPORTED_BIT_MASK_LENGTH_MASK_V2 0x1F
5398      =3  #define INDICATOR_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V2                          0xE0
5399      =3  #define INDICATOR_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                         0x05
5400      =3  
5401      =3  /* Ip Configuration command class commands */
5402      =3  #define IP_CONFIGURATION_VERSION                                                         0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 103 

5403      =3  #define IP_CONFIGURATION_GET                                                             0x02
5404      =3  #define IP_CONFIGURATION_RELEASE                                                         0x04
5405      =3  #define IP_CONFIGURATION_RENEW                                                           0x05
5406      =3  #define IP_CONFIGURATION_REPORT                                                          0x03
5407      =3  #define IP_CONFIGURATION_SET                                                             0x01
5408      =3  /* Values used for Ip Configuration Report command */
5409      =3  #define IP_CONFIGURATION_REPORT_PROPERTIES1_AUTO_DNS_BIT_MASK                            0x01
5410      =3  #define IP_CONFIGURATION_REPORT_PROPERTIES1_AUTO_IP_BIT_MASK                             0x02
5411      =3  #define IP_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_MASK                                0xFC
5412      =3  #define IP_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_SHIFT                               0x02
5413      =3  /* Values used for Ip Configuration Set command */
5414      =3  #define IP_CONFIGURATION_SET_PROPERTIES1_AUTO_DNS_BIT_MASK                               0x01
5415      =3  #define IP_CONFIGURATION_SET_PROPERTIES1_AUTO_IP_BIT_MASK                                0x02
5416      =3  #define IP_CONFIGURATION_SET_PROPERTIES1_RESERVED_MASK                                   0xFC
5417      =3  #define IP_CONFIGURATION_SET_PROPERTIES1_RESERVED_SHIFT                                  0x02
5418      =3  
5419      =3  /* Language command class commands */
5420      =3  #define LANGUAGE_VERSION                                                                 0x01
5421      =3  #define LANGUAGE_GET                                                                     0x02
5422      =3  #define LANGUAGE_REPORT                                                                  0x03
5423      =3  #define LANGUAGE_SET                                                                     0x01
5424      =3  
5425      =3  /* Lock command class commands */
5426      =3  #define LOCK_VERSION                                                                     0x01
5427      =3  #define LOCK_GET                                                                         0x02
5428      =3  #define LOCK_REPORT                                                                      0x03
5429      =3  #define LOCK_SET                                                                         0x01
5430      =3  
5431      =3  /* Manufacturer Proprietary command class commands */
5432      =3  #define MANUFACTURER_PROPRIETARY_VERSION                                                 0x01
5433      =3  
5434      =3  /* Manufacturer Specific command class commands */
5435      =3  #define MANUFACTURER_SPECIFIC_VERSION                                                    0x01
5436      =3  #define MANUFACTURER_SPECIFIC_GET                                                        0x04
5437      =3  #define MANUFACTURER_SPECIFIC_REPORT                                                     0x05
5438      =3  
5439      =3  /* Manufacturer Specific command class commands */
5440      =3  #define MANUFACTURER_SPECIFIC_VERSION_V2                                                 0x02
5441      =3  #define MANUFACTURER_SPECIFIC_GET_V2                                                     0x04
5442      =3  #define MANUFACTURER_SPECIFIC_REPORT_V2                                                  0x05
5443      =3  #define DEVICE_SPECIFIC_GET_V2                                                           0x06
5444      =3  #define DEVICE_SPECIFIC_REPORT_V2                                                        0x07
5445      =3  /* Values used for Device Specific Get command */
5446      =3  #define DEVICE_SPECIFIC_GET_PROPERTIES1_DEVICE_ID_TYPE_MASK_V2                           0x07
5447      =3  #define DEVICE_SPECIFIC_GET_DEVICE_ID_TYPE_RESERVED_V2                                   0x00
5448      =3  #define DEVICE_SPECIFIC_GET_DEVICE_ID_TYPE_SERIAL_NUMBER_V2                              0x01
5449      =3  #define DEVICE_SPECIFIC_GET_PROPERTIES1_RESERVED_MASK_V2                                 0xF8
5450      =3  #define DEVICE_SPECIFIC_GET_PROPERTIES1_RESERVED_SHIFT_V2                                0x03
5451      =3  /* Values used for Device Specific Report command */
5452      =3  #define DEVICE_SPECIFIC_REPORT_PROPERTIES1_DEVICE_ID_TYPE_MASK_V2                        0x07
5453      =3  #define DEVICE_SPECIFIC_REPORT_DEVICE_ID_TYPE_RESERVED_V2                                0x00
5454      =3  #define DEVICE_SPECIFIC_REPORT_DEVICE_ID_TYPE_SERIAL_NUMBER_V2                           0x01
5455      =3  #define DEVICE_SPECIFIC_REPORT_PROPERTIES1_RESERVED_MASK_V2                              0xF8
5456      =3  #define DEVICE_SPECIFIC_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                             0x03
5457      =3  #define DEVICE_SPECIFIC_REPORT_PROPERTIES2_DEVICE_ID_DATA_LENGTH_INDICATOR_MASK_V2       0x1F
5458      =3  #define DEVICE_SPECIFIC_REPORT_PROPERTIES2_DEVICE_ID_DATA_FORMAT_MASK_V2                 0xE0
5459      =3  #define DEVICE_SPECIFIC_REPORT_PROPERTIES2_DEVICE_ID_DATA_FORMAT_SHIFT_V2                0x05
5460      =3  #define DEVICE_SPECIFIC_REPORT_DEVICE_ID_DATA_FORMAT_RESERVED_V2                         0x00
5461      =3  #define DEVICE_SPECIFIC_REPORT_DEVICE_ID_DATA_FORMAT_BINARY_V2                           0x01
5462      =3  
5463      =3  /* Mark command class commands */
5464      =3  #define MARK_VERSION                                                                     0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 104 

5465      =3  
5466      =3  /* Meter Pulse command class commands */
5467      =3  #define METER_PULSE_VERSION                                                              0x01
5468      =3  #define METER_PULSE_GET                                                                  0x04
5469      =3  #define METER_PULSE_REPORT                                                               0x05
5470      =3  
5471      =3  /* Meter Tbl Config command class commands */
5472      =3  #define METER_TBL_CONFIG_VERSION                                                         0x01
5473      =3  #define METER_TBL_TABLE_POINT_ADM_NO_SET                                                 0x01
5474      =3  /* Values used for Meter Tbl Table Point Adm No Set command */
5475      =3  #define METER_TBL_TABLE_POINT_ADM_NO_SET_PROPERTIES1_NUMBER_OF_CHARACTERS_MASK           0x1F
5476      =3  #define METER_TBL_TABLE_POINT_ADM_NO_SET_PROPERTIES1_RESERVED_MASK                       0xE0
5477      =3  #define METER_TBL_TABLE_POINT_ADM_NO_SET_PROPERTIES1_RESERVED_SHIFT                      0x05
5478      =3  
5479      =3  /* Meter Tbl Monitor command class commands */
5480      =3  #define METER_TBL_MONITOR_VERSION                                                        0x01
5481      =3  #define METER_TBL_STATUS_REPORT                                                          0x0B
5482      =3  #define METER_TBL_STATUS_DATE_GET                                                        0x0A
5483      =3  #define METER_TBL_STATUS_DEPTH_GET                                                       0x09
5484      =3  #define METER_TBL_STATUS_SUPPORTED_GET                                                   0x07
5485      =3  #define METER_TBL_STATUS_SUPPORTED_REPORT                                                0x08
5486      =3  #define METER_TBL_CURRENT_DATA_GET                                                       0x0C
5487      =3  #define METER_TBL_CURRENT_DATA_REPORT                                                    0x0D
5488      =3  #define METER_TBL_HISTORICAL_DATA_GET                                                    0x0E
5489      =3  #define METER_TBL_HISTORICAL_DATA_REPORT                                                 0x0F
5490      =3  #define METER_TBL_REPORT                                                                 0x06
5491      =3  #define METER_TBL_TABLE_CAPABILITY_GET                                                   0x05
5492      =3  #define METER_TBL_TABLE_ID_GET                                                           0x03
5493      =3  #define METER_TBL_TABLE_ID_REPORT                                                        0x04
5494      =3  #define METER_TBL_TABLE_POINT_ADM_NO_GET                                                 0x01
5495      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT                                              0x02
5496      =3  /* Values used for Meter Tbl Current Data Report command */
5497      =3  #define METER_TBL_CURRENT_DATA_REPORT_PROPERTIES1_RATE_TYPE_MASK                         0x03
5498      =3  #define METER_TBL_CURRENT_DATA_REPORT_PROPERTIES1_RESERVED_MASK                          0xFC
5499      =3  #define METER_TBL_CURRENT_DATA_REPORT_PROPERTIES1_RESERVED_SHIFT                         0x02
5500      =3  /* Values used for Meter Tbl Historical Data Report command */
5501      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_PROPERTIES1_RATE_TYPE_MASK                      0x03
5502      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_PROPERTIES1_RESERVED_MASK                       0xFC
5503      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_PROPERTIES1_RESERVED_SHIFT                      0x02
5504      =3  /* Values used for Meter Tbl Report command */
5505      =3  #define METER_TBL_REPORT_PROPERTIES1_METER_TYPE_MASK                                     0x3F
5506      =3  #define METER_TBL_REPORT_PROPERTIES1_RATE_TYPE_MASK                                      0xC0
5507      =3  #define METER_TBL_REPORT_PROPERTIES1_RATE_TYPE_SHIFT                                     0x06
5508      =3  #define METER_TBL_REPORT_PROPERTIES2_PAY_METER_MASK                                      0x0F
5509      =3  #define METER_TBL_REPORT_PAY_METER_RESERVED                                              0x00
5510      =3  #define METER_TBL_REPORT_PAY_METER_CREDITMETER                                           0x01
5511      =3  #define METER_TBL_REPORT_PAY_METER_PREPAYMENT_METER                                      0x02
5512      =3  #define METER_TBL_REPORT_PAY_METER_PREPAYMENT_METER_DEBT                                 0x03
5513      =3  #define METER_TBL_REPORT_PROPERTIES2_RESERVED_MASK                                       0xF0
5514      =3  #define METER_TBL_REPORT_PROPERTIES2_RESERVED_SHIFT                                      0x04
5515      =3  /* Values used for Meter Tbl Table Id Report command */
5516      =3  #define METER_TBL_TABLE_ID_REPORT_PROPERTIES1_NUMBER_OF_CHARACTERS_MASK                  0x1F
5517      =3  #define METER_TBL_TABLE_ID_REPORT_PROPERTIES1_RESERVED_MASK                              0xE0
5518      =3  #define METER_TBL_TABLE_ID_REPORT_PROPERTIES1_RESERVED_SHIFT                             0x05
5519      =3  /* Values used for Meter Tbl Table Point Adm No Report command */
5520      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT_PROPERTIES1_NUMBER_OF_CHARACTERS_MASK        0x1F
5521      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT_PROPERTIES1_RESERVED_MASK                    0xE0
5522      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT_PROPERTIES1_RESERVED_SHIFT                   0x05
5523      =3  
5524      =3  /* Meter Tbl Monitor command class commands */
5525      =3  #define METER_TBL_MONITOR_VERSION_V2                                                     0x02
5526      =3  #define METER_TBL_STATUS_REPORT_V2                                                       0x0B
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 105 

5527      =3  #define METER_TBL_STATUS_DATE_GET_V2                                                     0x0A
5528      =3  #define METER_TBL_STATUS_DEPTH_GET_V2                                                    0x09
5529      =3  #define METER_TBL_STATUS_SUPPORTED_GET_V2                                                0x07
5530      =3  #define METER_TBL_STATUS_SUPPORTED_REPORT_V2                                             0x08
5531      =3  #define METER_TBL_CURRENT_DATA_GET_V2                                                    0x0C
5532      =3  #define METER_TBL_CURRENT_DATA_REPORT_V2                                                 0x0D
5533      =3  #define METER_TBL_HISTORICAL_DATA_GET_V2                                                 0x0E
5534      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_V2                                              0x0F
5535      =3  #define METER_TBL_REPORT_V2                                                              0x06
5536      =3  #define METER_TBL_TABLE_CAPABILITY_GET_V2                                                0x05
5537      =3  #define METER_TBL_TABLE_ID_GET_V2                                                        0x03
5538      =3  #define METER_TBL_TABLE_ID_REPORT_V2                                                     0x04
5539      =3  #define METER_TBL_TABLE_POINT_ADM_NO_GET_V2                                              0x01
5540      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT_V2                                           0x02
5541      =3  /* Values used for Meter Tbl Current Data Report command */
5542      =3  #define METER_TBL_CURRENT_DATA_REPORT_PROPERTIES1_RATE_TYPE_MASK_V2                      0x03
5543      =3  #define METER_TBL_CURRENT_DATA_REPORT_PROPERTIES1_RESERVED_MASK_V2                       0x7C
5544      =3  #define METER_TBL_CURRENT_DATA_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                      0x02
5545      =3  #define METER_TBL_CURRENT_DATA_REPORT_PROPERTIES1_OPERATING_STATUS_INDICATION_BIT_MASK_V2 0x80
5546      =3  /* Values used for Meter Tbl Historical Data Report command */
5547      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_PROPERTIES1_RATE_TYPE_MASK_V2                   0x03
5548      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_PROPERTIES1_RESERVED_MASK_V2                    0x7C
5549      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                   0x02
5550      =3  #define METER_TBL_HISTORICAL_DATA_REPORT_PROPERTIES1_OPERATING_STATUS_INDICATION_BIT_MASK_V2 0x80
5551      =3  /* Values used for Meter Tbl Report command */
5552      =3  #define METER_TBL_REPORT_PROPERTIES1_METER_TYPE_MASK_V2                                  0x3F
5553      =3  #define METER_TBL_REPORT_PROPERTIES1_RATE_TYPE_MASK_V2                                   0xC0
5554      =3  #define METER_TBL_REPORT_PROPERTIES1_RATE_TYPE_SHIFT_V2                                  0x06
5555      =3  #define METER_TBL_REPORT_PROPERTIES2_PAY_METER_MASK_V2                                   0x0F
5556      =3  #define METER_TBL_REPORT_PAY_METER_RESERVED_V2                                           0x00
5557      =3  #define METER_TBL_REPORT_PAY_METER_CREDITMETER_V2                                        0x01
5558      =3  #define METER_TBL_REPORT_PAY_METER_PREPAYMENT_METER_V2                                   0x02
5559      =3  #define METER_TBL_REPORT_PAY_METER_PREPAYMENT_METER_DEBT_V2                              0x03
5560      =3  #define METER_TBL_REPORT_PROPERTIES2_RESERVED_MASK_V2                                    0xF0
5561      =3  #define METER_TBL_REPORT_PROPERTIES2_RESERVED_SHIFT_V2                                   0x04
5562      =3  /* Values used for Meter Tbl Table Id Report command */
5563      =3  #define METER_TBL_TABLE_ID_REPORT_PROPERTIES1_NUMBER_OF_CHARACTERS_MASK_V2               0x1F
5564      =3  #define METER_TBL_TABLE_ID_REPORT_PROPERTIES1_RESERVED_MASK_V2                           0xE0
5565      =3  #define METER_TBL_TABLE_ID_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                          0x05
5566      =3  /* Values used for Meter Tbl Table Point Adm No Report command */
5567      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT_PROPERTIES1_NUMBER_OF_CHARACTERS_MASK_V2     0x1F
5568      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT_PROPERTIES1_RESERVED_MASK_V2                 0xE0
5569      =3  #define METER_TBL_TABLE_POINT_ADM_NO_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                0x05
5570      =3  
5571      =3  /* Meter Tbl Push command class commands */
5572      =3  #define METER_TBL_PUSH_VERSION                                                           0x01
5573      =3  #define METER_TBL_PUSH_CONFIGURATION_GET                                                 0x02
5574      =3  #define METER_TBL_PUSH_CONFIGURATION_REPORT                                              0x03
5575      =3  #define METER_TBL_PUSH_CONFIGURATION_SET                                                 0x01
5576      =3  /* Values used for Meter Tbl Push Configuration Report command */
5577      =3  #define METER_TBL_PUSH_CONFIGURATION_REPORT_PROPERTIES1_OPERATING_STATUS_PUSH_MODE_MASK  0x0F
5578      =3  #define METER_TBL_PUSH_CONFIGURATION_REPORT_PROPERTIES1_PS_BIT_MASK                      0x10
5579      =3  #define METER_TBL_PUSH_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_MASK                    0xE0
5580      =3  #define METER_TBL_PUSH_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_SHIFT                   0x05
5581      =3  /* Values used for Meter Tbl Push Configuration Set command */
5582      =3  #define METER_TBL_PUSH_CONFIGURATION_SET_PROPERTIES1_OPERATING_STATUS_PUSH_MODE_MASK     0x0F
5583      =3  #define METER_TBL_PUSH_CONFIGURATION_SET_PROPERTIES1_PS_BIT_MASK                         0x10
5584      =3  #define METER_TBL_PUSH_CONFIGURATION_SET_PROPERTIES1_RESERVED_MASK                       0xE0
5585      =3  #define METER_TBL_PUSH_CONFIGURATION_SET_PROPERTIES1_RESERVED_SHIFT                      0x05
5586      =3  
5587      =3  /* Meter command class commands */
5588      =3  #define METER_VERSION                                                                    0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 106 

5589      =3  #define METER_GET                                                                        0x01
5590      =3  #define METER_REPORT                                                                     0x02
5591      =3  /* Values used for Meter Report command */
5592      =3  #define METER_REPORT_ELECTRIC_METER                                                      0x01
5593      =3  #define METER_REPORT_GAS_METER                                                           0x02
5594      =3  #define METER_REPORT_WATER_METER                                                         0x03
5595      =3  #define METER_REPORT_PROPERTIES1_SIZE_MASK                                               0x07
5596      =3  #define METER_REPORT_PROPERTIES1_SCALE_MASK                                              0x18
5597      =3  #define METER_REPORT_PROPERTIES1_SCALE_SHIFT                                             0x03
5598      =3  #define METER_REPORT_PROPERTIES1_PRECISION_MASK                                          0xE0
5599      =3  #define METER_REPORT_PROPERTIES1_PRECISION_SHIFT                                         0x05
5600      =3  
5601      =3  /* Meter command class commands */
5602      =3  #define METER_VERSION_V2                                                                 0x02
5603      =3  #define METER_GET_V2                                                                     0x01
5604      =3  #define METER_REPORT_V2                                                                  0x02
5605      =3  #define METER_RESET_V2                                                                   0x05
5606      =3  #define METER_SUPPORTED_GET_V2                                                           0x03
5607      =3  #define METER_SUPPORTED_REPORT_V2                                                        0x04
5608      =3  /* Values used for Meter Get command */
5609      =3  #define METER_GET_PROPERTIES1_RESERVED_MASK_V2                                           0x07
5610      =3  #define METER_GET_PROPERTIES1_SCALE_MASK_V2                                              0x18
5611      =3  #define METER_GET_PROPERTIES1_SCALE_SHIFT_V2                                             0x03
5612      =3  #define METER_GET_PROPERTIES1_RESERVED2_MASK_V2                                          0xE0
5613      =3  #define METER_GET_PROPERTIES1_RESERVED2_SHIFT_V2                                         0x05
5614      =3  /* Values used for Meter Report command */
5615      =3  #define METER_REPORT_PROPERTIES1_METER_TYPE_MASK_V2                                      0x1F
5616      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_MASK_V2                                       0x60
5617      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_SHIFT_V2                                      0x05
5618      =3  #define METER_REPORT_PROPERTIES1_RESERVED_BIT_MASK_V2                                    0x80
5619      =3  #define METER_REPORT_PROPERTIES2_SIZE_MASK_V2                                            0x07
5620      =3  #define METER_REPORT_PROPERTIES2_SCALE_MASK_V2                                           0x18
5621      =3  #define METER_REPORT_PROPERTIES2_SCALE_SHIFT_V2                                          0x03
5622      =3  #define METER_REPORT_PROPERTIES2_PRECISION_MASK_V2                                       0xE0
5623      =3  #define METER_REPORT_PROPERTIES2_PRECISION_SHIFT_V2                                      0x05
5624      =3  /* Values used for Meter Supported Report command */
5625      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_TYPE_MASK_V2                            0x1F
5626      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_MASK_V2                             0x60
5627      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_SHIFT_V2                            0x05
5628      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_RESET_BIT_MASK_V2                       0x80
5629      =3  #define METER_SUPPORTED_REPORT_PROPERTIES2_SCALE_SUPPORTED_MASK_V2                       0x0F
5630      =3  #define METER_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_MASK_V2                             0xF0
5631      =3  #define METER_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_SHIFT_V2                            0x04
5632      =3  
5633      =3  /* Meter command class commands */
5634      =3  #define METER_VERSION_V3                                                                 0x03
5635      =3  #define METER_GET_V3                                                                     0x01
5636      =3  #define METER_REPORT_V3                                                                  0x02
5637      =3  #define METER_RESET_V3                                                                   0x05
5638      =3  #define METER_SUPPORTED_GET_V3                                                           0x03
5639      =3  #define METER_SUPPORTED_REPORT_V3                                                        0x04
5640      =3  /* Values used for Meter Get command */
5641      =3  #define METER_GET_PROPERTIES1_RESERVED_MASK_V3                                           0x07
5642      =3  #define METER_GET_PROPERTIES1_SCALE_MASK_V3                                              0x38
5643      =3  #define METER_GET_PROPERTIES1_SCALE_SHIFT_V3                                             0x03
5644      =3  #define METER_GET_PROPERTIES1_RESERVED2_MASK_V3                                          0xC0
5645      =3  #define METER_GET_PROPERTIES1_RESERVED2_SHIFT_V3                                         0x06
5646      =3  /* Values used for Meter Report command */
5647      =3  #define METER_REPORT_PROPERTIES1_METER_TYPE_MASK_V3                                      0x1F
5648      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_MASK_V3                                       0x60
5649      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_SHIFT_V3                                      0x05
5650      =3  #define METER_REPORT_PROPERTIES1_SCALE_BIT_2_BIT_MASK_V3                                 0x80
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 107 

5651      =3  #define METER_REPORT_PROPERTIES2_SIZE_MASK_V3                                            0x07
5652      =3  #define METER_REPORT_PROPERTIES2_SCALE_BITS_10_MASK_V3                                   0x18
5653      =3  #define METER_REPORT_PROPERTIES2_SCALE_BITS_10_SHIFT_V3                                  0x03
5654      =3  #define METER_REPORT_PROPERTIES2_PRECISION_MASK_V3                                       0xE0
5655      =3  #define METER_REPORT_PROPERTIES2_PRECISION_SHIFT_V3                                      0x05
5656      =3  /* Values used for Meter Supported Report command */
5657      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_TYPE_MASK_V3                            0x1F
5658      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V3                              0x60
5659      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                             0x05
5660      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_RESET_BIT_MASK_V3                       0x80
5661      =3  
5662      =3  /* Meter command class commands */
5663      =3  #define METER_VERSION_V4                                                                 0x04
5664      =3  #define METER_GET_V4                                                                     0x01
5665      =3  #define METER_REPORT_V4                                                                  0x02
5666      =3  #define METER_RESET_V4                                                                   0x05
5667      =3  #define METER_SUPPORTED_GET_V4                                                           0x03
5668      =3  #define METER_SUPPORTED_REPORT_V4                                                        0x04
5669      =3  /* Values used for Meter Get command */
5670      =3  #define METER_GET_PROPERTIES1_RESERVED_MASK_V4                                           0x07
5671      =3  #define METER_GET_PROPERTIES1_SCALE_MASK_V4                                              0x38
5672      =3  #define METER_GET_PROPERTIES1_SCALE_SHIFT_V4                                             0x03
5673      =3  #define METER_GET_PROPERTIES1_RATE_TYPE_MASK_V4                                          0xC0
5674      =3  #define METER_GET_PROPERTIES1_RATE_TYPE_SHIFT_V4                                         0x06
5675      =3  #define METER_GET_RATE_TYPE_RESERVED_V4                                                  0x00
5676      =3  #define METER_GET_RATE_TYPE_IMPORT_V4                                                    0x01
5677      =3  #define METER_GET_RATE_TYPE_EXPORT_V4                                                    0x02
5678      =3  #define METER_GET_RATE_TYPE_NOT_TO_BE_USED_V4                                            0x03
5679      =3  /* Values used for Meter Report command */
5680      =3  #define METER_REPORT_PROPERTIES1_METER_TYPE_MASK_V4                                      0x1F
5681      =3  #define METER_REPORT_METER_TYPE_RESERVED_V4                                              0x00
5682      =3  #define METER_REPORT_METER_TYPE_ELECTRIC_METER_V4                                        0x01
5683      =3  #define METER_REPORT_METER_TYPE_GAS_METER_V4                                             0x02
5684      =3  #define METER_REPORT_METER_TYPE_WATER_METER_V4                                           0x03
5685      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_MASK_V4                                       0x60
5686      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_SHIFT_V4                                      0x05
5687      =3  #define METER_REPORT_RATE_TYPE_RESERVED_V4                                               0x00
5688      =3  #define METER_REPORT_RATE_TYPE_IMPORT_V4                                                 0x01
5689      =3  #define METER_REPORT_RATE_TYPE_EXPORT_V4                                                 0x02
5690      =3  #define METER_REPORT_RATE_TYPE_NOT_TO_BE_USED_V4                                         0x03
5691      =3  #define METER_REPORT_PROPERTIES1_SCALE_BIT_2_BIT_MASK_V4                                 0x80
5692      =3  #define METER_REPORT_PROPERTIES2_SIZE_MASK_V4                                            0x07
5693      =3  #define METER_REPORT_PROPERTIES2_SCALE_BITS_10_MASK_V4                                   0x18
5694      =3  #define METER_REPORT_PROPERTIES2_SCALE_BITS_10_SHIFT_V4                                  0x03
5695      =3  #define METER_REPORT_PROPERTIES2_PRECISION_MASK_V4                                       0xE0
5696      =3  #define METER_REPORT_PROPERTIES2_PRECISION_SHIFT_V4                                      0x05
5697      =3  /* Values used for Meter Supported Report command */
5698      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_TYPE_MASK_V4                            0x1F
5699      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_RESERVED_V4                                    0x00
5700      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_ELECTRIC_METER_V4                              0x01
5701      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_GAS_METER_V4                                   0x02
5702      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_WATER_METER_V4                                 0x03
5703      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RATE_TYPE_MASK_V4                             0x60
5704      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RATE_TYPE_SHIFT_V4                            0x05
5705      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_RESERVED_V4                                     0x00
5706      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_IMPORT_ONLY_V4                                  0x01
5707      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_EXPORT_ONLY_V4                                  0x02
5708      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_IMPORT_AND_EXPORT_V4                            0x03
5709      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_RESET_BIT_MASK_V4                       0x80
5710      =3  #define METER_SUPPORTED_REPORT_PROPERTIES2_SCALE_SUPPORTED_0_MASK_V4                     0x7F
5711      =3  #define METER_SUPPORTED_REPORT_PROPERTIES2_M_S_T_BIT_MASK_V4                             0x80
5712      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 108 

5713      =3  /* Meter command class commands */
5714      =3  #define METER_VERSION_V5                                                                 0x05
5715      =3  #define METER_GET_V5                                                                     0x01
5716      =3  #define METER_REPORT_V5                                                                  0x02
5717      =3  #define METER_RESET_V5                                                                   0x05
5718      =3  #define METER_SUPPORTED_GET_V5                                                           0x03
5719      =3  #define METER_SUPPORTED_REPORT_V5                                                        0x04
5720      =3  /* Values used for Meter Get command */
5721      =3  #define METER_GET_PROPERTIES1_RESERVED_MASK_V5                                           0x07
5722      =3  #define METER_GET_PROPERTIES1_SCALE_MASK_V5                                              0x38
5723      =3  #define METER_GET_PROPERTIES1_SCALE_SHIFT_V5                                             0x03
5724      =3  #define METER_GET_PROPERTIES1_RATE_TYPE_MASK_V5                                          0xC0
5725      =3  #define METER_GET_PROPERTIES1_RATE_TYPE_SHIFT_V5                                         0x06
5726      =3  #define METER_GET_RATE_TYPE_RESERVED_V5                                                  0x00
5727      =3  #define METER_GET_RATE_TYPE_IMPORT_V5                                                    0x01
5728      =3  #define METER_GET_RATE_TYPE_EXPORT_V5                                                    0x02
5729      =3  #define METER_GET_RATE_TYPE_NOT_TO_BE_USED_V5                                            0x03
5730      =3  /* Values used for Meter Report command */
5731      =3  #define METER_REPORT_PROPERTIES1_METER_TYPE_MASK_V5                                      0x1F
5732      =3  #define METER_REPORT_METER_TYPE_RESERVED_V5                                              0x00
5733      =3  #define METER_REPORT_METER_TYPE_ELECTRIC_METER_V5                                        0x01
5734      =3  #define METER_REPORT_METER_TYPE_GAS_METER_V5                                             0x02
5735      =3  #define METER_REPORT_METER_TYPE_WATER_METER_V5                                           0x03
5736      =3  #define METER_REPORT_METER_TYPE_HEATING_METER_V5                                         0x04
5737      =3  #define METER_REPORT_METER_TYPE_COOLING_METER_V5                                         0x05
5738      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_MASK_V5                                       0x60
5739      =3  #define METER_REPORT_PROPERTIES1_RATE_TYPE_SHIFT_V5                                      0x05
5740      =3  #define METER_REPORT_RATE_TYPE_RESERVED_V5                                               0x00
5741      =3  #define METER_REPORT_RATE_TYPE_IMPORT_V5                                                 0x01
5742      =3  #define METER_REPORT_RATE_TYPE_EXPORT_V5                                                 0x02
5743      =3  #define METER_REPORT_RATE_TYPE_NOT_TO_BE_USED_V5                                         0x03
5744      =3  #define METER_REPORT_PROPERTIES1_SCALE_BIT_2_BIT_MASK_V5                                 0x80
5745      =3  #define METER_REPORT_PROPERTIES2_SIZE_MASK_V5                                            0x07
5746      =3  #define METER_REPORT_PROPERTIES2_SCALE_BITS_10_MASK_V5                                   0x18
5747      =3  #define METER_REPORT_PROPERTIES2_SCALE_BITS_10_SHIFT_V5                                  0x03
5748      =3  #define METER_REPORT_PROPERTIES2_PRECISION_MASK_V5                                       0xE0
5749      =3  #define METER_REPORT_PROPERTIES2_PRECISION_SHIFT_V5                                      0x05
5750      =3  /* Values used for Meter Supported Report command */
5751      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_TYPE_MASK_V5                            0x1F
5752      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_RESERVED_V5                                    0x00
5753      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_ELECTRIC_METER_V5                              0x01
5754      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_GAS_METER_V5                                   0x02
5755      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_WATER_METER_V5                                 0x03
5756      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_HEATING_METER_V5                               0x04
5757      =3  #define METER_SUPPORTED_REPORT_METER_TYPE_COOLING_METER_V5                               0x05
5758      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RATE_TYPE_MASK_V5                             0x60
5759      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_RATE_TYPE_SHIFT_V5                            0x05
5760      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_RESERVED_V5                                     0x00
5761      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_IMPORT_ONLY_V5                                  0x01
5762      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_EXPORT_ONLY_V5                                  0x02
5763      =3  #define METER_SUPPORTED_REPORT_RATE_TYPE_IMPORT_AND_EXPORT_V5                            0x03
5764      =3  #define METER_SUPPORTED_REPORT_PROPERTIES1_METER_RESET_BIT_MASK_V5                       0x80
5765      =3  #define METER_SUPPORTED_REPORT_PROPERTIES2_SCALE_SUPPORTED_0_MASK_V5                     0x7F
5766      =3  #define METER_SUPPORTED_REPORT_PROPERTIES2_M_S_T_BIT_MASK_V5                             0x80
5767      =3  
5768      =3  /* Mtp Window Covering command class commands */
5769      =3  #define MTP_WINDOW_COVERING_VERSION                                                      0x01
5770      =3  #define MOVE_TO_POSITION_GET                                                             0x02
5771      =3  #define MOVE_TO_POSITION_REPORT                                                          0x03
5772      =3  #define MOVE_TO_POSITION_SET                                                             0x01
5773      =3  
5774      =3  /* Multi Channel Association command class commands */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 109 

5775      =3  #define MULTI_CHANNEL_ASSOCIATION_VERSION_V2                                             0x02
5776      =3  #define MULTI_CHANNEL_ASSOCIATION_GET_V2                                                 0x02
5777      =3  #define MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V2                                       0x05
5778      =3  #define MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V2                                    0x06
5779      =3  #define MULTI_CHANNEL_ASSOCIATION_REMOVE_V2                                              0x04
5780      =3  #define MULTI_CHANNEL_ASSOCIATION_REPORT_V2                                              0x03
5781      =3  #define MULTI_CHANNEL_ASSOCIATION_SET_V2                                                 0x01
5782      =3  /* Values used for Multi Channel Association Remove command */
5783      =3  #define MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER_V2                                       0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5784      =3  /* Values used for Multi Channel Association Report command */
5785      =3  #define MULTI_CHANNEL_ASSOCIATION_REPORT_MARKER_V2                                       0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5786      =3  /* Values used for Multi Channel Association Set command */
5787      =3  #define MULTI_CHANNEL_ASSOCIATION_SET_MARKER_V2                                          0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5788      =3  
5789      =3  /* Multi Channel Association command class commands */
5790      =3  #define MULTI_CHANNEL_ASSOCIATION_VERSION_V3                                             0x03
5791      =3  #define MULTI_CHANNEL_ASSOCIATION_GET_V3                                                 0x02
5792      =3  #define MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V3                                       0x05
5793      =3  #define MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V3                                    0x06
5794      =3  #define MULTI_CHANNEL_ASSOCIATION_REMOVE_V3                                              0x04
5795      =3  #define MULTI_CHANNEL_ASSOCIATION_REPORT_V3                                              0x03
5796      =3  #define MULTI_CHANNEL_ASSOCIATION_SET_V3                                                 0x01
5797      =3  /* Values used for Multi Channel Association Remove command */
5798      =3  #define MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER_V3                                       0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5799      =3  /* Values used for Multi Channel Association Report command */
5800      =3  #define MULTI_CHANNEL_ASSOCIATION_REPORT_MARKER_V3                                       0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5801      =3  /* Values used for Multi Channel Association Set command */
5802      =3  #define MULTI_CHANNEL_ASSOCIATION_SET_MARKER_V3                                          0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5803      =3  
5804      =3  /* Multi Channel command class commands */
5805      =3  #define MULTI_CHANNEL_VERSION_V2                                                         0x02
5806      =3  #define MULTI_CHANNEL_CAPABILITY_GET_V2                                                  0x09
5807      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_V2                                               0x0A
5808      =3  #define MULTI_CHANNEL_CMD_ENCAP_V2                                                       0x0D
5809      =3  #define MULTI_CHANNEL_END_POINT_FIND_V2                                                  0x0B
5810      =3  #define MULTI_CHANNEL_END_POINT_FIND_REPORT_V2                                           0x0C
5811      =3  #define MULTI_CHANNEL_END_POINT_GET_V2                                                   0x07
5812      =3  #define MULTI_CHANNEL_END_POINT_REPORT_V2                                                0x08
5813      =3  #define MULTI_INSTANCE_CMD_ENCAP_V2                                                      0x06
5814      =3  #define MULTI_INSTANCE_GET_V2                                                            0x04
5815      =3  #define MULTI_INSTANCE_REPORT_V2                                                         0x05
5816      =3  /* Values used for Multi Channel Capability Get command */
5817      =3  #define MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_END_POINT_MASK_V2                       0x7F
5818      =3  #define MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_RES_BIT_MASK_V2                         0x80
5819      =3  /* Values used for Multi Channel Capability Report command */
5820      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_END_POINT_MASK_V2                    0x7F
5821      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_DYNAMIC_BIT_MASK_V2                  0x80
5822      =3  /* Values used for Multi Channel Cmd Encap command */
5823      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES1_SOURCE_END_POINT_MASK_V2                     0x7F
5824      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES1_RES_BIT_MASK_V2                              0x80
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 110 

5825      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES2_DESTINATION_END_POINT_MASK_V2                0x7F
5826      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES2_BIT_ADDRESS_BIT_MASK_V2                      0x80
5827      =3  /* Values used for Multi Channel End Point Report command */
5828      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_RES1_MASK_V2                          0x3F
5829      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_IDENTICAL_BIT_MASK_V2                 0x40
5830      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_DYNAMIC_BIT_MASK_V2                   0x80
5831      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_END_POINTS_MASK_V2                    0x7F
5832      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_RES2_BIT_MASK_V2                      0x80
5833      =3  /* Values used for Multi Instance Cmd Encap command */
5834      =3  #define MULTI_INSTANCE_CMD_ENCAP_PROPERTIES1_INSTANCE_MASK_V2                            0x7F
5835      =3  #define MULTI_INSTANCE_CMD_ENCAP_PROPERTIES1_RES_BIT_MASK_V2                             0x80
5836      =3  /* Values used for Multi Instance Report command */
5837      =3  #define MULTI_INSTANCE_REPORT_PROPERTIES1_INSTANCES_MASK_V2                              0x7F
5838      =3  #define MULTI_INSTANCE_REPORT_PROPERTIES1_RES_BIT_MASK_V2                                0x80
5839      =3  
5840      =3  /* Multi Channel command class commands */
5841      =3  #define MULTI_CHANNEL_VERSION_V3                                                         0x03
5842      =3  #define MULTI_CHANNEL_CAPABILITY_GET_V3                                                  0x09
5843      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_V3                                               0x0A
5844      =3  #define MULTI_CHANNEL_CMD_ENCAP_V3                                                       0x0D
5845      =3  #define MULTI_CHANNEL_END_POINT_FIND_V3                                                  0x0B
5846      =3  #define MULTI_CHANNEL_END_POINT_FIND_REPORT_V3                                           0x0C
5847      =3  #define MULTI_CHANNEL_END_POINT_GET_V3                                                   0x07
5848      =3  #define MULTI_CHANNEL_END_POINT_REPORT_V3                                                0x08
5849      =3  #define MULTI_INSTANCE_CMD_ENCAP_V3                                                      0x06
5850      =3  #define MULTI_INSTANCE_GET_V3                                                            0x04
5851      =3  #define MULTI_INSTANCE_REPORT_V3                                                         0x05
5852      =3  /* Values used for Multi Channel Capability Get command */
5853      =3  #define MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_END_POINT_MASK_V3                       0x7F
5854      =3  #define MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_RES_BIT_MASK_V3                         0x80
5855      =3  /* Values used for Multi Channel Capability Report command */
5856      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_END_POINT_MASK_V3                    0x7F
5857      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_DYNAMIC_BIT_MASK_V3                  0x80
5858      =3  /* Values used for Multi Channel Cmd Encap command */
5859      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES1_SOURCE_END_POINT_MASK_V3                     0x7F
5860      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES1_RES_BIT_MASK_V3                              0x80
5861      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES2_DESTINATION_END_POINT_MASK_V3                0x7F
5862      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES2_BIT_ADDRESS_BIT_MASK_V3                      0x80
5863      =3  /* Values used for Multi Channel End Point Report command */
5864      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_RES1_MASK_V3                          0x3F
5865      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_IDENTICAL_BIT_MASK_V3                 0x40
5866      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_DYNAMIC_BIT_MASK_V3                   0x80
5867      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_END_POINTS_MASK_V3                    0x7F
5868      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_RES2_BIT_MASK_V3                      0x80
5869      =3  /* Values used for Multi Instance Cmd Encap command */
5870      =3  #define MULTI_INSTANCE_CMD_ENCAP_PROPERTIES1_INSTANCE_MASK_V3                            0x7F
5871      =3  #define MULTI_INSTANCE_CMD_ENCAP_PROPERTIES1_RES_BIT_MASK_V3                             0x80
5872      =3  /* Values used for Multi Instance Report command */
5873      =3  #define MULTI_INSTANCE_REPORT_PROPERTIES1_INSTANCES_MASK_V3                              0x7F
5874      =3  #define MULTI_INSTANCE_REPORT_PROPERTIES1_RES_BIT_MASK_V3                                0x80
5875      =3  
5876      =3  /* Multi Channel command class commands */
5877      =3  #define MULTI_CHANNEL_VERSION_V4                                                         0x04
5878      =3  #define MULTI_CHANNEL_CAPABILITY_GET_V4                                                  0x09
5879      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_V4                                               0x0A
5880      =3  #define MULTI_CHANNEL_CMD_ENCAP_V4                                                       0x0D
5881      =3  #define MULTI_CHANNEL_END_POINT_FIND_V4                                                  0x0B
5882      =3  #define MULTI_CHANNEL_END_POINT_FIND_REPORT_V4                                           0x0C
5883      =3  #define MULTI_CHANNEL_END_POINT_GET_V4                                                   0x07
5884      =3  #define MULTI_CHANNEL_END_POINT_REPORT_V4                                                0x08
5885      =3  #define MULTI_INSTANCE_CMD_ENCAP_V4                                                      0x06
5886      =3  #define MULTI_INSTANCE_GET_V4                                                            0x04
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 111 

5887      =3  #define MULTI_INSTANCE_REPORT_V4                                                         0x05
5888      =3  #define MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V4                                          0x0E
5889      =3  #define MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V4                                       0x0F
5890      =3  /* Values used for Multi Channel Capability Get command */
5891      =3  #define MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_END_POINT_MASK_V4                       0x7F
5892      =3  #define MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_RES_BIT_MASK_V4                         0x80
5893      =3  /* Values used for Multi Channel Capability Report command */
5894      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_END_POINT_MASK_V4                    0x7F
5895      =3  #define MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_DYNAMIC_BIT_MASK_V4                  0x80
5896      =3  /* Values used for Multi Channel Cmd Encap command */
5897      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES1_SOURCE_END_POINT_MASK_V4                     0x7F
5898      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES1_RES_BIT_MASK_V4                              0x80
5899      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES2_DESTINATION_END_POINT_MASK_V4                0x7F
5900      =3  #define MULTI_CHANNEL_CMD_ENCAP_PROPERTIES2_BIT_ADDRESS_BIT_MASK_V4                      0x80
5901      =3  /* Values used for Multi Channel End Point Report command */
5902      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_RES1_MASK_V4                          0x3F
5903      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_IDENTICAL_BIT_MASK_V4                 0x40
5904      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_DYNAMIC_BIT_MASK_V4                   0x80
5905      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_INDIVIDUAL_END_POINTS_MASK_V4         0x7F
5906      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_RES2_BIT_MASK_V4                      0x80
5907      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES3_AGGREGATED_END_POINTS_MASK_V4         0x7F
5908      =3  #define MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES3_RES3_BIT_MASK_V4                      0x80
5909      =3  /* Values used for Multi Instance Cmd Encap command */
5910      =3  #define MULTI_INSTANCE_CMD_ENCAP_PROPERTIES1_INSTANCE_MASK_V4                            0x7F
5911      =3  #define MULTI_INSTANCE_CMD_ENCAP_PROPERTIES1_RES_BIT_MASK_V4                             0x80
5912      =3  /* Values used for Multi Instance Report command */
5913      =3  #define MULTI_INSTANCE_REPORT_PROPERTIES1_INSTANCES_MASK_V4                              0x7F
5914      =3  #define MULTI_INSTANCE_REPORT_PROPERTIES1_RES_BIT_MASK_V4                                0x80
5915      =3  /* Values used for Multi Channel Aggregated Members Get command */
5916      =3  #define MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_PROPERTIES1_AGGREGATED_END_POINT_MASK_V4    0x7F
5917      =3  #define MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_PROPERTIES1_RES_BIT_MASK_V4                 0x80
5918      =3  /* Values used for Multi Channel Aggregated Members Report command */
5919      =3  #define MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_PROPERTIES1_AGGREGATED_END_POINT_MASK_V4 0x7F
5920      =3  #define MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_PROPERTIES1_RES_BIT_MASK_V4              0x80
5921      =3  
5922      =3  /* Multi Cmd command class commands */
5923      =3  #define MULTI_CMD_VERSION                                                                0x01
5924      =3  #define MULTI_CMD_ENCAP                                                                  0x01
5925      =3  
5926      =3  /* Multi Instance Association command class commands */
5927      =3  #define MULTI_INSTANCE_ASSOCIATION_VERSION                                               0x01
5928      =3  #define MULTI_INSTANCE_ASSOCIATION_GET                                                   0x02
5929      =3  #define MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET                                         0x05
5930      =3  #define MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT                                      0x06
5931      =3  #define MULTI_INSTANCE_ASSOCIATION_REMOVE                                                0x04
5932      =3  #define MULTI_INSTANCE_ASSOCIATION_REPORT                                                0x03
5933      =3  #define MULTI_INSTANCE_ASSOCIATION_SET                                                   0x01
5934      =3  /* Values used for Multi Instance Association Remove command */
5935      =3  #define MULTI_INSTANCE_ASSOCIATION_REMOVE_MARKER                                         0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5936      =3  /* Values used for Multi Instance Association Report command */
5937      =3  #define MULTI_INSTANCE_ASSOCIATION_REPORT_MARKER                                         0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5938      =3  /* Values used for Multi Instance Association Set command */
5939      =3  #define MULTI_INSTANCE_ASSOCIATION_SET_MARKER                                            0x00 /*This marke
             -r identifier is used to separate between nodes without and with end points attached. This field can be omitted in case n
             -o Multi Channel node follows.*/
5940      =3  
5941      =3  /* Multi Instance command class commands */
5942      =3  #define MULTI_INSTANCE_VERSION                                                           0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 112 

5943      =3  #define MULTI_INSTANCE_CMD_ENCAP                                                         0x06
5944      =3  #define MULTI_INSTANCE_GET                                                               0x04
5945      =3  #define MULTI_INSTANCE_REPORT                                                            0x05
5946      =3  
5947      =3  /* Network Management Proxy command class commands */
5948      =3  #define NETWORK_MANAGEMENT_PROXY_VERSION                                                 0x01
5949      =3  #define NODE_INFO_CACHED_GET                                                             0x03
5950      =3  #define NODE_INFO_CACHED_REPORT                                                          0x04
5951      =3  #define NODE_LIST_GET                                                                    0x01
5952      =3  #define NODE_LIST_REPORT                                                                 0x02
5953      =3  /* Values used for Node Info Cached Get command */
5954      =3  #define NODE_INFO_CACHED_GET_PROPERTIES1_MAX_AGE_MASK                                    0x0F
5955      =3  #define NODE_INFO_CACHED_GET_PROPERTIES1_RESERVED_MASK                                   0xF0
5956      =3  #define NODE_INFO_CACHED_GET_PROPERTIES1_RESERVED_SHIFT                                  0x04
5957      =3  /* Values used for Node Info Cached Report command */
5958      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES1_AGE_MASK                                     0x0F
5959      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES1_STATUS_MASK                                  0xF0
5960      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES1_STATUS_SHIFT                                 0x04
5961      =3  #define NODE_INFO_CACHED_REPORT_STATUS_STATUS_OK                                         0x00
5962      =3  #define NODE_INFO_CACHED_REPORT_STATUS_STATUS_NOT_RESPONDING                             0x01
5963      =3  #define NODE_INFO_CACHED_REPORT_STATUS_STATUS_UNKNOWN                                    0x02
5964      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES2_Z_WAVE_PROTOCOL_SPECIFIC_PART_1_MASK         0x7F
5965      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES2_LISTENING_BIT_MASK                           0x80
5966      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES3_Z_WAVE_PROTOCOL_SPECIFIC_PART_2_MASK         0x7F
5967      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES3_OPT_BIT_MASK                                 0x80
5968      =3  
5969      =3  /* Network Management Proxy command class commands */
5970      =3  #define NETWORK_MANAGEMENT_PROXY_VERSION_V2                                              0x02
5971      =3  #define NODE_INFO_CACHED_GET_V2                                                          0x03
5972      =3  #define NODE_INFO_CACHED_REPORT_V2                                                       0x04
5973      =3  #define NODE_LIST_GET_V2                                                                 0x01
5974      =3  #define NODE_LIST_REPORT_V2                                                              0x02
5975      =3  #define NM_MULTI_CHANNEL_END_POINT_GET_V2                                                0x05
5976      =3  #define NM_MULTI_CHANNEL_END_POINT_REPORT_V2                                             0x06
5977      =3  #define NM_MULTI_CHANNEL_CAPABILITY_GET_V2                                               0x07
5978      =3  #define NM_MULTI_CHANNEL_CAPABILITY_REPORT_V2                                            0x08
5979      =3  #define NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V2                                       0x09
5980      =3  #define NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2                                    0x0A
5981      =3  /* Values used for Node Info Cached Get command */
5982      =3  #define NODE_INFO_CACHED_GET_PROPERTIES1_MAX_AGE_MASK_V2                                 0x0F
5983      =3  #define NODE_INFO_CACHED_GET_PROPERTIES1_RESERVED_MASK_V2                                0xF0
5984      =3  #define NODE_INFO_CACHED_GET_PROPERTIES1_RESERVED_SHIFT_V2                               0x04
5985      =3  /* Values used for Node Info Cached Report command */
5986      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES1_AGE_MASK_V2                                  0x0F
5987      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES1_STATUS_MASK_V2                               0xF0
5988      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES1_STATUS_SHIFT_V2                              0x04
5989      =3  #define NODE_INFO_CACHED_REPORT_STATUS_STATUS_OK_V2                                      0x00
5990      =3  #define NODE_INFO_CACHED_REPORT_STATUS_STATUS_NOT_RESPONDING_V2                          0x01
5991      =3  #define NODE_INFO_CACHED_REPORT_STATUS_STATUS_UNKNOWN_V2                                 0x02
5992      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES2_Z_WAVE_PROTOCOL_SPECIFIC_PART_1_MASK_V2      0x7F
5993      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES2_LISTENING_BIT_MASK_V2                        0x80
5994      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES3_Z_WAVE_PROTOCOL_SPECIFIC_PART_2_MASK_V2      0x7F
5995      =3  #define NODE_INFO_CACHED_REPORT_PROPERTIES3_OPT_BIT_MASK_V2                              0x80
5996      =3  /* Values used for Nm Multi Channel End Point Report command */
5997      =3  #define NM_MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_INDIVIDUAL_END_POINTS_MASK_V2      0x7F
5998      =3  #define NM_MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES1_RES1_BIT_MASK_V2                   0x80
5999      =3  #define NM_MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_AGGREGATED_END_POINTS_MASK_V2      0x7F
6000      =3  #define NM_MULTI_CHANNEL_END_POINT_REPORT_PROPERTIES2_RES2_BIT_MASK_V2                   0x80
6001      =3  /* Values used for Nm Multi Channel Capability Get command */
6002      =3  #define NM_MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_END_POINT_MASK_V2                    0x7F
6003      =3  #define NM_MULTI_CHANNEL_CAPABILITY_GET_PROPERTIES1_RES1_BIT_MASK_V2                     0x80
6004      =3  /* Values used for Nm Multi Channel Capability Report command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 113 

6005      =3  #define NM_MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_END_POINT_MASK_V2                 0x7F
6006      =3  #define NM_MULTI_CHANNEL_CAPABILITY_REPORT_PROPERTIES1_RES1_BIT_MASK_V2                  0x80
6007      =3  /* Values used for Nm Multi Channel Aggregated Members Get command */
6008      =3  #define NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_PROPERTIES1_AGGREGATED_END_POINT_MASK_V2 0x7F
6009      =3  #define NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_PROPERTIES1_RES1_BIT_MASK_V2             0x80
6010      =3  /* Values used for Nm Multi Channel Aggregated Members Report command */
6011      =3  #define NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_PROPERTIES1_AGGREGATED_END_POINT_MASK_V2 0x7F
6012      =3  #define NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_PROPERTIES1_RES1_BIT_MASK_V2          0x80
6013      =3  
6014      =3  /* Network Management Basic command class commands */
6015      =3  #define NETWORK_MANAGEMENT_BASIC_VERSION                                                 0x01
6016      =3  #define LEARN_MODE_SET                                                                   0x01
6017      =3  #define LEARN_MODE_SET_STATUS                                                            0x02
6018      =3  #define NODE_INFORMATION_SEND                                                            0x05
6019      =3  #define NETWORK_UPDATE_REQUEST                                                           0x03
6020      =3  #define NETWORK_UPDATE_REQUEST_STATUS                                                    0x04
6021      =3  #define DEFAULT_SET                                                                      0x06
6022      =3  #define DEFAULT_SET_COMPLETE                                                             0x07
6023      =3  
6024      =3  /* Network Management Basic command class commands */
6025      =3  #define NETWORK_MANAGEMENT_BASIC_VERSION_V2                                              0x02
6026      =3  #define LEARN_MODE_SET_V2                                                                0x01
6027      =3  #define LEARN_MODE_SET_STATUS_V2                                                         0x02
6028      =3  #define NODE_INFORMATION_SEND_V2                                                         0x05
6029      =3  #define NETWORK_UPDATE_REQUEST_V2                                                        0x03
6030      =3  #define NETWORK_UPDATE_REQUEST_STATUS_V2                                                 0x04
6031      =3  #define DEFAULT_SET_V2                                                                   0x06
6032      =3  #define DEFAULT_SET_COMPLETE_V2                                                          0x07
6033      =3  #define DSK_GET_V2                                                                       0x08
6034      =3  #define DSK_REPORT_V2                                                                    0x09
6035      =3  /* Values used for Learn Mode Set command */
6036      =3  #define LEARN_MODE_SET_PROPERTIES1_RETURN_INTERVIEW_STATUS_BIT_MASK_V2                   0x01
6037      =3  #define LEARN_MODE_SET_PROPERTIES1_RESERVED_MASK_V2                                      0xFE
6038      =3  #define LEARN_MODE_SET_PROPERTIES1_RESERVED_SHIFT_V2                                     0x01
6039      =3  /* Values used for Dsk Get command */
6040      =3  #define DSK_GET_PROPERTIES1_ADD_MODE_BIT_MASK_V2                                         0x01
6041      =3  #define DSK_GET_PROPERTIES1_RESERVED_MASK_V2                                             0xFE
6042      =3  #define DSK_GET_PROPERTIES1_RESERVED_SHIFT_V2                                            0x01
6043      =3  /* Values used for Dsk Report command */
6044      =3  #define DSK_REPORT_PROPERTIES1_ADD_MODE_BIT_MASK_V2                                      0x01
6045      =3  #define DSK_REPORT_PROPERTIES1_RESERVED_MASK_V2                                          0xFE
6046      =3  #define DSK_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                                         0x01
6047      =3  
6048      =3  /* Network Management Inclusion command class commands */
6049      =3  #define NETWORK_MANAGEMENT_INCLUSION_VERSION                                             0x01
6050      =3  #define FAILED_NODE_REMOVE                                                               0x07
6051      =3  #define FAILED_NODE_REMOVE_STATUS                                                        0x08
6052      =3  #define NODE_ADD                                                                         0x01
6053      =3  #define NODE_ADD_STATUS                                                                  0x02
6054      =3  #define NODE_REMOVE                                                                      0x03
6055      =3  #define NODE_REMOVE_STATUS                                                               0x04
6056      =3  #define FAILED_NODE_REPLACE                                                              0x09
6057      =3  #define FAILED_NODE_REPLACE_STATUS                                                       0x0A
6058      =3  #define NODE_NEIGHBOR_UPDATE_REQUEST                                                     0x0B
6059      =3  #define NODE_NEIGHBOR_UPDATE_STATUS                                                      0x0C
6060      =3  #define RETURN_ROUTE_ASSIGN                                                              0x0D
6061      =3  #define RETURN_ROUTE_ASSIGN_COMPLETE                                                     0x0E
6062      =3  #define RETURN_ROUTE_DELETE                                                              0x0F
6063      =3  #define RETURN_ROUTE_DELETE_COMPLETE                                                     0x10
6064      =3  /* Values used for Node Add Status command */
6065      =3  #define NODE_ADD_STATUS_PROPERTIES1_Z_WAVE_PROTOCOL_SPECIFIC_PART_1_MASK                 0x7F
6066      =3  #define NODE_ADD_STATUS_PROPERTIES1_LISTENING_BIT_MASK                                   0x80
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 114 

6067      =3  #define NODE_ADD_STATUS_PROPERTIES2_Z_WAVE_PROTOCOL_SPECIFIC_PART_2_MASK                 0x7F
6068      =3  #define NODE_ADD_STATUS_PROPERTIES2_OPT_BIT_MASK                                         0x80
6069      =3  
6070      =3  /* Network Management Inclusion command class commands */
6071      =3  #define NETWORK_MANAGEMENT_INCLUSION_VERSION_V2                                          0x02
6072      =3  #define FAILED_NODE_REMOVE_V2                                                            0x07
6073      =3  #define FAILED_NODE_REMOVE_STATUS_V2                                                     0x08
6074      =3  #define NODE_ADD_V2                                                                      0x01
6075      =3  #define NODE_ADD_STATUS_V2                                                               0x02
6076      =3  #define NODE_REMOVE_V2                                                                   0x03
6077      =3  #define NODE_REMOVE_STATUS_V2                                                            0x04
6078      =3  #define FAILED_NODE_REPLACE_V2                                                           0x09
6079      =3  #define FAILED_NODE_REPLACE_STATUS_V2                                                    0x0A
6080      =3  #define NODE_NEIGHBOR_UPDATE_REQUEST_V2                                                  0x0B
6081      =3  #define NODE_NEIGHBOR_UPDATE_STATUS_V2                                                   0x0C
6082      =3  #define RETURN_ROUTE_ASSIGN_V2                                                           0x0D
6083      =3  #define RETURN_ROUTE_ASSIGN_COMPLETE_V2                                                  0x0E
6084      =3  #define RETURN_ROUTE_DELETE_V2                                                           0x0F
6085      =3  #define RETURN_ROUTE_DELETE_COMPLETE_V2                                                  0x10
6086      =3  #define NODE_ADD_KEYS_REPORT_V2                                                          0x11
6087      =3  #define NODE_ADD_KEYS_SET_V2                                                             0x12
6088      =3  #define NODE_ADD_DSK_REPORT_V2                                                           0x13
6089      =3  #define NODE_ADD_DSK_SET_V2                                                              0x14
6090      =3  /* Values used for Node Add Status command */
6091      =3  #define NODE_ADD_STATUS_PROPERTIES1_Z_WAVE_PROTOCOL_SPECIFIC_PART_1_MASK_V2              0x7F
6092      =3  #define NODE_ADD_STATUS_PROPERTIES1_LISTENING_BIT_MASK_V2                                0x80
6093      =3  #define NODE_ADD_STATUS_PROPERTIES2_Z_WAVE_PROTOCOL_SPECIFIC_PART_2_MASK_V2              0x7F
6094      =3  #define NODE_ADD_STATUS_PROPERTIES2_OPT_BIT_MASK_V2                                      0x80
6095      =3  /* Values used for Node Add Keys Report command */
6096      =3  #define NODE_ADD_KEYS_REPORT_PROPERTIES1_REQUEST_CSA_BIT_MASK_V2                         0x01
6097      =3  #define NODE_ADD_KEYS_REPORT_PROPERTIES1_RESERVED_MASK_V2                                0xFE
6098      =3  #define NODE_ADD_KEYS_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                               0x01
6099      =3  /* Values used for Node Add Keys Set command */
6100      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_ACCEPT_BIT_MASK_V2                                 0x01
6101      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_GRANT_CSA_BIT_MASK_V2                              0x02
6102      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_RESERVED_MASK_V2                                   0xFC
6103      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_RESERVED_SHIFT_V2                                  0x02
6104      =3  /* Values used for Node Add Dsk Report command */
6105      =3  #define NODE_ADD_DSK_REPORT_PROPERTIES1_INPUT_DSK_LENGTH_MASK_V2                         0x0F
6106      =3  #define NODE_ADD_DSK_REPORT_PROPERTIES1_RESERVED_MASK_V2                                 0xF0
6107      =3  #define NODE_ADD_DSK_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                                0x04
6108      =3  /* Values used for Node Add Dsk Set command */
6109      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_INPUT_DSK_LENGTH_MASK_V2                            0x0F
6110      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_RESERVED_MASK_V2                                    0x70
6111      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_RESERVED_SHIFT_V2                                   0x04
6112      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_ACCEPT_BIT_MASK_V2                                  0x80
6113      =3  
6114      =3  /* Network Management Inclusion command class commands */
6115      =3  #define NETWORK_MANAGEMENT_INCLUSION_VERSION_V3                                          0x03
6116      =3  #define FAILED_NODE_REMOVE_V3                                                            0x07
6117      =3  #define FAILED_NODE_REMOVE_STATUS_V3                                                     0x08
6118      =3  #define NODE_ADD_V3                                                                      0x01
6119      =3  #define NODE_ADD_STATUS_V3                                                               0x02
6120      =3  #define NODE_REMOVE_V3                                                                   0x03
6121      =3  #define NODE_REMOVE_STATUS_V3                                                            0x04
6122      =3  #define FAILED_NODE_REPLACE_V3                                                           0x09
6123      =3  #define FAILED_NODE_REPLACE_STATUS_V3                                                    0x0A
6124      =3  #define NODE_NEIGHBOR_UPDATE_REQUEST_V3                                                  0x0B
6125      =3  #define NODE_NEIGHBOR_UPDATE_STATUS_V3                                                   0x0C
6126      =3  #define RETURN_ROUTE_ASSIGN_V3                                                           0x0D
6127      =3  #define RETURN_ROUTE_ASSIGN_COMPLETE_V3                                                  0x0E
6128      =3  #define RETURN_ROUTE_DELETE_V3                                                           0x0F
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 115 

6129      =3  #define RETURN_ROUTE_DELETE_COMPLETE_V3                                                  0x10
6130      =3  #define NODE_ADD_KEYS_REPORT_V3                                                          0x11
6131      =3  #define NODE_ADD_KEYS_SET_V3                                                             0x12
6132      =3  #define NODE_ADD_DSK_REPORT_V3                                                           0x13
6133      =3  #define NODE_ADD_DSK_SET_V3                                                              0x14
6134      =3  #define S2_ADVANCED_JOIN_MODE_GET_V3                                                     0x17
6135      =3  #define SMART_START_JOIN_STARTED_REPORT_V3                                               0x15
6136      =3  #define S2_ADVANCED_JOIN_MODE_SET_V3                                                     0x16
6137      =3  #define S2_ADVANCED_JOIN_MODE_REPORT_V3                                                  0x18
6138      =3  #define INCLUDED_NIF_REPORT_V3                                                           0x19
6139      =3  /* Values used for Node Add Status command */
6140      =3  #define NODE_ADD_STATUS_PROPERTIES1_Z_WAVE_PROTOCOL_SPECIFIC_PART_1_MASK_V3              0x7F
6141      =3  #define NODE_ADD_STATUS_PROPERTIES1_LISTENING_BIT_MASK_V3                                0x80
6142      =3  #define NODE_ADD_STATUS_PROPERTIES2_Z_WAVE_PROTOCOL_SPECIFIC_PART_2_MASK_V3              0x7F
6143      =3  #define NODE_ADD_STATUS_PROPERTIES2_OPT_BIT_MASK_V3                                      0x80
6144      =3  #define NODE_ADD_STATUS_PROPERTIES3_DSK_LENGTH_MASK_V3                                   0x1F
6145      =3  #define NODE_ADD_STATUS_PROPERTIES3_RESERVED2_MASK_V3                                    0xE0
6146      =3  #define NODE_ADD_STATUS_PROPERTIES3_RESERVED2_SHIFT_V3                                   0x05
6147      =3  /* Values used for Node Add Keys Report command */
6148      =3  #define NODE_ADD_KEYS_REPORT_PROPERTIES1_REQUEST_CSA_BIT_MASK_V3                         0x01
6149      =3  #define NODE_ADD_KEYS_REPORT_PROPERTIES1_RESERVED_MASK_V3                                0xFE
6150      =3  #define NODE_ADD_KEYS_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                               0x01
6151      =3  /* Values used for Node Add Keys Set command */
6152      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_ACCEPT_BIT_MASK_V3                                 0x01
6153      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_GRANT_CSA_BIT_MASK_V3                              0x02
6154      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_RESERVED_MASK_V3                                   0xFC
6155      =3  #define NODE_ADD_KEYS_SET_PROPERTIES1_RESERVED_SHIFT_V3                                  0x02
6156      =3  /* Values used for Node Add Dsk Report command */
6157      =3  #define NODE_ADD_DSK_REPORT_PROPERTIES1_INPUT_DSK_LENGTH_MASK_V3                         0x0F
6158      =3  #define NODE_ADD_DSK_REPORT_PROPERTIES1_RESERVED_MASK_V3                                 0xF0
6159      =3  #define NODE_ADD_DSK_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                                0x04
6160      =3  /* Values used for Node Add Dsk Set command */
6161      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_INPUT_DSK_LENGTH_MASK_V3                            0x0F
6162      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_RESERVED_MASK_V3                                    0x70
6163      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_RESERVED_SHIFT_V3                                   0x04
6164      =3  #define NODE_ADD_DSK_SET_PROPERTIES1_ACCEPT_BIT_MASK_V3                                  0x80
6165      =3  /* Values used for Smart Start Join Started Report command */
6166      =3  #define SMART_START_JOIN_STARTED_REPORT_PROPERTIES1_DSK_LENGTH_MASK_V3                   0x1F
6167      =3  #define SMART_START_JOIN_STARTED_REPORT_PROPERTIES1_RESERVED1_MASK_V3                    0xE0
6168      =3  #define SMART_START_JOIN_STARTED_REPORT_PROPERTIES1_RESERVED1_SHIFT_V3                   0x05
6169      =3  
6170      =3  /* No Operation command class commands */
6171      =3  #define NO_OPERATION_VERSION                                                             0x01
6172      =3  
6173      =3  /* Node Naming command class commands */
6174      =3  #define NODE_NAMING_VERSION                                                              0x01
6175      =3  #define NODE_NAMING_NODE_LOCATION_REPORT                                                 0x06
6176      =3  #define NODE_NAMING_NODE_LOCATION_SET                                                    0x04
6177      =3  #define NODE_NAMING_NODE_LOCATION_GET                                                    0x05
6178      =3  #define NODE_NAMING_NODE_NAME_GET                                                        0x02
6179      =3  #define NODE_NAMING_NODE_NAME_REPORT                                                     0x03
6180      =3  #define NODE_NAMING_NODE_NAME_SET                                                        0x01
6181      =3  /* Values used for Node Naming Node Location Report command */
6182      =3  #define NODE_NAMING_NODE_LOCATION_REPORT_LEVEL_CHAR_PRESENTATION_MASK                    0x07
6183      =3  #define NODE_NAMING_NODE_LOCATION_REPORT_LEVEL_RESERVED_MASK                             0xF8
6184      =3  #define NODE_NAMING_NODE_LOCATION_REPORT_LEVEL_RESERVED_SHIFT                            0x03
6185      =3  /* Values used for Node Naming Node Location Set command */
6186      =3  #define NODE_NAMING_NODE_LOCATION_SET_LEVEL_CHAR_PRESENTATION_MASK                       0x07
6187      =3  #define NODE_NAMING_NODE_LOCATION_SET_LEVEL_RESERVED_MASK                                0xF8
6188      =3  #define NODE_NAMING_NODE_LOCATION_SET_LEVEL_RESERVED_SHIFT                               0x03
6189      =3  /* Values used for Node Naming Node Name Report command */
6190      =3  #define NODE_NAMING_NODE_NAME_REPORT_LEVEL_CHAR_PRESENTATION_MASK                        0x07
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 116 

6191      =3  #define NODE_NAMING_NODE_NAME_REPORT_LEVEL_RESERVED_MASK                                 0xF8
6192      =3  #define NODE_NAMING_NODE_NAME_REPORT_LEVEL_RESERVED_SHIFT                                0x03
6193      =3  /* Values used for Node Naming Node Name Set command */
6194      =3  #define NODE_NAMING_NODE_NAME_SET_LEVEL_CHAR_PRESENTATION_MASK                           0x07
6195      =3  #define NODE_NAMING_NODE_NAME_SET_LEVEL_RESERVED_MASK                                    0xF8
6196      =3  #define NODE_NAMING_NODE_NAME_SET_LEVEL_RESERVED_SHIFT                                   0x03
6197      =3  
6198      =3  /* Non Interoperable command class commands */
6199      =3  #define NON_INTEROPERABLE_VERSION                                                        0x01
6200      =3  
6201      =3  /* Powerlevel command class commands */
6202      =3  #define POWERLEVEL_VERSION                                                               0x01
6203      =3  #define POWERLEVEL_GET                                                                   0x02
6204      =3  #define POWERLEVEL_REPORT                                                                0x03
6205      =3  #define POWERLEVEL_SET                                                                   0x01
6206      =3  #define POWERLEVEL_TEST_NODE_GET                                                         0x05
6207      =3  #define POWERLEVEL_TEST_NODE_REPORT                                                      0x06
6208      =3  #define POWERLEVEL_TEST_NODE_SET                                                         0x04
6209      =3  /* Values used for Powerlevel Report command */
6210      =3  #define POWERLEVEL_REPORT_NORMALPOWER                                                    0x00
6211      =3  #define POWERLEVEL_REPORT_MINUS1DBM                                                      0x01
6212      =3  #define POWERLEVEL_REPORT_MINUS2DBM                                                      0x02
6213      =3  #define POWERLEVEL_REPORT_MINUS3DBM                                                      0x03
6214      =3  #define POWERLEVEL_REPORT_MINUS4DBM                                                      0x04
6215      =3  #define POWERLEVEL_REPORT_MINUS5DBM                                                      0x05
6216      =3  #define POWERLEVEL_REPORT_MINUS6DBM                                                      0x06
6217      =3  #define POWERLEVEL_REPORT_MINUS7DBM                                                      0x07
6218      =3  #define POWERLEVEL_REPORT_MINUS8DBM                                                      0x08
6219      =3  #define POWERLEVEL_REPORT_MINUS9DBM                                                      0x09
6220      =3  /* Values used for Powerlevel Set command */
6221      =3  #define POWERLEVEL_SET_NORMALPOWER                                                       0x00
6222      =3  #define POWERLEVEL_SET_MINUS1DBM                                                         0x01
6223      =3  #define POWERLEVEL_SET_MINUS2DBM                                                         0x02
6224      =3  #define POWERLEVEL_SET_MINUS3DBM                                                         0x03
6225      =3  #define POWERLEVEL_SET_MINUS4DBM                                                         0x04
6226      =3  #define POWERLEVEL_SET_MINUS5DBM                                                         0x05
6227      =3  #define POWERLEVEL_SET_MINUS6DBM                                                         0x06
6228      =3  #define POWERLEVEL_SET_MINUS7DBM                                                         0x07
6229      =3  #define POWERLEVEL_SET_MINUS8DBM                                                         0x08
6230      =3  #define POWERLEVEL_SET_MINUS9DBM                                                         0x09
6231      =3  /* Values used for Powerlevel Test Node Report command */
6232      =3  #define POWERLEVEL_TEST_NODE_REPORT_ZW_TEST_NOT_A_NODEID                                 0x00
6233      =3  #define POWERLEVEL_TEST_NODE_REPORT_ZW_TEST_FAILED                                       0x00
6234      =3  #define POWERLEVEL_TEST_NODE_REPORT_ZW_TEST_SUCCES                                       0x01
6235      =3  #define POWERLEVEL_TEST_NODE_REPORT_ZW_TEST_INPROGRESS                                   0x02
6236      =3  /* Values used for Powerlevel Test Node Set command */
6237      =3  #define POWERLEVEL_TEST_NODE_SET_NORMALPOWER                                             0x00
6238      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS1DBM                                               0x01
6239      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS2DBM                                               0x02
6240      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS3DBM                                               0x03
6241      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS4DBM                                               0x04
6242      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS5DBM                                               0x05
6243      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS6DBM                                               0x06
6244      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS7DBM                                               0x07
6245      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS8DBM                                               0x08
6246      =3  #define POWERLEVEL_TEST_NODE_SET_MINUS9DBM                                               0x09
6247      =3  
6248      =3  /* Prepayment Encapsulation command class commands */
6249      =3  #define PREPAYMENT_ENCAPSULATION_VERSION                                                 0x01
6250      =3  #define CMD_ENCAPSULATION                                                                0x01
6251      =3  
6252      =3  /* Prepayment command class commands */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 117 

6253      =3  #define PREPAYMENT_VERSION                                                               0x01
6254      =3  #define PREPAYMENT_BALANCE_GET                                                           0x01
6255      =3  #define PREPAYMENT_BALANCE_REPORT                                                        0x02
6256      =3  #define PREPAYMENT_SUPPORTED_GET                                                         0x03
6257      =3  #define PREPAYMENT_SUPPORTED_REPORT                                                      0x04
6258      =3  /* Values used for Prepayment Balance Get command */
6259      =3  #define PREPAYMENT_BALANCE_GET_PROPERTIES1_RESERVED_MASK                                 0x3F
6260      =3  #define PREPAYMENT_BALANCE_GET_PROPERTIES1_BALANCE_TYPE_MASK                             0xC0
6261      =3  #define PREPAYMENT_BALANCE_GET_PROPERTIES1_BALANCE_TYPE_SHIFT                            0x06
6262      =3  #define PREPAYMENT_BALANCE_GET_BALANCE_TYPE_UTILITY                                      0x00
6263      =3  #define PREPAYMENT_BALANCE_GET_BALANCE_TYPE_MONETARY                                     0x01
6264      =3  /* Values used for Prepayment Balance Report command */
6265      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES1_METER_TYPE_MASK                            0x3F
6266      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES1_BALANCE_TYPE_MASK                          0xC0
6267      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES1_BALANCE_TYPE_SHIFT                         0x06
6268      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES2_SCALE_MASK                                 0x1F
6269      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES2_BALANCE_PRECISION_MASK                     0xE0
6270      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES2_BALANCE_PRECISION_SHIFT                    0x05
6271      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES3_RESERVED1_MASK                             0x1F
6272      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES3_DEBT_PRECISION_MASK                        0xE0
6273      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES3_DEBT_PRECISION_SHIFT                       0x05
6274      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES4_RESERVED2_MASK                             0x1F
6275      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES4_EMER_CREDIT_PRECISION_MASK                 0xE0
6276      =3  #define PREPAYMENT_BALANCE_REPORT_PROPERTIES4_EMER_CREDIT_PRECISION_SHIFT                0x05
6277      =3  /* Values used for Prepayment Supported Report command */
6278      =3  #define PREPAYMENT_SUPPORTED_REPORT_PROPERTIES1_TYPES_SUPPORTED_MASK                     0x0F
6279      =3  #define PREPAYMENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK                            0xF0
6280      =3  #define PREPAYMENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT                           0x04
6281      =3  
6282      =3  /* Proprietary command class commands */
6283      =3  #define PROPRIETARY_VERSION                                                              0x01
6284      =3  #define PROPRIETARY_GET                                                                  0x02
6285      =3  #define PROPRIETARY_REPORT                                                               0x03
6286      =3  #define PROPRIETARY_SET                                                                  0x01
6287      =3  
6288      =3  /* Protection command class commands */
6289      =3  #define PROTECTION_VERSION                                                               0x01
6290      =3  #define PROTECTION_GET                                                                   0x02
6291      =3  #define PROTECTION_REPORT                                                                0x03
6292      =3  #define PROTECTION_SET                                                                   0x01
6293      =3  /* Values used for Protection Report command */
6294      =3  #define PROTECTION_REPORT_UNPROTECTED                                                    0x00
6295      =3  #define PROTECTION_REPORT_PROTECTION_BY_SEQUENCE                                         0x01
6296      =3  #define PROTECTION_REPORT_NO_OPERATION_POSSIBLE                                          0x02
6297      =3  /* Values used for Protection Set command */
6298      =3  #define PROTECTION_SET_UNPROTECTED                                                       0x00
6299      =3  #define PROTECTION_SET_PROTECTION_BY_SEQUENCE                                            0x01
6300      =3  #define PROTECTION_SET_NO_OPERATION_POSSIBLE                                             0x02
6301      =3  
6302      =3  /* Protection command class commands */
6303      =3  #define PROTECTION_VERSION_V2                                                            0x02
6304      =3  #define PROTECTION_EC_GET_V2                                                             0x07
6305      =3  #define PROTECTION_EC_REPORT_V2                                                          0x08
6306      =3  #define PROTECTION_EC_SET_V2                                                             0x06
6307      =3  #define PROTECTION_GET_V2                                                                0x02
6308      =3  #define PROTECTION_REPORT_V2                                                             0x03
6309      =3  #define PROTECTION_SET_V2                                                                0x01
6310      =3  #define PROTECTION_SUPPORTED_GET_V2                                                      0x04
6311      =3  #define PROTECTION_SUPPORTED_REPORT_V2                                                   0x05
6312      =3  #define PROTECTION_TIMEOUT_GET_V2                                                        0x0A
6313      =3  #define PROTECTION_TIMEOUT_REPORT_V2                                                     0x0B
6314      =3  #define PROTECTION_TIMEOUT_SET_V2                                                        0x09
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 118 

6315      =3  /* Values used for Protection Report command */
6316      =3  #define PROTECTION_REPORT_LEVEL_LOCAL_PROTECTION_STATE_MASK_V2                           0x0F
6317      =3  #define PROTECTION_REPORT_LEVEL_RESERVED1_MASK_V2                                        0xF0
6318      =3  #define PROTECTION_REPORT_LEVEL_RESERVED1_SHIFT_V2                                       0x04
6319      =3  #define PROTECTION_REPORT_LEVEL2_RF_PROTECTION_STATE_MASK_V2                             0x0F
6320      =3  #define PROTECTION_REPORT_LEVEL2_RESERVED2_MASK_V2                                       0xF0
6321      =3  #define PROTECTION_REPORT_LEVEL2_RESERVED2_SHIFT_V2                                      0x04
6322      =3  /* Values used for Protection Set command */
6323      =3  #define PROTECTION_SET_LEVEL_LOCAL_PROTECTION_STATE_MASK_V2                              0x0F
6324      =3  #define PROTECTION_SET_LEVEL_RESERVED1_MASK_V2                                           0xF0
6325      =3  #define PROTECTION_SET_LEVEL_RESERVED1_SHIFT_V2                                          0x04
6326      =3  #define PROTECTION_SET_LEVEL2_RF_PROTECTION_STATE_MASK_V2                                0x0F
6327      =3  #define PROTECTION_SET_LEVEL2_RESERVED2_MASK_V2                                          0xF0
6328      =3  #define PROTECTION_SET_LEVEL2_RESERVED2_SHIFT_V2                                         0x04
6329      =3  /* Values used for Protection Supported Report command */
6330      =3  #define PROTECTION_SUPPORTED_REPORT_LEVEL_TIMEOUT_BIT_MASK_V2                            0x01
6331      =3  #define PROTECTION_SUPPORTED_REPORT_LEVEL_EXCLUSIVE_CONTROL_BIT_MASK_V2                  0x02
6332      =3  #define PROTECTION_SUPPORTED_REPORT_LEVEL_RESERVED_MASK_V2                               0xFC
6333      =3  #define PROTECTION_SUPPORTED_REPORT_LEVEL_RESERVED_SHIFT_V2                              0x02
6334      =3  
6335      =3  /* Rate Tbl Config command class commands */
6336      =3  #define RATE_TBL_CONFIG_VERSION                                                          0x01
6337      =3  #define RATE_TBL_REMOVE                                                                  0x02
6338      =3  #define RATE_TBL_SET                                                                     0x01
6339      =3  /* Values used for Rate Tbl Remove command */
6340      =3  #define RATE_TBL_REMOVE_PROPERTIES1_RATE_PARAMETER_SET_IDS_MASK                          0x3F
6341      =3  #define RATE_TBL_REMOVE_PROPERTIES1_RESERVED_MASK                                        0xC0
6342      =3  #define RATE_TBL_REMOVE_PROPERTIES1_RESERVED_SHIFT                                       0x06
6343      =3  /* Values used for Rate Tbl Set command */
6344      =3  #define RATE_TBL_SET_PROPERTIES1_NUMBER_OF_RATE_CHAR_MASK                                0x1F
6345      =3  #define RATE_TBL_SET_PROPERTIES1_RATE_TYPE_MASK                                          0x60
6346      =3  #define RATE_TBL_SET_PROPERTIES1_RATE_TYPE_SHIFT                                         0x05
6347      =3  #define RATE_TBL_SET_PROPERTIES1_RESERVED_BIT_MASK                                       0x80
6348      =3  #define RATE_TBL_SET_PROPERTIES2_CONSUMPTION_SCALE_MASK                                  0x1F
6349      =3  #define RATE_TBL_SET_PROPERTIES2_CONSUMPTION_PRECISION_MASK                              0xE0
6350      =3  #define RATE_TBL_SET_PROPERTIES2_CONSUMPTION_PRECISION_SHIFT                             0x05
6351      =3  #define RATE_TBL_SET_PROPERTIES3_MAX_DEMAND_SCALE_MASK                                   0x1F
6352      =3  #define RATE_TBL_SET_PROPERTIES3_MAX_DEMAND_PRECISION_MASK                               0xE0
6353      =3  #define RATE_TBL_SET_PROPERTIES3_MAX_DEMAND_PRECISION_SHIFT                              0x05
6354      =3  
6355      =3  /* Rate Tbl Monitor command class commands */
6356      =3  #define RATE_TBL_MONITOR_VERSION                                                         0x01
6357      =3  #define RATE_TBL_ACTIVE_RATE_GET                                                         0x05
6358      =3  #define RATE_TBL_ACTIVE_RATE_REPORT                                                      0x06
6359      =3  #define RATE_TBL_CURRENT_DATA_GET                                                        0x07
6360      =3  #define RATE_TBL_CURRENT_DATA_REPORT                                                     0x08
6361      =3  #define RATE_TBL_GET                                                                     0x03
6362      =3  #define RATE_TBL_HISTORICAL_DATA_GET                                                     0x09
6363      =3  #define RATE_TBL_HISTORICAL_DATA_REPORT                                                  0x0A
6364      =3  #define RATE_TBL_REPORT                                                                  0x04
6365      =3  #define RATE_TBL_SUPPORTED_GET                                                           0x01
6366      =3  #define RATE_TBL_SUPPORTED_REPORT                                                        0x02
6367      =3  /* Values used for Rate Tbl Report command */
6368      =3  #define RATE_TBL_REPORT_PROPERTIES1_NUMBER_OF_RATE_CHAR_MASK                             0x1F
6369      =3  #define RATE_TBL_REPORT_PROPERTIES1_RATE_TYPE_MASK                                       0x60
6370      =3  #define RATE_TBL_REPORT_PROPERTIES1_RATE_TYPE_SHIFT                                      0x05
6371      =3  #define RATE_TBL_REPORT_PROPERTIES1_RESERVED_BIT_MASK                                    0x80
6372      =3  #define RATE_TBL_REPORT_PROPERTIES2_CONSUMPTION_SCALE_MASK                               0x1F
6373      =3  #define RATE_TBL_REPORT_PROPERTIES2_CONSUMPTION_PRECISION_MASK                           0xE0
6374      =3  #define RATE_TBL_REPORT_PROPERTIES2_CONSUMPTION_PRECISION_SHIFT                          0x05
6375      =3  #define RATE_TBL_REPORT_PROPERTIES3_MAX_DEMAND_SCALE_MASK                                0x1F
6376      =3  #define RATE_TBL_REPORT_PROPERTIES3_MAX_DEMAND_PRECISION_MASK                            0xE0
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 119 

6377      =3  #define RATE_TBL_REPORT_PROPERTIES3_MAX_DEMAND_PRECISION_SHIFT                           0x05
6378      =3  
6379      =3  /* Remote Association Activate command class commands */
6380      =3  #define REMOTE_ASSOCIATION_ACTIVATE_VERSION                                              0x01
6381      =3  #define REMOTE_ASSOCIATION_ACTIVATE                                                      0x01
6382      =3  
6383      =3  /* Remote Association command class commands */
6384      =3  #define REMOTE_ASSOCIATION_VERSION                                                       0x01
6385      =3  #define REMOTE_ASSOCIATION_CONFIGURATION_GET                                             0x02
6386      =3  #define REMOTE_ASSOCIATION_CONFIGURATION_REPORT                                          0x03
6387      =3  #define REMOTE_ASSOCIATION_CONFIGURATION_SET                                             0x01
6388      =3  
6389      =3  /* Scene Activation command class commands */
6390      =3  #define SCENE_ACTIVATION_VERSION                                                         0x01
6391      =3  #define SCENE_ACTIVATION_SET                                                             0x01
6392      =3  
6393      =3  /* Scene Actuator Conf command class commands */
6394      =3  #define SCENE_ACTUATOR_CONF_VERSION                                                      0x01
6395      =3  #define SCENE_ACTUATOR_CONF_GET                                                          0x02
6396      =3  #define SCENE_ACTUATOR_CONF_REPORT                                                       0x03
6397      =3  #define SCENE_ACTUATOR_CONF_SET                                                          0x01
6398      =3  /* Values used for Scene Actuator Conf Set command */
6399      =3  #define SCENE_ACTUATOR_CONF_SET_LEVEL2_RESERVED_MASK                                     0x7F
6400      =3  #define SCENE_ACTUATOR_CONF_SET_LEVEL2_OVERRIDE_BIT_MASK                                 0x80
6401      =3  
6402      =3  /* Scene Controller Conf command class commands */
6403      =3  #define SCENE_CONTROLLER_CONF_VERSION                                                    0x01
6404      =3  #define SCENE_CONTROLLER_CONF_GET                                                        0x02
6405      =3  #define SCENE_CONTROLLER_CONF_REPORT                                                     0x03
6406      =3  #define SCENE_CONTROLLER_CONF_SET                                                        0x01
6407      =3  
6408      =3  /* Schedule Entry Lock command class commands */
6409      =3  #define SCHEDULE_ENTRY_LOCK_VERSION                                                      0x01
6410      =3  #define SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET                                               0x02
6411      =3  #define SCHEDULE_ENTRY_LOCK_ENABLE_SET                                                   0x01
6412      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET                                                 0x04
6413      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT                                              0x05
6414      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET                                                 0x03
6415      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET                                                 0x07
6416      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT                                              0x08
6417      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET                                                 0x06
6418      =3  #define SCHEDULE_ENTRY_TYPE_SUPPORTED_GET                                                0x09
6419      =3  #define SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT                                             0x0A
6420      =3  
6421      =3  /* Schedule Entry Lock command class commands */
6422      =3  #define SCHEDULE_ENTRY_LOCK_VERSION_V2                                                   0x02
6423      =3  #define SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V2                                            0x02
6424      =3  #define SCHEDULE_ENTRY_LOCK_ENABLE_SET_V2                                                0x01
6425      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V2                                           0x0B
6426      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V2                                        0x0C
6427      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V2                                           0x0D
6428      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V2                                              0x04
6429      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V2                                           0x05
6430      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V2                                              0x03
6431      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V2                                              0x07
6432      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V2                                           0x08
6433      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V2                                              0x06
6434      =3  #define SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V2                                             0x09
6435      =3  #define SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V2                                          0x0A
6436      =3  /* Values used for Schedule Entry Lock Time Offset Report command */
6437      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL_HOUR_TZO_MASK_V2                    0x7F
6438      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL_SIGN_TZO_BIT_MASK_V2                0x80
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 120 

6439      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL2_MINUTE_OFFSET_DST_MASK_V2          0x7F
6440      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL2_SIGN_OFFSET_DST_BIT_MASK_V2        0x80
6441      =3  /* Values used for Schedule Entry Lock Time Offset Set command */
6442      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL_HOUR_TZO_MASK_V2                       0x7F
6443      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL_SIGN_TZO_BIT_MASK_V2                   0x80
6444      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL2_MINUTE_OFFSET_DST_MASK_V2             0x7F
6445      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL2_SIGN_OFFSET_DST_BIT_MASK_V2           0x80
6446      =3  
6447      =3  /* Schedule Entry Lock command class commands */
6448      =3  #define SCHEDULE_ENTRY_LOCK_VERSION_V3                                                   0x03
6449      =3  #define SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V3                                            0x02
6450      =3  #define SCHEDULE_ENTRY_LOCK_ENABLE_SET_V3                                                0x01
6451      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V3                                           0x0B
6452      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V3                                        0x0C
6453      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V3                                           0x0D
6454      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V3                                              0x04
6455      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V3                                           0x05
6456      =3  #define SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V3                                              0x03
6457      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V3                                              0x07
6458      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V3                                           0x08
6459      =3  #define SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V3                                              0x06
6460      =3  #define SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V3                                             0x09
6461      =3  #define SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V3                                          0x0A
6462      =3  #define SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_GET_V3                                       0x0E
6463      =3  #define SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_REPORT_V3                                    0x0F
6464      =3  #define SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_SET_V3                                       0x10
6465      =3  /* Values used for Schedule Entry Lock Time Offset Report command */
6466      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL_HOUR_TZO_MASK_V3                    0x7F
6467      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL_SIGN_TZO_BIT_MASK_V3                0x80
6468      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL2_MINUTE_OFFSET_DST_MASK_V3          0x7F
6469      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_LEVEL2_SIGN_OFFSET_DST_BIT_MASK_V3        0x80
6470      =3  /* Values used for Schedule Entry Lock Time Offset Set command */
6471      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL_HOUR_TZO_MASK_V3                       0x7F
6472      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL_SIGN_TZO_BIT_MASK_V3                   0x80
6473      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL2_MINUTE_OFFSET_DST_MASK_V3             0x7F
6474      =3  #define SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_LEVEL2_SIGN_OFFSET_DST_BIT_MASK_V3           0x80
6475      =3  
6476      =3  /* Screen Attributes command class commands */
6477      =3  #define SCREEN_ATTRIBUTES_VERSION                                                        0x01
6478      =3  #define SCREEN_ATTRIBUTES_GET                                                            0x01
6479      =3  #define SCREEN_ATTRIBUTES_REPORT                                                         0x02
6480      =3  /* Values used for Screen Attributes Report command */
6481      =3  #define SCREEN_ATTRIBUTES_REPORT_PROPERTIES1_NUMBER_OF_LINES_MASK                        0x1F
6482      =3  #define SCREEN_ATTRIBUTES_REPORT_PROPERTIES1_RESERVED_MASK                               0xE0
6483      =3  #define SCREEN_ATTRIBUTES_REPORT_PROPERTIES1_RESERVED_SHIFT                              0x05
6484      =3  
6485      =3  /* Screen Attributes command class commands */
6486      =3  #define SCREEN_ATTRIBUTES_VERSION_V2                                                     0x02
6487      =3  #define SCREEN_ATTRIBUTES_GET_V2                                                         0x01
6488      =3  #define SCREEN_ATTRIBUTES_REPORT_V2                                                      0x03
6489      =3  /* Values used for Screen Attributes Report command */
6490      =3  #define SCREEN_ATTRIBUTES_REPORT_PROPERTIES1_NUMBER_OF_LINES_MASK_V2                     0x1F
6491      =3  #define SCREEN_ATTRIBUTES_REPORT_PROPERTIES1_ESCAPE_SEQUENCE_BIT_MASK_V2                 0x20
6492      =3  #define SCREEN_ATTRIBUTES_REPORT_PROPERTIES1_RESERVED_MASK_V2                            0xC0
6493      =3  #define SCREEN_ATTRIBUTES_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                           0x06
6494      =3  
6495      =3  /* Screen Md command class commands */
6496      =3  #define SCREEN_MD_VERSION                                                                0x01
6497      =3  #define SCREEN_MD_GET                                                                    0x01
6498      =3  #define SCREEN_MD_REPORT                                                                 0x02
6499      =3  /* Values used for Screen Md Report command */
6500      =3  #define SCREEN_MD_REPORT_PROPERTIES1_CHAR_PRESENTATION_MASK                              0x07
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 121 

6501      =3  #define SCREEN_MD_REPORT_PROPERTIES1_SCREEN_SETTINGS_MASK                                0x38
6502      =3  #define SCREEN_MD_REPORT_PROPERTIES1_SCREEN_SETTINGS_SHIFT                               0x03
6503      =3  #define SCREEN_MD_REPORT_PROPERTIES1_RESERVED_BIT_MASK                                   0x40
6504      =3  #define SCREEN_MD_REPORT_PROPERTIES1_MORE_DATA_BIT_MASK                                  0x80
6505      =3  
6506      =3  /* Screen Md command class commands */
6507      =3  #define SCREEN_MD_VERSION_V2                                                             0x02
6508      =3  #define SCREEN_MD_GET_V2                                                                 0x01
6509      =3  #define SCREEN_MD_REPORT_V2                                                              0x03
6510      =3  /* Values used for Screen Md Report command */
6511      =3  #define SCREEN_MD_REPORT_PROPERTIES1_CHAR_PRESENTATION_MASK_V2                           0x07
6512      =3  #define SCREEN_MD_REPORT_PROPERTIES1_SCREEN_SETTINGS_MASK_V2                             0x38
6513      =3  #define SCREEN_MD_REPORT_PROPERTIES1_SCREEN_SETTINGS_SHIFT_V2                            0x03
6514      =3  #define SCREEN_MD_REPORT_PROPERTIES1_RESERVED1_BIT_MASK_V2                               0x40
6515      =3  #define SCREEN_MD_REPORT_PROPERTIES1_MORE_DATA_BIT_MASK_V2                               0x80
6516      =3  #define SCREEN_MD_REPORT_PROPERTIES2_SCREEN_TIMEOUT_BIT_MASK_V2                          0x01
6517      =3  #define SCREEN_MD_REPORT_PROPERTIES2_RESERVED2_MASK_V2                                   0xFE
6518      =3  #define SCREEN_MD_REPORT_PROPERTIES2_RESERVED2_SHIFT_V2                                  0x01
6519      =3  
6520      =3  /* Security Panel Mode command class commands */
6521      =3  #define SECURITY_PANEL_MODE_VERSION                                                      0x01
6522      =3  #define SECURITY_PANEL_MODE_GET                                                          0x03
6523      =3  #define SECURITY_PANEL_MODE_REPORT                                                       0x04
6524      =3  #define SECURITY_PANEL_MODE_SET                                                          0x05
6525      =3  #define SECURITY_PANEL_MODE_SUPPORTED_GET                                                0x01
6526      =3  #define SECURITY_PANEL_MODE_SUPPORTED_REPORT                                             0x02
6527      =3  
6528      =3  /* Security Panel Zone Sensor command class commands */
6529      =3  #define SECURITY_PANEL_ZONE_SENSOR_VERSION                                               0x01
6530      =3  #define COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT                        0x02
6531      =3  #define SECURITY_PANEL_ZONE_SENSOR_TYPE_GET                                              0x03
6532      =3  #define SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT                                           0x04
6533      =3  #define SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET                                         0x01
6534      =3  #define SECURITY_PANEL_ZONE_SENSOR_STATE_GET                                             0x05
6535      =3  #define SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT                                          0x06
6536      =3  
6537      =3  /* Security Panel Zone command class commands */
6538      =3  #define SECURITY_PANEL_ZONE_VERSION                                                      0x01
6539      =3  #define SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET                                         0x01
6540      =3  #define SECURITY_PANEL_ZONE_STATE_GET                                                    0x05
6541      =3  #define SECURITY_PANEL_ZONE_STATE_REPORT                                                 0x06
6542      =3  #define SECURITY_PANEL_ZONE_SUPPORTED_REPORT                                             0x02
6543      =3  #define SECURITY_PANEL_ZONE_TYPE_GET                                                     0x03
6544      =3  #define SECURITY_PANEL_ZONE_TYPE_REPORT                                                  0x04
6545      =3  /* Values used for Security Panel Zone Supported Report command */
6546      =3  #define SECURITY_PANEL_ZONE_SUPPORTED_REPORT_PARAMETERS1_ZONES_SUPPORTED_MASK            0x7F
6547      =3  #define SECURITY_PANEL_ZONE_SUPPORTED_REPORT_PARAMETERS1_ZM_BIT_MASK                     0x80
6548      =3  
6549      =3  /* Security command class commands */
6550      =3  #define SECURITY_VERSION                                                                 0x01
6551      =3  #define NETWORK_KEY_SET                                                                  0x06
6552      =3  #define NETWORK_KEY_VERIFY                                                               0x07
6553      =3  #define SECURITY_COMMANDS_SUPPORTED_GET                                                  0x02
6554      =3  #define SECURITY_COMMANDS_SUPPORTED_REPORT                                               0x03
6555      =3  #define SECURITY_MESSAGE_ENCAPSULATION                                                   0x81
6556      =3  #define SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET                                         0xC1
6557      =3  #define SECURITY_NONCE_GET                                                               0x40
6558      =3  #define SECURITY_NONCE_REPORT                                                            0x80
6559      =3  #define SECURITY_SCHEME_GET                                                              0x04
6560      =3  #define SECURITY_SCHEME_INHERIT                                                          0x08
6561      =3  #define SECURITY_SCHEME_REPORT                                                           0x05
6562      =3  /* Values used for Security Commands Supported Report command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 122 

6563      =3  #define SECURITY_COMMANDS_SUPPORTED_REPORT_COMMAND_CLASS_MARK                            0xEF /*The COMMAN
             -D_CLASS_MARK is used to indicate that all preceding command classes are supported and all following command classes are 
             -controlled.*/
6564      =3  /* Values used for Security Message Encapsulation command */
6565      =3  #define SECURITY_MESSAGE_ENCAPSULATION_PROPERTIES1_SEQUENCE_COUNTER_MASK                 0x0F
6566      =3  #define SECURITY_MESSAGE_ENCAPSULATION_PROPERTIES1_SEQUENCED_BIT_MASK                    0x10
6567      =3  #define SECURITY_MESSAGE_ENCAPSULATION_PROPERTIES1_SECOND_FRAME_BIT_MASK                 0x20
6568      =3  #define SECURITY_MESSAGE_ENCAPSULATION_PROPERTIES1_RESERVED_MASK                         0xC0
6569      =3  #define SECURITY_MESSAGE_ENCAPSULATION_PROPERTIES1_RESERVED_SHIFT                        0x06
6570      =3  /* Values used for Security Message Encapsulation Nonce Get command */
6571      =3  #define SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_PROPERTIES1_SEQUENCE_COUNTER_MASK       0x0F
6572      =3  #define SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_PROPERTIES1_SEQUENCED_BIT_MASK          0x10
6573      =3  #define SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_PROPERTIES1_SECOND_FRAME_BIT_MASK       0x20
6574      =3  #define SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_PROPERTIES1_RESERVED_MASK               0xC0
6575      =3  #define SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_PROPERTIES1_RESERVED_SHIFT              0x06
6576      =3  
6577      =3  /* Sensor Alarm command class commands */
6578      =3  #define SENSOR_ALARM_VERSION                                                             0x01
6579      =3  #define SENSOR_ALARM_GET                                                                 0x01
6580      =3  #define SENSOR_ALARM_REPORT                                                              0x02
6581      =3  #define SENSOR_ALARM_SUPPORTED_GET                                                       0x03
6582      =3  #define SENSOR_ALARM_SUPPORTED_REPORT                                                    0x04
6583      =3  
6584      =3  /* Sensor Binary command class commands */
6585      =3  #define SENSOR_BINARY_VERSION                                                            0x01
6586      =3  #define SENSOR_BINARY_GET                                                                0x02
6587      =3  #define SENSOR_BINARY_REPORT                                                             0x03
6588      =3  /* Values used for Sensor Binary Report command */
6589      =3  #define SENSOR_BINARY_REPORT_IDLE                                                        0x00
6590      =3  #define SENSOR_BINARY_REPORT_DETECTED_AN_EVENT                                           0xFF
6591      =3  
6592      =3  /* Sensor Binary command class commands */
6593      =3  #define SENSOR_BINARY_VERSION_V2                                                         0x02
6594      =3  #define SENSOR_BINARY_GET_V2                                                             0x02
6595      =3  #define SENSOR_BINARY_REPORT_V2                                                          0x03
6596      =3  #define SENSOR_BINARY_SUPPORTED_GET_SENSOR_V2                                            0x01
6597      =3  #define SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_V2                                         0x04
6598      =3  /* Values used for Sensor Binary Report command */
6599      =3  #define SENSOR_BINARY_REPORT_IDLE_V2                                                     0x00
6600      =3  #define SENSOR_BINARY_REPORT_DETECTED_AN_EVENT_V2                                        0xFF
6601      =3  
6602      =3  /* Sensor Configuration command class commands */
6603      =3  #define SENSOR_CONFIGURATION_VERSION                                                     0x01
6604      =3  #define SENSOR_TRIGGER_LEVEL_GET                                                         0x02
6605      =3  #define SENSOR_TRIGGER_LEVEL_REPORT                                                      0x03
6606      =3  #define SENSOR_TRIGGER_LEVEL_SET                                                         0x01
6607      =3  /* Values used for Sensor Trigger Level Report command */
6608      =3  #define SENSOR_TRIGGER_LEVEL_REPORT_PROPERTIES1_SIZE_MASK                                0x07
6609      =3  #define SENSOR_TRIGGER_LEVEL_REPORT_PROPERTIES1_SCALE_MASK                               0x18
6610      =3  #define SENSOR_TRIGGER_LEVEL_REPORT_PROPERTIES1_SCALE_SHIFT                              0x03
6611      =3  #define SENSOR_TRIGGER_LEVEL_REPORT_PROPERTIES1_PRECISION_MASK                           0xE0
6612      =3  #define SENSOR_TRIGGER_LEVEL_REPORT_PROPERTIES1_PRECISION_SHIFT                          0x05
6613      =3  /* Values used for Sensor Trigger Level Set command */
6614      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES1_RESERVED_MASK                               0x3F
6615      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES1_CURRENT_BIT_MASK                            0x40
6616      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES1_DEFAULT_BIT_MASK                            0x80
6617      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES2_SIZE_MASK                                   0x07
6618      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES2_SCALE_MASK                                  0x18
6619      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES2_SCALE_SHIFT                                 0x03
6620      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES2_PRECISION_MASK                              0xE0
6621      =3  #define SENSOR_TRIGGER_LEVEL_SET_PROPERTIES2_PRECISION_SHIFT                             0x05
6622      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 123 

6623      =3  /* Sensor Multilevel command class commands */
6624      =3  #define SENSOR_MULTILEVEL_VERSION                                                        0x01
6625      =3  #define SENSOR_MULTILEVEL_GET                                                            0x04
6626      =3  #define SENSOR_MULTILEVEL_REPORT                                                         0x05
6627      =3  /* Values used for Sensor Multilevel Report command */
6628      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1                                   0x01
6629      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1                         0x02
6630      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1                                     0x03
6631      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK                                         0x07
6632      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK                                        0x18
6633      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT                                       0x03
6634      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK                                    0xE0
6635      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT                                   0x05
6636      =3  
6637      =3  /* Sensor Multilevel command class commands */
6638      =3  #define SENSOR_MULTILEVEL_VERSION_V2                                                     0x02
6639      =3  #define SENSOR_MULTILEVEL_GET_V2                                                         0x04
6640      =3  #define SENSOR_MULTILEVEL_REPORT_V2                                                      0x05
6641      =3  /* Values used for Sensor Multilevel Report command */
6642      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V2                                0x01
6643      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V2                      0x02
6644      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V2                                  0x03
6645      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V2                                      0x04
6646      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V2                          0x05
6647      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V2                                   0x06
6648      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V2                                  0x07
6649      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V2                       0x08
6650      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V2                        0x09
6651      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V2                            0x0A
6652      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V2                                  0x0B
6653      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V2                                  0x0C
6654      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V2                                 0x0D
6655      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V2                                      0x07
6656      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V2                                     0x18
6657      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V2                                    0x03
6658      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V2                                 0xE0
6659      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V2                                0x05
6660      =3  
6661      =3  /* Sensor Multilevel command class commands */
6662      =3  #define SENSOR_MULTILEVEL_VERSION_V3                                                     0x03
6663      =3  #define SENSOR_MULTILEVEL_GET_V3                                                         0x04
6664      =3  #define SENSOR_MULTILEVEL_REPORT_V3                                                      0x05
6665      =3  /* Values used for Sensor Multilevel Report command */
6666      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V3                                0x01
6667      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V3                      0x02
6668      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V3                                  0x03
6669      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V3                                      0x04
6670      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V3                          0x05
6671      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V3                                   0x06
6672      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V3                                  0x07
6673      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V3                       0x08
6674      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V3                        0x09
6675      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V3                            0x0A
6676      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V3                                  0x0B
6677      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V3                                  0x0C
6678      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V3                                 0x0D
6679      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V3                                     0x0E
6680      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V3                                    0x0F
6681      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V3                                    0x10
6682      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V3                                  0x11
6683      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V3                                   0x12
6684      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V3                              0x13
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 124 

6685      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V3                                   0x14
6686      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V3                                      0x07
6687      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V3                                     0x18
6688      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V3                                    0x03
6689      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V3                                 0xE0
6690      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V3                                0x05
6691      =3  
6692      =3  /* Sensor Multilevel command class commands */
6693      =3  #define SENSOR_MULTILEVEL_VERSION_V4                                                     0x04
6694      =3  #define SENSOR_MULTILEVEL_GET_V4                                                         0x04
6695      =3  #define SENSOR_MULTILEVEL_REPORT_V4                                                      0x05
6696      =3  /* Values used for Sensor Multilevel Report command */
6697      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V4                                0x01
6698      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V4                      0x02
6699      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V4                                  0x03
6700      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V4                                      0x04
6701      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V4                          0x05
6702      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V4                                   0x06
6703      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V4                                  0x07
6704      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V4                       0x08
6705      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V4                        0x09
6706      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V4                            0x0A
6707      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V4                                  0x0B
6708      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V4                                  0x0C
6709      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V4                                 0x0D
6710      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V4                                     0x0E
6711      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V4                                    0x0F
6712      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V4                                    0x10
6713      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V4                                  0x11
6714      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V4                                   0x12
6715      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V4                              0x13
6716      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V4                                   0x14
6717      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V4                             0x15
6718      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V4                                      0x07
6719      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V4                                     0x18
6720      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V4                                    0x03
6721      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V4                                 0xE0
6722      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V4                                0x05
6723      =3  
6724      =3  /* Sensor Multilevel command class commands */
6725      =3  #define SENSOR_MULTILEVEL_VERSION_V5                                                     0x05
6726      =3  #define SENSOR_MULTILEVEL_GET_V5                                                         0x04
6727      =3  #define SENSOR_MULTILEVEL_REPORT_V5                                                      0x05
6728      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V5                                        0x01
6729      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_V5                                     0x02
6730      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V5                                         0x03
6731      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V5                                      0x06
6732      =3  /* Values used for Sensor Multilevel Get command */
6733      =3  #define SENSOR_MULTILEVEL_GET_TEMPERATURE_VERSION_1_V5                                   0x01
6734      =3  #define SENSOR_MULTILEVEL_GET_GENERAL_PURPOSE_VALUE_VERSION_1_V5                         0x02
6735      =3  #define SENSOR_MULTILEVEL_GET_LUMINANCE_VERSION_1_V5                                     0x03
6736      =3  #define SENSOR_MULTILEVEL_GET_POWER_VERSION_2_V5                                         0x04
6737      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_HUMIDITY_VERSION_2_V5                             0x05
6738      =3  #define SENSOR_MULTILEVEL_GET_VELOCITY_VERSION_2_V5                                      0x06
6739      =3  #define SENSOR_MULTILEVEL_GET_DIRECTION_VERSION_2_V5                                     0x07
6740      =3  #define SENSOR_MULTILEVEL_GET_ATMOSPHERIC_PRESSURE_VERSION_2_V5                          0x08
6741      =3  #define SENSOR_MULTILEVEL_GET_BAROMETRIC_PRESSURE_VERSION_2_V5                           0x09
6742      =3  #define SENSOR_MULTILEVEL_GET_SOLAR_RADIATION_VERSION_2_V5                               0x0A
6743      =3  #define SENSOR_MULTILEVEL_GET_DEW_POINT_VERSION_2_V5                                     0x0B
6744      =3  #define SENSOR_MULTILEVEL_GET_RAIN_RATE_VERSION_2_V5                                     0x0C
6745      =3  #define SENSOR_MULTILEVEL_GET_TIDE_LEVEL_VERSION_2_V5                                    0x0D
6746      =3  #define SENSOR_MULTILEVEL_GET_WEIGHT_VERSION_3_V5                                        0x0E
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 125 

6747      =3  #define SENSOR_MULTILEVEL_GET_VOLTAGE_VERSION_3_V5                                       0x0F
6748      =3  #define SENSOR_MULTILEVEL_GET_CURRENT_VERSION_3_V5                                       0x10
6749      =3  #define SENSOR_MULTILEVEL_GET_CO2_LEVEL_VERSION_3_V5                                     0x11
6750      =3  #define SENSOR_MULTILEVEL_GET_AIR_FLOW_VERSION_3_V5                                      0x12
6751      =3  #define SENSOR_MULTILEVEL_GET_TANK_CAPACITY_VERSION_3_V5                                 0x13
6752      =3  #define SENSOR_MULTILEVEL_GET_DISTANCE_VERSION_3_V5                                      0x14
6753      =3  #define SENSOR_MULTILEVEL_GET_ANGLE_POSITION_VERSION_4_V5                                0x15
6754      =3  #define SENSOR_MULTILEVEL_GET_ROTATION_V5_V5                                             0x16
6755      =3  #define SENSOR_MULTILEVEL_GET_WATER_TEMPERATURE_V5_V5                                    0x17
6756      =3  #define SENSOR_MULTILEVEL_GET_SOIL_TEMPERATURE_V5_V5                                     0x18
6757      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_INTENSITY_V5_V5                                    0x19
6758      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_MAGNITUDE_V5_V5                                    0x1A
6759      =3  #define SENSOR_MULTILEVEL_GET_ULTRAVIOLET_V5_V5                                          0x1B
6760      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_RESISTIVITY_V5_V5                               0x1C
6761      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_CONDUCTIVITY_V5_V5                              0x1D
6762      =3  #define SENSOR_MULTILEVEL_GET_LOUDNESS_V5_V5                                             0x1E
6763      =3  #define SENSOR_MULTILEVEL_GET_MOISTURE_V5_V5                                             0x1F
6764      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED1_MASK_V5                              0x07
6765      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_MASK_V5                                  0x18
6766      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_SHIFT_V5                                 0x03
6767      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_MASK_V5                              0xE0
6768      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_SHIFT_V5                             0x05
6769      =3  /* Values used for Sensor Multilevel Report command */
6770      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V5                                0x01
6771      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V5                      0x02
6772      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V5                                  0x03
6773      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V5                                      0x04
6774      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V5                          0x05
6775      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V5                                   0x06
6776      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V5                                  0x07
6777      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V5                       0x08
6778      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V5                        0x09
6779      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V5                            0x0A
6780      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V5                                  0x0B
6781      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V5                                  0x0C
6782      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V5                                 0x0D
6783      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V5                                     0x0E
6784      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V5                                    0x0F
6785      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V5                                    0x10
6786      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V5                                  0x11
6787      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V5                                   0x12
6788      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V5                              0x13
6789      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V5                                   0x14
6790      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V5                             0x15
6791      =3  #define SENSOR_MULTILEVEL_REPORT_ROTATION_V5_V5                                          0x16
6792      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_TEMPERATURE_V5_V5                                 0x17
6793      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_TEMPERATURE_V5_V5                                  0x18
6794      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_INTENSITY_V5_V5                                 0x19
6795      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_MAGNITUDE_V5_V5                                 0x1A
6796      =3  #define SENSOR_MULTILEVEL_REPORT_ULTRAVIOLET_V5_V5                                       0x1B
6797      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_RESISTIVITY_V5_V5                            0x1C
6798      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V5                           0x1D
6799      =3  #define SENSOR_MULTILEVEL_REPORT_LOUDNESS_V5_V5                                          0x1E
6800      =3  #define SENSOR_MULTILEVEL_REPORT_MOISTURE_V5_V5                                          0x1F
6801      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V5                                      0x07
6802      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V5                                     0x18
6803      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V5                                    0x03
6804      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V5                                 0xE0
6805      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V5                                0x05
6806      =3  /* Values used for Sensor Multilevel Supported Get Scale command */
6807      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TEMPERATURE_VERSION_1_V5                   0x01
6808      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_GENERAL_PURPOSE_VALUE_VERSION_1_V5         0x02
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 126 

6809      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LUMINANCE_VERSION_1_V5                     0x03
6810      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_POWER_VERSION_2_V5                         0x04
6811      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_HUMIDITY_VERSION_2_V5             0x05
6812      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VELOCITY_VERSION_2_V5                      0x06
6813      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DIRECTION_VERSION_2_V5                     0x07
6814      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ATMOSPHERIC_PRESSURE_VERSION_2_V5          0x08
6815      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BAROMETRIC_PRESSURE_VERSION_2_V5           0x09
6816      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOLAR_RADIATION_VERSION_2_V5               0x0A
6817      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DEW_POINT_VERSION_2_V5                     0x0B
6818      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RAIN_RATE_VERSION_2_V5                     0x0C
6819      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIDE_LEVEL_VERSION_2_V5                    0x0D
6820      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WEIGHT_VERSION_3_V5                        0x0E
6821      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLTAGE_VERSION_3_V5                       0x0F
6822      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CURRENT_VERSION_3_V5                       0x10
6823      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CO2_LEVEL_VERSION_3_V5                     0x11
6824      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_AIR_FLOW_VERSION_3_V5                      0x12
6825      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TANK_CAPACITY_VERSION_3_V5                 0x13
6826      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DISTANCE_VERSION_3_V5                      0x14
6827      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ANGLE_POSITION_VERSION_4_V5                0x15
6828      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ROTATION_V5_V5                             0x16
6829      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_TEMPERATURE_V5_V5                    0x17
6830      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_TEMPERATURE_V5_V5                     0x18
6831      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_INTENSITY_V5_V5                    0x19
6832      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_MAGNITUDE_V5_V5                    0x1A
6833      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ULTRAVIOLET_V5_V5                          0x1B
6834      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_RESISTIVITY_V5_V5               0x1C
6835      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_CONDUCTIVITY_V5_V5              0x1D
6836      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LOUDNESS_V5_V5                             0x1E
6837      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MOISTURE_V5_V5                             0x1F
6838      =3  /* Values used for Sensor Multilevel Supported Scale Report command */
6839      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TEMPERATURE_VERSION_1_V5                0x01
6840      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V5      0x02
6841      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LUMINANCE_VERSION_1_V5                  0x03
6842      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_POWER_VERSION_2_V5                      0x04
6843      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_HUMIDITY_VERSION_2_V5          0x05
6844      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VELOCITY_VERSION_2_V5                   0x06
6845      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DIRECTION_VERSION_2_V5                  0x07
6846      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V5       0x08
6847      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V5        0x09
6848      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOLAR_RADIATION_VERSION_2_V5            0x0A
6849      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DEW_POINT_VERSION_2_V5                  0x0B
6850      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RAIN_RATE_VERSION_2_V5                  0x0C
6851      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIDE_LEVEL_VERSION_2_V5                 0x0D
6852      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WEIGHT_VERSION_3_V5                     0x0E
6853      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLTAGE_VERSION_3_V5                    0x0F
6854      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CURRENT_VERSION_3_V5                    0x10
6855      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CO2_LEVEL_VERSION_3_V5                  0x11
6856      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_AIR_FLOW_VERSION_3_V5                   0x12
6857      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TANK_CAPACITY_VERSION_3_V5              0x13
6858      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DISTANCE_VERSION_3_V5                   0x14
6859      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ANGLE_POSITION_VERSION_4_V5             0x15
6860      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ROTATION_V5_V5                          0x16
6861      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_TEMPERATURE_V5_V5                 0x17
6862      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_TEMPERATURE_V5_V5                  0x18
6863      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_INTENSITY_V5_V5                 0x19
6864      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_MAGNITUDE_V5_V5                 0x1A
6865      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ULTRAVIOLET_V5_V5                       0x1B
6866      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_RESISTIVITY_V5_V5            0x1C
6867      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V5           0x1D
6868      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LOUDNESS_V5_V5                          0x1E
6869      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MOISTURE_V5_V5                          0x1F
6870      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK_V5      0x0F
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 127 

6871      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_MASK_V5            0xF0
6872      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_SHIFT_V5           0x04
6873      =3  
6874      =3  /* Sensor Multilevel command class commands */
6875      =3  #define SENSOR_MULTILEVEL_VERSION_V6                                                     0x06
6876      =3  #define SENSOR_MULTILEVEL_GET_V6                                                         0x04
6877      =3  #define SENSOR_MULTILEVEL_REPORT_V6                                                      0x05
6878      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V6                                        0x01
6879      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_V6                                     0x02
6880      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V6                                         0x03
6881      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V6                                      0x06
6882      =3  /* Values used for Sensor Multilevel Get command */
6883      =3  #define SENSOR_MULTILEVEL_GET_TEMPERATURE_VERSION_1_V6                                   0x01
6884      =3  #define SENSOR_MULTILEVEL_GET_GENERAL_PURPOSE_VALUE_VERSION_1_V6                         0x02
6885      =3  #define SENSOR_MULTILEVEL_GET_LUMINANCE_VERSION_1_V6                                     0x03
6886      =3  #define SENSOR_MULTILEVEL_GET_POWER_VERSION_2_V6                                         0x04
6887      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_HUMIDITY_VERSION_2_V6                             0x05
6888      =3  #define SENSOR_MULTILEVEL_GET_VELOCITY_VERSION_2_V6                                      0x06
6889      =3  #define SENSOR_MULTILEVEL_GET_DIRECTION_VERSION_2_V6                                     0x07
6890      =3  #define SENSOR_MULTILEVEL_GET_ATMOSPHERIC_PRESSURE_VERSION_2_V6                          0x08
6891      =3  #define SENSOR_MULTILEVEL_GET_BAROMETRIC_PRESSURE_VERSION_2_V6                           0x09
6892      =3  #define SENSOR_MULTILEVEL_GET_SOLAR_RADIATION_VERSION_2_V6                               0x0A
6893      =3  #define SENSOR_MULTILEVEL_GET_DEW_POINT_VERSION_2_V6                                     0x0B
6894      =3  #define SENSOR_MULTILEVEL_GET_RAIN_RATE_VERSION_2_V6                                     0x0C
6895      =3  #define SENSOR_MULTILEVEL_GET_TIDE_LEVEL_VERSION_2_V6                                    0x0D
6896      =3  #define SENSOR_MULTILEVEL_GET_WEIGHT_VERSION_3_V6                                        0x0E
6897      =3  #define SENSOR_MULTILEVEL_GET_VOLTAGE_VERSION_3_V6                                       0x0F
6898      =3  #define SENSOR_MULTILEVEL_GET_CURRENT_VERSION_3_V6                                       0x10
6899      =3  #define SENSOR_MULTILEVEL_GET_CO2_LEVEL_VERSION_3_V6                                     0x11
6900      =3  #define SENSOR_MULTILEVEL_GET_AIR_FLOW_VERSION_3_V6                                      0x12
6901      =3  #define SENSOR_MULTILEVEL_GET_TANK_CAPACITY_VERSION_3_V6                                 0x13
6902      =3  #define SENSOR_MULTILEVEL_GET_DISTANCE_VERSION_3_V6                                      0x14
6903      =3  #define SENSOR_MULTILEVEL_GET_ANGLE_POSITION_VERSION_4_V6                                0x15
6904      =3  #define SENSOR_MULTILEVEL_GET_ROTATION_V5_V6                                             0x16
6905      =3  #define SENSOR_MULTILEVEL_GET_WATER_TEMPERATURE_V5_V6                                    0x17
6906      =3  #define SENSOR_MULTILEVEL_GET_SOIL_TEMPERATURE_V5_V6                                     0x18
6907      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_INTENSITY_V5_V6                                    0x19
6908      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_MAGNITUDE_V5_V6                                    0x1A
6909      =3  #define SENSOR_MULTILEVEL_GET_ULTRAVIOLET_V5_V6                                          0x1B
6910      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_RESISTIVITY_V5_V6                               0x1C
6911      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_CONDUCTIVITY_V5_V6                              0x1D
6912      =3  #define SENSOR_MULTILEVEL_GET_LOUDNESS_V5_V6                                             0x1E
6913      =3  #define SENSOR_MULTILEVEL_GET_MOISTURE_V5_V6                                             0x1F
6914      =3  #define SENSOR_MULTILEVEL_GET_FREQUENCY_V6_V6                                            0x20
6915      =3  #define SENSOR_MULTILEVEL_GET_TIME_V6_V6                                                 0x21
6916      =3  #define SENSOR_MULTILEVEL_GET_TARGET_TEMPERATURE_V6_V6                                   0x22
6917      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED1_MASK_V6                              0x07
6918      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_MASK_V6                                  0x18
6919      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_SHIFT_V6                                 0x03
6920      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_MASK_V6                              0xE0
6921      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_SHIFT_V6                             0x05
6922      =3  /* Values used for Sensor Multilevel Report command */
6923      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V6                                0x01
6924      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V6                      0x02
6925      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V6                                  0x03
6926      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V6                                      0x04
6927      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V6                          0x05
6928      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V6                                   0x06
6929      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V6                                  0x07
6930      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V6                       0x08
6931      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V6                        0x09
6932      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V6                            0x0A
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 128 

6933      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V6                                  0x0B
6934      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V6                                  0x0C
6935      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V6                                 0x0D
6936      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V6                                     0x0E
6937      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V6                                    0x0F
6938      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V6                                    0x10
6939      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V6                                  0x11
6940      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V6                                   0x12
6941      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V6                              0x13
6942      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V6                                   0x14
6943      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V6                             0x15
6944      =3  #define SENSOR_MULTILEVEL_REPORT_ROTATION_V5_V6                                          0x16
6945      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_TEMPERATURE_V5_V6                                 0x17
6946      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_TEMPERATURE_V5_V6                                  0x18
6947      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_INTENSITY_V5_V6                                 0x19
6948      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_MAGNITUDE_V5_V6                                 0x1A
6949      =3  #define SENSOR_MULTILEVEL_REPORT_ULTRAVIOLET_V5_V6                                       0x1B
6950      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_RESISTIVITY_V5_V6                            0x1C
6951      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V6                           0x1D
6952      =3  #define SENSOR_MULTILEVEL_REPORT_LOUDNESS_V5_V6                                          0x1E
6953      =3  #define SENSOR_MULTILEVEL_REPORT_MOISTURE_V5_V6                                          0x1F
6954      =3  #define SENSOR_MULTILEVEL_REPORT_FREQUENCY_V6_V6                                         0x20
6955      =3  #define SENSOR_MULTILEVEL_REPORT_TIME_V6_V6                                              0x21
6956      =3  #define SENSOR_MULTILEVEL_REPORT_TARGET_TEMPERATURE_V6_V6                                0x22
6957      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V6                                      0x07
6958      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V6                                     0x18
6959      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V6                                    0x03
6960      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V6                                 0xE0
6961      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V6                                0x05
6962      =3  /* Values used for Sensor Multilevel Supported Get Scale command */
6963      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TEMPERATURE_VERSION_1_V6                   0x01
6964      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_GENERAL_PURPOSE_VALUE_VERSION_1_V6         0x02
6965      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LUMINANCE_VERSION_1_V6                     0x03
6966      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_POWER_VERSION_2_V6                         0x04
6967      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_HUMIDITY_VERSION_2_V6             0x05
6968      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VELOCITY_VERSION_2_V6                      0x06
6969      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DIRECTION_VERSION_2_V6                     0x07
6970      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ATMOSPHERIC_PRESSURE_VERSION_2_V6          0x08
6971      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BAROMETRIC_PRESSURE_VERSION_2_V6           0x09
6972      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOLAR_RADIATION_VERSION_2_V6               0x0A
6973      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DEW_POINT_VERSION_2_V6                     0x0B
6974      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RAIN_RATE_VERSION_2_V6                     0x0C
6975      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIDE_LEVEL_VERSION_2_V6                    0x0D
6976      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WEIGHT_VERSION_3_V6                        0x0E
6977      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLTAGE_VERSION_3_V6                       0x0F
6978      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CURRENT_VERSION_3_V6                       0x10
6979      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CO2_LEVEL_VERSION_3_V6                     0x11
6980      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_AIR_FLOW_VERSION_3_V6                      0x12
6981      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TANK_CAPACITY_VERSION_3_V6                 0x13
6982      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DISTANCE_VERSION_3_V6                      0x14
6983      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ANGLE_POSITION_VERSION_4_V6                0x15
6984      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ROTATION_V5_V6                             0x16
6985      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_TEMPERATURE_V5_V6                    0x17
6986      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_TEMPERATURE_V5_V6                     0x18
6987      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_INTENSITY_V5_V6                    0x19
6988      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_MAGNITUDE_V5_V6                    0x1A
6989      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ULTRAVIOLET_V5_V6                          0x1B
6990      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_RESISTIVITY_V5_V6               0x1C
6991      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_CONDUCTIVITY_V5_V6              0x1D
6992      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LOUDNESS_V5_V6                             0x1E
6993      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MOISTURE_V5_V6                             0x1F
6994      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FREQUENCY_V6_V6                            0x20
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 129 

6995      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIME_V6_V6                                 0x21
6996      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TARGET_TEMPERATURE_V6_V6                   0x22
6997      =3  /* Values used for Sensor Multilevel Supported Scale Report command */
6998      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TEMPERATURE_VERSION_1_V6                0x01
6999      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V6      0x02
7000      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LUMINANCE_VERSION_1_V6                  0x03
7001      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_POWER_VERSION_2_V6                      0x04
7002      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_HUMIDITY_VERSION_2_V6          0x05
7003      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VELOCITY_VERSION_2_V6                   0x06
7004      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DIRECTION_VERSION_2_V6                  0x07
7005      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V6       0x08
7006      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V6        0x09
7007      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOLAR_RADIATION_VERSION_2_V6            0x0A
7008      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DEW_POINT_VERSION_2_V6                  0x0B
7009      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RAIN_RATE_VERSION_2_V6                  0x0C
7010      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIDE_LEVEL_VERSION_2_V6                 0x0D
7011      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WEIGHT_VERSION_3_V6                     0x0E
7012      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLTAGE_VERSION_3_V6                    0x0F
7013      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CURRENT_VERSION_3_V6                    0x10
7014      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CO2_LEVEL_VERSION_3_V6                  0x11
7015      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_AIR_FLOW_VERSION_3_V6                   0x12
7016      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TANK_CAPACITY_VERSION_3_V6              0x13
7017      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DISTANCE_VERSION_3_V6                   0x14
7018      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ANGLE_POSITION_VERSION_4_V6             0x15
7019      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ROTATION_V5_V6                          0x16
7020      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_TEMPERATURE_V5_V6                 0x17
7021      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_TEMPERATURE_V5_V6                  0x18
7022      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_INTENSITY_V5_V6                 0x19
7023      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_MAGNITUDE_V5_V6                 0x1A
7024      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ULTRAVIOLET_V5_V6                       0x1B
7025      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_RESISTIVITY_V5_V6            0x1C
7026      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V6           0x1D
7027      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LOUDNESS_V5_V6                          0x1E
7028      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MOISTURE_V5_V6                          0x1F
7029      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FREQUENCY_V6_V6                         0x20
7030      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIME_V6_V6                              0x21
7031      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TARGET_TEMPERATURE_V6_V6                0x22
7032      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK_V6      0x0F
7033      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_MASK_V6            0xF0
7034      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_SHIFT_V6           0x04
7035      =3  
7036      =3  /* Sensor Multilevel command class commands */
7037      =3  #define SENSOR_MULTILEVEL_VERSION_V7                                                     0x07
7038      =3  #define SENSOR_MULTILEVEL_GET_V7                                                         0x04
7039      =3  #define SENSOR_MULTILEVEL_REPORT_V7                                                      0x05
7040      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V7                                        0x01
7041      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_V7                                     0x02
7042      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V7                                         0x03
7043      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V7                                      0x06
7044      =3  /* Values used for Sensor Multilevel Get command */
7045      =3  #define SENSOR_MULTILEVEL_GET_TEMPERATURE_VERSION_1_V7                                   0x01
7046      =3  #define SENSOR_MULTILEVEL_GET_GENERAL_PURPOSE_VALUE_VERSION_1_V7                         0x02
7047      =3  #define SENSOR_MULTILEVEL_GET_LUMINANCE_VERSION_1_V7                                     0x03
7048      =3  #define SENSOR_MULTILEVEL_GET_POWER_VERSION_2_V7                                         0x04
7049      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_HUMIDITY_VERSION_2_V7                             0x05
7050      =3  #define SENSOR_MULTILEVEL_GET_VELOCITY_VERSION_2_V7                                      0x06
7051      =3  #define SENSOR_MULTILEVEL_GET_DIRECTION_VERSION_2_V7                                     0x07
7052      =3  #define SENSOR_MULTILEVEL_GET_ATMOSPHERIC_PRESSURE_VERSION_2_V7                          0x08
7053      =3  #define SENSOR_MULTILEVEL_GET_BAROMETRIC_PRESSURE_VERSION_2_V7                           0x09
7054      =3  #define SENSOR_MULTILEVEL_GET_SOLAR_RADIATION_VERSION_2_V7                               0x0A
7055      =3  #define SENSOR_MULTILEVEL_GET_DEW_POINT_VERSION_2_V7                                     0x0B
7056      =3  #define SENSOR_MULTILEVEL_GET_RAIN_RATE_VERSION_2_V7                                     0x0C
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 130 

7057      =3  #define SENSOR_MULTILEVEL_GET_TIDE_LEVEL_VERSION_2_V7                                    0x0D
7058      =3  #define SENSOR_MULTILEVEL_GET_WEIGHT_VERSION_3_V7                                        0x0E
7059      =3  #define SENSOR_MULTILEVEL_GET_VOLTAGE_VERSION_3_V7                                       0x0F
7060      =3  #define SENSOR_MULTILEVEL_GET_CURRENT_VERSION_3_V7                                       0x10
7061      =3  #define SENSOR_MULTILEVEL_GET_CO2_LEVEL_VERSION_3_V7                                     0x11
7062      =3  #define SENSOR_MULTILEVEL_GET_AIR_FLOW_VERSION_3_V7                                      0x12
7063      =3  #define SENSOR_MULTILEVEL_GET_TANK_CAPACITY_VERSION_3_V7                                 0x13
7064      =3  #define SENSOR_MULTILEVEL_GET_DISTANCE_VERSION_3_V7                                      0x14
7065      =3  #define SENSOR_MULTILEVEL_GET_ANGLE_POSITION_VERSION_4_V7                                0x15
7066      =3  #define SENSOR_MULTILEVEL_GET_ROTATION_V5_V7                                             0x16
7067      =3  #define SENSOR_MULTILEVEL_GET_WATER_TEMPERATURE_V5_V7                                    0x17
7068      =3  #define SENSOR_MULTILEVEL_GET_SOIL_TEMPERATURE_V5_V7                                     0x18
7069      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_INTENSITY_V5_V7                                    0x19
7070      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_MAGNITUDE_V5_V7                                    0x1A
7071      =3  #define SENSOR_MULTILEVEL_GET_ULTRAVIOLET_V5_V7                                          0x1B
7072      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_RESISTIVITY_V5_V7                               0x1C
7073      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_CONDUCTIVITY_V5_V7                              0x1D
7074      =3  #define SENSOR_MULTILEVEL_GET_LOUDNESS_V5_V7                                             0x1E
7075      =3  #define SENSOR_MULTILEVEL_GET_MOISTURE_V5_V7                                             0x1F
7076      =3  #define SENSOR_MULTILEVEL_GET_FREQUENCY_V6_V7                                            0x20
7077      =3  #define SENSOR_MULTILEVEL_GET_TIME_V6_V7                                                 0x21
7078      =3  #define SENSOR_MULTILEVEL_GET_TARGET_TEMPERATURE_V6_V7                                   0x22
7079      =3  #define SENSOR_MULTILEVEL_GET_PARTICULATE_MATTER_2_5_V7_V7                               0x23
7080      =3  #define SENSOR_MULTILEVEL_GET_FORMALDEHYDE_CH2O_LEVEL_V7_V7                              0x24
7081      =3  #define SENSOR_MULTILEVEL_GET_RADON_CONCENTRATION_V7_V7                                  0x25
7082      =3  #define SENSOR_MULTILEVEL_GET_METHANE_DENSITY_CH4_V7_V7                                  0x26
7083      =3  #define SENSOR_MULTILEVEL_GET_VOLATILE_ORGANIC_COMPOUND_V7_V7                            0x27
7084      =3  #define SENSOR_MULTILEVEL_GET_CARBON_MONOXIDE_CO_LEVEL_V7_V7                             0x28
7085      =3  #define SENSOR_MULTILEVEL_GET_SOIL_HUMIDITY_V7_V7                                        0x29
7086      =3  #define SENSOR_MULTILEVEL_GET_SOIL_REACTIVITY_V7_V7                                      0x2A
7087      =3  #define SENSOR_MULTILEVEL_GET_SOIL_SALINITY_V7_V7                                        0x2B
7088      =3  #define SENSOR_MULTILEVEL_GET_HEART_RATE_V7_V7                                           0x2C
7089      =3  #define SENSOR_MULTILEVEL_GET_BLOOD_PRESSURE_V7_V7                                       0x2D
7090      =3  #define SENSOR_MULTILEVEL_GET_MUSCLE_MASS_V7_V7                                          0x2E
7091      =3  #define SENSOR_MULTILEVEL_GET_FAT_MASS_V7_V7                                             0x2F
7092      =3  #define SENSOR_MULTILEVEL_GET_BONE_MASS_V7_V7                                            0x30
7093      =3  #define SENSOR_MULTILEVEL_GET_TOTAL_BODY_WATER_TBW_V7_V7                                 0x31
7094      =3  #define SENSOR_MULTILEVEL_GET_BASIC_METABOLIC_RATE_BMR_V7_V7                             0x32
7095      =3  #define SENSOR_MULTILEVEL_GET_BODY_MASS_INDEX_BMI_V7_V7                                  0x33
7096      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED1_MASK_V7                              0x07
7097      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_MASK_V7                                  0x18
7098      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_SHIFT_V7                                 0x03
7099      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_MASK_V7                              0xE0
7100      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_SHIFT_V7                             0x05
7101      =3  /* Values used for Sensor Multilevel Report command */
7102      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V7                                0x01
7103      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V7                      0x02
7104      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V7                                  0x03
7105      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V7                                      0x04
7106      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V7                          0x05
7107      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V7                                   0x06
7108      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V7                                  0x07
7109      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V7                       0x08
7110      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V7                        0x09
7111      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V7                            0x0A
7112      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V7                                  0x0B
7113      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V7                                  0x0C
7114      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V7                                 0x0D
7115      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V7                                     0x0E
7116      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V7                                    0x0F
7117      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V7                                    0x10
7118      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V7                                  0x11
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 131 

7119      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V7                                   0x12
7120      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V7                              0x13
7121      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V7                                   0x14
7122      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V7                             0x15
7123      =3  #define SENSOR_MULTILEVEL_REPORT_ROTATION_V5_V7                                          0x16
7124      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_TEMPERATURE_V5_V7                                 0x17
7125      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_TEMPERATURE_V5_V7                                  0x18
7126      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_INTENSITY_V5_V7                                 0x19
7127      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_MAGNITUDE_V5_V7                                 0x1A
7128      =3  #define SENSOR_MULTILEVEL_REPORT_ULTRAVIOLET_V5_V7                                       0x1B
7129      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_RESISTIVITY_V5_V7                            0x1C
7130      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V7                           0x1D
7131      =3  #define SENSOR_MULTILEVEL_REPORT_LOUDNESS_V5_V7                                          0x1E
7132      =3  #define SENSOR_MULTILEVEL_REPORT_MOISTURE_V5_V7                                          0x1F
7133      =3  #define SENSOR_MULTILEVEL_REPORT_FREQUENCY_V6_V7                                         0x20
7134      =3  #define SENSOR_MULTILEVEL_REPORT_TIME_V6_V7                                              0x21
7135      =3  #define SENSOR_MULTILEVEL_REPORT_TARGET_TEMPERATURE_V6_V7                                0x22
7136      =3  #define SENSOR_MULTILEVEL_REPORT_PARTICULATE_MATTER_2_5_V7_V7                            0x23
7137      =3  #define SENSOR_MULTILEVEL_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V7                           0x24
7138      =3  #define SENSOR_MULTILEVEL_REPORT_RADON_CONCENTRATION_V7_V7                               0x25
7139      =3  #define SENSOR_MULTILEVEL_REPORT_METHANE_DENSITY_CH4_V7_V7                               0x26
7140      =3  #define SENSOR_MULTILEVEL_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V7                         0x27
7141      =3  #define SENSOR_MULTILEVEL_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V7                          0x28
7142      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_HUMIDITY_V7_V7                                     0x29
7143      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_REACTIVITY_V7_V7                                   0x2A
7144      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_SALINITY_V7_V7                                     0x2B
7145      =3  #define SENSOR_MULTILEVEL_REPORT_HEART_RATE_V7_V7                                        0x2C
7146      =3  #define SENSOR_MULTILEVEL_REPORT_BLOOD_PRESSURE_V7_V7                                    0x2D
7147      =3  #define SENSOR_MULTILEVEL_REPORT_MUSCLE_MASS_V7_V7                                       0x2E
7148      =3  #define SENSOR_MULTILEVEL_REPORT_FAT_MASS_V7_V7                                          0x2F
7149      =3  #define SENSOR_MULTILEVEL_REPORT_BONE_MASS_V7_V7                                         0x30
7150      =3  #define SENSOR_MULTILEVEL_REPORT_TOTAL_BODY_WATER_TBW_V7_V7                              0x31
7151      =3  #define SENSOR_MULTILEVEL_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V7                          0x32
7152      =3  #define SENSOR_MULTILEVEL_REPORT_BODY_MASS_INDEX_BMI_V7_V7                               0x33
7153      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V7                                      0x07
7154      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V7                                     0x18
7155      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V7                                    0x03
7156      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V7                                 0xE0
7157      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V7                                0x05
7158      =3  /* Values used for Sensor Multilevel Supported Get Scale command */
7159      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TEMPERATURE_VERSION_1_V7                   0x01
7160      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_GENERAL_PURPOSE_VALUE_VERSION_1_V7         0x02
7161      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LUMINANCE_VERSION_1_V7                     0x03
7162      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_POWER_VERSION_2_V7                         0x04
7163      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_HUMIDITY_VERSION_2_V7             0x05
7164      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VELOCITY_VERSION_2_V7                      0x06
7165      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DIRECTION_VERSION_2_V7                     0x07
7166      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ATMOSPHERIC_PRESSURE_VERSION_2_V7          0x08
7167      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BAROMETRIC_PRESSURE_VERSION_2_V7           0x09
7168      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOLAR_RADIATION_VERSION_2_V7               0x0A
7169      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DEW_POINT_VERSION_2_V7                     0x0B
7170      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RAIN_RATE_VERSION_2_V7                     0x0C
7171      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIDE_LEVEL_VERSION_2_V7                    0x0D
7172      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WEIGHT_VERSION_3_V7                        0x0E
7173      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLTAGE_VERSION_3_V7                       0x0F
7174      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CURRENT_VERSION_3_V7                       0x10
7175      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CO2_LEVEL_VERSION_3_V7                     0x11
7176      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_AIR_FLOW_VERSION_3_V7                      0x12
7177      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TANK_CAPACITY_VERSION_3_V7                 0x13
7178      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DISTANCE_VERSION_3_V7                      0x14
7179      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ANGLE_POSITION_VERSION_4_V7                0x15
7180      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ROTATION_V5_V7                             0x16
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 132 

7181      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_TEMPERATURE_V5_V7                    0x17
7182      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_TEMPERATURE_V5_V7                     0x18
7183      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_INTENSITY_V5_V7                    0x19
7184      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_MAGNITUDE_V5_V7                    0x1A
7185      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ULTRAVIOLET_V5_V7                          0x1B
7186      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_RESISTIVITY_V5_V7               0x1C
7187      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_CONDUCTIVITY_V5_V7              0x1D
7188      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LOUDNESS_V5_V7                             0x1E
7189      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MOISTURE_V5_V7                             0x1F
7190      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FREQUENCY_V6_V7                            0x20
7191      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIME_V6_V7                                 0x21
7192      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TARGET_TEMPERATURE_V6_V7                   0x22
7193      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_PARTICULATE_MATTER_2_5_V7_V7               0x23
7194      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FORMALDEHYDE_CH2O_LEVEL_V7_V7              0x24
7195      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RADON_CONCENTRATION_V7_V7                  0x25
7196      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_METHANE_DENSITY_CH4_V7_V7                  0x26
7197      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLATILE_ORGANIC_COMPOUND_V7_V7            0x27
7198      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CARBON_MONOXIDE_CO_LEVEL_V7_V7             0x28
7199      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_HUMIDITY_V7_V7                        0x29
7200      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_REACTIVITY_V7_V7                      0x2A
7201      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_SALINITY_V7_V7                        0x2B
7202      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_HEART_RATE_V7_V7                           0x2C
7203      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BLOOD_PRESSURE_V7_V7                       0x2D
7204      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MUSCLE_MASS_V7_V7                          0x2E
7205      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FAT_MASS_V7_V7                             0x2F
7206      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BONE_MASS_V7_V7                            0x30
7207      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TOTAL_BODY_WATER_TBW_V7_V7                 0x31
7208      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BASIC_METABOLIC_RATE_BMR_V7_V7             0x32
7209      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BODY_MASS_INDEX_BMI_V7_V7                  0x33
7210      =3  /* Values used for Sensor Multilevel Supported Scale Report command */
7211      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TEMPERATURE_VERSION_1_V7                0x01
7212      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V7      0x02
7213      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LUMINANCE_VERSION_1_V7                  0x03
7214      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_POWER_VERSION_2_V7                      0x04
7215      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_HUMIDITY_VERSION_2_V7          0x05
7216      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VELOCITY_VERSION_2_V7                   0x06
7217      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DIRECTION_VERSION_2_V7                  0x07
7218      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V7       0x08
7219      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V7        0x09
7220      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOLAR_RADIATION_VERSION_2_V7            0x0A
7221      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DEW_POINT_VERSION_2_V7                  0x0B
7222      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RAIN_RATE_VERSION_2_V7                  0x0C
7223      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIDE_LEVEL_VERSION_2_V7                 0x0D
7224      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WEIGHT_VERSION_3_V7                     0x0E
7225      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLTAGE_VERSION_3_V7                    0x0F
7226      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CURRENT_VERSION_3_V7                    0x10
7227      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CO2_LEVEL_VERSION_3_V7                  0x11
7228      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_AIR_FLOW_VERSION_3_V7                   0x12
7229      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TANK_CAPACITY_VERSION_3_V7              0x13
7230      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DISTANCE_VERSION_3_V7                   0x14
7231      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ANGLE_POSITION_VERSION_4_V7             0x15
7232      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ROTATION_V5_V7                          0x16
7233      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_TEMPERATURE_V5_V7                 0x17
7234      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_TEMPERATURE_V5_V7                  0x18
7235      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_INTENSITY_V5_V7                 0x19
7236      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_MAGNITUDE_V5_V7                 0x1A
7237      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ULTRAVIOLET_V5_V7                       0x1B
7238      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_RESISTIVITY_V5_V7            0x1C
7239      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V7           0x1D
7240      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LOUDNESS_V5_V7                          0x1E
7241      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MOISTURE_V5_V7                          0x1F
7242      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FREQUENCY_V6_V7                         0x20
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 133 

7243      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIME_V6_V7                              0x21
7244      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TARGET_TEMPERATURE_V6_V7                0x22
7245      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PARTICULATE_MATTER_2_5_V7_V7            0x23
7246      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V7           0x24
7247      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RADON_CONCENTRATION_V7_V7               0x25
7248      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_METHANE_DENSITY_CH4_V7_V7               0x26
7249      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V7         0x27
7250      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V7          0x28
7251      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_HUMIDITY_V7_V7                     0x29
7252      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_REACTIVITY_V7_V7                   0x2A
7253      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_SALINITY_V7_V7                     0x2B
7254      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_HEART_RATE_V7_V7                        0x2C
7255      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BLOOD_PRESSURE_V7_V7                    0x2D
7256      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MUSCLE_MASS_V7_V7                       0x2E
7257      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FAT_MASS_V7_V7                          0x2F
7258      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BONE_MASS_V7_V7                         0x30
7259      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TOTAL_BODY_WATER_TBW_V7_V7              0x31
7260      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V7          0x32
7261      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BODY_MASS_INDEX_BMI_V7_V7               0x33
7262      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK_V7      0x0F
7263      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_MASK_V7            0xF0
7264      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_SHIFT_V7           0x04
7265      =3  
7266      =3  /* Sensor Multilevel command class commands */
7267      =3  #define SENSOR_MULTILEVEL_VERSION_V8                                                     0x08
7268      =3  #define SENSOR_MULTILEVEL_GET_V8                                                         0x04
7269      =3  #define SENSOR_MULTILEVEL_REPORT_V8                                                      0x05
7270      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V8                                        0x01
7271      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_V8                                     0x02
7272      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V8                                         0x03
7273      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V8                                      0x06
7274      =3  /* Values used for Sensor Multilevel Get command */
7275      =3  #define SENSOR_MULTILEVEL_GET_TEMPERATURE_VERSION_1_V8                                   0x01
7276      =3  #define SENSOR_MULTILEVEL_GET_GENERAL_PURPOSE_VALUE_VERSION_1_V8                         0x02
7277      =3  #define SENSOR_MULTILEVEL_GET_LUMINANCE_VERSION_1_V8                                     0x03
7278      =3  #define SENSOR_MULTILEVEL_GET_POWER_VERSION_2_V8                                         0x04
7279      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_HUMIDITY_VERSION_2_V8                             0x05
7280      =3  #define SENSOR_MULTILEVEL_GET_VELOCITY_VERSION_2_V8                                      0x06
7281      =3  #define SENSOR_MULTILEVEL_GET_DIRECTION_VERSION_2_V8                                     0x07
7282      =3  #define SENSOR_MULTILEVEL_GET_ATMOSPHERIC_PRESSURE_VERSION_2_V8                          0x08
7283      =3  #define SENSOR_MULTILEVEL_GET_BAROMETRIC_PRESSURE_VERSION_2_V8                           0x09
7284      =3  #define SENSOR_MULTILEVEL_GET_SOLAR_RADIATION_VERSION_2_V8                               0x0A
7285      =3  #define SENSOR_MULTILEVEL_GET_DEW_POINT_VERSION_2_V8                                     0x0B
7286      =3  #define SENSOR_MULTILEVEL_GET_RAIN_RATE_VERSION_2_V8                                     0x0C
7287      =3  #define SENSOR_MULTILEVEL_GET_TIDE_LEVEL_VERSION_2_V8                                    0x0D
7288      =3  #define SENSOR_MULTILEVEL_GET_WEIGHT_VERSION_3_V8                                        0x0E
7289      =3  #define SENSOR_MULTILEVEL_GET_VOLTAGE_VERSION_3_V8                                       0x0F
7290      =3  #define SENSOR_MULTILEVEL_GET_CURRENT_VERSION_3_V8                                       0x10
7291      =3  #define SENSOR_MULTILEVEL_GET_CO2_LEVEL_VERSION_3_V8                                     0x11
7292      =3  #define SENSOR_MULTILEVEL_GET_AIR_FLOW_VERSION_3_V8                                      0x12
7293      =3  #define SENSOR_MULTILEVEL_GET_TANK_CAPACITY_VERSION_3_V8                                 0x13
7294      =3  #define SENSOR_MULTILEVEL_GET_DISTANCE_VERSION_3_V8                                      0x14
7295      =3  #define SENSOR_MULTILEVEL_GET_ANGLE_POSITION_VERSION_4_V8                                0x15
7296      =3  #define SENSOR_MULTILEVEL_GET_ROTATION_V5_V8                                             0x16
7297      =3  #define SENSOR_MULTILEVEL_GET_WATER_TEMPERATURE_V5_V8                                    0x17
7298      =3  #define SENSOR_MULTILEVEL_GET_SOIL_TEMPERATURE_V5_V8                                     0x18
7299      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_INTENSITY_V5_V8                                    0x19
7300      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_MAGNITUDE_V5_V8                                    0x1A
7301      =3  #define SENSOR_MULTILEVEL_GET_ULTRAVIOLET_V5_V8                                          0x1B
7302      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_RESISTIVITY_V5_V8                               0x1C
7303      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_CONDUCTIVITY_V5_V8                              0x1D
7304      =3  #define SENSOR_MULTILEVEL_GET_LOUDNESS_V5_V8                                             0x1E
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 134 

7305      =3  #define SENSOR_MULTILEVEL_GET_MOISTURE_V5_V8                                             0x1F
7306      =3  #define SENSOR_MULTILEVEL_GET_FREQUENCY_V6_V8                                            0x20
7307      =3  #define SENSOR_MULTILEVEL_GET_TIME_V6_V8                                                 0x21
7308      =3  #define SENSOR_MULTILEVEL_GET_TARGET_TEMPERATURE_V6_V8                                   0x22
7309      =3  #define SENSOR_MULTILEVEL_GET_PARTICULATE_MATTER_2_5_V7_V8                               0x23
7310      =3  #define SENSOR_MULTILEVEL_GET_FORMALDEHYDE_CH2O_LEVEL_V7_V8                              0x24
7311      =3  #define SENSOR_MULTILEVEL_GET_RADON_CONCENTRATION_V7_V8                                  0x25
7312      =3  #define SENSOR_MULTILEVEL_GET_METHANE_DENSITY_CH4_V7_V8                                  0x26
7313      =3  #define SENSOR_MULTILEVEL_GET_VOLATILE_ORGANIC_COMPOUND_V7_V8                            0x27
7314      =3  #define SENSOR_MULTILEVEL_GET_CARBON_MONOXIDE_CO_LEVEL_V7_V8                             0x28
7315      =3  #define SENSOR_MULTILEVEL_GET_SOIL_HUMIDITY_V7_V8                                        0x29
7316      =3  #define SENSOR_MULTILEVEL_GET_SOIL_REACTIVITY_V7_V8                                      0x2A
7317      =3  #define SENSOR_MULTILEVEL_GET_SOIL_SALINITY_V7_V8                                        0x2B
7318      =3  #define SENSOR_MULTILEVEL_GET_HEART_RATE_V7_V8                                           0x2C
7319      =3  #define SENSOR_MULTILEVEL_GET_BLOOD_PRESSURE_V7_V8                                       0x2D
7320      =3  #define SENSOR_MULTILEVEL_GET_MUSCLE_MASS_V7_V8                                          0x2E
7321      =3  #define SENSOR_MULTILEVEL_GET_FAT_MASS_V7_V8                                             0x2F
7322      =3  #define SENSOR_MULTILEVEL_GET_BONE_MASS_V7_V8                                            0x30
7323      =3  #define SENSOR_MULTILEVEL_GET_TOTAL_BODY_WATER_TBW_V7_V8                                 0x31
7324      =3  #define SENSOR_MULTILEVEL_GET_BASIC_METABOLIC_RATE_BMR_V7_V8                             0x32
7325      =3  #define SENSOR_MULTILEVEL_GET_BODY_MASS_INDEX_BMI_V7_V8                                  0x33
7326      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_X_AXIS_V8_V8                                  0x34
7327      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Y_AXIS_V8_V8                                  0x35
7328      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Z_AXIS_V8_V8                                  0x36
7329      =3  #define SENSOR_MULTILEVEL_GET_SMOKE_DENSITY_V8_V8                                        0x37
7330      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED1_MASK_V8                              0x07
7331      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_MASK_V8                                  0x18
7332      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_SHIFT_V8                                 0x03
7333      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_MASK_V8                              0xE0
7334      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_SHIFT_V8                             0x05
7335      =3  /* Values used for Sensor Multilevel Report command */
7336      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V8                                0x01
7337      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V8                      0x02
7338      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V8                                  0x03
7339      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V8                                      0x04
7340      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V8                          0x05
7341      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V8                                   0x06
7342      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V8                                  0x07
7343      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V8                       0x08
7344      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V8                        0x09
7345      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V8                            0x0A
7346      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V8                                  0x0B
7347      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V8                                  0x0C
7348      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V8                                 0x0D
7349      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V8                                     0x0E
7350      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V8                                    0x0F
7351      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V8                                    0x10
7352      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V8                                  0x11
7353      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V8                                   0x12
7354      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V8                              0x13
7355      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V8                                   0x14
7356      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V8                             0x15
7357      =3  #define SENSOR_MULTILEVEL_REPORT_ROTATION_V5_V8                                          0x16
7358      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_TEMPERATURE_V5_V8                                 0x17
7359      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_TEMPERATURE_V5_V8                                  0x18
7360      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_INTENSITY_V5_V8                                 0x19
7361      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_MAGNITUDE_V5_V8                                 0x1A
7362      =3  #define SENSOR_MULTILEVEL_REPORT_ULTRAVIOLET_V5_V8                                       0x1B
7363      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_RESISTIVITY_V5_V8                            0x1C
7364      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V8                           0x1D
7365      =3  #define SENSOR_MULTILEVEL_REPORT_LOUDNESS_V5_V8                                          0x1E
7366      =3  #define SENSOR_MULTILEVEL_REPORT_MOISTURE_V5_V8                                          0x1F
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 135 

7367      =3  #define SENSOR_MULTILEVEL_REPORT_FREQUENCY_V6_V8                                         0x20
7368      =3  #define SENSOR_MULTILEVEL_REPORT_TIME_V6_V8                                              0x21
7369      =3  #define SENSOR_MULTILEVEL_REPORT_TARGET_TEMPERATURE_V6_V8                                0x22
7370      =3  #define SENSOR_MULTILEVEL_REPORT_PARTICULATE_MATTER_2_5_V7_V8                            0x23
7371      =3  #define SENSOR_MULTILEVEL_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V8                           0x24
7372      =3  #define SENSOR_MULTILEVEL_REPORT_RADON_CONCENTRATION_V7_V8                               0x25
7373      =3  #define SENSOR_MULTILEVEL_REPORT_METHANE_DENSITY_CH4_V7_V8                               0x26
7374      =3  #define SENSOR_MULTILEVEL_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V8                         0x27
7375      =3  #define SENSOR_MULTILEVEL_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V8                          0x28
7376      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_HUMIDITY_V7_V8                                     0x29
7377      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_REACTIVITY_V7_V8                                   0x2A
7378      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_SALINITY_V7_V8                                     0x2B
7379      =3  #define SENSOR_MULTILEVEL_REPORT_HEART_RATE_V7_V8                                        0x2C
7380      =3  #define SENSOR_MULTILEVEL_REPORT_BLOOD_PRESSURE_V7_V8                                    0x2D
7381      =3  #define SENSOR_MULTILEVEL_REPORT_MUSCLE_MASS_V7_V8                                       0x2E
7382      =3  #define SENSOR_MULTILEVEL_REPORT_FAT_MASS_V7_V8                                          0x2F
7383      =3  #define SENSOR_MULTILEVEL_REPORT_BONE_MASS_V7_V8                                         0x30
7384      =3  #define SENSOR_MULTILEVEL_REPORT_TOTAL_BODY_WATER_TBW_V7_V8                              0x31
7385      =3  #define SENSOR_MULTILEVEL_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V8                          0x32
7386      =3  #define SENSOR_MULTILEVEL_REPORT_BODY_MASS_INDEX_BMI_V7_V8                               0x33
7387      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_X_AXIS_V8_V8                               0x34
7388      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Y_AXIS_V8_V8                               0x35
7389      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Z_AXIS_V8_V8                               0x36
7390      =3  #define SENSOR_MULTILEVEL_REPORT_SMOKE_DENSITY_V8_V8                                     0x37
7391      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V8                                      0x07
7392      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V8                                     0x18
7393      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V8                                    0x03
7394      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V8                                 0xE0
7395      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V8                                0x05
7396      =3  /* Values used for Sensor Multilevel Supported Get Scale command */
7397      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TEMPERATURE_VERSION_1_V8                   0x01
7398      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_GENERAL_PURPOSE_VALUE_VERSION_1_V8         0x02
7399      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LUMINANCE_VERSION_1_V8                     0x03
7400      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_POWER_VERSION_2_V8                         0x04
7401      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_HUMIDITY_VERSION_2_V8             0x05
7402      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VELOCITY_VERSION_2_V8                      0x06
7403      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DIRECTION_VERSION_2_V8                     0x07
7404      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ATMOSPHERIC_PRESSURE_VERSION_2_V8          0x08
7405      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BAROMETRIC_PRESSURE_VERSION_2_V8           0x09
7406      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOLAR_RADIATION_VERSION_2_V8               0x0A
7407      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DEW_POINT_VERSION_2_V8                     0x0B
7408      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RAIN_RATE_VERSION_2_V8                     0x0C
7409      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIDE_LEVEL_VERSION_2_V8                    0x0D
7410      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WEIGHT_VERSION_3_V8                        0x0E
7411      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLTAGE_VERSION_3_V8                       0x0F
7412      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CURRENT_VERSION_3_V8                       0x10
7413      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CO2_LEVEL_VERSION_3_V8                     0x11
7414      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_AIR_FLOW_VERSION_3_V8                      0x12
7415      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TANK_CAPACITY_VERSION_3_V8                 0x13
7416      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DISTANCE_VERSION_3_V8                      0x14
7417      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ANGLE_POSITION_VERSION_4_V8                0x15
7418      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ROTATION_V5_V8                             0x16
7419      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_TEMPERATURE_V5_V8                    0x17
7420      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_TEMPERATURE_V5_V8                     0x18
7421      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_INTENSITY_V5_V8                    0x19
7422      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_MAGNITUDE_V5_V8                    0x1A
7423      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ULTRAVIOLET_V5_V8                          0x1B
7424      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_RESISTIVITY_V5_V8               0x1C
7425      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_CONDUCTIVITY_V5_V8              0x1D
7426      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LOUDNESS_V5_V8                             0x1E
7427      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MOISTURE_V5_V8                             0x1F
7428      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FREQUENCY_V6_V8                            0x20
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 136 

7429      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIME_V6_V8                                 0x21
7430      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TARGET_TEMPERATURE_V6_V8                   0x22
7431      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_PARTICULATE_MATTER_2_5_V7_V8               0x23
7432      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FORMALDEHYDE_CH2O_LEVEL_V7_V8              0x24
7433      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RADON_CONCENTRATION_V7_V8                  0x25
7434      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_METHANE_DENSITY_CH4_V7_V8                  0x26
7435      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLATILE_ORGANIC_COMPOUND_V7_V8            0x27
7436      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CARBON_MONOXIDE_CO_LEVEL_V7_V8             0x28
7437      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_HUMIDITY_V7_V8                        0x29
7438      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_REACTIVITY_V7_V8                      0x2A
7439      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_SALINITY_V7_V8                        0x2B
7440      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_HEART_RATE_V7_V8                           0x2C
7441      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BLOOD_PRESSURE_V7_V8                       0x2D
7442      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MUSCLE_MASS_V7_V8                          0x2E
7443      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FAT_MASS_V7_V8                             0x2F
7444      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BONE_MASS_V7_V8                            0x30
7445      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TOTAL_BODY_WATER_TBW_V7_V8                 0x31
7446      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BASIC_METABOLIC_RATE_BMR_V7_V8             0x32
7447      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BODY_MASS_INDEX_BMI_V7_V8                  0x33
7448      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_X_AXIS_V8_V8                  0x34
7449      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Y_AXIS_V8_V8                  0x35
7450      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Z_AXIS_V8_V8                  0x36
7451      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SMOKE_DENSITY_V8_V8                        0x37
7452      =3  /* Values used for Sensor Multilevel Supported Scale Report command */
7453      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TEMPERATURE_VERSION_1_V8                0x01
7454      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V8      0x02
7455      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LUMINANCE_VERSION_1_V8                  0x03
7456      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_POWER_VERSION_2_V8                      0x04
7457      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_HUMIDITY_VERSION_2_V8          0x05
7458      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VELOCITY_VERSION_2_V8                   0x06
7459      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DIRECTION_VERSION_2_V8                  0x07
7460      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V8       0x08
7461      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V8        0x09
7462      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOLAR_RADIATION_VERSION_2_V8            0x0A
7463      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DEW_POINT_VERSION_2_V8                  0x0B
7464      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RAIN_RATE_VERSION_2_V8                  0x0C
7465      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIDE_LEVEL_VERSION_2_V8                 0x0D
7466      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WEIGHT_VERSION_3_V8                     0x0E
7467      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLTAGE_VERSION_3_V8                    0x0F
7468      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CURRENT_VERSION_3_V8                    0x10
7469      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CO2_LEVEL_VERSION_3_V8                  0x11
7470      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_AIR_FLOW_VERSION_3_V8                   0x12
7471      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TANK_CAPACITY_VERSION_3_V8              0x13
7472      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DISTANCE_VERSION_3_V8                   0x14
7473      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ANGLE_POSITION_VERSION_4_V8             0x15
7474      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ROTATION_V5_V8                          0x16
7475      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_TEMPERATURE_V5_V8                 0x17
7476      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_TEMPERATURE_V5_V8                  0x18
7477      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_INTENSITY_V5_V8                 0x19
7478      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_MAGNITUDE_V5_V8                 0x1A
7479      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ULTRAVIOLET_V5_V8                       0x1B
7480      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_RESISTIVITY_V5_V8            0x1C
7481      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V8           0x1D
7482      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LOUDNESS_V5_V8                          0x1E
7483      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MOISTURE_V5_V8                          0x1F
7484      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FREQUENCY_V6_V8                         0x20
7485      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIME_V6_V8                              0x21
7486      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TARGET_TEMPERATURE_V6_V8                0x22
7487      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PARTICULATE_MATTER_2_5_V7_V8            0x23
7488      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V8           0x24
7489      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RADON_CONCENTRATION_V7_V8               0x25
7490      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_METHANE_DENSITY_CH4_V7_V8               0x26
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 137 

7491      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V8         0x27
7492      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V8          0x28
7493      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_HUMIDITY_V7_V8                     0x29
7494      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_REACTIVITY_V7_V8                   0x2A
7495      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_SALINITY_V7_V8                     0x2B
7496      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_HEART_RATE_V7_V8                        0x2C
7497      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BLOOD_PRESSURE_V7_V8                    0x2D
7498      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MUSCLE_MASS_V7_V8                       0x2E
7499      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FAT_MASS_V7_V8                          0x2F
7500      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BONE_MASS_V7_V8                         0x30
7501      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TOTAL_BODY_WATER_TBW_V7_V8              0x31
7502      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V8          0x32
7503      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BODY_MASS_INDEX_BMI_V7_V8               0x33
7504      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_X_AXIS_V8_V8               0x34
7505      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Y_AXIS_V8_V8               0x35
7506      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Z_AXIS_V8_V8               0x36
7507      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SMOKE_DENSITY_V8_V8                     0x37
7508      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK_V8      0x0F
7509      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_MASK_V8            0xF0
7510      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_SHIFT_V8           0x04
7511      =3  
7512      =3  /* Sensor Multilevel command class commands */
7513      =3  #define SENSOR_MULTILEVEL_VERSION_V9                                                     0x09
7514      =3  #define SENSOR_MULTILEVEL_GET_V9                                                         0x04
7515      =3  #define SENSOR_MULTILEVEL_REPORT_V9                                                      0x05
7516      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V9                                        0x01
7517      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_V9                                     0x02
7518      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V9                                         0x03
7519      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V9                                      0x06
7520      =3  /* Values used for Sensor Multilevel Get command */
7521      =3  #define SENSOR_MULTILEVEL_GET_TEMPERATURE_VERSION_1_V9                                   0x01
7522      =3  #define SENSOR_MULTILEVEL_GET_GENERAL_PURPOSE_VALUE_VERSION_1_V9                         0x02
7523      =3  #define SENSOR_MULTILEVEL_GET_LUMINANCE_VERSION_1_V9                                     0x03
7524      =3  #define SENSOR_MULTILEVEL_GET_POWER_VERSION_2_V9                                         0x04
7525      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_HUMIDITY_VERSION_2_V9                             0x05
7526      =3  #define SENSOR_MULTILEVEL_GET_VELOCITY_VERSION_2_V9                                      0x06
7527      =3  #define SENSOR_MULTILEVEL_GET_DIRECTION_VERSION_2_V9                                     0x07
7528      =3  #define SENSOR_MULTILEVEL_GET_ATMOSPHERIC_PRESSURE_VERSION_2_V9                          0x08
7529      =3  #define SENSOR_MULTILEVEL_GET_BAROMETRIC_PRESSURE_VERSION_2_V9                           0x09
7530      =3  #define SENSOR_MULTILEVEL_GET_SOLAR_RADIATION_VERSION_2_V9                               0x0A
7531      =3  #define SENSOR_MULTILEVEL_GET_DEW_POINT_VERSION_2_V9                                     0x0B
7532      =3  #define SENSOR_MULTILEVEL_GET_RAIN_RATE_VERSION_2_V9                                     0x0C
7533      =3  #define SENSOR_MULTILEVEL_GET_TIDE_LEVEL_VERSION_2_V9                                    0x0D
7534      =3  #define SENSOR_MULTILEVEL_GET_WEIGHT_VERSION_3_V9                                        0x0E
7535      =3  #define SENSOR_MULTILEVEL_GET_VOLTAGE_VERSION_3_V9                                       0x0F
7536      =3  #define SENSOR_MULTILEVEL_GET_CURRENT_VERSION_3_V9                                       0x10
7537      =3  #define SENSOR_MULTILEVEL_GET_CO2_LEVEL_VERSION_3_V9                                     0x11
7538      =3  #define SENSOR_MULTILEVEL_GET_AIR_FLOW_VERSION_3_V9                                      0x12
7539      =3  #define SENSOR_MULTILEVEL_GET_TANK_CAPACITY_VERSION_3_V9                                 0x13
7540      =3  #define SENSOR_MULTILEVEL_GET_DISTANCE_VERSION_3_V9                                      0x14
7541      =3  #define SENSOR_MULTILEVEL_GET_ANGLE_POSITION_VERSION_4_V9                                0x15
7542      =3  #define SENSOR_MULTILEVEL_GET_ROTATION_V5_V9                                             0x16
7543      =3  #define SENSOR_MULTILEVEL_GET_WATER_TEMPERATURE_V5_V9                                    0x17
7544      =3  #define SENSOR_MULTILEVEL_GET_SOIL_TEMPERATURE_V5_V9                                     0x18
7545      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_INTENSITY_V5_V9                                    0x19
7546      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_MAGNITUDE_V5_V9                                    0x1A
7547      =3  #define SENSOR_MULTILEVEL_GET_ULTRAVIOLET_V5_V9                                          0x1B
7548      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_RESISTIVITY_V5_V9                               0x1C
7549      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_CONDUCTIVITY_V5_V9                              0x1D
7550      =3  #define SENSOR_MULTILEVEL_GET_LOUDNESS_V5_V9                                             0x1E
7551      =3  #define SENSOR_MULTILEVEL_GET_MOISTURE_V5_V9                                             0x1F
7552      =3  #define SENSOR_MULTILEVEL_GET_FREQUENCY_V6_V9                                            0x20
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 138 

7553      =3  #define SENSOR_MULTILEVEL_GET_TIME_V6_V9                                                 0x21
7554      =3  #define SENSOR_MULTILEVEL_GET_TARGET_TEMPERATURE_V6_V9                                   0x22
7555      =3  #define SENSOR_MULTILEVEL_GET_PARTICULATE_MATTER_2_5_V7_V9                               0x23
7556      =3  #define SENSOR_MULTILEVEL_GET_FORMALDEHYDE_CH2O_LEVEL_V7_V9                              0x24
7557      =3  #define SENSOR_MULTILEVEL_GET_RADON_CONCENTRATION_V7_V9                                  0x25
7558      =3  #define SENSOR_MULTILEVEL_GET_METHANE_DENSITY_CH4_V7_V9                                  0x26
7559      =3  #define SENSOR_MULTILEVEL_GET_VOLATILE_ORGANIC_COMPOUND_V7_V9                            0x27
7560      =3  #define SENSOR_MULTILEVEL_GET_CARBON_MONOXIDE_CO_LEVEL_V7_V9                             0x28
7561      =3  #define SENSOR_MULTILEVEL_GET_SOIL_HUMIDITY_V7_V9                                        0x29
7562      =3  #define SENSOR_MULTILEVEL_GET_SOIL_REACTIVITY_V7_V9                                      0x2A
7563      =3  #define SENSOR_MULTILEVEL_GET_SOIL_SALINITY_V7_V9                                        0x2B
7564      =3  #define SENSOR_MULTILEVEL_GET_HEART_RATE_V7_V9                                           0x2C
7565      =3  #define SENSOR_MULTILEVEL_GET_BLOOD_PRESSURE_V7_V9                                       0x2D
7566      =3  #define SENSOR_MULTILEVEL_GET_MUSCLE_MASS_V7_V9                                          0x2E
7567      =3  #define SENSOR_MULTILEVEL_GET_FAT_MASS_V7_V9                                             0x2F
7568      =3  #define SENSOR_MULTILEVEL_GET_BONE_MASS_V7_V9                                            0x30
7569      =3  #define SENSOR_MULTILEVEL_GET_TOTAL_BODY_WATER_TBW_V7_V9                                 0x31
7570      =3  #define SENSOR_MULTILEVEL_GET_BASIC_METABOLIC_RATE_BMR_V7_V9                             0x32
7571      =3  #define SENSOR_MULTILEVEL_GET_BODY_MASS_INDEX_BMI_V7_V9                                  0x33
7572      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_X_AXIS_V8_V9                                  0x34
7573      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Y_AXIS_V8_V9                                  0x35
7574      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Z_AXIS_V8_V9                                  0x36
7575      =3  #define SENSOR_MULTILEVEL_GET_SMOKE_DENSITY_V8_V9                                        0x37
7576      =3  #define SENSOR_MULTILEVEL_GET_WATER_FLOW_V9_V9                                           0x38
7577      =3  #define SENSOR_MULTILEVEL_GET_WATER_PRESSURE_V9_V9                                       0x39
7578      =3  #define SENSOR_MULTILEVEL_GET_RF_SIGNAL_STRENGTH_V9_V9                                   0x3A
7579      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED1_MASK_V9                              0x07
7580      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_MASK_V9                                  0x18
7581      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_SHIFT_V9                                 0x03
7582      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_MASK_V9                              0xE0
7583      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_SHIFT_V9                             0x05
7584      =3  /* Values used for Sensor Multilevel Report command */
7585      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V9                                0x01
7586      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V9                      0x02
7587      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V9                                  0x03
7588      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V9                                      0x04
7589      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V9                          0x05
7590      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V9                                   0x06
7591      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V9                                  0x07
7592      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V9                       0x08
7593      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V9                        0x09
7594      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V9                            0x0A
7595      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V9                                  0x0B
7596      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V9                                  0x0C
7597      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V9                                 0x0D
7598      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V9                                     0x0E
7599      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V9                                    0x0F
7600      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V9                                    0x10
7601      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V9                                  0x11
7602      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V9                                   0x12
7603      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V9                              0x13
7604      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V9                                   0x14
7605      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V9                             0x15
7606      =3  #define SENSOR_MULTILEVEL_REPORT_ROTATION_V5_V9                                          0x16
7607      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_TEMPERATURE_V5_V9                                 0x17
7608      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_TEMPERATURE_V5_V9                                  0x18
7609      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_INTENSITY_V5_V9                                 0x19
7610      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_MAGNITUDE_V5_V9                                 0x1A
7611      =3  #define SENSOR_MULTILEVEL_REPORT_ULTRAVIOLET_V5_V9                                       0x1B
7612      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_RESISTIVITY_V5_V9                            0x1C
7613      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V9                           0x1D
7614      =3  #define SENSOR_MULTILEVEL_REPORT_LOUDNESS_V5_V9                                          0x1E
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 139 

7615      =3  #define SENSOR_MULTILEVEL_REPORT_MOISTURE_V5_V9                                          0x1F
7616      =3  #define SENSOR_MULTILEVEL_REPORT_FREQUENCY_V6_V9                                         0x20
7617      =3  #define SENSOR_MULTILEVEL_REPORT_TIME_V6_V9                                              0x21
7618      =3  #define SENSOR_MULTILEVEL_REPORT_TARGET_TEMPERATURE_V6_V9                                0x22
7619      =3  #define SENSOR_MULTILEVEL_REPORT_PARTICULATE_MATTER_2_5_V7_V9                            0x23
7620      =3  #define SENSOR_MULTILEVEL_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V9                           0x24
7621      =3  #define SENSOR_MULTILEVEL_REPORT_RADON_CONCENTRATION_V7_V9                               0x25
7622      =3  #define SENSOR_MULTILEVEL_REPORT_METHANE_DENSITY_CH4_V7_V9                               0x26
7623      =3  #define SENSOR_MULTILEVEL_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V9                         0x27
7624      =3  #define SENSOR_MULTILEVEL_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V9                          0x28
7625      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_HUMIDITY_V7_V9                                     0x29
7626      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_REACTIVITY_V7_V9                                   0x2A
7627      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_SALINITY_V7_V9                                     0x2B
7628      =3  #define SENSOR_MULTILEVEL_REPORT_HEART_RATE_V7_V9                                        0x2C
7629      =3  #define SENSOR_MULTILEVEL_REPORT_BLOOD_PRESSURE_V7_V9                                    0x2D
7630      =3  #define SENSOR_MULTILEVEL_REPORT_MUSCLE_MASS_V7_V9                                       0x2E
7631      =3  #define SENSOR_MULTILEVEL_REPORT_FAT_MASS_V7_V9                                          0x2F
7632      =3  #define SENSOR_MULTILEVEL_REPORT_BONE_MASS_V7_V9                                         0x30
7633      =3  #define SENSOR_MULTILEVEL_REPORT_TOTAL_BODY_WATER_TBW_V7_V9                              0x31
7634      =3  #define SENSOR_MULTILEVEL_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V9                          0x32
7635      =3  #define SENSOR_MULTILEVEL_REPORT_BODY_MASS_INDEX_BMI_V7_V9                               0x33
7636      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_X_AXIS_V8_V9                               0x34
7637      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Y_AXIS_V8_V9                               0x35
7638      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Z_AXIS_V8_V9                               0x36
7639      =3  #define SENSOR_MULTILEVEL_REPORT_SMOKE_DENSITY_V8_V9                                     0x37
7640      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_FLOW_V9_V9                                        0x38
7641      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_PRESSURE_V9_V9                                    0x39
7642      =3  #define SENSOR_MULTILEVEL_REPORT_RF_SIGNAL_STRENGTH_V9_V9                                0x3A
7643      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V9                                      0x07
7644      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V9                                     0x18
7645      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V9                                    0x03
7646      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V9                                 0xE0
7647      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V9                                0x05
7648      =3  /* Values used for Sensor Multilevel Supported Get Scale command */
7649      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TEMPERATURE_VERSION_1_V9                   0x01
7650      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_GENERAL_PURPOSE_VALUE_VERSION_1_V9         0x02
7651      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LUMINANCE_VERSION_1_V9                     0x03
7652      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_POWER_VERSION_2_V9                         0x04
7653      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_HUMIDITY_VERSION_2_V9             0x05
7654      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VELOCITY_VERSION_2_V9                      0x06
7655      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DIRECTION_VERSION_2_V9                     0x07
7656      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ATMOSPHERIC_PRESSURE_VERSION_2_V9          0x08
7657      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BAROMETRIC_PRESSURE_VERSION_2_V9           0x09
7658      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOLAR_RADIATION_VERSION_2_V9               0x0A
7659      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DEW_POINT_VERSION_2_V9                     0x0B
7660      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RAIN_RATE_VERSION_2_V9                     0x0C
7661      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIDE_LEVEL_VERSION_2_V9                    0x0D
7662      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WEIGHT_VERSION_3_V9                        0x0E
7663      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLTAGE_VERSION_3_V9                       0x0F
7664      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CURRENT_VERSION_3_V9                       0x10
7665      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CO2_LEVEL_VERSION_3_V9                     0x11
7666      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_AIR_FLOW_VERSION_3_V9                      0x12
7667      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TANK_CAPACITY_VERSION_3_V9                 0x13
7668      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DISTANCE_VERSION_3_V9                      0x14
7669      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ANGLE_POSITION_VERSION_4_V9                0x15
7670      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ROTATION_V5_V9                             0x16
7671      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_TEMPERATURE_V5_V9                    0x17
7672      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_TEMPERATURE_V5_V9                     0x18
7673      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_INTENSITY_V5_V9                    0x19
7674      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_MAGNITUDE_V5_V9                    0x1A
7675      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ULTRAVIOLET_V5_V9                          0x1B
7676      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_RESISTIVITY_V5_V9               0x1C
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 140 

7677      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_CONDUCTIVITY_V5_V9              0x1D
7678      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LOUDNESS_V5_V9                             0x1E
7679      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MOISTURE_V5_V9                             0x1F
7680      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FREQUENCY_V6_V9                            0x20
7681      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIME_V6_V9                                 0x21
7682      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TARGET_TEMPERATURE_V6_V9                   0x22
7683      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_PARTICULATE_MATTER_2_5_V7_V9               0x23
7684      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FORMALDEHYDE_CH2O_LEVEL_V7_V9              0x24
7685      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RADON_CONCENTRATION_V7_V9                  0x25
7686      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_METHANE_DENSITY_CH4_V7_V9                  0x26
7687      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLATILE_ORGANIC_COMPOUND_V7_V9            0x27
7688      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CARBON_MONOXIDE_CO_LEVEL_V7_V9             0x28
7689      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_HUMIDITY_V7_V9                        0x29
7690      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_REACTIVITY_V7_V9                      0x2A
7691      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_SALINITY_V7_V9                        0x2B
7692      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_HEART_RATE_V7_V9                           0x2C
7693      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BLOOD_PRESSURE_V7_V9                       0x2D
7694      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MUSCLE_MASS_V7_V9                          0x2E
7695      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FAT_MASS_V7_V9                             0x2F
7696      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BONE_MASS_V7_V9                            0x30
7697      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TOTAL_BODY_WATER_TBW_V7_V9                 0x31
7698      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BASIC_METABOLIC_RATE_BMR_V7_V9             0x32
7699      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BODY_MASS_INDEX_BMI_V7_V9                  0x33
7700      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_X_AXIS_V8_V9                  0x34
7701      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Y_AXIS_V8_V9                  0x35
7702      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Z_AXIS_V8_V9                  0x36
7703      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SMOKE_DENSITY_V8_V9                        0x37
7704      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_FLOW_V9_V9                           0x38
7705      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_PRESSURE_V9_V9                       0x39
7706      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RF_SIGNAL_STRENGTH_V9_V9                   0x3A
7707      =3  /* Values used for Sensor Multilevel Supported Scale Report command */
7708      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TEMPERATURE_VERSION_1_V9                0x01
7709      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V9      0x02
7710      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LUMINANCE_VERSION_1_V9                  0x03
7711      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_POWER_VERSION_2_V9                      0x04
7712      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_HUMIDITY_VERSION_2_V9          0x05
7713      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VELOCITY_VERSION_2_V9                   0x06
7714      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DIRECTION_VERSION_2_V9                  0x07
7715      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V9       0x08
7716      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V9        0x09
7717      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOLAR_RADIATION_VERSION_2_V9            0x0A
7718      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DEW_POINT_VERSION_2_V9                  0x0B
7719      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RAIN_RATE_VERSION_2_V9                  0x0C
7720      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIDE_LEVEL_VERSION_2_V9                 0x0D
7721      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WEIGHT_VERSION_3_V9                     0x0E
7722      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLTAGE_VERSION_3_V9                    0x0F
7723      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CURRENT_VERSION_3_V9                    0x10
7724      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CO2_LEVEL_VERSION_3_V9                  0x11
7725      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_AIR_FLOW_VERSION_3_V9                   0x12
7726      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TANK_CAPACITY_VERSION_3_V9              0x13
7727      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DISTANCE_VERSION_3_V9                   0x14
7728      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ANGLE_POSITION_VERSION_4_V9             0x15
7729      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ROTATION_V5_V9                          0x16
7730      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_TEMPERATURE_V5_V9                 0x17
7731      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_TEMPERATURE_V5_V9                  0x18
7732      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_INTENSITY_V5_V9                 0x19
7733      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_MAGNITUDE_V5_V9                 0x1A
7734      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ULTRAVIOLET_V5_V9                       0x1B
7735      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_RESISTIVITY_V5_V9            0x1C
7736      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V9           0x1D
7737      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LOUDNESS_V5_V9                          0x1E
7738      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MOISTURE_V5_V9                          0x1F
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 141 

7739      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FREQUENCY_V6_V9                         0x20
7740      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIME_V6_V9                              0x21
7741      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TARGET_TEMPERATURE_V6_V9                0x22
7742      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PARTICULATE_MATTER_2_5_V7_V9            0x23
7743      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V9           0x24
7744      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RADON_CONCENTRATION_V7_V9               0x25
7745      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_METHANE_DENSITY_CH4_V7_V9               0x26
7746      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V9         0x27
7747      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V9          0x28
7748      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_HUMIDITY_V7_V9                     0x29
7749      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_REACTIVITY_V7_V9                   0x2A
7750      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_SALINITY_V7_V9                     0x2B
7751      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_HEART_RATE_V7_V9                        0x2C
7752      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BLOOD_PRESSURE_V7_V9                    0x2D
7753      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MUSCLE_MASS_V7_V9                       0x2E
7754      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FAT_MASS_V7_V9                          0x2F
7755      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BONE_MASS_V7_V9                         0x30
7756      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TOTAL_BODY_WATER_TBW_V7_V9              0x31
7757      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V9          0x32
7758      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BODY_MASS_INDEX_BMI_V7_V9               0x33
7759      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_X_AXIS_V8_V9               0x34
7760      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Y_AXIS_V8_V9               0x35
7761      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Z_AXIS_V8_V9               0x36
7762      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SMOKE_DENSITY_V8_V9                     0x37
7763      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_FLOW_V9_V9                        0x38
7764      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_PRESSURE_V9_V9                    0x39
7765      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RF_SIGNAL_STRENGTH_V9_V9                0x3A
7766      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK_V9      0x0F
7767      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_MASK_V9            0xF0
7768      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_SHIFT_V9           0x04
7769      =3  
7770      =3  /* Sensor Multilevel command class commands */
7771      =3  #define SENSOR_MULTILEVEL_VERSION_V10                                                    0x0A
7772      =3  #define SENSOR_MULTILEVEL_GET_V10                                                        0x04
7773      =3  #define SENSOR_MULTILEVEL_REPORT_V10                                                     0x05
7774      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V10                                       0x01
7775      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_V10                                    0x02
7776      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V10                                        0x03
7777      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V10                                     0x06
7778      =3  /* Values used for Sensor Multilevel Get command */
7779      =3  #define SENSOR_MULTILEVEL_GET_TEMPERATURE_VERSION_1_V10                                  0x01
7780      =3  #define SENSOR_MULTILEVEL_GET_GENERAL_PURPOSE_VALUE_VERSION_1_V10                        0x02
7781      =3  #define SENSOR_MULTILEVEL_GET_LUMINANCE_VERSION_1_V10                                    0x03
7782      =3  #define SENSOR_MULTILEVEL_GET_POWER_VERSION_2_V10                                        0x04
7783      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_HUMIDITY_VERSION_2_V10                            0x05
7784      =3  #define SENSOR_MULTILEVEL_GET_VELOCITY_VERSION_2_V10                                     0x06
7785      =3  #define SENSOR_MULTILEVEL_GET_DIRECTION_VERSION_2_V10                                    0x07
7786      =3  #define SENSOR_MULTILEVEL_GET_ATMOSPHERIC_PRESSURE_VERSION_2_V10                         0x08
7787      =3  #define SENSOR_MULTILEVEL_GET_BAROMETRIC_PRESSURE_VERSION_2_V10                          0x09
7788      =3  #define SENSOR_MULTILEVEL_GET_SOLAR_RADIATION_VERSION_2_V10                              0x0A
7789      =3  #define SENSOR_MULTILEVEL_GET_DEW_POINT_VERSION_2_V10                                    0x0B
7790      =3  #define SENSOR_MULTILEVEL_GET_RAIN_RATE_VERSION_2_V10                                    0x0C
7791      =3  #define SENSOR_MULTILEVEL_GET_TIDE_LEVEL_VERSION_2_V10                                   0x0D
7792      =3  #define SENSOR_MULTILEVEL_GET_WEIGHT_VERSION_3_V10                                       0x0E
7793      =3  #define SENSOR_MULTILEVEL_GET_VOLTAGE_VERSION_3_V10                                      0x0F
7794      =3  #define SENSOR_MULTILEVEL_GET_CURRENT_VERSION_3_V10                                      0x10
7795      =3  #define SENSOR_MULTILEVEL_GET_CO2_LEVEL_VERSION_3_V10                                    0x11
7796      =3  #define SENSOR_MULTILEVEL_GET_AIR_FLOW_VERSION_3_V10                                     0x12
7797      =3  #define SENSOR_MULTILEVEL_GET_TANK_CAPACITY_VERSION_3_V10                                0x13
7798      =3  #define SENSOR_MULTILEVEL_GET_DISTANCE_VERSION_3_V10                                     0x14
7799      =3  #define SENSOR_MULTILEVEL_GET_ANGLE_POSITION_VERSION_4_V10                               0x15
7800      =3  #define SENSOR_MULTILEVEL_GET_ROTATION_V5_V10                                            0x16
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 142 

7801      =3  #define SENSOR_MULTILEVEL_GET_WATER_TEMPERATURE_V5_V10                                   0x17
7802      =3  #define SENSOR_MULTILEVEL_GET_SOIL_TEMPERATURE_V5_V10                                    0x18
7803      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_INTENSITY_V5_V10                                   0x19
7804      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_MAGNITUDE_V5_V10                                   0x1A
7805      =3  #define SENSOR_MULTILEVEL_GET_ULTRAVIOLET_V5_V10                                         0x1B
7806      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_RESISTIVITY_V5_V10                              0x1C
7807      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_CONDUCTIVITY_V5_V10                             0x1D
7808      =3  #define SENSOR_MULTILEVEL_GET_LOUDNESS_V5_V10                                            0x1E
7809      =3  #define SENSOR_MULTILEVEL_GET_MOISTURE_V5_V10                                            0x1F
7810      =3  #define SENSOR_MULTILEVEL_GET_FREQUENCY_V6_V10                                           0x20
7811      =3  #define SENSOR_MULTILEVEL_GET_TIME_V6_V10                                                0x21
7812      =3  #define SENSOR_MULTILEVEL_GET_TARGET_TEMPERATURE_V6_V10                                  0x22
7813      =3  #define SENSOR_MULTILEVEL_GET_PARTICULATE_MATTER_2_5_V7_V10                              0x23
7814      =3  #define SENSOR_MULTILEVEL_GET_FORMALDEHYDE_CH2O_LEVEL_V7_V10                             0x24
7815      =3  #define SENSOR_MULTILEVEL_GET_RADON_CONCENTRATION_V7_V10                                 0x25
7816      =3  #define SENSOR_MULTILEVEL_GET_METHANE_DENSITY_CH4_V7_V10                                 0x26
7817      =3  #define SENSOR_MULTILEVEL_GET_VOLATILE_ORGANIC_COMPOUND_V7_V10                           0x27
7818      =3  #define SENSOR_MULTILEVEL_GET_CARBON_MONOXIDE_CO_LEVEL_V7_V10                            0x28
7819      =3  #define SENSOR_MULTILEVEL_GET_SOIL_HUMIDITY_V7_V10                                       0x29
7820      =3  #define SENSOR_MULTILEVEL_GET_SOIL_REACTIVITY_V7_V10                                     0x2A
7821      =3  #define SENSOR_MULTILEVEL_GET_SOIL_SALINITY_V7_V10                                       0x2B
7822      =3  #define SENSOR_MULTILEVEL_GET_HEART_RATE_V7_V10                                          0x2C
7823      =3  #define SENSOR_MULTILEVEL_GET_BLOOD_PRESSURE_V7_V10                                      0x2D
7824      =3  #define SENSOR_MULTILEVEL_GET_MUSCLE_MASS_V7_V10                                         0x2E
7825      =3  #define SENSOR_MULTILEVEL_GET_FAT_MASS_V7_V10                                            0x2F
7826      =3  #define SENSOR_MULTILEVEL_GET_BONE_MASS_V7_V10                                           0x30
7827      =3  #define SENSOR_MULTILEVEL_GET_TOTAL_BODY_WATER_TBW_V7_V10                                0x31
7828      =3  #define SENSOR_MULTILEVEL_GET_BASIC_METABOLIC_RATE_BMR_V7_V10                            0x32
7829      =3  #define SENSOR_MULTILEVEL_GET_BODY_MASS_INDEX_BMI_V7_V10                                 0x33
7830      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_X_AXIS_V8_V10                                 0x34
7831      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Y_AXIS_V8_V10                                 0x35
7832      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Z_AXIS_V8_V10                                 0x36
7833      =3  #define SENSOR_MULTILEVEL_GET_SMOKE_DENSITY_V8_V10                                       0x37
7834      =3  #define SENSOR_MULTILEVEL_GET_WATER_FLOW_V9_V10                                          0x38
7835      =3  #define SENSOR_MULTILEVEL_GET_WATER_PRESSURE_V9_V10                                      0x39
7836      =3  #define SENSOR_MULTILEVEL_GET_RF_SIGNAL_STRENGTH_V9_V10                                  0x3A
7837      =3  #define SENSOR_MULTILEVEL_GET_PARTICULATE_MATTER_V10_V10                                 0x3B
7838      =3  #define SENSOR_MULTILEVEL_GET_RESPIRATORY_RATE_V10_V10                                   0x3C
7839      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED1_MASK_V10                             0x07
7840      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_MASK_V10                                 0x18
7841      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_SHIFT_V10                                0x03
7842      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_MASK_V10                             0xE0
7843      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_SHIFT_V10                            0x05
7844      =3  /* Values used for Sensor Multilevel Report command */
7845      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V10                               0x01
7846      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V10                     0x02
7847      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V10                                 0x03
7848      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V10                                     0x04
7849      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V10                         0x05
7850      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V10                                  0x06
7851      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V10                                 0x07
7852      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V10                      0x08
7853      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V10                       0x09
7854      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V10                           0x0A
7855      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V10                                 0x0B
7856      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V10                                 0x0C
7857      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V10                                0x0D
7858      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V10                                    0x0E
7859      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V10                                   0x0F
7860      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V10                                   0x10
7861      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V10                                 0x11
7862      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V10                                  0x12
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 143 

7863      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V10                             0x13
7864      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V10                                  0x14
7865      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V10                            0x15
7866      =3  #define SENSOR_MULTILEVEL_REPORT_ROTATION_V5_V10                                         0x16
7867      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_TEMPERATURE_V5_V10                                0x17
7868      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_TEMPERATURE_V5_V10                                 0x18
7869      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_INTENSITY_V5_V10                                0x19
7870      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_MAGNITUDE_V5_V10                                0x1A
7871      =3  #define SENSOR_MULTILEVEL_REPORT_ULTRAVIOLET_V5_V10                                      0x1B
7872      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_RESISTIVITY_V5_V10                           0x1C
7873      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V10                          0x1D
7874      =3  #define SENSOR_MULTILEVEL_REPORT_LOUDNESS_V5_V10                                         0x1E
7875      =3  #define SENSOR_MULTILEVEL_REPORT_MOISTURE_V5_V10                                         0x1F
7876      =3  #define SENSOR_MULTILEVEL_REPORT_FREQUENCY_V6_V10                                        0x20
7877      =3  #define SENSOR_MULTILEVEL_REPORT_TIME_V6_V10                                             0x21
7878      =3  #define SENSOR_MULTILEVEL_REPORT_TARGET_TEMPERATURE_V6_V10                               0x22
7879      =3  #define SENSOR_MULTILEVEL_REPORT_PARTICULATE_MATTER_2_5_V7_V10                           0x23
7880      =3  #define SENSOR_MULTILEVEL_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V10                          0x24
7881      =3  #define SENSOR_MULTILEVEL_REPORT_RADON_CONCENTRATION_V7_V10                              0x25
7882      =3  #define SENSOR_MULTILEVEL_REPORT_METHANE_DENSITY_CH4_V7_V10                              0x26
7883      =3  #define SENSOR_MULTILEVEL_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V10                        0x27
7884      =3  #define SENSOR_MULTILEVEL_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V10                         0x28
7885      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_HUMIDITY_V7_V10                                    0x29
7886      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_REACTIVITY_V7_V10                                  0x2A
7887      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_SALINITY_V7_V10                                    0x2B
7888      =3  #define SENSOR_MULTILEVEL_REPORT_HEART_RATE_V7_V10                                       0x2C
7889      =3  #define SENSOR_MULTILEVEL_REPORT_BLOOD_PRESSURE_V7_V10                                   0x2D
7890      =3  #define SENSOR_MULTILEVEL_REPORT_MUSCLE_MASS_V7_V10                                      0x2E
7891      =3  #define SENSOR_MULTILEVEL_REPORT_FAT_MASS_V7_V10                                         0x2F
7892      =3  #define SENSOR_MULTILEVEL_REPORT_BONE_MASS_V7_V10                                        0x30
7893      =3  #define SENSOR_MULTILEVEL_REPORT_TOTAL_BODY_WATER_TBW_V7_V10                             0x31
7894      =3  #define SENSOR_MULTILEVEL_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V10                         0x32
7895      =3  #define SENSOR_MULTILEVEL_REPORT_BODY_MASS_INDEX_BMI_V7_V10                              0x33
7896      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_X_AXIS_V8_V10                              0x34
7897      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Y_AXIS_V8_V10                              0x35
7898      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Z_AXIS_V8_V10                              0x36
7899      =3  #define SENSOR_MULTILEVEL_REPORT_SMOKE_DENSITY_V8_V10                                    0x37
7900      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_FLOW_V9_V10                                       0x38
7901      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_PRESSURE_V9_V10                                   0x39
7902      =3  #define SENSOR_MULTILEVEL_REPORT_RF_SIGNAL_STRENGTH_V9_V10                               0x3A
7903      =3  #define SENSOR_MULTILEVEL_REPORT_PARTICULATE_MATTER_V10_V10                              0x3B
7904      =3  #define SENSOR_MULTILEVEL_REPORT_RESPIRATORY_RATE_V10_V10                                0x3C
7905      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V10                                     0x07
7906      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V10                                    0x18
7907      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V10                                   0x03
7908      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V10                                0xE0
7909      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V10                               0x05
7910      =3  /* Values used for Sensor Multilevel Supported Get Scale command */
7911      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TEMPERATURE_VERSION_1_V10                  0x01
7912      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_GENERAL_PURPOSE_VALUE_VERSION_1_V10        0x02
7913      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LUMINANCE_VERSION_1_V10                    0x03
7914      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_POWER_VERSION_2_V10                        0x04
7915      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_HUMIDITY_VERSION_2_V10            0x05
7916      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VELOCITY_VERSION_2_V10                     0x06
7917      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DIRECTION_VERSION_2_V10                    0x07
7918      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ATMOSPHERIC_PRESSURE_VERSION_2_V10         0x08
7919      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BAROMETRIC_PRESSURE_VERSION_2_V10          0x09
7920      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOLAR_RADIATION_VERSION_2_V10              0x0A
7921      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DEW_POINT_VERSION_2_V10                    0x0B
7922      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RAIN_RATE_VERSION_2_V10                    0x0C
7923      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIDE_LEVEL_VERSION_2_V10                   0x0D
7924      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WEIGHT_VERSION_3_V10                       0x0E
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 144 

7925      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLTAGE_VERSION_3_V10                      0x0F
7926      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CURRENT_VERSION_3_V10                      0x10
7927      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CO2_LEVEL_VERSION_3_V10                    0x11
7928      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_AIR_FLOW_VERSION_3_V10                     0x12
7929      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TANK_CAPACITY_VERSION_3_V10                0x13
7930      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DISTANCE_VERSION_3_V10                     0x14
7931      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ANGLE_POSITION_VERSION_4_V10               0x15
7932      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ROTATION_V5_V10                            0x16
7933      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_TEMPERATURE_V5_V10                   0x17
7934      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_TEMPERATURE_V5_V10                    0x18
7935      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_INTENSITY_V5_V10                   0x19
7936      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_MAGNITUDE_V5_V10                   0x1A
7937      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ULTRAVIOLET_V5_V10                         0x1B
7938      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_RESISTIVITY_V5_V10              0x1C
7939      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_CONDUCTIVITY_V5_V10             0x1D
7940      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LOUDNESS_V5_V10                            0x1E
7941      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MOISTURE_V5_V10                            0x1F
7942      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FREQUENCY_V6_V10                           0x20
7943      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIME_V6_V10                                0x21
7944      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TARGET_TEMPERATURE_V6_V10                  0x22
7945      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_PARTICULATE_MATTER_2_5_V7_V10              0x23
7946      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FORMALDEHYDE_CH2O_LEVEL_V7_V10             0x24
7947      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RADON_CONCENTRATION_V7_V10                 0x25
7948      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_METHANE_DENSITY_CH4_V7_V10                 0x26
7949      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLATILE_ORGANIC_COMPOUND_V7_V10           0x27
7950      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CARBON_MONOXIDE_CO_LEVEL_V7_V10            0x28
7951      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_HUMIDITY_V7_V10                       0x29
7952      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_REACTIVITY_V7_V10                     0x2A
7953      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_SALINITY_V7_V10                       0x2B
7954      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_HEART_RATE_V7_V10                          0x2C
7955      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BLOOD_PRESSURE_V7_V10                      0x2D
7956      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MUSCLE_MASS_V7_V10                         0x2E
7957      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FAT_MASS_V7_V10                            0x2F
7958      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BONE_MASS_V7_V10                           0x30
7959      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TOTAL_BODY_WATER_TBW_V7_V10                0x31
7960      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BASIC_METABOLIC_RATE_BMR_V7_V10            0x32
7961      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BODY_MASS_INDEX_BMI_V7_V10                 0x33
7962      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_X_AXIS_V8_V10                 0x34
7963      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Y_AXIS_V8_V10                 0x35
7964      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Z_AXIS_V8_V10                 0x36
7965      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SMOKE_DENSITY_V8_V10                       0x37
7966      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_FLOW_V9_V10                          0x38
7967      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_PRESSURE_V9_V10                      0x39
7968      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RF_SIGNAL_STRENGTH_V9_V10                  0x3A
7969      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_PARTICULATE_MATTER_V10_V10                 0x3B
7970      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RESPIRATORY_RATE_V10_V10                   0x3C
7971      =3  /* Values used for Sensor Multilevel Supported Scale Report command */
7972      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TEMPERATURE_VERSION_1_V10               0x01
7973      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V10     0x02
7974      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LUMINANCE_VERSION_1_V10                 0x03
7975      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_POWER_VERSION_2_V10                     0x04
7976      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_HUMIDITY_VERSION_2_V10         0x05
7977      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VELOCITY_VERSION_2_V10                  0x06
7978      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DIRECTION_VERSION_2_V10                 0x07
7979      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V10      0x08
7980      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V10       0x09
7981      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOLAR_RADIATION_VERSION_2_V10           0x0A
7982      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DEW_POINT_VERSION_2_V10                 0x0B
7983      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RAIN_RATE_VERSION_2_V10                 0x0C
7984      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIDE_LEVEL_VERSION_2_V10                0x0D
7985      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WEIGHT_VERSION_3_V10                    0x0E
7986      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLTAGE_VERSION_3_V10                   0x0F
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 145 

7987      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CURRENT_VERSION_3_V10                   0x10
7988      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CO2_LEVEL_VERSION_3_V10                 0x11
7989      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_AIR_FLOW_VERSION_3_V10                  0x12
7990      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TANK_CAPACITY_VERSION_3_V10             0x13
7991      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DISTANCE_VERSION_3_V10                  0x14
7992      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ANGLE_POSITION_VERSION_4_V10            0x15
7993      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ROTATION_V5_V10                         0x16
7994      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_TEMPERATURE_V5_V10                0x17
7995      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_TEMPERATURE_V5_V10                 0x18
7996      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_INTENSITY_V5_V10                0x19
7997      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_MAGNITUDE_V5_V10                0x1A
7998      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ULTRAVIOLET_V5_V10                      0x1B
7999      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_RESISTIVITY_V5_V10           0x1C
8000      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V10          0x1D
8001      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LOUDNESS_V5_V10                         0x1E
8002      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MOISTURE_V5_V10                         0x1F
8003      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FREQUENCY_V6_V10                        0x20
8004      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIME_V6_V10                             0x21
8005      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TARGET_TEMPERATURE_V6_V10               0x22
8006      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PARTICULATE_MATTER_2_5_V7_V10           0x23
8007      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V10          0x24
8008      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RADON_CONCENTRATION_V7_V10              0x25
8009      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_METHANE_DENSITY_CH4_V7_V10              0x26
8010      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V10        0x27
8011      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V10         0x28
8012      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_HUMIDITY_V7_V10                    0x29
8013      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_REACTIVITY_V7_V10                  0x2A
8014      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_SALINITY_V7_V10                    0x2B
8015      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_HEART_RATE_V7_V10                       0x2C
8016      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BLOOD_PRESSURE_V7_V10                   0x2D
8017      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MUSCLE_MASS_V7_V10                      0x2E
8018      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FAT_MASS_V7_V10                         0x2F
8019      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BONE_MASS_V7_V10                        0x30
8020      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TOTAL_BODY_WATER_TBW_V7_V10             0x31
8021      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V10         0x32
8022      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BODY_MASS_INDEX_BMI_V7_V10              0x33
8023      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_X_AXIS_V8_V10              0x34
8024      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Y_AXIS_V8_V10              0x35
8025      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Z_AXIS_V8_V10              0x36
8026      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SMOKE_DENSITY_V8_V10                    0x37
8027      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_FLOW_V9_V10                       0x38
8028      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_PRESSURE_V9_V10                   0x39
8029      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RF_SIGNAL_STRENGTH_V9_V10               0x3A
8030      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PARTICULATE_MATTER_V10_V10              0x3B
8031      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RESPIRATORY_RATE_V10_V10                0x3C
8032      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK_V10     0x0F
8033      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_MASK_V10           0xF0
8034      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_SHIFT_V10          0x04
8035      =3  
8036      =3  /* Sensor Multilevel command class commands */
8037      =3  #define SENSOR_MULTILEVEL_VERSION_V11                                                    0x0B
8038      =3  #define SENSOR_MULTILEVEL_GET_V11                                                        0x04
8039      =3  #define SENSOR_MULTILEVEL_REPORT_V11                                                     0x05
8040      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V11                                       0x01
8041      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_V11                                    0x02
8042      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V11                                        0x03
8043      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V11                                     0x06
8044      =3  /* Values used for Sensor Multilevel Get command */
8045      =3  #define SENSOR_MULTILEVEL_GET_TEMPERATURE_VERSION_1_V11                                  0x01
8046      =3  #define SENSOR_MULTILEVEL_GET_GENERAL_PURPOSE_VALUE_VERSION_1_V11                        0x02
8047      =3  #define SENSOR_MULTILEVEL_GET_LUMINANCE_VERSION_1_V11                                    0x03
8048      =3  #define SENSOR_MULTILEVEL_GET_POWER_VERSION_2_V11                                        0x04
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 146 

8049      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_HUMIDITY_VERSION_2_V11                            0x05
8050      =3  #define SENSOR_MULTILEVEL_GET_VELOCITY_VERSION_2_V11                                     0x06
8051      =3  #define SENSOR_MULTILEVEL_GET_DIRECTION_VERSION_2_V11                                    0x07
8052      =3  #define SENSOR_MULTILEVEL_GET_ATMOSPHERIC_PRESSURE_VERSION_2_V11                         0x08
8053      =3  #define SENSOR_MULTILEVEL_GET_BAROMETRIC_PRESSURE_VERSION_2_V11                          0x09
8054      =3  #define SENSOR_MULTILEVEL_GET_SOLAR_RADIATION_VERSION_2_V11                              0x0A
8055      =3  #define SENSOR_MULTILEVEL_GET_DEW_POINT_VERSION_2_V11                                    0x0B
8056      =3  #define SENSOR_MULTILEVEL_GET_RAIN_RATE_VERSION_2_V11                                    0x0C
8057      =3  #define SENSOR_MULTILEVEL_GET_TIDE_LEVEL_VERSION_2_V11                                   0x0D
8058      =3  #define SENSOR_MULTILEVEL_GET_WEIGHT_VERSION_3_V11                                       0x0E
8059      =3  #define SENSOR_MULTILEVEL_GET_VOLTAGE_VERSION_3_V11                                      0x0F
8060      =3  #define SENSOR_MULTILEVEL_GET_CURRENT_VERSION_3_V11                                      0x10
8061      =3  #define SENSOR_MULTILEVEL_GET_CO2_LEVEL_VERSION_3_V11                                    0x11
8062      =3  #define SENSOR_MULTILEVEL_GET_AIR_FLOW_VERSION_3_V11                                     0x12
8063      =3  #define SENSOR_MULTILEVEL_GET_TANK_CAPACITY_VERSION_3_V11                                0x13
8064      =3  #define SENSOR_MULTILEVEL_GET_DISTANCE_VERSION_3_V11                                     0x14
8065      =3  #define SENSOR_MULTILEVEL_GET_ANGLE_POSITION_VERSION_4_V11                               0x15
8066      =3  #define SENSOR_MULTILEVEL_GET_ROTATION_V5_V11                                            0x16
8067      =3  #define SENSOR_MULTILEVEL_GET_WATER_TEMPERATURE_V5_V11                                   0x17
8068      =3  #define SENSOR_MULTILEVEL_GET_SOIL_TEMPERATURE_V5_V11                                    0x18
8069      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_INTENSITY_V5_V11                                   0x19
8070      =3  #define SENSOR_MULTILEVEL_GET_SEISMIC_MAGNITUDE_V5_V11                                   0x1A
8071      =3  #define SENSOR_MULTILEVEL_GET_ULTRAVIOLET_V5_V11                                         0x1B
8072      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_RESISTIVITY_V5_V11                              0x1C
8073      =3  #define SENSOR_MULTILEVEL_GET_ELECTRICAL_CONDUCTIVITY_V5_V11                             0x1D
8074      =3  #define SENSOR_MULTILEVEL_GET_LOUDNESS_V5_V11                                            0x1E
8075      =3  #define SENSOR_MULTILEVEL_GET_MOISTURE_V5_V11                                            0x1F
8076      =3  #define SENSOR_MULTILEVEL_GET_FREQUENCY_V6_V11                                           0x20
8077      =3  #define SENSOR_MULTILEVEL_GET_TIME_V6_V11                                                0x21
8078      =3  #define SENSOR_MULTILEVEL_GET_TARGET_TEMPERATURE_V6_V11                                  0x22
8079      =3  #define SENSOR_MULTILEVEL_GET_PARTICULATE_MATTER_2_5_V7_V11                              0x23
8080      =3  #define SENSOR_MULTILEVEL_GET_FORMALDEHYDE_CH2O_LEVEL_V7_V11                             0x24
8081      =3  #define SENSOR_MULTILEVEL_GET_RADON_CONCENTRATION_V7_V11                                 0x25
8082      =3  #define SENSOR_MULTILEVEL_GET_METHANE_DENSITY_CH4_V7_V11                                 0x26
8083      =3  #define SENSOR_MULTILEVEL_GET_VOLATILE_ORGANIC_COMPOUND_V7_V11                           0x27
8084      =3  #define SENSOR_MULTILEVEL_GET_CARBON_MONOXIDE_CO_LEVEL_V7_V11                            0x28
8085      =3  #define SENSOR_MULTILEVEL_GET_SOIL_HUMIDITY_V7_V11                                       0x29
8086      =3  #define SENSOR_MULTILEVEL_GET_SOIL_REACTIVITY_V7_V11                                     0x2A
8087      =3  #define SENSOR_MULTILEVEL_GET_SOIL_SALINITY_V7_V11                                       0x2B
8088      =3  #define SENSOR_MULTILEVEL_GET_HEART_RATE_V7_V11                                          0x2C
8089      =3  #define SENSOR_MULTILEVEL_GET_BLOOD_PRESSURE_V7_V11                                      0x2D
8090      =3  #define SENSOR_MULTILEVEL_GET_MUSCLE_MASS_V7_V11                                         0x2E
8091      =3  #define SENSOR_MULTILEVEL_GET_FAT_MASS_V7_V11                                            0x2F
8092      =3  #define SENSOR_MULTILEVEL_GET_BONE_MASS_V7_V11                                           0x30
8093      =3  #define SENSOR_MULTILEVEL_GET_TOTAL_BODY_WATER_TBW_V7_V11                                0x31
8094      =3  #define SENSOR_MULTILEVEL_GET_BASIC_METABOLIC_RATE_BMR_V7_V11                            0x32
8095      =3  #define SENSOR_MULTILEVEL_GET_BODY_MASS_INDEX_BMI_V7_V11                                 0x33
8096      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_X_AXIS_V8_V11                                 0x34
8097      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Y_AXIS_V8_V11                                 0x35
8098      =3  #define SENSOR_MULTILEVEL_GET_ACCELERATION_Z_AXIS_V8_V11                                 0x36
8099      =3  #define SENSOR_MULTILEVEL_GET_SMOKE_DENSITY_V8_V11                                       0x37
8100      =3  #define SENSOR_MULTILEVEL_GET_WATER_FLOW_V9_V11                                          0x38
8101      =3  #define SENSOR_MULTILEVEL_GET_WATER_PRESSURE_V9_V11                                      0x39
8102      =3  #define SENSOR_MULTILEVEL_GET_RF_SIGNAL_STRENGTH_V9_V11                                  0x3A
8103      =3  #define SENSOR_MULTILEVEL_GET_PARTICULATE_MATTER_V10_V11                                 0x3B
8104      =3  #define SENSOR_MULTILEVEL_GET_RESPIRATORY_RATE_V10_V11                                   0x3C
8105      =3  #define SENSOR_MULTILEVEL_GET_RELATIVE_MODULATION_LEVEL_V11                              0x3D
8106      =3  #define SENSOR_MULTILEVEL_GET_BOILER_WATER_TEMPERATURE_V11                               0x3E
8107      =3  #define SENSOR_MULTILEVEL_GET_DOMESTIC_HOT_WATER_TEMPERATURE_V11                         0x3F
8108      =3  #define SENSOR_MULTILEVEL_GET_OUTSIDE_TEMPERATURE_V11                                    0x40
8109      =3  #define SENSOR_MULTILEVEL_GET_EXHAUST_TEMPERATURE_V11                                    0x41
8110      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED1_MASK_V11                             0x07
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 147 

8111      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_MASK_V11                                 0x18
8112      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_SCALE_SHIFT_V11                                0x03
8113      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_MASK_V11                             0xE0
8114      =3  #define SENSOR_MULTILEVEL_GET_PROPERTIES1_RESERVED2_SHIFT_V11                            0x05
8115      =3  /* Values used for Sensor Multilevel Report command */
8116      =3  #define SENSOR_MULTILEVEL_REPORT_TEMPERATURE_VERSION_1_V11                               0x01
8117      =3  #define SENSOR_MULTILEVEL_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V11                     0x02
8118      =3  #define SENSOR_MULTILEVEL_REPORT_LUMINANCE_VERSION_1_V11                                 0x03
8119      =3  #define SENSOR_MULTILEVEL_REPORT_POWER_VERSION_2_V11                                     0x04
8120      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_HUMIDITY_VERSION_2_V11                         0x05
8121      =3  #define SENSOR_MULTILEVEL_REPORT_VELOCITY_VERSION_2_V11                                  0x06
8122      =3  #define SENSOR_MULTILEVEL_REPORT_DIRECTION_VERSION_2_V11                                 0x07
8123      =3  #define SENSOR_MULTILEVEL_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V11                      0x08
8124      =3  #define SENSOR_MULTILEVEL_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V11                       0x09
8125      =3  #define SENSOR_MULTILEVEL_REPORT_SOLAR_RADIATION_VERSION_2_V11                           0x0A
8126      =3  #define SENSOR_MULTILEVEL_REPORT_DEW_POINT_VERSION_2_V11                                 0x0B
8127      =3  #define SENSOR_MULTILEVEL_REPORT_RAIN_RATE_VERSION_2_V11                                 0x0C
8128      =3  #define SENSOR_MULTILEVEL_REPORT_TIDE_LEVEL_VERSION_2_V11                                0x0D
8129      =3  #define SENSOR_MULTILEVEL_REPORT_WEIGHT_VERSION_3_V11                                    0x0E
8130      =3  #define SENSOR_MULTILEVEL_REPORT_VOLTAGE_VERSION_3_V11                                   0x0F
8131      =3  #define SENSOR_MULTILEVEL_REPORT_CURRENT_VERSION_3_V11                                   0x10
8132      =3  #define SENSOR_MULTILEVEL_REPORT_CO2_LEVEL_VERSION_3_V11                                 0x11
8133      =3  #define SENSOR_MULTILEVEL_REPORT_AIR_FLOW_VERSION_3_V11                                  0x12
8134      =3  #define SENSOR_MULTILEVEL_REPORT_TANK_CAPACITY_VERSION_3_V11                             0x13
8135      =3  #define SENSOR_MULTILEVEL_REPORT_DISTANCE_VERSION_3_V11                                  0x14
8136      =3  #define SENSOR_MULTILEVEL_REPORT_ANGLE_POSITION_VERSION_4_V11                            0x15
8137      =3  #define SENSOR_MULTILEVEL_REPORT_ROTATION_V5_V11                                         0x16
8138      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_TEMPERATURE_V5_V11                                0x17
8139      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_TEMPERATURE_V5_V11                                 0x18
8140      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_INTENSITY_V5_V11                                0x19
8141      =3  #define SENSOR_MULTILEVEL_REPORT_SEISMIC_MAGNITUDE_V5_V11                                0x1A
8142      =3  #define SENSOR_MULTILEVEL_REPORT_ULTRAVIOLET_V5_V11                                      0x1B
8143      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_RESISTIVITY_V5_V11                           0x1C
8144      =3  #define SENSOR_MULTILEVEL_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V11                          0x1D
8145      =3  #define SENSOR_MULTILEVEL_REPORT_LOUDNESS_V5_V11                                         0x1E
8146      =3  #define SENSOR_MULTILEVEL_REPORT_MOISTURE_V5_V11                                         0x1F
8147      =3  #define SENSOR_MULTILEVEL_REPORT_FREQUENCY_V6_V11                                        0x20
8148      =3  #define SENSOR_MULTILEVEL_REPORT_TIME_V6_V11                                             0x21
8149      =3  #define SENSOR_MULTILEVEL_REPORT_TARGET_TEMPERATURE_V6_V11                               0x22
8150      =3  #define SENSOR_MULTILEVEL_REPORT_PARTICULATE_MATTER_2_5_V7_V11                           0x23
8151      =3  #define SENSOR_MULTILEVEL_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V11                          0x24
8152      =3  #define SENSOR_MULTILEVEL_REPORT_RADON_CONCENTRATION_V7_V11                              0x25
8153      =3  #define SENSOR_MULTILEVEL_REPORT_METHANE_DENSITY_CH4_V7_V11                              0x26
8154      =3  #define SENSOR_MULTILEVEL_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V11                        0x27
8155      =3  #define SENSOR_MULTILEVEL_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V11                         0x28
8156      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_HUMIDITY_V7_V11                                    0x29
8157      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_REACTIVITY_V7_V11                                  0x2A
8158      =3  #define SENSOR_MULTILEVEL_REPORT_SOIL_SALINITY_V7_V11                                    0x2B
8159      =3  #define SENSOR_MULTILEVEL_REPORT_HEART_RATE_V7_V11                                       0x2C
8160      =3  #define SENSOR_MULTILEVEL_REPORT_BLOOD_PRESSURE_V7_V11                                   0x2D
8161      =3  #define SENSOR_MULTILEVEL_REPORT_MUSCLE_MASS_V7_V11                                      0x2E
8162      =3  #define SENSOR_MULTILEVEL_REPORT_FAT_MASS_V7_V11                                         0x2F
8163      =3  #define SENSOR_MULTILEVEL_REPORT_BONE_MASS_V7_V11                                        0x30
8164      =3  #define SENSOR_MULTILEVEL_REPORT_TOTAL_BODY_WATER_TBW_V7_V11                             0x31
8165      =3  #define SENSOR_MULTILEVEL_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V11                         0x32
8166      =3  #define SENSOR_MULTILEVEL_REPORT_BODY_MASS_INDEX_BMI_V7_V11                              0x33
8167      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_X_AXIS_V8_V11                              0x34
8168      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Y_AXIS_V8_V11                              0x35
8169      =3  #define SENSOR_MULTILEVEL_REPORT_ACCELERATION_Z_AXIS_V8_V11                              0x36
8170      =3  #define SENSOR_MULTILEVEL_REPORT_SMOKE_DENSITY_V8_V11                                    0x37
8171      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_FLOW_V9_V11                                       0x38
8172      =3  #define SENSOR_MULTILEVEL_REPORT_WATER_PRESSURE_V9_V11                                   0x39
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 148 

8173      =3  #define SENSOR_MULTILEVEL_REPORT_RF_SIGNAL_STRENGTH_V9_V11                               0x3A
8174      =3  #define SENSOR_MULTILEVEL_REPORT_PARTICULATE_MATTER_V10_V11                              0x3B
8175      =3  #define SENSOR_MULTILEVEL_REPORT_RESPIRATORY_RATE_V10_V11                                0x3C
8176      =3  #define SENSOR_MULTILEVEL_REPORT_RELATIVE_MODULATION_LEVEL_V11                           0x3D
8177      =3  #define SENSOR_MULTILEVEL_REPORT_BOILER_WATER_TEMPERATURE_V11                            0x3E
8178      =3  #define SENSOR_MULTILEVEL_REPORT_DOMESTIC_HOT_WATER_TEMPERATURE_V11                      0x3F
8179      =3  #define SENSOR_MULTILEVEL_REPORT_OUTSIDE_TEMPERATURE_V11                                 0x40
8180      =3  #define SENSOR_MULTILEVEL_REPORT_EXHAUST_TEMPERATURE_V11                                 0x41
8181      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SIZE_MASK_V11                                     0x07
8182      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_MASK_V11                                    0x18
8183      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_SCALE_SHIFT_V11                                   0x03
8184      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_MASK_V11                                0xE0
8185      =3  #define SENSOR_MULTILEVEL_REPORT_LEVEL_PRECISION_SHIFT_V11                               0x05
8186      =3  /* Values used for Sensor Multilevel Supported Get Scale command */
8187      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TEMPERATURE_VERSION_1_V11                  0x01
8188      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_GENERAL_PURPOSE_VALUE_VERSION_1_V11        0x02
8189      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LUMINANCE_VERSION_1_V11                    0x03
8190      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_POWER_VERSION_2_V11                        0x04
8191      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_HUMIDITY_VERSION_2_V11            0x05
8192      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VELOCITY_VERSION_2_V11                     0x06
8193      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DIRECTION_VERSION_2_V11                    0x07
8194      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ATMOSPHERIC_PRESSURE_VERSION_2_V11         0x08
8195      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BAROMETRIC_PRESSURE_VERSION_2_V11          0x09
8196      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOLAR_RADIATION_VERSION_2_V11              0x0A
8197      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DEW_POINT_VERSION_2_V11                    0x0B
8198      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RAIN_RATE_VERSION_2_V11                    0x0C
8199      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIDE_LEVEL_VERSION_2_V11                   0x0D
8200      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WEIGHT_VERSION_3_V11                       0x0E
8201      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLTAGE_VERSION_3_V11                      0x0F
8202      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CURRENT_VERSION_3_V11                      0x10
8203      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CO2_LEVEL_VERSION_3_V11                    0x11
8204      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_AIR_FLOW_VERSION_3_V11                     0x12
8205      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TANK_CAPACITY_VERSION_3_V11                0x13
8206      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DISTANCE_VERSION_3_V11                     0x14
8207      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ANGLE_POSITION_VERSION_4_V11               0x15
8208      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ROTATION_V5_V11                            0x16
8209      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_TEMPERATURE_V5_V11                   0x17
8210      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_TEMPERATURE_V5_V11                    0x18
8211      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_INTENSITY_V5_V11                   0x19
8212      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SEISMIC_MAGNITUDE_V5_V11                   0x1A
8213      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ULTRAVIOLET_V5_V11                         0x1B
8214      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_RESISTIVITY_V5_V11              0x1C
8215      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ELECTRICAL_CONDUCTIVITY_V5_V11             0x1D
8216      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_LOUDNESS_V5_V11                            0x1E
8217      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MOISTURE_V5_V11                            0x1F
8218      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FREQUENCY_V6_V11                           0x20
8219      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TIME_V6_V11                                0x21
8220      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TARGET_TEMPERATURE_V6_V11                  0x22
8221      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_PARTICULATE_MATTER_2_5_V7_V11              0x23
8222      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FORMALDEHYDE_CH2O_LEVEL_V7_V11             0x24
8223      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RADON_CONCENTRATION_V7_V11                 0x25
8224      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_METHANE_DENSITY_CH4_V7_V11                 0x26
8225      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_VOLATILE_ORGANIC_COMPOUND_V7_V11           0x27
8226      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_CARBON_MONOXIDE_CO_LEVEL_V7_V11            0x28
8227      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_HUMIDITY_V7_V11                       0x29
8228      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_REACTIVITY_V7_V11                     0x2A
8229      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SOIL_SALINITY_V7_V11                       0x2B
8230      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_HEART_RATE_V7_V11                          0x2C
8231      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BLOOD_PRESSURE_V7_V11                      0x2D
8232      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_MUSCLE_MASS_V7_V11                         0x2E
8233      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_FAT_MASS_V7_V11                            0x2F
8234      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BONE_MASS_V7_V11                           0x30
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 149 

8235      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_TOTAL_BODY_WATER_TBW_V7_V11                0x31
8236      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BASIC_METABOLIC_RATE_BMR_V7_V11            0x32
8237      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BODY_MASS_INDEX_BMI_V7_V11                 0x33
8238      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_X_AXIS_V8_V11                 0x34
8239      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Y_AXIS_V8_V11                 0x35
8240      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_ACCELERATION_Z_AXIS_V8_V11                 0x36
8241      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_SMOKE_DENSITY_V8_V11                       0x37
8242      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_FLOW_V9_V11                          0x38
8243      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_WATER_PRESSURE_V9_V11                      0x39
8244      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RF_SIGNAL_STRENGTH_V9_V11                  0x3A
8245      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_PARTICULATE_MATTER_V10_V11                 0x3B
8246      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RESPIRATORY_RATE_V10_V11                   0x3C
8247      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_RELATIVE_MODULATION_LEVEL_V11              0x3D
8248      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_BOILER_WATER_TEMPERATURE_V11               0x3E
8249      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_DOMESTIC_HOT_WATER_TEMPERATURE_V11         0x3F
8250      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_OUTSIDE_TEMPERATURE_V11                    0x40
8251      =3  #define SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_EXHAUST_TEMPERATURE_V11                    0x41
8252      =3  /* Values used for Sensor Multilevel Supported Scale Report command */
8253      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TEMPERATURE_VERSION_1_V11               0x01
8254      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_GENERAL_PURPOSE_VALUE_VERSION_1_V11     0x02
8255      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LUMINANCE_VERSION_1_V11                 0x03
8256      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_POWER_VERSION_2_V11                     0x04
8257      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_HUMIDITY_VERSION_2_V11         0x05
8258      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VELOCITY_VERSION_2_V11                  0x06
8259      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DIRECTION_VERSION_2_V11                 0x07
8260      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ATMOSPHERIC_PRESSURE_VERSION_2_V11      0x08
8261      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BAROMETRIC_PRESSURE_VERSION_2_V11       0x09
8262      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOLAR_RADIATION_VERSION_2_V11           0x0A
8263      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DEW_POINT_VERSION_2_V11                 0x0B
8264      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RAIN_RATE_VERSION_2_V11                 0x0C
8265      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIDE_LEVEL_VERSION_2_V11                0x0D
8266      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WEIGHT_VERSION_3_V11                    0x0E
8267      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLTAGE_VERSION_3_V11                   0x0F
8268      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CURRENT_VERSION_3_V11                   0x10
8269      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CO2_LEVEL_VERSION_3_V11                 0x11
8270      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_AIR_FLOW_VERSION_3_V11                  0x12
8271      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TANK_CAPACITY_VERSION_3_V11             0x13
8272      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DISTANCE_VERSION_3_V11                  0x14
8273      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ANGLE_POSITION_VERSION_4_V11            0x15
8274      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ROTATION_V5_V11                         0x16
8275      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_TEMPERATURE_V5_V11                0x17
8276      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_TEMPERATURE_V5_V11                 0x18
8277      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_INTENSITY_V5_V11                0x19
8278      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SEISMIC_MAGNITUDE_V5_V11                0x1A
8279      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ULTRAVIOLET_V5_V11                      0x1B
8280      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_RESISTIVITY_V5_V11           0x1C
8281      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ELECTRICAL_CONDUCTIVITY_V5_V11          0x1D
8282      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_LOUDNESS_V5_V11                         0x1E
8283      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MOISTURE_V5_V11                         0x1F
8284      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FREQUENCY_V6_V11                        0x20
8285      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TIME_V6_V11                             0x21
8286      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TARGET_TEMPERATURE_V6_V11               0x22
8287      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PARTICULATE_MATTER_2_5_V7_V11           0x23
8288      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FORMALDEHYDE_CH2O_LEVEL_V7_V11          0x24
8289      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RADON_CONCENTRATION_V7_V11              0x25
8290      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_METHANE_DENSITY_CH4_V7_V11              0x26
8291      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_VOLATILE_ORGANIC_COMPOUND_V7_V11        0x27
8292      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_CARBON_MONOXIDE_CO_LEVEL_V7_V11         0x28
8293      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_HUMIDITY_V7_V11                    0x29
8294      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_REACTIVITY_V7_V11                  0x2A
8295      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SOIL_SALINITY_V7_V11                    0x2B
8296      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_HEART_RATE_V7_V11                       0x2C
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 150 

8297      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BLOOD_PRESSURE_V7_V11                   0x2D
8298      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_MUSCLE_MASS_V7_V11                      0x2E
8299      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_FAT_MASS_V7_V11                         0x2F
8300      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BONE_MASS_V7_V11                        0x30
8301      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_TOTAL_BODY_WATER_TBW_V7_V11             0x31
8302      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BASIC_METABOLIC_RATE_BMR_V7_V11         0x32
8303      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BODY_MASS_INDEX_BMI_V7_V11              0x33
8304      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_X_AXIS_V8_V11              0x34
8305      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Y_AXIS_V8_V11              0x35
8306      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_ACCELERATION_Z_AXIS_V8_V11              0x36
8307      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_SMOKE_DENSITY_V8_V11                    0x37
8308      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_FLOW_V9_V11                       0x38
8309      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_WATER_PRESSURE_V9_V11                   0x39
8310      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RF_SIGNAL_STRENGTH_V9_V11               0x3A
8311      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PARTICULATE_MATTER_V10_V11              0x3B
8312      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RESPIRATORY_RATE_V10_V11                0x3C
8313      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_RELATIVE_MODULATION_LEVEL_V11           0x3D
8314      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_BOILER_WATER_TEMPERATURE_V11            0x3E
8315      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_DOMESTIC_HOT_WATER_TEMPERATURE_V11      0x3F
8316      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_OUTSIDE_TEMPERATURE_V11                 0x40
8317      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_EXHAUST_TEMPERATURE_V11                 0x41
8318      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK_V11     0x0F
8319      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_MASK_V11           0xF0
8320      =3  #define SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_PROPERTIES1_RESERVED_SHIFT_V11          0x04
8321      =3  
8322      =3  /* Silence Alarm command class commands */
8323      =3  #define SILENCE_ALARM_VERSION                                                            0x01
8324      =3  #define SENSOR_ALARM_SET                                                                 0x01
8325      =3  
8326      =3  /* Simple Av Control command class commands */
8327      =3  #define SIMPLE_AV_CONTROL_VERSION                                                        0x01
8328      =3  #define SIMPLE_AV_CONTROL_GET                                                            0x02
8329      =3  #define SIMPLE_AV_CONTROL_REPORT                                                         0x03
8330      =3  #define SIMPLE_AV_CONTROL_SET                                                            0x01
8331      =3  #define SIMPLE_AV_CONTROL_SUPPORTED_GET                                                  0x04
8332      =3  #define SIMPLE_AV_CONTROL_SUPPORTED_REPORT                                               0x05
8333      =3  /* Values used for Simple Av Control Set command */
8334      =3  #define SIMPLE_AV_CONTROL_SET_PROPERTIES1_KEY_ATTRIBUTES_MASK                            0x07
8335      =3  #define SIMPLE_AV_CONTROL_SET_PROPERTIES1_RESERVED_MASK                                  0xF8
8336      =3  #define SIMPLE_AV_CONTROL_SET_PROPERTIES1_RESERVED_SHIFT                                 0x03
8337      =3  
8338      =3  /* Switch All command class commands */
8339      =3  #define SWITCH_ALL_VERSION                                                               0x01
8340      =3  #define SWITCH_ALL_GET                                                                   0x02
8341      =3  #define SWITCH_ALL_OFF                                                                   0x05
8342      =3  #define SWITCH_ALL_ON                                                                    0x04
8343      =3  #define SWITCH_ALL_REPORT                                                                0x03
8344      =3  #define SWITCH_ALL_SET                                                                   0x01
8345      =3  /* Values used for Switch All Report command */
8346      =3  #define SWITCH_ALL_REPORT_EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY                 0x00
8347      =3  #define SWITCH_ALL_REPORT_EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF         0x01
8348      =3  #define SWITCH_ALL_REPORT_EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON         0x02
8349      =3  #define SWITCH_ALL_REPORT_INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY                   0xFF
8350      =3  /* Values used for Switch All Set command */
8351      =3  #define SWITCH_ALL_SET_EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY                    0x00
8352      =3  #define SWITCH_ALL_SET_EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF            0x01
8353      =3  #define SWITCH_ALL_SET_EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON            0x02
8354      =3  #define SWITCH_ALL_SET_INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY                      0xFF
8355      =3  
8356      =3  /* Switch Binary command class commands */
8357      =3  #define SWITCH_BINARY_VERSION                                                            0x01
8358      =3  #define SWITCH_BINARY_GET                                                                0x02
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 151 

8359      =3  #define SWITCH_BINARY_REPORT                                                             0x03
8360      =3  #define SWITCH_BINARY_SET                                                                0x01
8361      =3  
8362      =3  /* Switch Binary command class commands */
8363      =3  #define SWITCH_BINARY_VERSION_V2                                                         0x02
8364      =3  #define SWITCH_BINARY_GET_V2                                                             0x02
8365      =3  #define SWITCH_BINARY_REPORT_V2                                                          0x03
8366      =3  #define SWITCH_BINARY_SET_V2                                                             0x01
8367      =3  /* Values used for Switch Binary Report command */
8368      =3  #define SWITCH_BINARY_REPORT_OFF_DISABLE_V2                                              0x00
8369      =3  #define SWITCH_BINARY_REPORT_ON_ENABLE_V2                                                0xFF
8370      =3  #define SWITCH_BINARY_REPORT_OFF_DISABLE_V2                                              0x00
8371      =3  #define SWITCH_BINARY_REPORT_ON_ENABLE_V2                                                0xFF
8372      =3  #define SWITCH_BINARY_REPORT_ALREADY_AT_THE_TARGET_VALUE_V2                              0x00
8373      =3  #define SWITCH_BINARY_REPORT_UNKNOWN_DURATION_V2                                         0xFE
8374      =3  #define SWITCH_BINARY_REPORT_RESERVED_V2                                                 0xFF
8375      =3  /* Values used for Switch Binary Set command */
8376      =3  #define SWITCH_BINARY_SET_OFF_DISABLE_V2                                                 0x00
8377      =3  #define SWITCH_BINARY_SET_ON_ENABLE_V2                                                   0xFF
8378      =3  #define SWITCH_BINARY_SET_INSTANTLY_V2                                                   0x00
8379      =3  #define SWITCH_BINARY_SET_DEFAULT_V2                                                     0xFF
8380      =3  
8381      =3  /* Switch Multilevel command class commands */
8382      =3  #define SWITCH_MULTILEVEL_VERSION                                                        0x01
8383      =3  #define SWITCH_MULTILEVEL_GET                                                            0x02
8384      =3  #define SWITCH_MULTILEVEL_REPORT                                                         0x03
8385      =3  #define SWITCH_MULTILEVEL_SET                                                            0x01
8386      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE                                             0x04
8387      =3  #define SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE                                              0x05
8388      =3  /* Values used for Switch Multilevel Start Level Change command */
8389      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_RESERVED1_MASK                        0x1F
8390      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_IGNORE_START_LEVEL_BIT_MASK           0x20
8391      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_UP_DOWN_BIT_MASK                      0x40
8392      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_RESERVED2_BIT_MASK                    0x80
8393      =3  
8394      =3  /* Switch Multilevel command class commands */
8395      =3  #define SWITCH_MULTILEVEL_VERSION_V2                                                     0x02
8396      =3  #define SWITCH_MULTILEVEL_GET_V2                                                         0x02
8397      =3  #define SWITCH_MULTILEVEL_REPORT_V2                                                      0x03
8398      =3  #define SWITCH_MULTILEVEL_SET_V2                                                         0x01
8399      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V2                                          0x04
8400      =3  #define SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V2                                           0x05
8401      =3  /* Values used for Switch Multilevel Start Level Change command */
8402      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_RESERVED1_MASK_V2               0x1F
8403      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_IGNORE_START_LEVEL_BIT_MASK_V2  0x20
8404      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_BIT_MASK_V2             0x40
8405      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_RESERVED2_BIT_MASK_V2           0x80
8406      =3  
8407      =3  /* Switch Multilevel command class commands */
8408      =3  #define SWITCH_MULTILEVEL_VERSION_V3                                                     0x03
8409      =3  #define SWITCH_MULTILEVEL_GET_V3                                                         0x02
8410      =3  #define SWITCH_MULTILEVEL_REPORT_V3                                                      0x03
8411      =3  #define SWITCH_MULTILEVEL_SET_V3                                                         0x01
8412      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V3                                          0x04
8413      =3  #define SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V3                                           0x05
8414      =3  #define SWITCH_MULTILEVEL_SUPPORTED_GET_V3                                               0x06
8415      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_V3                                            0x07
8416      =3  /* Values used for Switch Multilevel Start Level Change command */
8417      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_RESERVED_MASK_V3                0x07
8418      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_INC_DEC_MASK_V3                 0x18
8419      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_INC_DEC_SHIFT_V3                0x03
8420      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_INCREMENT_V3                        0x00
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 152 

8421      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_DECREMENT_V3                        0x01
8422      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_RESERVED_V3                         0x02
8423      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_NONE_V3                             0x03
8424      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_IGNORE_START_LEVEL_BIT_MASK_V3  0x20
8425      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_MASK_V3                 0xC0
8426      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_SHIFT_V3                0x06
8427      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_UP_V3                               0x00
8428      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_DOWN_V3                             0x01
8429      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_RESERVED_V3                         0x02
8430      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_NONE_V3                             0x03
8431      =3  /* Values used for Switch Multilevel Supported Report command */
8432      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES1_PRIMARY_SWITCH_TYPE_MASK_V3       0x1F
8433      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_MASK_V3                 0xE0
8434      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_SHIFT_V3                0x05
8435      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES2_SECONDARY_SWITCH_TYPE_MASK_V3     0x1F
8436      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_MASK_V3                 0xE0
8437      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_SHIFT_V3                0x05
8438      =3  
8439      =3  /* Switch Multilevel command class commands */
8440      =3  #define SWITCH_MULTILEVEL_VERSION_V4                                                     0x04
8441      =3  #define SWITCH_MULTILEVEL_GET_V4                                                         0x02
8442      =3  #define SWITCH_MULTILEVEL_REPORT_V4                                                      0x03
8443      =3  #define SWITCH_MULTILEVEL_SET_V4                                                         0x01
8444      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V4                                          0x04
8445      =3  #define SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V4                                           0x05
8446      =3  #define SWITCH_MULTILEVEL_SUPPORTED_GET_V4                                               0x06
8447      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_V4                                            0x07
8448      =3  /* Values used for Switch Multilevel Report command */
8449      =3  #define SWITCH_MULTILEVEL_REPORT_ALREADY_AT_THE_TARGET_VALUE_V4                          0x00
8450      =3  #define SWITCH_MULTILEVEL_REPORT_UNKNOWN_DURATION_V4                                     0xFE
8451      =3  #define SWITCH_MULTILEVEL_REPORT_RESERVED_V4                                             0xFF
8452      =3  /* Values used for Switch Multilevel Set command */
8453      =3  #define SWITCH_MULTILEVEL_SET_INSTANTLY_V4                                               0x00
8454      =3  #define SWITCH_MULTILEVEL_SET_DEFAULT_V4                                                 0xFF
8455      =3  /* Values used for Switch Multilevel Start Level Change command */
8456      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_RESERVED_MASK_V4                0x07
8457      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_INC_DEC_MASK_V4                 0x18
8458      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_INC_DEC_SHIFT_V4                0x03
8459      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_INCREMENT_V4                        0x00
8460      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_DECREMENT_V4                        0x01
8461      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_RESERVED_V4                         0x02
8462      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_INC_DEC_NONE_V4                             0x03
8463      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_IGNORE_START_LEVEL_BIT_MASK_V4  0x20
8464      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_MASK_V4                 0xC0
8465      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_SHIFT_V4                0x06
8466      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_UP_V4                               0x00
8467      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_DOWN_V4                             0x01
8468      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_RESERVED_V4                         0x02
8469      =3  #define SWITCH_MULTILEVEL_START_LEVEL_CHANGE_UP_DOWN_NONE_V4                             0x03
8470      =3  /* Values used for Switch Multilevel Supported Report command */
8471      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES1_PRIMARY_SWITCH_TYPE_MASK_V4       0x1F
8472      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_MASK_V4                 0xE0
8473      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_SHIFT_V4                0x05
8474      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES2_SECONDARY_SWITCH_TYPE_MASK_V4     0x1F
8475      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_MASK_V4                 0xE0
8476      =3  #define SWITCH_MULTILEVEL_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_SHIFT_V4                0x05
8477      =3  
8478      =3  /* Switch Toggle Binary command class commands */
8479      =3  #define SWITCH_TOGGLE_BINARY_VERSION                                                     0x01
8480      =3  #define SWITCH_TOGGLE_BINARY_SET                                                         0x01 /*SWITCH_TOG
             -GLE_BINARY_SET*/
8481      =3  #define SWITCH_TOGGLE_BINARY_GET                                                         0x02
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 153 

8482      =3  #define SWITCH_TOGGLE_BINARY_REPORT                                                      0x03
8483      =3  
8484      =3  /* Switch Toggle Multilevel command class commands */
8485      =3  #define SWITCH_TOGGLE_MULTILEVEL_VERSION                                                 0x01
8486      =3  #define SWITCH_TOGGLE_MULTILEVEL_SET                                                     0x01 /*SWITCH_TOG
             -GLE_MULTILEVEL_SET*/
8487      =3  #define SWITCH_TOGGLE_MULTILEVEL_GET                                                     0x02
8488      =3  #define SWITCH_TOGGLE_MULTILEVEL_REPORT                                                  0x03
8489      =3  #define SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE                                      0x04
8490      =3  #define SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE                                       0x05
8491      =3  /* Values used for Switch Toggle Multilevel Start Level Change command */
8492      =3  #define SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_RESERVED1_MASK                 0x1F
8493      =3  #define SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_IGNORE_START_LEVEL_BIT_MASK    0x20
8494      =3  #define SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_RESERVED2_BIT_MASK             0x40
8495      =3  #define SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE_LEVEL_ROLL_OVER_BIT_MASK             0x80
8496      =3  
8497      =3  /* Tariff Config command class commands */
8498      =3  #define TARIFF_CONFIG_VERSION                                                            0x01
8499      =3  #define TARIFF_TBL_REMOVE                                                                0x03
8500      =3  #define TARIFF_TBL_SET                                                                   0x02
8501      =3  #define TARIFF_TBL_SUPPLIER_SET                                                          0x01
8502      =3  /* Values used for Tariff Tbl Remove command */
8503      =3  #define TARIFF_TBL_REMOVE_PROPERTIES1_RATE_PARAMETER_SET_IDS_MASK                        0x3F
8504      =3  #define TARIFF_TBL_REMOVE_PROPERTIES1_RESERVED_MASK                                      0xC0
8505      =3  #define TARIFF_TBL_REMOVE_PROPERTIES1_RESERVED_SHIFT                                     0x06
8506      =3  /* Values used for Tariff Tbl Set command */
8507      =3  #define TARIFF_TBL_SET_PROPERTIES1_RESERVED_MASK                                         0x1F
8508      =3  #define TARIFF_TBL_SET_PROPERTIES1_TARIFF_PRECISION_MASK                                 0xE0
8509      =3  #define TARIFF_TBL_SET_PROPERTIES1_TARIFF_PRECISION_SHIFT                                0x05
8510      =3  /* Values used for Tariff Tbl Supplier Set command */
8511      =3  #define TARIFF_TBL_SUPPLIER_SET_PROPERTIES1_STANDING_CHARGE_PERIOD_MASK                  0x1F
8512      =3  #define TARIFF_TBL_SUPPLIER_SET_PROPERTIES1_STANDING_CHARGE_PRECISION_MASK               0xE0
8513      =3  #define TARIFF_TBL_SUPPLIER_SET_PROPERTIES1_STANDING_CHARGE_PRECISION_SHIFT              0x05
8514      =3  #define TARIFF_TBL_SUPPLIER_SET_PROPERTIES2_NUMBER_OF_SUPPLIER_CHARACTERS_MASK           0x1F
8515      =3  #define TARIFF_TBL_SUPPLIER_SET_PROPERTIES2_RESERVED_MASK                                0xE0
8516      =3  #define TARIFF_TBL_SUPPLIER_SET_PROPERTIES2_RESERVED_SHIFT                               0x05
8517      =3  
8518      =3  /* Tariff Tbl Monitor command class commands */
8519      =3  #define TARIFF_TBL_MONITOR_VERSION                                                       0x01
8520      =3  #define TARIFF_TBL_COST_GET                                                              0x05
8521      =3  #define TARIFF_TBL_COST_REPORT                                                           0x06
8522      =3  #define TARIFF_TBL_GET                                                                   0x03
8523      =3  #define TARIFF_TBL_REPORT                                                                0x04
8524      =3  #define TARIFF_TBL_SUPPLIER_GET                                                          0x01
8525      =3  #define TARIFF_TBL_SUPPLIER_REPORT                                                       0x02
8526      =3  /* Values used for Tariff Tbl Cost Report command */
8527      =3  #define TARIFF_TBL_COST_REPORT_PROPERTIES1_RATE_TYPE_MASK                                0x03
8528      =3  #define TARIFF_TBL_COST_REPORT_PROPERTIES1_RESERVED1_MASK                                0xFC
8529      =3  #define TARIFF_TBL_COST_REPORT_PROPERTIES1_RESERVED1_SHIFT                               0x02
8530      =3  #define TARIFF_TBL_COST_REPORT_PROPERTIES2_RESERVED2_MASK                                0x1F
8531      =3  #define TARIFF_TBL_COST_REPORT_PROPERTIES2_COST_PRECISION_MASK                           0xE0
8532      =3  #define TARIFF_TBL_COST_REPORT_PROPERTIES2_COST_PRECISION_SHIFT                          0x05
8533      =3  /* Values used for Tariff Tbl Report command */
8534      =3  #define TARIFF_TBL_REPORT_PROPERTIES1_RESERVED_MASK                                      0x1F
8535      =3  #define TARIFF_TBL_REPORT_PROPERTIES1_TARIFF_PRECISION_MASK                              0xE0
8536      =3  #define TARIFF_TBL_REPORT_PROPERTIES1_TARIFF_PRECISION_SHIFT                             0x05
8537      =3  /* Values used for Tariff Tbl Supplier Report command */
8538      =3  #define TARIFF_TBL_SUPPLIER_REPORT_PROPERTIES1_STANDING_CHARGE_PERIOD_MASK               0x1F
8539      =3  #define TARIFF_TBL_SUPPLIER_REPORT_PROPERTIES1_STANDING_CHARGE_PRECISION_MASK            0xE0
8540      =3  #define TARIFF_TBL_SUPPLIER_REPORT_PROPERTIES1_STANDING_CHARGE_PRECISION_SHIFT           0x05
8541      =3  #define TARIFF_TBL_SUPPLIER_REPORT_PROPERTIES2_NUMBER_OF_SUPPLIER_CHARACTERS_MASK        0x1F
8542      =3  #define TARIFF_TBL_SUPPLIER_REPORT_PROPERTIES2_RESERVED_MASK                             0xE0
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 154 

8543      =3  #define TARIFF_TBL_SUPPLIER_REPORT_PROPERTIES2_RESERVED_SHIFT                            0x05
8544      =3  
8545      =3  /* Thermostat Fan Mode command class commands */
8546      =3  #define THERMOSTAT_FAN_MODE_VERSION                                                      0x01
8547      =3  #define THERMOSTAT_FAN_MODE_GET                                                          0x02
8548      =3  #define THERMOSTAT_FAN_MODE_REPORT                                                       0x03
8549      =3  #define THERMOSTAT_FAN_MODE_SET                                                          0x01
8550      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_GET                                                0x04
8551      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_REPORT                                             0x05
8552      =3  /* Values used for Thermostat Fan Mode Report command */
8553      =3  #define THERMOSTAT_FAN_MODE_REPORT_LEVEL_FAN_MODE_MASK                                   0x0F
8554      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_LOW                                     0x00
8555      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_LOW                                          0x01
8556      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_HIGH                                    0x02
8557      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_HIGH                                         0x03
8558      =3  #define THERMOSTAT_FAN_MODE_REPORT_LEVEL_RESERVED_MASK                                   0xF0
8559      =3  #define THERMOSTAT_FAN_MODE_REPORT_LEVEL_RESERVED_SHIFT                                  0x04
8560      =3  /* Values used for Thermostat Fan Mode Set command */
8561      =3  #define THERMOSTAT_FAN_MODE_SET_LEVEL_FAN_MODE_MASK                                      0x0F
8562      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_LOW                                        0x00
8563      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_LOW                                             0x01
8564      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_HIGH                                       0x02
8565      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_HIGH                                            0x03
8566      =3  #define THERMOSTAT_FAN_MODE_SET_LEVEL_RESERVED_MASK                                      0xF0
8567      =3  #define THERMOSTAT_FAN_MODE_SET_LEVEL_RESERVED_SHIFT                                     0x04
8568      =3  
8569      =3  /* Thermostat Fan Mode command class commands */
8570      =3  #define THERMOSTAT_FAN_MODE_VERSION_V2                                                   0x02
8571      =3  #define THERMOSTAT_FAN_MODE_GET_V2                                                       0x02
8572      =3  #define THERMOSTAT_FAN_MODE_REPORT_V2                                                    0x03
8573      =3  #define THERMOSTAT_FAN_MODE_SET_V2                                                       0x01
8574      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_GET_V2                                             0x04
8575      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_V2                                          0x05
8576      =3  /* Values used for Thermostat Fan Mode Report command */
8577      =3  #define THERMOSTAT_FAN_MODE_REPORT_LEVEL_FAN_MODE_MASK_V2                                0x0F
8578      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_LOW_V2                                  0x00
8579      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_LOW_V2                                       0x01
8580      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_HIGH_V2                                 0x02
8581      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_HIGH_V2                                      0x03
8582      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_MEDIUM_V2                               0x04
8583      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_MEDIUM_V2                                    0x05
8584      =3  #define THERMOSTAT_FAN_MODE_REPORT_LEVEL_RESERVED_MASK_V2                                0xF0
8585      =3  #define THERMOSTAT_FAN_MODE_REPORT_LEVEL_RESERVED_SHIFT_V2                               0x04
8586      =3  /* Values used for Thermostat Fan Mode Set command */
8587      =3  #define THERMOSTAT_FAN_MODE_SET_LEVEL_FAN_MODE_MASK_V2                                   0x0F
8588      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_LOW_V2                                     0x00
8589      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_LOW_V2                                          0x01
8590      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_HIGH_V2                                    0x02
8591      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_HIGH_V2                                         0x03
8592      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_MEDIUM_V2                                  0x04
8593      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_MEDIUM_V2                                       0x05
8594      =3  #define THERMOSTAT_FAN_MODE_SET_LEVEL_RESERVED_MASK_V2                                   0x70
8595      =3  #define THERMOSTAT_FAN_MODE_SET_LEVEL_RESERVED_SHIFT_V2                                  0x04
8596      =3  #define THERMOSTAT_FAN_MODE_SET_LEVEL_OFF_BIT_MASK_V2                                    0x80
8597      =3  
8598      =3  /* Thermostat Fan Mode command class commands */
8599      =3  #define THERMOSTAT_FAN_MODE_VERSION_V3                                                   0x03
8600      =3  #define THERMOSTAT_FAN_MODE_GET_V3                                                       0x02
8601      =3  #define THERMOSTAT_FAN_MODE_REPORT_V3                                                    0x03
8602      =3  #define THERMOSTAT_FAN_MODE_SET_V3                                                       0x01
8603      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_GET_V3                                             0x04
8604      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_V3                                          0x05
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 155 

8605      =3  /* Values used for Thermostat Fan Mode Report command */
8606      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_FAN_MODE_MASK_V3                          0x0F
8607      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_LOW_V3                                  0x00
8608      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_LOW_V3                                       0x01
8609      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_HIGH_V3                                 0x02
8610      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_HIGH_V3                                      0x03
8611      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_MEDIUM_V3                               0x04
8612      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_MEDIUM_V3                                    0x05
8613      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_CIRCULATION_V3                               0x06
8614      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_HUMIDITY_V3                                  0x07
8615      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_RESERVED_MASK_V3                          0x70
8616      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                         0x04
8617      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_OFF_BIT_MASK_V3                           0x80
8618      =3  /* Values used for Thermostat Fan Mode Set command */
8619      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_FAN_MODE_MASK_V3                             0x0F
8620      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_LOW_V3                                     0x00
8621      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_LOW_V3                                          0x01
8622      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_HIGH_V3                                    0x02
8623      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_HIGH_V3                                         0x03
8624      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_MEDIUM_V3                                  0x04
8625      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_MEDIUM_V3                                       0x05
8626      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_CIRCULATION_V3                                  0x06
8627      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_HUMIDITY_V3                                     0x07
8628      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_RESERVED_MASK_V3                             0x70
8629      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_RESERVED_SHIFT_V3                            0x04
8630      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_OFF_BIT_MASK_V3                              0x80
8631      =3  
8632      =3  /* Thermostat Fan Mode command class commands */
8633      =3  #define THERMOSTAT_FAN_MODE_VERSION_V4                                                   0x04
8634      =3  #define THERMOSTAT_FAN_MODE_GET_V4                                                       0x02
8635      =3  #define THERMOSTAT_FAN_MODE_REPORT_V4                                                    0x03
8636      =3  #define THERMOSTAT_FAN_MODE_SET_V4                                                       0x01
8637      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_GET_V4                                             0x04
8638      =3  #define THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_V4                                          0x05
8639      =3  /* Values used for Thermostat Fan Mode Report command */
8640      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_FAN_MODE_MASK_V4                          0x0F
8641      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_LOW_V4                                  0x00
8642      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_LOW_V4                                       0x01
8643      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_HIGH_V4                                 0x02
8644      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_HIGH_V4                                      0x03
8645      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_AUTO_MEDIUM_V4                               0x04
8646      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_MEDIUM_V4                                    0x05
8647      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_CIRCULATION_V4                               0x06
8648      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_HUMIDITY_V4                                  0x07
8649      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_LEFT_RIGHT_V4                                0x08
8650      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_UP_DOWN_V4                                   0x09
8651      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_QUIET_V4                                     0x0A
8652      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_RESERVEDB_V4                                 0x0B
8653      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_RESERVEDC_V4                                 0x0C
8654      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_RESERVEDD_V4                                 0x0D
8655      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_RESERVEDE_V4                                 0x0E
8656      =3  #define THERMOSTAT_FAN_MODE_REPORT_FAN_MODE_RESERVEDF_V4                                 0x0F
8657      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_RESERVED_MASK_V4                          0x70
8658      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_RESERVED_SHIFT_V4                         0x04
8659      =3  #define THERMOSTAT_FAN_MODE_REPORT_PROPERTIES1_OFF_BIT_MASK_V4                           0x80
8660      =3  /* Values used for Thermostat Fan Mode Set command */
8661      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_FAN_MODE_MASK_V4                             0x0F
8662      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_LOW_V4                                     0x00
8663      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_LOW_V4                                          0x01
8664      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_HIGH_V4                                    0x02
8665      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_HIGH_V4                                         0x03
8666      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_AUTO_MEDIUM_V4                                  0x04
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 156 

8667      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_MEDIUM_V4                                       0x05
8668      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_CIRCULATION_V4                                  0x06
8669      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_HUMIDITY_V4                                     0x07
8670      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_LEFT_RIGHT_V4                                   0x08
8671      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_UP_DOWN_V4                                      0x09
8672      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_QUIET_V4                                        0x0A
8673      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_RESERVEDB_V4                                    0x0B
8674      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_RESERVEDC_V4                                    0x0C
8675      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_RESERVEDD_V4                                    0x0D
8676      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_RESERVEDE_V4                                    0x0E
8677      =3  #define THERMOSTAT_FAN_MODE_SET_FAN_MODE_RESERVEDF_V4                                    0x0F
8678      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_RESERVED_MASK_V4                             0x70
8679      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_RESERVED_SHIFT_V4                            0x04
8680      =3  #define THERMOSTAT_FAN_MODE_SET_PROPERTIES1_OFF_BIT_MASK_V4                              0x80
8681      =3  
8682      =3  /* Thermostat Fan State command class commands */
8683      =3  #define THERMOSTAT_FAN_STATE_VERSION                                                     0x01
8684      =3  #define THERMOSTAT_FAN_STATE_GET                                                         0x02
8685      =3  #define THERMOSTAT_FAN_STATE_REPORT                                                      0x03
8686      =3  /* Values used for Thermostat Fan State Report command */
8687      =3  #define THERMOSTAT_FAN_STATE_REPORT_LEVEL_FAN_OPERATING_STATE_MASK                       0x0F
8688      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_IDLE                             0x00
8689      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_RUNNING                          0x01
8690      =3  #define THERMOSTAT_FAN_STATE_REPORT_LEVEL_RESERVED_MASK                                  0xF0
8691      =3  #define THERMOSTAT_FAN_STATE_REPORT_LEVEL_RESERVED_SHIFT                                 0x04
8692      =3  
8693      =3  /* Thermostat Fan State command class commands */
8694      =3  #define THERMOSTAT_FAN_STATE_VERSION_V2                                                  0x02
8695      =3  #define THERMOSTAT_FAN_STATE_GET_V2                                                      0x02
8696      =3  #define THERMOSTAT_FAN_STATE_REPORT_V2                                                   0x03
8697      =3  /* Values used for Thermostat Fan State Report command */
8698      =3  #define THERMOSTAT_FAN_STATE_REPORT_LEVEL_FAN_OPERATING_STATE_MASK_V2                    0x0F
8699      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_IDLE_V2                          0x00
8700      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_RUNNING_V2                       0x01
8701      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_RUNNING_HIGH_V2                  0x02
8702      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_RUNNING_MEDIUM_V2                0x03
8703      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_CIRCULATION_V2                   0x04
8704      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_HUMIDITY_CIRCULATION_V2          0x05
8705      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_RIGHT_LEFT_CIRCULATION_V2        0x06
8706      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_UP_DOWN_CIRCULATION_V2           0x07
8707      =3  #define THERMOSTAT_FAN_STATE_REPORT_FAN_OPERATING_STATE_QUIET_CIRCULATION_V2             0x08
8708      =3  #define THERMOSTAT_FAN_STATE_REPORT_LEVEL_RESERVED_MASK_V2                               0xF0
8709      =3  #define THERMOSTAT_FAN_STATE_REPORT_LEVEL_RESERVED_SHIFT_V2                              0x04
8710      =3  
8711      =3  /* Thermostat Heating command class commands */
8712      =3  #define THERMOSTAT_HEATING_VERSION                                                       0x01
8713      =3  #define THERMOSTAT_HEATING_STATUS_REPORT                                                 0x0D
8714      =3  #define THERMOSTAT_HEATING_MODE_GET                                                      0x02
8715      =3  #define THERMOSTAT_HEATING_MODE_REPORT                                                   0x03
8716      =3  #define THERMOSTAT_HEATING_MODE_SET                                                      0x01
8717      =3  #define THERMOSTAT_HEATING_RELAY_STATUS_GET                                              0x09
8718      =3  #define THERMOSTAT_HEATING_RELAY_STATUS_REPORT                                           0x0A
8719      =3  #define THERMOSTAT_HEATING_SETPOINT_GET                                                  0x05
8720      =3  #define THERMOSTAT_HEATING_SETPOINT_REPORT                                               0x06
8721      =3  #define THERMOSTAT_HEATING_SETPOINT_SET                                                  0x04
8722      =3  #define THERMOSTAT_HEATING_STATUS_GET                                                    0x0C
8723      =3  #define THERMOSTAT_HEATING_STATUS_SET                                                    0x0B
8724      =3  #define THERMOSTAT_HEATING_TIMED_OFF_SET                                                 0x11
8725      =3  /* Values used for Thermostat Heating Status Report command */
8726      =3  #define THERMOSTAT_HEATING_STATUS_REPORT_HEATING                                         0x00
8727      =3  #define THERMOSTAT_HEATING_STATUS_REPORT_COOLING                                         0x01
8728      =3  /* Values used for Thermostat Heating Mode Report command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 157 

8729      =3  #define THERMOSTAT_HEATING_MODE_REPORT_OFF                                               0x00
8730      =3  #define THERMOSTAT_HEATING_MODE_REPORT_OFF_TIMED                                         0x01
8731      =3  #define THERMOSTAT_HEATING_MODE_REPORT_OFF_3_HOURS                                       0x02
8732      =3  #define THERMOSTAT_HEATING_MODE_REPORT_ANTI_FREEZE                                       0x03
8733      =3  #define THERMOSTAT_HEATING_MODE_REPORT_MANUAL                                            0x04
8734      =3  #define THERMOSTAT_HEATING_MODE_REPORT_TEMPORARY_MANUAL                                  0x05
8735      =3  #define THERMOSTAT_HEATING_MODE_REPORT_AUTOMATIC                                         0x06
8736      =3  #define THERMOSTAT_HEATING_MODE_REPORT_MANUAL_TIMED                                      0x07
8737      =3  /* Values used for Thermostat Heating Mode Set command */
8738      =3  #define THERMOSTAT_HEATING_MODE_SET_OFF                                                  0x00
8739      =3  #define THERMOSTAT_HEATING_MODE_SET_OFF_TIMED                                            0x01
8740      =3  #define THERMOSTAT_HEATING_MODE_SET_OFF_3_HOURS                                          0x02
8741      =3  #define THERMOSTAT_HEATING_MODE_SET_ANTI_FREEZE                                          0x03
8742      =3  #define THERMOSTAT_HEATING_MODE_SET_MANUAL                                               0x04
8743      =3  #define THERMOSTAT_HEATING_MODE_SET_TEMPORARY_MANUAL                                     0x05
8744      =3  #define THERMOSTAT_HEATING_MODE_SET_AUTOMATIC                                            0x06
8745      =3  #define THERMOSTAT_HEATING_MODE_SET_MANUAL_TIMED                                         0x07
8746      =3  /* Values used for Thermostat Heating Relay Status Report command */
8747      =3  #define THERMOSTAT_HEATING_RELAY_STATUS_REPORT_OFF                                       0x00
8748      =3  #define THERMOSTAT_HEATING_RELAY_STATUS_REPORT_ON                                        0x01
8749      =3  /* Values used for Thermostat Heating Setpoint Report command */
8750      =3  #define THERMOSTAT_HEATING_SETPOINT_REPORT_PROPERTIES1_SIZE_MASK                         0x07
8751      =3  #define THERMOSTAT_HEATING_SETPOINT_REPORT_PROPERTIES1_SCALE_MASK                        0x18
8752      =3  #define THERMOSTAT_HEATING_SETPOINT_REPORT_PROPERTIES1_SCALE_SHIFT                       0x03
8753      =3  #define THERMOSTAT_HEATING_SETPOINT_REPORT_PROPERTIES1_PRECISION_MASK                    0xE0
8754      =3  #define THERMOSTAT_HEATING_SETPOINT_REPORT_PROPERTIES1_PRECISION_SHIFT                   0x05
8755      =3  /* Values used for Thermostat Heating Setpoint Set command */
8756      =3  #define THERMOSTAT_HEATING_SETPOINT_SET_PROPERTIES1_SIZE_MASK                            0x07
8757      =3  #define THERMOSTAT_HEATING_SETPOINT_SET_PROPERTIES1_SCALE_MASK                           0x18
8758      =3  #define THERMOSTAT_HEATING_SETPOINT_SET_PROPERTIES1_SCALE_SHIFT                          0x03
8759      =3  #define THERMOSTAT_HEATING_SETPOINT_SET_PROPERTIES1_PRECISION_MASK                       0xE0
8760      =3  #define THERMOSTAT_HEATING_SETPOINT_SET_PROPERTIES1_PRECISION_SHIFT                      0x05
8761      =3  /* Values used for Thermostat Heating Status Set command */
8762      =3  #define THERMOSTAT_HEATING_STATUS_SET_HEATING                                            0x00
8763      =3  #define THERMOSTAT_HEATING_STATUS_SET_COOLING                                            0x01
8764      =3  
8765      =3  /* Thermostat Mode command class commands */
8766      =3  #define THERMOSTAT_MODE_VERSION                                                          0x01
8767      =3  #define THERMOSTAT_MODE_GET                                                              0x02
8768      =3  #define THERMOSTAT_MODE_REPORT                                                           0x03
8769      =3  #define THERMOSTAT_MODE_SET                                                              0x01
8770      =3  #define THERMOSTAT_MODE_SUPPORTED_GET                                                    0x04
8771      =3  #define THERMOSTAT_MODE_SUPPORTED_REPORT                                                 0x05
8772      =3  /* Values used for Thermostat Mode Report command */
8773      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_MODE_MASK                                           0x1F
8774      =3  #define THERMOSTAT_MODE_REPORT_MODE_OFF                                                  0x00
8775      =3  #define THERMOSTAT_MODE_REPORT_MODE_HEAT                                                 0x01
8776      =3  #define THERMOSTAT_MODE_REPORT_MODE_COOL                                                 0x02
8777      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUTO                                                 0x03
8778      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUXILIARY_HEAT                                       0x04
8779      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESUME                                               0x05
8780      =3  #define THERMOSTAT_MODE_REPORT_MODE_FAN_ONLY                                             0x06
8781      =3  #define THERMOSTAT_MODE_REPORT_MODE_FURNACE                                              0x07
8782      =3  #define THERMOSTAT_MODE_REPORT_MODE_DRY_AIR                                              0x08
8783      =3  #define THERMOSTAT_MODE_REPORT_MODE_MOIST_AIR                                            0x09
8784      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUTO_CHANGEOVER                                      0x0A
8785      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_RESERVED_MASK                                       0xE0
8786      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_RESERVED_SHIFT                                      0x05
8787      =3  /* Values used for Thermostat Mode Set command */
8788      =3  #define THERMOSTAT_MODE_SET_LEVEL_MODE_MASK                                              0x1F
8789      =3  #define THERMOSTAT_MODE_SET_MODE_OFF                                                     0x00
8790      =3  #define THERMOSTAT_MODE_SET_MODE_HEAT                                                    0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 158 

8791      =3  #define THERMOSTAT_MODE_SET_MODE_COOL                                                    0x02
8792      =3  #define THERMOSTAT_MODE_SET_MODE_AUTO                                                    0x03
8793      =3  #define THERMOSTAT_MODE_SET_MODE_AUXILIARY_HEAT                                          0x04
8794      =3  #define THERMOSTAT_MODE_SET_MODE_RESUME                                                  0x05
8795      =3  #define THERMOSTAT_MODE_SET_MODE_FAN_ONLY                                                0x06
8796      =3  #define THERMOSTAT_MODE_SET_MODE_FURNACE                                                 0x07
8797      =3  #define THERMOSTAT_MODE_SET_MODE_DRY_AIR                                                 0x08
8798      =3  #define THERMOSTAT_MODE_SET_MODE_MOIST_AIR                                               0x09
8799      =3  #define THERMOSTAT_MODE_SET_MODE_AUTO_CHANGEOVER                                         0x0A
8800      =3  #define THERMOSTAT_MODE_SET_LEVEL_RESERVED_MASK                                          0xE0
8801      =3  #define THERMOSTAT_MODE_SET_LEVEL_RESERVED_SHIFT                                         0x05
8802      =3  
8803      =3  /* Thermostat Mode command class commands */
8804      =3  #define THERMOSTAT_MODE_VERSION_V2                                                       0x02
8805      =3  #define THERMOSTAT_MODE_GET_V2                                                           0x02
8806      =3  #define THERMOSTAT_MODE_REPORT_V2                                                        0x03
8807      =3  #define THERMOSTAT_MODE_SET_V2                                                           0x01
8808      =3  #define THERMOSTAT_MODE_SUPPORTED_GET_V2                                                 0x04
8809      =3  #define THERMOSTAT_MODE_SUPPORTED_REPORT_V2                                              0x05
8810      =3  /* Values used for Thermostat Mode Report command */
8811      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_MODE_MASK_V2                                        0x1F
8812      =3  #define THERMOSTAT_MODE_REPORT_MODE_OFF_V2                                               0x00
8813      =3  #define THERMOSTAT_MODE_REPORT_MODE_HEAT_V2                                              0x01
8814      =3  #define THERMOSTAT_MODE_REPORT_MODE_COOL_V2                                              0x02
8815      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUTO_V2                                              0x03
8816      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUXILIARY_HEAT_V2                                    0x04
8817      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESUME_V2                                            0x05
8818      =3  #define THERMOSTAT_MODE_REPORT_MODE_FAN_ONLY_V2                                          0x06
8819      =3  #define THERMOSTAT_MODE_REPORT_MODE_FURNACE_V2                                           0x07
8820      =3  #define THERMOSTAT_MODE_REPORT_MODE_DRY_AIR_V2                                           0x08
8821      =3  #define THERMOSTAT_MODE_REPORT_MODE_MOIST_AIR_V2                                         0x09
8822      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUTO_CHANGEOVER_V2                                   0x0A
8823      =3  #define THERMOSTAT_MODE_REPORT_MODE_ENERGY_SAVE_HEAT_V2                                  0x0B
8824      =3  #define THERMOSTAT_MODE_REPORT_MODE_ENERGY_SAVE_COOL_V2                                  0x0C
8825      =3  #define THERMOSTAT_MODE_REPORT_MODE_AWAY_V2                                              0x0D
8826      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_RESERVED_MASK_V2                                    0xE0
8827      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_RESERVED_SHIFT_V2                                   0x05
8828      =3  /* Values used for Thermostat Mode Set command */
8829      =3  #define THERMOSTAT_MODE_SET_LEVEL_MODE_MASK_V2                                           0x1F
8830      =3  #define THERMOSTAT_MODE_SET_MODE_OFF_V2                                                  0x00
8831      =3  #define THERMOSTAT_MODE_SET_MODE_HEAT_V2                                                 0x01
8832      =3  #define THERMOSTAT_MODE_SET_MODE_COOL_V2                                                 0x02
8833      =3  #define THERMOSTAT_MODE_SET_MODE_AUTO_V2                                                 0x03
8834      =3  #define THERMOSTAT_MODE_SET_MODE_AUXILIARY_HEAT_V2                                       0x04
8835      =3  #define THERMOSTAT_MODE_SET_MODE_RESUME_V2                                               0x05
8836      =3  #define THERMOSTAT_MODE_SET_MODE_FAN_ONLY_V2                                             0x06
8837      =3  #define THERMOSTAT_MODE_SET_MODE_FURNACE_V2                                              0x07
8838      =3  #define THERMOSTAT_MODE_SET_MODE_DRY_AIR_V2                                              0x08
8839      =3  #define THERMOSTAT_MODE_SET_MODE_MOIST_AIR_V2                                            0x09
8840      =3  #define THERMOSTAT_MODE_SET_MODE_AUTO_CHANGEOVER_V2                                      0x0A
8841      =3  #define THERMOSTAT_MODE_SET_MODE_ENERGY_SAVE_HEAT_V2                                     0x0B
8842      =3  #define THERMOSTAT_MODE_SET_MODE_ENERGY_SAVE_COOL_V2                                     0x0C
8843      =3  #define THERMOSTAT_MODE_SET_MODE_AWAY_V2                                                 0x0D
8844      =3  #define THERMOSTAT_MODE_SET_LEVEL_RESERVED_MASK_V2                                       0xE0
8845      =3  #define THERMOSTAT_MODE_SET_LEVEL_RESERVED_SHIFT_V2                                      0x05
8846      =3  
8847      =3  /* Thermostat Mode command class commands */
8848      =3  #define THERMOSTAT_MODE_VERSION_V3                                                       0x03
8849      =3  #define THERMOSTAT_MODE_GET_V3                                                           0x02
8850      =3  #define THERMOSTAT_MODE_REPORT_V3                                                        0x03
8851      =3  #define THERMOSTAT_MODE_SET_V3                                                           0x01
8852      =3  #define THERMOSTAT_MODE_SUPPORTED_GET_V3                                                 0x04
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 159 

8853      =3  #define THERMOSTAT_MODE_SUPPORTED_REPORT_V3                                              0x05
8854      =3  /* Values used for Thermostat Mode Report command */
8855      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_MODE_MASK_V3                                        0x1F
8856      =3  #define THERMOSTAT_MODE_REPORT_MODE_OFF_V3                                               0x00
8857      =3  #define THERMOSTAT_MODE_REPORT_MODE_HEAT_V3                                              0x01
8858      =3  #define THERMOSTAT_MODE_REPORT_MODE_COOL_V3                                              0x02
8859      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUTO_V3                                              0x03
8860      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUXILIARY_HEAT_V3                                    0x04
8861      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESUME_V3                                            0x05
8862      =3  #define THERMOSTAT_MODE_REPORT_MODE_FAN_ONLY_V3                                          0x06
8863      =3  #define THERMOSTAT_MODE_REPORT_MODE_FURNACE_V3                                           0x07
8864      =3  #define THERMOSTAT_MODE_REPORT_MODE_DRY_AIR_V3                                           0x08
8865      =3  #define THERMOSTAT_MODE_REPORT_MODE_MOIST_AIR_V3                                         0x09
8866      =3  #define THERMOSTAT_MODE_REPORT_MODE_AUTO_CHANGEOVER_V3                                   0x0A
8867      =3  #define THERMOSTAT_MODE_REPORT_MODE_ENERGY_SAVE_HEAT_V3                                  0x0B
8868      =3  #define THERMOSTAT_MODE_REPORT_MODE_ENERGY_SAVE_COOL_V3                                  0x0C
8869      =3  #define THERMOSTAT_MODE_REPORT_MODE_AWAY_V3                                              0x0D
8870      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED_V3                                          0x0E
8871      =3  #define THERMOSTAT_MODE_REPORT_MODE_FULL_POWER_V3                                        0x0F
8872      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED0_V3                                         0x10
8873      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED1_V3                                         0x11
8874      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED2_V3                                         0x12
8875      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED3_V3                                         0x13
8876      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED4_V3                                         0x14
8877      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED5_V3                                         0x15
8878      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED6_V3                                         0x16
8879      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED7_V3                                         0x17
8880      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED8_V3                                         0x18
8881      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVED9_V3                                         0x19
8882      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVEDA_V3                                         0x1A
8883      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVEDB_V3                                         0x1B
8884      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVEDC_V3                                         0x1C
8885      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVEDD_V3                                         0x1D
8886      =3  #define THERMOSTAT_MODE_REPORT_MODE_RESERVEDE_V3                                         0x1E
8887      =3  #define THERMOSTAT_MODE_REPORT_MODE_MANUFACTURER_SPECIFC_V3                              0x1F
8888      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_NO_OF_MANUFACTURER_DATA_FIELDS_MASK_V3              0xE0
8889      =3  #define THERMOSTAT_MODE_REPORT_LEVEL_NO_OF_MANUFACTURER_DATA_FIELDS_SHIFT_V3             0x05
8890      =3  /* Values used for Thermostat Mode Set command */
8891      =3  #define THERMOSTAT_MODE_SET_LEVEL_MODE_MASK_V3                                           0x1F
8892      =3  #define THERMOSTAT_MODE_SET_MODE_OFF_V3                                                  0x00
8893      =3  #define THERMOSTAT_MODE_SET_MODE_HEAT_V3                                                 0x01
8894      =3  #define THERMOSTAT_MODE_SET_MODE_COOL_V3                                                 0x02
8895      =3  #define THERMOSTAT_MODE_SET_MODE_AUTO_V3                                                 0x03
8896      =3  #define THERMOSTAT_MODE_SET_MODE_AUXILIARY_HEAT_V3                                       0x04
8897      =3  #define THERMOSTAT_MODE_SET_MODE_RESUME_V3                                               0x05
8898      =3  #define THERMOSTAT_MODE_SET_MODE_FAN_ONLY_V3                                             0x06
8899      =3  #define THERMOSTAT_MODE_SET_MODE_FURNACE_V3                                              0x07
8900      =3  #define THERMOSTAT_MODE_SET_MODE_DRY_AIR_V3                                              0x08
8901      =3  #define THERMOSTAT_MODE_SET_MODE_MOIST_AIR_V3                                            0x09
8902      =3  #define THERMOSTAT_MODE_SET_MODE_AUTO_CHANGEOVER_V3                                      0x0A
8903      =3  #define THERMOSTAT_MODE_SET_MODE_ENERGY_SAVE_HEAT_V3                                     0x0B
8904      =3  #define THERMOSTAT_MODE_SET_MODE_ENERGY_SAVE_COOL_V3                                     0x0C
8905      =3  #define THERMOSTAT_MODE_SET_MODE_AWAY_V3                                                 0x0D
8906      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED_V3                                             0x0E
8907      =3  #define THERMOSTAT_MODE_SET_MODE_FULL_POWER_V3                                           0x0F
8908      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED0_V3                                            0x10
8909      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED1_V3                                            0x11
8910      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED2_V3                                            0x12
8911      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED3_V3                                            0x13
8912      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED4_V3                                            0x14
8913      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED5_V3                                            0x15
8914      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED6_V3                                            0x16
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 160 

8915      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED7_V3                                            0x17
8916      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED8_V3                                            0x18
8917      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVED9_V3                                            0x19
8918      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVEDA_V3                                            0x1A
8919      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVEDB_V3                                            0x1B
8920      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVEDC_V3                                            0x1C
8921      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVEDD_V3                                            0x1D
8922      =3  #define THERMOSTAT_MODE_SET_MODE_RESERVEDE_V3                                            0x1E
8923      =3  #define THERMOSTAT_MODE_SET_MODE_MANUFACTURER_SPECIFC_V3                                 0x1F
8924      =3  #define THERMOSTAT_MODE_SET_LEVEL_NO_OF_MANUFACTURER_DATA_FIELDS_MASK_V3                 0xE0
8925      =3  #define THERMOSTAT_MODE_SET_LEVEL_NO_OF_MANUFACTURER_DATA_FIELDS_SHIFT_V3                0x05
8926      =3  
8927      =3  /* Thermostat Operating State command class commands */
8928      =3  #define THERMOSTAT_OPERATING_STATE_VERSION                                               0x01
8929      =3  #define THERMOSTAT_OPERATING_STATE_GET                                                   0x02
8930      =3  #define THERMOSTAT_OPERATING_STATE_REPORT                                                0x03
8931      =3  /* Values used for Thermostat Operating State Report command */
8932      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_LEVEL_OPERATING_STATE_MASK                     0x0F
8933      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_IDLE                           0x00
8934      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_HEATING                        0x01
8935      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_COOLING                        0x02
8936      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_FAN_ONLY                       0x03
8937      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_PENDING_HEAT                   0x04
8938      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_PENDING_COOL                   0x05
8939      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_VENT_ECONOMIZER                0x06
8940      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_LEVEL_RESERVED_MASK                            0xF0
8941      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_LEVEL_RESERVED_SHIFT                           0x04
8942      =3  
8943      =3  /* Thermostat Operating State command class commands */
8944      =3  #define THERMOSTAT_OPERATING_STATE_VERSION_V2                                            0x02
8945      =3  #define THERMOSTAT_OPERATING_STATE_GET_V2                                                0x02
8946      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_V2                                             0x03
8947      =3  #define THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET_V2                              0x01
8948      =3  #define THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_V2                                 0x04
8949      =3  #define THERMOSTAT_OPERATING_STATE_LOGGING_GET_V2                                        0x05
8950      =3  #define THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2                                     0x06
8951      =3  /* Values used for Thermostat Operating State Report command */
8952      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_PROPERTIES1_OPERATING_STATE_MASK_V2            0x0F
8953      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_IDLE_V2                        0x00
8954      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_HEATING_V2                     0x01
8955      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_COOLING_V2                     0x02
8956      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_FAN_ONLY_V2                    0x03
8957      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_PENDING_HEAT_V2                0x04
8958      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_PENDING_COOL_V2                0x05
8959      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_VENT_ECONOMIZER_V2             0x06
8960      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_AUX_HEATING_V2                 0x07
8961      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_2ND_STAGE_HEATING_V2           0x08
8962      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_2ND_STAGE_COOLING_V2           0x09
8963      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_2ND_STAGE_AUX_HEAT_V2          0x0A
8964      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_OPERATING_STATE_3RD_STAGE_AUX_HEAT_V2          0x0B
8965      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_PROPERTIES1_RESERVED_MASK_V2                   0xF0
8966      =3  #define THERMOSTAT_OPERATING_STATE_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                  0x04
8967      =3  
8968      =3  /* Thermostat Setback command class commands */
8969      =3  #define THERMOSTAT_SETBACK_VERSION                                                       0x01
8970      =3  #define THERMOSTAT_SETBACK_GET                                                           0x02
8971      =3  #define THERMOSTAT_SETBACK_REPORT                                                        0x03
8972      =3  #define THERMOSTAT_SETBACK_SET                                                           0x01
8973      =3  /* Values used for Thermostat Setback Report command */
8974      =3  #define THERMOSTAT_SETBACK_REPORT_PROPERTIES1_SETBACK_TYPE_MASK                          0x03
8975      =3  #define THERMOSTAT_SETBACK_REPORT_SETBACK_TYPE_NO_OVERRIDE                               0x00
8976      =3  #define THERMOSTAT_SETBACK_REPORT_SETBACK_TYPE_TEMPORARY_OVERRIDE                        0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 161 

8977      =3  #define THERMOSTAT_SETBACK_REPORT_SETBACK_TYPE_PERMANENT_OVERRIDE                        0x02
8978      =3  #define THERMOSTAT_SETBACK_REPORT_SETBACK_TYPE_RESERVED                                  0x03
8979      =3  #define THERMOSTAT_SETBACK_REPORT_PROPERTIES1_RESERVED_MASK                              0xFC
8980      =3  #define THERMOSTAT_SETBACK_REPORT_PROPERTIES1_RESERVED_SHIFT                             0x02
8981      =3  /* Values used for Thermostat Setback Set command */
8982      =3  #define THERMOSTAT_SETBACK_SET_PROPERTIES1_SETBACK_TYPE_MASK                             0x03
8983      =3  #define THERMOSTAT_SETBACK_SET_SETBACK_TYPE_NO_OVERRIDE                                  0x00
8984      =3  #define THERMOSTAT_SETBACK_SET_SETBACK_TYPE_TEMPORARY_OVERRIDE                           0x01
8985      =3  #define THERMOSTAT_SETBACK_SET_SETBACK_TYPE_PERMANENT_OVERRIDE                           0x02
8986      =3  #define THERMOSTAT_SETBACK_SET_SETBACK_TYPE_RESERVED                                     0x03
8987      =3  #define THERMOSTAT_SETBACK_SET_PROPERTIES1_RESERVED_MASK                                 0xFC
8988      =3  #define THERMOSTAT_SETBACK_SET_PROPERTIES1_RESERVED_SHIFT                                0x02
8989      =3  
8990      =3  /* Thermostat Setpoint command class commands */
8991      =3  #define THERMOSTAT_SETPOINT_VERSION                                                      0x01
8992      =3  #define THERMOSTAT_SETPOINT_GET                                                          0x02
8993      =3  #define THERMOSTAT_SETPOINT_REPORT                                                       0x03
8994      =3  #define THERMOSTAT_SETPOINT_SET                                                          0x01
8995      =3  #define THERMOSTAT_SETPOINT_SUPPORTED_GET                                                0x04
8996      =3  #define THERMOSTAT_SETPOINT_SUPPORTED_REPORT                                             0x05
8997      =3  /* Values used for Thermostat Setpoint Get command */
8998      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_SETPOINT_TYPE_MASK                                 0x0F
8999      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED                              0x00
9000      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_HEATING_1                                  0x01
9001      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_COOLING_1                                  0x02
9002      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED1                             0x03
9003      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED2                             0x04
9004      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED3                             0x05
9005      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED4                             0x06
9006      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_FURNACE                                    0x07
9007      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_DRY_AIR                                    0x08
9008      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_MOIST_AIR                                  0x09
9009      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_AUTO_CHANGEOVER                            0x0A
9010      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_RESERVED_MASK                                      0xF0
9011      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_RESERVED_SHIFT                                     0x04
9012      =3  /* Values used for Thermostat Setpoint Report command */
9013      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_SETPOINT_TYPE_MASK                              0x0F
9014      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED                           0x00
9015      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_HEATING_1                               0x01
9016      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_COOLING_1                               0x02
9017      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED1                          0x03
9018      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED2                          0x04
9019      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED3                          0x05
9020      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED4                          0x06
9021      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_FURNACE                                 0x07
9022      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_DRY_AIR                                 0x08
9023      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_MOIST_AIR                               0x09
9024      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_AUTO_CHANGEOVER                         0x0A
9025      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_RESERVED_MASK                                   0xF0
9026      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_RESERVED_SHIFT                                  0x04
9027      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SIZE_MASK                                      0x07
9028      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SCALE_MASK                                     0x18
9029      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SCALE_SHIFT                                    0x03
9030      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_PRECISION_MASK                                 0xE0
9031      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_PRECISION_SHIFT                                0x05
9032      =3  /* Values used for Thermostat Setpoint Set command */
9033      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_SETPOINT_TYPE_MASK                                 0x0F
9034      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED                              0x00
9035      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_HEATING_1                                  0x01
9036      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_COOLING_1                                  0x02
9037      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED1                             0x03
9038      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED2                             0x04
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 162 

9039      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED3                             0x05
9040      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED4                             0x06
9041      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_FURNACE                                    0x07
9042      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_DRY_AIR                                    0x08
9043      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_MOIST_AIR                                  0x09
9044      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_AUTO_CHANGEOVER                            0x0A
9045      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_RESERVED_MASK                                      0xF0
9046      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_RESERVED_SHIFT                                     0x04
9047      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SIZE_MASK                                         0x07
9048      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SCALE_MASK                                        0x18
9049      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SCALE_SHIFT                                       0x03
9050      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_PRECISION_MASK                                    0xE0
9051      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_PRECISION_SHIFT                                   0x05
9052      =3  
9053      =3  /* Thermostat Setpoint command class commands */
9054      =3  #define THERMOSTAT_SETPOINT_VERSION_V2                                                   0x02
9055      =3  #define THERMOSTAT_SETPOINT_GET_V2                                                       0x02
9056      =3  #define THERMOSTAT_SETPOINT_REPORT_V2                                                    0x03
9057      =3  #define THERMOSTAT_SETPOINT_SET_V2                                                       0x01
9058      =3  #define THERMOSTAT_SETPOINT_SUPPORTED_GET_V2                                             0x04
9059      =3  #define THERMOSTAT_SETPOINT_SUPPORTED_REPORT_V2                                          0x05
9060      =3  /* Values used for Thermostat Setpoint Get command */
9061      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_SETPOINT_TYPE_MASK_V2                              0x0F
9062      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED_V2                           0x00
9063      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_HEATING_1_V2                               0x01
9064      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_COOLING_1_V2                               0x02
9065      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED1_V2                          0x03
9066      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED2_V2                          0x04
9067      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED3_V2                          0x05
9068      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED4_V2                          0x06
9069      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_FURNACE_V2                                 0x07
9070      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_DRY_AIR_V2                                 0x08
9071      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_MOIST_AIR_V2                               0x09
9072      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_AUTO_CHANGEOVER_V2                         0x0A
9073      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V2                     0x0B
9074      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V2                     0x0C
9075      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_AWAY_HEATING_V2                            0x0D
9076      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_RESERVED_MASK_V2                                   0xF0
9077      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_RESERVED_SHIFT_V2                                  0x04
9078      =3  /* Values used for Thermostat Setpoint Report command */
9079      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_SETPOINT_TYPE_MASK_V2                           0x0F
9080      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED_V2                        0x00
9081      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_HEATING_1_V2                            0x01
9082      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_COOLING_1_V2                            0x02
9083      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED1_V2                       0x03
9084      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED2_V2                       0x04
9085      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED3_V2                       0x05
9086      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED4_V2                       0x06
9087      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_FURNACE_V2                              0x07
9088      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_DRY_AIR_V2                              0x08
9089      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_MOIST_AIR_V2                            0x09
9090      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_AUTO_CHANGEOVER_V2                      0x0A
9091      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V2                  0x0B
9092      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V2                  0x0C
9093      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_AWAY_HEATING_V2                         0x0D
9094      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_RESERVED_MASK_V2                                0xF0
9095      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_RESERVED_SHIFT_V2                               0x04
9096      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SIZE_MASK_V2                                   0x07
9097      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SCALE_MASK_V2                                  0x18
9098      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SCALE_SHIFT_V2                                 0x03
9099      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_PRECISION_MASK_V2                              0xE0
9100      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_PRECISION_SHIFT_V2                             0x05
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 163 

9101      =3  /* Values used for Thermostat Setpoint Set command */
9102      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_SETPOINT_TYPE_MASK_V2                              0x0F
9103      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED_V2                           0x00
9104      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_HEATING_1_V2                               0x01
9105      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_COOLING_1_V2                               0x02
9106      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED1_V2                          0x03
9107      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED2_V2                          0x04
9108      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED3_V2                          0x05
9109      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED4_V2                          0x06
9110      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_FURNACE_V2                                 0x07
9111      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_DRY_AIR_V2                                 0x08
9112      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_MOIST_AIR_V2                               0x09
9113      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_AUTO_CHANGEOVER_V2                         0x0A
9114      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V2                     0x0B
9115      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V2                     0x0C
9116      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_AWAY_HEATING_V2                            0x0D
9117      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_RESERVED_MASK_V2                                   0xF0
9118      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_RESERVED_SHIFT_V2                                  0x04
9119      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SIZE_MASK_V2                                      0x07
9120      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SCALE_MASK_V2                                     0x18
9121      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SCALE_SHIFT_V2                                    0x03
9122      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_PRECISION_MASK_V2                                 0xE0
9123      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_PRECISION_SHIFT_V2                                0x05
9124      =3  
9125      =3  /* Thermostat Setpoint command class commands */
9126      =3  #define THERMOSTAT_SETPOINT_VERSION_V3                                                   0x03
9127      =3  #define THERMOSTAT_SETPOINT_GET_V3                                                       0x02
9128      =3  #define THERMOSTAT_SETPOINT_REPORT_V3                                                    0x03
9129      =3  #define THERMOSTAT_SETPOINT_SET_V3                                                       0x01
9130      =3  #define THERMOSTAT_SETPOINT_SUPPORTED_GET_V3                                             0x04
9131      =3  #define THERMOSTAT_SETPOINT_SUPPORTED_REPORT_V3                                          0x05
9132      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_V3                                          0x09
9133      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_V3                                       0x0A
9134      =3  /* Values used for Thermostat Setpoint Get command */
9135      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_SETPOINT_TYPE_MASK_V3                              0x0F
9136      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED_V3                           0x00
9137      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_HEATING_1_V3                               0x01
9138      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_COOLING_1_V3                               0x02
9139      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED1_V3                          0x03
9140      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED2_V3                          0x04
9141      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED3_V3                          0x05
9142      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_NOT_SUPPORTED4_V3                          0x06
9143      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_FURNACE_V3                                 0x07
9144      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_DRY_AIR_V3                                 0x08
9145      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_MOIST_AIR_V3                               0x09
9146      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_AUTO_CHANGEOVER_V3                         0x0A
9147      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V3                     0x0B
9148      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V3                     0x0C
9149      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_AWAY_HEATING_V3                            0x0D
9150      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_AWAY_COOLING_V3                            0x0E
9151      =3  #define THERMOSTAT_SETPOINT_GET_SETPOINT_TYPE_FULL_POWER_V3                              0x0F
9152      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_RESERVED_MASK_V3                                   0xF0
9153      =3  #define THERMOSTAT_SETPOINT_GET_LEVEL_RESERVED_SHIFT_V3                                  0x04
9154      =3  /* Values used for Thermostat Setpoint Report command */
9155      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_SETPOINT_TYPE_MASK_V3                           0x0F
9156      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED_V3                        0x00
9157      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_HEATING_1_V3                            0x01
9158      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_COOLING_1_V3                            0x02
9159      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED1_V3                       0x03
9160      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED2_V3                       0x04
9161      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED3_V3                       0x05
9162      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_NOT_SUPPORTED4_V3                       0x06
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 164 

9163      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_FURNACE_V3                              0x07
9164      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_DRY_AIR_V3                              0x08
9165      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_MOIST_AIR_V3                            0x09
9166      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_AUTO_CHANGEOVER_V3                      0x0A
9167      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V3                  0x0B
9168      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V3                  0x0C
9169      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_AWAY_HEATING_V3                         0x0D
9170      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_AWAY_COOLING_V3                         0x0E
9171      =3  #define THERMOSTAT_SETPOINT_REPORT_SETPOINT_TYPE_FULL_POWER_V3                           0x0F
9172      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_RESERVED_MASK_V3                                0xF0
9173      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL_RESERVED_SHIFT_V3                               0x04
9174      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SIZE_MASK_V3                                   0x07
9175      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SCALE_MASK_V3                                  0x18
9176      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_SCALE_SHIFT_V3                                 0x03
9177      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_PRECISION_MASK_V3                              0xE0
9178      =3  #define THERMOSTAT_SETPOINT_REPORT_LEVEL2_PRECISION_SHIFT_V3                             0x05
9179      =3  /* Values used for Thermostat Setpoint Set command */
9180      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_SETPOINT_TYPE_MASK_V3                              0x0F
9181      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED_V3                           0x00
9182      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_HEATING_1_V3                               0x01
9183      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_COOLING_1_V3                               0x02
9184      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED1_V3                          0x03
9185      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED2_V3                          0x04
9186      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED3_V3                          0x05
9187      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_NOT_SUPPORTED4_V3                          0x06
9188      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_FURNACE_V3                                 0x07
9189      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_DRY_AIR_V3                                 0x08
9190      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_MOIST_AIR_V3                               0x09
9191      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_AUTO_CHANGEOVER_V3                         0x0A
9192      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V3                     0x0B
9193      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V3                     0x0C
9194      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_AWAY_HEATING_V3                            0x0D
9195      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_AWAY_COOLING_V3                            0x0E
9196      =3  #define THERMOSTAT_SETPOINT_SET_SETPOINT_TYPE_FULL_POWER_V3                              0x0F
9197      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_RESERVED_MASK_V3                                   0xF0
9198      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL_RESERVED_SHIFT_V3                                  0x04
9199      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SIZE_MASK_V3                                      0x07
9200      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SCALE_MASK_V3                                     0x18
9201      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_SCALE_SHIFT_V3                                    0x03
9202      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_PRECISION_MASK_V3                                 0xE0
9203      =3  #define THERMOSTAT_SETPOINT_SET_LEVEL2_PRECISION_SHIFT_V3                                0x05
9204      =3  /* Values used for Thermostat Setpoint Capabilities Get command */
9205      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_PROPERTIES1_SETPOINT_TYPE_MASK_V3           0x0F
9206      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_NOT_SUPPORTED_V3              0x00
9207      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_HEATING_1_V3                  0x01
9208      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_COOLING_1_V3                  0x02
9209      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_NOT_SUPPORTED1_V3             0x03
9210      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_NOT_SUPPORTED2_V3             0x04
9211      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_NOT_SUPPORTED3_V3             0x05
9212      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_NOT_SUPPORTED4_V3             0x06
9213      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_FURNACE_V3                    0x07
9214      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_DRY_AIR_V3                    0x08
9215      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_MOIST_AIR_V3                  0x09
9216      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_AUTO_CHANGEOVER_V3            0x0A
9217      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V3        0x0B
9218      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V3        0x0C
9219      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_AWAY_HEATING_V3               0x0D
9220      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_AWAY_COOLING_V3               0x0E
9221      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_FULL_POWER_V3                 0x0F
9222      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_PROPERTIES1_RESERVED_MASK_V3                0xF0
9223      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_GET_PROPERTIES1_RESERVED_SHIFT_V3               0x04
9224      =3  /* Values used for Thermostat Setpoint Capabilities Report command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 165 

9225      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES1_SETPOINT_TYPE_MASK_V3        0x0F
9226      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_NOT_SUPPORTED_V3           0x00
9227      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_HEATING_1_V3               0x01
9228      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_COOLING_1_V3               0x02
9229      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_NOT_SUPPORTED1_V3          0x03
9230      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_NOT_SUPPORTED2_V3          0x04
9231      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_NOT_SUPPORTED3_V3          0x05
9232      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_NOT_SUPPORTED4_V3          0x06
9233      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_FURNACE_V3                 0x07
9234      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_DRY_AIR_V3                 0x08
9235      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_MOIST_AIR_V3               0x09
9236      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_AUTO_CHANGEOVER_V3         0x0A
9237      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_ENERGY_SAVE_HEATING_V3     0x0B
9238      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_ENERGY_SAVE_COOLING_V3     0x0C
9239      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_AWAY_HEATING_V3            0x0D
9240      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_AWAY_COOLING_V3            0x0E
9241      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_FULL_POWER_V3              0x0F
9242      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES1_RESERVED_MASK_V3             0xF0
9243      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES1_RESERVED_SHIFT_V3            0x04
9244      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_SIZE1_MASK_V3                0x07
9245      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_SCALE1_MASK_V3               0x18
9246      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_SCALE1_SHIFT_V3              0x03
9247      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_PRECISION1_MASK_V3           0xE0
9248      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_PRECISION1_SHIFT_V3          0x05
9249      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_SIZE2_MASK_V3                0x07
9250      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_SCALE2_MASK_V3               0x18
9251      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_SCALE2_SHIFT_V3              0x03
9252      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_PRECISION2_MASK_V3           0xE0
9253      =3  #define THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_PRECISION2_SHIFT_V3          0x05
9254      =3  
9255      =3  /* Time Parameters command class commands */
9256      =3  #define TIME_PARAMETERS_VERSION                                                          0x01
9257      =3  #define TIME_PARAMETERS_GET                                                              0x02
9258      =3  #define TIME_PARAMETERS_REPORT                                                           0x03
9259      =3  #define TIME_PARAMETERS_SET                                                              0x01
9260      =3  
9261      =3  /* Time command class commands */
9262      =3  #define TIME_VERSION                                                                     0x01
9263      =3  #define DATE_GET                                                                         0x03
9264      =3  #define DATE_REPORT                                                                      0x04
9265      =3  #define TIME_GET                                                                         0x01
9266      =3  #define TIME_REPORT                                                                      0x02
9267      =3  /* Values used for Time Report command */
9268      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_HOUR_LOCAL_TIME_MASK                                 0x1F
9269      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_RESERVED_MASK                                        0x60
9270      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_RESERVED_SHIFT                                       0x05
9271      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_RTC_FAILURE_BIT_MASK                                 0x80
9272      =3  
9273      =3  /* Time command class commands */
9274      =3  #define TIME_VERSION_V2                                                                  0x02
9275      =3  #define DATE_GET_V2                                                                      0x03
9276      =3  #define DATE_REPORT_V2                                                                   0x04
9277      =3  #define TIME_GET_V2                                                                      0x01
9278      =3  #define TIME_OFFSET_GET_V2                                                               0x06
9279      =3  #define TIME_OFFSET_REPORT_V2                                                            0x07
9280      =3  #define TIME_OFFSET_SET_V2                                                               0x05
9281      =3  #define TIME_REPORT_V2                                                                   0x02
9282      =3  /* Values used for Time Offset Report command */
9283      =3  #define TIME_OFFSET_REPORT_LEVEL_HOUR_TZO_MASK_V2                                        0x7F
9284      =3  #define TIME_OFFSET_REPORT_LEVEL_SIGN_TZO_BIT_MASK_V2                                    0x80
9285      =3  #define TIME_OFFSET_REPORT_LEVEL2_MINUTE_OFFSET_DST_MASK_V2                              0x7F
9286      =3  #define TIME_OFFSET_REPORT_LEVEL2_SIGN_OFFSET_DST_BIT_MASK_V2                            0x80
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 166 

9287      =3  /* Values used for Time Offset Set command */
9288      =3  #define TIME_OFFSET_SET_LEVEL_HOUR_TZO_MASK_V2                                           0x7F
9289      =3  #define TIME_OFFSET_SET_LEVEL_SIGN_TZO_BIT_MASK_V2                                       0x80
9290      =3  #define TIME_OFFSET_SET_LEVEL2_MINUTE_OFFSET_DST_MASK_V2                                 0x7F
9291      =3  #define TIME_OFFSET_SET_LEVEL2_SIGN_OFFSET_DST_BIT_MASK_V2                               0x80
9292      =3  /* Values used for Time Report command */
9293      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_HOUR_LOCAL_TIME_MASK_V2                              0x1F
9294      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_RESERVED_MASK_V2                                     0x60
9295      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_RESERVED_SHIFT_V2                                    0x05
9296      =3  #define TIME_REPORT_HOUR_LOCAL_TIME_RTC_FAILURE_BIT_MASK_V2                              0x80
9297      =3  
9298      =3  /* Transport Service command class commands */
9299      =3  #define TRANSPORT_SERVICE_VERSION_V2                                                     0x02
9300      =3  #define COMMAND_FIRST_SEGMENT_V2                                                         0xC0
9301      =3  #define COMMAND_SEGMENT_COMPLETE_V2                                                      0xE8
9302      =3  #define COMMAND_SEGMENT_REQUEST_V2                                                       0xC8
9303      =3  #define COMMAND_SEGMENT_WAIT_V2                                                          0xF0
9304      =3  #define COMMAND_SUBSEQUENT_SEGMENT_V2                                                    0xE0
9305      =3  /* Values used for Command First Segment command */
9306      =3  #define COMMAND_FIRST_SEGMENT_MASK_V2                                                    0xF8
9307      =3  #define COMMAND_FIRST_SEGMENT_DATAGRAM_SIZE_1_MASK_V2                                    0x07
9308      =3  #define COMMAND_FIRST_SEGMENT_PROPERTIES2_RESERVED_MASK_V2                               0x07
9309      =3  #define COMMAND_FIRST_SEGMENT_PROPERTIES2_EXT_BIT_MASK_V2                                0x08
9310      =3  #define COMMAND_FIRST_SEGMENT_PROPERTIES2_SESSION_ID_MASK_V2                             0xF0
9311      =3  #define COMMAND_FIRST_SEGMENT_PROPERTIES2_SESSION_ID_SHIFT_V2                            0x04
9312      =3  /* Values used for Command Segment Complete command */
9313      =3  #define COMMAND_SEGMENT_COMPLETE_MASK_V2                                                 0xF8
9314      =3  #define COMMAND_SEGMENT_COMPLETE_RESERVED_MASK_V2                                        0x07
9315      =3  #define COMMAND_SEGMENT_COMPLETE_PROPERTIES2_RESERVED2_MASK_V2                           0x0F
9316      =3  #define COMMAND_SEGMENT_COMPLETE_PROPERTIES2_SESSION_ID_MASK_V2                          0xF0
9317      =3  #define COMMAND_SEGMENT_COMPLETE_PROPERTIES2_SESSION_ID_SHIFT_V2                         0x04
9318      =3  /* Values used for Command Segment Request command */
9319      =3  #define COMMAND_SEGMENT_REQUEST_MASK_V2                                                  0xF8
9320      =3  #define COMMAND_SEGMENT_REQUEST_RESERVED_MASK_V2                                         0x07
9321      =3  #define COMMAND_SEGMENT_REQUEST_PROPERTIES2_DATAGRAM_OFFSET_1_MASK_V2                    0x07
9322      =3  #define COMMAND_SEGMENT_REQUEST_PROPERTIES2_RESERVED2_BIT_MASK_V2                        0x08
9323      =3  #define COMMAND_SEGMENT_REQUEST_PROPERTIES2_SESSION_ID_MASK_V2                           0xF0
9324      =3  #define COMMAND_SEGMENT_REQUEST_PROPERTIES2_SESSION_ID_SHIFT_V2                          0x04
9325      =3  /* Values used for Command Segment Wait command */
9326      =3  #define COMMAND_SEGMENT_WAIT_MASK_V2                                                     0xF8
9327      =3  #define COMMAND_SEGMENT_WAIT_RESERVED_MASK_V2                                            0x07
9328      =3  /* Values used for Command Subsequent Segment command */
9329      =3  #define COMMAND_SUBSEQUENT_SEGMENT_MASK_V2                                               0xF8
9330      =3  #define COMMAND_SUBSEQUENT_SEGMENT_DATAGRAM_SIZE_1_MASK_V2                               0x07
9331      =3  #define COMMAND_SUBSEQUENT_SEGMENT_PROPERTIES2_DATAGRAM_OFFSET_1_MASK_V2                 0x07
9332      =3  #define COMMAND_SUBSEQUENT_SEGMENT_PROPERTIES2_EXT_BIT_MASK_V2                           0x08
9333      =3  #define COMMAND_SUBSEQUENT_SEGMENT_PROPERTIES2_SESSION_ID_MASK_V2                        0xF0
9334      =3  #define COMMAND_SUBSEQUENT_SEGMENT_PROPERTIES2_SESSION_ID_SHIFT_V2                       0x04
9335      =3  
9336      =3  /* Transport Service command class commands */
9337      =3  #define TRANSPORT_SERVICE_VERSION                                                        0x01
9338      =3  #define COMMAND_FIRST_FRAGMENT                                                           0xC0
9339      =3  #define COMMAND_SUBSEQUENT_FRAGMENT                                                      0xE0
9340      =3  /* Values used for Command First Fragment command */
9341      =3  #define COMMAND_FIRST_FRAGMENT_MASK                                                      0xF8
9342      =3  #define COMMAND_FIRST_FRAGMENT_DATAGRAM_SIZE_1_MASK                                      0x07
9343      =3  #define COMMAND_FIRST_FRAGMENT_PROPERTIES2_SEQUENCE_NO_MASK                              0x0F
9344      =3  #define COMMAND_FIRST_FRAGMENT_PROPERTIES2_RESERVED_MASK                                 0xF0
9345      =3  #define COMMAND_FIRST_FRAGMENT_PROPERTIES2_RESERVED_SHIFT                                0x04
9346      =3  /* Values used for Command Subsequent Fragment command */
9347      =3  #define COMMAND_SUBSEQUENT_FRAGMENT_MASK                                                 0xF8
9348      =3  #define COMMAND_SUBSEQUENT_FRAGMENT_DATAGRAM_SIZE_1_MASK                                 0x07
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 167 

9349      =3  #define COMMAND_SUBSEQUENT_FRAGMENT_PROPERTIES2_DATAGRAM_OFFSET_1_MASK                   0x07
9350      =3  #define COMMAND_SUBSEQUENT_FRAGMENT_PROPERTIES2_SEQUENCE_NO_MASK                         0x78
9351      =3  #define COMMAND_SUBSEQUENT_FRAGMENT_PROPERTIES2_SEQUENCE_NO_SHIFT                        0x03
9352      =3  #define COMMAND_SUBSEQUENT_FRAGMENT_PROPERTIES2_RESERVED_BIT_MASK                        0x80
9353      =3  
9354      =3  /* User Code command class commands */
9355      =3  #define USER_CODE_VERSION                                                                0x01
9356      =3  #define USER_CODE_GET                                                                    0x02
9357      =3  #define USER_CODE_REPORT                                                                 0x03
9358      =3  #define USER_CODE_SET                                                                    0x01
9359      =3  #define USERS_NUMBER_GET                                                                 0x04
9360      =3  #define USERS_NUMBER_REPORT                                                              0x05
9361      =3  /* Values used for User Code Report command */
9362      =3  #define USER_CODE_REPORT_AVAILABLE_NOT_SET                                               0x00
9363      =3  #define USER_CODE_REPORT_OCCUPIED                                                        0x01
9364      =3  #define USER_CODE_REPORT_RESERVED_BY_ADMINISTRATOR                                       0x02
9365      =3  #define USER_CODE_REPORT_STATUS_NOT_AVAILABLE                                            0xFE
9366      =3  /* Values used for User Code Set command */
9367      =3  #define USER_CODE_SET_AVAILABLE_NOT_SET                                                  0x00
9368      =3  #define USER_CODE_SET_OCCUPIED                                                           0x01
9369      =3  #define USER_CODE_SET_RESERVED_BY_ADMINISTRATOR                                          0x02
9370      =3  #define USER_CODE_SET_STATUS_NOT_AVAILABLE                                               0xFE
9371      =3  
9372      =3  /* Version command class commands */
9373      =3  #define VERSION_VERSION                                                                  0x01
9374      =3  #define VERSION_COMMAND_CLASS_GET                                                        0x13
9375      =3  #define VERSION_COMMAND_CLASS_REPORT                                                     0x14
9376      =3  #define VERSION_GET                                                                      0x11
9377      =3  #define VERSION_REPORT                                                                   0x12
9378      =3  
9379      =3  /* Version command class commands */
9380      =3  #define VERSION_VERSION_V2                                                               0x02
9381      =3  #define VERSION_COMMAND_CLASS_GET_V2                                                     0x13
9382      =3  #define VERSION_COMMAND_CLASS_REPORT_V2                                                  0x14
9383      =3  #define VERSION_GET_V2                                                                   0x11
9384      =3  #define VERSION_REPORT_V2                                                                0x12
9385      =3  
9386      =3  /* Version command class commands */
9387      =3  #define VERSION_VERSION_V3                                                               0x03
9388      =3  #define VERSION_COMMAND_CLASS_GET_V3                                                     0x13
9389      =3  #define VERSION_COMMAND_CLASS_REPORT_V3                                                  0x14
9390      =3  #define VERSION_GET_V3                                                                   0x11
9391      =3  #define VERSION_REPORT_V3                                                                0x12
9392      =3  #define VERSION_CAPABILITIES_GET_V3                                                      0x15
9393      =3  #define VERSION_CAPABILITIES_REPORT_V3                                                   0x16
9394      =3  #define VERSION_ZWAVE_SOFTWARE_GET_V3                                                    0x17
9395      =3  #define VERSION_ZWAVE_SOFTWARE_REPORT_V3                                                 0x18
9396      =3  /* Values used for Version Capabilities Report command */
9397      =3  #define VERSION_CAPABILITIES_REPORT_PROPERTIES1_VERSION_BIT_MASK_V3                      0x01
9398      =3  #define VERSION_CAPABILITIES_REPORT_PROPERTIES1_COMMAND_CLASS_BIT_MASK_V3                0x02
9399      =3  #define VERSION_CAPABILITIES_REPORT_PROPERTIES1_Z_WAVE_SOFTWARE_BIT_MASK_V3              0x04
9400      =3  #define VERSION_CAPABILITIES_REPORT_PROPERTIES1_RESERVED1_MASK_V3                        0xF8
9401      =3  #define VERSION_CAPABILITIES_REPORT_PROPERTIES1_RESERVED1_SHIFT_V3                       0x03
9402      =3  
9403      =3  /* Wake Up command class commands */
9404      =3  #define WAKE_UP_VERSION                                                                  0x01
9405      =3  #define WAKE_UP_INTERVAL_GET                                                             0x05
9406      =3  #define WAKE_UP_INTERVAL_REPORT                                                          0x06
9407      =3  #define WAKE_UP_INTERVAL_SET                                                             0x04
9408      =3  #define WAKE_UP_NO_MORE_INFORMATION                                                      0x08
9409      =3  #define WAKE_UP_NOTIFICATION                                                             0x07
9410      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 168 

9411      =3  /* Wake Up command class commands */
9412      =3  #define WAKE_UP_VERSION_V2                                                               0x02
9413      =3  #define WAKE_UP_INTERVAL_CAPABILITIES_GET_V2                                             0x09
9414      =3  #define WAKE_UP_INTERVAL_CAPABILITIES_REPORT_V2                                          0x0A
9415      =3  #define WAKE_UP_INTERVAL_GET_V2                                                          0x05
9416      =3  #define WAKE_UP_INTERVAL_REPORT_V2                                                       0x06
9417      =3  #define WAKE_UP_INTERVAL_SET_V2                                                          0x04
9418      =3  #define WAKE_UP_NO_MORE_INFORMATION_V2                                                   0x08
9419      =3  #define WAKE_UP_NOTIFICATION_V2                                                          0x07
9420      =3  
9421      =3  /* Zip 6lowpan command class commands */
9422      =3  #define ZIP_6LOWPAN_VERSION                                                              0x01
9423      =3  #define LOWPAN_FIRST_FRAGMENT                                                            0xC0
9424      =3  #define LOWPAN_SUBSEQUENT_FRAGMENT                                                       0xE0
9425      =3  /* Values used for Lowpan First Fragment command */
9426      =3  #define LOWPAN_FIRST_FRAGMENT_MASK                                                       0xF8
9427      =3  #define LOWPAN_FIRST_FRAGMENT_DATAGRAM_SIZE_1_MASK                                       0x07
9428      =3  /* Values used for Lowpan Subsequent Fragment command */
9429      =3  #define LOWPAN_SUBSEQUENT_FRAGMENT_MASK                                                  0xF8
9430      =3  #define LOWPAN_SUBSEQUENT_FRAGMENT_DATAGRAM_SIZE_1_MASK                                  0x07
9431      =3  
9432      =3  /* Zip command class commands */
9433      =3  #define ZIP_VERSION                                                                      0x01
9434      =3  #define COMMAND_ZIP_PACKET                                                               0x02
9435      =3  /* Values used for Command Zip Packet command */
9436      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_RESERVED1_MASK                                    0x03
9437      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_OPTION_ERROR_BIT_MASK                        0x04
9438      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_QUEUE_FULL_BIT_MASK                          0x08
9439      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_WAITING_BIT_MASK                             0x10
9440      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_RESPONSE_BIT_MASK                            0x20
9441      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_ACK_RESPONSE_BIT_MASK                             0x40
9442      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_ACK_REQUEST_BIT_MASK                              0x80
9443      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_RESERVED2_MASK                                    0x1F
9444      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_MORE_INFORMATION_BIT_MASK                         0x20
9445      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_Z_WAVE_CMD_INCLUDED_BIT_MASK                      0x40
9446      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_HEADER_EXT_INCLUDED_BIT_MASK                      0x80
9447      =3  #define COMMAND_ZIP_PACKET_PROPERTIES3_SOURCE_END_POINT_MASK                             0x7F
9448      =3  #define COMMAND_ZIP_PACKET_PROPERTIES3_RESERVED3_BIT_MASK                                0x80
9449      =3  #define COMMAND_ZIP_PACKET_PROPERTIES4_DESTINATION_END_POINT_MASK                        0x7F
9450      =3  #define COMMAND_ZIP_PACKET_PROPERTIES4_BIT_ADDRESS_BIT_MASK                              0x80
9451      =3  
9452      =3  /* Zip command class commands */
9453      =3  #define ZIP_VERSION_V2                                                                   0x02
9454      =3  #define COMMAND_ZIP_PACKET_V2                                                            0x02
9455      =3  /* Values used for Command Zip Packet command */
9456      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_RESERVED1_MASK_V2                                 0x03
9457      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_OPTION_ERROR_BIT_MASK_V2                     0x04
9458      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_QUEUE_FULL_BIT_MASK_V2                       0x08
9459      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_WAITING_BIT_MASK_V2                          0x10
9460      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_RESPONSE_BIT_MASK_V2                         0x20
9461      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_ACK_RESPONSE_BIT_MASK_V2                          0x40
9462      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_ACK_REQUEST_BIT_MASK_V2                           0x80
9463      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_RESERVED2_MASK_V2                                 0x0F
9464      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_SECURE_ORIGIN_BIT_MASK_V2                         0x10
9465      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_MORE_INFORMATION_BIT_MASK_V2                      0x20
9466      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_Z_WAVE_CMD_INCLUDED_BIT_MASK_V2                   0x40
9467      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_HEADER_EXT_INCLUDED_BIT_MASK_V2                   0x80
9468      =3  #define COMMAND_ZIP_PACKET_PROPERTIES3_SOURCE_END_POINT_MASK_V2                          0x7F
9469      =3  #define COMMAND_ZIP_PACKET_PROPERTIES3_RESERVED3_BIT_MASK_V2                             0x80
9470      =3  #define COMMAND_ZIP_PACKET_PROPERTIES4_DESTINATION_END_POINT_MASK_V2                     0x7F
9471      =3  #define COMMAND_ZIP_PACKET_PROPERTIES4_BIT_ADDRESS_BIT_MASK_V2                           0x80
9472      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 169 

9473      =3  /* Zip command class commands */
9474      =3  #define ZIP_VERSION_V3                                                                   0x03
9475      =3  #define COMMAND_ZIP_PACKET_V3                                                            0x02
9476      =3  /* Values used for Command Zip Packet command */
9477      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_RESERVED1_MASK_V3                                 0x03
9478      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_OPTION_ERROR_BIT_MASK_V3                     0x04
9479      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_QUEUE_FULL_BIT_MASK_V3                       0x08
9480      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_WAITING_BIT_MASK_V3                          0x10
9481      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_NACK_RESPONSE_BIT_MASK_V3                         0x20
9482      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_ACK_RESPONSE_BIT_MASK_V3                          0x40
9483      =3  #define COMMAND_ZIP_PACKET_PROPERTIES1_ACK_REQUEST_BIT_MASK_V3                           0x80
9484      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_RESERVED2_MASK_V3                                 0x0F
9485      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_SECURE_ORIGIN_BIT_MASK_V3                         0x10
9486      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_MORE_INFORMATION_BIT_MASK_V3                      0x20
9487      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_Z_WAVE_CMD_INCLUDED_BIT_MASK_V3                   0x40
9488      =3  #define COMMAND_ZIP_PACKET_PROPERTIES2_HEADER_EXT_INCLUDED_BIT_MASK_V3                   0x80
9489      =3  #define COMMAND_ZIP_PACKET_PROPERTIES3_SOURCE_END_POINT_MASK_V3                          0x7F
9490      =3  #define COMMAND_ZIP_PACKET_PROPERTIES3_RESERVED3_BIT_MASK_V3                             0x80
9491      =3  #define COMMAND_ZIP_PACKET_PROPERTIES4_DESTINATION_END_POINT_MASK_V3                     0x7F
9492      =3  #define COMMAND_ZIP_PACKET_PROPERTIES4_BIT_ADDRESS_BIT_MASK_V3                           0x80
9493      =3  
9494      =3  /* Application Capability command class commands */
9495      =3  #define APPLICATION_CAPABILITY_VERSION                                                   0x01
9496      =3  #define COMMAND_COMMAND_CLASS_NOT_SUPPORTED                                              0x01
9497      =3  /* Values used for Command Command Class Not Supported command */
9498      =3  #define COMMAND_COMMAND_CLASS_NOT_SUPPORTED_PROPERTIES1_RESERVED_MASK                    0x7F
9499      =3  #define COMMAND_COMMAND_CLASS_NOT_SUPPORTED_PROPERTIES1_DYNAMIC_BIT_MASK                 0x80
9500      =3  
9501      =3  /* Switch Color command class commands */
9502      =3  #define SWITCH_COLOR_VERSION                                                             0x01
9503      =3  #define SWITCH_COLOR_SUPPORTED_GET                                                       0x01
9504      =3  #define SWITCH_COLOR_SUPPORTED_REPORT                                                    0x02
9505      =3  #define SWITCH_COLOR_GET                                                                 0x03
9506      =3  #define SWITCH_COLOR_REPORT                                                              0x04
9507      =3  #define SWITCH_COLOR_SET                                                                 0x05
9508      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE                                                  0x06
9509      =3  #define SWITCH_COLOR_STOP_LEVEL_CHANGE                                                   0x07
9510      =3  /* Values used for Switch Color Set command */
9511      =3  #define SWITCH_COLOR_SET_PROPERTIES1_COLOR_COMPONENT_COUNT_MASK                          0x1F
9512      =3  #define SWITCH_COLOR_SET_PROPERTIES1_RESERVED_MASK                                       0xE0
9513      =3  #define SWITCH_COLOR_SET_PROPERTIES1_RESERVED_SHIFT                                      0x05
9514      =3  /* Values used for Switch Color Start Level Change command */
9515      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_RES1_MASK                            0x1F
9516      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_IGNORE_START_STATE_BIT_MASK          0x20
9517      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_BIT_MASK                     0x40
9518      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_RES2_BIT_MASK                        0x80
9519      =3  
9520      =3  /* Switch Color command class commands */
9521      =3  #define SWITCH_COLOR_VERSION_V2                                                          0x02
9522      =3  #define SWITCH_COLOR_SUPPORTED_GET_V2                                                    0x01
9523      =3  #define SWITCH_COLOR_SUPPORTED_REPORT_V2                                                 0x02
9524      =3  #define SWITCH_COLOR_GET_V2                                                              0x03
9525      =3  #define SWITCH_COLOR_REPORT_V2                                                           0x04
9526      =3  #define SWITCH_COLOR_SET_V2                                                              0x05
9527      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_V2                                               0x06
9528      =3  #define SWITCH_COLOR_STOP_LEVEL_CHANGE_V2                                                0x07
9529      =3  /* Values used for Switch Color Set command */
9530      =3  #define SWITCH_COLOR_SET_PROPERTIES1_COLOR_COMPONENT_COUNT_MASK_V2                       0x1F
9531      =3  #define SWITCH_COLOR_SET_PROPERTIES1_RESERVED_MASK_V2                                    0xE0
9532      =3  #define SWITCH_COLOR_SET_PROPERTIES1_RESERVED_SHIFT_V2                                   0x05
9533      =3  /* Values used for Switch Color Start Level Change command */
9534      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_RES1_MASK_V2                         0x1F
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 170 

9535      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_IGNORE_START_STATE_BIT_MASK_V2       0x20
9536      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_BIT_MASK_V2                  0x40
9537      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_RES2_BIT_MASK_V2                     0x80
9538      =3  
9539      =3  /* Switch Color command class commands */
9540      =3  #define SWITCH_COLOR_VERSION_V3                                                          0x03
9541      =3  #define SWITCH_COLOR_SUPPORTED_GET_V3                                                    0x01
9542      =3  #define SWITCH_COLOR_SUPPORTED_REPORT_V3                                                 0x02
9543      =3  #define SWITCH_COLOR_GET_V3                                                              0x03
9544      =3  #define SWITCH_COLOR_REPORT_V3                                                           0x04
9545      =3  #define SWITCH_COLOR_SET_V3                                                              0x05
9546      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_V3                                               0x06
9547      =3  #define SWITCH_COLOR_STOP_LEVEL_CHANGE_V3                                                0x07
9548      =3  /* Values used for Switch Color Report command */
9549      =3  #define SWITCH_COLOR_REPORT_ALREADY_AT_THE_TARGET_VALUE_V3                               0x00
9550      =3  #define SWITCH_COLOR_REPORT_UNKNOWN_DURATION_V3                                          0xFE
9551      =3  #define SWITCH_COLOR_REPORT_RESERVED_V3                                                  0xFF
9552      =3  /* Values used for Switch Color Set command */
9553      =3  #define SWITCH_COLOR_SET_PROPERTIES1_COLOR_COMPONENT_COUNT_MASK_V3                       0x1F
9554      =3  #define SWITCH_COLOR_SET_PROPERTIES1_RESERVED_MASK_V3                                    0xE0
9555      =3  #define SWITCH_COLOR_SET_PROPERTIES1_RESERVED_SHIFT_V3                                   0x05
9556      =3  #define SWITCH_COLOR_SET_INSTANTLY_V3                                                    0x00
9557      =3  #define SWITCH_COLOR_SET_DEFAULT_V3                                                      0xFF
9558      =3  /* Values used for Switch Color Start Level Change command */
9559      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_RES1_MASK_V3                         0x1F
9560      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_IGNORE_START_STATE_BIT_MASK_V3       0x20
9561      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_BIT_MASK_V3                  0x40
9562      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_PROPERTIES1_RES2_BIT_MASK_V3                     0x80
9563      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_INSTANTLY_V3                                     0x00
9564      =3  #define SWITCH_COLOR_START_LEVEL_CHANGE_DEFAULT_V3                                       0xFF
9565      =3  
9566      =3  /* Schedule command class commands */
9567      =3  #define SCHEDULE_VERSION                                                                 0x01
9568      =3  #define SCHEDULE_SUPPORTED_GET                                                           0x01
9569      =3  #define SCHEDULE_SUPPORTED_REPORT                                                        0x02
9570      =3  #define COMMAND_SCHEDULE_SET                                                             0x03
9571      =3  #define COMMAND_SCHEDULE_GET                                                             0x04
9572      =3  #define COMMAND_SCHEDULE_REPORT                                                          0x05
9573      =3  #define SCHEDULE_REMOVE                                                                  0x06
9574      =3  #define SCHEDULE_STATE_SET                                                               0x07
9575      =3  #define SCHEDULE_STATE_GET                                                               0x08
9576      =3  #define SCHEDULE_STATE_REPORT                                                            0x09
9577      =3  /* Values used for Schedule Supported Report command */
9578      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_START_TIME_SUPPORT_MASK                    0x3F
9579      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_FALLBACK_SUPPORT_BIT_MASK                  0x40
9580      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_SUPPORT_ENABLE_DISABLE_BIT_MASK            0x80
9581      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_SUPPORTED_OVERRIDE_TYPES_MASK              0x7F
9582      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_OVERRIDE_SUPPORT_BIT_MASK                  0x80
9583      =3  /* Values used for Command Schedule Set command */
9584      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_START_MONTH_MASK                                0x0F
9585      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RESERVED1_MASK                                  0xF0
9586      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RESERVED1_SHIFT                                 0x04
9587      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_START_DAY_OF_MONTH_MASK                         0x1F
9588      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RESERVED2_MASK                                  0xE0
9589      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RESERVED2_SHIFT                                 0x05
9590      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_START_WEEKDAY_MASK                              0x7F
9591      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_RES_BIT_MASK                                    0x80
9592      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_START_HOUR_MASK                                 0x1F
9593      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_MASK                              0xE0
9594      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_SHIFT                             0x05
9595      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_START_MINUTE_MASK                               0x3F
9596      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RESERVED3_MASK                                  0xC0
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 171 

9597      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RESERVED3_SHIFT                                 0x06
9598      =3  /* Values used for Command Schedule Report command */
9599      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_START_MONTH_MASK                             0x0F
9600      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_ACTIVE_ID_MASK                               0xF0
9601      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_ACTIVE_ID_SHIFT                              0x04
9602      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_START_DAY_OF_MONTH_MASK                      0x1F
9603      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RESERVED2_MASK                               0xE0
9604      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RESERVED2_SHIFT                              0x05
9605      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_START_WEEKDAY_MASK                           0x7F
9606      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_RES_BIT_MASK                                 0x80
9607      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_START_HOUR_MASK                              0x1F
9608      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_MASK                           0xE0
9609      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_SHIFT                          0x05
9610      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_START_MINUTE_MASK                            0x3F
9611      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RESERVED3_MASK                               0xC0
9612      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RESERVED3_SHIFT                              0x06
9613      =3  /* Values used for Schedule State Report command */
9614      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_OVERRIDE_BIT_MASK                              0x01
9615      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_MASK                         0xFE
9616      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_SHIFT                        0x01
9617      =3  
9618      =3  /* Schedule command class commands */
9619      =3  #define SCHEDULE_VERSION_V2                                                              0x02
9620      =3  #define SCHEDULE_SUPPORTED_GET_V2                                                        0x01
9621      =3  #define SCHEDULE_SUPPORTED_REPORT_V2                                                     0x02
9622      =3  #define COMMAND_SCHEDULE_SET_V2                                                          0x03
9623      =3  #define COMMAND_SCHEDULE_GET_V2                                                          0x04
9624      =3  #define COMMAND_SCHEDULE_REPORT_V2                                                       0x05
9625      =3  #define SCHEDULE_REMOVE_V2                                                               0x06
9626      =3  #define SCHEDULE_STATE_SET_V2                                                            0x07
9627      =3  #define SCHEDULE_STATE_GET_V2                                                            0x08
9628      =3  #define SCHEDULE_STATE_REPORT_V2                                                         0x09
9629      =3  /* Values used for Schedule Supported Report command */
9630      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_START_TIME_SUPPORT_MASK_V2                 0x3F
9631      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_FALLBACK_SUPPORT_BIT_MASK_V2               0x40
9632      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_SUPPORT_ENABLE_DISABLE_BIT_MASK_V2         0x80
9633      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_SUPPORTED_OVERRIDE_TYPES_MASK_V2           0x7F
9634      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_OVERRIDE_SUPPORT_BIT_MASK_V2               0x80
9635      =3  /* Values used for Command Schedule Set command */
9636      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_START_MONTH_MASK_V2                             0x0F
9637      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RESERVED0_MASK_V2                               0xF0
9638      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RESERVED0_SHIFT_V2                              0x04
9639      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_START_DAY_OF_MONTH_MASK_V2                      0x1F
9640      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RESERVED1_MASK_V2                               0xE0
9641      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RESERVED1_SHIFT_V2                              0x05
9642      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_START_WEEKDAY_MASK_V2                           0x7F
9643      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_RESERVED2_BIT_MASK_V2                           0x80
9644      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_START_HOUR_MASK_V2                              0x1F
9645      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_MASK_V2                           0xE0
9646      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_SHIFT_V2                          0x05
9647      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_START_MINUTE_MASK_V2                            0x3F
9648      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RESERVED3_MASK_V2                               0xC0
9649      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RESERVED3_SHIFT_V2                              0x06
9650      =3  /* Values used for Command Schedule Report command */
9651      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_START_MONTH_MASK_V2                          0x0F
9652      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_ACTIVE_ID_MASK_V2                            0xF0
9653      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_ACTIVE_ID_SHIFT_V2                           0x04
9654      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_START_DAY_OF_MONTH_MASK_V2                   0x1F
9655      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RESERVED0_MASK_V2                            0xE0
9656      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RESERVED0_SHIFT_V2                           0x05
9657      =3  #define COMMAND_SCHEDULE_REPORT_RESERVED0_REPEAT_EVERY_N_HOURS_V2                        0x00
9658      =3  #define COMMAND_SCHEDULE_REPORT_RESERVED0_REPEAT_EVERY_N_DAYS_V2                         0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 172 

9659      =3  #define COMMAND_SCHEDULE_REPORT_RESERVED0_REPEAT_EVERY_N_WEEKS_V2                        0x02
9660      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_START_WEEKDAY_MASK_V2                        0x7F
9661      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_RESERVED1_BIT_MASK_V2                        0x80
9662      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_START_HOUR_MASK_V2                           0x1F
9663      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_MASK_V2                        0xE0
9664      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_SHIFT_V2                       0x05
9665      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_START_MINUTE_MASK_V2                         0x3F
9666      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RESERVED2_MASK_V2                            0xC0
9667      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RESERVED2_SHIFT_V2                           0x06
9668      =3  /* Values used for Schedule State Report command */
9669      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_OVERRIDE_BIT_MASK_V2                           0x01
9670      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_MASK_V2                      0xFE
9671      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_SHIFT_V2                     0x01
9672      =3  
9673      =3  /* Schedule command class commands */
9674      =3  #define SCHEDULE_VERSION_V3                                                              0x03
9675      =3  #define SCHEDULE_SUPPORTED_GET_V3                                                        0x01
9676      =3  #define SCHEDULE_SUPPORTED_REPORT_V3                                                     0x02
9677      =3  #define COMMAND_SCHEDULE_SET_V3                                                          0x03
9678      =3  #define COMMAND_SCHEDULE_GET_V3                                                          0x04
9679      =3  #define COMMAND_SCHEDULE_REPORT_V3                                                       0x05
9680      =3  #define SCHEDULE_REMOVE_V3                                                               0x06
9681      =3  #define SCHEDULE_STATE_SET_V3                                                            0x07
9682      =3  #define SCHEDULE_STATE_GET_V3                                                            0x08
9683      =3  #define SCHEDULE_STATE_REPORT_V3                                                         0x09
9684      =3  /* Values used for Schedule Supported Report command */
9685      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_START_TIME_SUPPORT_MASK_V3                 0x3F
9686      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_FALLBACK_SUPPORT_BIT_MASK_V3               0x40
9687      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_SUPPORT_ENABLE_DISABLE_BIT_MASK_V3         0x80
9688      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_SUPPORTED_OVERRIDE_TYPES_MASK_V3           0x7F
9689      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_OVERRIDE_SUPPORT_BIT_MASK_V3               0x80
9690      =3  /* Values used for Command Schedule Set command */
9691      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_START_MONTH_MASK_V3                             0x0F
9692      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RECURRENCE_OFFSET_MASK_V3                       0xF0
9693      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RECURRENCE_OFFSET_SHIFT_V3                      0x04
9694      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_START_DAY_OF_MONTH_MASK_V3                      0x1F
9695      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RECURRENCE_MODE_MASK_V3                         0x60
9696      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RECURRENCE_MODE_SHIFT_V3                        0x05
9697      =3  #define COMMAND_SCHEDULE_SET_RECURRENCE_MODE_REPEAT_EVERY_N_HOURS_V3                     0x00
9698      =3  #define COMMAND_SCHEDULE_SET_RECURRENCE_MODE_REPEAT_EVERY_N_DAYS_V3                      0x01
9699      =3  #define COMMAND_SCHEDULE_SET_RECURRENCE_MODE_REPEAT_EVERY_N_WEEKS_V3                     0x02
9700      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RESERVED1_BIT_MASK_V3                           0x80
9701      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_START_WEEKDAY_MASK_V3                           0x7F
9702      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_RESERVED2_BIT_MASK_V3                           0x80
9703      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_START_HOUR_MASK_V3                              0x1F
9704      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_MASK_V3                           0xE0
9705      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_SHIFT_V3                          0x05
9706      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_START_MINUTE_MASK_V3                            0x3F
9707      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RELATIVE_BIT_MASK_V3                            0x40
9708      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RESERVED3_BIT_MASK_V3                           0x80
9709      =3  /* Values used for Command Schedule Get command */
9710      =3  #define COMMAND_SCHEDULE_GET_PROPERTIES1_RESERVED_MASK_V3                                0x7F
9711      =3  #define COMMAND_SCHEDULE_GET_PROPERTIES1_AID_RO_CTL_BIT_MASK_V3                          0x80
9712      =3  /* Values used for Command Schedule Report command */
9713      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_START_MONTH_MASK_V3                          0x0F
9714      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_AID_RO_MASK_V3                               0xF0
9715      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_AID_RO_SHIFT_V3                              0x04
9716      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_START_DAY_OF_MONTH_MASK_V3                   0x1F
9717      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RECURRENCE_MODE_MASK_V3                      0x60
9718      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RECURRENCE_MODE_SHIFT_V3                     0x05
9719      =3  #define COMMAND_SCHEDULE_REPORT_RECURRENCE_MODE_REPEAT_EVERY_N_HOURS_V3                  0x00
9720      =3  #define COMMAND_SCHEDULE_REPORT_RECURRENCE_MODE_REPEAT_EVERY_N_DAYS_V3                   0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 173 

9721      =3  #define COMMAND_SCHEDULE_REPORT_RECURRENCE_MODE_REPEAT_EVERY_N_WEEKS_V3                  0x02
9722      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_AID_RO_CTL_BIT_MASK_V3                       0x80
9723      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_START_WEEKDAY_MASK_V3                        0x7F
9724      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_RESERVED1_BIT_MASK_V3                        0x80
9725      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_START_HOUR_MASK_V3                           0x1F
9726      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_MASK_V3                        0xE0
9727      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_SHIFT_V3                       0x05
9728      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_START_MINUTE_MASK_V3                         0x3F
9729      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RELATIVE_BIT_MASK_V3                         0x40
9730      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RESERVED2_BIT_MASK_V3                        0x80
9731      =3  /* Values used for Schedule State Report command */
9732      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_OVERRIDE_BIT_MASK_V3                           0x01
9733      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_MASK_V3                      0xFE
9734      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_SHIFT_V3                     0x01
9735      =3  
9736      =3  /* Schedule command class commands */
9737      =3  #define SCHEDULE_VERSION_V4                                                              0x04
9738      =3  #define SCHEDULE_SUPPORTED_GET_V4                                                        0x01
9739      =3  #define SCHEDULE_SUPPORTED_REPORT_V4                                                     0x02
9740      =3  #define COMMAND_SCHEDULE_SET_V4                                                          0x03
9741      =3  #define COMMAND_SCHEDULE_GET_V4                                                          0x04
9742      =3  #define COMMAND_SCHEDULE_REPORT_V4                                                       0x05
9743      =3  #define SCHEDULE_REMOVE_V4                                                               0x06
9744      =3  #define SCHEDULE_STATE_SET_V4                                                            0x07
9745      =3  #define SCHEDULE_STATE_GET_V4                                                            0x08
9746      =3  #define SCHEDULE_STATE_REPORT_V4                                                         0x09
9747      =3  #define SCHEDULE_SUPPORTED_COMMANDS_GET_V4                                               0x0A
9748      =3  #define SCHEDULE_SUPPORTED_COMMANDS_REPORT_V4                                            0x0B
9749      =3  /* Values used for Schedule Supported Report command */
9750      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_START_TIME_SUPPORT_MASK_V4                 0x3F
9751      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_FALLBACK_SUPPORT_BIT_MASK_V4               0x40
9752      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES1_SUPPORT_ENABLE_DISABLE_BIT_MASK_V4         0x80
9753      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_SUPPORTED_OVERRIDE_TYPES_MASK_V4           0x7F
9754      =3  #define SCHEDULE_SUPPORTED_REPORT_PROPERTIES3_OVERRIDE_SUPPORT_BIT_MASK_V4               0x80
9755      =3  /* Values used for Command Schedule Set command */
9756      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_START_MONTH_MASK_V4                             0x0F
9757      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RECURRENCE_OFFSET_MASK_V4                       0xF0
9758      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES1_RECURRENCE_OFFSET_SHIFT_V4                      0x04
9759      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_START_DAY_OF_MONTH_MASK_V4                      0x1F
9760      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RECURRENCE_MODE_MASK_V4                         0x60
9761      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RECURRENCE_MODE_SHIFT_V4                        0x05
9762      =3  #define COMMAND_SCHEDULE_SET_RECURRENCE_MODE_REPEAT_EVERY_N_HOURS_V4                     0x00
9763      =3  #define COMMAND_SCHEDULE_SET_RECURRENCE_MODE_REPEAT_EVERY_N_DAYS_V4                      0x01
9764      =3  #define COMMAND_SCHEDULE_SET_RECURRENCE_MODE_REPEAT_EVERY_N_WEEKS_V4                     0x02
9765      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES2_RESERVED1_BIT_MASK_V4                           0x80
9766      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_START_WEEKDAY_MASK_V4                           0x7F
9767      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES3_RESERVED2_BIT_MASK_V4                           0x80
9768      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_START_HOUR_MASK_V4                              0x1F
9769      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_MASK_V4                           0xE0
9770      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES4_DURATION_TYPE_SHIFT_V4                          0x05
9771      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_START_MINUTE_MASK_V4                            0x3F
9772      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RELATIVE_BIT_MASK_V4                            0x40
9773      =3  #define COMMAND_SCHEDULE_SET_PROPERTIES5_RESERVED3_BIT_MASK_V4                           0x80
9774      =3  /* Values used for Command Schedule Get command */
9775      =3  #define COMMAND_SCHEDULE_GET_PROPERTIES1_RESERVED_MASK_V4                                0x7F
9776      =3  #define COMMAND_SCHEDULE_GET_PROPERTIES1_AID_RO_CTL_BIT_MASK_V4                          0x80
9777      =3  /* Values used for Command Schedule Report command */
9778      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_START_MONTH_MASK_V4                          0x0F
9779      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_AID_RO_MASK_V4                               0xF0
9780      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES1_AID_RO_SHIFT_V4                              0x04
9781      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_START_DAY_OF_MONTH_MASK_V4                   0x1F
9782      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RECURRENCE_MODE_MASK_V4                      0x60
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 174 

9783      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_RECURRENCE_MODE_SHIFT_V4                     0x05
9784      =3  #define COMMAND_SCHEDULE_REPORT_RECURRENCE_MODE_REPEAT_EVERY_N_HOURS_V4                  0x00
9785      =3  #define COMMAND_SCHEDULE_REPORT_RECURRENCE_MODE_REPEAT_EVERY_N_DAYS_V4                   0x01
9786      =3  #define COMMAND_SCHEDULE_REPORT_RECURRENCE_MODE_REPEAT_EVERY_N_WEEKS_V4                  0x02
9787      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES2_AID_RO_CTL_BIT_MASK_V4                       0x80
9788      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_START_WEEKDAY_MASK_V4                        0x7F
9789      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES3_RESERVED1_BIT_MASK_V4                        0x80
9790      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_START_HOUR_MASK_V4                           0x1F
9791      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_MASK_V4                        0xE0
9792      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES4_DURATION_TYPE_SHIFT_V4                       0x05
9793      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_START_MINUTE_MASK_V4                         0x3F
9794      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RELATIVE_BIT_MASK_V4                         0x40
9795      =3  #define COMMAND_SCHEDULE_REPORT_PROPERTIES5_RESERVED2_BIT_MASK_V4                        0x80
9796      =3  /* Values used for Schedule State Report command */
9797      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_OVERRIDE_BIT_MASK_V4                           0x01
9798      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_MASK_V4                      0xFE
9799      =3  #define SCHEDULE_STATE_REPORT_PROPERTIES1_REPORTS_TO_FOLLOW_SHIFT_V4                     0x01
9800      =3  
9801      =3  /* Network Management Primary command class commands */
9802      =3  #define NETWORK_MANAGEMENT_PRIMARY_VERSION                                               0x01
9803      =3  #define CONTROLLER_CHANGE                                                                0x01
9804      =3  #define CONTROLLER_CHANGE_STATUS                                                         0x02
9805      =3  /* Values used for Controller Change Status command */
9806      =3  #define CONTROLLER_CHANGE_STATUS_PROPERTIES1_Z_WAVE_PROTOCOL_SPECIFIC_PART_1_MASK        0x7F
9807      =3  #define CONTROLLER_CHANGE_STATUS_PROPERTIES1_LISTENING_BIT_MASK                          0x80
9808      =3  #define CONTROLLER_CHANGE_STATUS_PROPERTIES2_Z_WAVE_PROTOCOL_SPECIFIC_PART_2_MASK        0x7F
9809      =3  #define CONTROLLER_CHANGE_STATUS_PROPERTIES2_OPT_BIT_MASK                                0x80
9810      =3  
9811      =3  /* Zip Nd command class commands */
9812      =3  #define ZIP_ND_VERSION                                                                   0x01
9813      =3  #define ZIP_NODE_SOLICITATION                                                            0x03
9814      =3  #define ZIP_INV_NODE_SOLICITATION                                                        0x04
9815      =3  #define ZIP_NODE_ADVERTISEMENT                                                           0x01
9816      =3  /* Values used for Zip Inv Node Solicitation command */
9817      =3  #define ZIP_INV_NODE_SOLICITATION_PROPERTIES1_RESERVED1_MASK                             0x03
9818      =3  #define ZIP_INV_NODE_SOLICITATION_PROPERTIES1_LOCAL_BIT_MASK                             0x04
9819      =3  #define ZIP_INV_NODE_SOLICITATION_PROPERTIES1_RESERVED2_MASK                             0xF8
9820      =3  #define ZIP_INV_NODE_SOLICITATION_PROPERTIES1_RESERVED2_SHIFT                            0x03
9821      =3  /* Values used for Zip Node Advertisement command */
9822      =3  #define ZIP_NODE_ADVERTISEMENT_PROPERTIES1_VALIDITY_MASK                                 0x03
9823      =3  #define ZIP_NODE_ADVERTISEMENT_VALIDITY_INFORMATION_OK                                   0x00
9824      =3  #define ZIP_NODE_ADVERTISEMENT_VALIDITY_INFORMATION_OBSOLETE                             0x01
9825      =3  #define ZIP_NODE_ADVERTISEMENT_VALIDITY_INFORMATION_NOT_FOUND                            0x02
9826      =3  #define ZIP_NODE_ADVERTISEMENT_PROPERTIES1_LOCAL_BIT_MASK                                0x04
9827      =3  #define ZIP_NODE_ADVERTISEMENT_PROPERTIES1_RESERVED_MASK                                 0xF8
9828      =3  #define ZIP_NODE_ADVERTISEMENT_PROPERTIES1_RESERVED_SHIFT                                0x03
9829      =3  
9830      =3  /* Association Grp Info command class commands */
9831      =3  #define ASSOCIATION_GRP_INFO_VERSION                                                     0x01
9832      =3  #define ASSOCIATION_GROUP_NAME_GET                                                       0x01
9833      =3  #define ASSOCIATION_GROUP_NAME_REPORT                                                    0x02
9834      =3  #define ASSOCIATION_GROUP_INFO_GET                                                       0x03
9835      =3  #define ASSOCIATION_GROUP_INFO_REPORT                                                    0x04
9836      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET                                               0x05
9837      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_REPORT                                            0x06
9838      =3  /* Values used for Association Group Info Get command */
9839      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_RESERVED_MASK                             0x3F
9840      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_LIST_MODE_BIT_MASK                        0x40
9841      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_REFRESH_CACHE_BIT_MASK                    0x80
9842      =3  /* Values used for Association Group Info Report command */
9843      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_GROUP_COUNT_MASK                       0x3F
9844      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_DYNAMIC_INFO_BIT_MASK                  0x40
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 175 

9845      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_LIST_MODE_BIT_MASK                     0x80
9846      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL                                    0x00
9847      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL                                    0x20
9848      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_SENSOR                                     0x31
9849      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION                               0x71
9850      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_NA                                 0x00
9851      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_LIFELINE                           0x01
9852      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY01                              0x01
9853      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY02                              0x02
9854      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY03                              0x03
9855      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY04                              0x04
9856      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY05                              0x05
9857      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY06                              0x06
9858      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY07                              0x07
9859      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY08                              0x08
9860      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY09                              0x09
9861      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY10                              0x0A
9862      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY11                              0x0B
9863      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY12                              0x0C
9864      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY13                              0x0D
9865      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY14                              0x0E
9866      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY15                              0x0F
9867      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY16                              0x10
9868      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY17                              0x11
9869      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY18                              0x12
9870      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY19                              0x13
9871      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY20                              0x14
9872      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY21                              0x15
9873      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY22                              0x16
9874      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY23                              0x17
9875      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY24                              0x18
9876      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY25                              0x19
9877      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY26                              0x1A
9878      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY27                              0x1B
9879      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY28                              0x1C
9880      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY29                              0x1D
9881      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY30                              0x1E
9882      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY31                              0x1F
9883      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY32                              0x20
9884      =3  /* Values used for Association Group Command List Get command */
9885      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_PROPERTIES1_RESERVED_MASK                     0x7F
9886      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_PROPERTIES1_ALLOW_CACHE_BIT_MASK              0x80
9887      =3  
9888      =3  /* Association Grp Info command class commands */
9889      =3  #define ASSOCIATION_GRP_INFO_VERSION_V2                                                  0x02
9890      =3  #define ASSOCIATION_GROUP_NAME_GET_V2                                                    0x01
9891      =3  #define ASSOCIATION_GROUP_NAME_REPORT_V2                                                 0x02
9892      =3  #define ASSOCIATION_GROUP_INFO_GET_V2                                                    0x03
9893      =3  #define ASSOCIATION_GROUP_INFO_REPORT_V2                                                 0x04
9894      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_V2                                            0x05
9895      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_REPORT_V2                                         0x06
9896      =3  /* Values used for Association Group Info Get command */
9897      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_RESERVED_MASK_V2                          0x3F
9898      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_LIST_MODE_BIT_MASK_V2                     0x40
9899      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_REFRESH_CACHE_BIT_MASK_V2                 0x80
9900      =3  /* Values used for Association Group Info Report command */
9901      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_GROUP_COUNT_MASK_V2                    0x3F
9902      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_DYNAMIC_INFO_BIT_MASK_V2               0x40
9903      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_LIST_MODE_BIT_MASK_V2                  0x80
9904      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_V2                                 0x00
9905      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_V2                                 0x20
9906      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_SENSOR_V2                                  0x31
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 176 

9907      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION_V2                            0x71
9908      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_V2                                   0x32
9909      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_NA_V2                              0x00
9910      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_LIFELINE_V2                        0x01
9911      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY01_V2                           0x01
9912      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY02_V2                           0x02
9913      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY03_V2                           0x03
9914      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY04_V2                           0x04
9915      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY05_V2                           0x05
9916      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY06_V2                           0x06
9917      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY07_V2                           0x07
9918      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY08_V2                           0x08
9919      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY09_V2                           0x09
9920      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY10_V2                           0x0A
9921      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY11_V2                           0x0B
9922      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY12_V2                           0x0C
9923      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY13_V2                           0x0D
9924      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY14_V2                           0x0E
9925      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY15_V2                           0x0F
9926      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY16_V2                           0x10
9927      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY17_V2                           0x11
9928      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY18_V2                           0x12
9929      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY19_V2                           0x13
9930      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY20_V2                           0x14
9931      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY21_V2                           0x15
9932      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY22_V2                           0x16
9933      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY23_V2                           0x17
9934      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY24_V2                           0x18
9935      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY25_V2                           0x19
9936      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY26_V2                           0x1A
9937      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY27_V2                           0x1B
9938      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY28_V2                           0x1C
9939      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY29_V2                           0x1D
9940      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY30_V2                           0x1E
9941      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY31_V2                           0x1F
9942      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY32_V2                           0x20
9943      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_MULTILEVEL_SENSOR_TYPE_TEMPERATURE_V2      0x01
9944      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_MULTILEVEL_SENSOR_TYPE_HUMIDITY_V2         0x05
9945      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION_TYPE_SMOKE_V2                 0x01
9946      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION_TYPE_CO2_V2                   0x03
9947      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_TYPE_ELECTRIC_V2                     0x01
9948      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_TYPE_GAS_V2                          0x02
9949      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_TYPE_WATER_V2                        0x03
9950      =3  /* Values used for Association Group Command List Get command */
9951      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_PROPERTIES1_RESERVED_MASK_V2                  0x7F
9952      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_PROPERTIES1_ALLOW_CACHE_BIT_MASK_V2           0x80
9953      =3  
9954      =3  /* Association Grp Info command class commands */
9955      =3  #define ASSOCIATION_GRP_INFO_VERSION_V3                                                  0x03
9956      =3  #define ASSOCIATION_GROUP_NAME_GET_V3                                                    0x01
9957      =3  #define ASSOCIATION_GROUP_NAME_REPORT_V3                                                 0x02
9958      =3  #define ASSOCIATION_GROUP_INFO_GET_V3                                                    0x03
9959      =3  #define ASSOCIATION_GROUP_INFO_REPORT_V3                                                 0x04
9960      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_V3                                            0x05
9961      =3  #define ASSOCIATION_GROUP_COMMAND_LIST_REPORT_V3                                         0x06
9962      =3  /* Values used for Association Group Info Get command */
9963      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_RESERVED_MASK_V3                          0x3F
9964      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_LIST_MODE_BIT_MASK_V3                     0x40
9965      =3  #define ASSOCIATION_GROUP_INFO_GET_PROPERTIES1_REFRESH_CACHE_BIT_MASK_V3                 0x80
9966      =3  /* Values used for Association Group Info Report command */
9967      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_GROUP_COUNT_MASK_V3                    0x3F
9968      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_DYNAMIC_INFO_BIT_MASK_V3               0x40
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 177 

9969      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROPERTIES1_LIST_MODE_BIT_MASK_V3                  0x80
9970      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_V3                                 0x00
9971      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_V3                                 0x20
9972      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_SENSOR_V3                                  0x31
9973      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION_V3                            0x71
9974      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_V3                                   0x32
9975      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_IRRIGATION_V3                              0x6B
9976      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_NA_V3                              0x00
9977      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_LIFELINE_V3                        0x01
9978      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY01_V3                           0x01
9979      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY02_V3                           0x02
9980      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY03_V3                           0x03
9981      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY04_V3                           0x04
9982      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY05_V3                           0x05
9983      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY06_V3                           0x06
9984      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY07_V3                           0x07
9985      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY08_V3                           0x08
9986      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY09_V3                           0x09
9987      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY10_V3                           0x0A
9988      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY11_V3                           0x0B
9989      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY12_V3                           0x0C
9990      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY13_V3                           0x0D
9991      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY14_V3                           0x0E
9992      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY15_V3                           0x0F
9993      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY16_V3                           0x10
9994      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY17_V3                           0x11
9995      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY18_V3                           0x12
9996      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY19_V3                           0x13
9997      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY20_V3                           0x14
9998      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY21_V3                           0x15
9999      =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY22_V3                           0x16
10000  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY23_V3                           0x17
10001  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY24_V3                           0x18
10002  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY25_V3                           0x19
10003  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY26_V3                           0x1A
10004  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY27_V3                           0x1B
10005  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY28_V3                           0x1C
10006  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY29_V3                           0x1D
10007  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY30_V3                           0x1E
10008  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY31_V3                           0x1F
10009  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY32_V3                           0x20
10010  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_MULTILEVEL_SENSOR_TYPE_TEMPERATURE_V3      0x01
10011  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_MULTILEVEL_SENSOR_TYPE_HUMIDITY_V3         0x05
10012  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION_TYPE_SMOKE_V3                 0x01
10013  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION_TYPE_CO2_V3                   0x03
10014  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_TYPE_ELECTRIC_V3                     0x01
10015  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_TYPE_GAS_V3                          0x02
10016  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_PROFILE_METER_TYPE_WATER_V3                        0x03
10017  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_01_V3                           0x01
10018  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_02_V3                           0x02
10019  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_03_V3                           0x03
10020  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_04_V3                           0x04
10021  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_05_V3                           0x05
10022  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_06_V3                           0x06
10023  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_07_V3                           0x07
10024  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_08_V3                           0x08
10025  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_09_V3                           0x09
10026  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_10_V3                           0x0A
10027  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_11_V3                           0x0B
10028  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_12_V3                           0x0C
10029  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_13_V3                           0x0D
10030  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_14_V3                           0x0E
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 178 

10031  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_15_V3                           0x0F
10032  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_16_V3                           0x10
10033  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_17_V3                           0x11
10034  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_18_V3                           0x12
10035  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_19_V3                           0x13
10036  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_20_V3                           0x14
10037  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_21_V3                           0x15
10038  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_22_V3                           0x16
10039  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_23_V3                           0x17
10040  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_24_V3                           0x18
10041  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_25_V3                           0x19
10042  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_26_V3                           0x1A
10043  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_27_V3                           0x1B
10044  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_28_V3                           0x1C
10045  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_29_V3                           0x1D
10046  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_30_V3                           0x1E
10047  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_31_V3                           0x1F
10048  00  =3  #define ASSOCIATION_GROUP_INFO_REPORT_IRRIGATION_CHANNEL_32_V3                           0x20
10049  00  =3  /* Values used for Association Group Command List Get command */
10050  00  =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_PROPERTIES1_RESERVED_MASK_V3                  0x7F
10051  00  =3  #define ASSOCIATION_GROUP_COMMAND_LIST_GET_PROPERTIES1_ALLOW_CACHE_BIT_MASK_V3           0x80
10052  00  =3  
10053  00  =3  /* Device Reset Locally command class commands */
10054  00  =3  #define DEVICE_RESET_LOCALLY_VERSION                                                     0x01
10055  00  =3  #define DEVICE_RESET_LOCALLY_NOTIFICATION                                                0x01
10056  00  =3  
10057  00  =3  /* Central Scene command class commands */
10058  00  =3  #define CENTRAL_SCENE_VERSION                                                            0x01
10059  00  =3  #define CENTRAL_SCENE_SUPPORTED_GET                                                      0x01
10060  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT                                                   0x02
10061  00  =3  #define CENTRAL_SCENE_NOTIFICATION                                                       0x03
10062  00  =3  /* Values used for Central Scene Notification command */
10063  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_KEY_ATTRIBUTES_MASK                       0x07
10064  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_RESERVED_MASK                             0xF8
10065  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_RESERVED_SHIFT                            0x03
10066  00  =3  
10067  00  =3  /* Central Scene command class commands */
10068  00  =3  #define CENTRAL_SCENE_VERSION_V2                                                         0x02
10069  00  =3  #define CENTRAL_SCENE_SUPPORTED_GET_V2                                                   0x01
10070  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_V2                                                0x02
10071  00  =3  #define CENTRAL_SCENE_NOTIFICATION_V2                                                    0x03
10072  00  =3  /* Values used for Central Scene Supported Report command */
10073  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_IDENTICAL_BIT_MASK_V2                 0x01
10074  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASK_BYTES_MASK_V2      0x06
10075  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASK_BYTES_SHIFT_V2     0x01
10076  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V2                      0xF8
10077  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V2                     0x03
10078  00  =3  /* Values used for Central Scene Notification command */
10079  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_KEY_ATTRIBUTES_MASK_V2                    0x07
10080  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_1_TIME_V2                  0x00
10081  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_RELEASED_V2                        0x01
10082  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_HELD_DOWN_V2                       0x02
10083  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_2_TIMES_V2                 0x03
10084  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_3_TIMES_V2                 0x04
10085  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_4_TIMES_V2                 0x05
10086  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_5_TIMES_V2                 0x06
10087  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_RESERVED_MASK_V2                          0xF8
10088  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_RESERVED_SHIFT_V2                         0x03
10089  00  =3  
10090  00  =3  /* Central Scene command class commands */
10091  00  =3  #define CENTRAL_SCENE_VERSION_V3                                                         0x03
10092  00  =3  #define CENTRAL_SCENE_SUPPORTED_GET_V3                                                   0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 179 

10093  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_V3                                                0x02
10094  00  =3  #define CENTRAL_SCENE_NOTIFICATION_V3                                                    0x03
10095  00  =3  #define CENTRAL_SCENE_CONFIGURATION_SET_V3                                               0x04
10096  00  =3  #define CENTRAL_SCENE_CONFIGURATION_GET_V3                                               0x05
10097  00  =3  #define CENTRAL_SCENE_CONFIGURATION_REPORT_V3                                            0x06
10098  00  =3  /* Values used for Central Scene Supported Report command */
10099  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_IDENTICAL_BIT_MASK_V3                 0x01
10100  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASK_BYTES_MASK_V3      0x06
10101  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_BIT_MASK_BYTES_SHIFT_V3     0x01
10102  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK_V3                      0x78
10103  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT_V3                     0x03
10104  00  =3  #define CENTRAL_SCENE_SUPPORTED_REPORT_PROPERTIES1_SLOW_REFRESH_SUPPORT_BIT_MASK_V3      0x80
10105  00  =3  /* Values used for Central Scene Notification command */
10106  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_KEY_ATTRIBUTES_MASK_V3                    0x07
10107  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_1_TIME_V3                  0x00
10108  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_RELEASED_V3                        0x01
10109  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_HELD_DOWN_V3                       0x02
10110  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_2_TIMES_V3                 0x03
10111  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_3_TIMES_V3                 0x04
10112  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_4_TIMES_V3                 0x05
10113  00  =3  #define CENTRAL_SCENE_NOTIFICATION_KEY_ATTRIBUTES_KEY_PRESSED_5_TIMES_V3                 0x06
10114  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_RESERVED_MASK_V3                          0x78
10115  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_RESERVED_SHIFT_V3                         0x03
10116  00  =3  #define CENTRAL_SCENE_NOTIFICATION_PROPERTIES1_SLOW_REFRESH_BIT_MASK_V3                  0x80
10117  00  =3  /* Values used for Central Scene Configuration Set command */
10118  00  =3  #define CENTRAL_SCENE_CONFIGURATION_SET_PROPERTIES1_RESERVED_MASK_V3                     0x7F
10119  00  =3  #define CENTRAL_SCENE_CONFIGURATION_SET_PROPERTIES1_SLOW_REFRESH_BIT_MASK_V3             0x80
10120  00  =3  /* Values used for Central Scene Configuration Report command */
10121  00  =3  #define CENTRAL_SCENE_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_MASK_V3                  0x7F
10122  00  =3  #define CENTRAL_SCENE_CONFIGURATION_REPORT_PROPERTIES1_SLOW_REFRESH_BIT_MASK_V3          0x80
10123  00  =3  
10124  00  =3  /* Ip Association command class commands */
10125  00  =3  #define IP_ASSOCIATION_VERSION                                                           0x01
10126  00  =3  #define IP_ASSOCIATION_SET                                                               0x01
10127  00  =3  #define IP_ASSOCIATION_GET                                                               0x02
10128  00  =3  #define IP_ASSOCIATION_REPORT                                                            0x03
10129  00  =3  #define IP_ASSOCIATION_REMOVE                                                            0x04
10130  00  =3  
10131  00  =3  /* Antitheft command class commands */
10132  00  =3  #define ANTITHEFT_VERSION                                                                0x01
10133  00  =3  #define ANTITHEFT_SET                                                                    0x01
10134  00  =3  #define ANTITHEFT_GET                                                                    0x02
10135  00  =3  #define ANTITHEFT_REPORT                                                                 0x03
10136  00  =3  /* Values used for Antitheft Set command */
10137  00  =3  #define ANTITHEFT_SET_PROPERTIES1_NUMBER_OF_MAGIC_CODE_BYTES_MASK                        0x7F
10138  00  =3  #define ANTITHEFT_SET_PROPERTIES1_ENABLE_BIT_MASK                                        0x80
10139  00  =3  
10140  00  =3  /* Antitheft command class commands */
10141  00  =3  #define ANTITHEFT_VERSION_V2                                                             0x02
10142  00  =3  #define ANTITHEFT_SET_V2                                                                 0x01
10143  00  =3  #define ANTITHEFT_GET_V2                                                                 0x02
10144  00  =3  #define ANTITHEFT_REPORT_V2                                                              0x03
10145  00  =3  /* Values used for Antitheft Set command */
10146  00  =3  #define ANTITHEFT_SET_PROPERTIES1_NUMBER_OF_MAGIC_CODE_BYTES_MASK_V2                     0x7F
10147  00  =3  #define ANTITHEFT_SET_PROPERTIES1_ENABLE_BIT_MASK_V2                                     0x80
10148  00  =3  
10149  00  =3  /* Zwaveplus Info command class commands */
10150  00  =3  #define ZWAVEPLUS_INFO_VERSION                                                           0x01
10151  00  =3  #define ZWAVEPLUS_INFO_GET                                                               0x01
10152  00  =3  #define ZWAVEPLUS_INFO_REPORT                                                            0x02
10153  00  =3  /* Values used for Zwaveplus Info Report command */
10154  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_CENTRAL_STATIC                        0x00
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 180 

10155  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_SUB_STATIC                            0x01
10156  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_PORTABLE                              0x02
10157  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_PORTABLE_REPORTING                    0x03
10158  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_PORTABLE                                   0x04
10159  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_ALWAYS_ON                                  0x05
10160  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_SLEEPING_REPORTING                         0x06
10161  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_SLEEPING_LISTENING                         0x07
10162  00  =3  #define ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_NODE                                   0x00
10163  00  =3  #define ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_FOR_IP_ROUTER                          0x01
10164  00  =3  #define ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_FOR_IP_GATEWAY                         0x02
10165  00  =3  #define ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_FOR_IP_CLIENT_IP_NODE                  0x03
10166  00  =3  #define ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_FOR_IP_CLIENT_ZWAVE_NODE               0x04
10167  00  =3  
10168  00  =3  /* Zwaveplus Info command class commands */
10169  00  =3  #define ZWAVEPLUS_INFO_VERSION_V2                                                        0x02
10170  00  =3  #define ZWAVEPLUS_INFO_GET_V2                                                            0x01
10171  00  =3  #define ZWAVEPLUS_INFO_REPORT_V2                                                         0x02
10172  00  =3  /* Values used for Zwaveplus Info Report command */
10173  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_CENTRAL_STATIC_V2                     0x00
10174  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_SUB_STATIC_V2                         0x01
10175  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_PORTABLE_V2                           0x02
10176  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_CONTROLLER_PORTABLE_REPORTING_V2                 0x03
10177  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_PORTABLE_V2                                0x04
10178  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_ALWAYS_ON_V2                               0x05
10179  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_SLEEPING_REPORTING_V2                      0x06
10180  00  =3  #define ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_SLEEPING_LISTENING_V2                      0x07
10181  00  =3  #define ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_NODE_V2                                0x00
10182  00  =3  #define ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_FOR_IP_GATEWAY_V2                      0x02
10183  00  =3  
10184  00  =3  /* Zip Gateway command class commands */
10185  00  =3  #define ZIP_GATEWAY_VERSION                                                              0x01
10186  00  =3  #define GATEWAY_MODE_SET                                                                 0x01
10187  00  =3  #define GATEWAY_MODE_GET                                                                 0x02
10188  00  =3  #define GATEWAY_MODE_REPORT                                                              0x03
10189  00  =3  #define GATEWAY_PEER_SET                                                                 0x04
10190  00  =3  #define GATEWAY_PEER_GET                                                                 0x05
10191  00  =3  #define GATEWAY_PEER_REPORT                                                              0x06
10192  00  =3  #define GATEWAY_LOCK_SET                                                                 0x07
10193  00  =3  #define UNSOLICITED_DESTINATION_SET                                                      0x08
10194  00  =3  #define UNSOLICITED_DESTINATION_GET                                                      0x09
10195  00  =3  #define UNSOLICITED_DESTINATION_REPORT                                                   0x0A
10196  00  =3  #define COMMAND_APPLICATION_NODE_INFO_SET                                                0x0B
10197  00  =3  #define COMMAND_APPLICATION_NODE_INFO_GET                                                0x0C
10198  00  =3  #define COMMAND_APPLICATION_NODE_INFO_REPORT                                             0x0D
10199  00  =3  /* Values used for Gateway Mode Set command */
10200  00  =3  #define GATEWAY_MODE_SET_STAND_ALONE                                                     0x01
10201  00  =3  #define GATEWAY_MODE_SET_PORTAL                                                          0x02
10202  00  =3  /* Values used for Gateway Mode Report command */
10203  00  =3  #define GATEWAY_MODE_REPORT_STAND_ALONE                                                  0x01
10204  00  =3  #define GATEWAY_MODE_REPORT_PORTAL                                                       0x02
10205  00  =3  /* Values used for Gateway Peer Set command */
10206  00  =3  #define GATEWAY_PEER_SET_PROPERTIES1_PEER_NAME_LENGTH_MASK                               0x3F
10207  00  =3  #define GATEWAY_PEER_SET_PROPERTIES1_RESERVED_MASK                                       0xC0
10208  00  =3  #define GATEWAY_PEER_SET_PROPERTIES1_RESERVED_SHIFT                                      0x06
10209  00  =3  /* Values used for Gateway Peer Report command */
10210  00  =3  #define GATEWAY_PEER_REPORT_PROPERTIES1_PEER_NAME_LENGTH_MASK                            0x3F
10211  00  =3  #define GATEWAY_PEER_REPORT_PROPERTIES1_RESERVED_MASK                                    0xC0
10212  00  =3  #define GATEWAY_PEER_REPORT_PROPERTIES1_RESERVED_SHIFT                                   0x06
10213  00  =3  /* Values used for Gateway Lock Set command */
10214  00  =3  #define GATEWAY_LOCK_SET_PROPERTIES1_LOCK_BIT_MASK                                       0x01
10215  00  =3  #define GATEWAY_LOCK_SET_PROPERTIES1_SHOW_BIT_MASK                                       0x02
10216  00  =3  #define GATEWAY_LOCK_SET_PROPERTIES1_RESERVED_MASK                                       0xFC
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 181 

10217  00  =3  #define GATEWAY_LOCK_SET_PROPERTIES1_RESERVED_SHIFT                                      0x02
10218  00  =3  /* Values used for Command Application Node Info Set command */
10219  00  =3  #define COMMAND_APPLICATION_NODE_INFO_SET_SECURITY_SCHEME_0_MARK                         0xF100
10220  00  =3  /* Values used for Command Application Node Info Report command */
10221  00  =3  #define COMMAND_APPLICATION_NODE_INFO_REPORT_SECURITY_SCHEME_0_MARK                      0xF100
10222  00  =3  
10223  00  =3  /* Zip Portal command class commands */
10224  00  =3  #define ZIP_PORTAL_VERSION                                                               0x01
10225  00  =3  #define GATEWAY_CONFIGURATION_SET                                                        0x01
10226  00  =3  #define GATEWAY_CONFIGURATION_STATUS                                                     0x02
10227  00  =3  #define GATEWAY_CONFIGURATION_GET                                                        0x03
10228  00  =3  #define GATEWAY_CONFIGURATION_REPORT                                                     0x04
10229  00  =3  
10230  00  =3  /* Dmx command class commands */
10231  00  =3  #define DMX_VERSION                                                                      0x01
10232  00  =3  #define DMX_ADDRESS_SET                                                                  0x01
10233  00  =3  #define DMX_ADDRESS_GET                                                                  0x02
10234  00  =3  #define DMX_ADDRESS_REPORT                                                               0x03
10235  00  =3  #define DMX_CAPABILITY_GET                                                               0x04
10236  00  =3  #define DMX_CAPABILITY_REPORT                                                            0x05
10237  00  =3  #define DMX_DATA                                                                         0x06
10238  00  =3  /* Values used for Dmx Address Set command */
10239  00  =3  #define DMX_ADDRESS_SET_PROPERTIES1_PAGE_ID_MASK                                         0x0F
10240  00  =3  #define DMX_ADDRESS_SET_PROPERTIES1_RESERVED_MASK                                        0xF0
10241  00  =3  #define DMX_ADDRESS_SET_PROPERTIES1_RESERVED_SHIFT                                       0x04
10242  00  =3  /* Values used for Dmx Address Report command */
10243  00  =3  #define DMX_ADDRESS_REPORT_PROPERTIES1_PAGE_ID_MASK                                      0x0F
10244  00  =3  #define DMX_ADDRESS_REPORT_PROPERTIES1_RESERVED_MASK                                     0xF0
10245  00  =3  #define DMX_ADDRESS_REPORT_PROPERTIES1_RESERVED_SHIFT                                    0x04
10246  00  =3  /* Values used for Dmx Data command */
10247  00  =3  #define DMX_DATA_PROPERTIES1_PAGE_MASK                                                   0x0F
10248  00  =3  #define DMX_DATA_PROPERTIES1_SEQUENCE_NO_MASK                                            0x30
10249  00  =3  #define DMX_DATA_PROPERTIES1_SEQUENCE_NO_SHIFT                                           0x04
10250  00  =3  #define DMX_DATA_PROPERTIES1_RESERVED_MASK                                               0xC0
10251  00  =3  #define DMX_DATA_PROPERTIES1_RESERVED_SHIFT                                              0x06
10252  00  =3  
10253  00  =3  /* Barrier Operator command class commands */
10254  00  =3  #define BARRIER_OPERATOR_VERSION                                                         0x01
10255  00  =3  #define BARRIER_OPERATOR_SET                                                             0x01
10256  00  =3  #define BARRIER_OPERATOR_GET                                                             0x02
10257  00  =3  #define BARRIER_OPERATOR_REPORT                                                          0x03
10258  00  =3  #define BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET                                            0x04
10259  00  =3  #define BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT                                         0x05
10260  00  =3  #define BARRIER_OPERATOR_SIGNAL_SET                                                      0x06
10261  00  =3  #define BARRIER_OPERATOR_SIGNAL_GET                                                      0x07
10262  00  =3  #define BARRIER_OPERATOR_SIGNAL_REPORT                                                   0x08
10263  00  =3  /* Values used for Barrier Operator Set command */
10264  00  =3  #define BARRIER_OPERATOR_SET_CLOSE                                                       0x00
10265  00  =3  #define BARRIER_OPERATOR_SET_OPEN                                                        0xFF
10266  00  =3  /* Values used for Barrier Operator Report command */
10267  00  =3  #define BARRIER_OPERATOR_REPORT_CLOSED                                                   0x00
10268  00  =3  #define BARRIER_OPERATOR_REPORT_CLOSING                                                  0xFC
10269  00  =3  #define BARRIER_OPERATOR_REPORT_STOPPED                                                  0xFD
10270  00  =3  #define BARRIER_OPERATOR_REPORT_OPENING                                                  0xFE
10271  00  =3  #define BARRIER_OPERATOR_REPORT_OPEN                                                     0xFF
10272  00  =3  /* Values used for Barrier Operator Signal Set command */
10273  00  =3  #define BARRIER_OPERATOR_SIGNAL_SET_OFF                                                  0x00
10274  00  =3  #define BARRIER_OPERATOR_SIGNAL_SET_ON                                                   0xFF
10275  00  =3  /* Values used for Barrier Operator Signal Report command */
10276  00  =3  #define BARRIER_OPERATOR_SIGNAL_REPORT_OFF                                               0x00
10277  00  =3  #define BARRIER_OPERATOR_SIGNAL_REPORT_ON                                                0xFF
10278  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 182 

10279  00  =3  /* Network Management Installation Maintenance command class commands */
10280  00  =3  #define NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE_VERSION                              0x01
10281  00  =3  #define PRIORITY_ROUTE_SET                                                               0x01
10282  00  =3  #define PRIORITY_ROUTE_GET                                                               0x02
10283  00  =3  #define PRIORITY_ROUTE_REPORT                                                            0x03
10284  00  =3  #define STATISTICS_GET                                                                   0x04
10285  00  =3  #define STATISTICS_REPORT                                                                0x05
10286  00  =3  #define STATISTICS_CLEAR                                                                 0x06
10287  00  =3  /* Values used for Priority Route Set command */
10288  00  =3  #define PRIORITY_ROUTE_SET_9_6_KBIT_SEC                                                  0x01
10289  00  =3  #define PRIORITY_ROUTE_SET_40_KBIT_SEC                                                   0x02
10290  00  =3  #define PRIORITY_ROUTE_SET_100_KBIT_SEC                                                  0x03
10291  00  =3  /* Values used for Priority Route Report command */
10292  00  =3  #define PRIORITY_ROUTE_REPORT_NONE                                                       0x00
10293  00  =3  #define PRIORITY_ROUTE_REPORT_ZW_PRIORITY_ROUTE_ZW_LWR                                   0x01
10294  00  =3  #define PRIORITY_ROUTE_REPORT_ZW_PRIORITY_ROUTE_ZW_NLWR                                  0x02
10295  00  =3  #define PRIORITY_ROUTE_REPORT_ZW_PRIORITY_ROUTE_APP_PR                                   0x10
10296  00  =3  #define PRIORITY_ROUTE_REPORT_9_6_KBIT_SEC                                               0x01
10297  00  =3  #define PRIORITY_ROUTE_REPORT_40_KBIT_SEC                                                0x02
10298  00  =3  #define PRIORITY_ROUTE_REPORT_100_KBIT_SEC                                               0x03
10299  00  =3  /* Values used for Statistics Report command */
10300  00  =3  #define STATISTICS_REPORT_ROUTE_CHANGES_RC                                               0x00
10301  00  =3  #define STATISTICS_REPORT_TRANSMISSION_COUNT_TC                                          0x01
10302  00  =3  #define STATISTICS_REPORT_NEIGHBORS_NB                                                   0x02
10303  00  =3  #define STATISTICS_REPORT_PACKET_ERROR_COUNT_PEC                                         0x03
10304  00  =3  #define STATISTICS_REPORT_SUM_OF_TRANSMISSION_TIMES_TS                                   0x04
10305  00  =3  #define STATISTICS_REPORT_SUM_OF_TRANSMISSION_TIMES_SQURARED_TS2                         0x05
10306  00  =3  
10307  00  =3  /* Network Management Installation Maintenance command class commands */
10308  00  =3  #define NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE_VERSION_V2                           0x02
10309  00  =3  #define PRIORITY_ROUTE_SET_V2                                                            0x01
10310  00  =3  #define PRIORITY_ROUTE_GET_V2                                                            0x02
10311  00  =3  #define PRIORITY_ROUTE_REPORT_V2                                                         0x03
10312  00  =3  #define STATISTICS_GET_V2                                                                0x04
10313  00  =3  #define STATISTICS_REPORT_V2                                                             0x05
10314  00  =3  #define STATISTICS_CLEAR_V2                                                              0x06
10315  00  =3  #define RSSI_GET_V2                                                                      0x07
10316  00  =3  #define RSSI_REPORT_V2                                                                   0x08
10317  00  =3  /* Values used for Priority Route Set command */
10318  00  =3  #define PRIORITY_ROUTE_SET_9_6_KBIT_SEC_V2                                               0x01
10319  00  =3  #define PRIORITY_ROUTE_SET_40_KBIT_SEC_V2                                                0x02
10320  00  =3  #define PRIORITY_ROUTE_SET_100_KBIT_SEC_V2                                               0x03
10321  00  =3  /* Values used for Priority Route Report command */
10322  00  =3  #define PRIORITY_ROUTE_REPORT_NONE_V2                                                    0x00
10323  00  =3  #define PRIORITY_ROUTE_REPORT_ZW_PRIORITY_ROUTE_ZW_LWR_V2                                0x01
10324  00  =3  #define PRIORITY_ROUTE_REPORT_ZW_PRIORITY_ROUTE_ZW_NLWR_V2                               0x02
10325  00  =3  #define PRIORITY_ROUTE_REPORT_ZW_PRIORITY_ROUTE_APP_PR_V2                                0x10
10326  00  =3  #define PRIORITY_ROUTE_REPORT_9_6_KBIT_SEC_V2                                            0x01
10327  00  =3  #define PRIORITY_ROUTE_REPORT_40_KBIT_SEC_V2                                             0x02
10328  00  =3  #define PRIORITY_ROUTE_REPORT_100_KBIT_SEC_V2                                            0x03
10329  00  =3  /* Values used for Statistics Report command */
10330  00  =3  #define STATISTICS_REPORT_ROUTE_CHANGES_RC_V2                                            0x00
10331  00  =3  #define STATISTICS_REPORT_TRANSMISSION_COUNT_TC_V2                                       0x01
10332  00  =3  #define STATISTICS_REPORT_NEIGHBORS_NB_V2                                                0x02
10333  00  =3  #define STATISTICS_REPORT_PACKET_ERROR_COUNT_PEC_V2                                      0x03
10334  00  =3  #define STATISTICS_REPORT_SUM_OF_TRANSMISSION_TIMES_TS_V2                                0x04
10335  00  =3  #define STATISTICS_REPORT_SUM_OF_TRANSMISSION_TIMES_SQURARED_TS2_V2                      0x05
10336  00  =3  
10337  00  =3  /* Zip Naming command class commands */
10338  00  =3  #define ZIP_NAMING_VERSION                                                               0x01
10339  00  =3  #define ZIP_NAMING_NAME_SET                                                              0x01
10340  00  =3  #define ZIP_NAMING_NAME_GET                                                              0x02
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 183 

10341  00  =3  #define ZIP_NAMING_NAME_REPORT                                                           0x03
10342  00  =3  #define ZIP_NAMING_LOCATION_SET                                                          0x04
10343  00  =3  #define ZIP_NAMING_LOCATION_GET                                                          0x05
10344  00  =3  #define ZIP_NAMING_LOCATION_REPORT                                                       0x06
10345  00  =3  
10346  00  =3  /* Mailbox command class commands */
10347  00  =3  #define MAILBOX_VERSION                                                                  0x01
10348  00  =3  #define MAILBOX_CONFIGURATION_GET                                                        0x01
10349  00  =3  #define MAILBOX_CONFIGURATION_SET                                                        0x02
10350  00  =3  #define MAILBOX_CONFIGURATION_REPORT                                                     0x03
10351  00  =3  #define MAILBOX_QUEUE                                                                    0x04
10352  00  =3  #define MAILBOX_WAKEUP_NOTIFICATION                                                      0x05
10353  00  =3  #define MAILBOX_NODE_FAILING                                                             0x06
10354  00  =3  /* Values used for Mailbox Configuration Set command */
10355  00  =3  #define MAILBOX_CONFIGURATION_SET_PROPERTIES1_MODE_MASK                                  0x07
10356  00  =3  #define MAILBOX_CONFIGURATION_SET_MODE_DISABLE                                           0x00
10357  00  =3  #define MAILBOX_CONFIGURATION_SET_MODE_ENABLE_MAILBOX_SERVICE                            0x01
10358  00  =3  #define MAILBOX_CONFIGURATION_SET_MODE_ENABLE_MAILBOX_PROXY                              0x02
10359  00  =3  #define MAILBOX_CONFIGURATION_SET_PROPERTIES1_RESERVED_MASK                              0xF8
10360  00  =3  #define MAILBOX_CONFIGURATION_SET_PROPERTIES1_RESERVED_SHIFT                             0x03
10361  00  =3  /* Values used for Mailbox Configuration Report command */
10362  00  =3  #define MAILBOX_CONFIGURATION_REPORT_PROPERTIES1_MODE_MASK                               0x07
10363  00  =3  #define MAILBOX_CONFIGURATION_REPORT_MODE_DISABLE                                        0x00
10364  00  =3  #define MAILBOX_CONFIGURATION_REPORT_MODE_ENABLE_MAILBOX_SERVICE                         0x01
10365  00  =3  #define MAILBOX_CONFIGURATION_REPORT_MODE_ENABLE_MAILBOX_PROXY                           0x02
10366  00  =3  #define MAILBOX_CONFIGURATION_REPORT_PROPERTIES1_SUPPORTED_MODES_MASK                    0x18
10367  00  =3  #define MAILBOX_CONFIGURATION_REPORT_PROPERTIES1_SUPPORTED_MODES_SHIFT                   0x03
10368  00  =3  #define MAILBOX_CONFIGURATION_REPORT_SUPPORTED_MODES_MAILBOX_SERVICE_SUPPORTED           0x00
10369  00  =3  #define MAILBOX_CONFIGURATION_REPORT_SUPPORTED_MODES_MAILBOX_PROXY_SUPPORTED             0x01
10370  00  =3  #define MAILBOX_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_MASK                           0xE0
10371  00  =3  #define MAILBOX_CONFIGURATION_REPORT_PROPERTIES1_RESERVED_SHIFT                          0x05
10372  00  =3  /* Values used for Mailbox Queue command */
10373  00  =3  #define MAILBOX_QUEUE_PROPERTIES1_MODE_MASK                                              0x03
10374  00  =3  #define MAILBOX_QUEUE_MODE_PUSH                                                          0x00
10375  00  =3  #define MAILBOX_QUEUE_MODE_POP                                                           0x01
10376  00  =3  #define MAILBOX_QUEUE_MODE_WAITING                                                       0x02
10377  00  =3  #define MAILBOX_QUEUE_MODE_PING                                                          0x03
10378  00  =3  #define MAILBOX_QUEUE_MODE_ACK                                                           0x04
10379  00  =3  #define MAILBOX_QUEUE_MODE_NACK                                                          0x05
10380  00  =3  #define MAILBOX_QUEUE_MODE_QUEUE_FULL                                                    0x06
10381  00  =3  #define MAILBOX_QUEUE_PROPERTIES1_LAST_BIT_MASK                                          0x04
10382  00  =3  #define MAILBOX_QUEUE_PROPERTIES1_RESERVED_MASK                                          0xF8
10383  00  =3  #define MAILBOX_QUEUE_PROPERTIES1_RESERVED_SHIFT                                         0x03
10384  00  =3  
10385  00  =3  /* Window Covering command class commands */
10386  00  =3  #define WINDOW_COVERING_VERSION                                                          0x01
10387  00  =3  #define WINDOW_COVERING_SUPPORTED_GET                                                    0x01
10388  00  =3  #define WINDOW_COVERING_SUPPORTED_REPORT                                                 0x02
10389  00  =3  #define WINDOW_COVERING_GET                                                              0x03
10390  00  =3  #define WINDOW_COVERING_REPORT                                                           0x04
10391  00  =3  #define WINDOW_COVERING_SET                                                              0x05
10392  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE                                               0x06
10393  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE                                                0x07
10394  00  =3  /* Values used for Window Covering Supported Report command */
10395  00  =3  #define WINDOW_COVERING_SUPPORTED_REPORT_PROPERTIES1_NUMBER_OF_PARAMETER_MASK_BYTES_MASK 0x0F
10396  00  =3  #define WINDOW_COVERING_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK                       0xF0
10397  00  =3  #define WINDOW_COVERING_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT                      0x04
10398  00  =3  /* Values used for Window Covering Get command */
10399  00  =3  #define WINDOW_COVERING_GET_OUT_LEFT_1                                                   0x00
10400  00  =3  #define WINDOW_COVERING_GET_OUT_LEFT_2                                                   0x01
10401  00  =3  #define WINDOW_COVERING_GET_OUT_RIGHT_1                                                  0x02
10402  00  =3  #define WINDOW_COVERING_GET_OUT_RIGHT_2                                                  0x03
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 184 

10403  00  =3  #define WINDOW_COVERING_GET_IN_LEFT_1                                                    0x04
10404  00  =3  #define WINDOW_COVERING_GET_IN_LEFT_2                                                    0x05
10405  00  =3  #define WINDOW_COVERING_GET_IN_RIGHT_1                                                   0x06
10406  00  =3  #define WINDOW_COVERING_GET_IN_RIGHT_2                                                   0x07
10407  00  =3  #define WINDOW_COVERING_GET_IN_RIGHT_LEFT_1                                              0x08
10408  00  =3  #define WINDOW_COVERING_GET_IN_RIGHT_LEFT_2                                              0x09
10409  00  =3  #define WINDOW_COVERING_GET_VERTICAL_SLATS_ANGLE_1                                       0x0A
10410  00  =3  #define WINDOW_COVERING_GET_VERTICAL_SLATS_ANGLE_2                                       0x0B
10411  00  =3  #define WINDOW_COVERING_GET_OUT_BOTTOM_1                                                 0x0C
10412  00  =3  #define WINDOW_COVERING_GET_OUT_BOTTOM_2                                                 0x0D
10413  00  =3  #define WINDOW_COVERING_GET_OUT_TOP_1                                                    0x0E
10414  00  =3  #define WINDOW_COVERING_GET_OUT_TOP_2                                                    0x0F
10415  00  =3  #define WINDOW_COVERING_GET_IN_BOTTOM_1                                                  0x10
10416  00  =3  #define WINDOW_COVERING_GET_IN_BOTTOM_2                                                  0x11
10417  00  =3  #define WINDOW_COVERING_GET_IN_TOP_1                                                     0x0B
10418  00  =3  #define WINDOW_COVERING_GET_IN_TOP_2                                                     0x12
10419  00  =3  #define WINDOW_COVERING_GET_IN_TOP_BOTTOM_1                                              0x13
10420  00  =3  #define WINDOW_COVERING_GET_IN_TOP_BOTTOM_2                                              0x14
10421  00  =3  #define WINDOW_COVERING_GET_HORIZONTAL_SLATS_ANGLE_1                                     0x15
10422  00  =3  #define WINDOW_COVERING_GET_HORIZONTAL_SLATS_ANGLE_2                                     0x16
10423  00  =3  /* Values used for Window Covering Report command */
10424  00  =3  #define WINDOW_COVERING_REPORT_OUT_LEFT_1                                                0x00
10425  00  =3  #define WINDOW_COVERING_REPORT_OUT_LEFT_2                                                0x01
10426  00  =3  #define WINDOW_COVERING_REPORT_OUT_RIGHT_1                                               0x02
10427  00  =3  #define WINDOW_COVERING_REPORT_OUT_RIGHT_2                                               0x03
10428  00  =3  #define WINDOW_COVERING_REPORT_IN_LEFT_1                                                 0x04
10429  00  =3  #define WINDOW_COVERING_REPORT_IN_LEFT_2                                                 0x05
10430  00  =3  #define WINDOW_COVERING_REPORT_IN_RIGHT_1                                                0x06
10431  00  =3  #define WINDOW_COVERING_REPORT_IN_RIGHT_2                                                0x07
10432  00  =3  #define WINDOW_COVERING_REPORT_IN_RIGHT_LEFT_1                                           0x08
10433  00  =3  #define WINDOW_COVERING_REPORT_IN_RIGHT_LEFT_2                                           0x09
10434  00  =3  #define WINDOW_COVERING_REPORT_VERTICAL_SLATS_ANGLE_1                                    0x0A
10435  00  =3  #define WINDOW_COVERING_REPORT_VERTICAL_SLATS_ANGLE_2                                    0x0B
10436  00  =3  #define WINDOW_COVERING_REPORT_OUT_BOTTOM_1                                              0x0C
10437  00  =3  #define WINDOW_COVERING_REPORT_OUT_BOTTOM_2                                              0x0D
10438  00  =3  #define WINDOW_COVERING_REPORT_OUT_TOP_1                                                 0x0E
10439  00  =3  #define WINDOW_COVERING_REPORT_OUT_TOP_2                                                 0x0F
10440  00  =3  #define WINDOW_COVERING_REPORT_IN_BOTTOM_1                                               0x10
10441  00  =3  #define WINDOW_COVERING_REPORT_IN_BOTTOM_2                                               0x11
10442  00  =3  #define WINDOW_COVERING_REPORT_IN_TOP_1                                                  0x0B
10443  00  =3  #define WINDOW_COVERING_REPORT_IN_TOP_2                                                  0x12
10444  00  =3  #define WINDOW_COVERING_REPORT_IN_TOP_BOTTOM_1                                           0x13
10445  00  =3  #define WINDOW_COVERING_REPORT_IN_TOP_BOTTOM_2                                           0x14
10446  00  =3  #define WINDOW_COVERING_REPORT_HORIZONTAL_SLATS_ANGLE_1                                  0x15
10447  00  =3  #define WINDOW_COVERING_REPORT_HORIZONTAL_SLATS_ANGLE_2                                  0x16
10448  00  =3  /* Values used for Window Covering Set command */
10449  00  =3  #define WINDOW_COVERING_SET_PROPERTIES1_PARAMETER_COUNT_MASK                             0x1F
10450  00  =3  #define WINDOW_COVERING_SET_PROPERTIES1_RESERVED_MASK                                    0xE0
10451  00  =3  #define WINDOW_COVERING_SET_PROPERTIES1_RESERVED_SHIFT                                   0x05
10452  00  =3  #define WINDOW_COVERING_SET_OUT_LEFT_1                                                   0x00
10453  00  =3  #define WINDOW_COVERING_SET_OUT_LEFT_2                                                   0x01
10454  00  =3  #define WINDOW_COVERING_SET_OUT_RIGHT_1                                                  0x02
10455  00  =3  #define WINDOW_COVERING_SET_OUT_RIGHT_2                                                  0x03
10456  00  =3  #define WINDOW_COVERING_SET_IN_LEFT_1                                                    0x04
10457  00  =3  #define WINDOW_COVERING_SET_IN_LEFT_2                                                    0x05
10458  00  =3  #define WINDOW_COVERING_SET_IN_RIGHT_1                                                   0x06
10459  00  =3  #define WINDOW_COVERING_SET_IN_RIGHT_2                                                   0x07
10460  00  =3  #define WINDOW_COVERING_SET_IN_RIGHT_LEFT_1                                              0x08
10461  00  =3  #define WINDOW_COVERING_SET_IN_RIGHT_LEFT_2                                              0x09
10462  00  =3  #define WINDOW_COVERING_SET_VERTICAL_SLATS_ANGLE_1                                       0x0A
10463  00  =3  #define WINDOW_COVERING_SET_VERTICAL_SLATS_ANGLE_2                                       0x0B
10464  00  =3  #define WINDOW_COVERING_SET_OUT_BOTTOM_1                                                 0x0C
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 185 

10465  00  =3  #define WINDOW_COVERING_SET_OUT_BOTTOM_2                                                 0x0D
10466  00  =3  #define WINDOW_COVERING_SET_OUT_TOP_1                                                    0x0E
10467  00  =3  #define WINDOW_COVERING_SET_OUT_TOP_2                                                    0x0F
10468  00  =3  #define WINDOW_COVERING_SET_IN_BOTTOM_1                                                  0x10
10469  00  =3  #define WINDOW_COVERING_SET_IN_BOTTOM_2                                                  0x11
10470  00  =3  #define WINDOW_COVERING_SET_IN_TOP_1                                                     0x0B
10471  00  =3  #define WINDOW_COVERING_SET_IN_TOP_2                                                     0x12
10472  00  =3  #define WINDOW_COVERING_SET_IN_TOP_BOTTOM_1                                              0x13
10473  00  =3  #define WINDOW_COVERING_SET_IN_TOP_BOTTOM_2                                              0x14
10474  00  =3  #define WINDOW_COVERING_SET_HORIZONTAL_SLATS_ANGLE_1                                     0x15
10475  00  =3  #define WINDOW_COVERING_SET_HORIZONTAL_SLATS_ANGLE_2                                     0x16
10476  00  =3  /* Values used for Window Covering Start Level Change command */
10477  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_PROPERTIES1_RES1_MASK                         0x3F
10478  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_PROPERTIES1_UP_DOWN_BIT_MASK                  0x40
10479  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_PROPERTIES1_RES2_BIT_MASK                     0x80
10480  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_LEFT_1                                    0x00
10481  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_LEFT_2                                    0x01
10482  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_RIGHT_1                                   0x02
10483  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_RIGHT_2                                   0x03
10484  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_LEFT_1                                     0x04
10485  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_LEFT_2                                     0x05
10486  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_RIGHT_1                                    0x06
10487  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_RIGHT_2                                    0x07
10488  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_RIGHT_LEFT_1                               0x08
10489  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_RIGHT_LEFT_2                               0x09
10490  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_VERTICAL_SLATS_ANGLE_1                        0x0A
10491  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_VERTICAL_SLATS_ANGLE_2                        0x0B
10492  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_BOTTOM_1                                  0x0C
10493  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_BOTTOM_2                                  0x0D
10494  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_TOP_1                                     0x0E
10495  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_OUT_TOP_2                                     0x0F
10496  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_BOTTOM_1                                   0x10
10497  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_BOTTOM_2                                   0x11
10498  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_TOP_1                                      0x0B
10499  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_TOP_2                                      0x12
10500  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_TOP_BOTTOM_1                               0x13
10501  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_IN_TOP_BOTTOM_2                               0x14
10502  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_HORIZONTAL_SLATS_ANGLE_1                      0x15
10503  00  =3  #define WINDOW_COVERING_START_LEVEL_CHANGE_HORIZONTAL_SLATS_ANGLE_2                      0x16
10504  00  =3  /* Values used for Window Covering Stop Level Change command */
10505  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_LEFT_1                                     0x00
10506  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_LEFT_2                                     0x01
10507  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_RIGHT_1                                    0x02
10508  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_RIGHT_2                                    0x03
10509  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_LEFT_1                                      0x04
10510  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_LEFT_2                                      0x05
10511  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_RIGHT_1                                     0x06
10512  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_RIGHT_2                                     0x07
10513  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_RIGHT_LEFT_1                                0x08
10514  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_RIGHT_LEFT_2                                0x09
10515  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_VERTICAL_SLATS_ANGLE_1                         0x0A
10516  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_VERTICAL_SLATS_ANGLE_2                         0x0B
10517  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_BOTTOM_1                                   0x0C
10518  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_BOTTOM_2                                   0x0D
10519  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_TOP_1                                      0x0E
10520  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_OUT_TOP_2                                      0x0F
10521  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_BOTTOM_1                                    0x10
10522  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_BOTTOM_2                                    0x11
10523  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_TOP_1                                       0x0B
10524  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_TOP_2                                       0x12
10525  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_TOP_BOTTOM_1                                0x13
10526  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_IN_TOP_BOTTOM_2                                0x14
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 186 

10527  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_HORIZONTAL_SLATS_ANGLE_1                       0x15
10528  00  =3  #define WINDOW_COVERING_STOP_LEVEL_CHANGE_HORIZONTAL_SLATS_ANGLE_2                       0x16
10529  00  =3  
10530  00  =3  /* Security 2 command class commands */
10531  00  =3  #define SECURITY_2_VERSION                                                               0x01
10532  00  =3  #define SECURITY_2_NONCE_GET                                                             0x01
10533  00  =3  #define SECURITY_2_NONCE_REPORT                                                          0x02
10534  00  =3  #define SECURITY_2_MESSAGE_ENCAPSULATION                                                 0x03
10535  00  =3  #define KEX_GET                                                                          0x04
10536  00  =3  #define KEX_REPORT                                                                       0x05
10537  00  =3  #define KEX_SET                                                                          0x06
10538  00  =3  #define KEX_FAIL                                                                         0x07
10539  00  =3  #define PUBLIC_KEY_REPORT                                                                0x08
10540  00  =3  #define SECURITY_2_NETWORK_KEY_GET                                                       0x09
10541  00  =3  #define SECURITY_2_NETWORK_KEY_REPORT                                                    0x0A
10542  00  =3  #define SECURITY_2_NETWORK_KEY_VERIFY                                                    0x0B
10543  00  =3  #define SECURITY_2_TRANSFER_END                                                          0x0C
10544  00  =3  #define SECURITY_2_COMMANDS_SUPPORTED_GET                                                0x0D
10545  00  =3  #define SECURITY_2_COMMANDS_SUPPORTED_REPORT                                             0x0E
10546  00  =3  #define SECURITY_2_CAPABILITIES_GET                                                      0x0F /*[OBSOLETE
             -D]*/
10547  00  =3  #define SECURITY_2_CAPABILITIES_REPORT                                                   0x10 /*[OBSOLETE
             -D]*/
10548  00  =3  /* Values used for Security 2 Nonce Report command */
10549  00  =3  #define SECURITY_2_NONCE_REPORT_PROPERTIES1_SOS_BIT_MASK                                 0x01
10550  00  =3  #define SECURITY_2_NONCE_REPORT_PROPERTIES1_MOS_BIT_MASK                                 0x02
10551  00  =3  #define SECURITY_2_NONCE_REPORT_PROPERTIES1_RESERVED_MASK                                0xFC
10552  00  =3  #define SECURITY_2_NONCE_REPORT_PROPERTIES1_RESERVED_SHIFT                               0x02
10553  00  =3  /* Values used for Security 2 Message Encapsulation command */
10554  00  =3  #define SECURITY_2_MESSAGE_ENCAPSULATION_PROPERTIES1_EXTENSION_BIT_MASK                  0x01
10555  00  =3  #define SECURITY_2_MESSAGE_ENCAPSULATION_PROPERTIES1_ENCRYPTED_EXTENSION_BIT_MASK        0x02
10556  00  =3  #define SECURITY_2_MESSAGE_ENCAPSULATION_PROPERTIES1_RESERVED_MASK                       0xFC
10557  00  =3  #define SECURITY_2_MESSAGE_ENCAPSULATION_PROPERTIES1_RESERVED_SHIFT                      0x02
10558  00  =3  /* Values used for Kex Report command */
10559  00  =3  #define KEX_REPORT_PROPERTIES1_ECHO_BIT_MASK                                             0x01
10560  00  =3  #define KEX_REPORT_PROPERTIES1_REQUEST_CSA_BIT_MASK                                      0x02
10561  00  =3  #define KEX_REPORT_PROPERTIES1_RESERVED_MASK                                             0xFC
10562  00  =3  #define KEX_REPORT_PROPERTIES1_RESERVED_SHIFT                                            0x02
10563  00  =3  /* Values used for Kex Set command */
10564  00  =3  #define KEX_SET_PROPERTIES1_ECHO_BIT_MASK                                                0x01
10565  00  =3  #define KEX_SET_PROPERTIES1_REQUEST_CSA_BIT_MASK                                         0x02
10566  00  =3  #define KEX_SET_PROPERTIES1_RESERVED_MASK                                                0xFC
10567  00  =3  #define KEX_SET_PROPERTIES1_RESERVED_SHIFT                                               0x02
10568  00  =3  /* Values used for Kex Fail command */
10569  00  =3  #define KEX_FAIL_KEX_KEY                                                                 0x01
10570  00  =3  #define KEX_FAIL_KEX_SCHEME                                                              0x02
10571  00  =3  #define KEX_FAIL_KEX_CURVES                                                              0x03
10572  00  =3  #define KEX_FAIL_DECRYPT                                                                 0x05
10573  00  =3  #define KEX_FAIL_CANCEL                                                                  0x06
10574  00  =3  #define KEX_FAIL_AUTH                                                                    0x07
10575  00  =3  #define KEX_FAIL_KEY_GET                                                                 0x08
10576  00  =3  #define KEX_FAIL_KEY_VERIFY                                                              0x09
10577  00  =3  #define KEX_FAIL_KEY_REPORT                                                              0x0A
10578  00  =3  /* Values used for Public Key Report command */
10579  00  =3  #define PUBLIC_KEY_REPORT_PROPERTIES1_INCLUDING_NODE_BIT_MASK                            0x01
10580  00  =3  #define PUBLIC_KEY_REPORT_PROPERTIES1_RESERVED_MASK                                      0xFE
10581  00  =3  #define PUBLIC_KEY_REPORT_PROPERTIES1_RESERVED_SHIFT                                     0x01
10582  00  =3  /* Values used for Security 2 Transfer End command */
10583  00  =3  #define SECURITY_2_TRANSFER_END_PROPERTIES1_KEY_REQUEST_COMPLETE_BIT_MASK                0x01
10584  00  =3  #define SECURITY_2_TRANSFER_END_PROPERTIES1_KEY_VERIFIED_BIT_MASK                        0x02
10585  00  =3  #define SECURITY_2_TRANSFER_END_PROPERTIES1_RESERVED_MASK                                0xFC
10586  00  =3  #define SECURITY_2_TRANSFER_END_PROPERTIES1_RESERVED_SHIFT                               0x02
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 187 

10587  00  =3  
10588  00  =3  /* Irrigation command class commands */
10589  00  =3  #define IRRIGATION_VERSION                                                               0x01
10590  00  =3  #define IRRIGATION_SYSTEM_INFO_GET                                                       0x01
10591  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT                                                    0x02
10592  00  =3  #define IRRIGATION_SYSTEM_STATUS_GET                                                     0x03
10593  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT                                                  0x04
10594  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET                                                     0x05
10595  00  =3  #define IRRIGATION_SYSTEM_CONFIG_GET                                                     0x06
10596  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT                                                  0x07
10597  00  =3  #define IRRIGATION_VALVE_INFO_GET                                                        0x08
10598  00  =3  #define IRRIGATION_VALVE_INFO_REPORT                                                     0x09
10599  00  =3  #define IRRIGATION_VALVE_CONFIG_SET                                                      0x0A
10600  00  =3  #define IRRIGATION_VALVE_CONFIG_GET                                                      0x0B
10601  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT                                                   0x0C
10602  00  =3  #define IRRIGATION_VALVE_RUN                                                             0x0D
10603  00  =3  #define IRRIGATION_VALVE_TABLE_SET                                                       0x0E
10604  00  =3  #define IRRIGATION_VALVE_TABLE_GET                                                       0x0F
10605  00  =3  #define IRRIGATION_VALVE_TABLE_REPORT                                                    0x10
10606  00  =3  #define IRRIGATION_VALVE_TABLE_RUN                                                       0x11
10607  00  =3  #define IRRIGATION_SYSTEM_SHUTOFF                                                        0x12
10608  00  =3  /* Values used for Irrigation System Info Report command */
10609  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES1_MASTER_VALVE_BIT_MASK                  0x01
10610  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES1_RESERVED1_MASK                         0x06
10611  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES1_RESERVED1_SHIFT                        0x01
10612  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES1_RESERVED2_MASK                         0x18
10613  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES1_RESERVED2_SHIFT                        0x03
10614  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES1_RESERVED3_MASK                         0xE0
10615  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES1_RESERVED3_SHIFT                        0x05
10616  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES2_VALVE_TABLE_MAX_SIZE_MASK              0x0F
10617  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES2_RESERVED_MASK                          0xF0
10618  00  =3  #define IRRIGATION_SYSTEM_INFO_REPORT_PROPERTIES2_RESERVED_SHIFT                         0x04
10619  00  =3  /* Values used for Irrigation System Status Report command */
10620  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_FLOW_SENSOR_DETECTED                             0x00
10621  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PRESSURE_SENSOR_DETECTED                         0x01
10622  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_RAIN_SENSOR_DETECTED                             0x02
10623  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_MOISTURE_SENSOR_DETECTED                         0x03
10624  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES1_FLOW_SIZE_MASK                       0x07
10625  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES1_FLOW_SCALE_MASK                      0x18
10626  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES1_FLOW_SCALE_SHIFT                     0x03
10627  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES1_FLOW_PRECISION_MASK                  0xE0
10628  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES1_FLOW_PRECISION_SHIFT                 0x05
10629  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES2_PRESSURE_SIZE_MASK                   0x07
10630  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES2_PRESSURE_SCALE_MASK                  0x18
10631  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES2_PRESSURE_SCALE_SHIFT                 0x03
10632  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES2_PRESSURE_PRECISION_MASK              0xE0
10633  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES2_PRESSURE_PRECISION_SHIFT             0x05
10634  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES3_MASTER_VALVE_BIT_MASK                0x01
10635  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES3_RESERVED_MASK                        0xFE
10636  00  =3  #define IRRIGATION_SYSTEM_STATUS_REPORT_PROPERTIES3_RESERVED_SHIFT                       0x01
10637  00  =3  /* Values used for Irrigation System Config Set command */
10638  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_SIZE_MASK       0x07
10639  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_SCALE_MASK      0x18
10640  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_SCALE_SHIFT     0x03
10641  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_PRECISION_MASK  0xE0
10642  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_PRECISION_SHIFT 0x05
10643  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES2_LOW_PRESSURE_THRESHOLD_SIZE_MASK        0x07
10644  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES2_LOW_PRESSURE_THRESHOLD_SCALE_MASK       0x18
10645  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES2_LOW_PRESSURE_THRESHOLD_SCALE_SHIFT      0x03
10646  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES2_LOW_PRESSURE_THRESHOLD_PRECISION_MASK   0xE0
10647  00  =3  #define IRRIGATION_SYSTEM_CONFIG_SET_PROPERTIES2_LOW_PRESSURE_THRESHOLD_PRECISION_SHIFT  0x05
10648  00  =3  /* Values used for Irrigation System Config Report command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 188 

10649  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_SIZE_MASK    0x07
10650  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_SCALE_MASK   0x18
10651  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_SCALE_SHIFT  0x03
10652  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_PRECISION_MASK 0xE0
10653  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES1_HIGH_PRESSURE_THRESHOLD_PRECISION_SHIFT 0x05
10654  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES2_LOW_PRESSURE_THRESHOLD_SIZE_MASK     0x07
10655  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES2_LOW_PRESSURE_THRESHOLD_SCALE_MASK    0x18
10656  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES2_LOW_PRESSURE_THRESHOLD_SCALE_SHIFT   0x03
10657  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES2_LOW_PRESSURE_THRESHOLD_PRECISION_MASK 0xE0
10658  00  =3  #define IRRIGATION_SYSTEM_CONFIG_REPORT_PROPERTIES2_LOW_PRESSURE_THRESHOLD_PRECISION_SHIFT 0x05
10659  00  =3  /* Values used for Irrigation Valve Info Get command */
10660  00  =3  #define IRRIGATION_VALVE_INFO_GET_PROPERTIES1_MASTER_VALVE_BIT_MASK                      0x01
10661  00  =3  #define IRRIGATION_VALVE_INFO_GET_PROPERTIES1_RESERVED_MASK                              0xFE
10662  00  =3  #define IRRIGATION_VALVE_INFO_GET_PROPERTIES1_RESERVED_SHIFT                             0x01
10663  00  =3  /* Values used for Irrigation Valve Info Report command */
10664  00  =3  #define IRRIGATION_VALVE_INFO_REPORT_PROPERTIES1_MASTER_BIT_MASK                         0x01
10665  00  =3  #define IRRIGATION_VALVE_INFO_REPORT_PROPERTIES1_CONNECTED_BIT_MASK                      0x02
10666  00  =3  #define IRRIGATION_VALVE_INFO_REPORT_PROPERTIES1_RESERVED_MASK                           0xFC
10667  00  =3  #define IRRIGATION_VALVE_INFO_REPORT_PROPERTIES1_RESERVED_SHIFT                          0x02
10668  00  =3  /* Values used for Irrigation Valve Config Set command */
10669  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES1_MASTER_VALVE_BIT_MASK                    0x01
10670  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES1_RESERVED_MASK                            0xFE
10671  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES1_RESERVED_SHIFT                           0x01
10672  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES2_MAXIMUM_FLOW_SIZE_MASK                   0x07
10673  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES2_MAXIMUM_FLOW_SCALE_MASK                  0x18
10674  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES2_MAXIMUM_FLOW_SCALE_SHIFT                 0x03
10675  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES2_MAXIMUM_FLOW_PRECISION_MASK              0xE0
10676  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES2_MAXIMUM_FLOW_PRECISION_SHIFT             0x05
10677  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES3_FLOW_HIGH_THRESHOLD_SIZE_MASK            0x07
10678  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES3_FLOW_HIGH_THRESHOLD_SCALE_MASK           0x18
10679  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES3_FLOW_HIGH_THRESHOLD_SCALE_SHIFT          0x03
10680  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES3_FLOW_HIGH_THRESHOLD_PRECISION_MASK       0xE0
10681  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES3_FLOW_HIGH_THRESHOLD_PRECISION_SHIFT      0x05
10682  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES4_FLOW_LOW_THRESHOLD_SIZE_MASK             0x07
10683  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES4_FLOW_LOW_THRESHOLD_SCALE_MASK            0x18
10684  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES4_FLOW_LOW_THRESHOLD_SCALE_SHIFT           0x03
10685  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES4_FLOW_LOW_THRESHOLD_PRECISION_MASK        0xE0
10686  00  =3  #define IRRIGATION_VALVE_CONFIG_SET_PROPERTIES4_FLOW_LOW_THRESHOLD_PRECISION_SHIFT       0x05
10687  00  =3  /* Values used for Irrigation Valve Config Get command */
10688  00  =3  #define IRRIGATION_VALVE_CONFIG_GET_PROPERTIES1_MASTER_VALVE_BIT_MASK                    0x01
10689  00  =3  #define IRRIGATION_VALVE_CONFIG_GET_PROPERTIES1_RESERVED_MASK                            0xFE
10690  00  =3  #define IRRIGATION_VALVE_CONFIG_GET_PROPERTIES1_RESERVED_SHIFT                           0x01
10691  00  =3  /* Values used for Irrigation Valve Config Report command */
10692  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES1_MASTER_VALVE_BIT_MASK                 0x01
10693  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES1_RESERVED_MASK                         0xFE
10694  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES1_RESERVED_SHIFT                        0x01
10695  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES2_MAXIMUM_FLOW_SIZE_MASK                0x07
10696  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES2_MAXIMUM_FLOW_SCALE_MASK               0x18
10697  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES2_MAXIMUM_FLOW_SCALE_SHIFT              0x03
10698  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES2_MAXIMUM_FLOW_PRECISION_MASK           0xE0
10699  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES2_MAXIMUM_FLOW_PRECISION_SHIFT          0x05
10700  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES3_FLOW_HIGH_THRESHOLD_SIZE_MASK         0x07
10701  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES3_FLOW_HIGH_THRESHOLD_SCALE_MASK        0x18
10702  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES3_FLOW_HIGH_THRESHOLD_SCALE_SHIFT       0x03
10703  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES3_FLOW_HIGH_THRESHOLD_PRECISION_MASK    0xE0
10704  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES3_FLOW_HIGH_THRESHOLD_PRECISION_SHIFT   0x05
10705  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES4_FLOW_LOW_THRESHOLD_SIZE_MASK          0x07
10706  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES4_FLOW_LOW_THRESHOLD_SCALE_MASK         0x18
10707  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES4_FLOW_LOW_THRESHOLD_SCALE_SHIFT        0x03
10708  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES4_FLOW_LOW_THRESHOLD_PRECISION_MASK     0xE0
10709  00  =3  #define IRRIGATION_VALVE_CONFIG_REPORT_PROPERTIES4_FLOW_LOW_THRESHOLD_PRECISION_SHIFT    0x05
10710  00  =3  /* Values used for Irrigation Valve Run command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 189 

10711  00  =3  #define IRRIGATION_VALVE_RUN_PROPERTIES1_MASTER_VALVE_BIT_MASK                           0x01
10712  00  =3  #define IRRIGATION_VALVE_RUN_PROPERTIES1_RESERVED_MASK                                   0xFE
10713  00  =3  #define IRRIGATION_VALVE_RUN_PROPERTIES1_RESERVED_SHIFT                                  0x01
10714  00  =3  
10715  00  =3  /* Supervision command class commands */
10716  00  =3  #define SUPERVISION_VERSION                                                              0x01
10717  00  =3  #define SUPERVISION_GET                                                                  0x01
10718  00  =3  #define SUPERVISION_REPORT                                                               0x02
10719  00  =3  /* Values used for Supervision Get command */
10720  00  =3  #define SUPERVISION_GET_PROPERTIES1_SESSION_ID_MASK                                      0x3F
10721  00  =3  #define SUPERVISION_GET_PROPERTIES1_RESERVED_BIT_MASK                                    0x40
10722  00  =3  #define SUPERVISION_GET_PROPERTIES1_STATUS_UPDATES_BIT_MASK                              0x80
10723  00  =3  /* Values used for Supervision Report command */
10724  00  =3  #define SUPERVISION_REPORT_PROPERTIES1_SESSION_ID_MASK                                   0x3F
10725  00  =3  #define SUPERVISION_REPORT_PROPERTIES1_RESERVED_BIT_MASK                                 0x40
10726  00  =3  #define SUPERVISION_REPORT_PROPERTIES1_MORE_STATUS_UPDATES_BIT_MASK                      0x80
10727  00  =3  #define SUPERVISION_REPORT_NO_SUPPORT                                                    0x00
10728  00  =3  #define SUPERVISION_REPORT_WORKING                                                       0x01
10729  00  =3  #define SUPERVISION_REPORT_FAIL                                                          0x02
10730  00  =3  #define SUPERVISION_REPORT_BUSY                                                          0x03
10731  00  =3  #define SUPERVISION_REPORT_SUCCESS                                                       0xFF
10732  00  =3  
10733  00  =3  /* Humidity Control Setpoint command class commands */
10734  00  =3  #define HUMIDITY_CONTROL_SETPOINT_VERSION                                                0x01
10735  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET                                                    0x01
10736  00  =3  #define HUMIDITY_CONTROL_SETPOINT_GET                                                    0x02
10737  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT                                                 0x03
10738  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET                                          0x04
10739  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT                                       0x05
10740  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET                                    0x06
10741  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT                                 0x07
10742  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET                                       0x08
10743  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT                                    0x09
10744  00  =3  /* Values used for Humidity Control Setpoint Set command */
10745  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES1_SETPOINT_TYPE_MASK                     0x0F
10746  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_SETPOINT_TYPE_HUMIDIFIER                           0x01
10747  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_SETPOINT_TYPE_DEHUMIDIFIER                         0x02
10748  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES1_RESERVED_MASK                          0xF0
10749  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES1_RESERVED_SHIFT                         0x04
10750  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES2_SIZE_MASK                              0x07
10751  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES2_SCALE_MASK                             0x18
10752  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES2_SCALE_SHIFT                            0x03
10753  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_SCALE_PERCENTAGE                                   0x00
10754  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_SCALE_ABSOLUTE                                     0x01
10755  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES2_PRECISION_MASK                         0xE0
10756  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SET_PROPERTIES2_PRECISION_SHIFT                        0x05
10757  00  =3  /* Values used for Humidity Control Setpoint Get command */
10758  00  =3  #define HUMIDITY_CONTROL_SETPOINT_GET_PROPERTIES1_SETPOINT_TYPE_MASK                     0x0F
10759  00  =3  #define HUMIDITY_CONTROL_SETPOINT_GET_SETPOINT_TYPE_HUMIDIFIER                           0x01
10760  00  =3  #define HUMIDITY_CONTROL_SETPOINT_GET_SETPOINT_TYPE_DEHUMIDIFIER                         0x02
10761  00  =3  #define HUMIDITY_CONTROL_SETPOINT_GET_PROPERTIES1_RESERVED_MASK                          0xF0
10762  00  =3  #define HUMIDITY_CONTROL_SETPOINT_GET_PROPERTIES1_RESERVED_SHIFT                         0x04
10763  00  =3  /* Values used for Humidity Control Setpoint Report command */
10764  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES1_SETPOINT_TYPE_MASK                  0x0F
10765  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_SETPOINT_TYPE_HUMIDIFIER                        0x01
10766  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_SETPOINT_TYPE_DEHUMIDIFIER                      0x02
10767  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES1_RESERVED_MASK                       0xF0
10768  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES1_RESERVED_SHIFT                      0x04
10769  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES2_SIZE_MASK                           0x07
10770  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES2_SCALE_MASK                          0x18
10771  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES2_SCALE_SHIFT                         0x03
10772  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_SCALE_PERCENTAGE                                0x00
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 190 

10773  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_SCALE_ABSOLUTE                                  0x01
10774  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES2_PRECISION_MASK                      0xE0
10775  00  =3  #define HUMIDITY_CONTROL_SETPOINT_REPORT_PROPERTIES2_PRECISION_SHIFT                     0x05
10776  00  =3  /* Values used for Humidity Control Setpoint Scale Supported Get command */
10777  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_PROPERTIES1_SETPOINT_TYPE_MASK     0x0F
10778  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_SETPOINT_TYPE_HUMIDIFIER           0x01
10779  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_SETPOINT_TYPE_DEHUMIDIFIER         0x02
10780  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_PROPERTIES1_RESERVED_MASK          0xF0
10781  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_PROPERTIES1_RESERVED_SHIFT         0x04
10782  00  =3  /* Values used for Humidity Control Setpoint Scale Supported Report command */
10783  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_PROPERTIES1_SCALE_BIT_MASK_MASK 0x0F
10784  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_SCALE_BIT_MASK_PERCENTAGE       0x00
10785  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_SCALE_BIT_MASK_ABSOLUTE         0x01
10786  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_MASK       0xF0
10787  00  =3  #define HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_PROPERTIES1_RESERVED_SHIFT      0x04
10788  00  =3  /* Values used for Humidity Control Setpoint Capabilities Get command */
10789  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_PROPERTIES1_SETPOINT_TYPE_MASK        0x0F
10790  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_HUMIDIFIER              0x01
10791  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_SETPOINT_TYPE_DEHUMIDIFIER            0x02
10792  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_PROPERTIES1_RESERVED_MASK             0xF0
10793  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_PROPERTIES1_RESERVED_SHIFT            0x04
10794  00  =3  /* Values used for Humidity Control Setpoint Capabilities Report command */
10795  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES1_SETPOINT_TYPE_MASK     0x0F
10796  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_HUMIDIFIER           0x01
10797  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_SETPOINT_TYPE_DEHUMIDIFIER         0x02
10798  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES1_RESERVED_MASK          0xF0
10799  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES1_RESERVED_SHIFT         0x04
10800  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_SIZE1_MASK             0x07
10801  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_SCALE1_MASK            0x18
10802  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_SCALE1_SHIFT           0x03
10803  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_SCALE1_PERCENTAGE                  0x00
10804  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_SCALE1_ABSOLUTE                    0x01
10805  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_PRECISION1_MASK        0xE0
10806  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES2_PRECISION1_SHIFT       0x05
10807  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_SIZE2_MASK             0x07
10808  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_SCALE2_MASK            0x18
10809  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_SCALE2_SHIFT           0x03
10810  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_SCALE2_PERCENTAGE                  0x00
10811  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_SCALE2_ABSOLUTE                    0x01
10812  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_PRECISION2_MASK        0xE0
10813  00  =3  #define HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_PROPERTIES3_PRECISION2_SHIFT       0x05
10814  00  =3  
10815  00  =3  /* Humidity Control Mode command class commands */
10816  00  =3  #define HUMIDITY_CONTROL_MODE_VERSION                                                    0x01
10817  00  =3  #define HUMIDITY_CONTROL_MODE_SET                                                        0x01
10818  00  =3  #define HUMIDITY_CONTROL_MODE_GET                                                        0x02
10819  00  =3  #define HUMIDITY_CONTROL_MODE_REPORT                                                     0x03
10820  00  =3  #define HUMIDITY_CONTROL_MODE_SUPPORTED_GET                                              0x04
10821  00  =3  #define HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT                                           0x05
10822  00  =3  /* Values used for Humidity Control Mode Set command */
10823  00  =3  #define HUMIDITY_CONTROL_MODE_SET_PROPERTIES1_MODE_MASK                                  0x0F
10824  00  =3  #define HUMIDITY_CONTROL_MODE_SET_MODE_OFF                                               0x00
10825  00  =3  #define HUMIDITY_CONTROL_MODE_SET_MODE_HUMIDIFY                                          0x01
10826  00  =3  #define HUMIDITY_CONTROL_MODE_SET_MODE_DEHUMIDIFY                                        0x02
10827  00  =3  #define HUMIDITY_CONTROL_MODE_SET_PROPERTIES1_RESERVED_MASK                              0xF0
10828  00  =3  #define HUMIDITY_CONTROL_MODE_SET_PROPERTIES1_RESERVED_SHIFT                             0x04
10829  00  =3  /* Values used for Humidity Control Mode Report command */
10830  00  =3  #define HUMIDITY_CONTROL_MODE_REPORT_PROPERTIES1_MODE_MASK                               0x0F
10831  00  =3  #define HUMIDITY_CONTROL_MODE_REPORT_MODE_OFF                                            0x00
10832  00  =3  #define HUMIDITY_CONTROL_MODE_REPORT_MODE_HUMIDIFY                                       0x01
10833  00  =3  #define HUMIDITY_CONTROL_MODE_REPORT_MODE_DEHUMIDIFY                                     0x02
10834  00  =3  #define HUMIDITY_CONTROL_MODE_REPORT_PROPERTIES1_RESERVED_MASK                           0xF0
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 191 

10835  00  =3  #define HUMIDITY_CONTROL_MODE_REPORT_PROPERTIES1_RESERVED_SHIFT                          0x04
10836  00  =3  
10837  00  =3  /* Humidity Control Operating State command class commands */
10838  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_VERSION                                         0x01
10839  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_GET                                             0x01
10840  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_REPORT                                          0x02
10841  00  =3  /* Values used for Humidity Control Operating State Report command */
10842  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_REPORT_PROPERTIES1_OPERATING_STATE_MASK         0x0F
10843  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_REPORT_OPERATING_STATE_IDLE                     0x00
10844  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_REPORT_OPERATING_STATE_HUMIDIFYING              0x01
10845  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_REPORT_OPERATING_STATE_DEHUMIDIFYING            0x02
10846  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_REPORT_PROPERTIES1_RESERVED_MASK                0xF0
10847  00  =3  #define HUMIDITY_CONTROL_OPERATING_STATE_REPORT_PROPERTIES1_RESERVED_SHIFT               0x04
10848  00  =3  
10849  00  =3  /* Entry Control command class commands */
10850  00  =3  #define ENTRY_CONTROL_VERSION                                                            0x01
10851  00  =3  #define ENTRY_CONTROL_NOTIFICATION                                                       0x01
10852  00  =3  #define ENTRY_CONTROL_KEY_SUPPORTED_GET                                                  0x02
10853  00  =3  #define ENTRY_CONTROL_KEY_SUPPORTED_REPORT                                               0x03
10854  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_GET                                                0x04
10855  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_REPORT                                             0x05
10856  00  =3  #define ENTRY_CONTROL_CONFIGURATION_SET                                                  0x06
10857  00  =3  #define ENTRY_CONTROL_CONFIGURATION_GET                                                  0x07
10858  00  =3  #define ENTRY_CONTROL_CONFIGURATION_REPORT                                               0x08
10859  00  =3  /* Values used for Entry Control Notification command */
10860  00  =3  #define ENTRY_CONTROL_NOTIFICATION_PROPERTIES1_DATA_TYPE_MASK                            0x03
10861  00  =3  #define ENTRY_CONTROL_NOTIFICATION_DATA_TYPE_NA                                          0x00
10862  00  =3  #define ENTRY_CONTROL_NOTIFICATION_DATA_TYPE_RAW                                         0x01
10863  00  =3  #define ENTRY_CONTROL_NOTIFICATION_DATA_TYPE_ASCII                                       0x02
10864  00  =3  #define ENTRY_CONTROL_NOTIFICATION_DATA_TYPE_MD5                                         0x03
10865  00  =3  #define ENTRY_CONTROL_NOTIFICATION_PROPERTIES1_RESERVED_MASK                             0xFC
10866  00  =3  #define ENTRY_CONTROL_NOTIFICATION_PROPERTIES1_RESERVED_SHIFT                            0x02
10867  00  =3  #define ENTRY_CONTROL_NOTIFICATION_CACHING                                               0x00
10868  00  =3  #define ENTRY_CONTROL_NOTIFICATION_CACHED_KEYS                                           0x01
10869  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ENTER                                                 0x02
10870  00  =3  #define ENTRY_CONTROL_NOTIFICATION_DISARM_ALL                                            0x03
10871  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_ALL                                               0x04
10872  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_AWAY                                              0x05
10873  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_HOME                                              0x06
10874  00  =3  #define ENTRY_CONTROL_NOTIFICATION_EXIT_DELAY                                            0x07
10875  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_1                                                 0x08
10876  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_2                                                 0x09
10877  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_3                                                 0x0A
10878  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_4                                                 0x0B
10879  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_5                                                 0x0C
10880  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ARM_6                                                 0x0D
10881  00  =3  #define ENTRY_CONTROL_NOTIFICATION_RFID                                                  0x0E
10882  00  =3  #define ENTRY_CONTROL_NOTIFICATION_BELL                                                  0x0F
10883  00  =3  #define ENTRY_CONTROL_NOTIFICATION_FIRE                                                  0x10
10884  00  =3  #define ENTRY_CONTROL_NOTIFICATION_POLICE                                                0x11
10885  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ALERT_PANIC                                           0x12
10886  00  =3  #define ENTRY_CONTROL_NOTIFICATION_ALERT_MEDICAL                                         0x13
10887  00  =3  #define ENTRY_CONTROL_NOTIFICATION_GATE_OPEN                                             0x14
10888  00  =3  #define ENTRY_CONTROL_NOTIFICATION_GATE_CLOSE                                            0x15
10889  00  =3  #define ENTRY_CONTROL_NOTIFICATION_LOCK                                                  0x16
10890  00  =3  #define ENTRY_CONTROL_NOTIFICATION_UNLOCK                                                0x17
10891  00  =3  #define ENTRY_CONTROL_NOTIFICATION_TEST                                                  0x18
10892  00  =3  #define ENTRY_CONTROL_NOTIFICATION_CANCEL                                                0x19
10893  00  =3  /* Values used for Entry Control Event Supported Report command */
10894  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_PROPERTIES1_DATA_TYPE_SUPPORTED_BIT_MASK_LENGTH_MASK 0x03
10895  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_MASK                  0xFC
10896  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_PROPERTIES1_RESERVED1_SHIFT                 0x02
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 192 

10897  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_PROPERTIES2_EVENT_SUPPORTED_BIT_MASK_LENGTH_MASK 0x1F
10898  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_MASK                  0xE0
10899  00  =3  #define ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_PROPERTIES2_RESERVED2_SHIFT                 0x05
10900  00  =3  
10901  00  =3  /* Inclusion Controller command class commands */
10902  00  =3  #define INCLUSION_CONTROLLER_VERSION                                                     0x01
10903  00  =3  #define INITIATE                                                                         0x01
10904  00  =3  #define COMPLETE                                                                         0x02
10905  00  =3  /* Values used for Initiate command */
10906  00  =3  #define INITIATE_PROXY_INCLUSION                                                         0x01
10907  00  =3  #define INITIATE_S0_INCLUSION                                                            0x02
10908  00  =3  #define INITIATE_PROXY_INCLUSION_REPLACE                                                 0x03
10909  00  =3  /* Values used for Complete command */
10910  00  =3  #define COMPLETE_PROXY_INCLUSION                                                         0x01
10911  00  =3  #define COMPLETE_S0_INCLUSION                                                            0x02
10912  00  =3  #define COMPLETE_PROXY_INCLUSION_REPLACE                                                 0x03
10913  00  =3  #define COMPLETE_STEP_OK                                                                 0x01
10914  00  =3  #define COMPLETE_STEP_USER_REJECTED                                                      0x02
10915  00  =3  #define COMPLETE_STEP_FAILED                                                             0x03
10916  00  =3  #define COMPLETE_STEP_NOT_SUPPORTED                                                      0x04
10917  00  =3  
10918  00  =3  /* Node Provisioning command class commands */
10919  00  =3  #define NODE_PROVISIONING_VERSION                                                        0x01
10920  00  =3  #define NODE_PROVISION_SET                                                               0x01
10921  00  =3  #define NODE_PROVISION_DELETE                                                            0x02
10922  00  =3  #define NODE_PROVISIONING_LIST_ITERATION_GET                                             0x03
10923  00  =3  #define NODE_PROVISIONING_LIST_ITERATION_REPORT                                          0x04
10924  00  =3  #define NODE_PROVISION_GET                                                               0x05
10925  00  =3  #define NODE_PROVISION_REPORT                                                            0x06
10926  00  =3  /* Values used for Node Provision Set command */
10927  00  =3  #define NODE_PROVISION_SET_PROPERTIES1_DSK_LENGTH_MASK                                   0x1F
10928  00  =3  #define NODE_PROVISION_SET_PROPERTIES1_RESERVED1_MASK                                    0xE0
10929  00  =3  #define NODE_PROVISION_SET_PROPERTIES1_RESERVED1_SHIFT                                   0x05
10930  00  =3  /* Values used for Node Provision Delete command */
10931  00  =3  #define NODE_PROVISION_DELETE_PROPERTIES1_DSK_LENGTH_MASK                                0x1F
10932  00  =3  #define NODE_PROVISION_DELETE_PROPERTIES1_RESERVED1_MASK                                 0xE0
10933  00  =3  #define NODE_PROVISION_DELETE_PROPERTIES1_RESERVED1_SHIFT                                0x05
10934  00  =3  /* Values used for Node Provisioning List Iteration Report command */
10935  00  =3  #define NODE_PROVISIONING_LIST_ITERATION_REPORT_PROPERTIES1_DSK_LENGTH_MASK              0x1F
10936  00  =3  #define NODE_PROVISIONING_LIST_ITERATION_REPORT_PROPERTIES1_RESERVED1_MASK               0xE0
10937  00  =3  #define NODE_PROVISIONING_LIST_ITERATION_REPORT_PROPERTIES1_RESERVED1_SHIFT              0x05
10938  00  =3  /* Values used for Node Provision Get command */
10939  00  =3  #define NODE_PROVISION_GET_PROPERTIES1_DSK_LENGTH_MASK                                   0x1F
10940  00  =3  #define NODE_PROVISION_GET_PROPERTIES1_RESERVED1_MASK                                    0xE0
10941  00  =3  #define NODE_PROVISION_GET_PROPERTIES1_RESERVED1_SHIFT                                   0x05
10942  00  =3  /* Values used for Node Provision Report command */
10943  00  =3  #define NODE_PROVISION_REPORT_PROPERTIES1_DSK_LENGTH_MASK                                0x1F
10944  00  =3  #define NODE_PROVISION_REPORT_PROPERTIES1_RESERVED_MASK                                  0xE0
10945  00  =3  #define NODE_PROVISION_REPORT_PROPERTIES1_RESERVED_SHIFT                                 0x05
10946  00  =3  
10947  00  =3  
10948  00  =3  
10949  00  =3  /* Max. frame size to allow routing over 4 hops */
10950  00  =3  #define META_DATA_MAX_DATA_SIZE                      48
10951  00  =3  
10952  00  =3  /************************************************************/
10953  00  =3  /* Structs and unions that can be used by the application   */
10954  00  =3  /* to construct the frames to be sent                       */
10955  00  =3  /************************************************************/
10956  00  =3  
10957  00  =3  /************************************************************/
10958  00  =3  /* Common for all command classes                           */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 193 

10959  00  =3  /************************************************************/
10960  00  =3  typedef struct _ZW_COMMON_FRAME_
10961  00  =3  {
10962  00  =3    BYTE        cmdClass;  /* The command class */
10963  00  =3    BYTE        cmd;       /* The command */
10964  00  =3  } ZW_COMMON_FRAME;
10965  00  =3  
10966  00  =3  /************************************************************/
10967  00  =3  /* Alarm Get command class structs */                       
10968  00  =3  /************************************************************/
10969  00  =3  typedef struct _ZW_ALARM_GET_FRAME_
10970  00  =3  {
10971  00  =3      BYTE      cmdClass;                     /* The command class */
10972  00  =3      BYTE      cmd;                          /* The command */
10973  00  =3      BYTE      alarmType;                    /**/
10974  00  =3  } ZW_ALARM_GET_FRAME;
10975  00  =3  
10976  00  =3  /************************************************************/
10977  00  =3  /* Alarm Report command class structs */                    
10978  00  =3  /************************************************************/
10979  00  =3  typedef struct _ZW_ALARM_REPORT_FRAME_
10980  00  =3  {
10981  00  =3      BYTE      cmdClass;                     /* The command class */
10982  00  =3      BYTE      cmd;                          /* The command */
10983  00  =3      BYTE      alarmType;                    /**/
10984  00  =3      BYTE      alarmLevel;                   /**/
10985  00  =3  } ZW_ALARM_REPORT_FRAME;
10986  00  =3  
10987  00  =3  /************************************************************/
10988  00  =3  /* Alarm Get V2 command class structs */                    
10989  00  =3  /************************************************************/
10990  00  =3  typedef struct _ZW_ALARM_GET_V2_FRAME_
10991  00  =3  {
10992  00  =3      BYTE      cmdClass;                     /* The command class */
10993  00  =3      BYTE      cmd;                          /* The command */
10994  00  =3      BYTE      alarmType;                    /**/
10995  00  =3      BYTE      zwaveAlarmType;               /**/
10996  00  =3  } ZW_ALARM_GET_V2_FRAME;
10997  00  =3  
10998  00  =3  /************************************************************/
10999  00  =3  /* Alarm Report 1byte V2 command class structs */           
11000  00  =3  /************************************************************/
11001  00  =3  typedef struct _ZW_ALARM_REPORT_1BYTE_V2_FRAME_
11002  00  =3  {
11003  00  =3      BYTE      cmdClass;                     /* The command class */
11004  00  =3      BYTE      cmd;                          /* The command */
11005  00  =3      BYTE      alarmType;                    /**/
11006  00  =3      BYTE      alarmLevel;                   /**/
11007  00  =3      BYTE      zensorNetSourceNodeId;        /**/
11008  00  =3      BYTE      zwaveAlarmStatus;             /**/
11009  00  =3      BYTE      zwaveAlarmType;               /**/
11010  00  =3      BYTE      zwaveAlarmEvent;              /**/
11011  00  =3      BYTE      numberOfEventParameters;      /**/
11012  00  =3      BYTE      eventParameter1;              
11013  00  =3  } ZW_ALARM_REPORT_1BYTE_V2_FRAME;
11014  00  =3  
11015  00  =3  /************************************************************/
11016  00  =3  /* Alarm Report 2byte V2 command class structs */           
11017  00  =3  /************************************************************/
11018  00  =3  typedef struct _ZW_ALARM_REPORT_2BYTE_V2_FRAME_
11019  00  =3  {
11020  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 194 

11021  00  =3      BYTE      cmd;                          /* The command */
11022  00  =3      BYTE      alarmType;                    /**/
11023  00  =3      BYTE      alarmLevel;                   /**/
11024  00  =3      BYTE      zensorNetSourceNodeId;        /**/
11025  00  =3      BYTE      zwaveAlarmStatus;             /**/
11026  00  =3      BYTE      zwaveAlarmType;               /**/
11027  00  =3      BYTE      zwaveAlarmEvent;              /**/
11028  00  =3      BYTE      numberOfEventParameters;      /**/
11029  00  =3      BYTE      eventParameter1;              /* MSB */
11030  00  =3      BYTE      eventParameter2;              /* LSB */
11031  00  =3  } ZW_ALARM_REPORT_2BYTE_V2_FRAME;
11032  00  =3  
11033  00  =3  /************************************************************/
11034  00  =3  /* Alarm Report 3byte V2 command class structs */           
11035  00  =3  /************************************************************/
11036  00  =3  typedef struct _ZW_ALARM_REPORT_3BYTE_V2_FRAME_
11037  00  =3  {
11038  00  =3      BYTE      cmdClass;                     /* The command class */
11039  00  =3      BYTE      cmd;                          /* The command */
11040  00  =3      BYTE      alarmType;                    /**/
11041  00  =3      BYTE      alarmLevel;                   /**/
11042  00  =3      BYTE      zensorNetSourceNodeId;        /**/
11043  00  =3      BYTE      zwaveAlarmStatus;             /**/
11044  00  =3      BYTE      zwaveAlarmType;               /**/
11045  00  =3      BYTE      zwaveAlarmEvent;              /**/
11046  00  =3      BYTE      numberOfEventParameters;      /**/
11047  00  =3      BYTE      eventParameter1;              /* MSB */
11048  00  =3      BYTE      eventParameter2;              
11049  00  =3      BYTE      eventParameter3;              /* LSB */
11050  00  =3  } ZW_ALARM_REPORT_3BYTE_V2_FRAME;
11051  00  =3  
11052  00  =3  /************************************************************/
11053  00  =3  /* Alarm Report 4byte V2 command class structs */           
11054  00  =3  /************************************************************/
11055  00  =3  typedef struct _ZW_ALARM_REPORT_4BYTE_V2_FRAME_
11056  00  =3  {
11057  00  =3      BYTE      cmdClass;                     /* The command class */
11058  00  =3      BYTE      cmd;                          /* The command */
11059  00  =3      BYTE      alarmType;                    /**/
11060  00  =3      BYTE      alarmLevel;                   /**/
11061  00  =3      BYTE      zensorNetSourceNodeId;        /**/
11062  00  =3      BYTE      zwaveAlarmStatus;             /**/
11063  00  =3      BYTE      zwaveAlarmType;               /**/
11064  00  =3      BYTE      zwaveAlarmEvent;              /**/
11065  00  =3      BYTE      numberOfEventParameters;      /**/
11066  00  =3      BYTE      eventParameter1;              /* MSB */
11067  00  =3      BYTE      eventParameter2;              
11068  00  =3      BYTE      eventParameter3;              
11069  00  =3      BYTE      eventParameter4;              /* LSB */
11070  00  =3  } ZW_ALARM_REPORT_4BYTE_V2_FRAME;
11071  00  =3  
11072  00  =3  /************************************************************/
11073  00  =3  /* Alarm Set V2 command class structs */                    
11074  00  =3  /************************************************************/
11075  00  =3  typedef struct _ZW_ALARM_SET_V2_FRAME_
11076  00  =3  {
11077  00  =3      BYTE      cmdClass;                     /* The command class */
11078  00  =3      BYTE      cmd;                          /* The command */
11079  00  =3      BYTE      zwaveAlarmType;               /**/
11080  00  =3      BYTE      zwaveAlarmStatus;             /**/
11081  00  =3  } ZW_ALARM_SET_V2_FRAME;
11082  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 195 

11083  00  =3  /************************************************************/
11084  00  =3  /* Alarm Type Supported Get V2 command class structs */     
11085  00  =3  /************************************************************/
11086  00  =3  typedef struct _ZW_ALARM_TYPE_SUPPORTED_GET_V2_FRAME_
11087  00  =3  {
11088  00  =3      BYTE      cmdClass;                     /* The command class */
11089  00  =3      BYTE      cmd;                          /* The command */
11090  00  =3  } ZW_ALARM_TYPE_SUPPORTED_GET_V2_FRAME;
11091  00  =3  
11092  00  =3  /************************************************************/
11093  00  =3  /* Alarm Type Supported Report 1byte V2 command class structs */
11094  00  =3  /************************************************************/
11095  00  =3  typedef struct _ZW_ALARM_TYPE_SUPPORTED_REPORT_1BYTE_V2_FRAME_
11096  00  =3  {
11097  00  =3      BYTE      cmdClass;                     /* The command class */
11098  00  =3      BYTE      cmd;                          /* The command */
11099  00  =3      BYTE      properties1;                  /* masked byte */
11100  00  =3      BYTE      bitMask1;                     
11101  00  =3  } ZW_ALARM_TYPE_SUPPORTED_REPORT_1BYTE_V2_FRAME;
11102  00  =3  
11103  00  =3  /************************************************************/
11104  00  =3  /* Alarm Type Supported Report 2byte V2 command class structs */
11105  00  =3  /************************************************************/
11106  00  =3  typedef struct _ZW_ALARM_TYPE_SUPPORTED_REPORT_2BYTE_V2_FRAME_
11107  00  =3  {
11108  00  =3      BYTE      cmdClass;                     /* The command class */
11109  00  =3      BYTE      cmd;                          /* The command */
11110  00  =3      BYTE      properties1;                  /* masked byte */
11111  00  =3      BYTE      bitMask1;                     /* MSB */
11112  00  =3      BYTE      bitMask2;                     /* LSB */
11113  00  =3  } ZW_ALARM_TYPE_SUPPORTED_REPORT_2BYTE_V2_FRAME;
11114  00  =3  
11115  00  =3  /************************************************************/
11116  00  =3  /* Alarm Type Supported Report 3byte V2 command class structs */
11117  00  =3  /************************************************************/
11118  00  =3  typedef struct _ZW_ALARM_TYPE_SUPPORTED_REPORT_3BYTE_V2_FRAME_
11119  00  =3  {
11120  00  =3      BYTE      cmdClass;                     /* The command class */
11121  00  =3      BYTE      cmd;                          /* The command */
11122  00  =3      BYTE      properties1;                  /* masked byte */
11123  00  =3      BYTE      bitMask1;                     /* MSB */
11124  00  =3      BYTE      bitMask2;                     
11125  00  =3      BYTE      bitMask3;                     /* LSB */
11126  00  =3  } ZW_ALARM_TYPE_SUPPORTED_REPORT_3BYTE_V2_FRAME;
11127  00  =3  
11128  00  =3  /************************************************************/
11129  00  =3  /* Alarm Type Supported Report 4byte V2 command class structs */
11130  00  =3  /************************************************************/
11131  00  =3  typedef struct _ZW_ALARM_TYPE_SUPPORTED_REPORT_4BYTE_V2_FRAME_
11132  00  =3  {
11133  00  =3      BYTE      cmdClass;                     /* The command class */
11134  00  =3      BYTE      cmd;                          /* The command */
11135  00  =3      BYTE      properties1;                  /* masked byte */
11136  00  =3      BYTE      bitMask1;                     /* MSB */
11137  00  =3      BYTE      bitMask2;                     
11138  00  =3      BYTE      bitMask3;                     
11139  00  =3      BYTE      bitMask4;                     /* LSB */
11140  00  =3  } ZW_ALARM_TYPE_SUPPORTED_REPORT_4BYTE_V2_FRAME;
11141  00  =3  
11142  00  =3  /************************************************************/
11143  00  =3  /* Notification Get V3 command class structs */             
11144  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 196 

11145  00  =3  typedef struct _ZW_NOTIFICATION_GET_V3_FRAME_
11146  00  =3  {
11147  00  =3      BYTE      cmdClass;                     /* The command class */
11148  00  =3      BYTE      cmd;                          /* The command */
11149  00  =3      BYTE      v1AlarmType;                  /**/
11150  00  =3      BYTE      notificationType;             /**/
11151  00  =3      BYTE      mevent;                       /**/
11152  00  =3  } ZW_NOTIFICATION_GET_V3_FRAME;
11153  00  =3  
11154  00  =3  /************************************************************/
11155  00  =3  /* Notification Report 1byte V3 command class structs */    
11156  00  =3  /************************************************************/
11157  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_1BYTE_V3_FRAME_
11158  00  =3  {
11159  00  =3      BYTE      cmdClass;                     /* The command class */
11160  00  =3      BYTE      cmd;                          /* The command */
11161  00  =3      BYTE      v1AlarmType;                  /**/
11162  00  =3      BYTE      v1AlarmLevel;                 /**/
11163  00  =3      BYTE      reserved;                     /**/
11164  00  =3      BYTE      notificationStatus;           /**/
11165  00  =3      BYTE      notificationType;             /**/
11166  00  =3      BYTE      mevent;                       /**/
11167  00  =3      BYTE      properties1;                  /* masked byte */
11168  00  =3      BYTE      eventParameter1;              
11169  00  =3      BYTE      sequenceNumber;               /**/
11170  00  =3  } ZW_NOTIFICATION_REPORT_1BYTE_V3_FRAME;
11171  00  =3  
11172  00  =3  /************************************************************/
11173  00  =3  /* Notification Report 2byte V3 command class structs */    
11174  00  =3  /************************************************************/
11175  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_2BYTE_V3_FRAME_
11176  00  =3  {
11177  00  =3      BYTE      cmdClass;                     /* The command class */
11178  00  =3      BYTE      cmd;                          /* The command */
11179  00  =3      BYTE      v1AlarmType;                  /**/
11180  00  =3      BYTE      v1AlarmLevel;                 /**/
11181  00  =3      BYTE      reserved;                     /**/
11182  00  =3      BYTE      notificationStatus;           /**/
11183  00  =3      BYTE      notificationType;             /**/
11184  00  =3      BYTE      mevent;                       /**/
11185  00  =3      BYTE      properties1;                  /* masked byte */
11186  00  =3      BYTE      eventParameter1;              /* MSB */
11187  00  =3      BYTE      eventParameter2;              /* LSB */
11188  00  =3      BYTE      sequenceNumber;               /**/
11189  00  =3  } ZW_NOTIFICATION_REPORT_2BYTE_V3_FRAME;
11190  00  =3  
11191  00  =3  /************************************************************/
11192  00  =3  /* Notification Report 3byte V3 command class structs */    
11193  00  =3  /************************************************************/
11194  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_3BYTE_V3_FRAME_
11195  00  =3  {
11196  00  =3      BYTE      cmdClass;                     /* The command class */
11197  00  =3      BYTE      cmd;                          /* The command */
11198  00  =3      BYTE      v1AlarmType;                  /**/
11199  00  =3      BYTE      v1AlarmLevel;                 /**/
11200  00  =3      BYTE      reserved;                     /**/
11201  00  =3      BYTE      notificationStatus;           /**/
11202  00  =3      BYTE      notificationType;             /**/
11203  00  =3      BYTE      mevent;                       /**/
11204  00  =3      BYTE      properties1;                  /* masked byte */
11205  00  =3      BYTE      eventParameter1;              /* MSB */
11206  00  =3      BYTE      eventParameter2;              
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 197 

11207  00  =3      BYTE      eventParameter3;              /* LSB */
11208  00  =3      BYTE      sequenceNumber;               /**/
11209  00  =3  } ZW_NOTIFICATION_REPORT_3BYTE_V3_FRAME;
11210  00  =3  
11211  00  =3  /************************************************************/
11212  00  =3  /* Notification Report 4byte V3 command class structs */    
11213  00  =3  /************************************************************/
11214  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_4BYTE_V3_FRAME_
11215  00  =3  {
11216  00  =3      BYTE      cmdClass;                     /* The command class */
11217  00  =3      BYTE      cmd;                          /* The command */
11218  00  =3      BYTE      v1AlarmType;                  /**/
11219  00  =3      BYTE      v1AlarmLevel;                 /**/
11220  00  =3      BYTE      reserved;                     /**/
11221  00  =3      BYTE      notificationStatus;           /**/
11222  00  =3      BYTE      notificationType;             /**/
11223  00  =3      BYTE      mevent;                       /**/
11224  00  =3      BYTE      properties1;                  /* masked byte */
11225  00  =3      BYTE      eventParameter1;              /* MSB */
11226  00  =3      BYTE      eventParameter2;              
11227  00  =3      BYTE      eventParameter3;              
11228  00  =3      BYTE      eventParameter4;              /* LSB */
11229  00  =3      BYTE      sequenceNumber;               /**/
11230  00  =3  } ZW_NOTIFICATION_REPORT_4BYTE_V3_FRAME;
11231  00  =3  
11232  00  =3  /************************************************************/
11233  00  =3  /* Notification Set V3 command class structs */             
11234  00  =3  /************************************************************/
11235  00  =3  typedef struct _ZW_NOTIFICATION_SET_V3_FRAME_
11236  00  =3  {
11237  00  =3      BYTE      cmdClass;                     /* The command class */
11238  00  =3      BYTE      cmd;                          /* The command */
11239  00  =3      BYTE      notificationType;             /**/
11240  00  =3      BYTE      notificationStatus;           /**/
11241  00  =3  } ZW_NOTIFICATION_SET_V3_FRAME;
11242  00  =3  
11243  00  =3  /************************************************************/
11244  00  =3  /* Notification Supported Get V3 command class structs */   
11245  00  =3  /************************************************************/
11246  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_GET_V3_FRAME_
11247  00  =3  {
11248  00  =3      BYTE      cmdClass;                     /* The command class */
11249  00  =3      BYTE      cmd;                          /* The command */
11250  00  =3  } ZW_NOTIFICATION_SUPPORTED_GET_V3_FRAME;
11251  00  =3  
11252  00  =3  /************************************************************/
11253  00  =3  /* Notification Supported Report 1byte V3 command class structs */
11254  00  =3  /************************************************************/
11255  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V3_FRAME_
11256  00  =3  {
11257  00  =3      BYTE      cmdClass;                     /* The command class */
11258  00  =3      BYTE      cmd;                          /* The command */
11259  00  =3      BYTE      properties1;                  /* masked byte */
11260  00  =3      BYTE      bitMask1;                     
11261  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V3_FRAME;
11262  00  =3  
11263  00  =3  /************************************************************/
11264  00  =3  /* Notification Supported Report 2byte V3 command class structs */
11265  00  =3  /************************************************************/
11266  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V3_FRAME_
11267  00  =3  {
11268  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 198 

11269  00  =3      BYTE      cmd;                          /* The command */
11270  00  =3      BYTE      properties1;                  /* masked byte */
11271  00  =3      BYTE      bitMask1;                     /* MSB */
11272  00  =3      BYTE      bitMask2;                     /* LSB */
11273  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V3_FRAME;
11274  00  =3  
11275  00  =3  /************************************************************/
11276  00  =3  /* Notification Supported Report 3byte V3 command class structs */
11277  00  =3  /************************************************************/
11278  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V3_FRAME_
11279  00  =3  {
11280  00  =3      BYTE      cmdClass;                     /* The command class */
11281  00  =3      BYTE      cmd;                          /* The command */
11282  00  =3      BYTE      properties1;                  /* masked byte */
11283  00  =3      BYTE      bitMask1;                     /* MSB */
11284  00  =3      BYTE      bitMask2;                     
11285  00  =3      BYTE      bitMask3;                     /* LSB */
11286  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V3_FRAME;
11287  00  =3  
11288  00  =3  /************************************************************/
11289  00  =3  /* Notification Supported Report 4byte V3 command class structs */
11290  00  =3  /************************************************************/
11291  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V3_FRAME_
11292  00  =3  {
11293  00  =3      BYTE      cmdClass;                     /* The command class */
11294  00  =3      BYTE      cmd;                          /* The command */
11295  00  =3      BYTE      properties1;                  /* masked byte */
11296  00  =3      BYTE      bitMask1;                     /* MSB */
11297  00  =3      BYTE      bitMask2;                     
11298  00  =3      BYTE      bitMask3;                     
11299  00  =3      BYTE      bitMask4;                     /* LSB */
11300  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V3_FRAME;
11301  00  =3  
11302  00  =3  /************************************************************/
11303  00  =3  /* Event Supported Get V3 command class structs */          
11304  00  =3  /************************************************************/
11305  00  =3  typedef struct _ZW_EVENT_SUPPORTED_GET_V3_FRAME_
11306  00  =3  {
11307  00  =3      BYTE      cmdClass;                     /* The command class */
11308  00  =3      BYTE      cmd;                          /* The command */
11309  00  =3      BYTE      notificationType;             /**/
11310  00  =3  } ZW_EVENT_SUPPORTED_GET_V3_FRAME;
11311  00  =3  
11312  00  =3  /************************************************************/
11313  00  =3  /* Event Supported Report 1byte V3 command class structs */ 
11314  00  =3  /************************************************************/
11315  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_1BYTE_V3_FRAME_
11316  00  =3  {
11317  00  =3      BYTE      cmdClass;                     /* The command class */
11318  00  =3      BYTE      cmd;                          /* The command */
11319  00  =3      BYTE      notificationType;             /**/
11320  00  =3      BYTE      properties1;                  /* masked byte */
11321  00  =3      BYTE      bitMask1;                     
11322  00  =3  } ZW_EVENT_SUPPORTED_REPORT_1BYTE_V3_FRAME;
11323  00  =3  
11324  00  =3  /************************************************************/
11325  00  =3  /* Event Supported Report 2byte V3 command class structs */ 
11326  00  =3  /************************************************************/
11327  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_2BYTE_V3_FRAME_
11328  00  =3  {
11329  00  =3      BYTE      cmdClass;                     /* The command class */
11330  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 199 

11331  00  =3      BYTE      notificationType;             /**/
11332  00  =3      BYTE      properties1;                  /* masked byte */
11333  00  =3      BYTE      bitMask1;                     /* MSB */
11334  00  =3      BYTE      bitMask2;                     /* LSB */
11335  00  =3  } ZW_EVENT_SUPPORTED_REPORT_2BYTE_V3_FRAME;
11336  00  =3  
11337  00  =3  /************************************************************/
11338  00  =3  /* Event Supported Report 3byte V3 command class structs */ 
11339  00  =3  /************************************************************/
11340  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_3BYTE_V3_FRAME_
11341  00  =3  {
11342  00  =3      BYTE      cmdClass;                     /* The command class */
11343  00  =3      BYTE      cmd;                          /* The command */
11344  00  =3      BYTE      notificationType;             /**/
11345  00  =3      BYTE      properties1;                  /* masked byte */
11346  00  =3      BYTE      bitMask1;                     /* MSB */
11347  00  =3      BYTE      bitMask2;                     
11348  00  =3      BYTE      bitMask3;                     /* LSB */
11349  00  =3  } ZW_EVENT_SUPPORTED_REPORT_3BYTE_V3_FRAME;
11350  00  =3  
11351  00  =3  /************************************************************/
11352  00  =3  /* Event Supported Report 4byte V3 command class structs */ 
11353  00  =3  /************************************************************/
11354  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_4BYTE_V3_FRAME_
11355  00  =3  {
11356  00  =3      BYTE      cmdClass;                     /* The command class */
11357  00  =3      BYTE      cmd;                          /* The command */
11358  00  =3      BYTE      notificationType;             /**/
11359  00  =3      BYTE      properties1;                  /* masked byte */
11360  00  =3      BYTE      bitMask1;                     /* MSB */
11361  00  =3      BYTE      bitMask2;                     
11362  00  =3      BYTE      bitMask3;                     
11363  00  =3      BYTE      bitMask4;                     /* LSB */
11364  00  =3  } ZW_EVENT_SUPPORTED_REPORT_4BYTE_V3_FRAME;
11365  00  =3  
11366  00  =3  /************************************************************/
11367  00  =3  /* Notification Get V4 command class structs */             
11368  00  =3  /************************************************************/
11369  00  =3  typedef struct _ZW_NOTIFICATION_GET_V4_FRAME_
11370  00  =3  {
11371  00  =3      BYTE      cmdClass;                     /* The command class */
11372  00  =3      BYTE      cmd;                          /* The command */
11373  00  =3      BYTE      v1AlarmType;                  /**/
11374  00  =3      BYTE      notificationType;             /**/
11375  00  =3      BYTE      mevent;                       /**/
11376  00  =3  } ZW_NOTIFICATION_GET_V4_FRAME;
11377  00  =3  
11378  00  =3  /************************************************************/
11379  00  =3  /* Notification Report 1byte V4 command class structs */    
11380  00  =3  /************************************************************/
11381  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_1BYTE_V4_FRAME_
11382  00  =3  {
11383  00  =3      BYTE      cmdClass;                     /* The command class */
11384  00  =3      BYTE      cmd;                          /* The command */
11385  00  =3      BYTE      v1AlarmType;                  /**/
11386  00  =3      BYTE      v1AlarmLevel;                 /**/
11387  00  =3      BYTE      reserved;                     /**/
11388  00  =3      BYTE      notificationStatus;           /**/
11389  00  =3      BYTE      notificationType;             /**/
11390  00  =3      BYTE      mevent;                       /**/
11391  00  =3      BYTE      properties1;                  /* masked byte */
11392  00  =3      BYTE      eventParameter1;              
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 200 

11393  00  =3      BYTE      sequenceNumber;               /**/
11394  00  =3  } ZW_NOTIFICATION_REPORT_1BYTE_V4_FRAME;
11395  00  =3  
11396  00  =3  /************************************************************/
11397  00  =3  /* Notification Report 2byte V4 command class structs */    
11398  00  =3  /************************************************************/
11399  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_2BYTE_V4_FRAME_
11400  00  =3  {
11401  00  =3      BYTE      cmdClass;                     /* The command class */
11402  00  =3      BYTE      cmd;                          /* The command */
11403  00  =3      BYTE      v1AlarmType;                  /**/
11404  00  =3      BYTE      v1AlarmLevel;                 /**/
11405  00  =3      BYTE      reserved;                     /**/
11406  00  =3      BYTE      notificationStatus;           /**/
11407  00  =3      BYTE      notificationType;             /**/
11408  00  =3      BYTE      mevent;                       /**/
11409  00  =3      BYTE      properties1;                  /* masked byte */
11410  00  =3      BYTE      eventParameter1;              /* MSB */
11411  00  =3      BYTE      eventParameter2;              /* LSB */
11412  00  =3      BYTE      sequenceNumber;               /**/
11413  00  =3  } ZW_NOTIFICATION_REPORT_2BYTE_V4_FRAME;
11414  00  =3  
11415  00  =3  /************************************************************/
11416  00  =3  /* Notification Report 3byte V4 command class structs */    
11417  00  =3  /************************************************************/
11418  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_3BYTE_V4_FRAME_
11419  00  =3  {
11420  00  =3      BYTE      cmdClass;                     /* The command class */
11421  00  =3      BYTE      cmd;                          /* The command */
11422  00  =3      BYTE      v1AlarmType;                  /**/
11423  00  =3      BYTE      v1AlarmLevel;                 /**/
11424  00  =3      BYTE      reserved;                     /**/
11425  00  =3      BYTE      notificationStatus;           /**/
11426  00  =3      BYTE      notificationType;             /**/
11427  00  =3      BYTE      mevent;                       /**/
11428  00  =3      BYTE      properties1;                  /* masked byte */
11429  00  =3      BYTE      eventParameter1;              /* MSB */
11430  00  =3      BYTE      eventParameter2;              
11431  00  =3      BYTE      eventParameter3;              /* LSB */
11432  00  =3      BYTE      sequenceNumber;               /**/
11433  00  =3  } ZW_NOTIFICATION_REPORT_3BYTE_V4_FRAME;
11434  00  =3  
11435  00  =3  /************************************************************/
11436  00  =3  /* Notification Report 4byte V4 command class structs */    
11437  00  =3  /************************************************************/
11438  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_4BYTE_V4_FRAME_
11439  00  =3  {
11440  00  =3      BYTE      cmdClass;                     /* The command class */
11441  00  =3      BYTE      cmd;                          /* The command */
11442  00  =3      BYTE      v1AlarmType;                  /**/
11443  00  =3      BYTE      v1AlarmLevel;                 /**/
11444  00  =3      BYTE      reserved;                     /**/
11445  00  =3      BYTE      notificationStatus;           /**/
11446  00  =3      BYTE      notificationType;             /**/
11447  00  =3      BYTE      mevent;                       /**/
11448  00  =3      BYTE      properties1;                  /* masked byte */
11449  00  =3      BYTE      eventParameter1;              /* MSB */
11450  00  =3      BYTE      eventParameter2;              
11451  00  =3      BYTE      eventParameter3;              
11452  00  =3      BYTE      eventParameter4;              /* LSB */
11453  00  =3      BYTE      sequenceNumber;               /**/
11454  00  =3  } ZW_NOTIFICATION_REPORT_4BYTE_V4_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 201 

11455  00  =3  
11456  00  =3  /************************************************************/
11457  00  =3  /* Notification Set V4 command class structs */             
11458  00  =3  /************************************************************/
11459  00  =3  typedef struct _ZW_NOTIFICATION_SET_V4_FRAME_
11460  00  =3  {
11461  00  =3      BYTE      cmdClass;                     /* The command class */
11462  00  =3      BYTE      cmd;                          /* The command */
11463  00  =3      BYTE      notificationType;             /**/
11464  00  =3      BYTE      notificationStatus;           /**/
11465  00  =3  } ZW_NOTIFICATION_SET_V4_FRAME;
11466  00  =3  
11467  00  =3  /************************************************************/
11468  00  =3  /* Notification Supported Get V4 command class structs */   
11469  00  =3  /************************************************************/
11470  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_GET_V4_FRAME_
11471  00  =3  {
11472  00  =3      BYTE      cmdClass;                     /* The command class */
11473  00  =3      BYTE      cmd;                          /* The command */
11474  00  =3  } ZW_NOTIFICATION_SUPPORTED_GET_V4_FRAME;
11475  00  =3  
11476  00  =3  /************************************************************/
11477  00  =3  /* Notification Supported Report 1byte V4 command class structs */
11478  00  =3  /************************************************************/
11479  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V4_FRAME_
11480  00  =3  {
11481  00  =3      BYTE      cmdClass;                     /* The command class */
11482  00  =3      BYTE      cmd;                          /* The command */
11483  00  =3      BYTE      properties1;                  /* masked byte */
11484  00  =3      BYTE      bitMask1;                     
11485  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V4_FRAME;
11486  00  =3  
11487  00  =3  /************************************************************/
11488  00  =3  /* Notification Supported Report 2byte V4 command class structs */
11489  00  =3  /************************************************************/
11490  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V4_FRAME_
11491  00  =3  {
11492  00  =3      BYTE      cmdClass;                     /* The command class */
11493  00  =3      BYTE      cmd;                          /* The command */
11494  00  =3      BYTE      properties1;                  /* masked byte */
11495  00  =3      BYTE      bitMask1;                     /* MSB */
11496  00  =3      BYTE      bitMask2;                     /* LSB */
11497  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V4_FRAME;
11498  00  =3  
11499  00  =3  /************************************************************/
11500  00  =3  /* Notification Supported Report 3byte V4 command class structs */
11501  00  =3  /************************************************************/
11502  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V4_FRAME_
11503  00  =3  {
11504  00  =3      BYTE      cmdClass;                     /* The command class */
11505  00  =3      BYTE      cmd;                          /* The command */
11506  00  =3      BYTE      properties1;                  /* masked byte */
11507  00  =3      BYTE      bitMask1;                     /* MSB */
11508  00  =3      BYTE      bitMask2;                     
11509  00  =3      BYTE      bitMask3;                     /* LSB */
11510  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V4_FRAME;
11511  00  =3  
11512  00  =3  /************************************************************/
11513  00  =3  /* Notification Supported Report 4byte V4 command class structs */
11514  00  =3  /************************************************************/
11515  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V4_FRAME_
11516  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 202 

11517  00  =3      BYTE      cmdClass;                     /* The command class */
11518  00  =3      BYTE      cmd;                          /* The command */
11519  00  =3      BYTE      properties1;                  /* masked byte */
11520  00  =3      BYTE      bitMask1;                     /* MSB */
11521  00  =3      BYTE      bitMask2;                     
11522  00  =3      BYTE      bitMask3;                     
11523  00  =3      BYTE      bitMask4;                     /* LSB */
11524  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V4_FRAME;
11525  00  =3  
11526  00  =3  /************************************************************/
11527  00  =3  /* Event Supported Get V4 command class structs */          
11528  00  =3  /************************************************************/
11529  00  =3  typedef struct _ZW_EVENT_SUPPORTED_GET_V4_FRAME_
11530  00  =3  {
11531  00  =3      BYTE      cmdClass;                     /* The command class */
11532  00  =3      BYTE      cmd;                          /* The command */
11533  00  =3      BYTE      notificationType;             /**/
11534  00  =3  } ZW_EVENT_SUPPORTED_GET_V4_FRAME;
11535  00  =3  
11536  00  =3  /************************************************************/
11537  00  =3  /* Event Supported Report 1byte V4 command class structs */ 
11538  00  =3  /************************************************************/
11539  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_1BYTE_V4_FRAME_
11540  00  =3  {
11541  00  =3      BYTE      cmdClass;                     /* The command class */
11542  00  =3      BYTE      cmd;                          /* The command */
11543  00  =3      BYTE      notificationType;             /**/
11544  00  =3      BYTE      properties1;                  /* masked byte */
11545  00  =3      BYTE      bitMask1;                     
11546  00  =3  } ZW_EVENT_SUPPORTED_REPORT_1BYTE_V4_FRAME;
11547  00  =3  
11548  00  =3  /************************************************************/
11549  00  =3  /* Event Supported Report 2byte V4 command class structs */ 
11550  00  =3  /************************************************************/
11551  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_2BYTE_V4_FRAME_
11552  00  =3  {
11553  00  =3      BYTE      cmdClass;                     /* The command class */
11554  00  =3      BYTE      cmd;                          /* The command */
11555  00  =3      BYTE      notificationType;             /**/
11556  00  =3      BYTE      properties1;                  /* masked byte */
11557  00  =3      BYTE      bitMask1;                     /* MSB */
11558  00  =3      BYTE      bitMask2;                     /* LSB */
11559  00  =3  } ZW_EVENT_SUPPORTED_REPORT_2BYTE_V4_FRAME;
11560  00  =3  
11561  00  =3  /************************************************************/
11562  00  =3  /* Event Supported Report 3byte V4 command class structs */ 
11563  00  =3  /************************************************************/
11564  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_3BYTE_V4_FRAME_
11565  00  =3  {
11566  00  =3      BYTE      cmdClass;                     /* The command class */
11567  00  =3      BYTE      cmd;                          /* The command */
11568  00  =3      BYTE      notificationType;             /**/
11569  00  =3      BYTE      properties1;                  /* masked byte */
11570  00  =3      BYTE      bitMask1;                     /* MSB */
11571  00  =3      BYTE      bitMask2;                     
11572  00  =3      BYTE      bitMask3;                     /* LSB */
11573  00  =3  } ZW_EVENT_SUPPORTED_REPORT_3BYTE_V4_FRAME;
11574  00  =3  
11575  00  =3  /************************************************************/
11576  00  =3  /* Event Supported Report 4byte V4 command class structs */ 
11577  00  =3  /************************************************************/
11578  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_4BYTE_V4_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 203 

11579  00  =3  {
11580  00  =3      BYTE      cmdClass;                     /* The command class */
11581  00  =3      BYTE      cmd;                          /* The command */
11582  00  =3      BYTE      notificationType;             /**/
11583  00  =3      BYTE      properties1;                  /* masked byte */
11584  00  =3      BYTE      bitMask1;                     /* MSB */
11585  00  =3      BYTE      bitMask2;                     
11586  00  =3      BYTE      bitMask3;                     
11587  00  =3      BYTE      bitMask4;                     /* LSB */
11588  00  =3  } ZW_EVENT_SUPPORTED_REPORT_4BYTE_V4_FRAME;
11589  00  =3  
11590  00  =3  /************************************************************/
11591  00  =3  /* Notification Get V5 command class structs */             
11592  00  =3  /************************************************************/
11593  00  =3  typedef struct _ZW_NOTIFICATION_GET_V5_FRAME_
11594  00  =3  {
11595  00  =3      BYTE      cmdClass;                     /* The command class */
11596  00  =3      BYTE      cmd;                          /* The command */
11597  00  =3      BYTE      v1AlarmType;                  /**/
11598  00  =3      BYTE      notificationType;             /**/
11599  00  =3      BYTE      mevent;                       /**/
11600  00  =3  } ZW_NOTIFICATION_GET_V5_FRAME;
11601  00  =3  
11602  00  =3  /************************************************************/
11603  00  =3  /* Notification Report 1byte V5 command class structs */    
11604  00  =3  /************************************************************/
11605  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_1BYTE_V5_FRAME_
11606  00  =3  {
11607  00  =3      BYTE      cmdClass;                     /* The command class */
11608  00  =3      BYTE      cmd;                          /* The command */
11609  00  =3      BYTE      v1AlarmType;                  /**/
11610  00  =3      BYTE      v1AlarmLevel;                 /**/
11611  00  =3      BYTE      reserved;                     /**/
11612  00  =3      BYTE      notificationStatus;           /**/
11613  00  =3      BYTE      notificationType;             /**/
11614  00  =3      BYTE      mevent;                       /**/
11615  00  =3      BYTE      properties1;                  /* masked byte */
11616  00  =3      BYTE      eventParameter1;              
11617  00  =3      BYTE      sequenceNumber;               /**/
11618  00  =3  } ZW_NOTIFICATION_REPORT_1BYTE_V5_FRAME;
11619  00  =3  
11620  00  =3  /************************************************************/
11621  00  =3  /* Notification Report 2byte V5 command class structs */    
11622  00  =3  /************************************************************/
11623  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_2BYTE_V5_FRAME_
11624  00  =3  {
11625  00  =3      BYTE      cmdClass;                     /* The command class */
11626  00  =3      BYTE      cmd;                          /* The command */
11627  00  =3      BYTE      v1AlarmType;                  /**/
11628  00  =3      BYTE      v1AlarmLevel;                 /**/
11629  00  =3      BYTE      reserved;                     /**/
11630  00  =3      BYTE      notificationStatus;           /**/
11631  00  =3      BYTE      notificationType;             /**/
11632  00  =3      BYTE      mevent;                       /**/
11633  00  =3      BYTE      properties1;                  /* masked byte */
11634  00  =3      BYTE      eventParameter1;              /* MSB */
11635  00  =3      BYTE      eventParameter2;              /* LSB */
11636  00  =3      BYTE      sequenceNumber;               /**/
11637  00  =3  } ZW_NOTIFICATION_REPORT_2BYTE_V5_FRAME;
11638  00  =3  
11639  00  =3  /************************************************************/
11640  00  =3  /* Notification Report 3byte V5 command class structs */    
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 204 

11641  00  =3  /************************************************************/
11642  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_3BYTE_V5_FRAME_
11643  00  =3  {
11644  00  =3      BYTE      cmdClass;                     /* The command class */
11645  00  =3      BYTE      cmd;                          /* The command */
11646  00  =3      BYTE      v1AlarmType;                  /**/
11647  00  =3      BYTE      v1AlarmLevel;                 /**/
11648  00  =3      BYTE      reserved;                     /**/
11649  00  =3      BYTE      notificationStatus;           /**/
11650  00  =3      BYTE      notificationType;             /**/
11651  00  =3      BYTE      mevent;                       /**/
11652  00  =3      BYTE      properties1;                  /* masked byte */
11653  00  =3      BYTE      eventParameter1;              /* MSB */
11654  00  =3      BYTE      eventParameter2;              
11655  00  =3      BYTE      eventParameter3;              /* LSB */
11656  00  =3      BYTE      sequenceNumber;               /**/
11657  00  =3  } ZW_NOTIFICATION_REPORT_3BYTE_V5_FRAME;
11658  00  =3  
11659  00  =3  /************************************************************/
11660  00  =3  /* Notification Report 4byte V5 command class structs */    
11661  00  =3  /************************************************************/
11662  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_4BYTE_V5_FRAME_
11663  00  =3  {
11664  00  =3      BYTE      cmdClass;                     /* The command class */
11665  00  =3      BYTE      cmd;                          /* The command */
11666  00  =3      BYTE      v1AlarmType;                  /**/
11667  00  =3      BYTE      v1AlarmLevel;                 /**/
11668  00  =3      BYTE      reserved;                     /**/
11669  00  =3      BYTE      notificationStatus;           /**/
11670  00  =3      BYTE      notificationType;             /**/
11671  00  =3      BYTE      mevent;                       /**/
11672  00  =3      BYTE      properties1;                  /* masked byte */
11673  00  =3      BYTE      eventParameter1;              /* MSB */
11674  00  =3      BYTE      eventParameter2;              
11675  00  =3      BYTE      eventParameter3;              
11676  00  =3      BYTE      eventParameter4;              /* LSB */
11677  00  =3      BYTE      sequenceNumber;               /**/
11678  00  =3  } ZW_NOTIFICATION_REPORT_4BYTE_V5_FRAME;
11679  00  =3  
11680  00  =3  /************************************************************/
11681  00  =3  /* Notification Set V5 command class structs */             
11682  00  =3  /************************************************************/
11683  00  =3  typedef struct _ZW_NOTIFICATION_SET_V5_FRAME_
11684  00  =3  {
11685  00  =3      BYTE      cmdClass;                     /* The command class */
11686  00  =3      BYTE      cmd;                          /* The command */
11687  00  =3      BYTE      notificationType;             /**/
11688  00  =3      BYTE      notificationStatus;           /**/
11689  00  =3  } ZW_NOTIFICATION_SET_V5_FRAME;
11690  00  =3  
11691  00  =3  /************************************************************/
11692  00  =3  /* Notification Supported Get V5 command class structs */   
11693  00  =3  /************************************************************/
11694  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_GET_V5_FRAME_
11695  00  =3  {
11696  00  =3      BYTE      cmdClass;                     /* The command class */
11697  00  =3      BYTE      cmd;                          /* The command */
11698  00  =3  } ZW_NOTIFICATION_SUPPORTED_GET_V5_FRAME;
11699  00  =3  
11700  00  =3  /************************************************************/
11701  00  =3  /* Notification Supported Report 1byte V5 command class structs */
11702  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 205 

11703  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V5_FRAME_
11704  00  =3  {
11705  00  =3      BYTE      cmdClass;                     /* The command class */
11706  00  =3      BYTE      cmd;                          /* The command */
11707  00  =3      BYTE      properties1;                  /* masked byte */
11708  00  =3      BYTE      bitMask1;                     
11709  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V5_FRAME;
11710  00  =3  
11711  00  =3  /************************************************************/
11712  00  =3  /* Notification Supported Report 2byte V5 command class structs */
11713  00  =3  /************************************************************/
11714  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V5_FRAME_
11715  00  =3  {
11716  00  =3      BYTE      cmdClass;                     /* The command class */
11717  00  =3      BYTE      cmd;                          /* The command */
11718  00  =3      BYTE      properties1;                  /* masked byte */
11719  00  =3      BYTE      bitMask1;                     /* MSB */
11720  00  =3      BYTE      bitMask2;                     /* LSB */
11721  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V5_FRAME;
11722  00  =3  
11723  00  =3  /************************************************************/
11724  00  =3  /* Notification Supported Report 3byte V5 command class structs */
11725  00  =3  /************************************************************/
11726  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V5_FRAME_
11727  00  =3  {
11728  00  =3      BYTE      cmdClass;                     /* The command class */
11729  00  =3      BYTE      cmd;                          /* The command */
11730  00  =3      BYTE      properties1;                  /* masked byte */
11731  00  =3      BYTE      bitMask1;                     /* MSB */
11732  00  =3      BYTE      bitMask2;                     
11733  00  =3      BYTE      bitMask3;                     /* LSB */
11734  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V5_FRAME;
11735  00  =3  
11736  00  =3  /************************************************************/
11737  00  =3  /* Notification Supported Report 4byte V5 command class structs */
11738  00  =3  /************************************************************/
11739  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V5_FRAME_
11740  00  =3  {
11741  00  =3      BYTE      cmdClass;                     /* The command class */
11742  00  =3      BYTE      cmd;                          /* The command */
11743  00  =3      BYTE      properties1;                  /* masked byte */
11744  00  =3      BYTE      bitMask1;                     /* MSB */
11745  00  =3      BYTE      bitMask2;                     
11746  00  =3      BYTE      bitMask3;                     
11747  00  =3      BYTE      bitMask4;                     /* LSB */
11748  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V5_FRAME;
11749  00  =3  
11750  00  =3  /************************************************************/
11751  00  =3  /* Event Supported Get V5 command class structs */          
11752  00  =3  /************************************************************/
11753  00  =3  typedef struct _ZW_EVENT_SUPPORTED_GET_V5_FRAME_
11754  00  =3  {
11755  00  =3      BYTE      cmdClass;                     /* The command class */
11756  00  =3      BYTE      cmd;                          /* The command */
11757  00  =3      BYTE      notificationType;             /**/
11758  00  =3  } ZW_EVENT_SUPPORTED_GET_V5_FRAME;
11759  00  =3  
11760  00  =3  /************************************************************/
11761  00  =3  /* Event Supported Report 1byte V5 command class structs */ 
11762  00  =3  /************************************************************/
11763  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_1BYTE_V5_FRAME_
11764  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 206 

11765  00  =3      BYTE      cmdClass;                     /* The command class */
11766  00  =3      BYTE      cmd;                          /* The command */
11767  00  =3      BYTE      notificationType;             /**/
11768  00  =3      BYTE      properties1;                  /* masked byte */
11769  00  =3      BYTE      bitMask1;                     
11770  00  =3  } ZW_EVENT_SUPPORTED_REPORT_1BYTE_V5_FRAME;
11771  00  =3  
11772  00  =3  /************************************************************/
11773  00  =3  /* Event Supported Report 2byte V5 command class structs */ 
11774  00  =3  /************************************************************/
11775  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_2BYTE_V5_FRAME_
11776  00  =3  {
11777  00  =3      BYTE      cmdClass;                     /* The command class */
11778  00  =3      BYTE      cmd;                          /* The command */
11779  00  =3      BYTE      notificationType;             /**/
11780  00  =3      BYTE      properties1;                  /* masked byte */
11781  00  =3      BYTE      bitMask1;                     /* MSB */
11782  00  =3      BYTE      bitMask2;                     /* LSB */
11783  00  =3  } ZW_EVENT_SUPPORTED_REPORT_2BYTE_V5_FRAME;
11784  00  =3  
11785  00  =3  /************************************************************/
11786  00  =3  /* Event Supported Report 3byte V5 command class structs */ 
11787  00  =3  /************************************************************/
11788  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_3BYTE_V5_FRAME_
11789  00  =3  {
11790  00  =3      BYTE      cmdClass;                     /* The command class */
11791  00  =3      BYTE      cmd;                          /* The command */
11792  00  =3      BYTE      notificationType;             /**/
11793  00  =3      BYTE      properties1;                  /* masked byte */
11794  00  =3      BYTE      bitMask1;                     /* MSB */
11795  00  =3      BYTE      bitMask2;                     
11796  00  =3      BYTE      bitMask3;                     /* LSB */
11797  00  =3  } ZW_EVENT_SUPPORTED_REPORT_3BYTE_V5_FRAME;
11798  00  =3  
11799  00  =3  /************************************************************/
11800  00  =3  /* Event Supported Report 4byte V5 command class structs */ 
11801  00  =3  /************************************************************/
11802  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_4BYTE_V5_FRAME_
11803  00  =3  {
11804  00  =3      BYTE      cmdClass;                     /* The command class */
11805  00  =3      BYTE      cmd;                          /* The command */
11806  00  =3      BYTE      notificationType;             /**/
11807  00  =3      BYTE      properties1;                  /* masked byte */
11808  00  =3      BYTE      bitMask1;                     /* MSB */
11809  00  =3      BYTE      bitMask2;                     
11810  00  =3      BYTE      bitMask3;                     
11811  00  =3      BYTE      bitMask4;                     /* LSB */
11812  00  =3  } ZW_EVENT_SUPPORTED_REPORT_4BYTE_V5_FRAME;
11813  00  =3  
11814  00  =3  /************************************************************/
11815  00  =3  /* Notification Get V6 command class structs */             
11816  00  =3  /************************************************************/
11817  00  =3  typedef struct _ZW_NOTIFICATION_GET_V6_FRAME_
11818  00  =3  {
11819  00  =3      BYTE      cmdClass;                     /* The command class */
11820  00  =3      BYTE      cmd;                          /* The command */
11821  00  =3      BYTE      v1AlarmType;                  /**/
11822  00  =3      BYTE      notificationType;             /**/
11823  00  =3      BYTE      mevent;                       /**/
11824  00  =3  } ZW_NOTIFICATION_GET_V6_FRAME;
11825  00  =3  
11826  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 207 

11827  00  =3  /* Notification Report 1byte V6 command class structs */    
11828  00  =3  /************************************************************/
11829  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_1BYTE_V6_FRAME_
11830  00  =3  {
11831  00  =3      BYTE      cmdClass;                     /* The command class */
11832  00  =3      BYTE      cmd;                          /* The command */
11833  00  =3      BYTE      v1AlarmType;                  /**/
11834  00  =3      BYTE      v1AlarmLevel;                 /**/
11835  00  =3      BYTE      reserved;                     /**/
11836  00  =3      BYTE      notificationStatus;           /**/
11837  00  =3      BYTE      notificationType;             /**/
11838  00  =3      BYTE      mevent;                       /**/
11839  00  =3      BYTE      properties1;                  /* masked byte */
11840  00  =3      BYTE      eventParameter1;              
11841  00  =3      BYTE      sequenceNumber;               /**/
11842  00  =3  } ZW_NOTIFICATION_REPORT_1BYTE_V6_FRAME;
11843  00  =3  
11844  00  =3  /************************************************************/
11845  00  =3  /* Notification Report 2byte V6 command class structs */    
11846  00  =3  /************************************************************/
11847  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_2BYTE_V6_FRAME_
11848  00  =3  {
11849  00  =3      BYTE      cmdClass;                     /* The command class */
11850  00  =3      BYTE      cmd;                          /* The command */
11851  00  =3      BYTE      v1AlarmType;                  /**/
11852  00  =3      BYTE      v1AlarmLevel;                 /**/
11853  00  =3      BYTE      reserved;                     /**/
11854  00  =3      BYTE      notificationStatus;           /**/
11855  00  =3      BYTE      notificationType;             /**/
11856  00  =3      BYTE      mevent;                       /**/
11857  00  =3      BYTE      properties1;                  /* masked byte */
11858  00  =3      BYTE      eventParameter1;              /* MSB */
11859  00  =3      BYTE      eventParameter2;              /* LSB */
11860  00  =3      BYTE      sequenceNumber;               /**/
11861  00  =3  } ZW_NOTIFICATION_REPORT_2BYTE_V6_FRAME;
11862  00  =3  
11863  00  =3  /************************************************************/
11864  00  =3  /* Notification Report 3byte V6 command class structs */    
11865  00  =3  /************************************************************/
11866  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_3BYTE_V6_FRAME_
11867  00  =3  {
11868  00  =3      BYTE      cmdClass;                     /* The command class */
11869  00  =3      BYTE      cmd;                          /* The command */
11870  00  =3      BYTE      v1AlarmType;                  /**/
11871  00  =3      BYTE      v1AlarmLevel;                 /**/
11872  00  =3      BYTE      reserved;                     /**/
11873  00  =3      BYTE      notificationStatus;           /**/
11874  00  =3      BYTE      notificationType;             /**/
11875  00  =3      BYTE      mevent;                       /**/
11876  00  =3      BYTE      properties1;                  /* masked byte */
11877  00  =3      BYTE      eventParameter1;              /* MSB */
11878  00  =3      BYTE      eventParameter2;              
11879  00  =3      BYTE      eventParameter3;              /* LSB */
11880  00  =3      BYTE      sequenceNumber;               /**/
11881  00  =3  } ZW_NOTIFICATION_REPORT_3BYTE_V6_FRAME;
11882  00  =3  
11883  00  =3  /************************************************************/
11884  00  =3  /* Notification Report 4byte V6 command class structs */    
11885  00  =3  /************************************************************/
11886  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_4BYTE_V6_FRAME_
11887  00  =3  {
11888  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 208 

11889  00  =3      BYTE      cmd;                          /* The command */
11890  00  =3      BYTE      v1AlarmType;                  /**/
11891  00  =3      BYTE      v1AlarmLevel;                 /**/
11892  00  =3      BYTE      reserved;                     /**/
11893  00  =3      BYTE      notificationStatus;           /**/
11894  00  =3      BYTE      notificationType;             /**/
11895  00  =3      BYTE      mevent;                       /**/
11896  00  =3      BYTE      properties1;                  /* masked byte */
11897  00  =3      BYTE      eventParameter1;              /* MSB */
11898  00  =3      BYTE      eventParameter2;              
11899  00  =3      BYTE      eventParameter3;              
11900  00  =3      BYTE      eventParameter4;              /* LSB */
11901  00  =3      BYTE      sequenceNumber;               /**/
11902  00  =3  } ZW_NOTIFICATION_REPORT_4BYTE_V6_FRAME;
11903  00  =3  
11904  00  =3  /************************************************************/
11905  00  =3  /* Notification Set V6 command class structs */             
11906  00  =3  /************************************************************/
11907  00  =3  typedef struct _ZW_NOTIFICATION_SET_V6_FRAME_
11908  00  =3  {
11909  00  =3      BYTE      cmdClass;                     /* The command class */
11910  00  =3      BYTE      cmd;                          /* The command */
11911  00  =3      BYTE      notificationType;             /**/
11912  00  =3      BYTE      notificationStatus;           /**/
11913  00  =3  } ZW_NOTIFICATION_SET_V6_FRAME;
11914  00  =3  
11915  00  =3  /************************************************************/
11916  00  =3  /* Notification Supported Get V6 command class structs */   
11917  00  =3  /************************************************************/
11918  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_GET_V6_FRAME_
11919  00  =3  {
11920  00  =3      BYTE      cmdClass;                     /* The command class */
11921  00  =3      BYTE      cmd;                          /* The command */
11922  00  =3  } ZW_NOTIFICATION_SUPPORTED_GET_V6_FRAME;
11923  00  =3  
11924  00  =3  /************************************************************/
11925  00  =3  /* Notification Supported Report 1byte V6 command class structs */
11926  00  =3  /************************************************************/
11927  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V6_FRAME_
11928  00  =3  {
11929  00  =3      BYTE      cmdClass;                     /* The command class */
11930  00  =3      BYTE      cmd;                          /* The command */
11931  00  =3      BYTE      properties1;                  /* masked byte */
11932  00  =3      BYTE      bitMask1;                     
11933  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V6_FRAME;
11934  00  =3  
11935  00  =3  /************************************************************/
11936  00  =3  /* Notification Supported Report 2byte V6 command class structs */
11937  00  =3  /************************************************************/
11938  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V6_FRAME_
11939  00  =3  {
11940  00  =3      BYTE      cmdClass;                     /* The command class */
11941  00  =3      BYTE      cmd;                          /* The command */
11942  00  =3      BYTE      properties1;                  /* masked byte */
11943  00  =3      BYTE      bitMask1;                     /* MSB */
11944  00  =3      BYTE      bitMask2;                     /* LSB */
11945  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V6_FRAME;
11946  00  =3  
11947  00  =3  /************************************************************/
11948  00  =3  /* Notification Supported Report 3byte V6 command class structs */
11949  00  =3  /************************************************************/
11950  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V6_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 209 

11951  00  =3  {
11952  00  =3      BYTE      cmdClass;                     /* The command class */
11953  00  =3      BYTE      cmd;                          /* The command */
11954  00  =3      BYTE      properties1;                  /* masked byte */
11955  00  =3      BYTE      bitMask1;                     /* MSB */
11956  00  =3      BYTE      bitMask2;                     
11957  00  =3      BYTE      bitMask3;                     /* LSB */
11958  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V6_FRAME;
11959  00  =3  
11960  00  =3  /************************************************************/
11961  00  =3  /* Notification Supported Report 4byte V6 command class structs */
11962  00  =3  /************************************************************/
11963  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V6_FRAME_
11964  00  =3  {
11965  00  =3      BYTE      cmdClass;                     /* The command class */
11966  00  =3      BYTE      cmd;                          /* The command */
11967  00  =3      BYTE      properties1;                  /* masked byte */
11968  00  =3      BYTE      bitMask1;                     /* MSB */
11969  00  =3      BYTE      bitMask2;                     
11970  00  =3      BYTE      bitMask3;                     
11971  00  =3      BYTE      bitMask4;                     /* LSB */
11972  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V6_FRAME;
11973  00  =3  
11974  00  =3  /************************************************************/
11975  00  =3  /* Event Supported Get V6 command class structs */          
11976  00  =3  /************************************************************/
11977  00  =3  typedef struct _ZW_EVENT_SUPPORTED_GET_V6_FRAME_
11978  00  =3  {
11979  00  =3      BYTE      cmdClass;                     /* The command class */
11980  00  =3      BYTE      cmd;                          /* The command */
11981  00  =3      BYTE      notificationType;             /**/
11982  00  =3  } ZW_EVENT_SUPPORTED_GET_V6_FRAME;
11983  00  =3  
11984  00  =3  /************************************************************/
11985  00  =3  /* Event Supported Report 1byte V6 command class structs */ 
11986  00  =3  /************************************************************/
11987  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_1BYTE_V6_FRAME_
11988  00  =3  {
11989  00  =3      BYTE      cmdClass;                     /* The command class */
11990  00  =3      BYTE      cmd;                          /* The command */
11991  00  =3      BYTE      notificationType;             /**/
11992  00  =3      BYTE      properties1;                  /* masked byte */
11993  00  =3      BYTE      bitMask1;                     
11994  00  =3  } ZW_EVENT_SUPPORTED_REPORT_1BYTE_V6_FRAME;
11995  00  =3  
11996  00  =3  /************************************************************/
11997  00  =3  /* Event Supported Report 2byte V6 command class structs */ 
11998  00  =3  /************************************************************/
11999  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_2BYTE_V6_FRAME_
12000  00  =3  {
12001  00  =3      BYTE      cmdClass;                     /* The command class */
12002  00  =3      BYTE      cmd;                          /* The command */
12003  00  =3      BYTE      notificationType;             /**/
12004  00  =3      BYTE      properties1;                  /* masked byte */
12005  00  =3      BYTE      bitMask1;                     /* MSB */
12006  00  =3      BYTE      bitMask2;                     /* LSB */
12007  00  =3  } ZW_EVENT_SUPPORTED_REPORT_2BYTE_V6_FRAME;
12008  00  =3  
12009  00  =3  /************************************************************/
12010  00  =3  /* Event Supported Report 3byte V6 command class structs */ 
12011  00  =3  /************************************************************/
12012  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_3BYTE_V6_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 210 

12013  00  =3  {
12014  00  =3      BYTE      cmdClass;                     /* The command class */
12015  00  =3      BYTE      cmd;                          /* The command */
12016  00  =3      BYTE      notificationType;             /**/
12017  00  =3      BYTE      properties1;                  /* masked byte */
12018  00  =3      BYTE      bitMask1;                     /* MSB */
12019  00  =3      BYTE      bitMask2;                     
12020  00  =3      BYTE      bitMask3;                     /* LSB */
12021  00  =3  } ZW_EVENT_SUPPORTED_REPORT_3BYTE_V6_FRAME;
12022  00  =3  
12023  00  =3  /************************************************************/
12024  00  =3  /* Event Supported Report 4byte V6 command class structs */ 
12025  00  =3  /************************************************************/
12026  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_4BYTE_V6_FRAME_
12027  00  =3  {
12028  00  =3      BYTE      cmdClass;                     /* The command class */
12029  00  =3      BYTE      cmd;                          /* The command */
12030  00  =3      BYTE      notificationType;             /**/
12031  00  =3      BYTE      properties1;                  /* masked byte */
12032  00  =3      BYTE      bitMask1;                     /* MSB */
12033  00  =3      BYTE      bitMask2;                     
12034  00  =3      BYTE      bitMask3;                     
12035  00  =3      BYTE      bitMask4;                     /* LSB */
12036  00  =3  } ZW_EVENT_SUPPORTED_REPORT_4BYTE_V6_FRAME;
12037  00  =3  
12038  00  =3  /************************************************************/
12039  00  =3  /* Notification Get V7 command class structs */             
12040  00  =3  /************************************************************/
12041  00  =3  typedef struct _ZW_NOTIFICATION_GET_V7_FRAME_
12042  00  =3  {
12043  00  =3      BYTE      cmdClass;                     /* The command class */
12044  00  =3      BYTE      cmd;                          /* The command */
12045  00  =3      BYTE      v1AlarmType;                  /**/
12046  00  =3      BYTE      notificationType;             /**/
12047  00  =3      BYTE      mevent;                       /**/
12048  00  =3  } ZW_NOTIFICATION_GET_V7_FRAME;
12049  00  =3  
12050  00  =3  /************************************************************/
12051  00  =3  /* Notification Report 1byte V7 command class structs */    
12052  00  =3  /************************************************************/
12053  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_1BYTE_V7_FRAME_
12054  00  =3  {
12055  00  =3      BYTE      cmdClass;                     /* The command class */
12056  00  =3      BYTE      cmd;                          /* The command */
12057  00  =3      BYTE      v1AlarmType;                  /**/
12058  00  =3      BYTE      v1AlarmLevel;                 /**/
12059  00  =3      BYTE      reserved;                     /**/
12060  00  =3      BYTE      notificationStatus;           /**/
12061  00  =3      BYTE      notificationType;             /**/
12062  00  =3      BYTE      mevent;                       /**/
12063  00  =3      BYTE      properties1;                  /* masked byte */
12064  00  =3      BYTE      eventParameter1;              
12065  00  =3      BYTE      sequenceNumber;               /**/
12066  00  =3  } ZW_NOTIFICATION_REPORT_1BYTE_V7_FRAME;
12067  00  =3  
12068  00  =3  /************************************************************/
12069  00  =3  /* Notification Report 2byte V7 command class structs */    
12070  00  =3  /************************************************************/
12071  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_2BYTE_V7_FRAME_
12072  00  =3  {
12073  00  =3      BYTE      cmdClass;                     /* The command class */
12074  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 211 

12075  00  =3      BYTE      v1AlarmType;                  /**/
12076  00  =3      BYTE      v1AlarmLevel;                 /**/
12077  00  =3      BYTE      reserved;                     /**/
12078  00  =3      BYTE      notificationStatus;           /**/
12079  00  =3      BYTE      notificationType;             /**/
12080  00  =3      BYTE      mevent;                       /**/
12081  00  =3      BYTE      properties1;                  /* masked byte */
12082  00  =3      BYTE      eventParameter1;              /* MSB */
12083  00  =3      BYTE      eventParameter2;              /* LSB */
12084  00  =3      BYTE      sequenceNumber;               /**/
12085  00  =3  } ZW_NOTIFICATION_REPORT_2BYTE_V7_FRAME;
12086  00  =3  
12087  00  =3  /************************************************************/
12088  00  =3  /* Notification Report 3byte V7 command class structs */    
12089  00  =3  /************************************************************/
12090  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_3BYTE_V7_FRAME_
12091  00  =3  {
12092  00  =3      BYTE      cmdClass;                     /* The command class */
12093  00  =3      BYTE      cmd;                          /* The command */
12094  00  =3      BYTE      v1AlarmType;                  /**/
12095  00  =3      BYTE      v1AlarmLevel;                 /**/
12096  00  =3      BYTE      reserved;                     /**/
12097  00  =3      BYTE      notificationStatus;           /**/
12098  00  =3      BYTE      notificationType;             /**/
12099  00  =3      BYTE      mevent;                       /**/
12100  00  =3      BYTE      properties1;                  /* masked byte */
12101  00  =3      BYTE      eventParameter1;              /* MSB */
12102  00  =3      BYTE      eventParameter2;              
12103  00  =3      BYTE      eventParameter3;              /* LSB */
12104  00  =3      BYTE      sequenceNumber;               /**/
12105  00  =3  } ZW_NOTIFICATION_REPORT_3BYTE_V7_FRAME;
12106  00  =3  
12107  00  =3  /************************************************************/
12108  00  =3  /* Notification Report 4byte V7 command class structs */    
12109  00  =3  /************************************************************/
12110  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_4BYTE_V7_FRAME_
12111  00  =3  {
12112  00  =3      BYTE      cmdClass;                     /* The command class */
12113  00  =3      BYTE      cmd;                          /* The command */
12114  00  =3      BYTE      v1AlarmType;                  /**/
12115  00  =3      BYTE      v1AlarmLevel;                 /**/
12116  00  =3      BYTE      reserved;                     /**/
12117  00  =3      BYTE      notificationStatus;           /**/
12118  00  =3      BYTE      notificationType;             /**/
12119  00  =3      BYTE      mevent;                       /**/
12120  00  =3      BYTE      properties1;                  /* masked byte */
12121  00  =3      BYTE      eventParameter1;              /* MSB */
12122  00  =3      BYTE      eventParameter2;              
12123  00  =3      BYTE      eventParameter3;              
12124  00  =3      BYTE      eventParameter4;              /* LSB */
12125  00  =3      BYTE      sequenceNumber;               /**/
12126  00  =3  } ZW_NOTIFICATION_REPORT_4BYTE_V7_FRAME;
12127  00  =3  
12128  00  =3  /************************************************************/
12129  00  =3  /* Notification Set V7 command class structs */             
12130  00  =3  /************************************************************/
12131  00  =3  typedef struct _ZW_NOTIFICATION_SET_V7_FRAME_
12132  00  =3  {
12133  00  =3      BYTE      cmdClass;                     /* The command class */
12134  00  =3      BYTE      cmd;                          /* The command */
12135  00  =3      BYTE      notificationType;             /**/
12136  00  =3      BYTE      notificationStatus;           /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 212 

12137  00  =3  } ZW_NOTIFICATION_SET_V7_FRAME;
12138  00  =3  
12139  00  =3  /************************************************************/
12140  00  =3  /* Notification Supported Get V7 command class structs */   
12141  00  =3  /************************************************************/
12142  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_GET_V7_FRAME_
12143  00  =3  {
12144  00  =3      BYTE      cmdClass;                     /* The command class */
12145  00  =3      BYTE      cmd;                          /* The command */
12146  00  =3  } ZW_NOTIFICATION_SUPPORTED_GET_V7_FRAME;
12147  00  =3  
12148  00  =3  /************************************************************/
12149  00  =3  /* Notification Supported Report 1byte V7 command class structs */
12150  00  =3  /************************************************************/
12151  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V7_FRAME_
12152  00  =3  {
12153  00  =3      BYTE      cmdClass;                     /* The command class */
12154  00  =3      BYTE      cmd;                          /* The command */
12155  00  =3      BYTE      properties1;                  /* masked byte */
12156  00  =3      BYTE      bitMask1;                     
12157  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V7_FRAME;
12158  00  =3  
12159  00  =3  /************************************************************/
12160  00  =3  /* Notification Supported Report 2byte V7 command class structs */
12161  00  =3  /************************************************************/
12162  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V7_FRAME_
12163  00  =3  {
12164  00  =3      BYTE      cmdClass;                     /* The command class */
12165  00  =3      BYTE      cmd;                          /* The command */
12166  00  =3      BYTE      properties1;                  /* masked byte */
12167  00  =3      BYTE      bitMask1;                     /* MSB */
12168  00  =3      BYTE      bitMask2;                     /* LSB */
12169  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V7_FRAME;
12170  00  =3  
12171  00  =3  /************************************************************/
12172  00  =3  /* Notification Supported Report 3byte V7 command class structs */
12173  00  =3  /************************************************************/
12174  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V7_FRAME_
12175  00  =3  {
12176  00  =3      BYTE      cmdClass;                     /* The command class */
12177  00  =3      BYTE      cmd;                          /* The command */
12178  00  =3      BYTE      properties1;                  /* masked byte */
12179  00  =3      BYTE      bitMask1;                     /* MSB */
12180  00  =3      BYTE      bitMask2;                     
12181  00  =3      BYTE      bitMask3;                     /* LSB */
12182  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V7_FRAME;
12183  00  =3  
12184  00  =3  /************************************************************/
12185  00  =3  /* Notification Supported Report 4byte V7 command class structs */
12186  00  =3  /************************************************************/
12187  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V7_FRAME_
12188  00  =3  {
12189  00  =3      BYTE      cmdClass;                     /* The command class */
12190  00  =3      BYTE      cmd;                          /* The command */
12191  00  =3      BYTE      properties1;                  /* masked byte */
12192  00  =3      BYTE      bitMask1;                     /* MSB */
12193  00  =3      BYTE      bitMask2;                     
12194  00  =3      BYTE      bitMask3;                     
12195  00  =3      BYTE      bitMask4;                     /* LSB */
12196  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V7_FRAME;
12197  00  =3  
12198  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 213 

12199  00  =3  /* Event Supported Get V7 command class structs */          
12200  00  =3  /************************************************************/
12201  00  =3  typedef struct _ZW_EVENT_SUPPORTED_GET_V7_FRAME_
12202  00  =3  {
12203  00  =3      BYTE      cmdClass;                     /* The command class */
12204  00  =3      BYTE      cmd;                          /* The command */
12205  00  =3      BYTE      notificationType;             /**/
12206  00  =3  } ZW_EVENT_SUPPORTED_GET_V7_FRAME;
12207  00  =3  
12208  00  =3  /************************************************************/
12209  00  =3  /* Event Supported Report 1byte V7 command class structs */ 
12210  00  =3  /************************************************************/
12211  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_1BYTE_V7_FRAME_
12212  00  =3  {
12213  00  =3      BYTE      cmdClass;                     /* The command class */
12214  00  =3      BYTE      cmd;                          /* The command */
12215  00  =3      BYTE      notificationType;             /**/
12216  00  =3      BYTE      properties1;                  /* masked byte */
12217  00  =3      BYTE      bitMask1;                     
12218  00  =3  } ZW_EVENT_SUPPORTED_REPORT_1BYTE_V7_FRAME;
12219  00  =3  
12220  00  =3  /************************************************************/
12221  00  =3  /* Event Supported Report 2byte V7 command class structs */ 
12222  00  =3  /************************************************************/
12223  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_2BYTE_V7_FRAME_
12224  00  =3  {
12225  00  =3      BYTE      cmdClass;                     /* The command class */
12226  00  =3      BYTE      cmd;                          /* The command */
12227  00  =3      BYTE      notificationType;             /**/
12228  00  =3      BYTE      properties1;                  /* masked byte */
12229  00  =3      BYTE      bitMask1;                     /* MSB */
12230  00  =3      BYTE      bitMask2;                     /* LSB */
12231  00  =3  } ZW_EVENT_SUPPORTED_REPORT_2BYTE_V7_FRAME;
12232  00  =3  
12233  00  =3  /************************************************************/
12234  00  =3  /* Event Supported Report 3byte V7 command class structs */ 
12235  00  =3  /************************************************************/
12236  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_3BYTE_V7_FRAME_
12237  00  =3  {
12238  00  =3      BYTE      cmdClass;                     /* The command class */
12239  00  =3      BYTE      cmd;                          /* The command */
12240  00  =3      BYTE      notificationType;             /**/
12241  00  =3      BYTE      properties1;                  /* masked byte */
12242  00  =3      BYTE      bitMask1;                     /* MSB */
12243  00  =3      BYTE      bitMask2;                     
12244  00  =3      BYTE      bitMask3;                     /* LSB */
12245  00  =3  } ZW_EVENT_SUPPORTED_REPORT_3BYTE_V7_FRAME;
12246  00  =3  
12247  00  =3  /************************************************************/
12248  00  =3  /* Event Supported Report 4byte V7 command class structs */ 
12249  00  =3  /************************************************************/
12250  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_4BYTE_V7_FRAME_
12251  00  =3  {
12252  00  =3      BYTE      cmdClass;                     /* The command class */
12253  00  =3      BYTE      cmd;                          /* The command */
12254  00  =3      BYTE      notificationType;             /**/
12255  00  =3      BYTE      properties1;                  /* masked byte */
12256  00  =3      BYTE      bitMask1;                     /* MSB */
12257  00  =3      BYTE      bitMask2;                     
12258  00  =3      BYTE      bitMask3;                     
12259  00  =3      BYTE      bitMask4;                     /* LSB */
12260  00  =3  } ZW_EVENT_SUPPORTED_REPORT_4BYTE_V7_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 214 

12261  00  =3  
12262  00  =3  /************************************************************/
12263  00  =3  /* Notification Get V8 command class structs */             
12264  00  =3  /************************************************************/
12265  00  =3  typedef struct _ZW_NOTIFICATION_GET_V8_FRAME_
12266  00  =3  {
12267  00  =3      BYTE      cmdClass;                     /* The command class */
12268  00  =3      BYTE      cmd;                          /* The command */
12269  00  =3      BYTE      v1AlarmType;                  /**/
12270  00  =3      BYTE      notificationType;             /**/
12271  00  =3      BYTE      mevent;                       /**/
12272  00  =3  } ZW_NOTIFICATION_GET_V8_FRAME;
12273  00  =3  
12274  00  =3  /************************************************************/
12275  00  =3  /* Notification Report 1byte V8 command class structs */    
12276  00  =3  /************************************************************/
12277  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_1BYTE_V8_FRAME_
12278  00  =3  {
12279  00  =3      BYTE      cmdClass;                     /* The command class */
12280  00  =3      BYTE      cmd;                          /* The command */
12281  00  =3      BYTE      v1AlarmType;                  /**/
12282  00  =3      BYTE      v1AlarmLevel;                 /**/
12283  00  =3      BYTE      reserved;                     /**/
12284  00  =3      BYTE      notificationStatus;           /**/
12285  00  =3      BYTE      notificationType;             /**/
12286  00  =3      BYTE      mevent;                       /**/
12287  00  =3      BYTE      properties1;                  /* masked byte */
12288  00  =3      BYTE      eventParameter1;              
12289  00  =3      BYTE      sequenceNumber;               /**/
12290  00  =3  } ZW_NOTIFICATION_REPORT_1BYTE_V8_FRAME;
12291  00  =3  
12292  00  =3  /************************************************************/
12293  00  =3  /* Notification Report 2byte V8 command class structs */    
12294  00  =3  /************************************************************/
12295  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_2BYTE_V8_FRAME_
12296  00  =3  {
12297  00  =3      BYTE      cmdClass;                     /* The command class */
12298  00  =3      BYTE      cmd;                          /* The command */
12299  00  =3      BYTE      v1AlarmType;                  /**/
12300  00  =3      BYTE      v1AlarmLevel;                 /**/
12301  00  =3      BYTE      reserved;                     /**/
12302  00  =3      BYTE      notificationStatus;           /**/
12303  00  =3      BYTE      notificationType;             /**/
12304  00  =3      BYTE      mevent;                       /**/
12305  00  =3      BYTE      properties1;                  /* masked byte */
12306  00  =3      BYTE      eventParameter1;              /* MSB */
12307  00  =3      BYTE      eventParameter2;              /* LSB */
12308  00  =3      BYTE      sequenceNumber;               /**/
12309  00  =3  } ZW_NOTIFICATION_REPORT_2BYTE_V8_FRAME;
12310  00  =3  
12311  00  =3  /************************************************************/
12312  00  =3  /* Notification Report 3byte V8 command class structs */    
12313  00  =3  /************************************************************/
12314  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_3BYTE_V8_FRAME_
12315  00  =3  {
12316  00  =3      BYTE      cmdClass;                     /* The command class */
12317  00  =3      BYTE      cmd;                          /* The command */
12318  00  =3      BYTE      v1AlarmType;                  /**/
12319  00  =3      BYTE      v1AlarmLevel;                 /**/
12320  00  =3      BYTE      reserved;                     /**/
12321  00  =3      BYTE      notificationStatus;           /**/
12322  00  =3      BYTE      notificationType;             /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 215 

12323  00  =3      BYTE      mevent;                       /**/
12324  00  =3      BYTE      properties1;                  /* masked byte */
12325  00  =3      BYTE      eventParameter1;              /* MSB */
12326  00  =3      BYTE      eventParameter2;              
12327  00  =3      BYTE      eventParameter3;              /* LSB */
12328  00  =3      BYTE      sequenceNumber;               /**/
12329  00  =3  } ZW_NOTIFICATION_REPORT_3BYTE_V8_FRAME;
12330  00  =3  
12331  00  =3  /************************************************************/
12332  00  =3  /* Notification Report 4byte V8 command class structs */    
12333  00  =3  /************************************************************/
12334  00  =3  typedef struct _ZW_NOTIFICATION_REPORT_4BYTE_V8_FRAME_
12335  00  =3  {
12336  00  =3      BYTE      cmdClass;                     /* The command class */
12337  00  =3      BYTE      cmd;                          /* The command */
12338  00  =3      BYTE      v1AlarmType;                  /**/
12339  00  =3      BYTE      v1AlarmLevel;                 /**/
12340  00  =3      BYTE      reserved;                     /**/
12341  00  =3      BYTE      notificationStatus;           /**/
12342  00  =3      BYTE      notificationType;             /**/
12343  00  =3      BYTE      mevent;                       /**/
12344  00  =3      BYTE      properties1;                  /* masked byte */
12345  00  =3      BYTE      eventParameter1;              /* MSB */
12346  00  =3      BYTE      eventParameter2;              
12347  00  =3      BYTE      eventParameter3;              
12348  00  =3      BYTE      eventParameter4;              /* LSB */
12349  00  =3      BYTE      sequenceNumber;               /**/
12350  00  =3  } ZW_NOTIFICATION_REPORT_4BYTE_V8_FRAME;
12351  00  =3  
12352  00  =3  /************************************************************/
12353  00  =3  /* Notification Set V8 command class structs */             
12354  00  =3  /************************************************************/
12355  00  =3  typedef struct _ZW_NOTIFICATION_SET_V8_FRAME_
12356  00  =3  {
12357  00  =3      BYTE      cmdClass;                     /* The command class */
12358  00  =3      BYTE      cmd;                          /* The command */
12359  00  =3      BYTE      notificationType;             /**/
12360  00  =3      BYTE      notificationStatus;           /**/
12361  00  =3  } ZW_NOTIFICATION_SET_V8_FRAME;
12362  00  =3  
12363  00  =3  /************************************************************/
12364  00  =3  /* Notification Supported Get V8 command class structs */   
12365  00  =3  /************************************************************/
12366  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_GET_V8_FRAME_
12367  00  =3  {
12368  00  =3      BYTE      cmdClass;                     /* The command class */
12369  00  =3      BYTE      cmd;                          /* The command */
12370  00  =3  } ZW_NOTIFICATION_SUPPORTED_GET_V8_FRAME;
12371  00  =3  
12372  00  =3  /************************************************************/
12373  00  =3  /* Notification Supported Report 1byte V8 command class structs */
12374  00  =3  /************************************************************/
12375  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V8_FRAME_
12376  00  =3  {
12377  00  =3      BYTE      cmdClass;                     /* The command class */
12378  00  =3      BYTE      cmd;                          /* The command */
12379  00  =3      BYTE      properties1;                  /* masked byte */
12380  00  =3      BYTE      bitMask1;                     
12381  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_1BYTE_V8_FRAME;
12382  00  =3  
12383  00  =3  /************************************************************/
12384  00  =3  /* Notification Supported Report 2byte V8 command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 216 

12385  00  =3  /************************************************************/
12386  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V8_FRAME_
12387  00  =3  {
12388  00  =3      BYTE      cmdClass;                     /* The command class */
12389  00  =3      BYTE      cmd;                          /* The command */
12390  00  =3      BYTE      properties1;                  /* masked byte */
12391  00  =3      BYTE      bitMask1;                     /* MSB */
12392  00  =3      BYTE      bitMask2;                     /* LSB */
12393  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_2BYTE_V8_FRAME;
12394  00  =3  
12395  00  =3  /************************************************************/
12396  00  =3  /* Notification Supported Report 3byte V8 command class structs */
12397  00  =3  /************************************************************/
12398  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V8_FRAME_
12399  00  =3  {
12400  00  =3      BYTE      cmdClass;                     /* The command class */
12401  00  =3      BYTE      cmd;                          /* The command */
12402  00  =3      BYTE      properties1;                  /* masked byte */
12403  00  =3      BYTE      bitMask1;                     /* MSB */
12404  00  =3      BYTE      bitMask2;                     
12405  00  =3      BYTE      bitMask3;                     /* LSB */
12406  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_3BYTE_V8_FRAME;
12407  00  =3  
12408  00  =3  /************************************************************/
12409  00  =3  /* Notification Supported Report 4byte V8 command class structs */
12410  00  =3  /************************************************************/
12411  00  =3  typedef struct _ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V8_FRAME_
12412  00  =3  {
12413  00  =3      BYTE      cmdClass;                     /* The command class */
12414  00  =3      BYTE      cmd;                          /* The command */
12415  00  =3      BYTE      properties1;                  /* masked byte */
12416  00  =3      BYTE      bitMask1;                     /* MSB */
12417  00  =3      BYTE      bitMask2;                     
12418  00  =3      BYTE      bitMask3;                     
12419  00  =3      BYTE      bitMask4;                     /* LSB */
12420  00  =3  } ZW_NOTIFICATION_SUPPORTED_REPORT_4BYTE_V8_FRAME;
12421  00  =3  
12422  00  =3  /************************************************************/
12423  00  =3  /* Event Supported Get V8 command class structs */          
12424  00  =3  /************************************************************/
12425  00  =3  typedef struct _ZW_EVENT_SUPPORTED_GET_V8_FRAME_
12426  00  =3  {
12427  00  =3      BYTE      cmdClass;                     /* The command class */
12428  00  =3      BYTE      cmd;                          /* The command */
12429  00  =3      BYTE      notificationType;             /**/
12430  00  =3  } ZW_EVENT_SUPPORTED_GET_V8_FRAME;
12431  00  =3  
12432  00  =3  /************************************************************/
12433  00  =3  /* Event Supported Report 1byte V8 command class structs */ 
12434  00  =3  /************************************************************/
12435  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_1BYTE_V8_FRAME_
12436  00  =3  {
12437  00  =3      BYTE      cmdClass;                     /* The command class */
12438  00  =3      BYTE      cmd;                          /* The command */
12439  00  =3      BYTE      notificationType;             /**/
12440  00  =3      BYTE      properties1;                  /* masked byte */
12441  00  =3      BYTE      bitMask1;                     
12442  00  =3  } ZW_EVENT_SUPPORTED_REPORT_1BYTE_V8_FRAME;
12443  00  =3  
12444  00  =3  /************************************************************/
12445  00  =3  /* Event Supported Report 2byte V8 command class structs */ 
12446  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 217 

12447  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_2BYTE_V8_FRAME_
12448  00  =3  {
12449  00  =3      BYTE      cmdClass;                     /* The command class */
12450  00  =3      BYTE      cmd;                          /* The command */
12451  00  =3      BYTE      notificationType;             /**/
12452  00  =3      BYTE      properties1;                  /* masked byte */
12453  00  =3      BYTE      bitMask1;                     /* MSB */
12454  00  =3      BYTE      bitMask2;                     /* LSB */
12455  00  =3  } ZW_EVENT_SUPPORTED_REPORT_2BYTE_V8_FRAME;
12456  00  =3  
12457  00  =3  /************************************************************/
12458  00  =3  /* Event Supported Report 3byte V8 command class structs */ 
12459  00  =3  /************************************************************/
12460  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_3BYTE_V8_FRAME_
12461  00  =3  {
12462  00  =3      BYTE      cmdClass;                     /* The command class */
12463  00  =3      BYTE      cmd;                          /* The command */
12464  00  =3      BYTE      notificationType;             /**/
12465  00  =3      BYTE      properties1;                  /* masked byte */
12466  00  =3      BYTE      bitMask1;                     /* MSB */
12467  00  =3      BYTE      bitMask2;                     
12468  00  =3      BYTE      bitMask3;                     /* LSB */
12469  00  =3  } ZW_EVENT_SUPPORTED_REPORT_3BYTE_V8_FRAME;
12470  00  =3  
12471  00  =3  /************************************************************/
12472  00  =3  /* Event Supported Report 4byte V8 command class structs */ 
12473  00  =3  /************************************************************/
12474  00  =3  typedef struct _ZW_EVENT_SUPPORTED_REPORT_4BYTE_V8_FRAME_
12475  00  =3  {
12476  00  =3      BYTE      cmdClass;                     /* The command class */
12477  00  =3      BYTE      cmd;                          /* The command */
12478  00  =3      BYTE      notificationType;             /**/
12479  00  =3      BYTE      properties1;                  /* masked byte */
12480  00  =3      BYTE      bitMask1;                     /* MSB */
12481  00  =3      BYTE      bitMask2;                     
12482  00  =3      BYTE      bitMask3;                     
12483  00  =3      BYTE      bitMask4;                     /* LSB */
12484  00  =3  } ZW_EVENT_SUPPORTED_REPORT_4BYTE_V8_FRAME;
12485  00  =3  
12486  00  =3  /************************************************************/
12487  00  =3  /* Application Busy command class structs */                
12488  00  =3  /************************************************************/
12489  00  =3  typedef struct _ZW_APPLICATION_BUSY_FRAME_
12490  00  =3  {
12491  00  =3      BYTE      cmdClass;                     /* The command class */
12492  00  =3      BYTE      cmd;                          /* The command */
12493  00  =3      BYTE      status;                       /*The status field*/
12494  00  =3      BYTE      waitTime;                     /**/
12495  00  =3  } ZW_APPLICATION_BUSY_FRAME;
12496  00  =3  
12497  00  =3  /************************************************************/
12498  00  =3  /* Application Rejected Request command class structs */    
12499  00  =3  /************************************************************/
12500  00  =3  typedef struct _ZW_APPLICATION_REJECTED_REQUEST_FRAME_
12501  00  =3  {
12502  00  =3      BYTE      cmdClass;                     /* The command class */
12503  00  =3      BYTE      cmd;                          /* The command */
12504  00  =3      BYTE      status;                       /**/
12505  00  =3  } ZW_APPLICATION_REJECTED_REQUEST_FRAME;
12506  00  =3  
12507  00  =3  /************************************************************/
12508  00  =3  /* Command Configuration Get command class structs */       
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 218 

12509  00  =3  /************************************************************/
12510  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_GET_FRAME_
12511  00  =3  {
12512  00  =3      BYTE      cmdClass;                     /* The command class */
12513  00  =3      BYTE      cmd;                          /* The command */
12514  00  =3      BYTE      groupingIdentifier;           /**/
12515  00  =3      BYTE      nodeId;                       /**/
12516  00  =3  } ZW_COMMAND_CONFIGURATION_GET_FRAME;
12517  00  =3  
12518  00  =3  /************************************************************/
12519  00  =3  /* Command Configuration Report 1byte command class structs */
12520  00  =3  /************************************************************/
12521  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_REPORT_1BYTE_FRAME_
12522  00  =3  {
12523  00  =3      BYTE      cmdClass;                     /* The command class */
12524  00  =3      BYTE      cmd;                          /* The command */
12525  00  =3      BYTE      groupingIdentifier;           /**/
12526  00  =3      BYTE      nodeId;                       /**/
12527  00  =3      BYTE      properties1;                  /* masked byte */
12528  00  =3      BYTE      commandLength;                /**/
12529  00  =3      BYTE      commandClassIdentifier;       /**/
12530  00  =3      BYTE      commandIdentifier;            /**/
12531  00  =3      BYTE      commandByte1;                 
12532  00  =3  } ZW_COMMAND_CONFIGURATION_REPORT_1BYTE_FRAME;
12533  00  =3  
12534  00  =3  /************************************************************/
12535  00  =3  /* Command Configuration Report 2byte command class structs */
12536  00  =3  /************************************************************/
12537  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_REPORT_2BYTE_FRAME_
12538  00  =3  {
12539  00  =3      BYTE      cmdClass;                     /* The command class */
12540  00  =3      BYTE      cmd;                          /* The command */
12541  00  =3      BYTE      groupingIdentifier;           /**/
12542  00  =3      BYTE      nodeId;                       /**/
12543  00  =3      BYTE      properties1;                  /* masked byte */
12544  00  =3      BYTE      commandLength;                /**/
12545  00  =3      BYTE      commandClassIdentifier;       /**/
12546  00  =3      BYTE      commandIdentifier;            /**/
12547  00  =3      BYTE      commandByte1;                 /* MSB */
12548  00  =3      BYTE      commandByte2;                 /* LSB */
12549  00  =3  } ZW_COMMAND_CONFIGURATION_REPORT_2BYTE_FRAME;
12550  00  =3  
12551  00  =3  /************************************************************/
12552  00  =3  /* Command Configuration Report 3byte command class structs */
12553  00  =3  /************************************************************/
12554  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_REPORT_3BYTE_FRAME_
12555  00  =3  {
12556  00  =3      BYTE      cmdClass;                     /* The command class */
12557  00  =3      BYTE      cmd;                          /* The command */
12558  00  =3      BYTE      groupingIdentifier;           /**/
12559  00  =3      BYTE      nodeId;                       /**/
12560  00  =3      BYTE      properties1;                  /* masked byte */
12561  00  =3      BYTE      commandLength;                /**/
12562  00  =3      BYTE      commandClassIdentifier;       /**/
12563  00  =3      BYTE      commandIdentifier;            /**/
12564  00  =3      BYTE      commandByte1;                 /* MSB */
12565  00  =3      BYTE      commandByte2;                 
12566  00  =3      BYTE      commandByte3;                 /* LSB */
12567  00  =3  } ZW_COMMAND_CONFIGURATION_REPORT_3BYTE_FRAME;
12568  00  =3  
12569  00  =3  /************************************************************/
12570  00  =3  /* Command Configuration Report 4byte command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 219 

12571  00  =3  /************************************************************/
12572  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_REPORT_4BYTE_FRAME_
12573  00  =3  {
12574  00  =3      BYTE      cmdClass;                     /* The command class */
12575  00  =3      BYTE      cmd;                          /* The command */
12576  00  =3      BYTE      groupingIdentifier;           /**/
12577  00  =3      BYTE      nodeId;                       /**/
12578  00  =3      BYTE      properties1;                  /* masked byte */
12579  00  =3      BYTE      commandLength;                /**/
12580  00  =3      BYTE      commandClassIdentifier;       /**/
12581  00  =3      BYTE      commandIdentifier;            /**/
12582  00  =3      BYTE      commandByte1;                 /* MSB */
12583  00  =3      BYTE      commandByte2;                 
12584  00  =3      BYTE      commandByte3;                 
12585  00  =3      BYTE      commandByte4;                 /* LSB */
12586  00  =3  } ZW_COMMAND_CONFIGURATION_REPORT_4BYTE_FRAME;
12587  00  =3  
12588  00  =3  /************************************************************/
12589  00  =3  /* Command Configuration Set 1byte command class structs */ 
12590  00  =3  /************************************************************/
12591  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_SET_1BYTE_FRAME_
12592  00  =3  {
12593  00  =3      BYTE      cmdClass;                     /* The command class */
12594  00  =3      BYTE      cmd;                          /* The command */
12595  00  =3      BYTE      groupingIdentifier;           /**/
12596  00  =3      BYTE      nodeId;                       /**/
12597  00  =3      BYTE      commandLength;                /**/
12598  00  =3      BYTE      commandClassIdentifier;       /**/
12599  00  =3      BYTE      commandIdentifier;            /**/
12600  00  =3      BYTE      commandByte1;                 
12601  00  =3  } ZW_COMMAND_CONFIGURATION_SET_1BYTE_FRAME;
12602  00  =3  
12603  00  =3  /************************************************************/
12604  00  =3  /* Command Configuration Set 2byte command class structs */ 
12605  00  =3  /************************************************************/
12606  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_SET_2BYTE_FRAME_
12607  00  =3  {
12608  00  =3      BYTE      cmdClass;                     /* The command class */
12609  00  =3      BYTE      cmd;                          /* The command */
12610  00  =3      BYTE      groupingIdentifier;           /**/
12611  00  =3      BYTE      nodeId;                       /**/
12612  00  =3      BYTE      commandLength;                /**/
12613  00  =3      BYTE      commandClassIdentifier;       /**/
12614  00  =3      BYTE      commandIdentifier;            /**/
12615  00  =3      BYTE      commandByte1;                 /* MSB */
12616  00  =3      BYTE      commandByte2;                 /* LSB */
12617  00  =3  } ZW_COMMAND_CONFIGURATION_SET_2BYTE_FRAME;
12618  00  =3  
12619  00  =3  /************************************************************/
12620  00  =3  /* Command Configuration Set 3byte command class structs */ 
12621  00  =3  /************************************************************/
12622  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_SET_3BYTE_FRAME_
12623  00  =3  {
12624  00  =3      BYTE      cmdClass;                     /* The command class */
12625  00  =3      BYTE      cmd;                          /* The command */
12626  00  =3      BYTE      groupingIdentifier;           /**/
12627  00  =3      BYTE      nodeId;                       /**/
12628  00  =3      BYTE      commandLength;                /**/
12629  00  =3      BYTE      commandClassIdentifier;       /**/
12630  00  =3      BYTE      commandIdentifier;            /**/
12631  00  =3      BYTE      commandByte1;                 /* MSB */
12632  00  =3      BYTE      commandByte2;                 
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 220 

12633  00  =3      BYTE      commandByte3;                 /* LSB */
12634  00  =3  } ZW_COMMAND_CONFIGURATION_SET_3BYTE_FRAME;
12635  00  =3  
12636  00  =3  /************************************************************/
12637  00  =3  /* Command Configuration Set 4byte command class structs */ 
12638  00  =3  /************************************************************/
12639  00  =3  typedef struct _ZW_COMMAND_CONFIGURATION_SET_4BYTE_FRAME_
12640  00  =3  {
12641  00  =3      BYTE      cmdClass;                     /* The command class */
12642  00  =3      BYTE      cmd;                          /* The command */
12643  00  =3      BYTE      groupingIdentifier;           /**/
12644  00  =3      BYTE      nodeId;                       /**/
12645  00  =3      BYTE      commandLength;                /**/
12646  00  =3      BYTE      commandClassIdentifier;       /**/
12647  00  =3      BYTE      commandIdentifier;            /**/
12648  00  =3      BYTE      commandByte1;                 /* MSB */
12649  00  =3      BYTE      commandByte2;                 
12650  00  =3      BYTE      commandByte3;                 
12651  00  =3      BYTE      commandByte4;                 /* LSB */
12652  00  =3  } ZW_COMMAND_CONFIGURATION_SET_4BYTE_FRAME;
12653  00  =3  
12654  00  =3  /************************************************************/
12655  00  =3  /* Command Records Supported Get command class structs */   
12656  00  =3  /************************************************************/
12657  00  =3  typedef struct _ZW_COMMAND_RECORDS_SUPPORTED_GET_FRAME_
12658  00  =3  {
12659  00  =3      BYTE      cmdClass;                     /* The command class */
12660  00  =3      BYTE      cmd;                          /* The command */
12661  00  =3  } ZW_COMMAND_RECORDS_SUPPORTED_GET_FRAME;
12662  00  =3  
12663  00  =3  /************************************************************/
12664  00  =3  /* Command Records Supported Report command class structs */
12665  00  =3  /************************************************************/
12666  00  =3  typedef struct _ZW_COMMAND_RECORDS_SUPPORTED_REPORT_FRAME_
12667  00  =3  {
12668  00  =3      BYTE      cmdClass;                     /* The command class */
12669  00  =3      BYTE      cmd;                          /* The command */
12670  00  =3      BYTE      properties1;                  /* masked byte */
12671  00  =3      BYTE      freeCommandRecords1;          /* MSB */
12672  00  =3      BYTE      freeCommandRecords2;          /* LSB */
12673  00  =3      BYTE      maxCommandRecords1;           /* MSB */
12674  00  =3      BYTE      maxCommandRecords2;           /* LSB */
12675  00  =3  } ZW_COMMAND_RECORDS_SUPPORTED_REPORT_FRAME;
12676  00  =3  
12677  00  =3  /************************************************************/
12678  00  =3  /* Association Get command class structs */                 
12679  00  =3  /************************************************************/
12680  00  =3  typedef struct _ZW_ASSOCIATION_GET_FRAME_
12681  00  =3  {
12682  00  =3      BYTE      cmdClass;                     /* The command class */
12683  00  =3      BYTE      cmd;                          /* The command */
12684  00  =3      BYTE      groupingIdentifier;           /**/
12685  00  =3  } ZW_ASSOCIATION_GET_FRAME;
12686  00  =3  
12687  00  =3  /************************************************************/
12688  00  =3  /* Association Groupings Get command class structs */       
12689  00  =3  /************************************************************/
12690  00  =3  typedef struct _ZW_ASSOCIATION_GROUPINGS_GET_FRAME_
12691  00  =3  {
12692  00  =3      BYTE      cmdClass;                     /* The command class */
12693  00  =3      BYTE      cmd;                          /* The command */
12694  00  =3  } ZW_ASSOCIATION_GROUPINGS_GET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 221 

12695  00  =3  
12696  00  =3  /************************************************************/
12697  00  =3  /* Association Groupings Report command class structs */    
12698  00  =3  /************************************************************/
12699  00  =3  typedef struct _ZW_ASSOCIATION_GROUPINGS_REPORT_FRAME_
12700  00  =3  {
12701  00  =3      BYTE      cmdClass;                     /* The command class */
12702  00  =3      BYTE      cmd;                          /* The command */
12703  00  =3      BYTE      supportedGroupings;           /**/
12704  00  =3  } ZW_ASSOCIATION_GROUPINGS_REPORT_FRAME;
12705  00  =3  
12706  00  =3  /************************************************************/
12707  00  =3  /* Association Remove 1byte command class structs */        
12708  00  =3  /************************************************************/
12709  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_1BYTE_FRAME_
12710  00  =3  {
12711  00  =3      BYTE      cmdClass;                     /* The command class */
12712  00  =3      BYTE      cmd;                          /* The command */
12713  00  =3      BYTE      groupingIdentifier;           /**/
12714  00  =3      BYTE      nodeId1;                      
12715  00  =3  } ZW_ASSOCIATION_REMOVE_1BYTE_FRAME;
12716  00  =3  
12717  00  =3  /************************************************************/
12718  00  =3  /* Association Remove 2byte command class structs */        
12719  00  =3  /************************************************************/
12720  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_2BYTE_FRAME_
12721  00  =3  {
12722  00  =3      BYTE      cmdClass;                     /* The command class */
12723  00  =3      BYTE      cmd;                          /* The command */
12724  00  =3      BYTE      groupingIdentifier;           /**/
12725  00  =3      BYTE      nodeId1;                      /* MSB */
12726  00  =3      BYTE      nodeId2;                      /* LSB */
12727  00  =3  } ZW_ASSOCIATION_REMOVE_2BYTE_FRAME;
12728  00  =3  
12729  00  =3  /************************************************************/
12730  00  =3  /* Association Remove 3byte command class structs */        
12731  00  =3  /************************************************************/
12732  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_3BYTE_FRAME_
12733  00  =3  {
12734  00  =3      BYTE      cmdClass;                     /* The command class */
12735  00  =3      BYTE      cmd;                          /* The command */
12736  00  =3      BYTE      groupingIdentifier;           /**/
12737  00  =3      BYTE      nodeId1;                      /* MSB */
12738  00  =3      BYTE      nodeId2;                      
12739  00  =3      BYTE      nodeId3;                      /* LSB */
12740  00  =3  } ZW_ASSOCIATION_REMOVE_3BYTE_FRAME;
12741  00  =3  
12742  00  =3  /************************************************************/
12743  00  =3  /* Association Remove 4byte command class structs */        
12744  00  =3  /************************************************************/
12745  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_4BYTE_FRAME_
12746  00  =3  {
12747  00  =3      BYTE      cmdClass;                     /* The command class */
12748  00  =3      BYTE      cmd;                          /* The command */
12749  00  =3      BYTE      groupingIdentifier;           /**/
12750  00  =3      BYTE      nodeId1;                      /* MSB */
12751  00  =3      BYTE      nodeId2;                      
12752  00  =3      BYTE      nodeId3;                      
12753  00  =3      BYTE      nodeId4;                      /* LSB */
12754  00  =3  } ZW_ASSOCIATION_REMOVE_4BYTE_FRAME;
12755  00  =3  
12756  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 222 

12757  00  =3  /* Association Report 1byte command class structs */        
12758  00  =3  /************************************************************/
12759  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_1BYTE_FRAME_
12760  00  =3  {
12761  00  =3      BYTE      cmdClass;                     /* The command class */
12762  00  =3      BYTE      cmd;                          /* The command */
12763  00  =3      BYTE      groupingIdentifier;           /**/
12764  00  =3      BYTE      maxNodesSupported;            /**/
12765  00  =3      BYTE      reportsToFollow;              /**/
12766  00  =3      BYTE      nodeid1;                      
12767  00  =3  } ZW_ASSOCIATION_REPORT_1BYTE_FRAME;
12768  00  =3  
12769  00  =3  /************************************************************/
12770  00  =3  /* Association Report 2byte command class structs */        
12771  00  =3  /************************************************************/
12772  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_2BYTE_FRAME_
12773  00  =3  {
12774  00  =3      BYTE      cmdClass;                     /* The command class */
12775  00  =3      BYTE      cmd;                          /* The command */
12776  00  =3      BYTE      groupingIdentifier;           /**/
12777  00  =3      BYTE      maxNodesSupported;            /**/
12778  00  =3      BYTE      reportsToFollow;              /**/
12779  00  =3      BYTE      nodeid1;                      /* MSB */
12780  00  =3      BYTE      nodeid2;                      /* LSB */
12781  00  =3  } ZW_ASSOCIATION_REPORT_2BYTE_FRAME;
12782  00  =3  
12783  00  =3  /************************************************************/
12784  00  =3  /* Association Report 3byte command class structs */        
12785  00  =3  /************************************************************/
12786  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_3BYTE_FRAME_
12787  00  =3  {
12788  00  =3      BYTE      cmdClass;                     /* The command class */
12789  00  =3      BYTE      cmd;                          /* The command */
12790  00  =3      BYTE      groupingIdentifier;           /**/
12791  00  =3      BYTE      maxNodesSupported;            /**/
12792  00  =3      BYTE      reportsToFollow;              /**/
12793  00  =3      BYTE      nodeid1;                      /* MSB */
12794  00  =3      BYTE      nodeid2;                      
12795  00  =3      BYTE      nodeid3;                      /* LSB */
12796  00  =3  } ZW_ASSOCIATION_REPORT_3BYTE_FRAME;
12797  00  =3  
12798  00  =3  /************************************************************/
12799  00  =3  /* Association Report 4byte command class structs */        
12800  00  =3  /************************************************************/
12801  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_4BYTE_FRAME_
12802  00  =3  {
12803  00  =3      BYTE      cmdClass;                     /* The command class */
12804  00  =3      BYTE      cmd;                          /* The command */
12805  00  =3      BYTE      groupingIdentifier;           /**/
12806  00  =3      BYTE      maxNodesSupported;            /**/
12807  00  =3      BYTE      reportsToFollow;              /**/
12808  00  =3      BYTE      nodeid1;                      /* MSB */
12809  00  =3      BYTE      nodeid2;                      
12810  00  =3      BYTE      nodeid3;                      
12811  00  =3      BYTE      nodeid4;                      /* LSB */
12812  00  =3  } ZW_ASSOCIATION_REPORT_4BYTE_FRAME;
12813  00  =3  
12814  00  =3  /************************************************************/
12815  00  =3  /* Association Set 1byte command class structs */           
12816  00  =3  /************************************************************/
12817  00  =3  typedef struct _ZW_ASSOCIATION_SET_1BYTE_FRAME_
12818  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 223 

12819  00  =3      BYTE      cmdClass;                     /* The command class */
12820  00  =3      BYTE      cmd;                          /* The command */
12821  00  =3      BYTE      groupingIdentifier;           /**/
12822  00  =3      BYTE      nodeId1;                      
12823  00  =3  } ZW_ASSOCIATION_SET_1BYTE_FRAME;
12824  00  =3  
12825  00  =3  /************************************************************/
12826  00  =3  /* Association Set 2byte command class structs */           
12827  00  =3  /************************************************************/
12828  00  =3  typedef struct _ZW_ASSOCIATION_SET_2BYTE_FRAME_
12829  00  =3  {
12830  00  =3      BYTE      cmdClass;                     /* The command class */
12831  00  =3      BYTE      cmd;                          /* The command */
12832  00  =3      BYTE      groupingIdentifier;           /**/
12833  00  =3      BYTE      nodeId1;                      /* MSB */
12834  00  =3      BYTE      nodeId2;                      /* LSB */
12835  00  =3  } ZW_ASSOCIATION_SET_2BYTE_FRAME;
12836  00  =3  
12837  00  =3  /************************************************************/
12838  00  =3  /* Association Set 3byte command class structs */           
12839  00  =3  /************************************************************/
12840  00  =3  typedef struct _ZW_ASSOCIATION_SET_3BYTE_FRAME_
12841  00  =3  {
12842  00  =3      BYTE      cmdClass;                     /* The command class */
12843  00  =3      BYTE      cmd;                          /* The command */
12844  00  =3      BYTE      groupingIdentifier;           /**/
12845  00  =3      BYTE      nodeId1;                      /* MSB */
12846  00  =3      BYTE      nodeId2;                      
12847  00  =3      BYTE      nodeId3;                      /* LSB */
12848  00  =3  } ZW_ASSOCIATION_SET_3BYTE_FRAME;
12849  00  =3  
12850  00  =3  /************************************************************/
12851  00  =3  /* Association Set 4byte command class structs */           
12852  00  =3  /************************************************************/
12853  00  =3  typedef struct _ZW_ASSOCIATION_SET_4BYTE_FRAME_
12854  00  =3  {
12855  00  =3      BYTE      cmdClass;                     /* The command class */
12856  00  =3      BYTE      cmd;                          /* The command */
12857  00  =3      BYTE      groupingIdentifier;           /**/
12858  00  =3      BYTE      nodeId1;                      /* MSB */
12859  00  =3      BYTE      nodeId2;                      
12860  00  =3      BYTE      nodeId3;                      
12861  00  =3      BYTE      nodeId4;                      /* LSB */
12862  00  =3  } ZW_ASSOCIATION_SET_4BYTE_FRAME;
12863  00  =3  
12864  00  =3  /************************************************************/
12865  00  =3  /* Association Get V2 command class structs */              
12866  00  =3  /************************************************************/
12867  00  =3  typedef struct _ZW_ASSOCIATION_GET_V2_FRAME_
12868  00  =3  {
12869  00  =3      BYTE      cmdClass;                     /* The command class */
12870  00  =3      BYTE      cmd;                          /* The command */
12871  00  =3      BYTE      groupingIdentifier;           /**/
12872  00  =3  } ZW_ASSOCIATION_GET_V2_FRAME;
12873  00  =3  
12874  00  =3  /************************************************************/
12875  00  =3  /* Association Groupings Get V2 command class structs */    
12876  00  =3  /************************************************************/
12877  00  =3  typedef struct _ZW_ASSOCIATION_GROUPINGS_GET_V2_FRAME_
12878  00  =3  {
12879  00  =3      BYTE      cmdClass;                     /* The command class */
12880  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 224 

12881  00  =3  } ZW_ASSOCIATION_GROUPINGS_GET_V2_FRAME;
12882  00  =3  
12883  00  =3  /************************************************************/
12884  00  =3  /* Association Groupings Report V2 command class structs */ 
12885  00  =3  /************************************************************/
12886  00  =3  typedef struct _ZW_ASSOCIATION_GROUPINGS_REPORT_V2_FRAME_
12887  00  =3  {
12888  00  =3      BYTE      cmdClass;                     /* The command class */
12889  00  =3      BYTE      cmd;                          /* The command */
12890  00  =3      BYTE      supportedGroupings;           /**/
12891  00  =3  } ZW_ASSOCIATION_GROUPINGS_REPORT_V2_FRAME;
12892  00  =3  
12893  00  =3  /************************************************************/
12894  00  =3  /* Association Remove 1byte V2 command class structs */     
12895  00  =3  /************************************************************/
12896  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_1BYTE_V2_FRAME_
12897  00  =3  {
12898  00  =3      BYTE      cmdClass;                     /* The command class */
12899  00  =3      BYTE      cmd;                          /* The command */
12900  00  =3      BYTE      groupingIdentifier;           /**/
12901  00  =3      BYTE      nodeId1;                      
12902  00  =3  } ZW_ASSOCIATION_REMOVE_1BYTE_V2_FRAME;
12903  00  =3  
12904  00  =3  /************************************************************/
12905  00  =3  /* Association Remove 2byte V2 command class structs */     
12906  00  =3  /************************************************************/
12907  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_2BYTE_V2_FRAME_
12908  00  =3  {
12909  00  =3      BYTE      cmdClass;                     /* The command class */
12910  00  =3      BYTE      cmd;                          /* The command */
12911  00  =3      BYTE      groupingIdentifier;           /**/
12912  00  =3      BYTE      nodeId1;                      /* MSB */
12913  00  =3      BYTE      nodeId2;                      /* LSB */
12914  00  =3  } ZW_ASSOCIATION_REMOVE_2BYTE_V2_FRAME;
12915  00  =3  
12916  00  =3  /************************************************************/
12917  00  =3  /* Association Remove 3byte V2 command class structs */     
12918  00  =3  /************************************************************/
12919  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_3BYTE_V2_FRAME_
12920  00  =3  {
12921  00  =3      BYTE      cmdClass;                     /* The command class */
12922  00  =3      BYTE      cmd;                          /* The command */
12923  00  =3      BYTE      groupingIdentifier;           /**/
12924  00  =3      BYTE      nodeId1;                      /* MSB */
12925  00  =3      BYTE      nodeId2;                      
12926  00  =3      BYTE      nodeId3;                      /* LSB */
12927  00  =3  } ZW_ASSOCIATION_REMOVE_3BYTE_V2_FRAME;
12928  00  =3  
12929  00  =3  /************************************************************/
12930  00  =3  /* Association Remove 4byte V2 command class structs */     
12931  00  =3  /************************************************************/
12932  00  =3  typedef struct _ZW_ASSOCIATION_REMOVE_4BYTE_V2_FRAME_
12933  00  =3  {
12934  00  =3      BYTE      cmdClass;                     /* The command class */
12935  00  =3      BYTE      cmd;                          /* The command */
12936  00  =3      BYTE      groupingIdentifier;           /**/
12937  00  =3      BYTE      nodeId1;                      /* MSB */
12938  00  =3      BYTE      nodeId2;                      
12939  00  =3      BYTE      nodeId3;                      
12940  00  =3      BYTE      nodeId4;                      /* LSB */
12941  00  =3  } ZW_ASSOCIATION_REMOVE_4BYTE_V2_FRAME;
12942  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 225 

12943  00  =3  /************************************************************/
12944  00  =3  /* Association Report 1byte V2 command class structs */     
12945  00  =3  /************************************************************/
12946  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_1BYTE_V2_FRAME_
12947  00  =3  {
12948  00  =3      BYTE      cmdClass;                     /* The command class */
12949  00  =3      BYTE      cmd;                          /* The command */
12950  00  =3      BYTE      groupingIdentifier;           /**/
12951  00  =3      BYTE      maxNodesSupported;            /**/
12952  00  =3      BYTE      reportsToFollow;              /**/
12953  00  =3      BYTE      nodeid1;                      
12954  00  =3  } ZW_ASSOCIATION_REPORT_1BYTE_V2_FRAME;
12955  00  =3  
12956  00  =3  /************************************************************/
12957  00  =3  /* Association Report 2byte V2 command class structs */     
12958  00  =3  /************************************************************/
12959  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_2BYTE_V2_FRAME_
12960  00  =3  {
12961  00  =3      BYTE      cmdClass;                     /* The command class */
12962  00  =3      BYTE      cmd;                          /* The command */
12963  00  =3      BYTE      groupingIdentifier;           /**/
12964  00  =3      BYTE      maxNodesSupported;            /**/
12965  00  =3      BYTE      reportsToFollow;              /**/
12966  00  =3      BYTE      nodeid1;                      /* MSB */
12967  00  =3      BYTE      nodeid2;                      /* LSB */
12968  00  =3  } ZW_ASSOCIATION_REPORT_2BYTE_V2_FRAME;
12969  00  =3  
12970  00  =3  /************************************************************/
12971  00  =3  /* Association Report 3byte V2 command class structs */     
12972  00  =3  /************************************************************/
12973  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_3BYTE_V2_FRAME_
12974  00  =3  {
12975  00  =3      BYTE      cmdClass;                     /* The command class */
12976  00  =3      BYTE      cmd;                          /* The command */
12977  00  =3      BYTE      groupingIdentifier;           /**/
12978  00  =3      BYTE      maxNodesSupported;            /**/
12979  00  =3      BYTE      reportsToFollow;              /**/
12980  00  =3      BYTE      nodeid1;                      /* MSB */
12981  00  =3      BYTE      nodeid2;                      
12982  00  =3      BYTE      nodeid3;                      /* LSB */
12983  00  =3  } ZW_ASSOCIATION_REPORT_3BYTE_V2_FRAME;
12984  00  =3  
12985  00  =3  /************************************************************/
12986  00  =3  /* Association Report 4byte V2 command class structs */     
12987  00  =3  /************************************************************/
12988  00  =3  typedef struct _ZW_ASSOCIATION_REPORT_4BYTE_V2_FRAME_
12989  00  =3  {
12990  00  =3      BYTE      cmdClass;                     /* The command class */
12991  00  =3      BYTE      cmd;                          /* The command */
12992  00  =3      BYTE      groupingIdentifier;           /**/
12993  00  =3      BYTE      maxNodesSupported;            /**/
12994  00  =3      BYTE      reportsToFollow;              /**/
12995  00  =3      BYTE      nodeid1;                      /* MSB */
12996  00  =3      BYTE      nodeid2;                      
12997  00  =3      BYTE      nodeid3;                      
12998  00  =3      BYTE      nodeid4;                      /* LSB */
12999  00  =3  } ZW_ASSOCIATION_REPORT_4BYTE_V2_FRAME;
13000  00  =3  
13001  00  =3  /************************************************************/
13002  00  =3  /* Association Set 1byte V2 command class structs */        
13003  00  =3  /************************************************************/
13004  00  =3  typedef struct _ZW_ASSOCIATION_SET_1BYTE_V2_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 226 

13005  00  =3  {
13006  00  =3      BYTE      cmdClass;                     /* The command class */
13007  00  =3      BYTE      cmd;                          /* The command */
13008  00  =3      BYTE      groupingIdentifier;           /**/
13009  00  =3      BYTE      nodeId1;                      
13010  00  =3  } ZW_ASSOCIATION_SET_1BYTE_V2_FRAME;
13011  00  =3  
13012  00  =3  /************************************************************/
13013  00  =3  /* Association Set 2byte V2 command class structs */        
13014  00  =3  /************************************************************/
13015  00  =3  typedef struct _ZW_ASSOCIATION_SET_2BYTE_V2_FRAME_
13016  00  =3  {
13017  00  =3      BYTE      cmdClass;                     /* The command class */
13018  00  =3      BYTE      cmd;                          /* The command */
13019  00  =3      BYTE      groupingIdentifier;           /**/
13020  00  =3      BYTE      nodeId1;                      /* MSB */
13021  00  =3      BYTE      nodeId2;                      /* LSB */
13022  00  =3  } ZW_ASSOCIATION_SET_2BYTE_V2_FRAME;
13023  00  =3  
13024  00  =3  /************************************************************/
13025  00  =3  /* Association Set 3byte V2 command class structs */        
13026  00  =3  /************************************************************/
13027  00  =3  typedef struct _ZW_ASSOCIATION_SET_3BYTE_V2_FRAME_
13028  00  =3  {
13029  00  =3      BYTE      cmdClass;                     /* The command class */
13030  00  =3      BYTE      cmd;                          /* The command */
13031  00  =3      BYTE      groupingIdentifier;           /**/
13032  00  =3      BYTE      nodeId1;                      /* MSB */
13033  00  =3      BYTE      nodeId2;                      
13034  00  =3      BYTE      nodeId3;                      /* LSB */
13035  00  =3  } ZW_ASSOCIATION_SET_3BYTE_V2_FRAME;
13036  00  =3  
13037  00  =3  /************************************************************/
13038  00  =3  /* Association Set 4byte V2 command class structs */        
13039  00  =3  /************************************************************/
13040  00  =3  typedef struct _ZW_ASSOCIATION_SET_4BYTE_V2_FRAME_
13041  00  =3  {
13042  00  =3      BYTE      cmdClass;                     /* The command class */
13043  00  =3      BYTE      cmd;                          /* The command */
13044  00  =3      BYTE      groupingIdentifier;           /**/
13045  00  =3      BYTE      nodeId1;                      /* MSB */
13046  00  =3      BYTE      nodeId2;                      
13047  00  =3      BYTE      nodeId3;                      
13048  00  =3      BYTE      nodeId4;                      /* LSB */
13049  00  =3  } ZW_ASSOCIATION_SET_4BYTE_V2_FRAME;
13050  00  =3  
13051  00  =3  /************************************************************/
13052  00  =3  /* Association Specific Group Get V2 command class structs */
13053  00  =3  /************************************************************/
13054  00  =3  typedef struct _ZW_ASSOCIATION_SPECIFIC_GROUP_GET_V2_FRAME_
13055  00  =3  {
13056  00  =3      BYTE      cmdClass;                     /* The command class */
13057  00  =3      BYTE      cmd;                          /* The command */
13058  00  =3  } ZW_ASSOCIATION_SPECIFIC_GROUP_GET_V2_FRAME;
13059  00  =3  
13060  00  =3  /************************************************************/
13061  00  =3  /* Association Specific Group Report V2 command class structs */
13062  00  =3  /************************************************************/
13063  00  =3  typedef struct _ZW_ASSOCIATION_SPECIFIC_GROUP_REPORT_V2_FRAME_
13064  00  =3  {
13065  00  =3      BYTE      cmdClass;                     /* The command class */
13066  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 227 

13067  00  =3      BYTE      group;                        /**/
13068  00  =3  } ZW_ASSOCIATION_SPECIFIC_GROUP_REPORT_V2_FRAME;
13069  00  =3  
13070  00  =3  /************************************************************/
13071  00  =3  /* Av Content Browse Md By Letter Get command class structs */
13072  00  =3  /************************************************************/
13073  00  =3  typedef struct _ZW_AV_CONTENT_BROWSE_MD_BY_LETTER_GET_FRAME_
13074  00  =3  {
13075  00  =3      BYTE      cmdClass;                     /* The command class */
13076  00  =3      BYTE      cmd;                          /* The command */
13077  00  =3  } ZW_AV_CONTENT_BROWSE_MD_BY_LETTER_GET_FRAME;
13078  00  =3  
13079  00  =3  /************************************************************/
13080  00  =3  /* Av Content Browse Md By Letter Report command class structs */
13081  00  =3  /************************************************************/
13082  00  =3  typedef struct _ZW_AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT_FRAME_
13083  00  =3  {
13084  00  =3      BYTE      cmdClass;                     /* The command class */
13085  00  =3      BYTE      cmd;                          /* The command */
13086  00  =3  } ZW_AV_CONTENT_BROWSE_MD_BY_LETTER_REPORT_FRAME;
13087  00  =3  
13088  00  =3  /************************************************************/
13089  00  =3  /* Av Content Browse Md Child Count Get command class structs */
13090  00  =3  /************************************************************/
13091  00  =3  typedef struct _ZW_AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET_FRAME_
13092  00  =3  {
13093  00  =3      BYTE      cmdClass;                     /* The command class */
13094  00  =3      BYTE      cmd;                          /* The command */
13095  00  =3  } ZW_AV_CONTENT_BROWSE_MD_CHILD_COUNT_GET_FRAME;
13096  00  =3  
13097  00  =3  /************************************************************/
13098  00  =3  /* Av Content Browse Md Child Count Report command class structs */
13099  00  =3  /************************************************************/
13100  00  =3  typedef struct _ZW_AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT_FRAME_
13101  00  =3  {
13102  00  =3      BYTE      cmdClass;                     /* The command class */
13103  00  =3      BYTE      cmd;                          /* The command */
13104  00  =3  } ZW_AV_CONTENT_BROWSE_MD_CHILD_COUNT_REPORT_FRAME;
13105  00  =3  
13106  00  =3  /************************************************************/
13107  00  =3  /* Av Content Browse Md Get command class structs */        
13108  00  =3  /************************************************************/
13109  00  =3  typedef struct _ZW_AV_CONTENT_BROWSE_MD_GET_FRAME_
13110  00  =3  {
13111  00  =3      BYTE      cmdClass;                     /* The command class */
13112  00  =3      BYTE      cmd;                          /* The command */
13113  00  =3  } ZW_AV_CONTENT_BROWSE_MD_GET_FRAME;
13114  00  =3  
13115  00  =3  /************************************************************/
13116  00  =3  /* Av Content Browse Md Report command class structs */     
13117  00  =3  /************************************************************/
13118  00  =3  typedef struct _ZW_AV_CONTENT_BROWSE_MD_REPORT_FRAME_
13119  00  =3  {
13120  00  =3      BYTE      cmdClass;                     /* The command class */
13121  00  =3      BYTE      cmd;                          /* The command */
13122  00  =3  } ZW_AV_CONTENT_BROWSE_MD_REPORT_FRAME;
13123  00  =3  
13124  00  =3  /************************************************************/
13125  00  =3  /* Av Match Item To Renderer Md Get command class structs */
13126  00  =3  /************************************************************/
13127  00  =3  typedef struct _ZW_AV_MATCH_ITEM_TO_RENDERER_MD_GET_FRAME_
13128  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 228 

13129  00  =3      BYTE      cmdClass;                     /* The command class */
13130  00  =3      BYTE      cmd;                          /* The command */
13131  00  =3  } ZW_AV_MATCH_ITEM_TO_RENDERER_MD_GET_FRAME;
13132  00  =3  
13133  00  =3  /************************************************************/
13134  00  =3  /* Av Match Item To Renderer Md Report command class structs */
13135  00  =3  /************************************************************/
13136  00  =3  typedef struct _ZW_AV_MATCH_ITEM_TO_RENDERER_MD_REPORT_FRAME_
13137  00  =3  {
13138  00  =3      BYTE      cmdClass;                     /* The command class */
13139  00  =3      BYTE      cmd;                          /* The command */
13140  00  =3  } ZW_AV_MATCH_ITEM_TO_RENDERER_MD_REPORT_FRAME;
13141  00  =3  
13142  00  =3  /************************************************************/
13143  00  =3  /* Av Content Search Md Get command class structs */        
13144  00  =3  /************************************************************/
13145  00  =3  typedef struct _ZW_AV_CONTENT_SEARCH_MD_GET_FRAME_
13146  00  =3  {
13147  00  =3      BYTE      cmdClass;                     /* The command class */
13148  00  =3      BYTE      cmd;                          /* The command */
13149  00  =3  } ZW_AV_CONTENT_SEARCH_MD_GET_FRAME;
13150  00  =3  
13151  00  =3  /************************************************************/
13152  00  =3  /* Av Content Search Md Report command class structs */     
13153  00  =3  /************************************************************/
13154  00  =3  typedef struct _ZW_AV_CONTENT_SEARCH_MD_REPORT_FRAME_
13155  00  =3  {
13156  00  =3      BYTE      cmdClass;                     /* The command class */
13157  00  =3      BYTE      cmd;                          /* The command */
13158  00  =3  } ZW_AV_CONTENT_SEARCH_MD_REPORT_FRAME;
13159  00  =3  
13160  00  =3  /************************************************************/
13161  00  =3  /* Av Renderer Status Get command class structs */          
13162  00  =3  /************************************************************/
13163  00  =3  typedef struct _ZW_AV_RENDERER_STATUS_GET_FRAME_
13164  00  =3  {
13165  00  =3      BYTE      cmdClass;                     /* The command class */
13166  00  =3      BYTE      cmd;                          /* The command */
13167  00  =3  } ZW_AV_RENDERER_STATUS_GET_FRAME;
13168  00  =3  
13169  00  =3  /************************************************************/
13170  00  =3  /* Av Renderer Status Report command class structs */       
13171  00  =3  /************************************************************/
13172  00  =3  typedef struct _ZW_AV_RENDERER_STATUS_REPORT_FRAME_
13173  00  =3  {
13174  00  =3      BYTE      cmdClass;                     /* The command class */
13175  00  =3      BYTE      cmd;                          /* The command */
13176  00  =3  } ZW_AV_RENDERER_STATUS_REPORT_FRAME;
13177  00  =3  
13178  00  =3  /************************************************************/
13179  00  =3  /* Av Tagging Md Get command class structs */               
13180  00  =3  /************************************************************/
13181  00  =3  typedef struct _ZW_AV_TAGGING_MD_GET_FRAME_
13182  00  =3  {
13183  00  =3      BYTE      cmdClass;                     /* The command class */
13184  00  =3      BYTE      cmd;                          /* The command */
13185  00  =3  } ZW_AV_TAGGING_MD_GET_FRAME;
13186  00  =3  
13187  00  =3  /************************************************************/
13188  00  =3  /* Av Tagging Md Report command class structs */            
13189  00  =3  /************************************************************/
13190  00  =3  typedef struct _ZW_AV_TAGGING_MD_REPORT_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 229 

13191  00  =3  {
13192  00  =3      BYTE      cmdClass;                     /* The command class */
13193  00  =3      BYTE      cmd;                          /* The command */
13194  00  =3  } ZW_AV_TAGGING_MD_REPORT_FRAME;
13195  00  =3  
13196  00  =3  /************************************************************/
13197  00  =3  /* Basic Tariff Info Get command class structs */           
13198  00  =3  /************************************************************/
13199  00  =3  typedef struct _ZW_BASIC_TARIFF_INFO_GET_FRAME_
13200  00  =3  {
13201  00  =3      BYTE      cmdClass;                     /* The command class */
13202  00  =3      BYTE      cmd;                          /* The command */
13203  00  =3  } ZW_BASIC_TARIFF_INFO_GET_FRAME;
13204  00  =3  
13205  00  =3  /************************************************************/
13206  00  =3  /* Basic Tariff Info Report command class structs */        
13207  00  =3  /************************************************************/
13208  00  =3  typedef struct _ZW_BASIC_TARIFF_INFO_REPORT_FRAME_
13209  00  =3  {
13210  00  =3      BYTE      cmdClass;                     /* The command class */
13211  00  =3      BYTE      cmd;                          /* The command */
13212  00  =3      BYTE      properties1;                  /* masked byte */
13213  00  =3      BYTE      properties2;                  /* masked byte */
13214  00  =3      BYTE      e1RateConsumptionRegister1;   /* MSB */
13215  00  =3      BYTE      e1RateConsumptionRegister2;   
13216  00  =3      BYTE      e1RateConsumptionRegister3;   
13217  00  =3      BYTE      e1RateConsumptionRegister4;   /* LSB */
13218  00  =3      BYTE      e1TimeForNextRateHours;       /**/
13219  00  =3      BYTE      e1TimeForNextRateMinutes;     /**/
13220  00  =3      BYTE      e1TimeForNextRateSeconds;     /**/
13221  00  =3      BYTE      properties3;                  /* masked byte */
13222  00  =3      BYTE      e2RateConsumptionRegister1;   /* MSB */
13223  00  =3      BYTE      e2RateConsumptionRegister2;   
13224  00  =3      BYTE      e2RateConsumptionRegister3;   
13225  00  =3      BYTE      e2RateConsumptionRegister4;   /* LSB */
13226  00  =3  } ZW_BASIC_TARIFF_INFO_REPORT_FRAME;
13227  00  =3  
13228  00  =3  /************************************************************/
13229  00  =3  /* Basic Window Covering Start Level Change command class structs */
13230  00  =3  /************************************************************/
13231  00  =3  typedef struct _ZW_BASIC_WINDOW_COVERING_START_LEVEL_CHANGE_FRAME_
13232  00  =3  {
13233  00  =3      BYTE      cmdClass;                     /* The command class */
13234  00  =3      BYTE      cmd;                          /* The command */
13235  00  =3      BYTE      level;                        /* masked byte */
13236  00  =3  } ZW_BASIC_WINDOW_COVERING_START_LEVEL_CHANGE_FRAME;
13237  00  =3  
13238  00  =3  /************************************************************/
13239  00  =3  /* Basic Window Covering Stop Level Change command class structs */
13240  00  =3  /************************************************************/
13241  00  =3  typedef struct _ZW_BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE_FRAME_
13242  00  =3  {
13243  00  =3      BYTE      cmdClass;                     /* The command class */
13244  00  =3      BYTE      cmd;                          /* The command */
13245  00  =3  } ZW_BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE_FRAME;
13246  00  =3  
13247  00  =3  /************************************************************/
13248  00  =3  /* Basic Get command class structs */                       
13249  00  =3  /************************************************************/
13250  00  =3  typedef struct _ZW_BASIC_GET_FRAME_
13251  00  =3  {
13252  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 230 

13253  00  =3      BYTE      cmd;                          /* The command */
13254  00  =3  } ZW_BASIC_GET_FRAME;
13255  00  =3  
13256  00  =3  /************************************************************/
13257  00  =3  /* Basic Report command class structs */                    
13258  00  =3  /************************************************************/
13259  00  =3  typedef struct _ZW_BASIC_REPORT_FRAME_
13260  00  =3  {
13261  00  =3      BYTE      cmdClass;                     /* The command class */
13262  00  =3      BYTE      cmd;                          /* The command */
13263  00  =3      BYTE      value;                        /**/
13264  00  =3  } ZW_BASIC_REPORT_FRAME;
13265  00  =3  
13266  00  =3  /************************************************************/
13267  00  =3  /* Basic Set command class structs */                       
13268  00  =3  /************************************************************/
13269  00  =3  typedef struct _ZW_BASIC_SET_FRAME_
13270  00  =3  {
13271  00  =3      BYTE      cmdClass;                     /* The command class */
13272  00  =3      BYTE      cmd;                          /* The command */
13273  00  =3      BYTE      value;                        /**/
13274  00  =3  } ZW_BASIC_SET_FRAME;
13275  00  =3  
13276  00  =3  /************************************************************/
13277  00  =3  /* Basic Get V2 command class structs */                    
13278  00  =3  /************************************************************/
13279  00  =3  typedef struct _ZW_BASIC_GET_V2_FRAME_
13280  00  =3  {
13281  00  =3      BYTE      cmdClass;                     /* The command class */
13282  00  =3      BYTE      cmd;                          /* The command */
13283  00  =3  } ZW_BASIC_GET_V2_FRAME;
13284  00  =3  
13285  00  =3  /************************************************************/
13286  00  =3  /* Basic Report V2 command class structs */                 
13287  00  =3  /************************************************************/
13288  00  =3  typedef struct _ZW_BASIC_REPORT_V2_FRAME_
13289  00  =3  {
13290  00  =3      BYTE      cmdClass;                     /* The command class */
13291  00  =3      BYTE      cmd;                          /* The command */
13292  00  =3      BYTE      currentValue;                 /**/
13293  00  =3      BYTE      targetValue;                  /**/
13294  00  =3      BYTE      duration;                     /**/
13295  00  =3  } ZW_BASIC_REPORT_V2_FRAME;
13296  00  =3  
13297  00  =3  /************************************************************/
13298  00  =3  /* Basic Set V2 command class structs */                    
13299  00  =3  /************************************************************/
13300  00  =3  typedef struct _ZW_BASIC_SET_V2_FRAME_
13301  00  =3  {
13302  00  =3      BYTE      cmdClass;                     /* The command class */
13303  00  =3      BYTE      cmd;                          /* The command */
13304  00  =3      BYTE      value;                        /**/
13305  00  =3  } ZW_BASIC_SET_V2_FRAME;
13306  00  =3  
13307  00  =3  /************************************************************/
13308  00  =3  /* Battery Get command class structs */                     
13309  00  =3  /************************************************************/
13310  00  =3  typedef struct _ZW_BATTERY_GET_FRAME_
13311  00  =3  {
13312  00  =3      BYTE      cmdClass;                     /* The command class */
13313  00  =3      BYTE      cmd;                          /* The command */
13314  00  =3  } ZW_BATTERY_GET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 231 

13315  00  =3  
13316  00  =3  /************************************************************/
13317  00  =3  /* Battery Report command class structs */                  
13318  00  =3  /************************************************************/
13319  00  =3  typedef struct _ZW_BATTERY_REPORT_FRAME_
13320  00  =3  {
13321  00  =3      BYTE      cmdClass;                     /* The command class */
13322  00  =3      BYTE      cmd;                          /* The command */
13323  00  =3      BYTE      batteryLevel;                 /**/
13324  00  =3  } ZW_BATTERY_REPORT_FRAME;
13325  00  =3  
13326  00  =3  /************************************************************/
13327  00  =3  /* Chimney Fan Alarm Log Get command class structs */       
13328  00  =3  /************************************************************/
13329  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_LOG_GET_FRAME_
13330  00  =3  {
13331  00  =3      BYTE      cmdClass;                     /* The command class */
13332  00  =3      BYTE      cmd;                          /* The command */
13333  00  =3  } ZW_CHIMNEY_FAN_ALARM_LOG_GET_FRAME;
13334  00  =3  
13335  00  =3  /************************************************************/
13336  00  =3  /* Chimney Fan Alarm Log Report command class structs */    
13337  00  =3  /************************************************************/
13338  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_LOG_REPORT_FRAME_
13339  00  =3  {
13340  00  =3      BYTE      cmdClass;                     /* The command class */
13341  00  =3      BYTE      cmd;                          /* The command */
13342  00  =3      BYTE      alarmEvent1;                  /* masked byte */
13343  00  =3      BYTE      alarmEvent2;                  /* masked byte */
13344  00  =3      BYTE      alarmEvent3;                  /* masked byte */
13345  00  =3      BYTE      alarmEvent4;                  /* masked byte */
13346  00  =3      BYTE      alarmEvent5;                  /* masked byte */
13347  00  =3  } ZW_CHIMNEY_FAN_ALARM_LOG_REPORT_FRAME;
13348  00  =3  
13349  00  =3  /************************************************************/
13350  00  =3  /* Chimney Fan Alarm Log Set command class structs */       
13351  00  =3  /************************************************************/
13352  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_LOG_SET_FRAME_
13353  00  =3  {
13354  00  =3      BYTE      cmdClass;                     /* The command class */
13355  00  =3      BYTE      cmd;                          /* The command */
13356  00  =3      BYTE      message;                      /**/
13357  00  =3  } ZW_CHIMNEY_FAN_ALARM_LOG_SET_FRAME;
13358  00  =3  
13359  00  =3  /************************************************************/
13360  00  =3  /* Chimney Fan Alarm Status Get command class structs */    
13361  00  =3  /************************************************************/
13362  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_STATUS_GET_FRAME_
13363  00  =3  {
13364  00  =3      BYTE      cmdClass;                     /* The command class */
13365  00  =3      BYTE      cmd;                          /* The command */
13366  00  =3  } ZW_CHIMNEY_FAN_ALARM_STATUS_GET_FRAME;
13367  00  =3  
13368  00  =3  /************************************************************/
13369  00  =3  /* Chimney Fan Alarm Status Report command class structs */ 
13370  00  =3  /************************************************************/
13371  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_STATUS_REPORT_FRAME_
13372  00  =3  {
13373  00  =3      BYTE      cmdClass;                     /* The command class */
13374  00  =3      BYTE      cmd;                          /* The command */
13375  00  =3      BYTE      alarmStatus;                  /* masked byte */
13376  00  =3  } ZW_CHIMNEY_FAN_ALARM_STATUS_REPORT_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 232 

13377  00  =3  
13378  00  =3  /************************************************************/
13379  00  =3  /* Chimney Fan Alarm Status Set command class structs */    
13380  00  =3  /************************************************************/
13381  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_STATUS_SET_FRAME_
13382  00  =3  {
13383  00  =3      BYTE      cmdClass;                     /* The command class */
13384  00  =3      BYTE      cmd;                          /* The command */
13385  00  =3      BYTE      message;                      /* masked byte */
13386  00  =3  } ZW_CHIMNEY_FAN_ALARM_STATUS_SET_FRAME;
13387  00  =3  
13388  00  =3  /************************************************************/
13389  00  =3  /* Chimney Fan Alarm Temp Get command class structs */      
13390  00  =3  /************************************************************/
13391  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_GET_FRAME_
13392  00  =3  {
13393  00  =3      BYTE      cmdClass;                     /* The command class */
13394  00  =3      BYTE      cmd;                          /* The command */
13395  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_GET_FRAME;
13396  00  =3  
13397  00  =3  /************************************************************/
13398  00  =3  /* Chimney Fan Alarm Temp Report 1byte command class structs */
13399  00  =3  /************************************************************/
13400  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_1BYTE_FRAME_
13401  00  =3  {
13402  00  =3      BYTE      cmdClass;                     /* The command class */
13403  00  =3      BYTE      cmd;                          /* The command */
13404  00  =3      BYTE      properties1;                  /* masked byte */
13405  00  =3      BYTE      value1;                       
13406  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_1BYTE_FRAME;
13407  00  =3  
13408  00  =3  /************************************************************/
13409  00  =3  /* Chimney Fan Alarm Temp Report 2byte command class structs */
13410  00  =3  /************************************************************/
13411  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_2BYTE_FRAME_
13412  00  =3  {
13413  00  =3      BYTE      cmdClass;                     /* The command class */
13414  00  =3      BYTE      cmd;                          /* The command */
13415  00  =3      BYTE      properties1;                  /* masked byte */
13416  00  =3      BYTE      value1;                       /* MSB */
13417  00  =3      BYTE      value2;                       /* LSB */
13418  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_2BYTE_FRAME;
13419  00  =3  
13420  00  =3  /************************************************************/
13421  00  =3  /* Chimney Fan Alarm Temp Report 3byte command class structs */
13422  00  =3  /************************************************************/
13423  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_3BYTE_FRAME_
13424  00  =3  {
13425  00  =3      BYTE      cmdClass;                     /* The command class */
13426  00  =3      BYTE      cmd;                          /* The command */
13427  00  =3      BYTE      properties1;                  /* masked byte */
13428  00  =3      BYTE      value1;                       /* MSB */
13429  00  =3      BYTE      value2;                       
13430  00  =3      BYTE      value3;                       /* LSB */
13431  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_3BYTE_FRAME;
13432  00  =3  
13433  00  =3  /************************************************************/
13434  00  =3  /* Chimney Fan Alarm Temp Report 4byte command class structs */
13435  00  =3  /************************************************************/
13436  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_4BYTE_FRAME_
13437  00  =3  {
13438  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 233 

13439  00  =3      BYTE      cmd;                          /* The command */
13440  00  =3      BYTE      properties1;                  /* masked byte */
13441  00  =3      BYTE      value1;                       /* MSB */
13442  00  =3      BYTE      value2;                       
13443  00  =3      BYTE      value3;                       
13444  00  =3      BYTE      value4;                       /* LSB */
13445  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_REPORT_4BYTE_FRAME;
13446  00  =3  
13447  00  =3  /************************************************************/
13448  00  =3  /* Chimney Fan Alarm Temp Set 1byte command class structs */
13449  00  =3  /************************************************************/
13450  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_SET_1BYTE_FRAME_
13451  00  =3  {
13452  00  =3      BYTE      cmdClass;                     /* The command class */
13453  00  =3      BYTE      cmd;                          /* The command */
13454  00  =3      BYTE      properties1;                  /* masked byte */
13455  00  =3      BYTE      value1;                       
13456  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_SET_1BYTE_FRAME;
13457  00  =3  
13458  00  =3  /************************************************************/
13459  00  =3  /* Chimney Fan Alarm Temp Set 2byte command class structs */
13460  00  =3  /************************************************************/
13461  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_SET_2BYTE_FRAME_
13462  00  =3  {
13463  00  =3      BYTE      cmdClass;                     /* The command class */
13464  00  =3      BYTE      cmd;                          /* The command */
13465  00  =3      BYTE      properties1;                  /* masked byte */
13466  00  =3      BYTE      value1;                       /* MSB */
13467  00  =3      BYTE      value2;                       /* LSB */
13468  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_SET_2BYTE_FRAME;
13469  00  =3  
13470  00  =3  /************************************************************/
13471  00  =3  /* Chimney Fan Alarm Temp Set 3byte command class structs */
13472  00  =3  /************************************************************/
13473  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_SET_3BYTE_FRAME_
13474  00  =3  {
13475  00  =3      BYTE      cmdClass;                     /* The command class */
13476  00  =3      BYTE      cmd;                          /* The command */
13477  00  =3      BYTE      properties1;                  /* masked byte */
13478  00  =3      BYTE      value1;                       /* MSB */
13479  00  =3      BYTE      value2;                       
13480  00  =3      BYTE      value3;                       /* LSB */
13481  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_SET_3BYTE_FRAME;
13482  00  =3  
13483  00  =3  /************************************************************/
13484  00  =3  /* Chimney Fan Alarm Temp Set 4byte command class structs */
13485  00  =3  /************************************************************/
13486  00  =3  typedef struct _ZW_CHIMNEY_FAN_ALARM_TEMP_SET_4BYTE_FRAME_
13487  00  =3  {
13488  00  =3      BYTE      cmdClass;                     /* The command class */
13489  00  =3      BYTE      cmd;                          /* The command */
13490  00  =3      BYTE      properties1;                  /* masked byte */
13491  00  =3      BYTE      value1;                       /* MSB */
13492  00  =3      BYTE      value2;                       
13493  00  =3      BYTE      value3;                       
13494  00  =3      BYTE      value4;                       /* LSB */
13495  00  =3  } ZW_CHIMNEY_FAN_ALARM_TEMP_SET_4BYTE_FRAME;
13496  00  =3  
13497  00  =3  /************************************************************/
13498  00  =3  /* Chimney Fan Boost Time Get command class structs */      
13499  00  =3  /************************************************************/
13500  00  =3  typedef struct _ZW_CHIMNEY_FAN_BOOST_TIME_GET_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 234 

13501  00  =3  {
13502  00  =3      BYTE      cmdClass;                     /* The command class */
13503  00  =3      BYTE      cmd;                          /* The command */
13504  00  =3  } ZW_CHIMNEY_FAN_BOOST_TIME_GET_FRAME;
13505  00  =3  
13506  00  =3  /************************************************************/
13507  00  =3  /* Chimney Fan Boost Time Report command class structs */   
13508  00  =3  /************************************************************/
13509  00  =3  typedef struct _ZW_CHIMNEY_FAN_BOOST_TIME_REPORT_FRAME_
13510  00  =3  {
13511  00  =3      BYTE      cmdClass;                     /* The command class */
13512  00  =3      BYTE      cmd;                          /* The command */
13513  00  =3      BYTE      time;                         /**/
13514  00  =3  } ZW_CHIMNEY_FAN_BOOST_TIME_REPORT_FRAME;
13515  00  =3  
13516  00  =3  /************************************************************/
13517  00  =3  /* Chimney Fan Boost Time Set command class structs */      
13518  00  =3  /************************************************************/
13519  00  =3  typedef struct _ZW_CHIMNEY_FAN_BOOST_TIME_SET_FRAME_
13520  00  =3  {
13521  00  =3      BYTE      cmdClass;                     /* The command class */
13522  00  =3      BYTE      cmd;                          /* The command */
13523  00  =3      BYTE      time;                         /**/
13524  00  =3  } ZW_CHIMNEY_FAN_BOOST_TIME_SET_FRAME;
13525  00  =3  
13526  00  =3  /************************************************************/
13527  00  =3  /* Chimney Fan Default Set command class structs */         
13528  00  =3  /************************************************************/
13529  00  =3  typedef struct _ZW_CHIMNEY_FAN_DEFAULT_SET_FRAME_
13530  00  =3  {
13531  00  =3      BYTE      cmdClass;                     /* The command class */
13532  00  =3      BYTE      cmd;                          /* The command */
13533  00  =3  } ZW_CHIMNEY_FAN_DEFAULT_SET_FRAME;
13534  00  =3  
13535  00  =3  /************************************************************/
13536  00  =3  /* Chimney Fan Min Speed Get command class structs */       
13537  00  =3  /************************************************************/
13538  00  =3  typedef struct _ZW_CHIMNEY_FAN_MIN_SPEED_GET_FRAME_
13539  00  =3  {
13540  00  =3      BYTE      cmdClass;                     /* The command class */
13541  00  =3      BYTE      cmd;                          /* The command */
13542  00  =3  } ZW_CHIMNEY_FAN_MIN_SPEED_GET_FRAME;
13543  00  =3  
13544  00  =3  /************************************************************/
13545  00  =3  /* Chimney Fan Min Speed Report command class structs */    
13546  00  =3  /************************************************************/
13547  00  =3  typedef struct _ZW_CHIMNEY_FAN_MIN_SPEED_REPORT_FRAME_
13548  00  =3  {
13549  00  =3      BYTE      cmdClass;                     /* The command class */
13550  00  =3      BYTE      cmd;                          /* The command */
13551  00  =3      BYTE      minSpeed;                     /**/
13552  00  =3  } ZW_CHIMNEY_FAN_MIN_SPEED_REPORT_FRAME;
13553  00  =3  
13554  00  =3  /************************************************************/
13555  00  =3  /* Chimney Fan Min Speed Set command class structs */       
13556  00  =3  /************************************************************/
13557  00  =3  typedef struct _ZW_CHIMNEY_FAN_MIN_SPEED_SET_FRAME_
13558  00  =3  {
13559  00  =3      BYTE      cmdClass;                     /* The command class */
13560  00  =3      BYTE      cmd;                          /* The command */
13561  00  =3      BYTE      minSpeed;                     /**/
13562  00  =3  } ZW_CHIMNEY_FAN_MIN_SPEED_SET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 235 

13563  00  =3  
13564  00  =3  /************************************************************/
13565  00  =3  /* Chimney Fan Mode Get command class structs */            
13566  00  =3  /************************************************************/
13567  00  =3  typedef struct _ZW_CHIMNEY_FAN_MODE_GET_FRAME_
13568  00  =3  {
13569  00  =3      BYTE      cmdClass;                     /* The command class */
13570  00  =3      BYTE      cmd;                          /* The command */
13571  00  =3  } ZW_CHIMNEY_FAN_MODE_GET_FRAME;
13572  00  =3  
13573  00  =3  /************************************************************/
13574  00  =3  /* Chimney Fan Mode Report command class structs */         
13575  00  =3  /************************************************************/
13576  00  =3  typedef struct _ZW_CHIMNEY_FAN_MODE_REPORT_FRAME_
13577  00  =3  {
13578  00  =3      BYTE      cmdClass;                     /* The command class */
13579  00  =3      BYTE      cmd;                          /* The command */
13580  00  =3      BYTE      mode;                         /**/
13581  00  =3  } ZW_CHIMNEY_FAN_MODE_REPORT_FRAME;
13582  00  =3  
13583  00  =3  /************************************************************/
13584  00  =3  /* Chimney Fan Mode Set command class structs */            
13585  00  =3  /************************************************************/
13586  00  =3  typedef struct _ZW_CHIMNEY_FAN_MODE_SET_FRAME_
13587  00  =3  {
13588  00  =3      BYTE      cmdClass;                     /* The command class */
13589  00  =3      BYTE      cmd;                          /* The command */
13590  00  =3      BYTE      mode;                         /**/
13591  00  =3  } ZW_CHIMNEY_FAN_MODE_SET_FRAME;
13592  00  =3  
13593  00  =3  /************************************************************/
13594  00  =3  /* Chimney Fan Setup Get command class structs */           
13595  00  =3  /************************************************************/
13596  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_GET_FRAME_
13597  00  =3  {
13598  00  =3      BYTE      cmdClass;                     /* The command class */
13599  00  =3      BYTE      cmd;                          /* The command */
13600  00  =3  } ZW_CHIMNEY_FAN_SETUP_GET_FRAME;
13601  00  =3  
13602  00  =3  /************************************************************/
13603  00  =3  /* Chimney Fan Setup Report 1byte command class structs */  
13604  00  =3  /************************************************************/
13605  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_REPORT_1BYTE_FRAME_
13606  00  =3  {
13607  00  =3      BYTE      cmdClass;                     /* The command class */
13608  00  =3      BYTE      cmd;                          /* The command */
13609  00  =3      BYTE      mode;                         /**/
13610  00  =3      BYTE      boostTime;                    /**/
13611  00  =3      BYTE      stopTime;                     /**/
13612  00  =3      BYTE      minSpeed;                     /**/
13613  00  =3      BYTE      properties1;                  /* masked byte */
13614  00  =3      BYTE      startTemperature1;            
13615  00  =3      BYTE      properties2;                  /* masked byte */
13616  00  =3      BYTE      stopTemperature1;             
13617  00  =3      BYTE      properties3;                  /* masked byte */
13618  00  =3      BYTE      alarmTemperatureValue1;       
13619  00  =3  } ZW_CHIMNEY_FAN_SETUP_REPORT_1BYTE_FRAME;
13620  00  =3  
13621  00  =3  /************************************************************/
13622  00  =3  /* Chimney Fan Setup Report 2byte command class structs */  
13623  00  =3  /************************************************************/
13624  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_REPORT_2BYTE_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 236 

13625  00  =3  {
13626  00  =3      BYTE      cmdClass;                     /* The command class */
13627  00  =3      BYTE      cmd;                          /* The command */
13628  00  =3      BYTE      mode;                         /**/
13629  00  =3      BYTE      boostTime;                    /**/
13630  00  =3      BYTE      stopTime;                     /**/
13631  00  =3      BYTE      minSpeed;                     /**/
13632  00  =3      BYTE      properties1;                  /* masked byte */
13633  00  =3      BYTE      startTemperature1;            /* MSB */
13634  00  =3      BYTE      startTemperature2;            /* LSB */
13635  00  =3      BYTE      properties2;                  /* masked byte */
13636  00  =3      BYTE      stopTemperature1;             /* MSB */
13637  00  =3      BYTE      stopTemperature2;             /* LSB */
13638  00  =3      BYTE      properties3;                  /* masked byte */
13639  00  =3      BYTE      alarmTemperatureValue1;       /* MSB */
13640  00  =3      BYTE      alarmTemperatureValue2;       /* LSB */
13641  00  =3  } ZW_CHIMNEY_FAN_SETUP_REPORT_2BYTE_FRAME;
13642  00  =3  
13643  00  =3  /************************************************************/
13644  00  =3  /* Chimney Fan Setup Report 3byte command class structs */  
13645  00  =3  /************************************************************/
13646  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_REPORT_3BYTE_FRAME_
13647  00  =3  {
13648  00  =3      BYTE      cmdClass;                     /* The command class */
13649  00  =3      BYTE      cmd;                          /* The command */
13650  00  =3      BYTE      mode;                         /**/
13651  00  =3      BYTE      boostTime;                    /**/
13652  00  =3      BYTE      stopTime;                     /**/
13653  00  =3      BYTE      minSpeed;                     /**/
13654  00  =3      BYTE      properties1;                  /* masked byte */
13655  00  =3      BYTE      startTemperature1;            /* MSB */
13656  00  =3      BYTE      startTemperature2;            
13657  00  =3      BYTE      startTemperature3;            /* LSB */
13658  00  =3      BYTE      properties2;                  /* masked byte */
13659  00  =3      BYTE      stopTemperature1;             /* MSB */
13660  00  =3      BYTE      stopTemperature2;             
13661  00  =3      BYTE      stopTemperature3;             /* LSB */
13662  00  =3      BYTE      properties3;                  /* masked byte */
13663  00  =3      BYTE      alarmTemperatureValue1;       /* MSB */
13664  00  =3      BYTE      alarmTemperatureValue2;       
13665  00  =3      BYTE      alarmTemperatureValue3;       /* LSB */
13666  00  =3  } ZW_CHIMNEY_FAN_SETUP_REPORT_3BYTE_FRAME;
13667  00  =3  
13668  00  =3  /************************************************************/
13669  00  =3  /* Chimney Fan Setup Report 4byte command class structs */  
13670  00  =3  /************************************************************/
13671  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_REPORT_4BYTE_FRAME_
13672  00  =3  {
13673  00  =3      BYTE      cmdClass;                     /* The command class */
13674  00  =3      BYTE      cmd;                          /* The command */
13675  00  =3      BYTE      mode;                         /**/
13676  00  =3      BYTE      boostTime;                    /**/
13677  00  =3      BYTE      stopTime;                     /**/
13678  00  =3      BYTE      minSpeed;                     /**/
13679  00  =3      BYTE      properties1;                  /* masked byte */
13680  00  =3      BYTE      startTemperature1;            /* MSB */
13681  00  =3      BYTE      startTemperature2;            
13682  00  =3      BYTE      startTemperature3;            
13683  00  =3      BYTE      startTemperature4;            /* LSB */
13684  00  =3      BYTE      properties2;                  /* masked byte */
13685  00  =3      BYTE      stopTemperature1;             /* MSB */
13686  00  =3      BYTE      stopTemperature2;             
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 237 

13687  00  =3      BYTE      stopTemperature3;             
13688  00  =3      BYTE      stopTemperature4;             /* LSB */
13689  00  =3      BYTE      properties3;                  /* masked byte */
13690  00  =3      BYTE      alarmTemperatureValue1;       /* MSB */
13691  00  =3      BYTE      alarmTemperatureValue2;       
13692  00  =3      BYTE      alarmTemperatureValue3;       
13693  00  =3      BYTE      alarmTemperatureValue4;       /* LSB */
13694  00  =3  } ZW_CHIMNEY_FAN_SETUP_REPORT_4BYTE_FRAME;
13695  00  =3  
13696  00  =3  /************************************************************/
13697  00  =3  /* Chimney Fan Setup Set 1byte command class structs */     
13698  00  =3  /************************************************************/
13699  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_SET_1BYTE_FRAME_
13700  00  =3  {
13701  00  =3      BYTE      cmdClass;                     /* The command class */
13702  00  =3      BYTE      cmd;                          /* The command */
13703  00  =3      BYTE      mode;                         /**/
13704  00  =3      BYTE      boostTime;                    /**/
13705  00  =3      BYTE      stopTime;                     /**/
13706  00  =3      BYTE      minSpeed;                     /**/
13707  00  =3      BYTE      properties1;                  /* masked byte */
13708  00  =3      BYTE      startTemperature1;            
13709  00  =3      BYTE      properties2;                  /* masked byte */
13710  00  =3      BYTE      stopTemperature1;             
13711  00  =3      BYTE      properties3;                  /* masked byte */
13712  00  =3      BYTE      alarmTemperatureValue1;       
13713  00  =3  } ZW_CHIMNEY_FAN_SETUP_SET_1BYTE_FRAME;
13714  00  =3  
13715  00  =3  /************************************************************/
13716  00  =3  /* Chimney Fan Setup Set 2byte command class structs */     
13717  00  =3  /************************************************************/
13718  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_SET_2BYTE_FRAME_
13719  00  =3  {
13720  00  =3      BYTE      cmdClass;                     /* The command class */
13721  00  =3      BYTE      cmd;                          /* The command */
13722  00  =3      BYTE      mode;                         /**/
13723  00  =3      BYTE      boostTime;                    /**/
13724  00  =3      BYTE      stopTime;                     /**/
13725  00  =3      BYTE      minSpeed;                     /**/
13726  00  =3      BYTE      properties1;                  /* masked byte */
13727  00  =3      BYTE      startTemperature1;            /* MSB */
13728  00  =3      BYTE      startTemperature2;            /* LSB */
13729  00  =3      BYTE      properties2;                  /* masked byte */
13730  00  =3      BYTE      stopTemperature1;             /* MSB */
13731  00  =3      BYTE      stopTemperature2;             /* LSB */
13732  00  =3      BYTE      properties3;                  /* masked byte */
13733  00  =3      BYTE      alarmTemperatureValue1;       /* MSB */
13734  00  =3      BYTE      alarmTemperatureValue2;       /* LSB */
13735  00  =3  } ZW_CHIMNEY_FAN_SETUP_SET_2BYTE_FRAME;
13736  00  =3  
13737  00  =3  /************************************************************/
13738  00  =3  /* Chimney Fan Setup Set 3byte command class structs */     
13739  00  =3  /************************************************************/
13740  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_SET_3BYTE_FRAME_
13741  00  =3  {
13742  00  =3      BYTE      cmdClass;                     /* The command class */
13743  00  =3      BYTE      cmd;                          /* The command */
13744  00  =3      BYTE      mode;                         /**/
13745  00  =3      BYTE      boostTime;                    /**/
13746  00  =3      BYTE      stopTime;                     /**/
13747  00  =3      BYTE      minSpeed;                     /**/
13748  00  =3      BYTE      properties1;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 238 

13749  00  =3      BYTE      startTemperature1;            /* MSB */
13750  00  =3      BYTE      startTemperature2;            
13751  00  =3      BYTE      startTemperature3;            /* LSB */
13752  00  =3      BYTE      properties2;                  /* masked byte */
13753  00  =3      BYTE      stopTemperature1;             /* MSB */
13754  00  =3      BYTE      stopTemperature2;             
13755  00  =3      BYTE      stopTemperature3;             /* LSB */
13756  00  =3      BYTE      properties3;                  /* masked byte */
13757  00  =3      BYTE      alarmTemperatureValue1;       /* MSB */
13758  00  =3      BYTE      alarmTemperatureValue2;       
13759  00  =3      BYTE      alarmTemperatureValue3;       /* LSB */
13760  00  =3  } ZW_CHIMNEY_FAN_SETUP_SET_3BYTE_FRAME;
13761  00  =3  
13762  00  =3  /************************************************************/
13763  00  =3  /* Chimney Fan Setup Set 4byte command class structs */     
13764  00  =3  /************************************************************/
13765  00  =3  typedef struct _ZW_CHIMNEY_FAN_SETUP_SET_4BYTE_FRAME_
13766  00  =3  {
13767  00  =3      BYTE      cmdClass;                     /* The command class */
13768  00  =3      BYTE      cmd;                          /* The command */
13769  00  =3      BYTE      mode;                         /**/
13770  00  =3      BYTE      boostTime;                    /**/
13771  00  =3      BYTE      stopTime;                     /**/
13772  00  =3      BYTE      minSpeed;                     /**/
13773  00  =3      BYTE      properties1;                  /* masked byte */
13774  00  =3      BYTE      startTemperature1;            /* MSB */
13775  00  =3      BYTE      startTemperature2;            
13776  00  =3      BYTE      startTemperature3;            
13777  00  =3      BYTE      startTemperature4;            /* LSB */
13778  00  =3      BYTE      properties2;                  /* masked byte */
13779  00  =3      BYTE      stopTemperature1;             /* MSB */
13780  00  =3      BYTE      stopTemperature2;             
13781  00  =3      BYTE      stopTemperature3;             
13782  00  =3      BYTE      stopTemperature4;             /* LSB */
13783  00  =3      BYTE      properties3;                  /* masked byte */
13784  00  =3      BYTE      alarmTemperatureValue1;       /* MSB */
13785  00  =3      BYTE      alarmTemperatureValue2;       
13786  00  =3      BYTE      alarmTemperatureValue3;       
13787  00  =3      BYTE      alarmTemperatureValue4;       /* LSB */
13788  00  =3  } ZW_CHIMNEY_FAN_SETUP_SET_4BYTE_FRAME;
13789  00  =3  
13790  00  =3  /************************************************************/
13791  00  =3  /* Chimney Fan Speed Get command class structs */           
13792  00  =3  /************************************************************/
13793  00  =3  typedef struct _ZW_CHIMNEY_FAN_SPEED_GET_FRAME_
13794  00  =3  {
13795  00  =3      BYTE      cmdClass;                     /* The command class */
13796  00  =3      BYTE      cmd;                          /* The command */
13797  00  =3  } ZW_CHIMNEY_FAN_SPEED_GET_FRAME;
13798  00  =3  
13799  00  =3  /************************************************************/
13800  00  =3  /* Chimney Fan Speed Report command class structs */        
13801  00  =3  /************************************************************/
13802  00  =3  typedef struct _ZW_CHIMNEY_FAN_SPEED_REPORT_FRAME_
13803  00  =3  {
13804  00  =3      BYTE      cmdClass;                     /* The command class */
13805  00  =3      BYTE      cmd;                          /* The command */
13806  00  =3      BYTE      speed;                        /**/
13807  00  =3  } ZW_CHIMNEY_FAN_SPEED_REPORT_FRAME;
13808  00  =3  
13809  00  =3  /************************************************************/
13810  00  =3  /* Chimney Fan Speed Set command class structs */           
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 239 

13811  00  =3  /************************************************************/
13812  00  =3  typedef struct _ZW_CHIMNEY_FAN_SPEED_SET_FRAME_
13813  00  =3  {
13814  00  =3      BYTE      cmdClass;                     /* The command class */
13815  00  =3      BYTE      cmd;                          /* The command */
13816  00  =3      BYTE      speed;                        /**/
13817  00  =3  } ZW_CHIMNEY_FAN_SPEED_SET_FRAME;
13818  00  =3  
13819  00  =3  /************************************************************/
13820  00  =3  /* Chimney Fan Start Temp Get command class structs */      
13821  00  =3  /************************************************************/
13822  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_GET_FRAME_
13823  00  =3  {
13824  00  =3      BYTE      cmdClass;                     /* The command class */
13825  00  =3      BYTE      cmd;                          /* The command */
13826  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_GET_FRAME;
13827  00  =3  
13828  00  =3  /************************************************************/
13829  00  =3  /* Chimney Fan Start Temp Report 1byte command class structs */
13830  00  =3  /************************************************************/
13831  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_REPORT_1BYTE_FRAME_
13832  00  =3  {
13833  00  =3      BYTE      cmdClass;                     /* The command class */
13834  00  =3      BYTE      cmd;                          /* The command */
13835  00  =3      BYTE      properties1;                  /* masked byte */
13836  00  =3      BYTE      value1;                       
13837  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_REPORT_1BYTE_FRAME;
13838  00  =3  
13839  00  =3  /************************************************************/
13840  00  =3  /* Chimney Fan Start Temp Report 2byte command class structs */
13841  00  =3  /************************************************************/
13842  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_REPORT_2BYTE_FRAME_
13843  00  =3  {
13844  00  =3      BYTE      cmdClass;                     /* The command class */
13845  00  =3      BYTE      cmd;                          /* The command */
13846  00  =3      BYTE      properties1;                  /* masked byte */
13847  00  =3      BYTE      value1;                       /* MSB */
13848  00  =3      BYTE      value2;                       /* LSB */
13849  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_REPORT_2BYTE_FRAME;
13850  00  =3  
13851  00  =3  /************************************************************/
13852  00  =3  /* Chimney Fan Start Temp Report 3byte command class structs */
13853  00  =3  /************************************************************/
13854  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_REPORT_3BYTE_FRAME_
13855  00  =3  {
13856  00  =3      BYTE      cmdClass;                     /* The command class */
13857  00  =3      BYTE      cmd;                          /* The command */
13858  00  =3      BYTE      properties1;                  /* masked byte */
13859  00  =3      BYTE      value1;                       /* MSB */
13860  00  =3      BYTE      value2;                       
13861  00  =3      BYTE      value3;                       /* LSB */
13862  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_REPORT_3BYTE_FRAME;
13863  00  =3  
13864  00  =3  /************************************************************/
13865  00  =3  /* Chimney Fan Start Temp Report 4byte command class structs */
13866  00  =3  /************************************************************/
13867  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_REPORT_4BYTE_FRAME_
13868  00  =3  {
13869  00  =3      BYTE      cmdClass;                     /* The command class */
13870  00  =3      BYTE      cmd;                          /* The command */
13871  00  =3      BYTE      properties1;                  /* masked byte */
13872  00  =3      BYTE      value1;                       /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 240 

13873  00  =3      BYTE      value2;                       
13874  00  =3      BYTE      value3;                       
13875  00  =3      BYTE      value4;                       /* LSB */
13876  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_REPORT_4BYTE_FRAME;
13877  00  =3  
13878  00  =3  /************************************************************/
13879  00  =3  /* Chimney Fan Start Temp Set 1byte command class structs */
13880  00  =3  /************************************************************/
13881  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_SET_1BYTE_FRAME_
13882  00  =3  {
13883  00  =3      BYTE      cmdClass;                     /* The command class */
13884  00  =3      BYTE      cmd;                          /* The command */
13885  00  =3      BYTE      properties1;                  /* masked byte */
13886  00  =3      BYTE      value1;                       
13887  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_SET_1BYTE_FRAME;
13888  00  =3  
13889  00  =3  /************************************************************/
13890  00  =3  /* Chimney Fan Start Temp Set 2byte command class structs */
13891  00  =3  /************************************************************/
13892  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_SET_2BYTE_FRAME_
13893  00  =3  {
13894  00  =3      BYTE      cmdClass;                     /* The command class */
13895  00  =3      BYTE      cmd;                          /* The command */
13896  00  =3      BYTE      properties1;                  /* masked byte */
13897  00  =3      BYTE      value1;                       /* MSB */
13898  00  =3      BYTE      value2;                       /* LSB */
13899  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_SET_2BYTE_FRAME;
13900  00  =3  
13901  00  =3  /************************************************************/
13902  00  =3  /* Chimney Fan Start Temp Set 3byte command class structs */
13903  00  =3  /************************************************************/
13904  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_SET_3BYTE_FRAME_
13905  00  =3  {
13906  00  =3      BYTE      cmdClass;                     /* The command class */
13907  00  =3      BYTE      cmd;                          /* The command */
13908  00  =3      BYTE      properties1;                  /* masked byte */
13909  00  =3      BYTE      value1;                       /* MSB */
13910  00  =3      BYTE      value2;                       
13911  00  =3      BYTE      value3;                       /* LSB */
13912  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_SET_3BYTE_FRAME;
13913  00  =3  
13914  00  =3  /************************************************************/
13915  00  =3  /* Chimney Fan Start Temp Set 4byte command class structs */
13916  00  =3  /************************************************************/
13917  00  =3  typedef struct _ZW_CHIMNEY_FAN_START_TEMP_SET_4BYTE_FRAME_
13918  00  =3  {
13919  00  =3      BYTE      cmdClass;                     /* The command class */
13920  00  =3      BYTE      cmd;                          /* The command */
13921  00  =3      BYTE      properties1;                  /* masked byte */
13922  00  =3      BYTE      value1;                       /* MSB */
13923  00  =3      BYTE      value2;                       
13924  00  =3      BYTE      value3;                       
13925  00  =3      BYTE      value4;                       /* LSB */
13926  00  =3  } ZW_CHIMNEY_FAN_START_TEMP_SET_4BYTE_FRAME;
13927  00  =3  
13928  00  =3  /************************************************************/
13929  00  =3  /* Chimney Fan State Get command class structs */           
13930  00  =3  /************************************************************/
13931  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATE_GET_FRAME_
13932  00  =3  {
13933  00  =3      BYTE      cmdClass;                     /* The command class */
13934  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 241 

13935  00  =3  } ZW_CHIMNEY_FAN_STATE_GET_FRAME;
13936  00  =3  
13937  00  =3  /************************************************************/
13938  00  =3  /* Chimney Fan State Report command class structs */        
13939  00  =3  /************************************************************/
13940  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATE_REPORT_FRAME_
13941  00  =3  {
13942  00  =3      BYTE      cmdClass;                     /* The command class */
13943  00  =3      BYTE      cmd;                          /* The command */
13944  00  =3      BYTE      state;                        /**/
13945  00  =3  } ZW_CHIMNEY_FAN_STATE_REPORT_FRAME;
13946  00  =3  
13947  00  =3  /************************************************************/
13948  00  =3  /* Chimney Fan State Set command class structs */           
13949  00  =3  /************************************************************/
13950  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATE_SET_FRAME_
13951  00  =3  {
13952  00  =3      BYTE      cmdClass;                     /* The command class */
13953  00  =3      BYTE      cmd;                          /* The command */
13954  00  =3      BYTE      state;                        /**/
13955  00  =3  } ZW_CHIMNEY_FAN_STATE_SET_FRAME;
13956  00  =3  
13957  00  =3  /************************************************************/
13958  00  =3  /* Chimney Fan Status Get command class structs */          
13959  00  =3  /************************************************************/
13960  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATUS_GET_FRAME_
13961  00  =3  {
13962  00  =3      BYTE      cmdClass;                     /* The command class */
13963  00  =3      BYTE      cmd;                          /* The command */
13964  00  =3  } ZW_CHIMNEY_FAN_STATUS_GET_FRAME;
13965  00  =3  
13966  00  =3  /************************************************************/
13967  00  =3  /* Chimney Fan Status Report 1byte command class structs */ 
13968  00  =3  /************************************************************/
13969  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATUS_REPORT_1BYTE_FRAME_
13970  00  =3  {
13971  00  =3      BYTE      cmdClass;                     /* The command class */
13972  00  =3      BYTE      cmd;                          /* The command */
13973  00  =3      BYTE      state;                        /**/
13974  00  =3      BYTE      speed;                        /**/
13975  00  =3      BYTE      alarmStatus;                  /* masked byte */
13976  00  =3      BYTE      properties1;                  /* masked byte */
13977  00  =3      BYTE      value1;                       
13978  00  =3  } ZW_CHIMNEY_FAN_STATUS_REPORT_1BYTE_FRAME;
13979  00  =3  
13980  00  =3  /************************************************************/
13981  00  =3  /* Chimney Fan Status Report 2byte command class structs */ 
13982  00  =3  /************************************************************/
13983  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATUS_REPORT_2BYTE_FRAME_
13984  00  =3  {
13985  00  =3      BYTE      cmdClass;                     /* The command class */
13986  00  =3      BYTE      cmd;                          /* The command */
13987  00  =3      BYTE      state;                        /**/
13988  00  =3      BYTE      speed;                        /**/
13989  00  =3      BYTE      alarmStatus;                  /* masked byte */
13990  00  =3      BYTE      properties1;                  /* masked byte */
13991  00  =3      BYTE      value1;                       /* MSB */
13992  00  =3      BYTE      value2;                       /* LSB */
13993  00  =3  } ZW_CHIMNEY_FAN_STATUS_REPORT_2BYTE_FRAME;
13994  00  =3  
13995  00  =3  /************************************************************/
13996  00  =3  /* Chimney Fan Status Report 3byte command class structs */ 
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 242 

13997  00  =3  /************************************************************/
13998  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATUS_REPORT_3BYTE_FRAME_
13999  00  =3  {
14000  00  =3      BYTE      cmdClass;                     /* The command class */
14001  00  =3      BYTE      cmd;                          /* The command */
14002  00  =3      BYTE      state;                        /**/
14003  00  =3      BYTE      speed;                        /**/
14004  00  =3      BYTE      alarmStatus;                  /* masked byte */
14005  00  =3      BYTE      properties1;                  /* masked byte */
14006  00  =3      BYTE      value1;                       /* MSB */
14007  00  =3      BYTE      value2;                       
14008  00  =3      BYTE      value3;                       /* LSB */
14009  00  =3  } ZW_CHIMNEY_FAN_STATUS_REPORT_3BYTE_FRAME;
14010  00  =3  
14011  00  =3  /************************************************************/
14012  00  =3  /* Chimney Fan Status Report 4byte command class structs */ 
14013  00  =3  /************************************************************/
14014  00  =3  typedef struct _ZW_CHIMNEY_FAN_STATUS_REPORT_4BYTE_FRAME_
14015  00  =3  {
14016  00  =3      BYTE      cmdClass;                     /* The command class */
14017  00  =3      BYTE      cmd;                          /* The command */
14018  00  =3      BYTE      state;                        /**/
14019  00  =3      BYTE      speed;                        /**/
14020  00  =3      BYTE      alarmStatus;                  /* masked byte */
14021  00  =3      BYTE      properties1;                  /* masked byte */
14022  00  =3      BYTE      value1;                       /* MSB */
14023  00  =3      BYTE      value2;                       
14024  00  =3      BYTE      value3;                       
14025  00  =3      BYTE      value4;                       /* LSB */
14026  00  =3  } ZW_CHIMNEY_FAN_STATUS_REPORT_4BYTE_FRAME;
14027  00  =3  
14028  00  =3  /************************************************************/
14029  00  =3  /* Chimney Fan Stop Temp Get command class structs */       
14030  00  =3  /************************************************************/
14031  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_GET_FRAME_
14032  00  =3  {
14033  00  =3      BYTE      cmdClass;                     /* The command class */
14034  00  =3      BYTE      cmd;                          /* The command */
14035  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_GET_FRAME;
14036  00  =3  
14037  00  =3  /************************************************************/
14038  00  =3  /* Chimney Fan Stop Temp Report 1byte command class structs */
14039  00  =3  /************************************************************/
14040  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_1BYTE_FRAME_
14041  00  =3  {
14042  00  =3      BYTE      cmdClass;                     /* The command class */
14043  00  =3      BYTE      cmd;                          /* The command */
14044  00  =3      BYTE      properties1;                  /* masked byte */
14045  00  =3      BYTE      value1;                       
14046  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_1BYTE_FRAME;
14047  00  =3  
14048  00  =3  /************************************************************/
14049  00  =3  /* Chimney Fan Stop Temp Report 2byte command class structs */
14050  00  =3  /************************************************************/
14051  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_2BYTE_FRAME_
14052  00  =3  {
14053  00  =3      BYTE      cmdClass;                     /* The command class */
14054  00  =3      BYTE      cmd;                          /* The command */
14055  00  =3      BYTE      properties1;                  /* masked byte */
14056  00  =3      BYTE      value1;                       /* MSB */
14057  00  =3      BYTE      value2;                       /* LSB */
14058  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_2BYTE_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 243 

14059  00  =3  
14060  00  =3  /************************************************************/
14061  00  =3  /* Chimney Fan Stop Temp Report 3byte command class structs */
14062  00  =3  /************************************************************/
14063  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_3BYTE_FRAME_
14064  00  =3  {
14065  00  =3      BYTE      cmdClass;                     /* The command class */
14066  00  =3      BYTE      cmd;                          /* The command */
14067  00  =3      BYTE      properties1;                  /* masked byte */
14068  00  =3      BYTE      value1;                       /* MSB */
14069  00  =3      BYTE      value2;                       
14070  00  =3      BYTE      value3;                       /* LSB */
14071  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_3BYTE_FRAME;
14072  00  =3  
14073  00  =3  /************************************************************/
14074  00  =3  /* Chimney Fan Stop Temp Report 4byte command class structs */
14075  00  =3  /************************************************************/
14076  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_4BYTE_FRAME_
14077  00  =3  {
14078  00  =3      BYTE      cmdClass;                     /* The command class */
14079  00  =3      BYTE      cmd;                          /* The command */
14080  00  =3      BYTE      properties1;                  /* masked byte */
14081  00  =3      BYTE      value1;                       /* MSB */
14082  00  =3      BYTE      value2;                       
14083  00  =3      BYTE      value3;                       
14084  00  =3      BYTE      value4;                       /* LSB */
14085  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_REPORT_4BYTE_FRAME;
14086  00  =3  
14087  00  =3  /************************************************************/
14088  00  =3  /* Chimney Fan Stop Temp Set 1byte command class structs */ 
14089  00  =3  /************************************************************/
14090  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_SET_1BYTE_FRAME_
14091  00  =3  {
14092  00  =3      BYTE      cmdClass;                     /* The command class */
14093  00  =3      BYTE      cmd;                          /* The command */
14094  00  =3      BYTE      properties1;                  /* masked byte */
14095  00  =3      BYTE      value1;                       
14096  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_SET_1BYTE_FRAME;
14097  00  =3  
14098  00  =3  /************************************************************/
14099  00  =3  /* Chimney Fan Stop Temp Set 2byte command class structs */ 
14100  00  =3  /************************************************************/
14101  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_SET_2BYTE_FRAME_
14102  00  =3  {
14103  00  =3      BYTE      cmdClass;                     /* The command class */
14104  00  =3      BYTE      cmd;                          /* The command */
14105  00  =3      BYTE      properties1;                  /* masked byte */
14106  00  =3      BYTE      value1;                       /* MSB */
14107  00  =3      BYTE      value2;                       /* LSB */
14108  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_SET_2BYTE_FRAME;
14109  00  =3  
14110  00  =3  /************************************************************/
14111  00  =3  /* Chimney Fan Stop Temp Set 3byte command class structs */ 
14112  00  =3  /************************************************************/
14113  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_SET_3BYTE_FRAME_
14114  00  =3  {
14115  00  =3      BYTE      cmdClass;                     /* The command class */
14116  00  =3      BYTE      cmd;                          /* The command */
14117  00  =3      BYTE      properties1;                  /* masked byte */
14118  00  =3      BYTE      value1;                       /* MSB */
14119  00  =3      BYTE      value2;                       
14120  00  =3      BYTE      value3;                       /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 244 

14121  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_SET_3BYTE_FRAME;
14122  00  =3  
14123  00  =3  /************************************************************/
14124  00  =3  /* Chimney Fan Stop Temp Set 4byte command class structs */ 
14125  00  =3  /************************************************************/
14126  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TEMP_SET_4BYTE_FRAME_
14127  00  =3  {
14128  00  =3      BYTE      cmdClass;                     /* The command class */
14129  00  =3      BYTE      cmd;                          /* The command */
14130  00  =3      BYTE      properties1;                  /* masked byte */
14131  00  =3      BYTE      value1;                       /* MSB */
14132  00  =3      BYTE      value2;                       
14133  00  =3      BYTE      value3;                       
14134  00  =3      BYTE      value4;                       /* LSB */
14135  00  =3  } ZW_CHIMNEY_FAN_STOP_TEMP_SET_4BYTE_FRAME;
14136  00  =3  
14137  00  =3  /************************************************************/
14138  00  =3  /* Chimney Fan Stop Time Get command class structs */       
14139  00  =3  /************************************************************/
14140  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TIME_GET_FRAME_
14141  00  =3  {
14142  00  =3      BYTE      cmdClass;                     /* The command class */
14143  00  =3      BYTE      cmd;                          /* The command */
14144  00  =3  } ZW_CHIMNEY_FAN_STOP_TIME_GET_FRAME;
14145  00  =3  
14146  00  =3  /************************************************************/
14147  00  =3  /* Chimney Fan Stop Time Report command class structs */    
14148  00  =3  /************************************************************/
14149  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TIME_REPORT_FRAME_
14150  00  =3  {
14151  00  =3      BYTE      cmdClass;                     /* The command class */
14152  00  =3      BYTE      cmd;                          /* The command */
14153  00  =3      BYTE      time;                         /**/
14154  00  =3  } ZW_CHIMNEY_FAN_STOP_TIME_REPORT_FRAME;
14155  00  =3  
14156  00  =3  /************************************************************/
14157  00  =3  /* Chimney Fan Stop Time Set command class structs */       
14158  00  =3  /************************************************************/
14159  00  =3  typedef struct _ZW_CHIMNEY_FAN_STOP_TIME_SET_FRAME_
14160  00  =3  {
14161  00  =3      BYTE      cmdClass;                     /* The command class */
14162  00  =3      BYTE      cmd;                          /* The command */
14163  00  =3      BYTE      time;                         /**/
14164  00  =3  } ZW_CHIMNEY_FAN_STOP_TIME_SET_FRAME;
14165  00  =3  
14166  00  =3  /************************************************************/
14167  00  =3  /* Schedule Changed Get command class structs */            
14168  00  =3  /************************************************************/
14169  00  =3  typedef struct _ZW_SCHEDULE_CHANGED_GET_FRAME_
14170  00  =3  {
14171  00  =3      BYTE      cmdClass;                     /* The command class */
14172  00  =3      BYTE      cmd;                          /* The command */
14173  00  =3  } ZW_SCHEDULE_CHANGED_GET_FRAME;
14174  00  =3  
14175  00  =3  /************************************************************/
14176  00  =3  /* Schedule Changed Report command class structs */         
14177  00  =3  /************************************************************/
14178  00  =3  typedef struct _ZW_SCHEDULE_CHANGED_REPORT_FRAME_
14179  00  =3  {
14180  00  =3      BYTE      cmdClass;                     /* The command class */
14181  00  =3      BYTE      cmd;                          /* The command */
14182  00  =3      BYTE      changecounter;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 245 

14183  00  =3  } ZW_SCHEDULE_CHANGED_REPORT_FRAME;
14184  00  =3  
14185  00  =3  /************************************************************/
14186  00  =3  /* Schedule Get command class structs */                    
14187  00  =3  /************************************************************/
14188  00  =3  typedef struct _ZW_SCHEDULE_GET_FRAME_
14189  00  =3  {
14190  00  =3      BYTE      cmdClass;                     /* The command class */
14191  00  =3      BYTE      cmd;                          /* The command */
14192  00  =3      BYTE      properties1;                  /* masked byte */
14193  00  =3  } ZW_SCHEDULE_GET_FRAME;
14194  00  =3  
14195  00  =3  /************************************************************/
14196  00  =3  /* Schedule Override Get command class structs */           
14197  00  =3  /************************************************************/
14198  00  =3  typedef struct _ZW_SCHEDULE_OVERRIDE_GET_FRAME_
14199  00  =3  {
14200  00  =3      BYTE      cmdClass;                     /* The command class */
14201  00  =3      BYTE      cmd;                          /* The command */
14202  00  =3  } ZW_SCHEDULE_OVERRIDE_GET_FRAME;
14203  00  =3  
14204  00  =3  /************************************************************/
14205  00  =3  /* Schedule Override Report command class structs */        
14206  00  =3  /************************************************************/
14207  00  =3  typedef struct _ZW_SCHEDULE_OVERRIDE_REPORT_FRAME_
14208  00  =3  {
14209  00  =3      BYTE      cmdClass;                     /* The command class */
14210  00  =3      BYTE      cmd;                          /* The command */
14211  00  =3      BYTE      properties1;                  /* masked byte */
14212  00  =3      BYTE      overrideState;                /**/
14213  00  =3  } ZW_SCHEDULE_OVERRIDE_REPORT_FRAME;
14214  00  =3  
14215  00  =3  /************************************************************/
14216  00  =3  /* Schedule Override Set command class structs */           
14217  00  =3  /************************************************************/
14218  00  =3  typedef struct _ZW_SCHEDULE_OVERRIDE_SET_FRAME_
14219  00  =3  {
14220  00  =3      BYTE      cmdClass;                     /* The command class */
14221  00  =3      BYTE      cmd;                          /* The command */
14222  00  =3      BYTE      properties1;                  /* masked byte */
14223  00  =3      BYTE      overrideState;                /**/
14224  00  =3  } ZW_SCHEDULE_OVERRIDE_SET_FRAME;
14225  00  =3  
14226  00  =3  /************************************************************/
14227  00  =3  /* Schedule Report command class structs */                 
14228  00  =3  /************************************************************/
14229  00  =3  typedef struct _ZW_SCHEDULE_REPORT_FRAME_
14230  00  =3  {
14231  00  =3      BYTE      cmdClass;                     /* The command class */
14232  00  =3      BYTE      cmd;                          /* The command */
14233  00  =3      BYTE      properties1;                  /* masked byte */
14234  00  =3      BYTE      switchpoint01;                /* MSB */
14235  00  =3      BYTE      switchpoint02;                
14236  00  =3      BYTE      switchpoint03;                /* LSB */
14237  00  =3      BYTE      switchpoint11;                /* MSB */
14238  00  =3      BYTE      switchpoint12;                
14239  00  =3      BYTE      switchpoint13;                /* LSB */
14240  00  =3      BYTE      switchpoint21;                /* MSB */
14241  00  =3      BYTE      switchpoint22;                
14242  00  =3      BYTE      switchpoint23;                /* LSB */
14243  00  =3      BYTE      switchpoint31;                /* MSB */
14244  00  =3      BYTE      switchpoint32;                
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 246 

14245  00  =3      BYTE      switchpoint33;                /* LSB */
14246  00  =3      BYTE      switchpoint41;                /* MSB */
14247  00  =3      BYTE      switchpoint42;                
14248  00  =3      BYTE      switchpoint43;                /* LSB */
14249  00  =3      BYTE      switchpoint51;                /* MSB */
14250  00  =3      BYTE      switchpoint52;                
14251  00  =3      BYTE      switchpoint53;                /* LSB */
14252  00  =3      BYTE      switchpoint61;                /* MSB */
14253  00  =3      BYTE      switchpoint62;                
14254  00  =3      BYTE      switchpoint63;                /* LSB */
14255  00  =3      BYTE      switchpoint71;                /* MSB */
14256  00  =3      BYTE      switchpoint72;                
14257  00  =3      BYTE      switchpoint73;                /* LSB */
14258  00  =3      BYTE      switchpoint81;                /* MSB */
14259  00  =3      BYTE      switchpoint82;                
14260  00  =3      BYTE      switchpoint83;                /* LSB */
14261  00  =3  } ZW_SCHEDULE_REPORT_FRAME;
14262  00  =3  
14263  00  =3  /************************************************************/
14264  00  =3  /* Schedule Set command class structs */                    
14265  00  =3  /************************************************************/
14266  00  =3  typedef struct _ZW_SCHEDULE_SET_FRAME_
14267  00  =3  {
14268  00  =3      BYTE      cmdClass;                     /* The command class */
14269  00  =3      BYTE      cmd;                          /* The command */
14270  00  =3      BYTE      properties1;                  /* masked byte */
14271  00  =3      BYTE      switchpoint01;                /* MSB */
14272  00  =3      BYTE      switchpoint02;                
14273  00  =3      BYTE      switchpoint03;                /* LSB */
14274  00  =3      BYTE      switchpoint11;                /* MSB */
14275  00  =3      BYTE      switchpoint12;                
14276  00  =3      BYTE      switchpoint13;                /* LSB */
14277  00  =3      BYTE      switchpoint21;                /* MSB */
14278  00  =3      BYTE      switchpoint22;                
14279  00  =3      BYTE      switchpoint23;                /* LSB */
14280  00  =3      BYTE      switchpoint31;                /* MSB */
14281  00  =3      BYTE      switchpoint32;                
14282  00  =3      BYTE      switchpoint33;                /* LSB */
14283  00  =3      BYTE      switchpoint41;                /* MSB */
14284  00  =3      BYTE      switchpoint42;                
14285  00  =3      BYTE      switchpoint43;                /* LSB */
14286  00  =3      BYTE      switchpoint51;                /* MSB */
14287  00  =3      BYTE      switchpoint52;                
14288  00  =3      BYTE      switchpoint53;                /* LSB */
14289  00  =3      BYTE      switchpoint61;                /* MSB */
14290  00  =3      BYTE      switchpoint62;                
14291  00  =3      BYTE      switchpoint63;                /* LSB */
14292  00  =3      BYTE      switchpoint71;                /* MSB */
14293  00  =3      BYTE      switchpoint72;                
14294  00  =3      BYTE      switchpoint73;                /* LSB */
14295  00  =3      BYTE      switchpoint81;                /* MSB */
14296  00  =3      BYTE      switchpoint82;                
14297  00  =3      BYTE      switchpoint83;                /* LSB */
14298  00  =3  } ZW_SCHEDULE_SET_FRAME;
14299  00  =3  
14300  00  =3  /************************************************************/
14301  00  =3  /* Clock Get command class structs */                       
14302  00  =3  /************************************************************/
14303  00  =3  typedef struct _ZW_CLOCK_GET_FRAME_
14304  00  =3  {
14305  00  =3      BYTE      cmdClass;                     /* The command class */
14306  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 247 

14307  00  =3  } ZW_CLOCK_GET_FRAME;
14308  00  =3  
14309  00  =3  /************************************************************/
14310  00  =3  /* Clock Report command class structs */                    
14311  00  =3  /************************************************************/
14312  00  =3  typedef struct _ZW_CLOCK_REPORT_FRAME_
14313  00  =3  {
14314  00  =3      BYTE      cmdClass;                     /* The command class */
14315  00  =3      BYTE      cmd;                          /* The command */
14316  00  =3      BYTE      level;                        /* masked byte */
14317  00  =3      BYTE      minute;                       /**/
14318  00  =3  } ZW_CLOCK_REPORT_FRAME;
14319  00  =3  
14320  00  =3  /************************************************************/
14321  00  =3  /* Clock Set command class structs */                       
14322  00  =3  /************************************************************/
14323  00  =3  typedef struct _ZW_CLOCK_SET_FRAME_
14324  00  =3  {
14325  00  =3      BYTE      cmdClass;                     /* The command class */
14326  00  =3      BYTE      cmd;                          /* The command */
14327  00  =3      BYTE      level;                        /* masked byte */
14328  00  =3      BYTE      minute;                       /**/
14329  00  =3  } ZW_CLOCK_SET_FRAME;
14330  00  =3  
14331  00  =3  /************************************************************/
14332  00  =3  /* Configuration Get command class structs */               
14333  00  =3  /************************************************************/
14334  00  =3  typedef struct _ZW_CONFIGURATION_GET_FRAME_
14335  00  =3  {
14336  00  =3      BYTE      cmdClass;                     /* The command class */
14337  00  =3      BYTE      cmd;                          /* The command */
14338  00  =3      BYTE      parameterNumber;              /**/
14339  00  =3  } ZW_CONFIGURATION_GET_FRAME;
14340  00  =3  
14341  00  =3  /************************************************************/
14342  00  =3  /* Configuration Report 1byte command class structs */      
14343  00  =3  /************************************************************/
14344  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_1BYTE_FRAME_
14345  00  =3  {
14346  00  =3      BYTE      cmdClass;                     /* The command class */
14347  00  =3      BYTE      cmd;                          /* The command */
14348  00  =3      BYTE      parameterNumber;              /**/
14349  00  =3      BYTE      level;                        /* masked byte */
14350  00  =3      BYTE      configurationValue1;          
14351  00  =3  } ZW_CONFIGURATION_REPORT_1BYTE_FRAME;
14352  00  =3  
14353  00  =3  /************************************************************/
14354  00  =3  /* Configuration Report 2byte command class structs */      
14355  00  =3  /************************************************************/
14356  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_2BYTE_FRAME_
14357  00  =3  {
14358  00  =3      BYTE      cmdClass;                     /* The command class */
14359  00  =3      BYTE      cmd;                          /* The command */
14360  00  =3      BYTE      parameterNumber;              /**/
14361  00  =3      BYTE      level;                        /* masked byte */
14362  00  =3      BYTE      configurationValue1;          /* MSB */
14363  00  =3      BYTE      configurationValue2;          /* LSB */
14364  00  =3  } ZW_CONFIGURATION_REPORT_2BYTE_FRAME;
14365  00  =3  
14366  00  =3  /************************************************************/
14367  00  =3  /* Configuration Report 3byte command class structs */      
14368  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 248 

14369  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_3BYTE_FRAME_
14370  00  =3  {
14371  00  =3      BYTE      cmdClass;                     /* The command class */
14372  00  =3      BYTE      cmd;                          /* The command */
14373  00  =3      BYTE      parameterNumber;              /**/
14374  00  =3      BYTE      level;                        /* masked byte */
14375  00  =3      BYTE      configurationValue1;          /* MSB */
14376  00  =3      BYTE      configurationValue2;          
14377  00  =3      BYTE      configurationValue3;          /* LSB */
14378  00  =3  } ZW_CONFIGURATION_REPORT_3BYTE_FRAME;
14379  00  =3  
14380  00  =3  /************************************************************/
14381  00  =3  /* Configuration Report 4byte command class structs */      
14382  00  =3  /************************************************************/
14383  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_4BYTE_FRAME_
14384  00  =3  {
14385  00  =3      BYTE      cmdClass;                     /* The command class */
14386  00  =3      BYTE      cmd;                          /* The command */
14387  00  =3      BYTE      parameterNumber;              /**/
14388  00  =3      BYTE      level;                        /* masked byte */
14389  00  =3      BYTE      configurationValue1;          /* MSB */
14390  00  =3      BYTE      configurationValue2;          
14391  00  =3      BYTE      configurationValue3;          
14392  00  =3      BYTE      configurationValue4;          /* LSB */
14393  00  =3  } ZW_CONFIGURATION_REPORT_4BYTE_FRAME;
14394  00  =3  
14395  00  =3  /************************************************************/
14396  00  =3  /* Configuration Set 1byte command class structs */         
14397  00  =3  /************************************************************/
14398  00  =3  typedef struct _ZW_CONFIGURATION_SET_1BYTE_FRAME_
14399  00  =3  {
14400  00  =3      BYTE      cmdClass;                     /* The command class */
14401  00  =3      BYTE      cmd;                          /* The command */
14402  00  =3      BYTE      parameterNumber;              /**/
14403  00  =3      BYTE      level;                        /* masked byte */
14404  00  =3      BYTE      configurationValue1;          
14405  00  =3  } ZW_CONFIGURATION_SET_1BYTE_FRAME;
14406  00  =3  
14407  00  =3  /************************************************************/
14408  00  =3  /* Configuration Set 2byte command class structs */         
14409  00  =3  /************************************************************/
14410  00  =3  typedef struct _ZW_CONFIGURATION_SET_2BYTE_FRAME_
14411  00  =3  {
14412  00  =3      BYTE      cmdClass;                     /* The command class */
14413  00  =3      BYTE      cmd;                          /* The command */
14414  00  =3      BYTE      parameterNumber;              /**/
14415  00  =3      BYTE      level;                        /* masked byte */
14416  00  =3      BYTE      configurationValue1;          /* MSB */
14417  00  =3      BYTE      configurationValue2;          /* LSB */
14418  00  =3  } ZW_CONFIGURATION_SET_2BYTE_FRAME;
14419  00  =3  
14420  00  =3  /************************************************************/
14421  00  =3  /* Configuration Set 3byte command class structs */         
14422  00  =3  /************************************************************/
14423  00  =3  typedef struct _ZW_CONFIGURATION_SET_3BYTE_FRAME_
14424  00  =3  {
14425  00  =3      BYTE      cmdClass;                     /* The command class */
14426  00  =3      BYTE      cmd;                          /* The command */
14427  00  =3      BYTE      parameterNumber;              /**/
14428  00  =3      BYTE      level;                        /* masked byte */
14429  00  =3      BYTE      configurationValue1;          /* MSB */
14430  00  =3      BYTE      configurationValue2;          
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 249 

14431  00  =3      BYTE      configurationValue3;          /* LSB */
14432  00  =3  } ZW_CONFIGURATION_SET_3BYTE_FRAME;
14433  00  =3  
14434  00  =3  /************************************************************/
14435  00  =3  /* Configuration Set 4byte command class structs */         
14436  00  =3  /************************************************************/
14437  00  =3  typedef struct _ZW_CONFIGURATION_SET_4BYTE_FRAME_
14438  00  =3  {
14439  00  =3      BYTE      cmdClass;                     /* The command class */
14440  00  =3      BYTE      cmd;                          /* The command */
14441  00  =3      BYTE      parameterNumber;              /**/
14442  00  =3      BYTE      level;                        /* masked byte */
14443  00  =3      BYTE      configurationValue1;          /* MSB */
14444  00  =3      BYTE      configurationValue2;          
14445  00  =3      BYTE      configurationValue3;          
14446  00  =3      BYTE      configurationValue4;          /* LSB */
14447  00  =3  } ZW_CONFIGURATION_SET_4BYTE_FRAME;
14448  00  =3  
14449  00  =3  /************************************************************/
14450  00  =3  /* Configuration Bulk Get V2 command class structs */       
14451  00  =3  /************************************************************/
14452  00  =3  typedef struct _ZW_CONFIGURATION_BULK_GET_V2_FRAME_
14453  00  =3  {
14454  00  =3      BYTE      cmdClass;                     /* The command class */
14455  00  =3      BYTE      cmd;                          /* The command */
14456  00  =3      BYTE      parameterOffset1;             /* MSB */
14457  00  =3      BYTE      parameterOffset2;             /* LSB */
14458  00  =3      BYTE      numberOfParameters;           /**/
14459  00  =3  } ZW_CONFIGURATION_BULK_GET_V2_FRAME;
14460  00  =3  
14461  00  =3  /************************************************************/
14462  00  =3  /* Configuration Bulk Report V2 variant group structs */    
14463  00  =3  /************************************************************/
14464  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_1BYTE_V2_VG_
14465  00  =3  {
14466  00  =3      BYTE      parameter1;                   
14467  00  =3  } VG_CONFIGURATION_BULK_REPORT_1BYTE_V2_VG;
14468  00  =3  
14469  00  =3  /************************************************************/
14470  00  =3  /* Configuration Bulk Report V2 variant group structs */    
14471  00  =3  /************************************************************/
14472  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_2BYTE_V2_VG_
14473  00  =3  {
14474  00  =3      BYTE      parameter1;                   /* MSB */
14475  00  =3      BYTE      parameter2;                   /* LSB */
14476  00  =3  } VG_CONFIGURATION_BULK_REPORT_2BYTE_V2_VG;
14477  00  =3  
14478  00  =3  /************************************************************/
14479  00  =3  /* Configuration Bulk Report V2 variant group structs */    
14480  00  =3  /************************************************************/
14481  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_3BYTE_V2_VG_
14482  00  =3  {
14483  00  =3      BYTE      parameter1;                   /* MSB */
14484  00  =3      BYTE      parameter2;                   
14485  00  =3      BYTE      parameter3;                   /* LSB */
14486  00  =3  } VG_CONFIGURATION_BULK_REPORT_3BYTE_V2_VG;
14487  00  =3  
14488  00  =3  /************************************************************/
14489  00  =3  /* Configuration Bulk Report V2 variant group structs */    
14490  00  =3  /************************************************************/
14491  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG_
14492  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 250 

14493  00  =3      BYTE      parameter1;                   /* MSB */
14494  00  =3      BYTE      parameter2;                   
14495  00  =3      BYTE      parameter3;                   
14496  00  =3      BYTE      parameter4;                   /* LSB */
14497  00  =3  } VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG;
14498  00  =3  
14499  00  =3  /************************************************************/
14500  00  =3  /* Configuration Bulk Report 1byte V2 command class structs */
14501  00  =3  /************************************************************/
14502  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_1BYTE_V2_FRAME_
14503  00  =3  {
14504  00  =3      BYTE      cmdClass;                     /* The command class */
14505  00  =3      BYTE      cmd;                          /* The command */
14506  00  =3      BYTE      parameterOffset1;             /* MSB */
14507  00  =3      BYTE      parameterOffset2;             /* LSB */
14508  00  =3      BYTE      numberOfParameters;           /**/
14509  00  =3      BYTE      reportsToFollow;              /**/
14510  00  =3      BYTE      properties1;                  /* masked byte */
14511  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup1;                /**/
14512  00  =3  } ZW_CONFIGURATION_BULK_REPORT_1BYTE_V2_FRAME;
14513  00  =3  
14514  00  =3  /************************************************************/
14515  00  =3  /* Configuration Bulk Report 2byte V2 command class structs */
14516  00  =3  /************************************************************/
14517  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_2BYTE_V2_FRAME_
14518  00  =3  {
14519  00  =3      BYTE      cmdClass;                     /* The command class */
14520  00  =3      BYTE      cmd;                          /* The command */
14521  00  =3      BYTE      parameterOffset1;             /* MSB */
14522  00  =3      BYTE      parameterOffset2;             /* LSB */
14523  00  =3      BYTE      numberOfParameters;           /**/
14524  00  =3      BYTE      reportsToFollow;              /**/
14525  00  =3      BYTE      properties1;                  /* masked byte */
14526  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup1;                /**/
14527  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup2;                /**/
14528  00  =3  } ZW_CONFIGURATION_BULK_REPORT_2BYTE_V2_FRAME;
14529  00  =3  
14530  00  =3  /************************************************************/
14531  00  =3  /* Configuration Bulk Report 3byte V2 command class structs */
14532  00  =3  /************************************************************/
14533  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_3BYTE_V2_FRAME_
14534  00  =3  {
14535  00  =3      BYTE      cmdClass;                     /* The command class */
14536  00  =3      BYTE      cmd;                          /* The command */
14537  00  =3      BYTE      parameterOffset1;             /* MSB */
14538  00  =3      BYTE      parameterOffset2;             /* LSB */
14539  00  =3      BYTE      numberOfParameters;           /**/
14540  00  =3      BYTE      reportsToFollow;              /**/
14541  00  =3      BYTE      properties1;                  /* masked byte */
14542  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup1;                /**/
14543  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup2;                /**/
14544  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup3;                /**/
14545  00  =3  } ZW_CONFIGURATION_BULK_REPORT_3BYTE_V2_FRAME;
14546  00  =3  
14547  00  =3  /************************************************************/
14548  00  =3  /* Configuration Bulk Report 4byte V2 command class structs */
14549  00  =3  /************************************************************/
14550  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_4BYTE_V2_FRAME_
14551  00  =3  {
14552  00  =3      BYTE      cmdClass;                     /* The command class */
14553  00  =3      BYTE      cmd;                          /* The command */
14554  00  =3      BYTE      parameterOffset1;             /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 251 

14555  00  =3      BYTE      parameterOffset2;             /* LSB */
14556  00  =3      BYTE      numberOfParameters;           /**/
14557  00  =3      BYTE      reportsToFollow;              /**/
14558  00  =3      BYTE      properties1;                  /* masked byte */
14559  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup1;                /**/
14560  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup2;                /**/
14561  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup3;                /**/
14562  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V2_VG variantgroup4;                /**/
14563  00  =3  } ZW_CONFIGURATION_BULK_REPORT_4BYTE_V2_FRAME;
14564  00  =3  
14565  00  =3  /************************************************************/
14566  00  =3  /* Configuration Bulk Set V2 variant group structs */       
14567  00  =3  /************************************************************/
14568  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_1BYTE_V2_VG_
14569  00  =3  {
14570  00  =3      BYTE      parameter1;                   
14571  00  =3  } VG_CONFIGURATION_BULK_SET_1BYTE_V2_VG;
14572  00  =3  
14573  00  =3  /************************************************************/
14574  00  =3  /* Configuration Bulk Set V2 variant group structs */       
14575  00  =3  /************************************************************/
14576  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_2BYTE_V2_VG_
14577  00  =3  {
14578  00  =3      BYTE      parameter1;                   /* MSB */
14579  00  =3      BYTE      parameter2;                   /* LSB */
14580  00  =3  } VG_CONFIGURATION_BULK_SET_2BYTE_V2_VG;
14581  00  =3  
14582  00  =3  /************************************************************/
14583  00  =3  /* Configuration Bulk Set V2 variant group structs */       
14584  00  =3  /************************************************************/
14585  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_3BYTE_V2_VG_
14586  00  =3  {
14587  00  =3      BYTE      parameter1;                   /* MSB */
14588  00  =3      BYTE      parameter2;                   
14589  00  =3      BYTE      parameter3;                   /* LSB */
14590  00  =3  } VG_CONFIGURATION_BULK_SET_3BYTE_V2_VG;
14591  00  =3  
14592  00  =3  /************************************************************/
14593  00  =3  /* Configuration Bulk Set V2 variant group structs */       
14594  00  =3  /************************************************************/
14595  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG_
14596  00  =3  {
14597  00  =3      BYTE      parameter1;                   /* MSB */
14598  00  =3      BYTE      parameter2;                   
14599  00  =3      BYTE      parameter3;                   
14600  00  =3      BYTE      parameter4;                   /* LSB */
14601  00  =3  } VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG;
14602  00  =3  
14603  00  =3  /************************************************************/
14604  00  =3  /* Configuration Bulk Set 1byte V2 command class structs */ 
14605  00  =3  /************************************************************/
14606  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_1BYTE_V2_FRAME_
14607  00  =3  {
14608  00  =3      BYTE      cmdClass;                     /* The command class */
14609  00  =3      BYTE      cmd;                          /* The command */
14610  00  =3      BYTE      parameterOffset1;             /* MSB */
14611  00  =3      BYTE      parameterOffset2;             /* LSB */
14612  00  =3      BYTE      numberOfParameters;           /**/
14613  00  =3      BYTE      properties1;                  /* masked byte */
14614  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup1;                /**/
14615  00  =3  } ZW_CONFIGURATION_BULK_SET_1BYTE_V2_FRAME;
14616  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 252 

14617  00  =3  /************************************************************/
14618  00  =3  /* Configuration Bulk Set 2byte V2 command class structs */ 
14619  00  =3  /************************************************************/
14620  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_2BYTE_V2_FRAME_
14621  00  =3  {
14622  00  =3      BYTE      cmdClass;                     /* The command class */
14623  00  =3      BYTE      cmd;                          /* The command */
14624  00  =3      BYTE      parameterOffset1;             /* MSB */
14625  00  =3      BYTE      parameterOffset2;             /* LSB */
14626  00  =3      BYTE      numberOfParameters;           /**/
14627  00  =3      BYTE      properties1;                  /* masked byte */
14628  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup1;                /**/
14629  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup2;                /**/
14630  00  =3  } ZW_CONFIGURATION_BULK_SET_2BYTE_V2_FRAME;
14631  00  =3  
14632  00  =3  /************************************************************/
14633  00  =3  /* Configuration Bulk Set 3byte V2 command class structs */ 
14634  00  =3  /************************************************************/
14635  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_3BYTE_V2_FRAME_
14636  00  =3  {
14637  00  =3      BYTE      cmdClass;                     /* The command class */
14638  00  =3      BYTE      cmd;                          /* The command */
14639  00  =3      BYTE      parameterOffset1;             /* MSB */
14640  00  =3      BYTE      parameterOffset2;             /* LSB */
14641  00  =3      BYTE      numberOfParameters;           /**/
14642  00  =3      BYTE      properties1;                  /* masked byte */
14643  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup1;                /**/
14644  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup2;                /**/
14645  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup3;                /**/
14646  00  =3  } ZW_CONFIGURATION_BULK_SET_3BYTE_V2_FRAME;
14647  00  =3  
14648  00  =3  /************************************************************/
14649  00  =3  /* Configuration Bulk Set 4byte V2 command class structs */ 
14650  00  =3  /************************************************************/
14651  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_4BYTE_V2_FRAME_
14652  00  =3  {
14653  00  =3      BYTE      cmdClass;                     /* The command class */
14654  00  =3      BYTE      cmd;                          /* The command */
14655  00  =3      BYTE      parameterOffset1;             /* MSB */
14656  00  =3      BYTE      parameterOffset2;             /* LSB */
14657  00  =3      BYTE      numberOfParameters;           /**/
14658  00  =3      BYTE      properties1;                  /* masked byte */
14659  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup1;                /**/
14660  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup2;                /**/
14661  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup3;                /**/
14662  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V2_VG variantgroup4;                /**/
14663  00  =3  } ZW_CONFIGURATION_BULK_SET_4BYTE_V2_FRAME;
14664  00  =3  
14665  00  =3  /************************************************************/
14666  00  =3  /* Configuration Get V2 command class structs */            
14667  00  =3  /************************************************************/
14668  00  =3  typedef struct _ZW_CONFIGURATION_GET_V2_FRAME_
14669  00  =3  {
14670  00  =3      BYTE      cmdClass;                     /* The command class */
14671  00  =3      BYTE      cmd;                          /* The command */
14672  00  =3      BYTE      parameterNumber;              /**/
14673  00  =3  } ZW_CONFIGURATION_GET_V2_FRAME;
14674  00  =3  
14675  00  =3  /************************************************************/
14676  00  =3  /* Configuration Report 1byte V2 command class structs */   
14677  00  =3  /************************************************************/
14678  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_1BYTE_V2_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 253 

14679  00  =3  {
14680  00  =3      BYTE      cmdClass;                     /* The command class */
14681  00  =3      BYTE      cmd;                          /* The command */
14682  00  =3      BYTE      parameterNumber;              /**/
14683  00  =3      BYTE      level;                        /* masked byte */
14684  00  =3      BYTE      configurationValue1;          
14685  00  =3  } ZW_CONFIGURATION_REPORT_1BYTE_V2_FRAME;
14686  00  =3  
14687  00  =3  /************************************************************/
14688  00  =3  /* Configuration Report 2byte V2 command class structs */   
14689  00  =3  /************************************************************/
14690  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_2BYTE_V2_FRAME_
14691  00  =3  {
14692  00  =3      BYTE      cmdClass;                     /* The command class */
14693  00  =3      BYTE      cmd;                          /* The command */
14694  00  =3      BYTE      parameterNumber;              /**/
14695  00  =3      BYTE      level;                        /* masked byte */
14696  00  =3      BYTE      configurationValue1;          /* MSB */
14697  00  =3      BYTE      configurationValue2;          /* LSB */
14698  00  =3  } ZW_CONFIGURATION_REPORT_2BYTE_V2_FRAME;
14699  00  =3  
14700  00  =3  /************************************************************/
14701  00  =3  /* Configuration Report 3byte V2 command class structs */   
14702  00  =3  /************************************************************/
14703  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_3BYTE_V2_FRAME_
14704  00  =3  {
14705  00  =3      BYTE      cmdClass;                     /* The command class */
14706  00  =3      BYTE      cmd;                          /* The command */
14707  00  =3      BYTE      parameterNumber;              /**/
14708  00  =3      BYTE      level;                        /* masked byte */
14709  00  =3      BYTE      configurationValue1;          /* MSB */
14710  00  =3      BYTE      configurationValue2;          
14711  00  =3      BYTE      configurationValue3;          /* LSB */
14712  00  =3  } ZW_CONFIGURATION_REPORT_3BYTE_V2_FRAME;
14713  00  =3  
14714  00  =3  /************************************************************/
14715  00  =3  /* Configuration Report 4byte V2 command class structs */   
14716  00  =3  /************************************************************/
14717  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_4BYTE_V2_FRAME_
14718  00  =3  {
14719  00  =3      BYTE      cmdClass;                     /* The command class */
14720  00  =3      BYTE      cmd;                          /* The command */
14721  00  =3      BYTE      parameterNumber;              /**/
14722  00  =3      BYTE      level;                        /* masked byte */
14723  00  =3      BYTE      configurationValue1;          /* MSB */
14724  00  =3      BYTE      configurationValue2;          
14725  00  =3      BYTE      configurationValue3;          
14726  00  =3      BYTE      configurationValue4;          /* LSB */
14727  00  =3  } ZW_CONFIGURATION_REPORT_4BYTE_V2_FRAME;
14728  00  =3  
14729  00  =3  /************************************************************/
14730  00  =3  /* Configuration Set 1byte V2 command class structs */      
14731  00  =3  /************************************************************/
14732  00  =3  typedef struct _ZW_CONFIGURATION_SET_1BYTE_V2_FRAME_
14733  00  =3  {
14734  00  =3      BYTE      cmdClass;                     /* The command class */
14735  00  =3      BYTE      cmd;                          /* The command */
14736  00  =3      BYTE      parameterNumber;              /**/
14737  00  =3      BYTE      level;                        /* masked byte */
14738  00  =3      BYTE      configurationValue1;          
14739  00  =3  } ZW_CONFIGURATION_SET_1BYTE_V2_FRAME;
14740  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 254 

14741  00  =3  /************************************************************/
14742  00  =3  /* Configuration Set 2byte V2 command class structs */      
14743  00  =3  /************************************************************/
14744  00  =3  typedef struct _ZW_CONFIGURATION_SET_2BYTE_V2_FRAME_
14745  00  =3  {
14746  00  =3      BYTE      cmdClass;                     /* The command class */
14747  00  =3      BYTE      cmd;                          /* The command */
14748  00  =3      BYTE      parameterNumber;              /**/
14749  00  =3      BYTE      level;                        /* masked byte */
14750  00  =3      BYTE      configurationValue1;          /* MSB */
14751  00  =3      BYTE      configurationValue2;          /* LSB */
14752  00  =3  } ZW_CONFIGURATION_SET_2BYTE_V2_FRAME;
14753  00  =3  
14754  00  =3  /************************************************************/
14755  00  =3  /* Configuration Set 3byte V2 command class structs */      
14756  00  =3  /************************************************************/
14757  00  =3  typedef struct _ZW_CONFIGURATION_SET_3BYTE_V2_FRAME_
14758  00  =3  {
14759  00  =3      BYTE      cmdClass;                     /* The command class */
14760  00  =3      BYTE      cmd;                          /* The command */
14761  00  =3      BYTE      parameterNumber;              /**/
14762  00  =3      BYTE      level;                        /* masked byte */
14763  00  =3      BYTE      configurationValue1;          /* MSB */
14764  00  =3      BYTE      configurationValue2;          
14765  00  =3      BYTE      configurationValue3;          /* LSB */
14766  00  =3  } ZW_CONFIGURATION_SET_3BYTE_V2_FRAME;
14767  00  =3  
14768  00  =3  /************************************************************/
14769  00  =3  /* Configuration Set 4byte V2 command class structs */      
14770  00  =3  /************************************************************/
14771  00  =3  typedef struct _ZW_CONFIGURATION_SET_4BYTE_V2_FRAME_
14772  00  =3  {
14773  00  =3      BYTE      cmdClass;                     /* The command class */
14774  00  =3      BYTE      cmd;                          /* The command */
14775  00  =3      BYTE      parameterNumber;              /**/
14776  00  =3      BYTE      level;                        /* masked byte */
14777  00  =3      BYTE      configurationValue1;          /* MSB */
14778  00  =3      BYTE      configurationValue2;          
14779  00  =3      BYTE      configurationValue3;          
14780  00  =3      BYTE      configurationValue4;          /* LSB */
14781  00  =3  } ZW_CONFIGURATION_SET_4BYTE_V2_FRAME;
14782  00  =3  
14783  00  =3  /************************************************************/
14784  00  =3  /* Configuration Bulk Get V3 command class structs */       
14785  00  =3  /************************************************************/
14786  00  =3  typedef struct _ZW_CONFIGURATION_BULK_GET_V3_FRAME_
14787  00  =3  {
14788  00  =3      BYTE      cmdClass;                     /* The command class */
14789  00  =3      BYTE      cmd;                          /* The command */
14790  00  =3      BYTE      parameterOffset1;             /* MSB */
14791  00  =3      BYTE      parameterOffset2;             /* LSB */
14792  00  =3      BYTE      numberOfParameters;           /**/
14793  00  =3  } ZW_CONFIGURATION_BULK_GET_V3_FRAME;
14794  00  =3  
14795  00  =3  /************************************************************/
14796  00  =3  /* Configuration Bulk Report V3 variant group structs */    
14797  00  =3  /************************************************************/
14798  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_1BYTE_V3_VG_
14799  00  =3  {
14800  00  =3      BYTE      parameter1;                   
14801  00  =3  } VG_CONFIGURATION_BULK_REPORT_1BYTE_V3_VG;
14802  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 255 

14803  00  =3  /************************************************************/
14804  00  =3  /* Configuration Bulk Report V3 variant group structs */    
14805  00  =3  /************************************************************/
14806  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_2BYTE_V3_VG_
14807  00  =3  {
14808  00  =3      BYTE      parameter1;                   /* MSB */
14809  00  =3      BYTE      parameter2;                   /* LSB */
14810  00  =3  } VG_CONFIGURATION_BULK_REPORT_2BYTE_V3_VG;
14811  00  =3  
14812  00  =3  /************************************************************/
14813  00  =3  /* Configuration Bulk Report V3 variant group structs */    
14814  00  =3  /************************************************************/
14815  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_3BYTE_V3_VG_
14816  00  =3  {
14817  00  =3      BYTE      parameter1;                   /* MSB */
14818  00  =3      BYTE      parameter2;                   
14819  00  =3      BYTE      parameter3;                   /* LSB */
14820  00  =3  } VG_CONFIGURATION_BULK_REPORT_3BYTE_V3_VG;
14821  00  =3  
14822  00  =3  /************************************************************/
14823  00  =3  /* Configuration Bulk Report V3 variant group structs */    
14824  00  =3  /************************************************************/
14825  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG_
14826  00  =3  {
14827  00  =3      BYTE      parameter1;                   /* MSB */
14828  00  =3      BYTE      parameter2;                   
14829  00  =3      BYTE      parameter3;                   
14830  00  =3      BYTE      parameter4;                   /* LSB */
14831  00  =3  } VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG;
14832  00  =3  
14833  00  =3  /************************************************************/
14834  00  =3  /* Configuration Bulk Report 1byte V3 command class structs */
14835  00  =3  /************************************************************/
14836  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_1BYTE_V3_FRAME_
14837  00  =3  {
14838  00  =3      BYTE      cmdClass;                     /* The command class */
14839  00  =3      BYTE      cmd;                          /* The command */
14840  00  =3      BYTE      parameterOffset1;             /* MSB */
14841  00  =3      BYTE      parameterOffset2;             /* LSB */
14842  00  =3      BYTE      numberOfParameters;           /**/
14843  00  =3      BYTE      reportsToFollow;              /**/
14844  00  =3      BYTE      properties1;                  /* masked byte */
14845  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup1;                /**/
14846  00  =3  } ZW_CONFIGURATION_BULK_REPORT_1BYTE_V3_FRAME;
14847  00  =3  
14848  00  =3  /************************************************************/
14849  00  =3  /* Configuration Bulk Report 2byte V3 command class structs */
14850  00  =3  /************************************************************/
14851  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_2BYTE_V3_FRAME_
14852  00  =3  {
14853  00  =3      BYTE      cmdClass;                     /* The command class */
14854  00  =3      BYTE      cmd;                          /* The command */
14855  00  =3      BYTE      parameterOffset1;             /* MSB */
14856  00  =3      BYTE      parameterOffset2;             /* LSB */
14857  00  =3      BYTE      numberOfParameters;           /**/
14858  00  =3      BYTE      reportsToFollow;              /**/
14859  00  =3      BYTE      properties1;                  /* masked byte */
14860  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup1;                /**/
14861  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup2;                /**/
14862  00  =3  } ZW_CONFIGURATION_BULK_REPORT_2BYTE_V3_FRAME;
14863  00  =3  
14864  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 256 

14865  00  =3  /* Configuration Bulk Report 3byte V3 command class structs */
14866  00  =3  /************************************************************/
14867  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_3BYTE_V3_FRAME_
14868  00  =3  {
14869  00  =3      BYTE      cmdClass;                     /* The command class */
14870  00  =3      BYTE      cmd;                          /* The command */
14871  00  =3      BYTE      parameterOffset1;             /* MSB */
14872  00  =3      BYTE      parameterOffset2;             /* LSB */
14873  00  =3      BYTE      numberOfParameters;           /**/
14874  00  =3      BYTE      reportsToFollow;              /**/
14875  00  =3      BYTE      properties1;                  /* masked byte */
14876  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup1;                /**/
14877  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup2;                /**/
14878  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup3;                /**/
14879  00  =3  } ZW_CONFIGURATION_BULK_REPORT_3BYTE_V3_FRAME;
14880  00  =3  
14881  00  =3  /************************************************************/
14882  00  =3  /* Configuration Bulk Report 4byte V3 command class structs */
14883  00  =3  /************************************************************/
14884  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_4BYTE_V3_FRAME_
14885  00  =3  {
14886  00  =3      BYTE      cmdClass;                     /* The command class */
14887  00  =3      BYTE      cmd;                          /* The command */
14888  00  =3      BYTE      parameterOffset1;             /* MSB */
14889  00  =3      BYTE      parameterOffset2;             /* LSB */
14890  00  =3      BYTE      numberOfParameters;           /**/
14891  00  =3      BYTE      reportsToFollow;              /**/
14892  00  =3      BYTE      properties1;                  /* masked byte */
14893  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup1;                /**/
14894  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup2;                /**/
14895  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup3;                /**/
14896  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V3_VG variantgroup4;                /**/
14897  00  =3  } ZW_CONFIGURATION_BULK_REPORT_4BYTE_V3_FRAME;
14898  00  =3  
14899  00  =3  /************************************************************/
14900  00  =3  /* Configuration Bulk Set V3 variant group structs */       
14901  00  =3  /************************************************************/
14902  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_1BYTE_V3_VG_
14903  00  =3  {
14904  00  =3      BYTE      parameter1;                   
14905  00  =3  } VG_CONFIGURATION_BULK_SET_1BYTE_V3_VG;
14906  00  =3  
14907  00  =3  /************************************************************/
14908  00  =3  /* Configuration Bulk Set V3 variant group structs */       
14909  00  =3  /************************************************************/
14910  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_2BYTE_V3_VG_
14911  00  =3  {
14912  00  =3      BYTE      parameter1;                   /* MSB */
14913  00  =3      BYTE      parameter2;                   /* LSB */
14914  00  =3  } VG_CONFIGURATION_BULK_SET_2BYTE_V3_VG;
14915  00  =3  
14916  00  =3  /************************************************************/
14917  00  =3  /* Configuration Bulk Set V3 variant group structs */       
14918  00  =3  /************************************************************/
14919  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_3BYTE_V3_VG_
14920  00  =3  {
14921  00  =3      BYTE      parameter1;                   /* MSB */
14922  00  =3      BYTE      parameter2;                   
14923  00  =3      BYTE      parameter3;                   /* LSB */
14924  00  =3  } VG_CONFIGURATION_BULK_SET_3BYTE_V3_VG;
14925  00  =3  
14926  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 257 

14927  00  =3  /* Configuration Bulk Set V3 variant group structs */       
14928  00  =3  /************************************************************/
14929  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG_
14930  00  =3  {
14931  00  =3      BYTE      parameter1;                   /* MSB */
14932  00  =3      BYTE      parameter2;                   
14933  00  =3      BYTE      parameter3;                   
14934  00  =3      BYTE      parameter4;                   /* LSB */
14935  00  =3  } VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG;
14936  00  =3  
14937  00  =3  /************************************************************/
14938  00  =3  /* Configuration Bulk Set 1byte V3 command class structs */ 
14939  00  =3  /************************************************************/
14940  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_1BYTE_V3_FRAME_
14941  00  =3  {
14942  00  =3      BYTE      cmdClass;                     /* The command class */
14943  00  =3      BYTE      cmd;                          /* The command */
14944  00  =3      BYTE      parameterOffset1;             /* MSB */
14945  00  =3      BYTE      parameterOffset2;             /* LSB */
14946  00  =3      BYTE      numberOfParameters;           /**/
14947  00  =3      BYTE      properties1;                  /* masked byte */
14948  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup1;                /**/
14949  00  =3  } ZW_CONFIGURATION_BULK_SET_1BYTE_V3_FRAME;
14950  00  =3  
14951  00  =3  /************************************************************/
14952  00  =3  /* Configuration Bulk Set 2byte V3 command class structs */ 
14953  00  =3  /************************************************************/
14954  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_2BYTE_V3_FRAME_
14955  00  =3  {
14956  00  =3      BYTE      cmdClass;                     /* The command class */
14957  00  =3      BYTE      cmd;                          /* The command */
14958  00  =3      BYTE      parameterOffset1;             /* MSB */
14959  00  =3      BYTE      parameterOffset2;             /* LSB */
14960  00  =3      BYTE      numberOfParameters;           /**/
14961  00  =3      BYTE      properties1;                  /* masked byte */
14962  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup1;                /**/
14963  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup2;                /**/
14964  00  =3  } ZW_CONFIGURATION_BULK_SET_2BYTE_V3_FRAME;
14965  00  =3  
14966  00  =3  /************************************************************/
14967  00  =3  /* Configuration Bulk Set 3byte V3 command class structs */ 
14968  00  =3  /************************************************************/
14969  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_3BYTE_V3_FRAME_
14970  00  =3  {
14971  00  =3      BYTE      cmdClass;                     /* The command class */
14972  00  =3      BYTE      cmd;                          /* The command */
14973  00  =3      BYTE      parameterOffset1;             /* MSB */
14974  00  =3      BYTE      parameterOffset2;             /* LSB */
14975  00  =3      BYTE      numberOfParameters;           /**/
14976  00  =3      BYTE      properties1;                  /* masked byte */
14977  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup1;                /**/
14978  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup2;                /**/
14979  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup3;                /**/
14980  00  =3  } ZW_CONFIGURATION_BULK_SET_3BYTE_V3_FRAME;
14981  00  =3  
14982  00  =3  /************************************************************/
14983  00  =3  /* Configuration Bulk Set 4byte V3 command class structs */ 
14984  00  =3  /************************************************************/
14985  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_4BYTE_V3_FRAME_
14986  00  =3  {
14987  00  =3      BYTE      cmdClass;                     /* The command class */
14988  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 258 

14989  00  =3      BYTE      parameterOffset1;             /* MSB */
14990  00  =3      BYTE      parameterOffset2;             /* LSB */
14991  00  =3      BYTE      numberOfParameters;           /**/
14992  00  =3      BYTE      properties1;                  /* masked byte */
14993  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup1;                /**/
14994  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup2;                /**/
14995  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup3;                /**/
14996  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V3_VG variantgroup4;                /**/
14997  00  =3  } ZW_CONFIGURATION_BULK_SET_4BYTE_V3_FRAME;
14998  00  =3  
14999  00  =3  /************************************************************/
15000  00  =3  /* Configuration Get V3 command class structs */            
15001  00  =3  /************************************************************/
15002  00  =3  typedef struct _ZW_CONFIGURATION_GET_V3_FRAME_
15003  00  =3  {
15004  00  =3      BYTE      cmdClass;                     /* The command class */
15005  00  =3      BYTE      cmd;                          /* The command */
15006  00  =3      BYTE      parameterNumber;              /**/
15007  00  =3  } ZW_CONFIGURATION_GET_V3_FRAME;
15008  00  =3  
15009  00  =3  /************************************************************/
15010  00  =3  /* Configuration Report 1byte V3 command class structs */   
15011  00  =3  /************************************************************/
15012  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_1BYTE_V3_FRAME_
15013  00  =3  {
15014  00  =3      BYTE      cmdClass;                     /* The command class */
15015  00  =3      BYTE      cmd;                          /* The command */
15016  00  =3      BYTE      parameterNumber;              /**/
15017  00  =3      BYTE      level;                        /* masked byte */
15018  00  =3      BYTE      configurationValue1;          
15019  00  =3  } ZW_CONFIGURATION_REPORT_1BYTE_V3_FRAME;
15020  00  =3  
15021  00  =3  /************************************************************/
15022  00  =3  /* Configuration Report 2byte V3 command class structs */   
15023  00  =3  /************************************************************/
15024  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_2BYTE_V3_FRAME_
15025  00  =3  {
15026  00  =3      BYTE      cmdClass;                     /* The command class */
15027  00  =3      BYTE      cmd;                          /* The command */
15028  00  =3      BYTE      parameterNumber;              /**/
15029  00  =3      BYTE      level;                        /* masked byte */
15030  00  =3      BYTE      configurationValue1;          /* MSB */
15031  00  =3      BYTE      configurationValue2;          /* LSB */
15032  00  =3  } ZW_CONFIGURATION_REPORT_2BYTE_V3_FRAME;
15033  00  =3  
15034  00  =3  /************************************************************/
15035  00  =3  /* Configuration Report 3byte V3 command class structs */   
15036  00  =3  /************************************************************/
15037  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_3BYTE_V3_FRAME_
15038  00  =3  {
15039  00  =3      BYTE      cmdClass;                     /* The command class */
15040  00  =3      BYTE      cmd;                          /* The command */
15041  00  =3      BYTE      parameterNumber;              /**/
15042  00  =3      BYTE      level;                        /* masked byte */
15043  00  =3      BYTE      configurationValue1;          /* MSB */
15044  00  =3      BYTE      configurationValue2;          
15045  00  =3      BYTE      configurationValue3;          /* LSB */
15046  00  =3  } ZW_CONFIGURATION_REPORT_3BYTE_V3_FRAME;
15047  00  =3  
15048  00  =3  /************************************************************/
15049  00  =3  /* Configuration Report 4byte V3 command class structs */   
15050  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 259 

15051  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_4BYTE_V3_FRAME_
15052  00  =3  {
15053  00  =3      BYTE      cmdClass;                     /* The command class */
15054  00  =3      BYTE      cmd;                          /* The command */
15055  00  =3      BYTE      parameterNumber;              /**/
15056  00  =3      BYTE      level;                        /* masked byte */
15057  00  =3      BYTE      configurationValue1;          /* MSB */
15058  00  =3      BYTE      configurationValue2;          
15059  00  =3      BYTE      configurationValue3;          
15060  00  =3      BYTE      configurationValue4;          /* LSB */
15061  00  =3  } ZW_CONFIGURATION_REPORT_4BYTE_V3_FRAME;
15062  00  =3  
15063  00  =3  /************************************************************/
15064  00  =3  /* Configuration Set 1byte V3 command class structs */      
15065  00  =3  /************************************************************/
15066  00  =3  typedef struct _ZW_CONFIGURATION_SET_1BYTE_V3_FRAME_
15067  00  =3  {
15068  00  =3      BYTE      cmdClass;                     /* The command class */
15069  00  =3      BYTE      cmd;                          /* The command */
15070  00  =3      BYTE      parameterNumber;              /**/
15071  00  =3      BYTE      level;                        /* masked byte */
15072  00  =3      BYTE      configurationValue1;          
15073  00  =3  } ZW_CONFIGURATION_SET_1BYTE_V3_FRAME;
15074  00  =3  
15075  00  =3  /************************************************************/
15076  00  =3  /* Configuration Set 2byte V3 command class structs */      
15077  00  =3  /************************************************************/
15078  00  =3  typedef struct _ZW_CONFIGURATION_SET_2BYTE_V3_FRAME_
15079  00  =3  {
15080  00  =3      BYTE      cmdClass;                     /* The command class */
15081  00  =3      BYTE      cmd;                          /* The command */
15082  00  =3      BYTE      parameterNumber;              /**/
15083  00  =3      BYTE      level;                        /* masked byte */
15084  00  =3      BYTE      configurationValue1;          /* MSB */
15085  00  =3      BYTE      configurationValue2;          /* LSB */
15086  00  =3  } ZW_CONFIGURATION_SET_2BYTE_V3_FRAME;
15087  00  =3  
15088  00  =3  /************************************************************/
15089  00  =3  /* Configuration Set 3byte V3 command class structs */      
15090  00  =3  /************************************************************/
15091  00  =3  typedef struct _ZW_CONFIGURATION_SET_3BYTE_V3_FRAME_
15092  00  =3  {
15093  00  =3      BYTE      cmdClass;                     /* The command class */
15094  00  =3      BYTE      cmd;                          /* The command */
15095  00  =3      BYTE      parameterNumber;              /**/
15096  00  =3      BYTE      level;                        /* masked byte */
15097  00  =3      BYTE      configurationValue1;          /* MSB */
15098  00  =3      BYTE      configurationValue2;          
15099  00  =3      BYTE      configurationValue3;          /* LSB */
15100  00  =3  } ZW_CONFIGURATION_SET_3BYTE_V3_FRAME;
15101  00  =3  
15102  00  =3  /************************************************************/
15103  00  =3  /* Configuration Set 4byte V3 command class structs */      
15104  00  =3  /************************************************************/
15105  00  =3  typedef struct _ZW_CONFIGURATION_SET_4BYTE_V3_FRAME_
15106  00  =3  {
15107  00  =3      BYTE      cmdClass;                     /* The command class */
15108  00  =3      BYTE      cmd;                          /* The command */
15109  00  =3      BYTE      parameterNumber;              /**/
15110  00  =3      BYTE      level;                        /* masked byte */
15111  00  =3      BYTE      configurationValue1;          /* MSB */
15112  00  =3      BYTE      configurationValue2;          
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 260 

15113  00  =3      BYTE      configurationValue3;          
15114  00  =3      BYTE      configurationValue4;          /* LSB */
15115  00  =3  } ZW_CONFIGURATION_SET_4BYTE_V3_FRAME;
15116  00  =3  
15117  00  =3  /************************************************************/
15118  00  =3  /* Configuration Name Get V3 command class structs */       
15119  00  =3  /************************************************************/
15120  00  =3  typedef struct _ZW_CONFIGURATION_NAME_GET_V3_FRAME_
15121  00  =3  {
15122  00  =3      BYTE      cmdClass;                     /* The command class */
15123  00  =3      BYTE      cmd;                          /* The command */
15124  00  =3      BYTE      parameterNumber1;             /* MSB */
15125  00  =3      BYTE      parameterNumber2;             /* LSB */
15126  00  =3  } ZW_CONFIGURATION_NAME_GET_V3_FRAME;
15127  00  =3  
15128  00  =3  /************************************************************/
15129  00  =3  /* Configuration Name Report 1byte V3 command class structs */
15130  00  =3  /************************************************************/
15131  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_1BYTE_V3_FRAME_
15132  00  =3  {
15133  00  =3      BYTE      cmdClass;                     /* The command class */
15134  00  =3      BYTE      cmd;                          /* The command */
15135  00  =3      BYTE      parameterNumber1;             /* MSB */
15136  00  =3      BYTE      parameterNumber2;             /* LSB */
15137  00  =3      BYTE      reportsToFollow;              /**/
15138  00  =3      BYTE      name1;                        
15139  00  =3  } ZW_CONFIGURATION_NAME_REPORT_1BYTE_V3_FRAME;
15140  00  =3  
15141  00  =3  /************************************************************/
15142  00  =3  /* Configuration Name Report 2byte V3 command class structs */
15143  00  =3  /************************************************************/
15144  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_2BYTE_V3_FRAME_
15145  00  =3  {
15146  00  =3      BYTE      cmdClass;                     /* The command class */
15147  00  =3      BYTE      cmd;                          /* The command */
15148  00  =3      BYTE      parameterNumber1;             /* MSB */
15149  00  =3      BYTE      parameterNumber2;             /* LSB */
15150  00  =3      BYTE      reportsToFollow;              /**/
15151  00  =3      BYTE      name1;                        /* MSB */
15152  00  =3      BYTE      name2;                        /* LSB */
15153  00  =3  } ZW_CONFIGURATION_NAME_REPORT_2BYTE_V3_FRAME;
15154  00  =3  
15155  00  =3  /************************************************************/
15156  00  =3  /* Configuration Name Report 3byte V3 command class structs */
15157  00  =3  /************************************************************/
15158  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_3BYTE_V3_FRAME_
15159  00  =3  {
15160  00  =3      BYTE      cmdClass;                     /* The command class */
15161  00  =3      BYTE      cmd;                          /* The command */
15162  00  =3      BYTE      parameterNumber1;             /* MSB */
15163  00  =3      BYTE      parameterNumber2;             /* LSB */
15164  00  =3      BYTE      reportsToFollow;              /**/
15165  00  =3      BYTE      name1;                        /* MSB */
15166  00  =3      BYTE      name2;                        
15167  00  =3      BYTE      name3;                        /* LSB */
15168  00  =3  } ZW_CONFIGURATION_NAME_REPORT_3BYTE_V3_FRAME;
15169  00  =3  
15170  00  =3  /************************************************************/
15171  00  =3  /* Configuration Name Report 4byte V3 command class structs */
15172  00  =3  /************************************************************/
15173  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_4BYTE_V3_FRAME_
15174  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 261 

15175  00  =3      BYTE      cmdClass;                     /* The command class */
15176  00  =3      BYTE      cmd;                          /* The command */
15177  00  =3      BYTE      parameterNumber1;             /* MSB */
15178  00  =3      BYTE      parameterNumber2;             /* LSB */
15179  00  =3      BYTE      reportsToFollow;              /**/
15180  00  =3      BYTE      name1;                        /* MSB */
15181  00  =3      BYTE      name2;                        
15182  00  =3      BYTE      name3;                        
15183  00  =3      BYTE      name4;                        /* LSB */
15184  00  =3  } ZW_CONFIGURATION_NAME_REPORT_4BYTE_V3_FRAME;
15185  00  =3  
15186  00  =3  /************************************************************/
15187  00  =3  /* Configuration Info Get V3 command class structs */       
15188  00  =3  /************************************************************/
15189  00  =3  typedef struct _ZW_CONFIGURATION_INFO_GET_V3_FRAME_
15190  00  =3  {
15191  00  =3      BYTE      cmdClass;                     /* The command class */
15192  00  =3      BYTE      cmd;                          /* The command */
15193  00  =3      BYTE      parameterNumber1;             /* MSB */
15194  00  =3      BYTE      parameterNumber2;             /* LSB */
15195  00  =3  } ZW_CONFIGURATION_INFO_GET_V3_FRAME;
15196  00  =3  
15197  00  =3  /************************************************************/
15198  00  =3  /* Configuration Info Report 1byte V3 command class structs */
15199  00  =3  /************************************************************/
15200  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_1BYTE_V3_FRAME_
15201  00  =3  {
15202  00  =3      BYTE      cmdClass;                     /* The command class */
15203  00  =3      BYTE      cmd;                          /* The command */
15204  00  =3      BYTE      parameterNumber1;             /* MSB */
15205  00  =3      BYTE      parameterNumber2;             /* LSB */
15206  00  =3      BYTE      reportsToFollow;              /**/
15207  00  =3      BYTE      info1;                        
15208  00  =3  } ZW_CONFIGURATION_INFO_REPORT_1BYTE_V3_FRAME;
15209  00  =3  
15210  00  =3  /************************************************************/
15211  00  =3  /* Configuration Info Report 2byte V3 command class structs */
15212  00  =3  /************************************************************/
15213  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_2BYTE_V3_FRAME_
15214  00  =3  {
15215  00  =3      BYTE      cmdClass;                     /* The command class */
15216  00  =3      BYTE      cmd;                          /* The command */
15217  00  =3      BYTE      parameterNumber1;             /* MSB */
15218  00  =3      BYTE      parameterNumber2;             /* LSB */
15219  00  =3      BYTE      reportsToFollow;              /**/
15220  00  =3      BYTE      info1;                        /* MSB */
15221  00  =3      BYTE      info2;                        /* LSB */
15222  00  =3  } ZW_CONFIGURATION_INFO_REPORT_2BYTE_V3_FRAME;
15223  00  =3  
15224  00  =3  /************************************************************/
15225  00  =3  /* Configuration Info Report 3byte V3 command class structs */
15226  00  =3  /************************************************************/
15227  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_3BYTE_V3_FRAME_
15228  00  =3  {
15229  00  =3      BYTE      cmdClass;                     /* The command class */
15230  00  =3      BYTE      cmd;                          /* The command */
15231  00  =3      BYTE      parameterNumber1;             /* MSB */
15232  00  =3      BYTE      parameterNumber2;             /* LSB */
15233  00  =3      BYTE      reportsToFollow;              /**/
15234  00  =3      BYTE      info1;                        /* MSB */
15235  00  =3      BYTE      info2;                        
15236  00  =3      BYTE      info3;                        /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 262 

15237  00  =3  } ZW_CONFIGURATION_INFO_REPORT_3BYTE_V3_FRAME;
15238  00  =3  
15239  00  =3  /************************************************************/
15240  00  =3  /* Configuration Info Report 4byte V3 command class structs */
15241  00  =3  /************************************************************/
15242  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_4BYTE_V3_FRAME_
15243  00  =3  {
15244  00  =3      BYTE      cmdClass;                     /* The command class */
15245  00  =3      BYTE      cmd;                          /* The command */
15246  00  =3      BYTE      parameterNumber1;             /* MSB */
15247  00  =3      BYTE      parameterNumber2;             /* LSB */
15248  00  =3      BYTE      reportsToFollow;              /**/
15249  00  =3      BYTE      info1;                        /* MSB */
15250  00  =3      BYTE      info2;                        
15251  00  =3      BYTE      info3;                        
15252  00  =3      BYTE      info4;                        /* LSB */
15253  00  =3  } ZW_CONFIGURATION_INFO_REPORT_4BYTE_V3_FRAME;
15254  00  =3  
15255  00  =3  /************************************************************/
15256  00  =3  /* Configuration Properties Get V3 command class structs */ 
15257  00  =3  /************************************************************/
15258  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_GET_V3_FRAME_
15259  00  =3  {
15260  00  =3      BYTE      cmdClass;                     /* The command class */
15261  00  =3      BYTE      cmd;                          /* The command */
15262  00  =3      BYTE      parameterNumber1;             /* MSB */
15263  00  =3      BYTE      parameterNumber2;             /* LSB */
15264  00  =3  } ZW_CONFIGURATION_PROPERTIES_GET_V3_FRAME;
15265  00  =3  
15266  00  =3  /************************************************************/
15267  00  =3  /* Configuration Properties Report 1byte V3 command class structs */
15268  00  =3  /************************************************************/
15269  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_1BYTE_V3_FRAME_
15270  00  =3  {
15271  00  =3      BYTE      cmdClass;                     /* The command class */
15272  00  =3      BYTE      cmd;                          /* The command */
15273  00  =3      BYTE      parameterNumber1;             /* MSB */
15274  00  =3      BYTE      parameterNumber2;             /* LSB */
15275  00  =3      BYTE      properties1;                  /* masked byte */
15276  00  =3      BYTE      minValue1;                    
15277  00  =3      BYTE      maxValue1;                    
15278  00  =3      BYTE      defaultValue1;                
15279  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15280  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15281  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_1BYTE_V3_FRAME;
15282  00  =3  
15283  00  =3  /************************************************************/
15284  00  =3  /* Configuration Properties Report 2byte V3 command class structs */
15285  00  =3  /************************************************************/
15286  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_2BYTE_V3_FRAME_
15287  00  =3  {
15288  00  =3      BYTE      cmdClass;                     /* The command class */
15289  00  =3      BYTE      cmd;                          /* The command */
15290  00  =3      BYTE      parameterNumber1;             /* MSB */
15291  00  =3      BYTE      parameterNumber2;             /* LSB */
15292  00  =3      BYTE      properties1;                  /* masked byte */
15293  00  =3      BYTE      minValue1;                    /* MSB */
15294  00  =3      BYTE      minValue2;                    /* LSB */
15295  00  =3      BYTE      maxValue1;                    /* MSB */
15296  00  =3      BYTE      maxValue2;                    /* LSB */
15297  00  =3      BYTE      defaultValue1;                /* MSB */
15298  00  =3      BYTE      defaultValue2;                /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 263 

15299  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15300  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15301  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_2BYTE_V3_FRAME;
15302  00  =3  
15303  00  =3  /************************************************************/
15304  00  =3  /* Configuration Properties Report 3byte V3 command class structs */
15305  00  =3  /************************************************************/
15306  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_3BYTE_V3_FRAME_
15307  00  =3  {
15308  00  =3      BYTE      cmdClass;                     /* The command class */
15309  00  =3      BYTE      cmd;                          /* The command */
15310  00  =3      BYTE      parameterNumber1;             /* MSB */
15311  00  =3      BYTE      parameterNumber2;             /* LSB */
15312  00  =3      BYTE      properties1;                  /* masked byte */
15313  00  =3      BYTE      minValue1;                    /* MSB */
15314  00  =3      BYTE      minValue2;                    
15315  00  =3      BYTE      minValue3;                    /* LSB */
15316  00  =3      BYTE      maxValue1;                    /* MSB */
15317  00  =3      BYTE      maxValue2;                    
15318  00  =3      BYTE      maxValue3;                    /* LSB */
15319  00  =3      BYTE      defaultValue1;                /* MSB */
15320  00  =3      BYTE      defaultValue2;                
15321  00  =3      BYTE      defaultValue3;                /* LSB */
15322  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15323  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15324  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_3BYTE_V3_FRAME;
15325  00  =3  
15326  00  =3  /************************************************************/
15327  00  =3  /* Configuration Properties Report 4byte V3 command class structs */
15328  00  =3  /************************************************************/
15329  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_4BYTE_V3_FRAME_
15330  00  =3  {
15331  00  =3      BYTE      cmdClass;                     /* The command class */
15332  00  =3      BYTE      cmd;                          /* The command */
15333  00  =3      BYTE      parameterNumber1;             /* MSB */
15334  00  =3      BYTE      parameterNumber2;             /* LSB */
15335  00  =3      BYTE      properties1;                  /* masked byte */
15336  00  =3      BYTE      minValue1;                    /* MSB */
15337  00  =3      BYTE      minValue2;                    
15338  00  =3      BYTE      minValue3;                    
15339  00  =3      BYTE      minValue4;                    /* LSB */
15340  00  =3      BYTE      maxValue1;                    /* MSB */
15341  00  =3      BYTE      maxValue2;                    
15342  00  =3      BYTE      maxValue3;                    
15343  00  =3      BYTE      maxValue4;                    /* LSB */
15344  00  =3      BYTE      defaultValue1;                /* MSB */
15345  00  =3      BYTE      defaultValue2;                
15346  00  =3      BYTE      defaultValue3;                
15347  00  =3      BYTE      defaultValue4;                /* LSB */
15348  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15349  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15350  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_4BYTE_V3_FRAME;
15351  00  =3  
15352  00  =3  /************************************************************/
15353  00  =3  /* Configuration Bulk Get V4 command class structs */       
15354  00  =3  /************************************************************/
15355  00  =3  typedef struct _ZW_CONFIGURATION_BULK_GET_V4_FRAME_
15356  00  =3  {
15357  00  =3      BYTE      cmdClass;                     /* The command class */
15358  00  =3      BYTE      cmd;                          /* The command */
15359  00  =3      BYTE      parameterOffset1;             /* MSB */
15360  00  =3      BYTE      parameterOffset2;             /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 264 

15361  00  =3      BYTE      numberOfParameters;           /**/
15362  00  =3  } ZW_CONFIGURATION_BULK_GET_V4_FRAME;
15363  00  =3  
15364  00  =3  /************************************************************/
15365  00  =3  /* Configuration Bulk Report V4 variant group structs */    
15366  00  =3  /************************************************************/
15367  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_1BYTE_V4_VG_
15368  00  =3  {
15369  00  =3      BYTE      parameter1;                   
15370  00  =3  } VG_CONFIGURATION_BULK_REPORT_1BYTE_V4_VG;
15371  00  =3  
15372  00  =3  /************************************************************/
15373  00  =3  /* Configuration Bulk Report V4 variant group structs */    
15374  00  =3  /************************************************************/
15375  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_2BYTE_V4_VG_
15376  00  =3  {
15377  00  =3      BYTE      parameter1;                   /* MSB */
15378  00  =3      BYTE      parameter2;                   /* LSB */
15379  00  =3  } VG_CONFIGURATION_BULK_REPORT_2BYTE_V4_VG;
15380  00  =3  
15381  00  =3  /************************************************************/
15382  00  =3  /* Configuration Bulk Report V4 variant group structs */    
15383  00  =3  /************************************************************/
15384  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_3BYTE_V4_VG_
15385  00  =3  {
15386  00  =3      BYTE      parameter1;                   /* MSB */
15387  00  =3      BYTE      parameter2;                   
15388  00  =3      BYTE      parameter3;                   /* LSB */
15389  00  =3  } VG_CONFIGURATION_BULK_REPORT_3BYTE_V4_VG;
15390  00  =3  
15391  00  =3  /************************************************************/
15392  00  =3  /* Configuration Bulk Report V4 variant group structs */    
15393  00  =3  /************************************************************/
15394  00  =3  typedef struct _VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG_
15395  00  =3  {
15396  00  =3      BYTE      parameter1;                   /* MSB */
15397  00  =3      BYTE      parameter2;                   
15398  00  =3      BYTE      parameter3;                   
15399  00  =3      BYTE      parameter4;                   /* LSB */
15400  00  =3  } VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG;
15401  00  =3  
15402  00  =3  /************************************************************/
15403  00  =3  /* Configuration Bulk Report 1byte V4 command class structs */
15404  00  =3  /************************************************************/
15405  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_1BYTE_V4_FRAME_
15406  00  =3  {
15407  00  =3      BYTE      cmdClass;                     /* The command class */
15408  00  =3      BYTE      cmd;                          /* The command */
15409  00  =3      BYTE      parameterOffset1;             /* MSB */
15410  00  =3      BYTE      parameterOffset2;             /* LSB */
15411  00  =3      BYTE      numberOfParameters;           /**/
15412  00  =3      BYTE      reportsToFollow;              /**/
15413  00  =3      BYTE      properties1;                  /* masked byte */
15414  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup1;                /**/
15415  00  =3  } ZW_CONFIGURATION_BULK_REPORT_1BYTE_V4_FRAME;
15416  00  =3  
15417  00  =3  /************************************************************/
15418  00  =3  /* Configuration Bulk Report 2byte V4 command class structs */
15419  00  =3  /************************************************************/
15420  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_2BYTE_V4_FRAME_
15421  00  =3  {
15422  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 265 

15423  00  =3      BYTE      cmd;                          /* The command */
15424  00  =3      BYTE      parameterOffset1;             /* MSB */
15425  00  =3      BYTE      parameterOffset2;             /* LSB */
15426  00  =3      BYTE      numberOfParameters;           /**/
15427  00  =3      BYTE      reportsToFollow;              /**/
15428  00  =3      BYTE      properties1;                  /* masked byte */
15429  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup1;                /**/
15430  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup2;                /**/
15431  00  =3  } ZW_CONFIGURATION_BULK_REPORT_2BYTE_V4_FRAME;
15432  00  =3  
15433  00  =3  /************************************************************/
15434  00  =3  /* Configuration Bulk Report 3byte V4 command class structs */
15435  00  =3  /************************************************************/
15436  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_3BYTE_V4_FRAME_
15437  00  =3  {
15438  00  =3      BYTE      cmdClass;                     /* The command class */
15439  00  =3      BYTE      cmd;                          /* The command */
15440  00  =3      BYTE      parameterOffset1;             /* MSB */
15441  00  =3      BYTE      parameterOffset2;             /* LSB */
15442  00  =3      BYTE      numberOfParameters;           /**/
15443  00  =3      BYTE      reportsToFollow;              /**/
15444  00  =3      BYTE      properties1;                  /* masked byte */
15445  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup1;                /**/
15446  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup2;                /**/
15447  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup3;                /**/
15448  00  =3  } ZW_CONFIGURATION_BULK_REPORT_3BYTE_V4_FRAME;
15449  00  =3  
15450  00  =3  /************************************************************/
15451  00  =3  /* Configuration Bulk Report 4byte V4 command class structs */
15452  00  =3  /************************************************************/
15453  00  =3  typedef struct _ZW_CONFIGURATION_BULK_REPORT_4BYTE_V4_FRAME_
15454  00  =3  {
15455  00  =3      BYTE      cmdClass;                     /* The command class */
15456  00  =3      BYTE      cmd;                          /* The command */
15457  00  =3      BYTE      parameterOffset1;             /* MSB */
15458  00  =3      BYTE      parameterOffset2;             /* LSB */
15459  00  =3      BYTE      numberOfParameters;           /**/
15460  00  =3      BYTE      reportsToFollow;              /**/
15461  00  =3      BYTE      properties1;                  /* masked byte */
15462  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup1;                /**/
15463  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup2;                /**/
15464  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup3;                /**/
15465  00  =3      VG_CONFIGURATION_BULK_REPORT_4BYTE_V4_VG variantgroup4;                /**/
15466  00  =3  } ZW_CONFIGURATION_BULK_REPORT_4BYTE_V4_FRAME;
15467  00  =3  
15468  00  =3  /************************************************************/
15469  00  =3  /* Configuration Bulk Set V4 variant group structs */       
15470  00  =3  /************************************************************/
15471  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_1BYTE_V4_VG_
15472  00  =3  {
15473  00  =3      BYTE      parameter1;                   
15474  00  =3  } VG_CONFIGURATION_BULK_SET_1BYTE_V4_VG;
15475  00  =3  
15476  00  =3  /************************************************************/
15477  00  =3  /* Configuration Bulk Set V4 variant group structs */       
15478  00  =3  /************************************************************/
15479  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_2BYTE_V4_VG_
15480  00  =3  {
15481  00  =3      BYTE      parameter1;                   /* MSB */
15482  00  =3      BYTE      parameter2;                   /* LSB */
15483  00  =3  } VG_CONFIGURATION_BULK_SET_2BYTE_V4_VG;
15484  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 266 

15485  00  =3  /************************************************************/
15486  00  =3  /* Configuration Bulk Set V4 variant group structs */       
15487  00  =3  /************************************************************/
15488  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_3BYTE_V4_VG_
15489  00  =3  {
15490  00  =3      BYTE      parameter1;                   /* MSB */
15491  00  =3      BYTE      parameter2;                   
15492  00  =3      BYTE      parameter3;                   /* LSB */
15493  00  =3  } VG_CONFIGURATION_BULK_SET_3BYTE_V4_VG;
15494  00  =3  
15495  00  =3  /************************************************************/
15496  00  =3  /* Configuration Bulk Set V4 variant group structs */       
15497  00  =3  /************************************************************/
15498  00  =3  typedef struct _VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG_
15499  00  =3  {
15500  00  =3      BYTE      parameter1;                   /* MSB */
15501  00  =3      BYTE      parameter2;                   
15502  00  =3      BYTE      parameter3;                   
15503  00  =3      BYTE      parameter4;                   /* LSB */
15504  00  =3  } VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG;
15505  00  =3  
15506  00  =3  /************************************************************/
15507  00  =3  /* Configuration Bulk Set 1byte V4 command class structs */ 
15508  00  =3  /************************************************************/
15509  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_1BYTE_V4_FRAME_
15510  00  =3  {
15511  00  =3      BYTE      cmdClass;                     /* The command class */
15512  00  =3      BYTE      cmd;                          /* The command */
15513  00  =3      BYTE      parameterOffset1;             /* MSB */
15514  00  =3      BYTE      parameterOffset2;             /* LSB */
15515  00  =3      BYTE      numberOfParameters;           /**/
15516  00  =3      BYTE      properties1;                  /* masked byte */
15517  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup1;                /**/
15518  00  =3  } ZW_CONFIGURATION_BULK_SET_1BYTE_V4_FRAME;
15519  00  =3  
15520  00  =3  /************************************************************/
15521  00  =3  /* Configuration Bulk Set 2byte V4 command class structs */ 
15522  00  =3  /************************************************************/
15523  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_2BYTE_V4_FRAME_
15524  00  =3  {
15525  00  =3      BYTE      cmdClass;                     /* The command class */
15526  00  =3      BYTE      cmd;                          /* The command */
15527  00  =3      BYTE      parameterOffset1;             /* MSB */
15528  00  =3      BYTE      parameterOffset2;             /* LSB */
15529  00  =3      BYTE      numberOfParameters;           /**/
15530  00  =3      BYTE      properties1;                  /* masked byte */
15531  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup1;                /**/
15532  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup2;                /**/
15533  00  =3  } ZW_CONFIGURATION_BULK_SET_2BYTE_V4_FRAME;
15534  00  =3  
15535  00  =3  /************************************************************/
15536  00  =3  /* Configuration Bulk Set 3byte V4 command class structs */ 
15537  00  =3  /************************************************************/
15538  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_3BYTE_V4_FRAME_
15539  00  =3  {
15540  00  =3      BYTE      cmdClass;                     /* The command class */
15541  00  =3      BYTE      cmd;                          /* The command */
15542  00  =3      BYTE      parameterOffset1;             /* MSB */
15543  00  =3      BYTE      parameterOffset2;             /* LSB */
15544  00  =3      BYTE      numberOfParameters;           /**/
15545  00  =3      BYTE      properties1;                  /* masked byte */
15546  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 267 

15547  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup2;                /**/
15548  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup3;                /**/
15549  00  =3  } ZW_CONFIGURATION_BULK_SET_3BYTE_V4_FRAME;
15550  00  =3  
15551  00  =3  /************************************************************/
15552  00  =3  /* Configuration Bulk Set 4byte V4 command class structs */ 
15553  00  =3  /************************************************************/
15554  00  =3  typedef struct _ZW_CONFIGURATION_BULK_SET_4BYTE_V4_FRAME_
15555  00  =3  {
15556  00  =3      BYTE      cmdClass;                     /* The command class */
15557  00  =3      BYTE      cmd;                          /* The command */
15558  00  =3      BYTE      parameterOffset1;             /* MSB */
15559  00  =3      BYTE      parameterOffset2;             /* LSB */
15560  00  =3      BYTE      numberOfParameters;           /**/
15561  00  =3      BYTE      properties1;                  /* masked byte */
15562  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup1;                /**/
15563  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup2;                /**/
15564  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup3;                /**/
15565  00  =3      VG_CONFIGURATION_BULK_SET_4BYTE_V4_VG variantgroup4;                /**/
15566  00  =3  } ZW_CONFIGURATION_BULK_SET_4BYTE_V4_FRAME;
15567  00  =3  
15568  00  =3  /************************************************************/
15569  00  =3  /* Configuration Get V4 command class structs */            
15570  00  =3  /************************************************************/
15571  00  =3  typedef struct _ZW_CONFIGURATION_GET_V4_FRAME_
15572  00  =3  {
15573  00  =3      BYTE      cmdClass;                     /* The command class */
15574  00  =3      BYTE      cmd;                          /* The command */
15575  00  =3      BYTE      parameterNumber;              /**/
15576  00  =3  } ZW_CONFIGURATION_GET_V4_FRAME;
15577  00  =3  
15578  00  =3  /************************************************************/
15579  00  =3  /* Configuration Report 1byte V4 command class structs */   
15580  00  =3  /************************************************************/
15581  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_1BYTE_V4_FRAME_
15582  00  =3  {
15583  00  =3      BYTE      cmdClass;                     /* The command class */
15584  00  =3      BYTE      cmd;                          /* The command */
15585  00  =3      BYTE      parameterNumber;              /**/
15586  00  =3      BYTE      level;                        /* masked byte */
15587  00  =3      BYTE      configurationValue1;          
15588  00  =3  } ZW_CONFIGURATION_REPORT_1BYTE_V4_FRAME;
15589  00  =3  
15590  00  =3  /************************************************************/
15591  00  =3  /* Configuration Report 2byte V4 command class structs */   
15592  00  =3  /************************************************************/
15593  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_2BYTE_V4_FRAME_
15594  00  =3  {
15595  00  =3      BYTE      cmdClass;                     /* The command class */
15596  00  =3      BYTE      cmd;                          /* The command */
15597  00  =3      BYTE      parameterNumber;              /**/
15598  00  =3      BYTE      level;                        /* masked byte */
15599  00  =3      BYTE      configurationValue1;          /* MSB */
15600  00  =3      BYTE      configurationValue2;          /* LSB */
15601  00  =3  } ZW_CONFIGURATION_REPORT_2BYTE_V4_FRAME;
15602  00  =3  
15603  00  =3  /************************************************************/
15604  00  =3  /* Configuration Report 3byte V4 command class structs */   
15605  00  =3  /************************************************************/
15606  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_3BYTE_V4_FRAME_
15607  00  =3  {
15608  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 268 

15609  00  =3      BYTE      cmd;                          /* The command */
15610  00  =3      BYTE      parameterNumber;              /**/
15611  00  =3      BYTE      level;                        /* masked byte */
15612  00  =3      BYTE      configurationValue1;          /* MSB */
15613  00  =3      BYTE      configurationValue2;          
15614  00  =3      BYTE      configurationValue3;          /* LSB */
15615  00  =3  } ZW_CONFIGURATION_REPORT_3BYTE_V4_FRAME;
15616  00  =3  
15617  00  =3  /************************************************************/
15618  00  =3  /* Configuration Report 4byte V4 command class structs */   
15619  00  =3  /************************************************************/
15620  00  =3  typedef struct _ZW_CONFIGURATION_REPORT_4BYTE_V4_FRAME_
15621  00  =3  {
15622  00  =3      BYTE      cmdClass;                     /* The command class */
15623  00  =3      BYTE      cmd;                          /* The command */
15624  00  =3      BYTE      parameterNumber;              /**/
15625  00  =3      BYTE      level;                        /* masked byte */
15626  00  =3      BYTE      configurationValue1;          /* MSB */
15627  00  =3      BYTE      configurationValue2;          
15628  00  =3      BYTE      configurationValue3;          
15629  00  =3      BYTE      configurationValue4;          /* LSB */
15630  00  =3  } ZW_CONFIGURATION_REPORT_4BYTE_V4_FRAME;
15631  00  =3  
15632  00  =3  /************************************************************/
15633  00  =3  /* Configuration Set 1byte V4 command class structs */      
15634  00  =3  /************************************************************/
15635  00  =3  typedef struct _ZW_CONFIGURATION_SET_1BYTE_V4_FRAME_
15636  00  =3  {
15637  00  =3      BYTE      cmdClass;                     /* The command class */
15638  00  =3      BYTE      cmd;                          /* The command */
15639  00  =3      BYTE      parameterNumber;              /**/
15640  00  =3      BYTE      level;                        /* masked byte */
15641  00  =3      BYTE      configurationValue1;          
15642  00  =3  } ZW_CONFIGURATION_SET_1BYTE_V4_FRAME;
15643  00  =3  
15644  00  =3  /************************************************************/
15645  00  =3  /* Configuration Set 2byte V4 command class structs */      
15646  00  =3  /************************************************************/
15647  00  =3  typedef struct _ZW_CONFIGURATION_SET_2BYTE_V4_FRAME_
15648  00  =3  {
15649  00  =3      BYTE      cmdClass;                     /* The command class */
15650  00  =3      BYTE      cmd;                          /* The command */
15651  00  =3      BYTE      parameterNumber;              /**/
15652  00  =3      BYTE      level;                        /* masked byte */
15653  00  =3      BYTE      configurationValue1;          /* MSB */
15654  00  =3      BYTE      configurationValue2;          /* LSB */
15655  00  =3  } ZW_CONFIGURATION_SET_2BYTE_V4_FRAME;
15656  00  =3  
15657  00  =3  /************************************************************/
15658  00  =3  /* Configuration Set 3byte V4 command class structs */      
15659  00  =3  /************************************************************/
15660  00  =3  typedef struct _ZW_CONFIGURATION_SET_3BYTE_V4_FRAME_
15661  00  =3  {
15662  00  =3      BYTE      cmdClass;                     /* The command class */
15663  00  =3      BYTE      cmd;                          /* The command */
15664  00  =3      BYTE      parameterNumber;              /**/
15665  00  =3      BYTE      level;                        /* masked byte */
15666  00  =3      BYTE      configurationValue1;          /* MSB */
15667  00  =3      BYTE      configurationValue2;          
15668  00  =3      BYTE      configurationValue3;          /* LSB */
15669  00  =3  } ZW_CONFIGURATION_SET_3BYTE_V4_FRAME;
15670  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 269 

15671  00  =3  /************************************************************/
15672  00  =3  /* Configuration Set 4byte V4 command class structs */      
15673  00  =3  /************************************************************/
15674  00  =3  typedef struct _ZW_CONFIGURATION_SET_4BYTE_V4_FRAME_
15675  00  =3  {
15676  00  =3      BYTE      cmdClass;                     /* The command class */
15677  00  =3      BYTE      cmd;                          /* The command */
15678  00  =3      BYTE      parameterNumber;              /**/
15679  00  =3      BYTE      level;                        /* masked byte */
15680  00  =3      BYTE      configurationValue1;          /* MSB */
15681  00  =3      BYTE      configurationValue2;          
15682  00  =3      BYTE      configurationValue3;          
15683  00  =3      BYTE      configurationValue4;          /* LSB */
15684  00  =3  } ZW_CONFIGURATION_SET_4BYTE_V4_FRAME;
15685  00  =3  
15686  00  =3  /************************************************************/
15687  00  =3  /* Configuration Name Get V4 command class structs */       
15688  00  =3  /************************************************************/
15689  00  =3  typedef struct _ZW_CONFIGURATION_NAME_GET_V4_FRAME_
15690  00  =3  {
15691  00  =3      BYTE      cmdClass;                     /* The command class */
15692  00  =3      BYTE      cmd;                          /* The command */
15693  00  =3      BYTE      parameterNumber1;             /* MSB */
15694  00  =3      BYTE      parameterNumber2;             /* LSB */
15695  00  =3  } ZW_CONFIGURATION_NAME_GET_V4_FRAME;
15696  00  =3  
15697  00  =3  /************************************************************/
15698  00  =3  /* Configuration Name Report 1byte V4 command class structs */
15699  00  =3  /************************************************************/
15700  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_1BYTE_V4_FRAME_
15701  00  =3  {
15702  00  =3      BYTE      cmdClass;                     /* The command class */
15703  00  =3      BYTE      cmd;                          /* The command */
15704  00  =3      BYTE      parameterNumber1;             /* MSB */
15705  00  =3      BYTE      parameterNumber2;             /* LSB */
15706  00  =3      BYTE      reportsToFollow;              /**/
15707  00  =3      BYTE      name1;                        
15708  00  =3  } ZW_CONFIGURATION_NAME_REPORT_1BYTE_V4_FRAME;
15709  00  =3  
15710  00  =3  /************************************************************/
15711  00  =3  /* Configuration Name Report 2byte V4 command class structs */
15712  00  =3  /************************************************************/
15713  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_2BYTE_V4_FRAME_
15714  00  =3  {
15715  00  =3      BYTE      cmdClass;                     /* The command class */
15716  00  =3      BYTE      cmd;                          /* The command */
15717  00  =3      BYTE      parameterNumber1;             /* MSB */
15718  00  =3      BYTE      parameterNumber2;             /* LSB */
15719  00  =3      BYTE      reportsToFollow;              /**/
15720  00  =3      BYTE      name1;                        /* MSB */
15721  00  =3      BYTE      name2;                        /* LSB */
15722  00  =3  } ZW_CONFIGURATION_NAME_REPORT_2BYTE_V4_FRAME;
15723  00  =3  
15724  00  =3  /************************************************************/
15725  00  =3  /* Configuration Name Report 3byte V4 command class structs */
15726  00  =3  /************************************************************/
15727  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_3BYTE_V4_FRAME_
15728  00  =3  {
15729  00  =3      BYTE      cmdClass;                     /* The command class */
15730  00  =3      BYTE      cmd;                          /* The command */
15731  00  =3      BYTE      parameterNumber1;             /* MSB */
15732  00  =3      BYTE      parameterNumber2;             /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 270 

15733  00  =3      BYTE      reportsToFollow;              /**/
15734  00  =3      BYTE      name1;                        /* MSB */
15735  00  =3      BYTE      name2;                        
15736  00  =3      BYTE      name3;                        /* LSB */
15737  00  =3  } ZW_CONFIGURATION_NAME_REPORT_3BYTE_V4_FRAME;
15738  00  =3  
15739  00  =3  /************************************************************/
15740  00  =3  /* Configuration Name Report 4byte V4 command class structs */
15741  00  =3  /************************************************************/
15742  00  =3  typedef struct _ZW_CONFIGURATION_NAME_REPORT_4BYTE_V4_FRAME_
15743  00  =3  {
15744  00  =3      BYTE      cmdClass;                     /* The command class */
15745  00  =3      BYTE      cmd;                          /* The command */
15746  00  =3      BYTE      parameterNumber1;             /* MSB */
15747  00  =3      BYTE      parameterNumber2;             /* LSB */
15748  00  =3      BYTE      reportsToFollow;              /**/
15749  00  =3      BYTE      name1;                        /* MSB */
15750  00  =3      BYTE      name2;                        
15751  00  =3      BYTE      name3;                        
15752  00  =3      BYTE      name4;                        /* LSB */
15753  00  =3  } ZW_CONFIGURATION_NAME_REPORT_4BYTE_V4_FRAME;
15754  00  =3  
15755  00  =3  /************************************************************/
15756  00  =3  /* Configuration Info Get V4 command class structs */       
15757  00  =3  /************************************************************/
15758  00  =3  typedef struct _ZW_CONFIGURATION_INFO_GET_V4_FRAME_
15759  00  =3  {
15760  00  =3      BYTE      cmdClass;                     /* The command class */
15761  00  =3      BYTE      cmd;                          /* The command */
15762  00  =3      BYTE      parameterNumber1;             /* MSB */
15763  00  =3      BYTE      parameterNumber2;             /* LSB */
15764  00  =3  } ZW_CONFIGURATION_INFO_GET_V4_FRAME;
15765  00  =3  
15766  00  =3  /************************************************************/
15767  00  =3  /* Configuration Info Report 1byte V4 command class structs */
15768  00  =3  /************************************************************/
15769  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_1BYTE_V4_FRAME_
15770  00  =3  {
15771  00  =3      BYTE      cmdClass;                     /* The command class */
15772  00  =3      BYTE      cmd;                          /* The command */
15773  00  =3      BYTE      parameterNumber1;             /* MSB */
15774  00  =3      BYTE      parameterNumber2;             /* LSB */
15775  00  =3      BYTE      reportsToFollow;              /**/
15776  00  =3      BYTE      info1;                        
15777  00  =3  } ZW_CONFIGURATION_INFO_REPORT_1BYTE_V4_FRAME;
15778  00  =3  
15779  00  =3  /************************************************************/
15780  00  =3  /* Configuration Info Report 2byte V4 command class structs */
15781  00  =3  /************************************************************/
15782  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_2BYTE_V4_FRAME_
15783  00  =3  {
15784  00  =3      BYTE      cmdClass;                     /* The command class */
15785  00  =3      BYTE      cmd;                          /* The command */
15786  00  =3      BYTE      parameterNumber1;             /* MSB */
15787  00  =3      BYTE      parameterNumber2;             /* LSB */
15788  00  =3      BYTE      reportsToFollow;              /**/
15789  00  =3      BYTE      info1;                        /* MSB */
15790  00  =3      BYTE      info2;                        /* LSB */
15791  00  =3  } ZW_CONFIGURATION_INFO_REPORT_2BYTE_V4_FRAME;
15792  00  =3  
15793  00  =3  /************************************************************/
15794  00  =3  /* Configuration Info Report 3byte V4 command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 271 

15795  00  =3  /************************************************************/
15796  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_3BYTE_V4_FRAME_
15797  00  =3  {
15798  00  =3      BYTE      cmdClass;                     /* The command class */
15799  00  =3      BYTE      cmd;                          /* The command */
15800  00  =3      BYTE      parameterNumber1;             /* MSB */
15801  00  =3      BYTE      parameterNumber2;             /* LSB */
15802  00  =3      BYTE      reportsToFollow;              /**/
15803  00  =3      BYTE      info1;                        /* MSB */
15804  00  =3      BYTE      info2;                        
15805  00  =3      BYTE      info3;                        /* LSB */
15806  00  =3  } ZW_CONFIGURATION_INFO_REPORT_3BYTE_V4_FRAME;
15807  00  =3  
15808  00  =3  /************************************************************/
15809  00  =3  /* Configuration Info Report 4byte V4 command class structs */
15810  00  =3  /************************************************************/
15811  00  =3  typedef struct _ZW_CONFIGURATION_INFO_REPORT_4BYTE_V4_FRAME_
15812  00  =3  {
15813  00  =3      BYTE      cmdClass;                     /* The command class */
15814  00  =3      BYTE      cmd;                          /* The command */
15815  00  =3      BYTE      parameterNumber1;             /* MSB */
15816  00  =3      BYTE      parameterNumber2;             /* LSB */
15817  00  =3      BYTE      reportsToFollow;              /**/
15818  00  =3      BYTE      info1;                        /* MSB */
15819  00  =3      BYTE      info2;                        
15820  00  =3      BYTE      info3;                        
15821  00  =3      BYTE      info4;                        /* LSB */
15822  00  =3  } ZW_CONFIGURATION_INFO_REPORT_4BYTE_V4_FRAME;
15823  00  =3  
15824  00  =3  /************************************************************/
15825  00  =3  /* Configuration Properties Get V4 command class structs */ 
15826  00  =3  /************************************************************/
15827  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_GET_V4_FRAME_
15828  00  =3  {
15829  00  =3      BYTE      cmdClass;                     /* The command class */
15830  00  =3      BYTE      cmd;                          /* The command */
15831  00  =3      BYTE      parameterNumber1;             /* MSB */
15832  00  =3      BYTE      parameterNumber2;             /* LSB */
15833  00  =3  } ZW_CONFIGURATION_PROPERTIES_GET_V4_FRAME;
15834  00  =3  
15835  00  =3  /************************************************************/
15836  00  =3  /* Configuration Properties Report 1byte V4 command class structs */
15837  00  =3  /************************************************************/
15838  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_1BYTE_V4_FRAME_
15839  00  =3  {
15840  00  =3      BYTE      cmdClass;                     /* The command class */
15841  00  =3      BYTE      cmd;                          /* The command */
15842  00  =3      BYTE      parameterNumber1;             /* MSB */
15843  00  =3      BYTE      parameterNumber2;             /* LSB */
15844  00  =3      BYTE      properties1;                  /* masked byte */
15845  00  =3      BYTE      minValue1;                    
15846  00  =3      BYTE      maxValue1;                    
15847  00  =3      BYTE      defaultValue1;                
15848  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15849  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15850  00  =3      BYTE      properties2;                  /* masked byte */
15851  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_1BYTE_V4_FRAME;
15852  00  =3  
15853  00  =3  /************************************************************/
15854  00  =3  /* Configuration Properties Report 2byte V4 command class structs */
15855  00  =3  /************************************************************/
15856  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_2BYTE_V4_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 272 

15857  00  =3  {
15858  00  =3      BYTE      cmdClass;                     /* The command class */
15859  00  =3      BYTE      cmd;                          /* The command */
15860  00  =3      BYTE      parameterNumber1;             /* MSB */
15861  00  =3      BYTE      parameterNumber2;             /* LSB */
15862  00  =3      BYTE      properties1;                  /* masked byte */
15863  00  =3      BYTE      minValue1;                    /* MSB */
15864  00  =3      BYTE      minValue2;                    /* LSB */
15865  00  =3      BYTE      maxValue1;                    /* MSB */
15866  00  =3      BYTE      maxValue2;                    /* LSB */
15867  00  =3      BYTE      defaultValue1;                /* MSB */
15868  00  =3      BYTE      defaultValue2;                /* LSB */
15869  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15870  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15871  00  =3      BYTE      properties2;                  /* masked byte */
15872  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_2BYTE_V4_FRAME;
15873  00  =3  
15874  00  =3  /************************************************************/
15875  00  =3  /* Configuration Properties Report 3byte V4 command class structs */
15876  00  =3  /************************************************************/
15877  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_3BYTE_V4_FRAME_
15878  00  =3  {
15879  00  =3      BYTE      cmdClass;                     /* The command class */
15880  00  =3      BYTE      cmd;                          /* The command */
15881  00  =3      BYTE      parameterNumber1;             /* MSB */
15882  00  =3      BYTE      parameterNumber2;             /* LSB */
15883  00  =3      BYTE      properties1;                  /* masked byte */
15884  00  =3      BYTE      minValue1;                    /* MSB */
15885  00  =3      BYTE      minValue2;                    
15886  00  =3      BYTE      minValue3;                    /* LSB */
15887  00  =3      BYTE      maxValue1;                    /* MSB */
15888  00  =3      BYTE      maxValue2;                    
15889  00  =3      BYTE      maxValue3;                    /* LSB */
15890  00  =3      BYTE      defaultValue1;                /* MSB */
15891  00  =3      BYTE      defaultValue2;                
15892  00  =3      BYTE      defaultValue3;                /* LSB */
15893  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15894  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15895  00  =3      BYTE      properties2;                  /* masked byte */
15896  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_3BYTE_V4_FRAME;
15897  00  =3  
15898  00  =3  /************************************************************/
15899  00  =3  /* Configuration Properties Report 4byte V4 command class structs */
15900  00  =3  /************************************************************/
15901  00  =3  typedef struct _ZW_CONFIGURATION_PROPERTIES_REPORT_4BYTE_V4_FRAME_
15902  00  =3  {
15903  00  =3      BYTE      cmdClass;                     /* The command class */
15904  00  =3      BYTE      cmd;                          /* The command */
15905  00  =3      BYTE      parameterNumber1;             /* MSB */
15906  00  =3      BYTE      parameterNumber2;             /* LSB */
15907  00  =3      BYTE      properties1;                  /* masked byte */
15908  00  =3      BYTE      minValue1;                    /* MSB */
15909  00  =3      BYTE      minValue2;                    
15910  00  =3      BYTE      minValue3;                    
15911  00  =3      BYTE      minValue4;                    /* LSB */
15912  00  =3      BYTE      maxValue1;                    /* MSB */
15913  00  =3      BYTE      maxValue2;                    
15914  00  =3      BYTE      maxValue3;                    
15915  00  =3      BYTE      maxValue4;                    /* LSB */
15916  00  =3      BYTE      defaultValue1;                /* MSB */
15917  00  =3      BYTE      defaultValue2;                
15918  00  =3      BYTE      defaultValue3;                
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 273 

15919  00  =3      BYTE      defaultValue4;                /* LSB */
15920  00  =3      BYTE      nextParameterNumber1;         /* MSB */
15921  00  =3      BYTE      nextParameterNumber2;         /* LSB */
15922  00  =3      BYTE      properties2;                  /* masked byte */
15923  00  =3  } ZW_CONFIGURATION_PROPERTIES_REPORT_4BYTE_V4_FRAME;
15924  00  =3  
15925  00  =3  /************************************************************/
15926  00  =3  /* Configuration Default Reset V4 command class structs */  
15927  00  =3  /************************************************************/
15928  00  =3  typedef struct _ZW_CONFIGURATION_DEFAULT_RESET_V4_FRAME_
15929  00  =3  {
15930  00  =3      BYTE      cmdClass;                     /* The command class */
15931  00  =3      BYTE      cmd;                          /* The command */
15932  00  =3  } ZW_CONFIGURATION_DEFAULT_RESET_V4_FRAME;
15933  00  =3  
15934  00  =3  /************************************************************/
15935  00  =3  /* Ctrl Replication Transfer Group command class structs */ 
15936  00  =3  /************************************************************/
15937  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_GROUP_FRAME_
15938  00  =3  {
15939  00  =3      BYTE      cmdClass;                     /* The command class */
15940  00  =3      BYTE      cmd;                          /* The command */
15941  00  =3      BYTE      sequenceNumber;               /**/
15942  00  =3      BYTE      groupId;                      /**/
15943  00  =3      BYTE      nodeId;                       /**/
15944  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_GROUP_FRAME;
15945  00  =3  
15946  00  =3  /************************************************************/
15947  00  =3  /* Ctrl Replication Transfer Group Name 1byte command class structs */
15948  00  =3  /************************************************************/
15949  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_1BYTE_FRAME_
15950  00  =3  {
15951  00  =3      BYTE      cmdClass;                     /* The command class */
15952  00  =3      BYTE      cmd;                          /* The command */
15953  00  =3      BYTE      sequenceNumber;               /**/
15954  00  =3      BYTE      groupId;                      /**/
15955  00  =3      BYTE      groupName1;                   
15956  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_1BYTE_FRAME;
15957  00  =3  
15958  00  =3  /************************************************************/
15959  00  =3  /* Ctrl Replication Transfer Group Name 2byte command class structs */
15960  00  =3  /************************************************************/
15961  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_2BYTE_FRAME_
15962  00  =3  {
15963  00  =3      BYTE      cmdClass;                     /* The command class */
15964  00  =3      BYTE      cmd;                          /* The command */
15965  00  =3      BYTE      sequenceNumber;               /**/
15966  00  =3      BYTE      groupId;                      /**/
15967  00  =3      BYTE      groupName1;                   /* MSB */
15968  00  =3      BYTE      groupName2;                   /* LSB */
15969  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_2BYTE_FRAME;
15970  00  =3  
15971  00  =3  /************************************************************/
15972  00  =3  /* Ctrl Replication Transfer Group Name 3byte command class structs */
15973  00  =3  /************************************************************/
15974  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_3BYTE_FRAME_
15975  00  =3  {
15976  00  =3      BYTE      cmdClass;                     /* The command class */
15977  00  =3      BYTE      cmd;                          /* The command */
15978  00  =3      BYTE      sequenceNumber;               /**/
15979  00  =3      BYTE      groupId;                      /**/
15980  00  =3      BYTE      groupName1;                   /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 274 

15981  00  =3      BYTE      groupName2;                   
15982  00  =3      BYTE      groupName3;                   /* LSB */
15983  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_3BYTE_FRAME;
15984  00  =3  
15985  00  =3  /************************************************************/
15986  00  =3  /* Ctrl Replication Transfer Group Name 4byte command class structs */
15987  00  =3  /************************************************************/
15988  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_4BYTE_FRAME_
15989  00  =3  {
15990  00  =3      BYTE      cmdClass;                     /* The command class */
15991  00  =3      BYTE      cmd;                          /* The command */
15992  00  =3      BYTE      sequenceNumber;               /**/
15993  00  =3      BYTE      groupId;                      /**/
15994  00  =3      BYTE      groupName1;                   /* MSB */
15995  00  =3      BYTE      groupName2;                   
15996  00  =3      BYTE      groupName3;                   
15997  00  =3      BYTE      groupName4;                   /* LSB */
15998  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_GROUP_NAME_4BYTE_FRAME;
15999  00  =3  
16000  00  =3  /************************************************************/
16001  00  =3  /* Ctrl Replication Transfer Scene command class structs */ 
16002  00  =3  /************************************************************/
16003  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_SCENE_FRAME_
16004  00  =3  {
16005  00  =3      BYTE      cmdClass;                     /* The command class */
16006  00  =3      BYTE      cmd;                          /* The command */
16007  00  =3      BYTE      sequenceNumber;               /**/
16008  00  =3      BYTE      sceneId;                      /**/
16009  00  =3      BYTE      nodeId;                       /**/
16010  00  =3      BYTE      level;                        /**/
16011  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_SCENE_FRAME;
16012  00  =3  
16013  00  =3  /************************************************************/
16014  00  =3  /* Ctrl Replication Transfer Scene Name 1byte command class structs */
16015  00  =3  /************************************************************/
16016  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_1BYTE_FRAME_
16017  00  =3  {
16018  00  =3      BYTE      cmdClass;                     /* The command class */
16019  00  =3      BYTE      cmd;                          /* The command */
16020  00  =3      BYTE      sequenceNumber;               /**/
16021  00  =3      BYTE      sceneId;                      /**/
16022  00  =3      BYTE      sceneName1;                   
16023  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_1BYTE_FRAME;
16024  00  =3  
16025  00  =3  /************************************************************/
16026  00  =3  /* Ctrl Replication Transfer Scene Name 2byte command class structs */
16027  00  =3  /************************************************************/
16028  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_2BYTE_FRAME_
16029  00  =3  {
16030  00  =3      BYTE      cmdClass;                     /* The command class */
16031  00  =3      BYTE      cmd;                          /* The command */
16032  00  =3      BYTE      sequenceNumber;               /**/
16033  00  =3      BYTE      sceneId;                      /**/
16034  00  =3      BYTE      sceneName1;                   /* MSB */
16035  00  =3      BYTE      sceneName2;                   /* LSB */
16036  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_2BYTE_FRAME;
16037  00  =3  
16038  00  =3  /************************************************************/
16039  00  =3  /* Ctrl Replication Transfer Scene Name 3byte command class structs */
16040  00  =3  /************************************************************/
16041  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_3BYTE_FRAME_
16042  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 275 

16043  00  =3      BYTE      cmdClass;                     /* The command class */
16044  00  =3      BYTE      cmd;                          /* The command */
16045  00  =3      BYTE      sequenceNumber;               /**/
16046  00  =3      BYTE      sceneId;                      /**/
16047  00  =3      BYTE      sceneName1;                   /* MSB */
16048  00  =3      BYTE      sceneName2;                   
16049  00  =3      BYTE      sceneName3;                   /* LSB */
16050  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_3BYTE_FRAME;
16051  00  =3  
16052  00  =3  /************************************************************/
16053  00  =3  /* Ctrl Replication Transfer Scene Name 4byte command class structs */
16054  00  =3  /************************************************************/
16055  00  =3  typedef struct _ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_4BYTE_FRAME_
16056  00  =3  {
16057  00  =3      BYTE      cmdClass;                     /* The command class */
16058  00  =3      BYTE      cmd;                          /* The command */
16059  00  =3      BYTE      sequenceNumber;               /**/
16060  00  =3      BYTE      sceneId;                      /**/
16061  00  =3      BYTE      sceneName1;                   /* MSB */
16062  00  =3      BYTE      sceneName2;                   
16063  00  =3      BYTE      sceneName3;                   
16064  00  =3      BYTE      sceneName4;                   /* LSB */
16065  00  =3  } ZW_CTRL_REPLICATION_TRANSFER_SCENE_NAME_4BYTE_FRAME;
16066  00  =3  
16067  00  =3  /************************************************************/
16068  00  =3  /* Crc 16 Encap 1byte command class structs */              
16069  00  =3  /************************************************************/
16070  00  =3  typedef struct _ZW_CRC_16_ENCAP_1BYTE_FRAME_
16071  00  =3  {
16072  00  =3      BYTE      cmdClass;                     /* The command class */
16073  00  =3      BYTE      cmd;                          /* The command */
16074  00  =3      BYTE      commandClass;                 /**/
16075  00  =3      BYTE      command;                      /**/
16076  00  =3      BYTE      data1;                        
16077  00  =3      BYTE      checksum1;                    /* MSB */
16078  00  =3      BYTE      checksum2;                    /* LSB */
16079  00  =3  } ZW_CRC_16_ENCAP_1BYTE_FRAME;
16080  00  =3  
16081  00  =3  /************************************************************/
16082  00  =3  /* Crc 16 Encap 2byte command class structs */              
16083  00  =3  /************************************************************/
16084  00  =3  typedef struct _ZW_CRC_16_ENCAP_2BYTE_FRAME_
16085  00  =3  {
16086  00  =3      BYTE      cmdClass;                     /* The command class */
16087  00  =3      BYTE      cmd;                          /* The command */
16088  00  =3      BYTE      commandClass;                 /**/
16089  00  =3      BYTE      command;                      /**/
16090  00  =3      BYTE      data1;                        /* MSB */
16091  00  =3      BYTE      data2;                        /* LSB */
16092  00  =3      BYTE      checksum1;                    /* MSB */
16093  00  =3      BYTE      checksum2;                    /* LSB */
16094  00  =3  } ZW_CRC_16_ENCAP_2BYTE_FRAME;
16095  00  =3  
16096  00  =3  /************************************************************/
16097  00  =3  /* Crc 16 Encap 3byte command class structs */              
16098  00  =3  /************************************************************/
16099  00  =3  typedef struct _ZW_CRC_16_ENCAP_3BYTE_FRAME_
16100  00  =3  {
16101  00  =3      BYTE      cmdClass;                     /* The command class */
16102  00  =3      BYTE      cmd;                          /* The command */
16103  00  =3      BYTE      commandClass;                 /**/
16104  00  =3      BYTE      command;                      /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 276 

16105  00  =3      BYTE      data1;                        /* MSB */
16106  00  =3      BYTE      data2;                        
16107  00  =3      BYTE      data3;                        /* LSB */
16108  00  =3      BYTE      checksum1;                    /* MSB */
16109  00  =3      BYTE      checksum2;                    /* LSB */
16110  00  =3  } ZW_CRC_16_ENCAP_3BYTE_FRAME;
16111  00  =3  
16112  00  =3  /************************************************************/
16113  00  =3  /* Crc 16 Encap 4byte command class structs */              
16114  00  =3  /************************************************************/
16115  00  =3  typedef struct _ZW_CRC_16_ENCAP_4BYTE_FRAME_
16116  00  =3  {
16117  00  =3      BYTE      cmdClass;                     /* The command class */
16118  00  =3      BYTE      cmd;                          /* The command */
16119  00  =3      BYTE      commandClass;                 /**/
16120  00  =3      BYTE      command;                      /**/
16121  00  =3      BYTE      data1;                        /* MSB */
16122  00  =3      BYTE      data2;                        
16123  00  =3      BYTE      data3;                        
16124  00  =3      BYTE      data4;                        /* LSB */
16125  00  =3      BYTE      checksum1;                    /* MSB */
16126  00  =3      BYTE      checksum2;                    /* LSB */
16127  00  =3  } ZW_CRC_16_ENCAP_4BYTE_FRAME;
16128  00  =3  
16129  00  =3  /************************************************************/
16130  00  =3  /* Dcp List Remove command class structs */                 
16131  00  =3  /************************************************************/
16132  00  =3  typedef struct _ZW_DCP_LIST_REMOVE_FRAME_
16133  00  =3  {
16134  00  =3      BYTE      cmdClass;                     /* The command class */
16135  00  =3      BYTE      cmd;                          /* The command */
16136  00  =3      BYTE      year1;                        /* MSB */
16137  00  =3      BYTE      year2;                        /* LSB */
16138  00  =3      BYTE      month;                        /**/
16139  00  =3      BYTE      day;                          /**/
16140  00  =3      BYTE      hourLocalTime;                /**/
16141  00  =3      BYTE      minuteLocalTime;              /**/
16142  00  =3      BYTE      secondLocalTime;              /**/
16143  00  =3  } ZW_DCP_LIST_REMOVE_FRAME;
16144  00  =3  
16145  00  =3  /************************************************************/
16146  00  =3  /* Dcp List Set variant group structs */                    
16147  00  =3  /************************************************************/
16148  00  =3  typedef struct _VG_DCP_LIST_SET_VG_
16149  00  =3  {
16150  00  =3      BYTE      genericDeviceClass;           /**/
16151  00  =3      BYTE      specificDeviceClass;          /**/
16152  00  =3  } VG_DCP_LIST_SET_VG;
16153  00  =3  
16154  00  =3  /************************************************************/
16155  00  =3  /* Dcp List Set 1byte command class structs */              
16156  00  =3  /************************************************************/
16157  00  =3  typedef struct _ZW_DCP_LIST_SET_1BYTE_FRAME_
16158  00  =3  {
16159  00  =3      BYTE      cmdClass;                     /* The command class */
16160  00  =3      BYTE      cmd;                          /* The command */
16161  00  =3      BYTE      year1;                        /* MSB */
16162  00  =3      BYTE      year2;                        /* LSB */
16163  00  =3      BYTE      month;                        /**/
16164  00  =3      BYTE      day;                          /**/
16165  00  =3      BYTE      hourLocalTime;                /**/
16166  00  =3      BYTE      minuteLocalTime;              /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 277 

16167  00  =3      BYTE      secondLocalTime;              /**/
16168  00  =3      BYTE      dcpRateId;                    /**/
16169  00  =3      BYTE      properties1;                  /* masked byte */
16170  00  =3      VG_DCP_LIST_SET_VG variantgroup1;                /**/
16171  00  =3      BYTE      startYear1;                   /* MSB */
16172  00  =3      BYTE      startYear2;                   /* LSB */
16173  00  =3      BYTE      startMonth;                   /**/
16174  00  =3      BYTE      startDay;                     /**/
16175  00  =3      BYTE      startHourLocalTime;           /**/
16176  00  =3      BYTE      startMinuteLocalTime;         /**/
16177  00  =3      BYTE      startSecondLocalTime;         /**/
16178  00  =3      BYTE      durationHourTime;             /**/
16179  00  =3      BYTE      durationMinuteTime;           /**/
16180  00  =3      BYTE      durationSecondTime;           /**/
16181  00  =3      BYTE      eventPriority;                /**/
16182  00  =3      BYTE      loadShedding;                 /**/
16183  00  =3      BYTE      startAssociationGroup;        /**/
16184  00  =3      BYTE      stopAssociationGroup;         /**/
16185  00  =3      BYTE      randomizationInterval;        /**/
16186  00  =3  } ZW_DCP_LIST_SET_1BYTE_FRAME;
16187  00  =3  
16188  00  =3  /************************************************************/
16189  00  =3  /* Dcp List Set 2byte command class structs */              
16190  00  =3  /************************************************************/
16191  00  =3  typedef struct _ZW_DCP_LIST_SET_2BYTE_FRAME_
16192  00  =3  {
16193  00  =3      BYTE      cmdClass;                     /* The command class */
16194  00  =3      BYTE      cmd;                          /* The command */
16195  00  =3      BYTE      year1;                        /* MSB */
16196  00  =3      BYTE      year2;                        /* LSB */
16197  00  =3      BYTE      month;                        /**/
16198  00  =3      BYTE      day;                          /**/
16199  00  =3      BYTE      hourLocalTime;                /**/
16200  00  =3      BYTE      minuteLocalTime;              /**/
16201  00  =3      BYTE      secondLocalTime;              /**/
16202  00  =3      BYTE      dcpRateId;                    /**/
16203  00  =3      BYTE      properties1;                  /* masked byte */
16204  00  =3      VG_DCP_LIST_SET_VG variantgroup1;                /**/
16205  00  =3      VG_DCP_LIST_SET_VG variantgroup2;                /**/
16206  00  =3      BYTE      startYear1;                   /* MSB */
16207  00  =3      BYTE      startYear2;                   /* LSB */
16208  00  =3      BYTE      startMonth;                   /**/
16209  00  =3      BYTE      startDay;                     /**/
16210  00  =3      BYTE      startHourLocalTime;           /**/
16211  00  =3      BYTE      startMinuteLocalTime;         /**/
16212  00  =3      BYTE      startSecondLocalTime;         /**/
16213  00  =3      BYTE      durationHourTime;             /**/
16214  00  =3      BYTE      durationMinuteTime;           /**/
16215  00  =3      BYTE      durationSecondTime;           /**/
16216  00  =3      BYTE      eventPriority;                /**/
16217  00  =3      BYTE      loadShedding;                 /**/
16218  00  =3      BYTE      startAssociationGroup;        /**/
16219  00  =3      BYTE      stopAssociationGroup;         /**/
16220  00  =3      BYTE      randomizationInterval;        /**/
16221  00  =3  } ZW_DCP_LIST_SET_2BYTE_FRAME;
16222  00  =3  
16223  00  =3  /************************************************************/
16224  00  =3  /* Dcp List Set 3byte command class structs */              
16225  00  =3  /************************************************************/
16226  00  =3  typedef struct _ZW_DCP_LIST_SET_3BYTE_FRAME_
16227  00  =3  {
16228  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 278 

16229  00  =3      BYTE      cmd;                          /* The command */
16230  00  =3      BYTE      year1;                        /* MSB */
16231  00  =3      BYTE      year2;                        /* LSB */
16232  00  =3      BYTE      month;                        /**/
16233  00  =3      BYTE      day;                          /**/
16234  00  =3      BYTE      hourLocalTime;                /**/
16235  00  =3      BYTE      minuteLocalTime;              /**/
16236  00  =3      BYTE      secondLocalTime;              /**/
16237  00  =3      BYTE      dcpRateId;                    /**/
16238  00  =3      BYTE      properties1;                  /* masked byte */
16239  00  =3      VG_DCP_LIST_SET_VG variantgroup1;                /**/
16240  00  =3      VG_DCP_LIST_SET_VG variantgroup2;                /**/
16241  00  =3      VG_DCP_LIST_SET_VG variantgroup3;                /**/
16242  00  =3      BYTE      startYear1;                   /* MSB */
16243  00  =3      BYTE      startYear2;                   /* LSB */
16244  00  =3      BYTE      startMonth;                   /**/
16245  00  =3      BYTE      startDay;                     /**/
16246  00  =3      BYTE      startHourLocalTime;           /**/
16247  00  =3      BYTE      startMinuteLocalTime;         /**/
16248  00  =3      BYTE      startSecondLocalTime;         /**/
16249  00  =3      BYTE      durationHourTime;             /**/
16250  00  =3      BYTE      durationMinuteTime;           /**/
16251  00  =3      BYTE      durationSecondTime;           /**/
16252  00  =3      BYTE      eventPriority;                /**/
16253  00  =3      BYTE      loadShedding;                 /**/
16254  00  =3      BYTE      startAssociationGroup;        /**/
16255  00  =3      BYTE      stopAssociationGroup;         /**/
16256  00  =3      BYTE      randomizationInterval;        /**/
16257  00  =3  } ZW_DCP_LIST_SET_3BYTE_FRAME;
16258  00  =3  
16259  00  =3  /************************************************************/
16260  00  =3  /* Dcp List Set 4byte command class structs */              
16261  00  =3  /************************************************************/
16262  00  =3  typedef struct _ZW_DCP_LIST_SET_4BYTE_FRAME_
16263  00  =3  {
16264  00  =3      BYTE      cmdClass;                     /* The command class */
16265  00  =3      BYTE      cmd;                          /* The command */
16266  00  =3      BYTE      year1;                        /* MSB */
16267  00  =3      BYTE      year2;                        /* LSB */
16268  00  =3      BYTE      month;                        /**/
16269  00  =3      BYTE      day;                          /**/
16270  00  =3      BYTE      hourLocalTime;                /**/
16271  00  =3      BYTE      minuteLocalTime;              /**/
16272  00  =3      BYTE      secondLocalTime;              /**/
16273  00  =3      BYTE      dcpRateId;                    /**/
16274  00  =3      BYTE      properties1;                  /* masked byte */
16275  00  =3      VG_DCP_LIST_SET_VG variantgroup1;                /**/
16276  00  =3      VG_DCP_LIST_SET_VG variantgroup2;                /**/
16277  00  =3      VG_DCP_LIST_SET_VG variantgroup3;                /**/
16278  00  =3      VG_DCP_LIST_SET_VG variantgroup4;                /**/
16279  00  =3      BYTE      startYear1;                   /* MSB */
16280  00  =3      BYTE      startYear2;                   /* LSB */
16281  00  =3      BYTE      startMonth;                   /**/
16282  00  =3      BYTE      startDay;                     /**/
16283  00  =3      BYTE      startHourLocalTime;           /**/
16284  00  =3      BYTE      startMinuteLocalTime;         /**/
16285  00  =3      BYTE      startSecondLocalTime;         /**/
16286  00  =3      BYTE      durationHourTime;             /**/
16287  00  =3      BYTE      durationMinuteTime;           /**/
16288  00  =3      BYTE      durationSecondTime;           /**/
16289  00  =3      BYTE      eventPriority;                /**/
16290  00  =3      BYTE      loadShedding;                 /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 279 

16291  00  =3      BYTE      startAssociationGroup;        /**/
16292  00  =3      BYTE      stopAssociationGroup;         /**/
16293  00  =3      BYTE      randomizationInterval;        /**/
16294  00  =3  } ZW_DCP_LIST_SET_4BYTE_FRAME;
16295  00  =3  
16296  00  =3  /************************************************************/
16297  00  =3  /* Dcp List Supported Get command class structs */          
16298  00  =3  /************************************************************/
16299  00  =3  typedef struct _ZW_DCP_LIST_SUPPORTED_GET_FRAME_
16300  00  =3  {
16301  00  =3      BYTE      cmdClass;                     /* The command class */
16302  00  =3      BYTE      cmd;                          /* The command */
16303  00  =3  } ZW_DCP_LIST_SUPPORTED_GET_FRAME;
16304  00  =3  
16305  00  =3  /************************************************************/
16306  00  =3  /* Dcp List Supported Report command class structs */       
16307  00  =3  /************************************************************/
16308  00  =3  typedef struct _ZW_DCP_LIST_SUPPORTED_REPORT_FRAME_
16309  00  =3  {
16310  00  =3      BYTE      cmdClass;                     /* The command class */
16311  00  =3      BYTE      cmd;                          /* The command */
16312  00  =3      BYTE      dcpListSize;                  /**/
16313  00  =3      BYTE      freeDcpListEntries;           /**/
16314  00  =3  } ZW_DCP_LIST_SUPPORTED_REPORT_FRAME;
16315  00  =3  
16316  00  =3  /************************************************************/
16317  00  =3  /* Dcp Event Status Get command class structs */            
16318  00  =3  /************************************************************/
16319  00  =3  typedef struct _ZW_DCP_EVENT_STATUS_GET_FRAME_
16320  00  =3  {
16321  00  =3      BYTE      cmdClass;                     /* The command class */
16322  00  =3      BYTE      cmd;                          /* The command */
16323  00  =3      BYTE      year1;                        /* MSB */
16324  00  =3      BYTE      year2;                        /* LSB */
16325  00  =3      BYTE      month;                        /**/
16326  00  =3      BYTE      day;                          /**/
16327  00  =3      BYTE      hourLocalTime;                /**/
16328  00  =3      BYTE      minuteLocalTime;              /**/
16329  00  =3      BYTE      secondLocalTime;              /**/
16330  00  =3  } ZW_DCP_EVENT_STATUS_GET_FRAME;
16331  00  =3  
16332  00  =3  /************************************************************/
16333  00  =3  /* Dcp Event Status Report command class structs */         
16334  00  =3  /************************************************************/
16335  00  =3  typedef struct _ZW_DCP_EVENT_STATUS_REPORT_FRAME_
16336  00  =3  {
16337  00  =3      BYTE      cmdClass;                     /* The command class */
16338  00  =3      BYTE      cmd;                          /* The command */
16339  00  =3      BYTE      year1;                        /* MSB */
16340  00  =3      BYTE      year2;                        /* LSB */
16341  00  =3      BYTE      month;                        /**/
16342  00  =3      BYTE      day;                          /**/
16343  00  =3      BYTE      hourLocalTime;                /**/
16344  00  =3      BYTE      minuteLocalTime;              /**/
16345  00  =3      BYTE      secondLocalTime;              /**/
16346  00  =3      BYTE      eventStatus;                  /**/
16347  00  =3  } ZW_DCP_EVENT_STATUS_REPORT_FRAME;
16348  00  =3  
16349  00  =3  /************************************************************/
16350  00  =3  /* Dcp List Get command class structs */                    
16351  00  =3  /************************************************************/
16352  00  =3  typedef struct _ZW_DCP_LIST_GET_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 280 

16353  00  =3  {
16354  00  =3      BYTE      cmdClass;                     /* The command class */
16355  00  =3      BYTE      cmd;                          /* The command */
16356  00  =3  } ZW_DCP_LIST_GET_FRAME;
16357  00  =3  
16358  00  =3  /************************************************************/
16359  00  =3  /* Dcp List Report variant group structs */                 
16360  00  =3  /************************************************************/
16361  00  =3  typedef struct _VG_DCP_LIST_REPORT_VG_
16362  00  =3  {
16363  00  =3      BYTE      genericDeviceClass;           /**/
16364  00  =3      BYTE      specificDeviceClass;          /**/
16365  00  =3  } VG_DCP_LIST_REPORT_VG;
16366  00  =3  
16367  00  =3  /************************************************************/
16368  00  =3  /* Dcp List Report 1byte command class structs */           
16369  00  =3  /************************************************************/
16370  00  =3  typedef struct _ZW_DCP_LIST_REPORT_1BYTE_FRAME_
16371  00  =3  {
16372  00  =3      BYTE      cmdClass;                     /* The command class */
16373  00  =3      BYTE      cmd;                          /* The command */
16374  00  =3      BYTE      reportsToFollow;              /**/
16375  00  =3      BYTE      year1;                        /* MSB */
16376  00  =3      BYTE      year2;                        /* LSB */
16377  00  =3      BYTE      month;                        /**/
16378  00  =3      BYTE      day;                          /**/
16379  00  =3      BYTE      hourLocalTime;                /**/
16380  00  =3      BYTE      minuteLocalTime;              /**/
16381  00  =3      BYTE      secondLocalTime;              /**/
16382  00  =3      BYTE      dcpId;                        /**/
16383  00  =3      BYTE      properties1;                  /* masked byte */
16384  00  =3      VG_DCP_LIST_REPORT_VG variantgroup1;                /**/
16385  00  =3      BYTE      startYear1;                   /* MSB */
16386  00  =3      BYTE      startYear2;                   /* LSB */
16387  00  =3      BYTE      startMonth;                   /**/
16388  00  =3      BYTE      startDay;                     /**/
16389  00  =3      BYTE      startHourLocalTime;           /**/
16390  00  =3      BYTE      startMinuteLocalTime;         /**/
16391  00  =3      BYTE      startSecondLocalTime;         /**/
16392  00  =3      BYTE      durationHourTime;             /**/
16393  00  =3      BYTE      durationMinuteTime;           /**/
16394  00  =3      BYTE      durationSecondTime;           /**/
16395  00  =3      BYTE      eventPriority;                /**/
16396  00  =3      BYTE      loadShedding;                 /**/
16397  00  =3      BYTE      startAssociationGroup;        /**/
16398  00  =3      BYTE      stopAssociationGroup;         /**/
16399  00  =3      BYTE      randomizationInterval;        /**/
16400  00  =3  } ZW_DCP_LIST_REPORT_1BYTE_FRAME;
16401  00  =3  
16402  00  =3  /************************************************************/
16403  00  =3  /* Dcp List Report 2byte command class structs */           
16404  00  =3  /************************************************************/
16405  00  =3  typedef struct _ZW_DCP_LIST_REPORT_2BYTE_FRAME_
16406  00  =3  {
16407  00  =3      BYTE      cmdClass;                     /* The command class */
16408  00  =3      BYTE      cmd;                          /* The command */
16409  00  =3      BYTE      reportsToFollow;              /**/
16410  00  =3      BYTE      year1;                        /* MSB */
16411  00  =3      BYTE      year2;                        /* LSB */
16412  00  =3      BYTE      month;                        /**/
16413  00  =3      BYTE      day;                          /**/
16414  00  =3      BYTE      hourLocalTime;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 281 

16415  00  =3      BYTE      minuteLocalTime;              /**/
16416  00  =3      BYTE      secondLocalTime;              /**/
16417  00  =3      BYTE      dcpId;                        /**/
16418  00  =3      BYTE      properties1;                  /* masked byte */
16419  00  =3      VG_DCP_LIST_REPORT_VG variantgroup1;                /**/
16420  00  =3      VG_DCP_LIST_REPORT_VG variantgroup2;                /**/
16421  00  =3      BYTE      startYear1;                   /* MSB */
16422  00  =3      BYTE      startYear2;                   /* LSB */
16423  00  =3      BYTE      startMonth;                   /**/
16424  00  =3      BYTE      startDay;                     /**/
16425  00  =3      BYTE      startHourLocalTime;           /**/
16426  00  =3      BYTE      startMinuteLocalTime;         /**/
16427  00  =3      BYTE      startSecondLocalTime;         /**/
16428  00  =3      BYTE      durationHourTime;             /**/
16429  00  =3      BYTE      durationMinuteTime;           /**/
16430  00  =3      BYTE      durationSecondTime;           /**/
16431  00  =3      BYTE      eventPriority;                /**/
16432  00  =3      BYTE      loadShedding;                 /**/
16433  00  =3      BYTE      startAssociationGroup;        /**/
16434  00  =3      BYTE      stopAssociationGroup;         /**/
16435  00  =3      BYTE      randomizationInterval;        /**/
16436  00  =3  } ZW_DCP_LIST_REPORT_2BYTE_FRAME;
16437  00  =3  
16438  00  =3  /************************************************************/
16439  00  =3  /* Dcp List Report 3byte command class structs */           
16440  00  =3  /************************************************************/
16441  00  =3  typedef struct _ZW_DCP_LIST_REPORT_3BYTE_FRAME_
16442  00  =3  {
16443  00  =3      BYTE      cmdClass;                     /* The command class */
16444  00  =3      BYTE      cmd;                          /* The command */
16445  00  =3      BYTE      reportsToFollow;              /**/
16446  00  =3      BYTE      year1;                        /* MSB */
16447  00  =3      BYTE      year2;                        /* LSB */
16448  00  =3      BYTE      month;                        /**/
16449  00  =3      BYTE      day;                          /**/
16450  00  =3      BYTE      hourLocalTime;                /**/
16451  00  =3      BYTE      minuteLocalTime;              /**/
16452  00  =3      BYTE      secondLocalTime;              /**/
16453  00  =3      BYTE      dcpId;                        /**/
16454  00  =3      BYTE      properties1;                  /* masked byte */
16455  00  =3      VG_DCP_LIST_REPORT_VG variantgroup1;                /**/
16456  00  =3      VG_DCP_LIST_REPORT_VG variantgroup2;                /**/
16457  00  =3      VG_DCP_LIST_REPORT_VG variantgroup3;                /**/
16458  00  =3      BYTE      startYear1;                   /* MSB */
16459  00  =3      BYTE      startYear2;                   /* LSB */
16460  00  =3      BYTE      startMonth;                   /**/
16461  00  =3      BYTE      startDay;                     /**/
16462  00  =3      BYTE      startHourLocalTime;           /**/
16463  00  =3      BYTE      startMinuteLocalTime;         /**/
16464  00  =3      BYTE      startSecondLocalTime;         /**/
16465  00  =3      BYTE      durationHourTime;             /**/
16466  00  =3      BYTE      durationMinuteTime;           /**/
16467  00  =3      BYTE      durationSecondTime;           /**/
16468  00  =3      BYTE      eventPriority;                /**/
16469  00  =3      BYTE      loadShedding;                 /**/
16470  00  =3      BYTE      startAssociationGroup;        /**/
16471  00  =3      BYTE      stopAssociationGroup;         /**/
16472  00  =3      BYTE      randomizationInterval;        /**/
16473  00  =3  } ZW_DCP_LIST_REPORT_3BYTE_FRAME;
16474  00  =3  
16475  00  =3  /************************************************************/
16476  00  =3  /* Dcp List Report 4byte command class structs */           
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 282 

16477  00  =3  /************************************************************/
16478  00  =3  typedef struct _ZW_DCP_LIST_REPORT_4BYTE_FRAME_
16479  00  =3  {
16480  00  =3      BYTE      cmdClass;                     /* The command class */
16481  00  =3      BYTE      cmd;                          /* The command */
16482  00  =3      BYTE      reportsToFollow;              /**/
16483  00  =3      BYTE      year1;                        /* MSB */
16484  00  =3      BYTE      year2;                        /* LSB */
16485  00  =3      BYTE      month;                        /**/
16486  00  =3      BYTE      day;                          /**/
16487  00  =3      BYTE      hourLocalTime;                /**/
16488  00  =3      BYTE      minuteLocalTime;              /**/
16489  00  =3      BYTE      secondLocalTime;              /**/
16490  00  =3      BYTE      dcpId;                        /**/
16491  00  =3      BYTE      properties1;                  /* masked byte */
16492  00  =3      VG_DCP_LIST_REPORT_VG variantgroup1;                /**/
16493  00  =3      VG_DCP_LIST_REPORT_VG variantgroup2;                /**/
16494  00  =3      VG_DCP_LIST_REPORT_VG variantgroup3;                /**/
16495  00  =3      VG_DCP_LIST_REPORT_VG variantgroup4;                /**/
16496  00  =3      BYTE      startYear1;                   /* MSB */
16497  00  =3      BYTE      startYear2;                   /* LSB */
16498  00  =3      BYTE      startMonth;                   /**/
16499  00  =3      BYTE      startDay;                     /**/
16500  00  =3      BYTE      startHourLocalTime;           /**/
16501  00  =3      BYTE      startMinuteLocalTime;         /**/
16502  00  =3      BYTE      startSecondLocalTime;         /**/
16503  00  =3      BYTE      durationHourTime;             /**/
16504  00  =3      BYTE      durationMinuteTime;           /**/
16505  00  =3      BYTE      durationSecondTime;           /**/
16506  00  =3      BYTE      eventPriority;                /**/
16507  00  =3      BYTE      loadShedding;                 /**/
16508  00  =3      BYTE      startAssociationGroup;        /**/
16509  00  =3      BYTE      stopAssociationGroup;         /**/
16510  00  =3      BYTE      randomizationInterval;        /**/
16511  00  =3  } ZW_DCP_LIST_REPORT_4BYTE_FRAME;
16512  00  =3  
16513  00  =3  /************************************************************/
16514  00  =3  /* Door Lock Logging Records Supported Get command class structs */
16515  00  =3  /************************************************************/
16516  00  =3  typedef struct _ZW_DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET_FRAME_
16517  00  =3  {
16518  00  =3      BYTE      cmdClass;                     /* The command class */
16519  00  =3      BYTE      cmd;                          /* The command */
16520  00  =3  } ZW_DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_GET_FRAME;
16521  00  =3  
16522  00  =3  /************************************************************/
16523  00  =3  /* Door Lock Logging Records Supported Report command class structs */
16524  00  =3  /************************************************************/
16525  00  =3  typedef struct _ZW_DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT_FRAME_
16526  00  =3  {
16527  00  =3      BYTE      cmdClass;                     /* The command class */
16528  00  =3      BYTE      cmd;                          /* The command */
16529  00  =3      BYTE      maxRecordsStored;             /**/
16530  00  =3  } ZW_DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT_FRAME;
16531  00  =3  
16532  00  =3  /************************************************************/
16533  00  =3  /* Record Get command class structs */                      
16534  00  =3  /************************************************************/
16535  00  =3  typedef struct _ZW_RECORD_GET_FRAME_
16536  00  =3  {
16537  00  =3      BYTE      cmdClass;                     /* The command class */
16538  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 283 

16539  00  =3      BYTE      recordNumber;                 /**/
16540  00  =3  } ZW_RECORD_GET_FRAME;
16541  00  =3  
16542  00  =3  /************************************************************/
16543  00  =3  /* Record Report 1byte command class structs */             
16544  00  =3  /************************************************************/
16545  00  =3  typedef struct _ZW_RECORD_REPORT_1BYTE_FRAME_
16546  00  =3  {
16547  00  =3      BYTE      cmdClass;                     /* The command class */
16548  00  =3      BYTE      cmd;                          /* The command */
16549  00  =3      BYTE      recordNumber;                 /**/
16550  00  =3      BYTE      year1;                        /* MSB */
16551  00  =3      BYTE      year2;                        /* LSB */
16552  00  =3      BYTE      month;                        /**/
16553  00  =3      BYTE      day;                          /**/
16554  00  =3      BYTE      properties1;                  /* masked byte */
16555  00  =3      BYTE      minuteLocalTime;              /**/
16556  00  =3      BYTE      secondLocalTime;              /**/
16557  00  =3      BYTE      eventType;                    /**/
16558  00  =3      BYTE      userIdentifier;               /**/
16559  00  =3      BYTE      userCodeLength;               /**/
16560  00  =3      BYTE      userCode1;                    
16561  00  =3  } ZW_RECORD_REPORT_1BYTE_FRAME;
16562  00  =3  
16563  00  =3  /************************************************************/
16564  00  =3  /* Record Report 2byte command class structs */             
16565  00  =3  /************************************************************/
16566  00  =3  typedef struct _ZW_RECORD_REPORT_2BYTE_FRAME_
16567  00  =3  {
16568  00  =3      BYTE      cmdClass;                     /* The command class */
16569  00  =3      BYTE      cmd;                          /* The command */
16570  00  =3      BYTE      recordNumber;                 /**/
16571  00  =3      BYTE      year1;                        /* MSB */
16572  00  =3      BYTE      year2;                        /* LSB */
16573  00  =3      BYTE      month;                        /**/
16574  00  =3      BYTE      day;                          /**/
16575  00  =3      BYTE      properties1;                  /* masked byte */
16576  00  =3      BYTE      minuteLocalTime;              /**/
16577  00  =3      BYTE      secondLocalTime;              /**/
16578  00  =3      BYTE      eventType;                    /**/
16579  00  =3      BYTE      userIdentifier;               /**/
16580  00  =3      BYTE      userCodeLength;               /**/
16581  00  =3      BYTE      userCode1;                    /* MSB */
16582  00  =3      BYTE      userCode2;                    /* LSB */
16583  00  =3  } ZW_RECORD_REPORT_2BYTE_FRAME;
16584  00  =3  
16585  00  =3  /************************************************************/
16586  00  =3  /* Record Report 3byte command class structs */             
16587  00  =3  /************************************************************/
16588  00  =3  typedef struct _ZW_RECORD_REPORT_3BYTE_FRAME_
16589  00  =3  {
16590  00  =3      BYTE      cmdClass;                     /* The command class */
16591  00  =3      BYTE      cmd;                          /* The command */
16592  00  =3      BYTE      recordNumber;                 /**/
16593  00  =3      BYTE      year1;                        /* MSB */
16594  00  =3      BYTE      year2;                        /* LSB */
16595  00  =3      BYTE      month;                        /**/
16596  00  =3      BYTE      day;                          /**/
16597  00  =3      BYTE      properties1;                  /* masked byte */
16598  00  =3      BYTE      minuteLocalTime;              /**/
16599  00  =3      BYTE      secondLocalTime;              /**/
16600  00  =3      BYTE      eventType;                    /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 284 

16601  00  =3      BYTE      userIdentifier;               /**/
16602  00  =3      BYTE      userCodeLength;               /**/
16603  00  =3      BYTE      userCode1;                    /* MSB */
16604  00  =3      BYTE      userCode2;                    
16605  00  =3      BYTE      userCode3;                    /* LSB */
16606  00  =3  } ZW_RECORD_REPORT_3BYTE_FRAME;
16607  00  =3  
16608  00  =3  /************************************************************/
16609  00  =3  /* Record Report 4byte command class structs */             
16610  00  =3  /************************************************************/
16611  00  =3  typedef struct _ZW_RECORD_REPORT_4BYTE_FRAME_
16612  00  =3  {
16613  00  =3      BYTE      cmdClass;                     /* The command class */
16614  00  =3      BYTE      cmd;                          /* The command */
16615  00  =3      BYTE      recordNumber;                 /**/
16616  00  =3      BYTE      year1;                        /* MSB */
16617  00  =3      BYTE      year2;                        /* LSB */
16618  00  =3      BYTE      month;                        /**/
16619  00  =3      BYTE      day;                          /**/
16620  00  =3      BYTE      properties1;                  /* masked byte */
16621  00  =3      BYTE      minuteLocalTime;              /**/
16622  00  =3      BYTE      secondLocalTime;              /**/
16623  00  =3      BYTE      eventType;                    /**/
16624  00  =3      BYTE      userIdentifier;               /**/
16625  00  =3      BYTE      userCodeLength;               /**/
16626  00  =3      BYTE      userCode1;                    /* MSB */
16627  00  =3      BYTE      userCode2;                    
16628  00  =3      BYTE      userCode3;                    
16629  00  =3      BYTE      userCode4;                    /* LSB */
16630  00  =3  } ZW_RECORD_REPORT_4BYTE_FRAME;
16631  00  =3  
16632  00  =3  /************************************************************/
16633  00  =3  /* Door Lock Configuration Get command class structs */     
16634  00  =3  /************************************************************/
16635  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_GET_FRAME_
16636  00  =3  {
16637  00  =3      BYTE      cmdClass;                     /* The command class */
16638  00  =3      BYTE      cmd;                          /* The command */
16639  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_GET_FRAME;
16640  00  =3  
16641  00  =3  /************************************************************/
16642  00  =3  /* Door Lock Configuration Report command class structs */  
16643  00  =3  /************************************************************/
16644  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_REPORT_FRAME_
16645  00  =3  {
16646  00  =3      BYTE      cmdClass;                     /* The command class */
16647  00  =3      BYTE      cmd;                          /* The command */
16648  00  =3      BYTE      operationType;                /**/
16649  00  =3      BYTE      properties1;                  /* masked byte */
16650  00  =3      BYTE      lockTimeoutMinutes;           /**/
16651  00  =3      BYTE      lockTimeoutSeconds;           /**/
16652  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_REPORT_FRAME;
16653  00  =3  
16654  00  =3  /************************************************************/
16655  00  =3  /* Door Lock Configuration Set command class structs */     
16656  00  =3  /************************************************************/
16657  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_SET_FRAME_
16658  00  =3  {
16659  00  =3      BYTE      cmdClass;                     /* The command class */
16660  00  =3      BYTE      cmd;                          /* The command */
16661  00  =3      BYTE      operationType;                /**/
16662  00  =3      BYTE      properties1;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 285 

16663  00  =3      BYTE      lockTimeoutMinutes;           /**/
16664  00  =3      BYTE      lockTimeoutSeconds;           /**/
16665  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_SET_FRAME;
16666  00  =3  
16667  00  =3  /************************************************************/
16668  00  =3  /* Door Lock Operation Get command class structs */         
16669  00  =3  /************************************************************/
16670  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_GET_FRAME_
16671  00  =3  {
16672  00  =3      BYTE      cmdClass;                     /* The command class */
16673  00  =3      BYTE      cmd;                          /* The command */
16674  00  =3  } ZW_DOOR_LOCK_OPERATION_GET_FRAME;
16675  00  =3  
16676  00  =3  /************************************************************/
16677  00  =3  /* Door Lock Operation Report command class structs */      
16678  00  =3  /************************************************************/
16679  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_REPORT_FRAME_
16680  00  =3  {
16681  00  =3      BYTE      cmdClass;                     /* The command class */
16682  00  =3      BYTE      cmd;                          /* The command */
16683  00  =3      BYTE      doorLockMode;                 /**/
16684  00  =3      BYTE      properties1;                  /* masked byte */
16685  00  =3      BYTE      doorCondition;                /**/
16686  00  =3      BYTE      lockTimeoutMinutes;           /**/
16687  00  =3      BYTE      lockTimeoutSeconds;           /**/
16688  00  =3  } ZW_DOOR_LOCK_OPERATION_REPORT_FRAME;
16689  00  =3  
16690  00  =3  /************************************************************/
16691  00  =3  /* Door Lock Operation Set command class structs */         
16692  00  =3  /************************************************************/
16693  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_SET_FRAME_
16694  00  =3  {
16695  00  =3      BYTE      cmdClass;                     /* The command class */
16696  00  =3      BYTE      cmd;                          /* The command */
16697  00  =3      BYTE      doorLockMode;                 /**/
16698  00  =3  } ZW_DOOR_LOCK_OPERATION_SET_FRAME;
16699  00  =3  
16700  00  =3  /************************************************************/
16701  00  =3  /* Door Lock Configuration Get V2 command class structs */  
16702  00  =3  /************************************************************/
16703  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_GET_V2_FRAME_
16704  00  =3  {
16705  00  =3      BYTE      cmdClass;                     /* The command class */
16706  00  =3      BYTE      cmd;                          /* The command */
16707  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_GET_V2_FRAME;
16708  00  =3  
16709  00  =3  /************************************************************/
16710  00  =3  /* Door Lock Configuration Report V2 command class structs */
16711  00  =3  /************************************************************/
16712  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_REPORT_V2_FRAME_
16713  00  =3  {
16714  00  =3      BYTE      cmdClass;                     /* The command class */
16715  00  =3      BYTE      cmd;                          /* The command */
16716  00  =3      BYTE      operationType;                /**/
16717  00  =3      BYTE      properties1;                  /* masked byte */
16718  00  =3      BYTE      lockTimeoutMinutes;           /**/
16719  00  =3      BYTE      lockTimeoutSeconds;           /**/
16720  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_REPORT_V2_FRAME;
16721  00  =3  
16722  00  =3  /************************************************************/
16723  00  =3  /* Door Lock Configuration Set V2 command class structs */  
16724  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 286 

16725  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_SET_V2_FRAME_
16726  00  =3  {
16727  00  =3      BYTE      cmdClass;                     /* The command class */
16728  00  =3      BYTE      cmd;                          /* The command */
16729  00  =3      BYTE      operationType;                /**/
16730  00  =3      BYTE      properties1;                  /* masked byte */
16731  00  =3      BYTE      lockTimeoutMinutes;           /**/
16732  00  =3      BYTE      lockTimeoutSeconds;           /**/
16733  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_SET_V2_FRAME;
16734  00  =3  
16735  00  =3  /************************************************************/
16736  00  =3  /* Door Lock Operation Get V2 command class structs */      
16737  00  =3  /************************************************************/
16738  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_GET_V2_FRAME_
16739  00  =3  {
16740  00  =3      BYTE      cmdClass;                     /* The command class */
16741  00  =3      BYTE      cmd;                          /* The command */
16742  00  =3  } ZW_DOOR_LOCK_OPERATION_GET_V2_FRAME;
16743  00  =3  
16744  00  =3  /************************************************************/
16745  00  =3  /* Door Lock Operation Report V2 command class structs */   
16746  00  =3  /************************************************************/
16747  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_REPORT_V2_FRAME_
16748  00  =3  {
16749  00  =3      BYTE      cmdClass;                     /* The command class */
16750  00  =3      BYTE      cmd;                          /* The command */
16751  00  =3      BYTE      doorLockMode;                 /**/
16752  00  =3      BYTE      properties1;                  /* masked byte */
16753  00  =3      BYTE      doorCondition;                /**/
16754  00  =3      BYTE      lockTimeoutMinutes;           /**/
16755  00  =3      BYTE      lockTimeoutSeconds;           /**/
16756  00  =3  } ZW_DOOR_LOCK_OPERATION_REPORT_V2_FRAME;
16757  00  =3  
16758  00  =3  /************************************************************/
16759  00  =3  /* Door Lock Operation Set V2 command class structs */      
16760  00  =3  /************************************************************/
16761  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_SET_V2_FRAME_
16762  00  =3  {
16763  00  =3      BYTE      cmdClass;                     /* The command class */
16764  00  =3      BYTE      cmd;                          /* The command */
16765  00  =3      BYTE      doorLockMode;                 /**/
16766  00  =3  } ZW_DOOR_LOCK_OPERATION_SET_V2_FRAME;
16767  00  =3  
16768  00  =3  /************************************************************/
16769  00  =3  /* Door Lock Configuration Get V3 command class structs */  
16770  00  =3  /************************************************************/
16771  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_GET_V3_FRAME_
16772  00  =3  {
16773  00  =3      BYTE      cmdClass;                     /* The command class */
16774  00  =3      BYTE      cmd;                          /* The command */
16775  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_GET_V3_FRAME;
16776  00  =3  
16777  00  =3  /************************************************************/
16778  00  =3  /* Door Lock Configuration Report V3 command class structs */
16779  00  =3  /************************************************************/
16780  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_REPORT_V3_FRAME_
16781  00  =3  {
16782  00  =3      BYTE      cmdClass;                     /* The command class */
16783  00  =3      BYTE      cmd;                          /* The command */
16784  00  =3      BYTE      operationType;                /**/
16785  00  =3      BYTE      properties1;                  /* masked byte */
16786  00  =3      BYTE      lockTimeoutMinutes;           /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 287 

16787  00  =3      BYTE      lockTimeoutSeconds;           /**/
16788  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_REPORT_V3_FRAME;
16789  00  =3  
16790  00  =3  /************************************************************/
16791  00  =3  /* Door Lock Configuration Set V3 command class structs */  
16792  00  =3  /************************************************************/
16793  00  =3  typedef struct _ZW_DOOR_LOCK_CONFIGURATION_SET_V3_FRAME_
16794  00  =3  {
16795  00  =3      BYTE      cmdClass;                     /* The command class */
16796  00  =3      BYTE      cmd;                          /* The command */
16797  00  =3      BYTE      operationType;                /**/
16798  00  =3      BYTE      properties1;                  /* masked byte */
16799  00  =3      BYTE      lockTimeoutMinutes;           /**/
16800  00  =3      BYTE      lockTimeoutSeconds;           /**/
16801  00  =3  } ZW_DOOR_LOCK_CONFIGURATION_SET_V3_FRAME;
16802  00  =3  
16803  00  =3  /************************************************************/
16804  00  =3  /* Door Lock Operation Get V3 command class structs */      
16805  00  =3  /************************************************************/
16806  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_GET_V3_FRAME_
16807  00  =3  {
16808  00  =3      BYTE      cmdClass;                     /* The command class */
16809  00  =3      BYTE      cmd;                          /* The command */
16810  00  =3  } ZW_DOOR_LOCK_OPERATION_GET_V3_FRAME;
16811  00  =3  
16812  00  =3  /************************************************************/
16813  00  =3  /* Door Lock Operation Report V3 command class structs */   
16814  00  =3  /************************************************************/
16815  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_REPORT_V3_FRAME_
16816  00  =3  {
16817  00  =3      BYTE      cmdClass;                     /* The command class */
16818  00  =3      BYTE      cmd;                          /* The command */
16819  00  =3      BYTE      currentDoorLockMode;          /**/
16820  00  =3      BYTE      properties1;                  /* masked byte */
16821  00  =3      BYTE      doorCondition;                /**/
16822  00  =3      BYTE      lockTimeoutMinutes;           /**/
16823  00  =3      BYTE      lockTimeoutSeconds;           /**/
16824  00  =3      BYTE      targetDoorLockMode;           /**/
16825  00  =3      BYTE      duration;                     /**/
16826  00  =3  } ZW_DOOR_LOCK_OPERATION_REPORT_V3_FRAME;
16827  00  =3  
16828  00  =3  /************************************************************/
16829  00  =3  /* Door Lock Operation Set V3 command class structs */      
16830  00  =3  /************************************************************/
16831  00  =3  typedef struct _ZW_DOOR_LOCK_OPERATION_SET_V3_FRAME_
16832  00  =3  {
16833  00  =3      BYTE      cmdClass;                     /* The command class */
16834  00  =3      BYTE      cmd;                          /* The command */
16835  00  =3      BYTE      doorLockMode;                 /**/
16836  00  =3  } ZW_DOOR_LOCK_OPERATION_SET_V3_FRAME;
16837  00  =3  
16838  00  =3  /************************************************************/
16839  00  =3  /* Energy Production Get command class structs */           
16840  00  =3  /************************************************************/
16841  00  =3  typedef struct _ZW_ENERGY_PRODUCTION_GET_FRAME_
16842  00  =3  {
16843  00  =3      BYTE      cmdClass;                     /* The command class */
16844  00  =3      BYTE      cmd;                          /* The command */
16845  00  =3      BYTE      parameterNumber;              /**/
16846  00  =3  } ZW_ENERGY_PRODUCTION_GET_FRAME;
16847  00  =3  
16848  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 288 

16849  00  =3  /* Energy Production Report 1byte command class structs */  
16850  00  =3  /************************************************************/
16851  00  =3  typedef struct _ZW_ENERGY_PRODUCTION_REPORT_1BYTE_FRAME_
16852  00  =3  {
16853  00  =3      BYTE      cmdClass;                     /* The command class */
16854  00  =3      BYTE      cmd;                          /* The command */
16855  00  =3      BYTE      parameterNumber;              /**/
16856  00  =3      BYTE      level;                        /* masked byte */
16857  00  =3      BYTE      value1;                       
16858  00  =3  } ZW_ENERGY_PRODUCTION_REPORT_1BYTE_FRAME;
16859  00  =3  
16860  00  =3  /************************************************************/
16861  00  =3  /* Energy Production Report 2byte command class structs */  
16862  00  =3  /************************************************************/
16863  00  =3  typedef struct _ZW_ENERGY_PRODUCTION_REPORT_2BYTE_FRAME_
16864  00  =3  {
16865  00  =3      BYTE      cmdClass;                     /* The command class */
16866  00  =3      BYTE      cmd;                          /* The command */
16867  00  =3      BYTE      parameterNumber;              /**/
16868  00  =3      BYTE      level;                        /* masked byte */
16869  00  =3      BYTE      value1;                       /* MSB */
16870  00  =3      BYTE      value2;                       /* LSB */
16871  00  =3  } ZW_ENERGY_PRODUCTION_REPORT_2BYTE_FRAME;
16872  00  =3  
16873  00  =3  /************************************************************/
16874  00  =3  /* Energy Production Report 3byte command class structs */  
16875  00  =3  /************************************************************/
16876  00  =3  typedef struct _ZW_ENERGY_PRODUCTION_REPORT_3BYTE_FRAME_
16877  00  =3  {
16878  00  =3      BYTE      cmdClass;                     /* The command class */
16879  00  =3      BYTE      cmd;                          /* The command */
16880  00  =3      BYTE      parameterNumber;              /**/
16881  00  =3      BYTE      level;                        /* masked byte */
16882  00  =3      BYTE      value1;                       /* MSB */
16883  00  =3      BYTE      value2;                       
16884  00  =3      BYTE      value3;                       /* LSB */
16885  00  =3  } ZW_ENERGY_PRODUCTION_REPORT_3BYTE_FRAME;
16886  00  =3  
16887  00  =3  /************************************************************/
16888  00  =3  /* Energy Production Report 4byte command class structs */  
16889  00  =3  /************************************************************/
16890  00  =3  typedef struct _ZW_ENERGY_PRODUCTION_REPORT_4BYTE_FRAME_
16891  00  =3  {
16892  00  =3      BYTE      cmdClass;                     /* The command class */
16893  00  =3      BYTE      cmd;                          /* The command */
16894  00  =3      BYTE      parameterNumber;              /**/
16895  00  =3      BYTE      level;                        /* masked byte */
16896  00  =3      BYTE      value1;                       /* MSB */
16897  00  =3      BYTE      value2;                       
16898  00  =3      BYTE      value3;                       
16899  00  =3      BYTE      value4;                       /* LSB */
16900  00  =3  } ZW_ENERGY_PRODUCTION_REPORT_4BYTE_FRAME;
16901  00  =3  
16902  00  =3  /************************************************************/
16903  00  =3  /* Firmware Md Get command class structs */                 
16904  00  =3  /************************************************************/
16905  00  =3  typedef struct _ZW_FIRMWARE_MD_GET_FRAME_
16906  00  =3  {
16907  00  =3      BYTE      cmdClass;                     /* The command class */
16908  00  =3      BYTE      cmd;                          /* The command */
16909  00  =3  } ZW_FIRMWARE_MD_GET_FRAME;
16910  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 289 

16911  00  =3  /************************************************************/
16912  00  =3  /* Firmware Md Report command class structs */              
16913  00  =3  /************************************************************/
16914  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_FRAME_
16915  00  =3  {
16916  00  =3      BYTE      cmdClass;                     /* The command class */
16917  00  =3      BYTE      cmd;                          /* The command */
16918  00  =3      BYTE      manufacturerId1;              /* MSB */
16919  00  =3      BYTE      manufacturerId2;              /* LSB */
16920  00  =3      BYTE      firmwareId1;                  /* MSB */
16921  00  =3      BYTE      firmwareId2;                  /* LSB */
16922  00  =3      BYTE      checksum1;                    /* MSB */
16923  00  =3      BYTE      checksum2;                    /* LSB */
16924  00  =3  } ZW_FIRMWARE_MD_REPORT_FRAME;
16925  00  =3  
16926  00  =3  /************************************************************/
16927  00  =3  /* Firmware Update Md Get command class structs */          
16928  00  =3  /************************************************************/
16929  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_GET_FRAME_
16930  00  =3  {
16931  00  =3      BYTE      cmdClass;                     /* The command class */
16932  00  =3      BYTE      cmd;                          /* The command */
16933  00  =3      BYTE      numberOfReports;              /**/
16934  00  =3      BYTE      properties1;                  /* masked byte */
16935  00  =3      BYTE      reportNumber2;                /**/
16936  00  =3  } ZW_FIRMWARE_UPDATE_MD_GET_FRAME;
16937  00  =3  
16938  00  =3  /************************************************************/
16939  00  =3  /* Firmware Update Md Report 1byte command class structs */ 
16940  00  =3  /************************************************************/
16941  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_FRAME_
16942  00  =3  {
16943  00  =3      BYTE      cmdClass;                     /* The command class */
16944  00  =3      BYTE      cmd;                          /* The command */
16945  00  =3      BYTE      properties1;                  /* masked byte */
16946  00  =3      BYTE      reportNumber2;                /**/
16947  00  =3      BYTE      data1;                        
16948  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_FRAME;
16949  00  =3  
16950  00  =3  /************************************************************/
16951  00  =3  /* Firmware Update Md Report 2byte command class structs */ 
16952  00  =3  /************************************************************/
16953  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_FRAME_
16954  00  =3  {
16955  00  =3      BYTE      cmdClass;                     /* The command class */
16956  00  =3      BYTE      cmd;                          /* The command */
16957  00  =3      BYTE      properties1;                  /* masked byte */
16958  00  =3      BYTE      reportNumber2;                /**/
16959  00  =3      BYTE      data1;                        /* MSB */
16960  00  =3      BYTE      data2;                        /* LSB */
16961  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_FRAME;
16962  00  =3  
16963  00  =3  /************************************************************/
16964  00  =3  /* Firmware Update Md Report 3byte command class structs */ 
16965  00  =3  /************************************************************/
16966  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_FRAME_
16967  00  =3  {
16968  00  =3      BYTE      cmdClass;                     /* The command class */
16969  00  =3      BYTE      cmd;                          /* The command */
16970  00  =3      BYTE      properties1;                  /* masked byte */
16971  00  =3      BYTE      reportNumber2;                /**/
16972  00  =3      BYTE      data1;                        /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 290 

16973  00  =3      BYTE      data2;                        
16974  00  =3      BYTE      data3;                        /* LSB */
16975  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_FRAME;
16976  00  =3  
16977  00  =3  /************************************************************/
16978  00  =3  /* Firmware Update Md Report 4byte command class structs */ 
16979  00  =3  /************************************************************/
16980  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_FRAME_
16981  00  =3  {
16982  00  =3      BYTE      cmdClass;                     /* The command class */
16983  00  =3      BYTE      cmd;                          /* The command */
16984  00  =3      BYTE      properties1;                  /* masked byte */
16985  00  =3      BYTE      reportNumber2;                /**/
16986  00  =3      BYTE      data1;                        /* MSB */
16987  00  =3      BYTE      data2;                        
16988  00  =3      BYTE      data3;                        
16989  00  =3      BYTE      data4;                        /* LSB */
16990  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_FRAME;
16991  00  =3  
16992  00  =3  /************************************************************/
16993  00  =3  /* Firmware Update Md Request Get command class structs */  
16994  00  =3  /************************************************************/
16995  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_FRAME_
16996  00  =3  {
16997  00  =3      BYTE      cmdClass;                     /* The command class */
16998  00  =3      BYTE      cmd;                          /* The command */
16999  00  =3      BYTE      manufacturerId1;              /* MSB */
17000  00  =3      BYTE      manufacturerId2;              /* LSB */
17001  00  =3      BYTE      firmwareId1;                  /* MSB */
17002  00  =3      BYTE      firmwareId2;                  /* LSB */
17003  00  =3      BYTE      checksum1;                    /* MSB */
17004  00  =3      BYTE      checksum2;                    /* LSB */
17005  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_FRAME;
17006  00  =3  
17007  00  =3  /************************************************************/
17008  00  =3  /* Firmware Update Md Request Report command class structs */
17009  00  =3  /************************************************************/
17010  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_FRAME_
17011  00  =3  {
17012  00  =3      BYTE      cmdClass;                     /* The command class */
17013  00  =3      BYTE      cmd;                          /* The command */
17014  00  =3      BYTE      status;                       /**/
17015  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_FRAME;
17016  00  =3  
17017  00  =3  /************************************************************/
17018  00  =3  /* Firmware Update Md Status Report command class structs */
17019  00  =3  /************************************************************/
17020  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_FRAME_
17021  00  =3  {
17022  00  =3      BYTE      cmdClass;                     /* The command class */
17023  00  =3      BYTE      cmd;                          /* The command */
17024  00  =3      BYTE      status;                       /**/
17025  00  =3  } ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_FRAME;
17026  00  =3  
17027  00  =3  /************************************************************/
17028  00  =3  /* Firmware Md Get V2 command class structs */              
17029  00  =3  /************************************************************/
17030  00  =3  typedef struct _ZW_FIRMWARE_MD_GET_V2_FRAME_
17031  00  =3  {
17032  00  =3      BYTE      cmdClass;                     /* The command class */
17033  00  =3      BYTE      cmd;                          /* The command */
17034  00  =3  } ZW_FIRMWARE_MD_GET_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 291 

17035  00  =3  
17036  00  =3  /************************************************************/
17037  00  =3  /* Firmware Md Report V2 command class structs */           
17038  00  =3  /************************************************************/
17039  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_V2_FRAME_
17040  00  =3  {
17041  00  =3      BYTE      cmdClass;                     /* The command class */
17042  00  =3      BYTE      cmd;                          /* The command */
17043  00  =3      BYTE      manufacturerId1;              /* MSB */
17044  00  =3      BYTE      manufacturerId2;              /* LSB */
17045  00  =3      BYTE      firmwareId1;                  /* MSB */
17046  00  =3      BYTE      firmwareId2;                  /* LSB */
17047  00  =3      BYTE      checksum1;                    /* MSB */
17048  00  =3      BYTE      checksum2;                    /* LSB */
17049  00  =3  } ZW_FIRMWARE_MD_REPORT_V2_FRAME;
17050  00  =3  
17051  00  =3  /************************************************************/
17052  00  =3  /* Firmware Update Md Get V2 command class structs */       
17053  00  =3  /************************************************************/
17054  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_GET_V2_FRAME_
17055  00  =3  {
17056  00  =3      BYTE      cmdClass;                     /* The command class */
17057  00  =3      BYTE      cmd;                          /* The command */
17058  00  =3      BYTE      numberOfReports;              /**/
17059  00  =3      BYTE      properties1;                  /* masked byte */
17060  00  =3      BYTE      reportNumber2;                /**/
17061  00  =3  } ZW_FIRMWARE_UPDATE_MD_GET_V2_FRAME;
17062  00  =3  
17063  00  =3  /************************************************************/
17064  00  =3  /* Firmware Update Md Report 1byte V2 command class structs */
17065  00  =3  /************************************************************/
17066  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V2_FRAME_
17067  00  =3  {
17068  00  =3      BYTE      cmdClass;                     /* The command class */
17069  00  =3      BYTE      cmd;                          /* The command */
17070  00  =3      BYTE      properties1;                  /* masked byte */
17071  00  =3      BYTE      reportNumber2;                /**/
17072  00  =3      BYTE      data1;                        
17073  00  =3      BYTE      checksum1;                    /* MSB */
17074  00  =3      BYTE      checksum2;                    /* LSB */
17075  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V2_FRAME;
17076  00  =3  
17077  00  =3  /************************************************************/
17078  00  =3  /* Firmware Update Md Report 2byte V2 command class structs */
17079  00  =3  /************************************************************/
17080  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V2_FRAME_
17081  00  =3  {
17082  00  =3      BYTE      cmdClass;                     /* The command class */
17083  00  =3      BYTE      cmd;                          /* The command */
17084  00  =3      BYTE      properties1;                  /* masked byte */
17085  00  =3      BYTE      reportNumber2;                /**/
17086  00  =3      BYTE      data1;                        /* MSB */
17087  00  =3      BYTE      data2;                        /* LSB */
17088  00  =3      BYTE      checksum1;                    /* MSB */
17089  00  =3      BYTE      checksum2;                    /* LSB */
17090  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V2_FRAME;
17091  00  =3  
17092  00  =3  /************************************************************/
17093  00  =3  /* Firmware Update Md Report 3byte V2 command class structs */
17094  00  =3  /************************************************************/
17095  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V2_FRAME_
17096  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 292 

17097  00  =3      BYTE      cmdClass;                     /* The command class */
17098  00  =3      BYTE      cmd;                          /* The command */
17099  00  =3      BYTE      properties1;                  /* masked byte */
17100  00  =3      BYTE      reportNumber2;                /**/
17101  00  =3      BYTE      data1;                        /* MSB */
17102  00  =3      BYTE      data2;                        
17103  00  =3      BYTE      data3;                        /* LSB */
17104  00  =3      BYTE      checksum1;                    /* MSB */
17105  00  =3      BYTE      checksum2;                    /* LSB */
17106  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V2_FRAME;
17107  00  =3  
17108  00  =3  /************************************************************/
17109  00  =3  /* Firmware Update Md Report 4byte V2 command class structs */
17110  00  =3  /************************************************************/
17111  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V2_FRAME_
17112  00  =3  {
17113  00  =3      BYTE      cmdClass;                     /* The command class */
17114  00  =3      BYTE      cmd;                          /* The command */
17115  00  =3      BYTE      properties1;                  /* masked byte */
17116  00  =3      BYTE      reportNumber2;                /**/
17117  00  =3      BYTE      data1;                        /* MSB */
17118  00  =3      BYTE      data2;                        
17119  00  =3      BYTE      data3;                        
17120  00  =3      BYTE      data4;                        /* LSB */
17121  00  =3      BYTE      checksum1;                    /* MSB */
17122  00  =3      BYTE      checksum2;                    /* LSB */
17123  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V2_FRAME;
17124  00  =3  
17125  00  =3  /************************************************************/
17126  00  =3  /* Firmware Update Md Request Get V2 command class structs */
17127  00  =3  /************************************************************/
17128  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V2_FRAME_
17129  00  =3  {
17130  00  =3      BYTE      cmdClass;                     /* The command class */
17131  00  =3      BYTE      cmd;                          /* The command */
17132  00  =3      BYTE      manufacturerId1;              /* MSB */
17133  00  =3      BYTE      manufacturerId2;              /* LSB */
17134  00  =3      BYTE      firmwareId1;                  /* MSB */
17135  00  =3      BYTE      firmwareId2;                  /* LSB */
17136  00  =3      BYTE      checksum1;                    /* MSB */
17137  00  =3      BYTE      checksum2;                    /* LSB */
17138  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V2_FRAME;
17139  00  =3  
17140  00  =3  /************************************************************/
17141  00  =3  /* Firmware Update Md Request Report V2 command class structs */
17142  00  =3  /************************************************************/
17143  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V2_FRAME_
17144  00  =3  {
17145  00  =3      BYTE      cmdClass;                     /* The command class */
17146  00  =3      BYTE      cmd;                          /* The command */
17147  00  =3      BYTE      status;                       /**/
17148  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V2_FRAME;
17149  00  =3  
17150  00  =3  /************************************************************/
17151  00  =3  /* Firmware Update Md Status Report V2 command class structs */
17152  00  =3  /************************************************************/
17153  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V2_FRAME_
17154  00  =3  {
17155  00  =3      BYTE      cmdClass;                     /* The command class */
17156  00  =3      BYTE      cmd;                          /* The command */
17157  00  =3      BYTE      status;                       /**/
17158  00  =3  } ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 293 

17159  00  =3  
17160  00  =3  /************************************************************/
17161  00  =3  /* Firmware Md Get V3 command class structs */              
17162  00  =3  /************************************************************/
17163  00  =3  typedef struct _ZW_FIRMWARE_MD_GET_V3_FRAME_
17164  00  =3  {
17165  00  =3      BYTE      cmdClass;                     /* The command class */
17166  00  =3      BYTE      cmd;                          /* The command */
17167  00  =3  } ZW_FIRMWARE_MD_GET_V3_FRAME;
17168  00  =3  
17169  00  =3  /************************************************************/
17170  00  =3  /* Firmware Md Report V3 variant group structs */           
17171  00  =3  /************************************************************/
17172  00  =3  typedef struct _VG_FIRMWARE_MD_REPORT_V3_VG_
17173  00  =3  {
17174  00  =3      BYTE      firmwareId1;                  /* MSB */
17175  00  =3      BYTE      firmwareId2;                  /* LSB */
17176  00  =3  } VG_FIRMWARE_MD_REPORT_V3_VG;
17177  00  =3  
17178  00  =3  /************************************************************/
17179  00  =3  /* Firmware Md Report 1byte V3 command class structs */     
17180  00  =3  /************************************************************/
17181  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_1BYTE_V3_FRAME_
17182  00  =3  {
17183  00  =3      BYTE      cmdClass;                     /* The command class */
17184  00  =3      BYTE      cmd;                          /* The command */
17185  00  =3      BYTE      manufacturerId1;              /* MSB */
17186  00  =3      BYTE      manufacturerId2;              /* LSB */
17187  00  =3      BYTE      firmware0Id1;                 /* MSB */
17188  00  =3      BYTE      firmware0Id2;                 /* LSB */
17189  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17190  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17191  00  =3      BYTE      firmwareUpgradable;           /**/
17192  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17193  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17194  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17195  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup1;                /**/
17196  00  =3  } ZW_FIRMWARE_MD_REPORT_1BYTE_V3_FRAME;
17197  00  =3  
17198  00  =3  /************************************************************/
17199  00  =3  /* Firmware Md Report 2byte V3 command class structs */     
17200  00  =3  /************************************************************/
17201  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_2BYTE_V3_FRAME_
17202  00  =3  {
17203  00  =3      BYTE      cmdClass;                     /* The command class */
17204  00  =3      BYTE      cmd;                          /* The command */
17205  00  =3      BYTE      manufacturerId1;              /* MSB */
17206  00  =3      BYTE      manufacturerId2;              /* LSB */
17207  00  =3      BYTE      firmware0Id1;                 /* MSB */
17208  00  =3      BYTE      firmware0Id2;                 /* LSB */
17209  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17210  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17211  00  =3      BYTE      firmwareUpgradable;           /**/
17212  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17213  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17214  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17215  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup1;                /**/
17216  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup2;                /**/
17217  00  =3  } ZW_FIRMWARE_MD_REPORT_2BYTE_V3_FRAME;
17218  00  =3  
17219  00  =3  /************************************************************/
17220  00  =3  /* Firmware Md Report 3byte V3 command class structs */     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 294 

17221  00  =3  /************************************************************/
17222  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_3BYTE_V3_FRAME_
17223  00  =3  {
17224  00  =3      BYTE      cmdClass;                     /* The command class */
17225  00  =3      BYTE      cmd;                          /* The command */
17226  00  =3      BYTE      manufacturerId1;              /* MSB */
17227  00  =3      BYTE      manufacturerId2;              /* LSB */
17228  00  =3      BYTE      firmware0Id1;                 /* MSB */
17229  00  =3      BYTE      firmware0Id2;                 /* LSB */
17230  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17231  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17232  00  =3      BYTE      firmwareUpgradable;           /**/
17233  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17234  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17235  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17236  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup1;                /**/
17237  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup2;                /**/
17238  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup3;                /**/
17239  00  =3  } ZW_FIRMWARE_MD_REPORT_3BYTE_V3_FRAME;
17240  00  =3  
17241  00  =3  /************************************************************/
17242  00  =3  /* Firmware Md Report 4byte V3 command class structs */     
17243  00  =3  /************************************************************/
17244  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_4BYTE_V3_FRAME_
17245  00  =3  {
17246  00  =3      BYTE      cmdClass;                     /* The command class */
17247  00  =3      BYTE      cmd;                          /* The command */
17248  00  =3      BYTE      manufacturerId1;              /* MSB */
17249  00  =3      BYTE      manufacturerId2;              /* LSB */
17250  00  =3      BYTE      firmware0Id1;                 /* MSB */
17251  00  =3      BYTE      firmware0Id2;                 /* LSB */
17252  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17253  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17254  00  =3      BYTE      firmwareUpgradable;           /**/
17255  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17256  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17257  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17258  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup1;                /**/
17259  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup2;                /**/
17260  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup3;                /**/
17261  00  =3      VG_FIRMWARE_MD_REPORT_V3_VG variantgroup4;                /**/
17262  00  =3  } ZW_FIRMWARE_MD_REPORT_4BYTE_V3_FRAME;
17263  00  =3  
17264  00  =3  /************************************************************/
17265  00  =3  /* Firmware Update Md Get V3 command class structs */       
17266  00  =3  /************************************************************/
17267  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_GET_V3_FRAME_
17268  00  =3  {
17269  00  =3      BYTE      cmdClass;                     /* The command class */
17270  00  =3      BYTE      cmd;                          /* The command */
17271  00  =3      BYTE      numberOfReports;              /**/
17272  00  =3      BYTE      properties1;                  /* masked byte */
17273  00  =3      BYTE      reportNumber2;                /**/
17274  00  =3  } ZW_FIRMWARE_UPDATE_MD_GET_V3_FRAME;
17275  00  =3  
17276  00  =3  /************************************************************/
17277  00  =3  /* Firmware Update Md Report 1byte V3 command class structs */
17278  00  =3  /************************************************************/
17279  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V3_FRAME_
17280  00  =3  {
17281  00  =3      BYTE      cmdClass;                     /* The command class */
17282  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 295 

17283  00  =3      BYTE      properties1;                  /* masked byte */
17284  00  =3      BYTE      reportNumber2;                /**/
17285  00  =3      BYTE      data1;                        
17286  00  =3      BYTE      checksum1;                    /* MSB */
17287  00  =3      BYTE      checksum2;                    /* LSB */
17288  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V3_FRAME;
17289  00  =3  
17290  00  =3  /************************************************************/
17291  00  =3  /* Firmware Update Md Report 2byte V3 command class structs */
17292  00  =3  /************************************************************/
17293  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V3_FRAME_
17294  00  =3  {
17295  00  =3      BYTE      cmdClass;                     /* The command class */
17296  00  =3      BYTE      cmd;                          /* The command */
17297  00  =3      BYTE      properties1;                  /* masked byte */
17298  00  =3      BYTE      reportNumber2;                /**/
17299  00  =3      BYTE      data1;                        /* MSB */
17300  00  =3      BYTE      data2;                        /* LSB */
17301  00  =3      BYTE      checksum1;                    /* MSB */
17302  00  =3      BYTE      checksum2;                    /* LSB */
17303  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V3_FRAME;
17304  00  =3  
17305  00  =3  /************************************************************/
17306  00  =3  /* Firmware Update Md Report 3byte V3 command class structs */
17307  00  =3  /************************************************************/
17308  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V3_FRAME_
17309  00  =3  {
17310  00  =3      BYTE      cmdClass;                     /* The command class */
17311  00  =3      BYTE      cmd;                          /* The command */
17312  00  =3      BYTE      properties1;                  /* masked byte */
17313  00  =3      BYTE      reportNumber2;                /**/
17314  00  =3      BYTE      data1;                        /* MSB */
17315  00  =3      BYTE      data2;                        
17316  00  =3      BYTE      data3;                        /* LSB */
17317  00  =3      BYTE      checksum1;                    /* MSB */
17318  00  =3      BYTE      checksum2;                    /* LSB */
17319  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V3_FRAME;
17320  00  =3  
17321  00  =3  /************************************************************/
17322  00  =3  /* Firmware Update Md Report 4byte V3 command class structs */
17323  00  =3  /************************************************************/
17324  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V3_FRAME_
17325  00  =3  {
17326  00  =3      BYTE      cmdClass;                     /* The command class */
17327  00  =3      BYTE      cmd;                          /* The command */
17328  00  =3      BYTE      properties1;                  /* masked byte */
17329  00  =3      BYTE      reportNumber2;                /**/
17330  00  =3      BYTE      data1;                        /* MSB */
17331  00  =3      BYTE      data2;                        
17332  00  =3      BYTE      data3;                        
17333  00  =3      BYTE      data4;                        /* LSB */
17334  00  =3      BYTE      checksum1;                    /* MSB */
17335  00  =3      BYTE      checksum2;                    /* LSB */
17336  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V3_FRAME;
17337  00  =3  
17338  00  =3  /************************************************************/
17339  00  =3  /* Firmware Update Md Request Get V3 command class structs */
17340  00  =3  /************************************************************/
17341  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V3_FRAME_
17342  00  =3  {
17343  00  =3      BYTE      cmdClass;                     /* The command class */
17344  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 296 

17345  00  =3      BYTE      manufacturerId1;              /* MSB */
17346  00  =3      BYTE      manufacturerId2;              /* LSB */
17347  00  =3      BYTE      firmwareId1;                  /* MSB */
17348  00  =3      BYTE      firmwareId2;                  /* LSB */
17349  00  =3      BYTE      checksum1;                    /* MSB */
17350  00  =3      BYTE      checksum2;                    /* LSB */
17351  00  =3      BYTE      firmwareTarget;               /**/
17352  00  =3      BYTE      fragmentSize1;                /* MSB */
17353  00  =3      BYTE      fragmentSize2;                /* LSB */
17354  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V3_FRAME;
17355  00  =3  
17356  00  =3  /************************************************************/
17357  00  =3  /* Firmware Update Md Request Report V3 command class structs */
17358  00  =3  /************************************************************/
17359  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V3_FRAME_
17360  00  =3  {
17361  00  =3      BYTE      cmdClass;                     /* The command class */
17362  00  =3      BYTE      cmd;                          /* The command */
17363  00  =3      BYTE      status;                       /**/
17364  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V3_FRAME;
17365  00  =3  
17366  00  =3  /************************************************************/
17367  00  =3  /* Firmware Update Md Status Report V3 command class structs */
17368  00  =3  /************************************************************/
17369  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V3_FRAME_
17370  00  =3  {
17371  00  =3      BYTE      cmdClass;                     /* The command class */
17372  00  =3      BYTE      cmd;                          /* The command */
17373  00  =3      BYTE      status;                       /**/
17374  00  =3      BYTE      waittime1;                    /* MSB */
17375  00  =3      BYTE      waittime2;                    /* LSB */
17376  00  =3  } ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V3_FRAME;
17377  00  =3  
17378  00  =3  /************************************************************/
17379  00  =3  /* Firmware Md Get V4 command class structs */              
17380  00  =3  /************************************************************/
17381  00  =3  typedef struct _ZW_FIRMWARE_MD_GET_V4_FRAME_
17382  00  =3  {
17383  00  =3      BYTE      cmdClass;                     /* The command class */
17384  00  =3      BYTE      cmd;                          /* The command */
17385  00  =3  } ZW_FIRMWARE_MD_GET_V4_FRAME;
17386  00  =3  
17387  00  =3  /************************************************************/
17388  00  =3  /* Firmware Md Report V4 variant group structs */           
17389  00  =3  /************************************************************/
17390  00  =3  typedef struct _VG_FIRMWARE_MD_REPORT_V4_VG_
17391  00  =3  {
17392  00  =3      BYTE      firmwareId1;                  /* MSB */
17393  00  =3      BYTE      firmwareId2;                  /* LSB */
17394  00  =3  } VG_FIRMWARE_MD_REPORT_V4_VG;
17395  00  =3  
17396  00  =3  /************************************************************/
17397  00  =3  /* Firmware Md Report 1byte V4 command class structs */     
17398  00  =3  /************************************************************/
17399  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_1BYTE_V4_FRAME_
17400  00  =3  {
17401  00  =3      BYTE      cmdClass;                     /* The command class */
17402  00  =3      BYTE      cmd;                          /* The command */
17403  00  =3      BYTE      manufacturerId1;              /* MSB */
17404  00  =3      BYTE      manufacturerId2;              /* LSB */
17405  00  =3      BYTE      firmware0Id1;                 /* MSB */
17406  00  =3      BYTE      firmware0Id2;                 /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 297 

17407  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17408  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17409  00  =3      BYTE      firmwareUpgradable;           /**/
17410  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17411  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17412  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17413  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup1;                /**/
17414  00  =3  } ZW_FIRMWARE_MD_REPORT_1BYTE_V4_FRAME;
17415  00  =3  
17416  00  =3  /************************************************************/
17417  00  =3  /* Firmware Md Report 2byte V4 command class structs */     
17418  00  =3  /************************************************************/
17419  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_2BYTE_V4_FRAME_
17420  00  =3  {
17421  00  =3      BYTE      cmdClass;                     /* The command class */
17422  00  =3      BYTE      cmd;                          /* The command */
17423  00  =3      BYTE      manufacturerId1;              /* MSB */
17424  00  =3      BYTE      manufacturerId2;              /* LSB */
17425  00  =3      BYTE      firmware0Id1;                 /* MSB */
17426  00  =3      BYTE      firmware0Id2;                 /* LSB */
17427  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17428  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17429  00  =3      BYTE      firmwareUpgradable;           /**/
17430  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17431  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17432  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17433  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup1;                /**/
17434  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup2;                /**/
17435  00  =3  } ZW_FIRMWARE_MD_REPORT_2BYTE_V4_FRAME;
17436  00  =3  
17437  00  =3  /************************************************************/
17438  00  =3  /* Firmware Md Report 3byte V4 command class structs */     
17439  00  =3  /************************************************************/
17440  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_3BYTE_V4_FRAME_
17441  00  =3  {
17442  00  =3      BYTE      cmdClass;                     /* The command class */
17443  00  =3      BYTE      cmd;                          /* The command */
17444  00  =3      BYTE      manufacturerId1;              /* MSB */
17445  00  =3      BYTE      manufacturerId2;              /* LSB */
17446  00  =3      BYTE      firmware0Id1;                 /* MSB */
17447  00  =3      BYTE      firmware0Id2;                 /* LSB */
17448  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17449  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17450  00  =3      BYTE      firmwareUpgradable;           /**/
17451  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17452  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17453  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17454  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup1;                /**/
17455  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup2;                /**/
17456  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup3;                /**/
17457  00  =3  } ZW_FIRMWARE_MD_REPORT_3BYTE_V4_FRAME;
17458  00  =3  
17459  00  =3  /************************************************************/
17460  00  =3  /* Firmware Md Report 4byte V4 command class structs */     
17461  00  =3  /************************************************************/
17462  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_4BYTE_V4_FRAME_
17463  00  =3  {
17464  00  =3      BYTE      cmdClass;                     /* The command class */
17465  00  =3      BYTE      cmd;                          /* The command */
17466  00  =3      BYTE      manufacturerId1;              /* MSB */
17467  00  =3      BYTE      manufacturerId2;              /* LSB */
17468  00  =3      BYTE      firmware0Id1;                 /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 298 

17469  00  =3      BYTE      firmware0Id2;                 /* LSB */
17470  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17471  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17472  00  =3      BYTE      firmwareUpgradable;           /**/
17473  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17474  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17475  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17476  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup1;                /**/
17477  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup2;                /**/
17478  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup3;                /**/
17479  00  =3      VG_FIRMWARE_MD_REPORT_V4_VG variantgroup4;                /**/
17480  00  =3  } ZW_FIRMWARE_MD_REPORT_4BYTE_V4_FRAME;
17481  00  =3  
17482  00  =3  /************************************************************/
17483  00  =3  /* Firmware Update Md Get V4 command class structs */       
17484  00  =3  /************************************************************/
17485  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_GET_V4_FRAME_
17486  00  =3  {
17487  00  =3      BYTE      cmdClass;                     /* The command class */
17488  00  =3      BYTE      cmd;                          /* The command */
17489  00  =3      BYTE      numberOfReports;              /**/
17490  00  =3      BYTE      properties1;                  /* masked byte */
17491  00  =3      BYTE      reportNumber2;                /**/
17492  00  =3  } ZW_FIRMWARE_UPDATE_MD_GET_V4_FRAME;
17493  00  =3  
17494  00  =3  /************************************************************/
17495  00  =3  /* Firmware Update Md Report 1byte V4 command class structs */
17496  00  =3  /************************************************************/
17497  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V4_FRAME_
17498  00  =3  {
17499  00  =3      BYTE      cmdClass;                     /* The command class */
17500  00  =3      BYTE      cmd;                          /* The command */
17501  00  =3      BYTE      properties1;                  /* masked byte */
17502  00  =3      BYTE      reportNumber2;                /**/
17503  00  =3      BYTE      data1;                        
17504  00  =3      BYTE      checksum1;                    /* MSB */
17505  00  =3      BYTE      checksum2;                    /* LSB */
17506  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V4_FRAME;
17507  00  =3  
17508  00  =3  /************************************************************/
17509  00  =3  /* Firmware Update Md Report 2byte V4 command class structs */
17510  00  =3  /************************************************************/
17511  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V4_FRAME_
17512  00  =3  {
17513  00  =3      BYTE      cmdClass;                     /* The command class */
17514  00  =3      BYTE      cmd;                          /* The command */
17515  00  =3      BYTE      properties1;                  /* masked byte */
17516  00  =3      BYTE      reportNumber2;                /**/
17517  00  =3      BYTE      data1;                        /* MSB */
17518  00  =3      BYTE      data2;                        /* LSB */
17519  00  =3      BYTE      checksum1;                    /* MSB */
17520  00  =3      BYTE      checksum2;                    /* LSB */
17521  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V4_FRAME;
17522  00  =3  
17523  00  =3  /************************************************************/
17524  00  =3  /* Firmware Update Md Report 3byte V4 command class structs */
17525  00  =3  /************************************************************/
17526  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V4_FRAME_
17527  00  =3  {
17528  00  =3      BYTE      cmdClass;                     /* The command class */
17529  00  =3      BYTE      cmd;                          /* The command */
17530  00  =3      BYTE      properties1;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 299 

17531  00  =3      BYTE      reportNumber2;                /**/
17532  00  =3      BYTE      data1;                        /* MSB */
17533  00  =3      BYTE      data2;                        
17534  00  =3      BYTE      data3;                        /* LSB */
17535  00  =3      BYTE      checksum1;                    /* MSB */
17536  00  =3      BYTE      checksum2;                    /* LSB */
17537  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V4_FRAME;
17538  00  =3  
17539  00  =3  /************************************************************/
17540  00  =3  /* Firmware Update Md Report 4byte V4 command class structs */
17541  00  =3  /************************************************************/
17542  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V4_FRAME_
17543  00  =3  {
17544  00  =3      BYTE      cmdClass;                     /* The command class */
17545  00  =3      BYTE      cmd;                          /* The command */
17546  00  =3      BYTE      properties1;                  /* masked byte */
17547  00  =3      BYTE      reportNumber2;                /**/
17548  00  =3      BYTE      data1;                        /* MSB */
17549  00  =3      BYTE      data2;                        
17550  00  =3      BYTE      data3;                        
17551  00  =3      BYTE      data4;                        /* LSB */
17552  00  =3      BYTE      checksum1;                    /* MSB */
17553  00  =3      BYTE      checksum2;                    /* LSB */
17554  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V4_FRAME;
17555  00  =3  
17556  00  =3  /************************************************************/
17557  00  =3  /* Firmware Update Md Request Get V4 command class structs */
17558  00  =3  /************************************************************/
17559  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V4_FRAME_
17560  00  =3  {
17561  00  =3      BYTE      cmdClass;                     /* The command class */
17562  00  =3      BYTE      cmd;                          /* The command */
17563  00  =3      BYTE      manufacturerId1;              /* MSB */
17564  00  =3      BYTE      manufacturerId2;              /* LSB */
17565  00  =3      BYTE      firmwareId1;                  /* MSB */
17566  00  =3      BYTE      firmwareId2;                  /* LSB */
17567  00  =3      BYTE      checksum1;                    /* MSB */
17568  00  =3      BYTE      checksum2;                    /* LSB */
17569  00  =3      BYTE      firmwareTarget;               /**/
17570  00  =3      BYTE      fragmentSize1;                /* MSB */
17571  00  =3      BYTE      fragmentSize2;                /* LSB */
17572  00  =3      BYTE      properties1;                  /* masked byte */
17573  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V4_FRAME;
17574  00  =3  
17575  00  =3  /************************************************************/
17576  00  =3  /* Firmware Update Md Request Report V4 command class structs */
17577  00  =3  /************************************************************/
17578  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V4_FRAME_
17579  00  =3  {
17580  00  =3      BYTE      cmdClass;                     /* The command class */
17581  00  =3      BYTE      cmd;                          /* The command */
17582  00  =3      BYTE      status;                       /**/
17583  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V4_FRAME;
17584  00  =3  
17585  00  =3  /************************************************************/
17586  00  =3  /* Firmware Update Md Status Report V4 command class structs */
17587  00  =3  /************************************************************/
17588  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V4_FRAME_
17589  00  =3  {
17590  00  =3      BYTE      cmdClass;                     /* The command class */
17591  00  =3      BYTE      cmd;                          /* The command */
17592  00  =3      BYTE      status;                       /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 300 

17593  00  =3      BYTE      waittime1;                    /* MSB */
17594  00  =3      BYTE      waittime2;                    /* LSB */
17595  00  =3  } ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V4_FRAME;
17596  00  =3  
17597  00  =3  /************************************************************/
17598  00  =3  /* Firmware Update Activation Set V4 command class structs */
17599  00  =3  /************************************************************/
17600  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_ACTIVATION_SET_V4_FRAME_
17601  00  =3  {
17602  00  =3      BYTE      cmdClass;                     /* The command class */
17603  00  =3      BYTE      cmd;                          /* The command */
17604  00  =3      BYTE      manufacturerId1;              /* MSB */
17605  00  =3      BYTE      manufacturerId2;              /* LSB */
17606  00  =3      BYTE      firmwareId1;                  /* MSB */
17607  00  =3      BYTE      firmwareId2;                  /* LSB */
17608  00  =3      BYTE      checksum1;                    /* MSB */
17609  00  =3      BYTE      checksum2;                    /* LSB */
17610  00  =3      BYTE      firmwareTarget;               /**/
17611  00  =3  } ZW_FIRMWARE_UPDATE_ACTIVATION_SET_V4_FRAME;
17612  00  =3  
17613  00  =3  /************************************************************/
17614  00  =3  /* Firmware Update Activation Status Report V4 command class structs */
17615  00  =3  /************************************************************/
17616  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V4_FRAME_
17617  00  =3  {
17618  00  =3      BYTE      cmdClass;                     /* The command class */
17619  00  =3      BYTE      cmd;                          /* The command */
17620  00  =3      BYTE      manufacturerId1;              /* MSB */
17621  00  =3      BYTE      manufacturerId2;              /* LSB */
17622  00  =3      BYTE      firmwareId1;                  /* MSB */
17623  00  =3      BYTE      firmwareId2;                  /* LSB */
17624  00  =3      BYTE      checksum1;                    /* MSB */
17625  00  =3      BYTE      checksum2;                    /* LSB */
17626  00  =3      BYTE      firmwareTarget;               /**/
17627  00  =3      BYTE      firmwareUpdateStatus;         /**/
17628  00  =3  } ZW_FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V4_FRAME;
17629  00  =3  
17630  00  =3  /************************************************************/
17631  00  =3  /* Firmware Md Get V5 command class structs */              
17632  00  =3  /************************************************************/
17633  00  =3  typedef struct _ZW_FIRMWARE_MD_GET_V5_FRAME_
17634  00  =3  {
17635  00  =3      BYTE      cmdClass;                     /* The command class */
17636  00  =3      BYTE      cmd;                          /* The command */
17637  00  =3  } ZW_FIRMWARE_MD_GET_V5_FRAME;
17638  00  =3  
17639  00  =3  /************************************************************/
17640  00  =3  /* Firmware Md Report V5 variant group structs */           
17641  00  =3  /************************************************************/
17642  00  =3  typedef struct _VG_FIRMWARE_MD_REPORT_V5_VG_
17643  00  =3  {
17644  00  =3      BYTE      firmwareId1;                  /* MSB */
17645  00  =3      BYTE      firmwareId2;                  /* LSB */
17646  00  =3  } VG_FIRMWARE_MD_REPORT_V5_VG;
17647  00  =3  
17648  00  =3  /************************************************************/
17649  00  =3  /* Firmware Md Report 1byte V5 command class structs */     
17650  00  =3  /************************************************************/
17651  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_1BYTE_V5_FRAME_
17652  00  =3  {
17653  00  =3      BYTE      cmdClass;                     /* The command class */
17654  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 301 

17655  00  =3      BYTE      manufacturerId1;              /* MSB */
17656  00  =3      BYTE      manufacturerId2;              /* LSB */
17657  00  =3      BYTE      firmware0Id1;                 /* MSB */
17658  00  =3      BYTE      firmware0Id2;                 /* LSB */
17659  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17660  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17661  00  =3      BYTE      firmwareUpgradable;           /**/
17662  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17663  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17664  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17665  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup1;                /**/
17666  00  =3      BYTE      hardwareVersion;              /**/
17667  00  =3  } ZW_FIRMWARE_MD_REPORT_1BYTE_V5_FRAME;
17668  00  =3  
17669  00  =3  /************************************************************/
17670  00  =3  /* Firmware Md Report 2byte V5 command class structs */     
17671  00  =3  /************************************************************/
17672  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_2BYTE_V5_FRAME_
17673  00  =3  {
17674  00  =3      BYTE      cmdClass;                     /* The command class */
17675  00  =3      BYTE      cmd;                          /* The command */
17676  00  =3      BYTE      manufacturerId1;              /* MSB */
17677  00  =3      BYTE      manufacturerId2;              /* LSB */
17678  00  =3      BYTE      firmware0Id1;                 /* MSB */
17679  00  =3      BYTE      firmware0Id2;                 /* LSB */
17680  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17681  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17682  00  =3      BYTE      firmwareUpgradable;           /**/
17683  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17684  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17685  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17686  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup1;                /**/
17687  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup2;                /**/
17688  00  =3      BYTE      hardwareVersion;              /**/
17689  00  =3  } ZW_FIRMWARE_MD_REPORT_2BYTE_V5_FRAME;
17690  00  =3  
17691  00  =3  /************************************************************/
17692  00  =3  /* Firmware Md Report 3byte V5 command class structs */     
17693  00  =3  /************************************************************/
17694  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_3BYTE_V5_FRAME_
17695  00  =3  {
17696  00  =3      BYTE      cmdClass;                     /* The command class */
17697  00  =3      BYTE      cmd;                          /* The command */
17698  00  =3      BYTE      manufacturerId1;              /* MSB */
17699  00  =3      BYTE      manufacturerId2;              /* LSB */
17700  00  =3      BYTE      firmware0Id1;                 /* MSB */
17701  00  =3      BYTE      firmware0Id2;                 /* LSB */
17702  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17703  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17704  00  =3      BYTE      firmwareUpgradable;           /**/
17705  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17706  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17707  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17708  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup1;                /**/
17709  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup2;                /**/
17710  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup3;                /**/
17711  00  =3      BYTE      hardwareVersion;              /**/
17712  00  =3  } ZW_FIRMWARE_MD_REPORT_3BYTE_V5_FRAME;
17713  00  =3  
17714  00  =3  /************************************************************/
17715  00  =3  /* Firmware Md Report 4byte V5 command class structs */     
17716  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 302 

17717  00  =3  typedef struct _ZW_FIRMWARE_MD_REPORT_4BYTE_V5_FRAME_
17718  00  =3  {
17719  00  =3      BYTE      cmdClass;                     /* The command class */
17720  00  =3      BYTE      cmd;                          /* The command */
17721  00  =3      BYTE      manufacturerId1;              /* MSB */
17722  00  =3      BYTE      manufacturerId2;              /* LSB */
17723  00  =3      BYTE      firmware0Id1;                 /* MSB */
17724  00  =3      BYTE      firmware0Id2;                 /* LSB */
17725  00  =3      BYTE      firmware0Checksum1;           /* MSB */
17726  00  =3      BYTE      firmware0Checksum2;           /* LSB */
17727  00  =3      BYTE      firmwareUpgradable;           /**/
17728  00  =3      BYTE      numberOfFirmwareTargets;      /**/
17729  00  =3      BYTE      maxFragmentSize1;             /* MSB */
17730  00  =3      BYTE      maxFragmentSize2;             /* LSB */
17731  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup1;                /**/
17732  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup2;                /**/
17733  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup3;                /**/
17734  00  =3      VG_FIRMWARE_MD_REPORT_V5_VG variantgroup4;                /**/
17735  00  =3      BYTE      hardwareVersion;              /**/
17736  00  =3  } ZW_FIRMWARE_MD_REPORT_4BYTE_V5_FRAME;
17737  00  =3  
17738  00  =3  /************************************************************/
17739  00  =3  /* Firmware Update Md Get V5 command class structs */       
17740  00  =3  /************************************************************/
17741  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_GET_V5_FRAME_
17742  00  =3  {
17743  00  =3      BYTE      cmdClass;                     /* The command class */
17744  00  =3      BYTE      cmd;                          /* The command */
17745  00  =3      BYTE      numberOfReports;              /**/
17746  00  =3      BYTE      properties1;                  /* masked byte */
17747  00  =3      BYTE      reportNumber2;                /**/
17748  00  =3  } ZW_FIRMWARE_UPDATE_MD_GET_V5_FRAME;
17749  00  =3  
17750  00  =3  /************************************************************/
17751  00  =3  /* Firmware Update Md Report 1byte V5 command class structs */
17752  00  =3  /************************************************************/
17753  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V5_FRAME_
17754  00  =3  {
17755  00  =3      BYTE      cmdClass;                     /* The command class */
17756  00  =3      BYTE      cmd;                          /* The command */
17757  00  =3      BYTE      properties1;                  /* masked byte */
17758  00  =3      BYTE      reportNumber2;                /**/
17759  00  =3      BYTE      data1;                        
17760  00  =3      BYTE      checksum1;                    /* MSB */
17761  00  =3      BYTE      checksum2;                    /* LSB */
17762  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_1BYTE_V5_FRAME;
17763  00  =3  
17764  00  =3  /************************************************************/
17765  00  =3  /* Firmware Update Md Report 2byte V5 command class structs */
17766  00  =3  /************************************************************/
17767  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V5_FRAME_
17768  00  =3  {
17769  00  =3      BYTE      cmdClass;                     /* The command class */
17770  00  =3      BYTE      cmd;                          /* The command */
17771  00  =3      BYTE      properties1;                  /* masked byte */
17772  00  =3      BYTE      reportNumber2;                /**/
17773  00  =3      BYTE      data1;                        /* MSB */
17774  00  =3      BYTE      data2;                        /* LSB */
17775  00  =3      BYTE      checksum1;                    /* MSB */
17776  00  =3      BYTE      checksum2;                    /* LSB */
17777  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_2BYTE_V5_FRAME;
17778  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 303 

17779  00  =3  /************************************************************/
17780  00  =3  /* Firmware Update Md Report 3byte V5 command class structs */
17781  00  =3  /************************************************************/
17782  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V5_FRAME_
17783  00  =3  {
17784  00  =3      BYTE      cmdClass;                     /* The command class */
17785  00  =3      BYTE      cmd;                          /* The command */
17786  00  =3      BYTE      properties1;                  /* masked byte */
17787  00  =3      BYTE      reportNumber2;                /**/
17788  00  =3      BYTE      data1;                        /* MSB */
17789  00  =3      BYTE      data2;                        
17790  00  =3      BYTE      data3;                        /* LSB */
17791  00  =3      BYTE      checksum1;                    /* MSB */
17792  00  =3      BYTE      checksum2;                    /* LSB */
17793  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_3BYTE_V5_FRAME;
17794  00  =3  
17795  00  =3  /************************************************************/
17796  00  =3  /* Firmware Update Md Report 4byte V5 command class structs */
17797  00  =3  /************************************************************/
17798  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V5_FRAME_
17799  00  =3  {
17800  00  =3      BYTE      cmdClass;                     /* The command class */
17801  00  =3      BYTE      cmd;                          /* The command */
17802  00  =3      BYTE      properties1;                  /* masked byte */
17803  00  =3      BYTE      reportNumber2;                /**/
17804  00  =3      BYTE      data1;                        /* MSB */
17805  00  =3      BYTE      data2;                        
17806  00  =3      BYTE      data3;                        
17807  00  =3      BYTE      data4;                        /* LSB */
17808  00  =3      BYTE      checksum1;                    /* MSB */
17809  00  =3      BYTE      checksum2;                    /* LSB */
17810  00  =3  } ZW_FIRMWARE_UPDATE_MD_REPORT_4BYTE_V5_FRAME;
17811  00  =3  
17812  00  =3  /************************************************************/
17813  00  =3  /* Firmware Update Md Request Get V5 command class structs */
17814  00  =3  /************************************************************/
17815  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V5_FRAME_
17816  00  =3  {
17817  00  =3      BYTE      cmdClass;                     /* The command class */
17818  00  =3      BYTE      cmd;                          /* The command */
17819  00  =3      BYTE      manufacturerId1;              /* MSB */
17820  00  =3      BYTE      manufacturerId2;              /* LSB */
17821  00  =3      BYTE      firmwareId1;                  /* MSB */
17822  00  =3      BYTE      firmwareId2;                  /* LSB */
17823  00  =3      BYTE      checksum1;                    /* MSB */
17824  00  =3      BYTE      checksum2;                    /* LSB */
17825  00  =3      BYTE      firmwareTarget;               /**/
17826  00  =3      BYTE      fragmentSize1;                /* MSB */
17827  00  =3      BYTE      fragmentSize2;                /* LSB */
17828  00  =3      BYTE      properties1;                  /* masked byte */
17829  00  =3      BYTE      hardwareVersion;              /**/
17830  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_GET_V5_FRAME;
17831  00  =3  
17832  00  =3  /************************************************************/
17833  00  =3  /* Firmware Update Md Request Report V5 command class structs */
17834  00  =3  /************************************************************/
17835  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V5_FRAME_
17836  00  =3  {
17837  00  =3      BYTE      cmdClass;                     /* The command class */
17838  00  =3      BYTE      cmd;                          /* The command */
17839  00  =3      BYTE      status;                       /**/
17840  00  =3  } ZW_FIRMWARE_UPDATE_MD_REQUEST_REPORT_V5_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 304 

17841  00  =3  
17842  00  =3  /************************************************************/
17843  00  =3  /* Firmware Update Md Status Report V5 command class structs */
17844  00  =3  /************************************************************/
17845  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V5_FRAME_
17846  00  =3  {
17847  00  =3      BYTE      cmdClass;                     /* The command class */
17848  00  =3      BYTE      cmd;                          /* The command */
17849  00  =3      BYTE      status;                       /**/
17850  00  =3      BYTE      waittime1;                    /* MSB */
17851  00  =3      BYTE      waittime2;                    /* LSB */
17852  00  =3  } ZW_FIRMWARE_UPDATE_MD_STATUS_REPORT_V5_FRAME;
17853  00  =3  
17854  00  =3  /************************************************************/
17855  00  =3  /* Firmware Update Activation Set V5 command class structs */
17856  00  =3  /************************************************************/
17857  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_ACTIVATION_SET_V5_FRAME_
17858  00  =3  {
17859  00  =3      BYTE      cmdClass;                     /* The command class */
17860  00  =3      BYTE      cmd;                          /* The command */
17861  00  =3      BYTE      manufacturerId1;              /* MSB */
17862  00  =3      BYTE      manufacturerId2;              /* LSB */
17863  00  =3      BYTE      firmwareId1;                  /* MSB */
17864  00  =3      BYTE      firmwareId2;                  /* LSB */
17865  00  =3      BYTE      checksum1;                    /* MSB */
17866  00  =3      BYTE      checksum2;                    /* LSB */
17867  00  =3      BYTE      firmwareTarget;               /**/
17868  00  =3      BYTE      hardwareVersion;              /**/
17869  00  =3  } ZW_FIRMWARE_UPDATE_ACTIVATION_SET_V5_FRAME;
17870  00  =3  
17871  00  =3  /************************************************************/
17872  00  =3  /* Firmware Update Activation Status Report V5 command class structs */
17873  00  =3  /************************************************************/
17874  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V5_FRAME_
17875  00  =3  {
17876  00  =3      BYTE      cmdClass;                     /* The command class */
17877  00  =3      BYTE      cmd;                          /* The command */
17878  00  =3      BYTE      manufacturerId1;              /* MSB */
17879  00  =3      BYTE      manufacturerId2;              /* LSB */
17880  00  =3      BYTE      firmwareId1;                  /* MSB */
17881  00  =3      BYTE      firmwareId2;                  /* LSB */
17882  00  =3      BYTE      checksum1;                    /* MSB */
17883  00  =3      BYTE      checksum2;                    /* LSB */
17884  00  =3      BYTE      firmwareTarget;               /**/
17885  00  =3      BYTE      firmwareUpdateStatus;         /**/
17886  00  =3      BYTE      hardwareVersion;              /**/
17887  00  =3  } ZW_FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V5_FRAME;
17888  00  =3  
17889  00  =3  /************************************************************/
17890  00  =3  /* Firmware Update Md Prepare Get V5 command class structs */
17891  00  =3  /************************************************************/
17892  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_PREPARE_GET_V5_FRAME_
17893  00  =3  {
17894  00  =3      BYTE      cmdClass;                     /* The command class */
17895  00  =3      BYTE      cmd;                          /* The command */
17896  00  =3      BYTE      manufacturerId1;              /* MSB */
17897  00  =3      BYTE      manufacturerId2;              /* LSB */
17898  00  =3      BYTE      firmwareId1;                  /* MSB */
17899  00  =3      BYTE      firmwareId2;                  /* LSB */
17900  00  =3      BYTE      firmwareTarget;               /**/
17901  00  =3      BYTE      fragmentSize1;                /* MSB */
17902  00  =3      BYTE      fragmentSize2;                /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 305 

17903  00  =3      BYTE      hardwareVersion;              /**/
17904  00  =3  } ZW_FIRMWARE_UPDATE_MD_PREPARE_GET_V5_FRAME;
17905  00  =3  
17906  00  =3  /************************************************************/
17907  00  =3  /* Firmware Update Md Prepare Report V5 command class structs */
17908  00  =3  /************************************************************/
17909  00  =3  typedef struct _ZW_FIRMWARE_UPDATE_MD_PREPARE_REPORT_V5_FRAME_
17910  00  =3  {
17911  00  =3      BYTE      cmdClass;                     /* The command class */
17912  00  =3      BYTE      cmd;                          /* The command */
17913  00  =3      BYTE      status;                       /**/
17914  00  =3      BYTE      firmwareChecksum1;            /* MSB */
17915  00  =3      BYTE      firmwareChecksum2;            /* LSB */
17916  00  =3  } ZW_FIRMWARE_UPDATE_MD_PREPARE_REPORT_V5_FRAME;
17917  00  =3  
17918  00  =3  /************************************************************/
17919  00  =3  /* Geographic Location Get command class structs */         
17920  00  =3  /************************************************************/
17921  00  =3  typedef struct _ZW_GEOGRAPHIC_LOCATION_GET_FRAME_
17922  00  =3  {
17923  00  =3      BYTE      cmdClass;                     /* The command class */
17924  00  =3      BYTE      cmd;                          /* The command */
17925  00  =3  } ZW_GEOGRAPHIC_LOCATION_GET_FRAME;
17926  00  =3  
17927  00  =3  /************************************************************/
17928  00  =3  /* Geographic Location Report command class structs */      
17929  00  =3  /************************************************************/
17930  00  =3  typedef struct _ZW_GEOGRAPHIC_LOCATION_REPORT_FRAME_
17931  00  =3  {
17932  00  =3      BYTE      cmdClass;                     /* The command class */
17933  00  =3      BYTE      cmd;                          /* The command */
17934  00  =3      BYTE      longitudeDegrees;             /**/
17935  00  =3      BYTE      level;                        /* masked byte */
17936  00  =3      BYTE      latitudeDegrees;              /**/
17937  00  =3      BYTE      level2;                       /* masked byte */
17938  00  =3  } ZW_GEOGRAPHIC_LOCATION_REPORT_FRAME;
17939  00  =3  
17940  00  =3  /************************************************************/
17941  00  =3  /* Geographic Location Set command class structs */         
17942  00  =3  /************************************************************/
17943  00  =3  typedef struct _ZW_GEOGRAPHIC_LOCATION_SET_FRAME_
17944  00  =3  {
17945  00  =3      BYTE      cmdClass;                     /* The command class */
17946  00  =3      BYTE      cmd;                          /* The command */
17947  00  =3      BYTE      longitudeDegrees;             /**/
17948  00  =3      BYTE      level;                        /* masked byte */
17949  00  =3      BYTE      latitudeDegrees;              /**/
17950  00  =3      BYTE      level2;                       /* masked byte */
17951  00  =3  } ZW_GEOGRAPHIC_LOCATION_SET_FRAME;
17952  00  =3  
17953  00  =3  /************************************************************/
17954  00  =3  /* Grouping Name Get command class structs */               
17955  00  =3  /************************************************************/
17956  00  =3  typedef struct _ZW_GROUPING_NAME_GET_FRAME_
17957  00  =3  {
17958  00  =3      BYTE      cmdClass;                     /* The command class */
17959  00  =3      BYTE      cmd;                          /* The command */
17960  00  =3      BYTE      groupingIdentifier;           /**/
17961  00  =3  } ZW_GROUPING_NAME_GET_FRAME;
17962  00  =3  
17963  00  =3  /************************************************************/
17964  00  =3  /* Grouping Name Report command class structs */            
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 306 

17965  00  =3  /************************************************************/
17966  00  =3  typedef struct _ZW_GROUPING_NAME_REPORT_FRAME_
17967  00  =3  {
17968  00  =3      BYTE      cmdClass;                     /* The command class */
17969  00  =3      BYTE      cmd;                          /* The command */
17970  00  =3      BYTE      groupingIdentifier;           /**/
17971  00  =3      BYTE      properties1;                  /* masked byte */
17972  00  =3      BYTE      groupingName1;                /* MSB */
17973  00  =3      BYTE      groupingName2;                
17974  00  =3      BYTE      groupingName3;                
17975  00  =3      BYTE      groupingName4;                
17976  00  =3      BYTE      groupingName5;                
17977  00  =3      BYTE      groupingName6;                
17978  00  =3      BYTE      groupingName7;                
17979  00  =3      BYTE      groupingName8;                
17980  00  =3      BYTE      groupingName9;                
17981  00  =3      BYTE      groupingName10;               
17982  00  =3      BYTE      groupingName11;               
17983  00  =3      BYTE      groupingName12;               
17984  00  =3      BYTE      groupingName13;               
17985  00  =3      BYTE      groupingName14;               
17986  00  =3      BYTE      groupingName15;               
17987  00  =3      BYTE      groupingName16;               /* LSB */
17988  00  =3  } ZW_GROUPING_NAME_REPORT_FRAME;
17989  00  =3  
17990  00  =3  /************************************************************/
17991  00  =3  /* Grouping Name Set command class structs */               
17992  00  =3  /************************************************************/
17993  00  =3  typedef struct _ZW_GROUPING_NAME_SET_FRAME_
17994  00  =3  {
17995  00  =3      BYTE      cmdClass;                     /* The command class */
17996  00  =3      BYTE      cmd;                          /* The command */
17997  00  =3      BYTE      groupingIdentifier;           /**/
17998  00  =3      BYTE      properties1;                  /* masked byte */
17999  00  =3      BYTE      groupingName1;                /* MSB */
18000  00  =3      BYTE      groupingName2;                
18001  00  =3      BYTE      groupingName3;                
18002  00  =3      BYTE      groupingName4;                
18003  00  =3      BYTE      groupingName5;                
18004  00  =3      BYTE      groupingName6;                
18005  00  =3      BYTE      groupingName7;                
18006  00  =3      BYTE      groupingName8;                
18007  00  =3      BYTE      groupingName9;                
18008  00  =3      BYTE      groupingName10;               
18009  00  =3      BYTE      groupingName11;               
18010  00  =3      BYTE      groupingName12;               
18011  00  =3      BYTE      groupingName13;               
18012  00  =3      BYTE      groupingName14;               
18013  00  =3      BYTE      groupingName15;               
18014  00  =3      BYTE      groupingName16;               /* LSB */
18015  00  =3  } ZW_GROUPING_NAME_SET_FRAME;
18016  00  =3  
18017  00  =3  /************************************************************/
18018  00  =3  /* Hail command class structs */                            
18019  00  =3  /************************************************************/
18020  00  =3  typedef struct _ZW_HAIL_FRAME_
18021  00  =3  {
18022  00  =3      BYTE      cmdClass;                     /* The command class */
18023  00  =3      BYTE      cmd;                          /* The command */
18024  00  =3  } ZW_HAIL_FRAME;
18025  00  =3  
18026  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 307 

18027  00  =3  /* Hrv Control Bypass Get command class structs */          
18028  00  =3  /************************************************************/
18029  00  =3  typedef struct _ZW_HRV_CONTROL_BYPASS_GET_FRAME_
18030  00  =3  {
18031  00  =3      BYTE      cmdClass;                     /* The command class */
18032  00  =3      BYTE      cmd;                          /* The command */
18033  00  =3  } ZW_HRV_CONTROL_BYPASS_GET_FRAME;
18034  00  =3  
18035  00  =3  /************************************************************/
18036  00  =3  /* Hrv Control Bypass Report command class structs */       
18037  00  =3  /************************************************************/
18038  00  =3  typedef struct _ZW_HRV_CONTROL_BYPASS_REPORT_FRAME_
18039  00  =3  {
18040  00  =3      BYTE      cmdClass;                     /* The command class */
18041  00  =3      BYTE      cmd;                          /* The command */
18042  00  =3      BYTE      bypass;                       /**/
18043  00  =3  } ZW_HRV_CONTROL_BYPASS_REPORT_FRAME;
18044  00  =3  
18045  00  =3  /************************************************************/
18046  00  =3  /* Hrv Control Bypass Set command class structs */          
18047  00  =3  /************************************************************/
18048  00  =3  typedef struct _ZW_HRV_CONTROL_BYPASS_SET_FRAME_
18049  00  =3  {
18050  00  =3      BYTE      cmdClass;                     /* The command class */
18051  00  =3      BYTE      cmd;                          /* The command */
18052  00  =3      BYTE      bypass;                       /**/
18053  00  =3  } ZW_HRV_CONTROL_BYPASS_SET_FRAME;
18054  00  =3  
18055  00  =3  /************************************************************/
18056  00  =3  /* Hrv Control Mode Get command class structs */            
18057  00  =3  /************************************************************/
18058  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_GET_FRAME_
18059  00  =3  {
18060  00  =3      BYTE      cmdClass;                     /* The command class */
18061  00  =3      BYTE      cmd;                          /* The command */
18062  00  =3  } ZW_HRV_CONTROL_MODE_GET_FRAME;
18063  00  =3  
18064  00  =3  /************************************************************/
18065  00  =3  /* Hrv Control Mode Report command class structs */         
18066  00  =3  /************************************************************/
18067  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_REPORT_FRAME_
18068  00  =3  {
18069  00  =3      BYTE      cmdClass;                     /* The command class */
18070  00  =3      BYTE      cmd;                          /* The command */
18071  00  =3      BYTE      properties1;                  /* masked byte */
18072  00  =3  } ZW_HRV_CONTROL_MODE_REPORT_FRAME;
18073  00  =3  
18074  00  =3  /************************************************************/
18075  00  =3  /* Hrv Control Mode Set command class structs */            
18076  00  =3  /************************************************************/
18077  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_SET_FRAME_
18078  00  =3  {
18079  00  =3      BYTE      cmdClass;                     /* The command class */
18080  00  =3      BYTE      cmd;                          /* The command */
18081  00  =3      BYTE      properties1;                  /* masked byte */
18082  00  =3  } ZW_HRV_CONTROL_MODE_SET_FRAME;
18083  00  =3  
18084  00  =3  /************************************************************/
18085  00  =3  /* Hrv Control Mode Supported Get command class structs */  
18086  00  =3  /************************************************************/
18087  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_SUPPORTED_GET_FRAME_
18088  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 308 

18089  00  =3      BYTE      cmdClass;                     /* The command class */
18090  00  =3      BYTE      cmd;                          /* The command */
18091  00  =3  } ZW_HRV_CONTROL_MODE_SUPPORTED_GET_FRAME;
18092  00  =3  
18093  00  =3  /************************************************************/
18094  00  =3  /* Hrv Control Mode Supported Report 1byte command class structs */
18095  00  =3  /************************************************************/
18096  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_1BYTE_FRAME_
18097  00  =3  {
18098  00  =3      BYTE      cmdClass;                     /* The command class */
18099  00  =3      BYTE      cmd;                          /* The command */
18100  00  =3      BYTE      properties1;                  /* masked byte */
18101  00  =3      BYTE      bitMask1;                     
18102  00  =3  } ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_1BYTE_FRAME;
18103  00  =3  
18104  00  =3  /************************************************************/
18105  00  =3  /* Hrv Control Mode Supported Report 2byte command class structs */
18106  00  =3  /************************************************************/
18107  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_2BYTE_FRAME_
18108  00  =3  {
18109  00  =3      BYTE      cmdClass;                     /* The command class */
18110  00  =3      BYTE      cmd;                          /* The command */
18111  00  =3      BYTE      properties1;                  /* masked byte */
18112  00  =3      BYTE      bitMask1;                     /* MSB */
18113  00  =3      BYTE      bitMask2;                     /* LSB */
18114  00  =3  } ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_2BYTE_FRAME;
18115  00  =3  
18116  00  =3  /************************************************************/
18117  00  =3  /* Hrv Control Mode Supported Report 3byte command class structs */
18118  00  =3  /************************************************************/
18119  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_3BYTE_FRAME_
18120  00  =3  {
18121  00  =3      BYTE      cmdClass;                     /* The command class */
18122  00  =3      BYTE      cmd;                          /* The command */
18123  00  =3      BYTE      properties1;                  /* masked byte */
18124  00  =3      BYTE      bitMask1;                     /* MSB */
18125  00  =3      BYTE      bitMask2;                     
18126  00  =3      BYTE      bitMask3;                     /* LSB */
18127  00  =3  } ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_3BYTE_FRAME;
18128  00  =3  
18129  00  =3  /************************************************************/
18130  00  =3  /* Hrv Control Mode Supported Report 4byte command class structs */
18131  00  =3  /************************************************************/
18132  00  =3  typedef struct _ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_4BYTE_FRAME_
18133  00  =3  {
18134  00  =3      BYTE      cmdClass;                     /* The command class */
18135  00  =3      BYTE      cmd;                          /* The command */
18136  00  =3      BYTE      properties1;                  /* masked byte */
18137  00  =3      BYTE      bitMask1;                     /* MSB */
18138  00  =3      BYTE      bitMask2;                     
18139  00  =3      BYTE      bitMask3;                     
18140  00  =3      BYTE      bitMask4;                     /* LSB */
18141  00  =3  } ZW_HRV_CONTROL_MODE_SUPPORTED_REPORT_4BYTE_FRAME;
18142  00  =3  
18143  00  =3  /************************************************************/
18144  00  =3  /* Hrv Control Ventilation Rate Get command class structs */
18145  00  =3  /************************************************************/
18146  00  =3  typedef struct _ZW_HRV_CONTROL_VENTILATION_RATE_GET_FRAME_
18147  00  =3  {
18148  00  =3      BYTE      cmdClass;                     /* The command class */
18149  00  =3      BYTE      cmd;                          /* The command */
18150  00  =3  } ZW_HRV_CONTROL_VENTILATION_RATE_GET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 309 

18151  00  =3  
18152  00  =3  /************************************************************/
18153  00  =3  /* Hrv Control Ventilation Rate Report command class structs */
18154  00  =3  /************************************************************/
18155  00  =3  typedef struct _ZW_HRV_CONTROL_VENTILATION_RATE_REPORT_FRAME_
18156  00  =3  {
18157  00  =3      BYTE      cmdClass;                     /* The command class */
18158  00  =3      BYTE      cmd;                          /* The command */
18159  00  =3      BYTE      ventilationRate;              /**/
18160  00  =3  } ZW_HRV_CONTROL_VENTILATION_RATE_REPORT_FRAME;
18161  00  =3  
18162  00  =3  /************************************************************/
18163  00  =3  /* Hrv Control Ventilation Rate Set command class structs */
18164  00  =3  /************************************************************/
18165  00  =3  typedef struct _ZW_HRV_CONTROL_VENTILATION_RATE_SET_FRAME_
18166  00  =3  {
18167  00  =3      BYTE      cmdClass;                     /* The command class */
18168  00  =3      BYTE      cmd;                          /* The command */
18169  00  =3      BYTE      ventilationRate;              /**/
18170  00  =3  } ZW_HRV_CONTROL_VENTILATION_RATE_SET_FRAME;
18171  00  =3  
18172  00  =3  /************************************************************/
18173  00  =3  /* Hrv Status Get command class structs */                  
18174  00  =3  /************************************************************/
18175  00  =3  typedef struct _ZW_HRV_STATUS_GET_FRAME_
18176  00  =3  {
18177  00  =3      BYTE      cmdClass;                     /* The command class */
18178  00  =3      BYTE      cmd;                          /* The command */
18179  00  =3      BYTE      statusParameter;              /**/
18180  00  =3  } ZW_HRV_STATUS_GET_FRAME;
18181  00  =3  
18182  00  =3  /************************************************************/
18183  00  =3  /* Hrv Status Report 1byte command class structs */         
18184  00  =3  /************************************************************/
18185  00  =3  typedef struct _ZW_HRV_STATUS_REPORT_1BYTE_FRAME_
18186  00  =3  {
18187  00  =3      BYTE      cmdClass;                     /* The command class */
18188  00  =3      BYTE      cmd;                          /* The command */
18189  00  =3      BYTE      statusParameter;              /**/
18190  00  =3      BYTE      properties1;                  /* masked byte */
18191  00  =3      BYTE      value1;                       
18192  00  =3  } ZW_HRV_STATUS_REPORT_1BYTE_FRAME;
18193  00  =3  
18194  00  =3  /************************************************************/
18195  00  =3  /* Hrv Status Report 2byte command class structs */         
18196  00  =3  /************************************************************/
18197  00  =3  typedef struct _ZW_HRV_STATUS_REPORT_2BYTE_FRAME_
18198  00  =3  {
18199  00  =3      BYTE      cmdClass;                     /* The command class */
18200  00  =3      BYTE      cmd;                          /* The command */
18201  00  =3      BYTE      statusParameter;              /**/
18202  00  =3      BYTE      properties1;                  /* masked byte */
18203  00  =3      BYTE      value1;                       /* MSB */
18204  00  =3      BYTE      value2;                       /* LSB */
18205  00  =3  } ZW_HRV_STATUS_REPORT_2BYTE_FRAME;
18206  00  =3  
18207  00  =3  /************************************************************/
18208  00  =3  /* Hrv Status Report 3byte command class structs */         
18209  00  =3  /************************************************************/
18210  00  =3  typedef struct _ZW_HRV_STATUS_REPORT_3BYTE_FRAME_
18211  00  =3  {
18212  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 310 

18213  00  =3      BYTE      cmd;                          /* The command */
18214  00  =3      BYTE      statusParameter;              /**/
18215  00  =3      BYTE      properties1;                  /* masked byte */
18216  00  =3      BYTE      value1;                       /* MSB */
18217  00  =3      BYTE      value2;                       
18218  00  =3      BYTE      value3;                       /* LSB */
18219  00  =3  } ZW_HRV_STATUS_REPORT_3BYTE_FRAME;
18220  00  =3  
18221  00  =3  /************************************************************/
18222  00  =3  /* Hrv Status Report 4byte command class structs */         
18223  00  =3  /************************************************************/
18224  00  =3  typedef struct _ZW_HRV_STATUS_REPORT_4BYTE_FRAME_
18225  00  =3  {
18226  00  =3      BYTE      cmdClass;                     /* The command class */
18227  00  =3      BYTE      cmd;                          /* The command */
18228  00  =3      BYTE      statusParameter;              /**/
18229  00  =3      BYTE      properties1;                  /* masked byte */
18230  00  =3      BYTE      value1;                       /* MSB */
18231  00  =3      BYTE      value2;                       
18232  00  =3      BYTE      value3;                       
18233  00  =3      BYTE      value4;                       /* LSB */
18234  00  =3  } ZW_HRV_STATUS_REPORT_4BYTE_FRAME;
18235  00  =3  
18236  00  =3  /************************************************************/
18237  00  =3  /* Hrv Status Supported Get command class structs */        
18238  00  =3  /************************************************************/
18239  00  =3  typedef struct _ZW_HRV_STATUS_SUPPORTED_GET_FRAME_
18240  00  =3  {
18241  00  =3      BYTE      cmdClass;                     /* The command class */
18242  00  =3      BYTE      cmd;                          /* The command */
18243  00  =3  } ZW_HRV_STATUS_SUPPORTED_GET_FRAME;
18244  00  =3  
18245  00  =3  /************************************************************/
18246  00  =3  /* Hrv Status Supported Report 1byte command class structs */
18247  00  =3  /************************************************************/
18248  00  =3  typedef struct _ZW_HRV_STATUS_SUPPORTED_REPORT_1BYTE_FRAME_
18249  00  =3  {
18250  00  =3      BYTE      cmdClass;                     /* The command class */
18251  00  =3      BYTE      cmd;                          /* The command */
18252  00  =3      BYTE      bitMask1;                     
18253  00  =3  } ZW_HRV_STATUS_SUPPORTED_REPORT_1BYTE_FRAME;
18254  00  =3  
18255  00  =3  /************************************************************/
18256  00  =3  /* Hrv Status Supported Report 2byte command class structs */
18257  00  =3  /************************************************************/
18258  00  =3  typedef struct _ZW_HRV_STATUS_SUPPORTED_REPORT_2BYTE_FRAME_
18259  00  =3  {
18260  00  =3      BYTE      cmdClass;                     /* The command class */
18261  00  =3      BYTE      cmd;                          /* The command */
18262  00  =3      BYTE      bitMask1;                     /* MSB */
18263  00  =3      BYTE      bitMask2;                     /* LSB */
18264  00  =3  } ZW_HRV_STATUS_SUPPORTED_REPORT_2BYTE_FRAME;
18265  00  =3  
18266  00  =3  /************************************************************/
18267  00  =3  /* Hrv Status Supported Report 3byte command class structs */
18268  00  =3  /************************************************************/
18269  00  =3  typedef struct _ZW_HRV_STATUS_SUPPORTED_REPORT_3BYTE_FRAME_
18270  00  =3  {
18271  00  =3      BYTE      cmdClass;                     /* The command class */
18272  00  =3      BYTE      cmd;                          /* The command */
18273  00  =3      BYTE      bitMask1;                     /* MSB */
18274  00  =3      BYTE      bitMask2;                     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 311 

18275  00  =3      BYTE      bitMask3;                     /* LSB */
18276  00  =3  } ZW_HRV_STATUS_SUPPORTED_REPORT_3BYTE_FRAME;
18277  00  =3  
18278  00  =3  /************************************************************/
18279  00  =3  /* Hrv Status Supported Report 4byte command class structs */
18280  00  =3  /************************************************************/
18281  00  =3  typedef struct _ZW_HRV_STATUS_SUPPORTED_REPORT_4BYTE_FRAME_
18282  00  =3  {
18283  00  =3      BYTE      cmdClass;                     /* The command class */
18284  00  =3      BYTE      cmd;                          /* The command */
18285  00  =3      BYTE      bitMask1;                     /* MSB */
18286  00  =3      BYTE      bitMask2;                     
18287  00  =3      BYTE      bitMask3;                     
18288  00  =3      BYTE      bitMask4;                     /* LSB */
18289  00  =3  } ZW_HRV_STATUS_SUPPORTED_REPORT_4BYTE_FRAME;
18290  00  =3  
18291  00  =3  /************************************************************/
18292  00  =3  /* Indicator Get command class structs */                   
18293  00  =3  /************************************************************/
18294  00  =3  typedef struct _ZW_INDICATOR_GET_FRAME_
18295  00  =3  {
18296  00  =3      BYTE      cmdClass;                     /* The command class */
18297  00  =3      BYTE      cmd;                          /* The command */
18298  00  =3  } ZW_INDICATOR_GET_FRAME;
18299  00  =3  
18300  00  =3  /************************************************************/
18301  00  =3  /* Indicator Report command class structs */                
18302  00  =3  /************************************************************/
18303  00  =3  typedef struct _ZW_INDICATOR_REPORT_FRAME_
18304  00  =3  {
18305  00  =3      BYTE      cmdClass;                     /* The command class */
18306  00  =3      BYTE      cmd;                          /* The command */
18307  00  =3      BYTE      value;                        /**/
18308  00  =3  } ZW_INDICATOR_REPORT_FRAME;
18309  00  =3  
18310  00  =3  /************************************************************/
18311  00  =3  /* Indicator Set command class structs */                   
18312  00  =3  /************************************************************/
18313  00  =3  typedef struct _ZW_INDICATOR_SET_FRAME_
18314  00  =3  {
18315  00  =3      BYTE      cmdClass;                     /* The command class */
18316  00  =3      BYTE      cmd;                          /* The command */
18317  00  =3      BYTE      value;                        /**/
18318  00  =3  } ZW_INDICATOR_SET_FRAME;
18319  00  =3  
18320  00  =3  /************************************************************/
18321  00  =3  /* Indicator Get V2 command class structs */                
18322  00  =3  /************************************************************/
18323  00  =3  typedef struct _ZW_INDICATOR_GET_V2_FRAME_
18324  00  =3  {
18325  00  =3      BYTE      cmdClass;                     /* The command class */
18326  00  =3      BYTE      cmd;                          /* The command */
18327  00  =3      BYTE      indicatorId;                  /**/
18328  00  =3  } ZW_INDICATOR_GET_V2_FRAME;
18329  00  =3  
18330  00  =3  /************************************************************/
18331  00  =3  /* Indicator Report V2 variant group structs */             
18332  00  =3  /************************************************************/
18333  00  =3  typedef struct _VG_INDICATOR_REPORT_V2_VG_
18334  00  =3  {
18335  00  =3      BYTE      indicatorId;                  /**/
18336  00  =3      BYTE      propertyId;                   /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 312 

18337  00  =3      BYTE      value;                        /**/
18338  00  =3  } VG_INDICATOR_REPORT_V2_VG;
18339  00  =3  
18340  00  =3  /************************************************************/
18341  00  =3  /* Indicator Report 1byte V2 command class structs */       
18342  00  =3  /************************************************************/
18343  00  =3  typedef struct _ZW_INDICATOR_REPORT_1BYTE_V2_FRAME_
18344  00  =3  {
18345  00  =3      BYTE      cmdClass;                     /* The command class */
18346  00  =3      BYTE      cmd;                          /* The command */
18347  00  =3      BYTE      indicator0Value;              /**/
18348  00  =3      BYTE      properties1;                  /* masked byte */
18349  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup1;                /**/
18350  00  =3  } ZW_INDICATOR_REPORT_1BYTE_V2_FRAME;
18351  00  =3  
18352  00  =3  /************************************************************/
18353  00  =3  /* Indicator Report 2byte V2 command class structs */       
18354  00  =3  /************************************************************/
18355  00  =3  typedef struct _ZW_INDICATOR_REPORT_2BYTE_V2_FRAME_
18356  00  =3  {
18357  00  =3      BYTE      cmdClass;                     /* The command class */
18358  00  =3      BYTE      cmd;                          /* The command */
18359  00  =3      BYTE      indicator0Value;              /**/
18360  00  =3      BYTE      properties1;                  /* masked byte */
18361  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup1;                /**/
18362  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup2;                /**/
18363  00  =3  } ZW_INDICATOR_REPORT_2BYTE_V2_FRAME;
18364  00  =3  
18365  00  =3  /************************************************************/
18366  00  =3  /* Indicator Report 3byte V2 command class structs */       
18367  00  =3  /************************************************************/
18368  00  =3  typedef struct _ZW_INDICATOR_REPORT_3BYTE_V2_FRAME_
18369  00  =3  {
18370  00  =3      BYTE      cmdClass;                     /* The command class */
18371  00  =3      BYTE      cmd;                          /* The command */
18372  00  =3      BYTE      indicator0Value;              /**/
18373  00  =3      BYTE      properties1;                  /* masked byte */
18374  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup1;                /**/
18375  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup2;                /**/
18376  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup3;                /**/
18377  00  =3  } ZW_INDICATOR_REPORT_3BYTE_V2_FRAME;
18378  00  =3  
18379  00  =3  /************************************************************/
18380  00  =3  /* Indicator Report 4byte V2 command class structs */       
18381  00  =3  /************************************************************/
18382  00  =3  typedef struct _ZW_INDICATOR_REPORT_4BYTE_V2_FRAME_
18383  00  =3  {
18384  00  =3      BYTE      cmdClass;                     /* The command class */
18385  00  =3      BYTE      cmd;                          /* The command */
18386  00  =3      BYTE      indicator0Value;              /**/
18387  00  =3      BYTE      properties1;                  /* masked byte */
18388  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup1;                /**/
18389  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup2;                /**/
18390  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup3;                /**/
18391  00  =3      VG_INDICATOR_REPORT_V2_VG variantgroup4;                /**/
18392  00  =3  } ZW_INDICATOR_REPORT_4BYTE_V2_FRAME;
18393  00  =3  
18394  00  =3  /************************************************************/
18395  00  =3  /* Indicator Set V2 variant group structs */                
18396  00  =3  /************************************************************/
18397  00  =3  typedef struct _VG_INDICATOR_SET_V2_VG_
18398  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 313 

18399  00  =3      BYTE      indicatorId;                  /**/
18400  00  =3      BYTE      propertyId;                   /**/
18401  00  =3      BYTE      value;                        /**/
18402  00  =3  } VG_INDICATOR_SET_V2_VG;
18403  00  =3  
18404  00  =3  /************************************************************/
18405  00  =3  /* Indicator Set 1byte V2 command class structs */          
18406  00  =3  /************************************************************/
18407  00  =3  typedef struct _ZW_INDICATOR_SET_1BYTE_V2_FRAME_
18408  00  =3  {
18409  00  =3      BYTE      cmdClass;                     /* The command class */
18410  00  =3      BYTE      cmd;                          /* The command */
18411  00  =3      BYTE      indicator0Value;              /**/
18412  00  =3      BYTE      properties1;                  /* masked byte */
18413  00  =3      VG_INDICATOR_SET_V2_VG variantgroup1;                /**/
18414  00  =3  } ZW_INDICATOR_SET_1BYTE_V2_FRAME;
18415  00  =3  
18416  00  =3  /************************************************************/
18417  00  =3  /* Indicator Set 2byte V2 command class structs */          
18418  00  =3  /************************************************************/
18419  00  =3  typedef struct _ZW_INDICATOR_SET_2BYTE_V2_FRAME_
18420  00  =3  {
18421  00  =3      BYTE      cmdClass;                     /* The command class */
18422  00  =3      BYTE      cmd;                          /* The command */
18423  00  =3      BYTE      indicator0Value;              /**/
18424  00  =3      BYTE      properties1;                  /* masked byte */
18425  00  =3      VG_INDICATOR_SET_V2_VG variantgroup1;                /**/
18426  00  =3      VG_INDICATOR_SET_V2_VG variantgroup2;                /**/
18427  00  =3  } ZW_INDICATOR_SET_2BYTE_V2_FRAME;
18428  00  =3  
18429  00  =3  /************************************************************/
18430  00  =3  /* Indicator Set 3byte V2 command class structs */          
18431  00  =3  /************************************************************/
18432  00  =3  typedef struct _ZW_INDICATOR_SET_3BYTE_V2_FRAME_
18433  00  =3  {
18434  00  =3      BYTE      cmdClass;                     /* The command class */
18435  00  =3      BYTE      cmd;                          /* The command */
18436  00  =3      BYTE      indicator0Value;              /**/
18437  00  =3      BYTE      properties1;                  /* masked byte */
18438  00  =3      VG_INDICATOR_SET_V2_VG variantgroup1;                /**/
18439  00  =3      VG_INDICATOR_SET_V2_VG variantgroup2;                /**/
18440  00  =3      VG_INDICATOR_SET_V2_VG variantgroup3;                /**/
18441  00  =3  } ZW_INDICATOR_SET_3BYTE_V2_FRAME;
18442  00  =3  
18443  00  =3  /************************************************************/
18444  00  =3  /* Indicator Set 4byte V2 command class structs */          
18445  00  =3  /************************************************************/
18446  00  =3  typedef struct _ZW_INDICATOR_SET_4BYTE_V2_FRAME_
18447  00  =3  {
18448  00  =3      BYTE      cmdClass;                     /* The command class */
18449  00  =3      BYTE      cmd;                          /* The command */
18450  00  =3      BYTE      indicator0Value;              /**/
18451  00  =3      BYTE      properties1;                  /* masked byte */
18452  00  =3      VG_INDICATOR_SET_V2_VG variantgroup1;                /**/
18453  00  =3      VG_INDICATOR_SET_V2_VG variantgroup2;                /**/
18454  00  =3      VG_INDICATOR_SET_V2_VG variantgroup3;                /**/
18455  00  =3      VG_INDICATOR_SET_V2_VG variantgroup4;                /**/
18456  00  =3  } ZW_INDICATOR_SET_4BYTE_V2_FRAME;
18457  00  =3  
18458  00  =3  /************************************************************/
18459  00  =3  /* Indicator Supported Get V2 command class structs */      
18460  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 314 

18461  00  =3  typedef struct _ZW_INDICATOR_SUPPORTED_GET_V2_FRAME_
18462  00  =3  {
18463  00  =3      BYTE      cmdClass;                     /* The command class */
18464  00  =3      BYTE      cmd;                          /* The command */
18465  00  =3      BYTE      indicatorId;                  /**/
18466  00  =3  } ZW_INDICATOR_SUPPORTED_GET_V2_FRAME;
18467  00  =3  
18468  00  =3  /************************************************************/
18469  00  =3  /* Indicator Supported Report 1byte V2 command class structs */
18470  00  =3  /************************************************************/
18471  00  =3  typedef struct _ZW_INDICATOR_SUPPORTED_REPORT_1BYTE_V2_FRAME_
18472  00  =3  {
18473  00  =3      BYTE      cmdClass;                     /* The command class */
18474  00  =3      BYTE      cmd;                          /* The command */
18475  00  =3      BYTE      indicatorId;                  /**/
18476  00  =3      BYTE      nextIndicatorId;              /**/
18477  00  =3      BYTE      properties1;                  /* masked byte */
18478  00  =3      BYTE      propertySupportedBitMask1;    
18479  00  =3  } ZW_INDICATOR_SUPPORTED_REPORT_1BYTE_V2_FRAME;
18480  00  =3  
18481  00  =3  /************************************************************/
18482  00  =3  /* Indicator Supported Report 2byte V2 command class structs */
18483  00  =3  /************************************************************/
18484  00  =3  typedef struct _ZW_INDICATOR_SUPPORTED_REPORT_2BYTE_V2_FRAME_
18485  00  =3  {
18486  00  =3      BYTE      cmdClass;                     /* The command class */
18487  00  =3      BYTE      cmd;                          /* The command */
18488  00  =3      BYTE      indicatorId;                  /**/
18489  00  =3      BYTE      nextIndicatorId;              /**/
18490  00  =3      BYTE      properties1;                  /* masked byte */
18491  00  =3      BYTE      propertySupportedBitMask1;    /* MSB */
18492  00  =3      BYTE      propertySupportedBitMask2;    /* LSB */
18493  00  =3  } ZW_INDICATOR_SUPPORTED_REPORT_2BYTE_V2_FRAME;
18494  00  =3  
18495  00  =3  /************************************************************/
18496  00  =3  /* Indicator Supported Report 3byte V2 command class structs */
18497  00  =3  /************************************************************/
18498  00  =3  typedef struct _ZW_INDICATOR_SUPPORTED_REPORT_3BYTE_V2_FRAME_
18499  00  =3  {
18500  00  =3      BYTE      cmdClass;                     /* The command class */
18501  00  =3      BYTE      cmd;                          /* The command */
18502  00  =3      BYTE      indicatorId;                  /**/
18503  00  =3      BYTE      nextIndicatorId;              /**/
18504  00  =3      BYTE      properties1;                  /* masked byte */
18505  00  =3      BYTE      propertySupportedBitMask1;    /* MSB */
18506  00  =3      BYTE      propertySupportedBitMask2;    
18507  00  =3      BYTE      propertySupportedBitMask3;    /* LSB */
18508  00  =3  } ZW_INDICATOR_SUPPORTED_REPORT_3BYTE_V2_FRAME;
18509  00  =3  
18510  00  =3  /************************************************************/
18511  00  =3  /* Indicator Supported Report 4byte V2 command class structs */
18512  00  =3  /************************************************************/
18513  00  =3  typedef struct _ZW_INDICATOR_SUPPORTED_REPORT_4BYTE_V2_FRAME_
18514  00  =3  {
18515  00  =3      BYTE      cmdClass;                     /* The command class */
18516  00  =3      BYTE      cmd;                          /* The command */
18517  00  =3      BYTE      indicatorId;                  /**/
18518  00  =3      BYTE      nextIndicatorId;              /**/
18519  00  =3      BYTE      properties1;                  /* masked byte */
18520  00  =3      BYTE      propertySupportedBitMask1;    /* MSB */
18521  00  =3      BYTE      propertySupportedBitMask2;    
18522  00  =3      BYTE      propertySupportedBitMask3;    
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 315 

18523  00  =3      BYTE      propertySupportedBitMask4;    /* LSB */
18524  00  =3  } ZW_INDICATOR_SUPPORTED_REPORT_4BYTE_V2_FRAME;
18525  00  =3  
18526  00  =3  /************************************************************/
18527  00  =3  /* Ip Configuration Get command class structs */            
18528  00  =3  /************************************************************/
18529  00  =3  typedef struct _ZW_IP_CONFIGURATION_GET_FRAME_
18530  00  =3  {
18531  00  =3      BYTE      cmdClass;                     /* The command class */
18532  00  =3      BYTE      cmd;                          /* The command */
18533  00  =3  } ZW_IP_CONFIGURATION_GET_FRAME;
18534  00  =3  
18535  00  =3  /************************************************************/
18536  00  =3  /* Ip Configuration Release command class structs */        
18537  00  =3  /************************************************************/
18538  00  =3  typedef struct _ZW_IP_CONFIGURATION_RELEASE_FRAME_
18539  00  =3  {
18540  00  =3      BYTE      cmdClass;                     /* The command class */
18541  00  =3      BYTE      cmd;                          /* The command */
18542  00  =3  } ZW_IP_CONFIGURATION_RELEASE_FRAME;
18543  00  =3  
18544  00  =3  /************************************************************/
18545  00  =3  /* Ip Configuration Renew command class structs */          
18546  00  =3  /************************************************************/
18547  00  =3  typedef struct _ZW_IP_CONFIGURATION_RENEW_FRAME_
18548  00  =3  {
18549  00  =3      BYTE      cmdClass;                     /* The command class */
18550  00  =3      BYTE      cmd;                          /* The command */
18551  00  =3  } ZW_IP_CONFIGURATION_RENEW_FRAME;
18552  00  =3  
18553  00  =3  /************************************************************/
18554  00  =3  /* Ip Configuration Report command class structs */         
18555  00  =3  /************************************************************/
18556  00  =3  typedef struct _ZW_IP_CONFIGURATION_REPORT_FRAME_
18557  00  =3  {
18558  00  =3      BYTE      cmdClass;                     /* The command class */
18559  00  =3      BYTE      cmd;                          /* The command */
18560  00  =3      BYTE      properties1;                  /* masked byte */
18561  00  =3      BYTE      ipAddress1;                   /* MSB */
18562  00  =3      BYTE      ipAddress2;                   
18563  00  =3      BYTE      ipAddress3;                   
18564  00  =3      BYTE      ipAddress4;                   /* LSB */
18565  00  =3      BYTE      subnetMask1;                  /* MSB */
18566  00  =3      BYTE      subnetMask2;                  
18567  00  =3      BYTE      subnetMask3;                  
18568  00  =3      BYTE      subnetMask4;                  /* LSB */
18569  00  =3      BYTE      gateway1;                     /* MSB */
18570  00  =3      BYTE      gateway2;                     
18571  00  =3      BYTE      gateway3;                     
18572  00  =3      BYTE      gateway4;                     /* LSB */
18573  00  =3      BYTE      dns11;                        /* MSB */
18574  00  =3      BYTE      dns12;                        
18575  00  =3      BYTE      dns13;                        
18576  00  =3      BYTE      dns14;                        /* LSB */
18577  00  =3      BYTE      dns21;                        /* MSB */
18578  00  =3      BYTE      dns22;                        
18579  00  =3      BYTE      dns23;                        
18580  00  =3      BYTE      dns24;                        /* LSB */
18581  00  =3      BYTE      leasetime1;                   /* MSB */
18582  00  =3      BYTE      leasetime2;                   
18583  00  =3      BYTE      leasetime3;                   
18584  00  =3      BYTE      leasetime4;                   /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 316 

18585  00  =3  } ZW_IP_CONFIGURATION_REPORT_FRAME;
18586  00  =3  
18587  00  =3  /************************************************************/
18588  00  =3  /* Ip Configuration Set command class structs */            
18589  00  =3  /************************************************************/
18590  00  =3  typedef struct _ZW_IP_CONFIGURATION_SET_FRAME_
18591  00  =3  {
18592  00  =3      BYTE      cmdClass;                     /* The command class */
18593  00  =3      BYTE      cmd;                          /* The command */
18594  00  =3      BYTE      properties1;                  /* masked byte */
18595  00  =3      BYTE      ipAddress1;                   /* MSB */
18596  00  =3      BYTE      ipAddress2;                   
18597  00  =3      BYTE      ipAddress3;                   
18598  00  =3      BYTE      ipAddress4;                   /* LSB */
18599  00  =3      BYTE      subnetMask1;                  /* MSB */
18600  00  =3      BYTE      subnetMask2;                  
18601  00  =3      BYTE      subnetMask3;                  
18602  00  =3      BYTE      subnetMask4;                  /* LSB */
18603  00  =3      BYTE      gateway1;                     /* MSB */
18604  00  =3      BYTE      gateway2;                     
18605  00  =3      BYTE      gateway3;                     
18606  00  =3      BYTE      gateway4;                     /* LSB */
18607  00  =3      BYTE      dns11;                        /* MSB */
18608  00  =3      BYTE      dns12;                        
18609  00  =3      BYTE      dns13;                        
18610  00  =3      BYTE      dns14;                        /* LSB */
18611  00  =3      BYTE      dns21;                        /* MSB */
18612  00  =3      BYTE      dns22;                        
18613  00  =3      BYTE      dns23;                        
18614  00  =3      BYTE      dns24;                        /* LSB */
18615  00  =3  } ZW_IP_CONFIGURATION_SET_FRAME;
18616  00  =3  
18617  00  =3  /************************************************************/
18618  00  =3  /* Language Get command class structs */                    
18619  00  =3  /************************************************************/
18620  00  =3  typedef struct _ZW_LANGUAGE_GET_FRAME_
18621  00  =3  {
18622  00  =3      BYTE      cmdClass;                     /* The command class */
18623  00  =3      BYTE      cmd;                          /* The command */
18624  00  =3  } ZW_LANGUAGE_GET_FRAME;
18625  00  =3  
18626  00  =3  /************************************************************/
18627  00  =3  /* Language Report command class structs */                 
18628  00  =3  /************************************************************/
18629  00  =3  typedef struct _ZW_LANGUAGE_REPORT_FRAME_
18630  00  =3  {
18631  00  =3      BYTE      cmdClass;                     /* The command class */
18632  00  =3      BYTE      cmd;                          /* The command */
18633  00  =3      BYTE      language1;                    /* MSB */
18634  00  =3      BYTE      language2;                    
18635  00  =3      BYTE      language3;                    /* LSB */
18636  00  =3      BYTE      country1;                     /* MSB */
18637  00  =3      BYTE      country2;                     /* LSB */
18638  00  =3  } ZW_LANGUAGE_REPORT_FRAME;
18639  00  =3  
18640  00  =3  /************************************************************/
18641  00  =3  /* Language Set command class structs */                    
18642  00  =3  /************************************************************/
18643  00  =3  typedef struct _ZW_LANGUAGE_SET_FRAME_
18644  00  =3  {
18645  00  =3      BYTE      cmdClass;                     /* The command class */
18646  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 317 

18647  00  =3      BYTE      language1;                    /* MSB */
18648  00  =3      BYTE      language2;                    
18649  00  =3      BYTE      language3;                    /* LSB */
18650  00  =3      BYTE      country1;                     /* MSB */
18651  00  =3      BYTE      country2;                     /* LSB */
18652  00  =3  } ZW_LANGUAGE_SET_FRAME;
18653  00  =3  
18654  00  =3  /************************************************************/
18655  00  =3  /* Lock Get command class structs */                        
18656  00  =3  /************************************************************/
18657  00  =3  typedef struct _ZW_LOCK_GET_FRAME_
18658  00  =3  {
18659  00  =3      BYTE      cmdClass;                     /* The command class */
18660  00  =3      BYTE      cmd;                          /* The command */
18661  00  =3  } ZW_LOCK_GET_FRAME;
18662  00  =3  
18663  00  =3  /************************************************************/
18664  00  =3  /* Lock Report command class structs */                     
18665  00  =3  /************************************************************/
18666  00  =3  typedef struct _ZW_LOCK_REPORT_FRAME_
18667  00  =3  {
18668  00  =3      BYTE      cmdClass;                     /* The command class */
18669  00  =3      BYTE      cmd;                          /* The command */
18670  00  =3      BYTE      lockState;                    /**/
18671  00  =3  } ZW_LOCK_REPORT_FRAME;
18672  00  =3  
18673  00  =3  /************************************************************/
18674  00  =3  /* Lock Set command class structs */                        
18675  00  =3  /************************************************************/
18676  00  =3  typedef struct _ZW_LOCK_SET_FRAME_
18677  00  =3  {
18678  00  =3      BYTE      cmdClass;                     /* The command class */
18679  00  =3      BYTE      cmd;                          /* The command */
18680  00  =3      BYTE      lockState;                    /**/
18681  00  =3  } ZW_LOCK_SET_FRAME;
18682  00  =3  
18683  00  =3  /************************************************************/
18684  00  =3  /* Manufacturer Specific Get command class structs */       
18685  00  =3  /************************************************************/
18686  00  =3  typedef struct _ZW_MANUFACTURER_SPECIFIC_GET_FRAME_
18687  00  =3  {
18688  00  =3      BYTE      cmdClass;                     /* The command class */
18689  00  =3      BYTE      cmd;                          /* The command */
18690  00  =3  } ZW_MANUFACTURER_SPECIFIC_GET_FRAME;
18691  00  =3  
18692  00  =3  /************************************************************/
18693  00  =3  /* Manufacturer Specific Report command class structs */    
18694  00  =3  /************************************************************/
18695  00  =3  typedef struct _ZW_MANUFACTURER_SPECIFIC_REPORT_FRAME_
18696  00  =3  {
18697  00  =3      BYTE      cmdClass;                     /* The command class */
18698  00  =3      BYTE      cmd;                          /* The command */
18699  00  =3      BYTE      manufacturerId1;              /* MSB */
18700  00  =3      BYTE      manufacturerId2;              /* LSB */
18701  00  =3      BYTE      productTypeId1;               /* MSB */
18702  00  =3      BYTE      productTypeId2;               /* LSB */
18703  00  =3      BYTE      productId1;                   /* MSB */
18704  00  =3      BYTE      productId2;                   /* LSB */
18705  00  =3  } ZW_MANUFACTURER_SPECIFIC_REPORT_FRAME;
18706  00  =3  
18707  00  =3  /************************************************************/
18708  00  =3  /* Manufacturer Specific Get V2 command class structs */    
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 318 

18709  00  =3  /************************************************************/
18710  00  =3  typedef struct _ZW_MANUFACTURER_SPECIFIC_GET_V2_FRAME_
18711  00  =3  {
18712  00  =3      BYTE      cmdClass;                     /* The command class */
18713  00  =3      BYTE      cmd;                          /* The command */
18714  00  =3  } ZW_MANUFACTURER_SPECIFIC_GET_V2_FRAME;
18715  00  =3  
18716  00  =3  /************************************************************/
18717  00  =3  /* Manufacturer Specific Report V2 command class structs */ 
18718  00  =3  /************************************************************/
18719  00  =3  typedef struct _ZW_MANUFACTURER_SPECIFIC_REPORT_V2_FRAME_
18720  00  =3  {
18721  00  =3      BYTE      cmdClass;                     /* The command class */
18722  00  =3      BYTE      cmd;                          /* The command */
18723  00  =3      BYTE      manufacturerId1;              /* MSB */
18724  00  =3      BYTE      manufacturerId2;              /* LSB */
18725  00  =3      BYTE      productTypeId1;               /* MSB */
18726  00  =3      BYTE      productTypeId2;               /* LSB */
18727  00  =3      BYTE      productId1;                   /* MSB */
18728  00  =3      BYTE      productId2;                   /* LSB */
18729  00  =3  } ZW_MANUFACTURER_SPECIFIC_REPORT_V2_FRAME;
18730  00  =3  
18731  00  =3  /************************************************************/
18732  00  =3  /* Device Specific Get V2 command class structs */          
18733  00  =3  /************************************************************/
18734  00  =3  typedef struct _ZW_DEVICE_SPECIFIC_GET_V2_FRAME_
18735  00  =3  {
18736  00  =3      BYTE      cmdClass;                     /* The command class */
18737  00  =3      BYTE      cmd;                          /* The command */
18738  00  =3      BYTE      properties1;                  /* masked byte */
18739  00  =3  } ZW_DEVICE_SPECIFIC_GET_V2_FRAME;
18740  00  =3  
18741  00  =3  /************************************************************/
18742  00  =3  /* Device Specific Report 1byte V2 command class structs */ 
18743  00  =3  /************************************************************/
18744  00  =3  typedef struct _ZW_DEVICE_SPECIFIC_REPORT_1BYTE_V2_FRAME_
18745  00  =3  {
18746  00  =3      BYTE      cmdClass;                     /* The command class */
18747  00  =3      BYTE      cmd;                          /* The command */
18748  00  =3      BYTE      properties1;                  /* masked byte */
18749  00  =3      BYTE      properties2;                  /* masked byte */
18750  00  =3      BYTE      deviceIdData1;                
18751  00  =3  } ZW_DEVICE_SPECIFIC_REPORT_1BYTE_V2_FRAME;
18752  00  =3  
18753  00  =3  /************************************************************/
18754  00  =3  /* Device Specific Report 2byte V2 command class structs */ 
18755  00  =3  /************************************************************/
18756  00  =3  typedef struct _ZW_DEVICE_SPECIFIC_REPORT_2BYTE_V2_FRAME_
18757  00  =3  {
18758  00  =3      BYTE      cmdClass;                     /* The command class */
18759  00  =3      BYTE      cmd;                          /* The command */
18760  00  =3      BYTE      properties1;                  /* masked byte */
18761  00  =3      BYTE      properties2;                  /* masked byte */
18762  00  =3      BYTE      deviceIdData1;                /* MSB */
18763  00  =3      BYTE      deviceIdData2;                /* LSB */
18764  00  =3  } ZW_DEVICE_SPECIFIC_REPORT_2BYTE_V2_FRAME;
18765  00  =3  
18766  00  =3  /************************************************************/
18767  00  =3  /* Device Specific Report 3byte V2 command class structs */ 
18768  00  =3  /************************************************************/
18769  00  =3  typedef struct _ZW_DEVICE_SPECIFIC_REPORT_3BYTE_V2_FRAME_
18770  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 319 

18771  00  =3      BYTE      cmdClass;                     /* The command class */
18772  00  =3      BYTE      cmd;                          /* The command */
18773  00  =3      BYTE      properties1;                  /* masked byte */
18774  00  =3      BYTE      properties2;                  /* masked byte */
18775  00  =3      BYTE      deviceIdData1;                /* MSB */
18776  00  =3      BYTE      deviceIdData2;                
18777  00  =3      BYTE      deviceIdData3;                /* LSB */
18778  00  =3  } ZW_DEVICE_SPECIFIC_REPORT_3BYTE_V2_FRAME;
18779  00  =3  
18780  00  =3  /************************************************************/
18781  00  =3  /* Device Specific Report 4byte V2 command class structs */ 
18782  00  =3  /************************************************************/
18783  00  =3  typedef struct _ZW_DEVICE_SPECIFIC_REPORT_4BYTE_V2_FRAME_
18784  00  =3  {
18785  00  =3      BYTE      cmdClass;                     /* The command class */
18786  00  =3      BYTE      cmd;                          /* The command */
18787  00  =3      BYTE      properties1;                  /* masked byte */
18788  00  =3      BYTE      properties2;                  /* masked byte */
18789  00  =3      BYTE      deviceIdData1;                /* MSB */
18790  00  =3      BYTE      deviceIdData2;                
18791  00  =3      BYTE      deviceIdData3;                
18792  00  =3      BYTE      deviceIdData4;                /* LSB */
18793  00  =3  } ZW_DEVICE_SPECIFIC_REPORT_4BYTE_V2_FRAME;
18794  00  =3  
18795  00  =3  /************************************************************/
18796  00  =3  /* Meter Pulse Get command class structs */                 
18797  00  =3  /************************************************************/
18798  00  =3  typedef struct _ZW_METER_PULSE_GET_FRAME_
18799  00  =3  {
18800  00  =3      BYTE      cmdClass;                     /* The command class */
18801  00  =3      BYTE      cmd;                          /* The command */
18802  00  =3  } ZW_METER_PULSE_GET_FRAME;
18803  00  =3  
18804  00  =3  /************************************************************/
18805  00  =3  /* Meter Pulse Report command class structs */              
18806  00  =3  /************************************************************/
18807  00  =3  typedef struct _ZW_METER_PULSE_REPORT_FRAME_
18808  00  =3  {
18809  00  =3      BYTE      cmdClass;                     /* The command class */
18810  00  =3      BYTE      cmd;                          /* The command */
18811  00  =3      BYTE      pulseCount1;                  /* MSB */
18812  00  =3      BYTE      pulseCount2;                  
18813  00  =3      BYTE      pulseCount3;                  
18814  00  =3      BYTE      pulseCount4;                  /* LSB */
18815  00  =3  } ZW_METER_PULSE_REPORT_FRAME;
18816  00  =3  
18817  00  =3  /************************************************************/
18818  00  =3  /* Meter Tbl Table Point Adm No Set 1byte command class structs */
18819  00  =3  /************************************************************/
18820  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_1BYTE_FRAME_
18821  00  =3  {
18822  00  =3      BYTE      cmdClass;                     /* The command class */
18823  00  =3      BYTE      cmd;                          /* The command */
18824  00  =3      BYTE      properties1;                  /* masked byte */
18825  00  =3      BYTE      meterPointAdmNumberCharacter1;
18826  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_1BYTE_FRAME;
18827  00  =3  
18828  00  =3  /************************************************************/
18829  00  =3  /* Meter Tbl Table Point Adm No Set 2byte command class structs */
18830  00  =3  /************************************************************/
18831  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_2BYTE_FRAME_
18832  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 320 

18833  00  =3      BYTE      cmdClass;                     /* The command class */
18834  00  =3      BYTE      cmd;                          /* The command */
18835  00  =3      BYTE      properties1;                  /* masked byte */
18836  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
18837  00  =3      BYTE      meterPointAdmNumberCharacter2;/* LSB */
18838  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_2BYTE_FRAME;
18839  00  =3  
18840  00  =3  /************************************************************/
18841  00  =3  /* Meter Tbl Table Point Adm No Set 3byte command class structs */
18842  00  =3  /************************************************************/
18843  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_3BYTE_FRAME_
18844  00  =3  {
18845  00  =3      BYTE      cmdClass;                     /* The command class */
18846  00  =3      BYTE      cmd;                          /* The command */
18847  00  =3      BYTE      properties1;                  /* masked byte */
18848  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
18849  00  =3      BYTE      meterPointAdmNumberCharacter2;
18850  00  =3      BYTE      meterPointAdmNumberCharacter3;/* LSB */
18851  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_3BYTE_FRAME;
18852  00  =3  
18853  00  =3  /************************************************************/
18854  00  =3  /* Meter Tbl Table Point Adm No Set 4byte command class structs */
18855  00  =3  /************************************************************/
18856  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_4BYTE_FRAME_
18857  00  =3  {
18858  00  =3      BYTE      cmdClass;                     /* The command class */
18859  00  =3      BYTE      cmd;                          /* The command */
18860  00  =3      BYTE      properties1;                  /* masked byte */
18861  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
18862  00  =3      BYTE      meterPointAdmNumberCharacter2;
18863  00  =3      BYTE      meterPointAdmNumberCharacter3;
18864  00  =3      BYTE      meterPointAdmNumberCharacter4;/* LSB */
18865  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_SET_4BYTE_FRAME;
18866  00  =3  
18867  00  =3  /************************************************************/
18868  00  =3  /* Meter Tbl Status Report variant group structs */         
18869  00  =3  /************************************************************/
18870  00  =3  typedef struct _VG_METER_TBL_STATUS_REPORT_VG_
18871  00  =3  {
18872  00  =3      BYTE      properties1;                  /* masked byte */
18873  00  =3      BYTE      year1;                        /* MSB */
18874  00  =3      BYTE      year2;                        /* LSB */
18875  00  =3      BYTE      month;                        /**/
18876  00  =3      BYTE      day;                          /**/
18877  00  =3      BYTE      hourLocalTime;                /**/
18878  00  =3      BYTE      minuteLocalTime;              /**/
18879  00  =3      BYTE      secondLocalTime;              /**/
18880  00  =3  } VG_METER_TBL_STATUS_REPORT_VG;
18881  00  =3  
18882  00  =3  /************************************************************/
18883  00  =3  /* Meter Tbl Status Report 1byte command class structs */   
18884  00  =3  /************************************************************/
18885  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_1BYTE_FRAME_
18886  00  =3  {
18887  00  =3      BYTE      cmdClass;                     /* The command class */
18888  00  =3      BYTE      cmd;                          /* The command */
18889  00  =3      BYTE      reportsToFollow;              /**/
18890  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
18891  00  =3      BYTE      currentOperatingStatus2;      
18892  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
18893  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup1;                /**/
18894  00  =3  } ZW_METER_TBL_STATUS_REPORT_1BYTE_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 321 

18895  00  =3  
18896  00  =3  /************************************************************/
18897  00  =3  /* Meter Tbl Status Report 2byte command class structs */   
18898  00  =3  /************************************************************/
18899  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_2BYTE_FRAME_
18900  00  =3  {
18901  00  =3      BYTE      cmdClass;                     /* The command class */
18902  00  =3      BYTE      cmd;                          /* The command */
18903  00  =3      BYTE      reportsToFollow;              /**/
18904  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
18905  00  =3      BYTE      currentOperatingStatus2;      
18906  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
18907  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup1;                /**/
18908  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup2;                /**/
18909  00  =3  } ZW_METER_TBL_STATUS_REPORT_2BYTE_FRAME;
18910  00  =3  
18911  00  =3  /************************************************************/
18912  00  =3  /* Meter Tbl Status Report 3byte command class structs */   
18913  00  =3  /************************************************************/
18914  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_3BYTE_FRAME_
18915  00  =3  {
18916  00  =3      BYTE      cmdClass;                     /* The command class */
18917  00  =3      BYTE      cmd;                          /* The command */
18918  00  =3      BYTE      reportsToFollow;              /**/
18919  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
18920  00  =3      BYTE      currentOperatingStatus2;      
18921  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
18922  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup1;                /**/
18923  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup2;                /**/
18924  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup3;                /**/
18925  00  =3  } ZW_METER_TBL_STATUS_REPORT_3BYTE_FRAME;
18926  00  =3  
18927  00  =3  /************************************************************/
18928  00  =3  /* Meter Tbl Status Report 4byte command class structs */   
18929  00  =3  /************************************************************/
18930  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_4BYTE_FRAME_
18931  00  =3  {
18932  00  =3      BYTE      cmdClass;                     /* The command class */
18933  00  =3      BYTE      cmd;                          /* The command */
18934  00  =3      BYTE      reportsToFollow;              /**/
18935  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
18936  00  =3      BYTE      currentOperatingStatus2;      
18937  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
18938  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup1;                /**/
18939  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup2;                /**/
18940  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup3;                /**/
18941  00  =3      VG_METER_TBL_STATUS_REPORT_VG variantgroup4;                /**/
18942  00  =3  } ZW_METER_TBL_STATUS_REPORT_4BYTE_FRAME;
18943  00  =3  
18944  00  =3  /************************************************************/
18945  00  =3  /* Meter Tbl Status Date Get command class structs */       
18946  00  =3  /************************************************************/
18947  00  =3  typedef struct _ZW_METER_TBL_STATUS_DATE_GET_FRAME_
18948  00  =3  {
18949  00  =3      BYTE      cmdClass;                     /* The command class */
18950  00  =3      BYTE      cmd;                          /* The command */
18951  00  =3      BYTE      maximumReports;               /**/
18952  00  =3      BYTE      startYear1;                   /* MSB */
18953  00  =3      BYTE      startYear2;                   /* LSB */
18954  00  =3      BYTE      startMonth;                   /**/
18955  00  =3      BYTE      startDay;                     /**/
18956  00  =3      BYTE      startHourLocalTime;           /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 322 

18957  00  =3      BYTE      startMinuteLocalTime;         /**/
18958  00  =3      BYTE      startSecondLocalTime;         /**/
18959  00  =3      BYTE      stopYear1;                    /* MSB */
18960  00  =3      BYTE      stopYear2;                    /* LSB */
18961  00  =3      BYTE      stopMonth;                    /**/
18962  00  =3      BYTE      stopDay;                      /**/
18963  00  =3      BYTE      stopHourLocalTime;            /**/
18964  00  =3      BYTE      stopMinuteLocalTime;          /**/
18965  00  =3      BYTE      stopSecondLocalTime;          /**/
18966  00  =3  } ZW_METER_TBL_STATUS_DATE_GET_FRAME;
18967  00  =3  
18968  00  =3  /************************************************************/
18969  00  =3  /* Meter Tbl Status Depth Get command class structs */      
18970  00  =3  /************************************************************/
18971  00  =3  typedef struct _ZW_METER_TBL_STATUS_DEPTH_GET_FRAME_
18972  00  =3  {
18973  00  =3      BYTE      cmdClass;                     /* The command class */
18974  00  =3      BYTE      cmd;                          /* The command */
18975  00  =3      BYTE      statusEventLogDepth;          /**/
18976  00  =3  } ZW_METER_TBL_STATUS_DEPTH_GET_FRAME;
18977  00  =3  
18978  00  =3  /************************************************************/
18979  00  =3  /* Meter Tbl Status Supported Get command class structs */  
18980  00  =3  /************************************************************/
18981  00  =3  typedef struct _ZW_METER_TBL_STATUS_SUPPORTED_GET_FRAME_
18982  00  =3  {
18983  00  =3      BYTE      cmdClass;                     /* The command class */
18984  00  =3      BYTE      cmd;                          /* The command */
18985  00  =3  } ZW_METER_TBL_STATUS_SUPPORTED_GET_FRAME;
18986  00  =3  
18987  00  =3  /************************************************************/
18988  00  =3  /* Meter Tbl Status Supported Report command class structs */
18989  00  =3  /************************************************************/
18990  00  =3  typedef struct _ZW_METER_TBL_STATUS_SUPPORTED_REPORT_FRAME_
18991  00  =3  {
18992  00  =3      BYTE      cmdClass;                     /* The command class */
18993  00  =3      BYTE      cmd;                          /* The command */
18994  00  =3      BYTE      supportedOperatingStatus1;    /* MSB */
18995  00  =3      BYTE      supportedOperatingStatus2;    
18996  00  =3      BYTE      supportedOperatingStatus3;    /* LSB */
18997  00  =3      BYTE      statusEventLogDepth;          /**/
18998  00  =3  } ZW_METER_TBL_STATUS_SUPPORTED_REPORT_FRAME;
18999  00  =3  
19000  00  =3  /************************************************************/
19001  00  =3  /* Meter Tbl Current Data Get command class structs */      
19002  00  =3  /************************************************************/
19003  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_GET_FRAME_
19004  00  =3  {
19005  00  =3      BYTE      cmdClass;                     /* The command class */
19006  00  =3      BYTE      cmd;                          /* The command */
19007  00  =3      BYTE      datasetRequested1;            /* MSB */
19008  00  =3      BYTE      datasetRequested2;            
19009  00  =3      BYTE      datasetRequested3;            /* LSB */
19010  00  =3  } ZW_METER_TBL_CURRENT_DATA_GET_FRAME;
19011  00  =3  
19012  00  =3  /************************************************************/
19013  00  =3  /* Meter Tbl Current Data Report variant group structs */   
19014  00  =3  /************************************************************/
19015  00  =3  typedef struct _VG_METER_TBL_CURRENT_DATA_REPORT_VG_
19016  00  =3  {
19017  00  =3      BYTE      properties1;                  /* masked byte */
19018  00  =3      BYTE      currentValue1;                /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 323 

19019  00  =3      BYTE      currentValue2;                
19020  00  =3      BYTE      currentValue3;                
19021  00  =3      BYTE      currentValue4;                /* LSB */
19022  00  =3  } VG_METER_TBL_CURRENT_DATA_REPORT_VG;
19023  00  =3  
19024  00  =3  /************************************************************/
19025  00  =3  /* Meter Tbl Current Data Report 1byte command class structs */
19026  00  =3  /************************************************************/
19027  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_1BYTE_FRAME_
19028  00  =3  {
19029  00  =3      BYTE      cmdClass;                     /* The command class */
19030  00  =3      BYTE      cmd;                          /* The command */
19031  00  =3      BYTE      reportsToFollow;              /**/
19032  00  =3      BYTE      properties1;                  /* masked byte */
19033  00  =3      BYTE      dataset1;                     /* MSB */
19034  00  =3      BYTE      dataset2;                     
19035  00  =3      BYTE      dataset3;                     /* LSB */
19036  00  =3      BYTE      year1;                        /* MSB */
19037  00  =3      BYTE      year2;                        /* LSB */
19038  00  =3      BYTE      month;                        /**/
19039  00  =3      BYTE      day;                          /**/
19040  00  =3      BYTE      hourLocalTime;                /**/
19041  00  =3      BYTE      minuteLocalTime;              /**/
19042  00  =3      BYTE      secondLocalTime;              /**/
19043  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
19044  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_1BYTE_FRAME;
19045  00  =3  
19046  00  =3  /************************************************************/
19047  00  =3  /* Meter Tbl Current Data Report 2byte command class structs */
19048  00  =3  /************************************************************/
19049  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_2BYTE_FRAME_
19050  00  =3  {
19051  00  =3      BYTE      cmdClass;                     /* The command class */
19052  00  =3      BYTE      cmd;                          /* The command */
19053  00  =3      BYTE      reportsToFollow;              /**/
19054  00  =3      BYTE      properties1;                  /* masked byte */
19055  00  =3      BYTE      dataset1;                     /* MSB */
19056  00  =3      BYTE      dataset2;                     
19057  00  =3      BYTE      dataset3;                     /* LSB */
19058  00  =3      BYTE      year1;                        /* MSB */
19059  00  =3      BYTE      year2;                        /* LSB */
19060  00  =3      BYTE      month;                        /**/
19061  00  =3      BYTE      day;                          /**/
19062  00  =3      BYTE      hourLocalTime;                /**/
19063  00  =3      BYTE      minuteLocalTime;              /**/
19064  00  =3      BYTE      secondLocalTime;              /**/
19065  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
19066  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup2;                /**/
19067  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_2BYTE_FRAME;
19068  00  =3  
19069  00  =3  /************************************************************/
19070  00  =3  /* Meter Tbl Current Data Report 3byte command class structs */
19071  00  =3  /************************************************************/
19072  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_3BYTE_FRAME_
19073  00  =3  {
19074  00  =3      BYTE      cmdClass;                     /* The command class */
19075  00  =3      BYTE      cmd;                          /* The command */
19076  00  =3      BYTE      reportsToFollow;              /**/
19077  00  =3      BYTE      properties1;                  /* masked byte */
19078  00  =3      BYTE      dataset1;                     /* MSB */
19079  00  =3      BYTE      dataset2;                     
19080  00  =3      BYTE      dataset3;                     /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 324 

19081  00  =3      BYTE      year1;                        /* MSB */
19082  00  =3      BYTE      year2;                        /* LSB */
19083  00  =3      BYTE      month;                        /**/
19084  00  =3      BYTE      day;                          /**/
19085  00  =3      BYTE      hourLocalTime;                /**/
19086  00  =3      BYTE      minuteLocalTime;              /**/
19087  00  =3      BYTE      secondLocalTime;              /**/
19088  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
19089  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup2;                /**/
19090  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup3;                /**/
19091  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_3BYTE_FRAME;
19092  00  =3  
19093  00  =3  /************************************************************/
19094  00  =3  /* Meter Tbl Current Data Report 4byte command class structs */
19095  00  =3  /************************************************************/
19096  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_4BYTE_FRAME_
19097  00  =3  {
19098  00  =3      BYTE      cmdClass;                     /* The command class */
19099  00  =3      BYTE      cmd;                          /* The command */
19100  00  =3      BYTE      reportsToFollow;              /**/
19101  00  =3      BYTE      properties1;                  /* masked byte */
19102  00  =3      BYTE      dataset1;                     /* MSB */
19103  00  =3      BYTE      dataset2;                     
19104  00  =3      BYTE      dataset3;                     /* LSB */
19105  00  =3      BYTE      year1;                        /* MSB */
19106  00  =3      BYTE      year2;                        /* LSB */
19107  00  =3      BYTE      month;                        /**/
19108  00  =3      BYTE      day;                          /**/
19109  00  =3      BYTE      hourLocalTime;                /**/
19110  00  =3      BYTE      minuteLocalTime;              /**/
19111  00  =3      BYTE      secondLocalTime;              /**/
19112  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
19113  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup2;                /**/
19114  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup3;                /**/
19115  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_VG variantgroup4;                /**/
19116  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_4BYTE_FRAME;
19117  00  =3  
19118  00  =3  /************************************************************/
19119  00  =3  /* Meter Tbl Historical Data Get command class structs */   
19120  00  =3  /************************************************************/
19121  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_GET_FRAME_
19122  00  =3  {
19123  00  =3      BYTE      cmdClass;                     /* The command class */
19124  00  =3      BYTE      cmd;                          /* The command */
19125  00  =3      BYTE      maximumReports;               /**/
19126  00  =3      BYTE      historicalDatasetRequested1;  /* MSB */
19127  00  =3      BYTE      historicalDatasetRequested2;  
19128  00  =3      BYTE      historicalDatasetRequested3;  /* LSB */
19129  00  =3      BYTE      startYear1;                   /* MSB */
19130  00  =3      BYTE      startYear2;                   /* LSB */
19131  00  =3      BYTE      startMonth;                   /**/
19132  00  =3      BYTE      startDay;                     /**/
19133  00  =3      BYTE      startHourLocalTime;           /**/
19134  00  =3      BYTE      startMinuteLocalTime;         /**/
19135  00  =3      BYTE      startSecondLocalTime;         /**/
19136  00  =3      BYTE      stopYear1;                    /* MSB */
19137  00  =3      BYTE      stopYear2;                    /* LSB */
19138  00  =3      BYTE      stopMonth;                    /**/
19139  00  =3      BYTE      stopDay;                      /**/
19140  00  =3      BYTE      stopHourLocalTime;            /**/
19141  00  =3      BYTE      stopMinuteLocalTime;          /**/
19142  00  =3      BYTE      stopSecondLocalTime;          /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 325 

19143  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_GET_FRAME;
19144  00  =3  
19145  00  =3  /************************************************************/
19146  00  =3  /* Meter Tbl Historical Data Report variant group structs */
19147  00  =3  /************************************************************/
19148  00  =3  typedef struct _VG_METER_TBL_HISTORICAL_DATA_REPORT_VG_
19149  00  =3  {
19150  00  =3      BYTE      properties1;                  /* masked byte */
19151  00  =3      BYTE      historicalValue1;             /* MSB */
19152  00  =3      BYTE      historicalValue2;             
19153  00  =3      BYTE      historicalValue3;             
19154  00  =3      BYTE      historicalValue4;             /* LSB */
19155  00  =3  } VG_METER_TBL_HISTORICAL_DATA_REPORT_VG;
19156  00  =3  
19157  00  =3  /************************************************************/
19158  00  =3  /* Meter Tbl Historical Data Report 1byte command class structs */
19159  00  =3  /************************************************************/
19160  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_1BYTE_FRAME_
19161  00  =3  {
19162  00  =3      BYTE      cmdClass;                     /* The command class */
19163  00  =3      BYTE      cmd;                          /* The command */
19164  00  =3      BYTE      reportsToFollow;              /**/
19165  00  =3      BYTE      properties1;                  /* masked byte */
19166  00  =3      BYTE      dataset1;                     /* MSB */
19167  00  =3      BYTE      dataset2;                     
19168  00  =3      BYTE      dataset3;                     /* LSB */
19169  00  =3      BYTE      year1;                        /* MSB */
19170  00  =3      BYTE      year2;                        /* LSB */
19171  00  =3      BYTE      month;                        /**/
19172  00  =3      BYTE      day;                          /**/
19173  00  =3      BYTE      hourLocalTime;                /**/
19174  00  =3      BYTE      minuteLocalTime;              /**/
19175  00  =3      BYTE      secondLocalTime;              /**/
19176  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
19177  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_1BYTE_FRAME;
19178  00  =3  
19179  00  =3  /************************************************************/
19180  00  =3  /* Meter Tbl Historical Data Report 2byte command class structs */
19181  00  =3  /************************************************************/
19182  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_2BYTE_FRAME_
19183  00  =3  {
19184  00  =3      BYTE      cmdClass;                     /* The command class */
19185  00  =3      BYTE      cmd;                          /* The command */
19186  00  =3      BYTE      reportsToFollow;              /**/
19187  00  =3      BYTE      properties1;                  /* masked byte */
19188  00  =3      BYTE      dataset1;                     /* MSB */
19189  00  =3      BYTE      dataset2;                     
19190  00  =3      BYTE      dataset3;                     /* LSB */
19191  00  =3      BYTE      year1;                        /* MSB */
19192  00  =3      BYTE      year2;                        /* LSB */
19193  00  =3      BYTE      month;                        /**/
19194  00  =3      BYTE      day;                          /**/
19195  00  =3      BYTE      hourLocalTime;                /**/
19196  00  =3      BYTE      minuteLocalTime;              /**/
19197  00  =3      BYTE      secondLocalTime;              /**/
19198  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
19199  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup2;                /**/
19200  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_2BYTE_FRAME;
19201  00  =3  
19202  00  =3  /************************************************************/
19203  00  =3  /* Meter Tbl Historical Data Report 3byte command class structs */
19204  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 326 

19205  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_3BYTE_FRAME_
19206  00  =3  {
19207  00  =3      BYTE      cmdClass;                     /* The command class */
19208  00  =3      BYTE      cmd;                          /* The command */
19209  00  =3      BYTE      reportsToFollow;              /**/
19210  00  =3      BYTE      properties1;                  /* masked byte */
19211  00  =3      BYTE      dataset1;                     /* MSB */
19212  00  =3      BYTE      dataset2;                     
19213  00  =3      BYTE      dataset3;                     /* LSB */
19214  00  =3      BYTE      year1;                        /* MSB */
19215  00  =3      BYTE      year2;                        /* LSB */
19216  00  =3      BYTE      month;                        /**/
19217  00  =3      BYTE      day;                          /**/
19218  00  =3      BYTE      hourLocalTime;                /**/
19219  00  =3      BYTE      minuteLocalTime;              /**/
19220  00  =3      BYTE      secondLocalTime;              /**/
19221  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
19222  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup2;                /**/
19223  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup3;                /**/
19224  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_3BYTE_FRAME;
19225  00  =3  
19226  00  =3  /************************************************************/
19227  00  =3  /* Meter Tbl Historical Data Report 4byte command class structs */
19228  00  =3  /************************************************************/
19229  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_4BYTE_FRAME_
19230  00  =3  {
19231  00  =3      BYTE      cmdClass;                     /* The command class */
19232  00  =3      BYTE      cmd;                          /* The command */
19233  00  =3      BYTE      reportsToFollow;              /**/
19234  00  =3      BYTE      properties1;                  /* masked byte */
19235  00  =3      BYTE      dataset1;                     /* MSB */
19236  00  =3      BYTE      dataset2;                     
19237  00  =3      BYTE      dataset3;                     /* LSB */
19238  00  =3      BYTE      year1;                        /* MSB */
19239  00  =3      BYTE      year2;                        /* LSB */
19240  00  =3      BYTE      month;                        /**/
19241  00  =3      BYTE      day;                          /**/
19242  00  =3      BYTE      hourLocalTime;                /**/
19243  00  =3      BYTE      minuteLocalTime;              /**/
19244  00  =3      BYTE      secondLocalTime;              /**/
19245  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
19246  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup2;                /**/
19247  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup3;                /**/
19248  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_VG variantgroup4;                /**/
19249  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_4BYTE_FRAME;
19250  00  =3  
19251  00  =3  /************************************************************/
19252  00  =3  /* Meter Tbl Report command class structs */                
19253  00  =3  /************************************************************/
19254  00  =3  typedef struct _ZW_METER_TBL_REPORT_FRAME_
19255  00  =3  {
19256  00  =3      BYTE      cmdClass;                     /* The command class */
19257  00  =3      BYTE      cmd;                          /* The command */
19258  00  =3      BYTE      properties1;                  /* masked byte */
19259  00  =3      BYTE      properties2;                  /* masked byte */
19260  00  =3      BYTE      datasetSupported1;            /* MSB */
19261  00  =3      BYTE      datasetSupported2;            
19262  00  =3      BYTE      datasetSupported3;            /* LSB */
19263  00  =3      BYTE      datasetHistorySupported1;     /* MSB */
19264  00  =3      BYTE      datasetHistorySupported2;     
19265  00  =3      BYTE      datasetHistorySupported3;     /* LSB */
19266  00  =3      BYTE      dataHistorySupported1;        /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 327 

19267  00  =3      BYTE      dataHistorySupported2;        
19268  00  =3      BYTE      dataHistorySupported3;        /* LSB */
19269  00  =3  } ZW_METER_TBL_REPORT_FRAME;
19270  00  =3  
19271  00  =3  /************************************************************/
19272  00  =3  /* Meter Tbl Table Capability Get command class structs */  
19273  00  =3  /************************************************************/
19274  00  =3  typedef struct _ZW_METER_TBL_TABLE_CAPABILITY_GET_FRAME_
19275  00  =3  {
19276  00  =3      BYTE      cmdClass;                     /* The command class */
19277  00  =3      BYTE      cmd;                          /* The command */
19278  00  =3  } ZW_METER_TBL_TABLE_CAPABILITY_GET_FRAME;
19279  00  =3  
19280  00  =3  /************************************************************/
19281  00  =3  /* Meter Tbl Table Id Get command class structs */          
19282  00  =3  /************************************************************/
19283  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_GET_FRAME_
19284  00  =3  {
19285  00  =3      BYTE      cmdClass;                     /* The command class */
19286  00  =3      BYTE      cmd;                          /* The command */
19287  00  =3  } ZW_METER_TBL_TABLE_ID_GET_FRAME;
19288  00  =3  
19289  00  =3  /************************************************************/
19290  00  =3  /* Meter Tbl Table Id Report 1byte command class structs */ 
19291  00  =3  /************************************************************/
19292  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_1BYTE_FRAME_
19293  00  =3  {
19294  00  =3      BYTE      cmdClass;                     /* The command class */
19295  00  =3      BYTE      cmd;                          /* The command */
19296  00  =3      BYTE      properties1;                  /* masked byte */
19297  00  =3      BYTE      meterIdCharacter1;            
19298  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_1BYTE_FRAME;
19299  00  =3  
19300  00  =3  /************************************************************/
19301  00  =3  /* Meter Tbl Table Id Report 2byte command class structs */ 
19302  00  =3  /************************************************************/
19303  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_2BYTE_FRAME_
19304  00  =3  {
19305  00  =3      BYTE      cmdClass;                     /* The command class */
19306  00  =3      BYTE      cmd;                          /* The command */
19307  00  =3      BYTE      properties1;                  /* masked byte */
19308  00  =3      BYTE      meterIdCharacter1;            /* MSB */
19309  00  =3      BYTE      meterIdCharacter2;            /* LSB */
19310  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_2BYTE_FRAME;
19311  00  =3  
19312  00  =3  /************************************************************/
19313  00  =3  /* Meter Tbl Table Id Report 3byte command class structs */ 
19314  00  =3  /************************************************************/
19315  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_3BYTE_FRAME_
19316  00  =3  {
19317  00  =3      BYTE      cmdClass;                     /* The command class */
19318  00  =3      BYTE      cmd;                          /* The command */
19319  00  =3      BYTE      properties1;                  /* masked byte */
19320  00  =3      BYTE      meterIdCharacter1;            /* MSB */
19321  00  =3      BYTE      meterIdCharacter2;            
19322  00  =3      BYTE      meterIdCharacter3;            /* LSB */
19323  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_3BYTE_FRAME;
19324  00  =3  
19325  00  =3  /************************************************************/
19326  00  =3  /* Meter Tbl Table Id Report 4byte command class structs */ 
19327  00  =3  /************************************************************/
19328  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_4BYTE_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 328 

19329  00  =3  {
19330  00  =3      BYTE      cmdClass;                     /* The command class */
19331  00  =3      BYTE      cmd;                          /* The command */
19332  00  =3      BYTE      properties1;                  /* masked byte */
19333  00  =3      BYTE      meterIdCharacter1;            /* MSB */
19334  00  =3      BYTE      meterIdCharacter2;            
19335  00  =3      BYTE      meterIdCharacter3;            
19336  00  =3      BYTE      meterIdCharacter4;            /* LSB */
19337  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_4BYTE_FRAME;
19338  00  =3  
19339  00  =3  /************************************************************/
19340  00  =3  /* Meter Tbl Table Point Adm No Get command class structs */
19341  00  =3  /************************************************************/
19342  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_GET_FRAME_
19343  00  =3  {
19344  00  =3      BYTE      cmdClass;                     /* The command class */
19345  00  =3      BYTE      cmd;                          /* The command */
19346  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_GET_FRAME;
19347  00  =3  
19348  00  =3  /************************************************************/
19349  00  =3  /* Meter Tbl Table Point Adm No Report 1byte command class structs */
19350  00  =3  /************************************************************/
19351  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_1BYTE_FRAME_
19352  00  =3  {
19353  00  =3      BYTE      cmdClass;                     /* The command class */
19354  00  =3      BYTE      cmd;                          /* The command */
19355  00  =3      BYTE      properties1;                  /* masked byte */
19356  00  =3      BYTE      meterPointAdmNumberCharacter1;
19357  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_1BYTE_FRAME;
19358  00  =3  
19359  00  =3  /************************************************************/
19360  00  =3  /* Meter Tbl Table Point Adm No Report 2byte command class structs */
19361  00  =3  /************************************************************/
19362  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_2BYTE_FRAME_
19363  00  =3  {
19364  00  =3      BYTE      cmdClass;                     /* The command class */
19365  00  =3      BYTE      cmd;                          /* The command */
19366  00  =3      BYTE      properties1;                  /* masked byte */
19367  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
19368  00  =3      BYTE      meterPointAdmNumberCharacter2;/* LSB */
19369  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_2BYTE_FRAME;
19370  00  =3  
19371  00  =3  /************************************************************/
19372  00  =3  /* Meter Tbl Table Point Adm No Report 3byte command class structs */
19373  00  =3  /************************************************************/
19374  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_3BYTE_FRAME_
19375  00  =3  {
19376  00  =3      BYTE      cmdClass;                     /* The command class */
19377  00  =3      BYTE      cmd;                          /* The command */
19378  00  =3      BYTE      properties1;                  /* masked byte */
19379  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
19380  00  =3      BYTE      meterPointAdmNumberCharacter2;
19381  00  =3      BYTE      meterPointAdmNumberCharacter3;/* LSB */
19382  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_3BYTE_FRAME;
19383  00  =3  
19384  00  =3  /************************************************************/
19385  00  =3  /* Meter Tbl Table Point Adm No Report 4byte command class structs */
19386  00  =3  /************************************************************/
19387  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_4BYTE_FRAME_
19388  00  =3  {
19389  00  =3      BYTE      cmdClass;                     /* The command class */
19390  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 329 

19391  00  =3      BYTE      properties1;                  /* masked byte */
19392  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
19393  00  =3      BYTE      meterPointAdmNumberCharacter2;
19394  00  =3      BYTE      meterPointAdmNumberCharacter3;
19395  00  =3      BYTE      meterPointAdmNumberCharacter4;/* LSB */
19396  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_4BYTE_FRAME;
19397  00  =3  
19398  00  =3  /************************************************************/
19399  00  =3  /* Meter Tbl Status Report V2 variant group structs */      
19400  00  =3  /************************************************************/
19401  00  =3  typedef struct _VG_METER_TBL_STATUS_REPORT_V2_VG_
19402  00  =3  {
19403  00  =3      BYTE      properties1;                  /* masked byte */
19404  00  =3      BYTE      year1;                        /* MSB */
19405  00  =3      BYTE      year2;                        /* LSB */
19406  00  =3      BYTE      month;                        /**/
19407  00  =3      BYTE      day;                          /**/
19408  00  =3      BYTE      hourLocalTime;                /**/
19409  00  =3      BYTE      minuteLocalTime;              /**/
19410  00  =3      BYTE      secondLocalTime;              /**/
19411  00  =3  } VG_METER_TBL_STATUS_REPORT_V2_VG;
19412  00  =3  
19413  00  =3  /************************************************************/
19414  00  =3  /* Meter Tbl Status Report 1byte V2 command class structs */
19415  00  =3  /************************************************************/
19416  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_1BYTE_V2_FRAME_
19417  00  =3  {
19418  00  =3      BYTE      cmdClass;                     /* The command class */
19419  00  =3      BYTE      cmd;                          /* The command */
19420  00  =3      BYTE      reportsToFollow;              /**/
19421  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
19422  00  =3      BYTE      currentOperatingStatus2;      
19423  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
19424  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup1;                /**/
19425  00  =3  } ZW_METER_TBL_STATUS_REPORT_1BYTE_V2_FRAME;
19426  00  =3  
19427  00  =3  /************************************************************/
19428  00  =3  /* Meter Tbl Status Report 2byte V2 command class structs */
19429  00  =3  /************************************************************/
19430  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_2BYTE_V2_FRAME_
19431  00  =3  {
19432  00  =3      BYTE      cmdClass;                     /* The command class */
19433  00  =3      BYTE      cmd;                          /* The command */
19434  00  =3      BYTE      reportsToFollow;              /**/
19435  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
19436  00  =3      BYTE      currentOperatingStatus2;      
19437  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
19438  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup1;                /**/
19439  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup2;                /**/
19440  00  =3  } ZW_METER_TBL_STATUS_REPORT_2BYTE_V2_FRAME;
19441  00  =3  
19442  00  =3  /************************************************************/
19443  00  =3  /* Meter Tbl Status Report 3byte V2 command class structs */
19444  00  =3  /************************************************************/
19445  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_3BYTE_V2_FRAME_
19446  00  =3  {
19447  00  =3      BYTE      cmdClass;                     /* The command class */
19448  00  =3      BYTE      cmd;                          /* The command */
19449  00  =3      BYTE      reportsToFollow;              /**/
19450  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
19451  00  =3      BYTE      currentOperatingStatus2;      
19452  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 330 

19453  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup1;                /**/
19454  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup2;                /**/
19455  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup3;                /**/
19456  00  =3  } ZW_METER_TBL_STATUS_REPORT_3BYTE_V2_FRAME;
19457  00  =3  
19458  00  =3  /************************************************************/
19459  00  =3  /* Meter Tbl Status Report 4byte V2 command class structs */
19460  00  =3  /************************************************************/
19461  00  =3  typedef struct _ZW_METER_TBL_STATUS_REPORT_4BYTE_V2_FRAME_
19462  00  =3  {
19463  00  =3      BYTE      cmdClass;                     /* The command class */
19464  00  =3      BYTE      cmd;                          /* The command */
19465  00  =3      BYTE      reportsToFollow;              /**/
19466  00  =3      BYTE      currentOperatingStatus1;      /* MSB */
19467  00  =3      BYTE      currentOperatingStatus2;      
19468  00  =3      BYTE      currentOperatingStatus3;      /* LSB */
19469  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup1;                /**/
19470  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup2;                /**/
19471  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup3;                /**/
19472  00  =3      VG_METER_TBL_STATUS_REPORT_V2_VG variantgroup4;                /**/
19473  00  =3  } ZW_METER_TBL_STATUS_REPORT_4BYTE_V2_FRAME;
19474  00  =3  
19475  00  =3  /************************************************************/
19476  00  =3  /* Meter Tbl Status Date Get V2 command class structs */    
19477  00  =3  /************************************************************/
19478  00  =3  typedef struct _ZW_METER_TBL_STATUS_DATE_GET_V2_FRAME_
19479  00  =3  {
19480  00  =3      BYTE      cmdClass;                     /* The command class */
19481  00  =3      BYTE      cmd;                          /* The command */
19482  00  =3      BYTE      maximumReports;               /**/
19483  00  =3      BYTE      startYear1;                   /* MSB */
19484  00  =3      BYTE      startYear2;                   /* LSB */
19485  00  =3      BYTE      startMonth;                   /**/
19486  00  =3      BYTE      startDay;                     /**/
19487  00  =3      BYTE      startHourLocalTime;           /**/
19488  00  =3      BYTE      startMinuteLocalTime;         /**/
19489  00  =3      BYTE      startSecondLocalTime;         /**/
19490  00  =3      BYTE      stopYear1;                    /* MSB */
19491  00  =3      BYTE      stopYear2;                    /* LSB */
19492  00  =3      BYTE      stopMonth;                    /**/
19493  00  =3      BYTE      stopDay;                      /**/
19494  00  =3      BYTE      stopHourLocalTime;            /**/
19495  00  =3      BYTE      stopMinuteLocalTime;          /**/
19496  00  =3      BYTE      stopSecondLocalTime;          /**/
19497  00  =3  } ZW_METER_TBL_STATUS_DATE_GET_V2_FRAME;
19498  00  =3  
19499  00  =3  /************************************************************/
19500  00  =3  /* Meter Tbl Status Depth Get V2 command class structs */   
19501  00  =3  /************************************************************/
19502  00  =3  typedef struct _ZW_METER_TBL_STATUS_DEPTH_GET_V2_FRAME_
19503  00  =3  {
19504  00  =3      BYTE      cmdClass;                     /* The command class */
19505  00  =3      BYTE      cmd;                          /* The command */
19506  00  =3      BYTE      statusEventLogDepth;          /**/
19507  00  =3  } ZW_METER_TBL_STATUS_DEPTH_GET_V2_FRAME;
19508  00  =3  
19509  00  =3  /************************************************************/
19510  00  =3  /* Meter Tbl Status Supported Get V2 command class structs */
19511  00  =3  /************************************************************/
19512  00  =3  typedef struct _ZW_METER_TBL_STATUS_SUPPORTED_GET_V2_FRAME_
19513  00  =3  {
19514  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 331 

19515  00  =3      BYTE      cmd;                          /* The command */
19516  00  =3  } ZW_METER_TBL_STATUS_SUPPORTED_GET_V2_FRAME;
19517  00  =3  
19518  00  =3  /************************************************************/
19519  00  =3  /* Meter Tbl Status Supported Report V2 command class structs */
19520  00  =3  /************************************************************/
19521  00  =3  typedef struct _ZW_METER_TBL_STATUS_SUPPORTED_REPORT_V2_FRAME_
19522  00  =3  {
19523  00  =3      BYTE      cmdClass;                     /* The command class */
19524  00  =3      BYTE      cmd;                          /* The command */
19525  00  =3      BYTE      supportedOperatingStatus1;    /* MSB */
19526  00  =3      BYTE      supportedOperatingStatus2;    
19527  00  =3      BYTE      supportedOperatingStatus3;    /* LSB */
19528  00  =3      BYTE      statusEventLogDepth;          /**/
19529  00  =3  } ZW_METER_TBL_STATUS_SUPPORTED_REPORT_V2_FRAME;
19530  00  =3  
19531  00  =3  /************************************************************/
19532  00  =3  /* Meter Tbl Current Data Get V2 command class structs */   
19533  00  =3  /************************************************************/
19534  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_GET_V2_FRAME_
19535  00  =3  {
19536  00  =3      BYTE      cmdClass;                     /* The command class */
19537  00  =3      BYTE      cmd;                          /* The command */
19538  00  =3      BYTE      datasetRequested1;            /* MSB */
19539  00  =3      BYTE      datasetRequested2;            
19540  00  =3      BYTE      datasetRequested3;            /* LSB */
19541  00  =3  } ZW_METER_TBL_CURRENT_DATA_GET_V2_FRAME;
19542  00  =3  
19543  00  =3  /************************************************************/
19544  00  =3  /* Meter Tbl Current Data Report V2 variant group structs */
19545  00  =3  /************************************************************/
19546  00  =3  typedef struct _VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG_
19547  00  =3  {
19548  00  =3      BYTE      properties1;                  /* masked byte */
19549  00  =3      BYTE      currentValue1;                /* MSB */
19550  00  =3      BYTE      currentValue2;                
19551  00  =3      BYTE      currentValue3;                
19552  00  =3      BYTE      currentValue4;                /* LSB */
19553  00  =3  } VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG;
19554  00  =3  
19555  00  =3  /************************************************************/
19556  00  =3  /* Meter Tbl Current Data Report 1byte V2 command class structs */
19557  00  =3  /************************************************************/
19558  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_1BYTE_V2_FRAME_
19559  00  =3  {
19560  00  =3      BYTE      cmdClass;                     /* The command class */
19561  00  =3      BYTE      cmd;                          /* The command */
19562  00  =3      BYTE      reportsToFollow;              /**/
19563  00  =3      BYTE      properties1;                  /* masked byte */
19564  00  =3      BYTE      dataset1;                     /* MSB */
19565  00  =3      BYTE      dataset2;                     
19566  00  =3      BYTE      dataset3;                     /* LSB */
19567  00  =3      BYTE      year1;                        /* MSB */
19568  00  =3      BYTE      year2;                        /* LSB */
19569  00  =3      BYTE      month;                        /**/
19570  00  =3      BYTE      day;                          /**/
19571  00  =3      BYTE      hourLocalTime;                /**/
19572  00  =3      BYTE      minuteLocalTime;              /**/
19573  00  =3      BYTE      secondLocalTime;              /**/
19574  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup1;                /**/
19575  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_1BYTE_V2_FRAME;
19576  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 332 

19577  00  =3  /************************************************************/
19578  00  =3  /* Meter Tbl Current Data Report 2byte V2 command class structs */
19579  00  =3  /************************************************************/
19580  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_2BYTE_V2_FRAME_
19581  00  =3  {
19582  00  =3      BYTE      cmdClass;                     /* The command class */
19583  00  =3      BYTE      cmd;                          /* The command */
19584  00  =3      BYTE      reportsToFollow;              /**/
19585  00  =3      BYTE      properties1;                  /* masked byte */
19586  00  =3      BYTE      dataset1;                     /* MSB */
19587  00  =3      BYTE      dataset2;                     
19588  00  =3      BYTE      dataset3;                     /* LSB */
19589  00  =3      BYTE      year1;                        /* MSB */
19590  00  =3      BYTE      year2;                        /* LSB */
19591  00  =3      BYTE      month;                        /**/
19592  00  =3      BYTE      day;                          /**/
19593  00  =3      BYTE      hourLocalTime;                /**/
19594  00  =3      BYTE      minuteLocalTime;              /**/
19595  00  =3      BYTE      secondLocalTime;              /**/
19596  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup1;                /**/
19597  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup2;                /**/
19598  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_2BYTE_V2_FRAME;
19599  00  =3  
19600  00  =3  /************************************************************/
19601  00  =3  /* Meter Tbl Current Data Report 3byte V2 command class structs */
19602  00  =3  /************************************************************/
19603  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_3BYTE_V2_FRAME_
19604  00  =3  {
19605  00  =3      BYTE      cmdClass;                     /* The command class */
19606  00  =3      BYTE      cmd;                          /* The command */
19607  00  =3      BYTE      reportsToFollow;              /**/
19608  00  =3      BYTE      properties1;                  /* masked byte */
19609  00  =3      BYTE      dataset1;                     /* MSB */
19610  00  =3      BYTE      dataset2;                     
19611  00  =3      BYTE      dataset3;                     /* LSB */
19612  00  =3      BYTE      year1;                        /* MSB */
19613  00  =3      BYTE      year2;                        /* LSB */
19614  00  =3      BYTE      month;                        /**/
19615  00  =3      BYTE      day;                          /**/
19616  00  =3      BYTE      hourLocalTime;                /**/
19617  00  =3      BYTE      minuteLocalTime;              /**/
19618  00  =3      BYTE      secondLocalTime;              /**/
19619  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup1;                /**/
19620  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup2;                /**/
19621  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup3;                /**/
19622  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_3BYTE_V2_FRAME;
19623  00  =3  
19624  00  =3  /************************************************************/
19625  00  =3  /* Meter Tbl Current Data Report 4byte V2 command class structs */
19626  00  =3  /************************************************************/
19627  00  =3  typedef struct _ZW_METER_TBL_CURRENT_DATA_REPORT_4BYTE_V2_FRAME_
19628  00  =3  {
19629  00  =3      BYTE      cmdClass;                     /* The command class */
19630  00  =3      BYTE      cmd;                          /* The command */
19631  00  =3      BYTE      reportsToFollow;              /**/
19632  00  =3      BYTE      properties1;                  /* masked byte */
19633  00  =3      BYTE      dataset1;                     /* MSB */
19634  00  =3      BYTE      dataset2;                     
19635  00  =3      BYTE      dataset3;                     /* LSB */
19636  00  =3      BYTE      year1;                        /* MSB */
19637  00  =3      BYTE      year2;                        /* LSB */
19638  00  =3      BYTE      month;                        /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 333 

19639  00  =3      BYTE      day;                          /**/
19640  00  =3      BYTE      hourLocalTime;                /**/
19641  00  =3      BYTE      minuteLocalTime;              /**/
19642  00  =3      BYTE      secondLocalTime;              /**/
19643  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup1;                /**/
19644  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup2;                /**/
19645  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup3;                /**/
19646  00  =3      VG_METER_TBL_CURRENT_DATA_REPORT_V2_VG variantgroup4;                /**/
19647  00  =3  } ZW_METER_TBL_CURRENT_DATA_REPORT_4BYTE_V2_FRAME;
19648  00  =3  
19649  00  =3  /************************************************************/
19650  00  =3  /* Meter Tbl Historical Data Get V2 command class structs */
19651  00  =3  /************************************************************/
19652  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_GET_V2_FRAME_
19653  00  =3  {
19654  00  =3      BYTE      cmdClass;                     /* The command class */
19655  00  =3      BYTE      cmd;                          /* The command */
19656  00  =3      BYTE      maximumReports;               /**/
19657  00  =3      BYTE      historicalDatasetRequested1;  /* MSB */
19658  00  =3      BYTE      historicalDatasetRequested2;  
19659  00  =3      BYTE      historicalDatasetRequested3;  /* LSB */
19660  00  =3      BYTE      startYear1;                   /* MSB */
19661  00  =3      BYTE      startYear2;                   /* LSB */
19662  00  =3      BYTE      startMonth;                   /**/
19663  00  =3      BYTE      startDay;                     /**/
19664  00  =3      BYTE      startHourLocalTime;           /**/
19665  00  =3      BYTE      startMinuteLocalTime;         /**/
19666  00  =3      BYTE      startSecondLocalTime;         /**/
19667  00  =3      BYTE      stopYear1;                    /* MSB */
19668  00  =3      BYTE      stopYear2;                    /* LSB */
19669  00  =3      BYTE      stopMonth;                    /**/
19670  00  =3      BYTE      stopDay;                      /**/
19671  00  =3      BYTE      stopHourLocalTime;            /**/
19672  00  =3      BYTE      stopMinuteLocalTime;          /**/
19673  00  =3      BYTE      stopSecondLocalTime;          /**/
19674  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_GET_V2_FRAME;
19675  00  =3  
19676  00  =3  /************************************************************/
19677  00  =3  /* Meter Tbl Historical Data Report V2 variant group structs */
19678  00  =3  /************************************************************/
19679  00  =3  typedef struct _VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG_
19680  00  =3  {
19681  00  =3      BYTE      properties1;                  /* masked byte */
19682  00  =3      BYTE      historicalValue1;             /* MSB */
19683  00  =3      BYTE      historicalValue2;             
19684  00  =3      BYTE      historicalValue3;             
19685  00  =3      BYTE      historicalValue4;             /* LSB */
19686  00  =3  } VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG;
19687  00  =3  
19688  00  =3  /************************************************************/
19689  00  =3  /* Meter Tbl Historical Data Report 1byte V2 command class structs */
19690  00  =3  /************************************************************/
19691  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_1BYTE_V2_FRAME_
19692  00  =3  {
19693  00  =3      BYTE      cmdClass;                     /* The command class */
19694  00  =3      BYTE      cmd;                          /* The command */
19695  00  =3      BYTE      reportsToFollow;              /**/
19696  00  =3      BYTE      properties1;                  /* masked byte */
19697  00  =3      BYTE      dataset1;                     /* MSB */
19698  00  =3      BYTE      dataset2;                     
19699  00  =3      BYTE      dataset3;                     /* LSB */
19700  00  =3      BYTE      year1;                        /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 334 

19701  00  =3      BYTE      year2;                        /* LSB */
19702  00  =3      BYTE      month;                        /**/
19703  00  =3      BYTE      day;                          /**/
19704  00  =3      BYTE      hourLocalTime;                /**/
19705  00  =3      BYTE      minuteLocalTime;              /**/
19706  00  =3      BYTE      secondLocalTime;              /**/
19707  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup1;                /**/
19708  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_1BYTE_V2_FRAME;
19709  00  =3  
19710  00  =3  /************************************************************/
19711  00  =3  /* Meter Tbl Historical Data Report 2byte V2 command class structs */
19712  00  =3  /************************************************************/
19713  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_2BYTE_V2_FRAME_
19714  00  =3  {
19715  00  =3      BYTE      cmdClass;                     /* The command class */
19716  00  =3      BYTE      cmd;                          /* The command */
19717  00  =3      BYTE      reportsToFollow;              /**/
19718  00  =3      BYTE      properties1;                  /* masked byte */
19719  00  =3      BYTE      dataset1;                     /* MSB */
19720  00  =3      BYTE      dataset2;                     
19721  00  =3      BYTE      dataset3;                     /* LSB */
19722  00  =3      BYTE      year1;                        /* MSB */
19723  00  =3      BYTE      year2;                        /* LSB */
19724  00  =3      BYTE      month;                        /**/
19725  00  =3      BYTE      day;                          /**/
19726  00  =3      BYTE      hourLocalTime;                /**/
19727  00  =3      BYTE      minuteLocalTime;              /**/
19728  00  =3      BYTE      secondLocalTime;              /**/
19729  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup1;                /**/
19730  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup2;                /**/
19731  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_2BYTE_V2_FRAME;
19732  00  =3  
19733  00  =3  /************************************************************/
19734  00  =3  /* Meter Tbl Historical Data Report 3byte V2 command class structs */
19735  00  =3  /************************************************************/
19736  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_3BYTE_V2_FRAME_
19737  00  =3  {
19738  00  =3      BYTE      cmdClass;                     /* The command class */
19739  00  =3      BYTE      cmd;                          /* The command */
19740  00  =3      BYTE      reportsToFollow;              /**/
19741  00  =3      BYTE      properties1;                  /* masked byte */
19742  00  =3      BYTE      dataset1;                     /* MSB */
19743  00  =3      BYTE      dataset2;                     
19744  00  =3      BYTE      dataset3;                     /* LSB */
19745  00  =3      BYTE      year1;                        /* MSB */
19746  00  =3      BYTE      year2;                        /* LSB */
19747  00  =3      BYTE      month;                        /**/
19748  00  =3      BYTE      day;                          /**/
19749  00  =3      BYTE      hourLocalTime;                /**/
19750  00  =3      BYTE      minuteLocalTime;              /**/
19751  00  =3      BYTE      secondLocalTime;              /**/
19752  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup1;                /**/
19753  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup2;                /**/
19754  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup3;                /**/
19755  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_3BYTE_V2_FRAME;
19756  00  =3  
19757  00  =3  /************************************************************/
19758  00  =3  /* Meter Tbl Historical Data Report 4byte V2 command class structs */
19759  00  =3  /************************************************************/
19760  00  =3  typedef struct _ZW_METER_TBL_HISTORICAL_DATA_REPORT_4BYTE_V2_FRAME_
19761  00  =3  {
19762  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 335 

19763  00  =3      BYTE      cmd;                          /* The command */
19764  00  =3      BYTE      reportsToFollow;              /**/
19765  00  =3      BYTE      properties1;                  /* masked byte */
19766  00  =3      BYTE      dataset1;                     /* MSB */
19767  00  =3      BYTE      dataset2;                     
19768  00  =3      BYTE      dataset3;                     /* LSB */
19769  00  =3      BYTE      year1;                        /* MSB */
19770  00  =3      BYTE      year2;                        /* LSB */
19771  00  =3      BYTE      month;                        /**/
19772  00  =3      BYTE      day;                          /**/
19773  00  =3      BYTE      hourLocalTime;                /**/
19774  00  =3      BYTE      minuteLocalTime;              /**/
19775  00  =3      BYTE      secondLocalTime;              /**/
19776  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup1;                /**/
19777  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup2;                /**/
19778  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup3;                /**/
19779  00  =3      VG_METER_TBL_HISTORICAL_DATA_REPORT_V2_VG variantgroup4;                /**/
19780  00  =3  } ZW_METER_TBL_HISTORICAL_DATA_REPORT_4BYTE_V2_FRAME;
19781  00  =3  
19782  00  =3  /************************************************************/
19783  00  =3  /* Meter Tbl Report V2 command class structs */             
19784  00  =3  /************************************************************/
19785  00  =3  typedef struct _ZW_METER_TBL_REPORT_V2_FRAME_
19786  00  =3  {
19787  00  =3      BYTE      cmdClass;                     /* The command class */
19788  00  =3      BYTE      cmd;                          /* The command */
19789  00  =3      BYTE      properties1;                  /* masked byte */
19790  00  =3      BYTE      properties2;                  /* masked byte */
19791  00  =3      BYTE      datasetSupported1;            /* MSB */
19792  00  =3      BYTE      datasetSupported2;            
19793  00  =3      BYTE      datasetSupported3;            /* LSB */
19794  00  =3      BYTE      datasetHistorySupported1;     /* MSB */
19795  00  =3      BYTE      datasetHistorySupported2;     
19796  00  =3      BYTE      datasetHistorySupported3;     /* LSB */
19797  00  =3      BYTE      dataHistorySupported1;        /* MSB */
19798  00  =3      BYTE      dataHistorySupported2;        
19799  00  =3      BYTE      dataHistorySupported3;        /* LSB */
19800  00  =3  } ZW_METER_TBL_REPORT_V2_FRAME;
19801  00  =3  
19802  00  =3  /************************************************************/
19803  00  =3  /* Meter Tbl Table Capability Get V2 command class structs */
19804  00  =3  /************************************************************/
19805  00  =3  typedef struct _ZW_METER_TBL_TABLE_CAPABILITY_GET_V2_FRAME_
19806  00  =3  {
19807  00  =3      BYTE      cmdClass;                     /* The command class */
19808  00  =3      BYTE      cmd;                          /* The command */
19809  00  =3  } ZW_METER_TBL_TABLE_CAPABILITY_GET_V2_FRAME;
19810  00  =3  
19811  00  =3  /************************************************************/
19812  00  =3  /* Meter Tbl Table Id Get V2 command class structs */       
19813  00  =3  /************************************************************/
19814  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_GET_V2_FRAME_
19815  00  =3  {
19816  00  =3      BYTE      cmdClass;                     /* The command class */
19817  00  =3      BYTE      cmd;                          /* The command */
19818  00  =3  } ZW_METER_TBL_TABLE_ID_GET_V2_FRAME;
19819  00  =3  
19820  00  =3  /************************************************************/
19821  00  =3  /* Meter Tbl Table Id Report 1byte V2 command class structs */
19822  00  =3  /************************************************************/
19823  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_1BYTE_V2_FRAME_
19824  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 336 

19825  00  =3      BYTE      cmdClass;                     /* The command class */
19826  00  =3      BYTE      cmd;                          /* The command */
19827  00  =3      BYTE      properties1;                  /* masked byte */
19828  00  =3      BYTE      meterIdCharacter1;            
19829  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_1BYTE_V2_FRAME;
19830  00  =3  
19831  00  =3  /************************************************************/
19832  00  =3  /* Meter Tbl Table Id Report 2byte V2 command class structs */
19833  00  =3  /************************************************************/
19834  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_2BYTE_V2_FRAME_
19835  00  =3  {
19836  00  =3      BYTE      cmdClass;                     /* The command class */
19837  00  =3      BYTE      cmd;                          /* The command */
19838  00  =3      BYTE      properties1;                  /* masked byte */
19839  00  =3      BYTE      meterIdCharacter1;            /* MSB */
19840  00  =3      BYTE      meterIdCharacter2;            /* LSB */
19841  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_2BYTE_V2_FRAME;
19842  00  =3  
19843  00  =3  /************************************************************/
19844  00  =3  /* Meter Tbl Table Id Report 3byte V2 command class structs */
19845  00  =3  /************************************************************/
19846  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_3BYTE_V2_FRAME_
19847  00  =3  {
19848  00  =3      BYTE      cmdClass;                     /* The command class */
19849  00  =3      BYTE      cmd;                          /* The command */
19850  00  =3      BYTE      properties1;                  /* masked byte */
19851  00  =3      BYTE      meterIdCharacter1;            /* MSB */
19852  00  =3      BYTE      meterIdCharacter2;            
19853  00  =3      BYTE      meterIdCharacter3;            /* LSB */
19854  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_3BYTE_V2_FRAME;
19855  00  =3  
19856  00  =3  /************************************************************/
19857  00  =3  /* Meter Tbl Table Id Report 4byte V2 command class structs */
19858  00  =3  /************************************************************/
19859  00  =3  typedef struct _ZW_METER_TBL_TABLE_ID_REPORT_4BYTE_V2_FRAME_
19860  00  =3  {
19861  00  =3      BYTE      cmdClass;                     /* The command class */
19862  00  =3      BYTE      cmd;                          /* The command */
19863  00  =3      BYTE      properties1;                  /* masked byte */
19864  00  =3      BYTE      meterIdCharacter1;            /* MSB */
19865  00  =3      BYTE      meterIdCharacter2;            
19866  00  =3      BYTE      meterIdCharacter3;            
19867  00  =3      BYTE      meterIdCharacter4;            /* LSB */
19868  00  =3  } ZW_METER_TBL_TABLE_ID_REPORT_4BYTE_V2_FRAME;
19869  00  =3  
19870  00  =3  /************************************************************/
19871  00  =3  /* Meter Tbl Table Point Adm No Get V2 command class structs */
19872  00  =3  /************************************************************/
19873  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_GET_V2_FRAME_
19874  00  =3  {
19875  00  =3      BYTE      cmdClass;                     /* The command class */
19876  00  =3      BYTE      cmd;                          /* The command */
19877  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_GET_V2_FRAME;
19878  00  =3  
19879  00  =3  /************************************************************/
19880  00  =3  /* Meter Tbl Table Point Adm No Report 1byte V2 command class structs */
19881  00  =3  /************************************************************/
19882  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_1BYTE_V2_FRAME_
19883  00  =3  {
19884  00  =3      BYTE      cmdClass;                     /* The command class */
19885  00  =3      BYTE      cmd;                          /* The command */
19886  00  =3      BYTE      properties1;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 337 

19887  00  =3      BYTE      meterPointAdmNumberCharacter1;
19888  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_1BYTE_V2_FRAME;
19889  00  =3  
19890  00  =3  /************************************************************/
19891  00  =3  /* Meter Tbl Table Point Adm No Report 2byte V2 command class structs */
19892  00  =3  /************************************************************/
19893  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_2BYTE_V2_FRAME_
19894  00  =3  {
19895  00  =3      BYTE      cmdClass;                     /* The command class */
19896  00  =3      BYTE      cmd;                          /* The command */
19897  00  =3      BYTE      properties1;                  /* masked byte */
19898  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
19899  00  =3      BYTE      meterPointAdmNumberCharacter2;/* LSB */
19900  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_2BYTE_V2_FRAME;
19901  00  =3  
19902  00  =3  /************************************************************/
19903  00  =3  /* Meter Tbl Table Point Adm No Report 3byte V2 command class structs */
19904  00  =3  /************************************************************/
19905  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_3BYTE_V2_FRAME_
19906  00  =3  {
19907  00  =3      BYTE      cmdClass;                     /* The command class */
19908  00  =3      BYTE      cmd;                          /* The command */
19909  00  =3      BYTE      properties1;                  /* masked byte */
19910  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
19911  00  =3      BYTE      meterPointAdmNumberCharacter2;
19912  00  =3      BYTE      meterPointAdmNumberCharacter3;/* LSB */
19913  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_3BYTE_V2_FRAME;
19914  00  =3  
19915  00  =3  /************************************************************/
19916  00  =3  /* Meter Tbl Table Point Adm No Report 4byte V2 command class structs */
19917  00  =3  /************************************************************/
19918  00  =3  typedef struct _ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_4BYTE_V2_FRAME_
19919  00  =3  {
19920  00  =3      BYTE      cmdClass;                     /* The command class */
19921  00  =3      BYTE      cmd;                          /* The command */
19922  00  =3      BYTE      properties1;                  /* masked byte */
19923  00  =3      BYTE      meterPointAdmNumberCharacter1;/* MSB */
19924  00  =3      BYTE      meterPointAdmNumberCharacter2;
19925  00  =3      BYTE      meterPointAdmNumberCharacter3;
19926  00  =3      BYTE      meterPointAdmNumberCharacter4;/* LSB */
19927  00  =3  } ZW_METER_TBL_TABLE_POINT_ADM_NO_REPORT_4BYTE_V2_FRAME;
19928  00  =3  
19929  00  =3  /************************************************************/
19930  00  =3  /* Meter Tbl Push Configuration Get command class structs */
19931  00  =3  /************************************************************/
19932  00  =3  typedef struct _ZW_METER_TBL_PUSH_CONFIGURATION_GET_FRAME_
19933  00  =3  {
19934  00  =3      BYTE      cmdClass;                     /* The command class */
19935  00  =3      BYTE      cmd;                          /* The command */
19936  00  =3  } ZW_METER_TBL_PUSH_CONFIGURATION_GET_FRAME;
19937  00  =3  
19938  00  =3  /************************************************************/
19939  00  =3  /* Meter Tbl Push Configuration Report command class structs */
19940  00  =3  /************************************************************/
19941  00  =3  typedef struct _ZW_METER_TBL_PUSH_CONFIGURATION_REPORT_FRAME_
19942  00  =3  {
19943  00  =3      BYTE      cmdClass;                     /* The command class */
19944  00  =3      BYTE      cmd;                          /* The command */
19945  00  =3      BYTE      properties1;                  /* masked byte */
19946  00  =3      BYTE      pushDataset1;                 /* MSB */
19947  00  =3      BYTE      pushDataset2;                 
19948  00  =3      BYTE      pushDataset3;                 /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 338 

19949  00  =3      BYTE      intervalMonths;               /**/
19950  00  =3      BYTE      intervalDays;                 /**/
19951  00  =3      BYTE      intervalHours;                /**/
19952  00  =3      BYTE      intervalMinutes;              /**/
19953  00  =3      BYTE      pushNodeId;                   /**/
19954  00  =3  } ZW_METER_TBL_PUSH_CONFIGURATION_REPORT_FRAME;
19955  00  =3  
19956  00  =3  /************************************************************/
19957  00  =3  /* Meter Tbl Push Configuration Set command class structs */
19958  00  =3  /************************************************************/
19959  00  =3  typedef struct _ZW_METER_TBL_PUSH_CONFIGURATION_SET_FRAME_
19960  00  =3  {
19961  00  =3      BYTE      cmdClass;                     /* The command class */
19962  00  =3      BYTE      cmd;                          /* The command */
19963  00  =3      BYTE      properties1;                  /* masked byte */
19964  00  =3      BYTE      pushDataset1;                 /* MSB */
19965  00  =3      BYTE      pushDataset2;                 
19966  00  =3      BYTE      pushDataset3;                 /* LSB */
19967  00  =3      BYTE      intervalMonths;               /**/
19968  00  =3      BYTE      intervalDays;                 /**/
19969  00  =3      BYTE      intervalHours;                /**/
19970  00  =3      BYTE      intervalMinutes;              /**/
19971  00  =3      BYTE      pushNodeId;                   /**/
19972  00  =3  } ZW_METER_TBL_PUSH_CONFIGURATION_SET_FRAME;
19973  00  =3  
19974  00  =3  /************************************************************/
19975  00  =3  /* Meter Get command class structs */                       
19976  00  =3  /************************************************************/
19977  00  =3  typedef struct _ZW_METER_GET_FRAME_
19978  00  =3  {
19979  00  =3      BYTE      cmdClass;                     /* The command class */
19980  00  =3      BYTE      cmd;                          /* The command */
19981  00  =3  } ZW_METER_GET_FRAME;
19982  00  =3  
19983  00  =3  /************************************************************/
19984  00  =3  /* Meter Report 1byte command class structs */              
19985  00  =3  /************************************************************/
19986  00  =3  typedef struct _ZW_METER_REPORT_1BYTE_FRAME_
19987  00  =3  {
19988  00  =3      BYTE      cmdClass;                     /* The command class */
19989  00  =3      BYTE      cmd;                          /* The command */
19990  00  =3      BYTE      meterType;                    /**/
19991  00  =3      BYTE      properties1;                  /* masked byte */
19992  00  =3      BYTE      meterValue1;                  
19993  00  =3  } ZW_METER_REPORT_1BYTE_FRAME;
19994  00  =3  
19995  00  =3  /************************************************************/
19996  00  =3  /* Meter Report 2byte command class structs */              
19997  00  =3  /************************************************************/
19998  00  =3  typedef struct _ZW_METER_REPORT_2BYTE_FRAME_
19999  00  =3  {
20000  00  =3      BYTE      cmdClass;                     /* The command class */
20001  00  =3      BYTE      cmd;                          /* The command */
20002  00  =3      BYTE      meterType;                    /**/
20003  00  =3      BYTE      properties1;                  /* masked byte */
20004  00  =3      BYTE      meterValue1;                  /* MSB */
20005  00  =3      BYTE      meterValue2;                  /* LSB */
20006  00  =3  } ZW_METER_REPORT_2BYTE_FRAME;
20007  00  =3  
20008  00  =3  /************************************************************/
20009  00  =3  /* Meter Report 3byte command class structs */              
20010  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 339 

20011  00  =3  typedef struct _ZW_METER_REPORT_3BYTE_FRAME_
20012  00  =3  {
20013  00  =3      BYTE      cmdClass;                     /* The command class */
20014  00  =3      BYTE      cmd;                          /* The command */
20015  00  =3      BYTE      meterType;                    /**/
20016  00  =3      BYTE      properties1;                  /* masked byte */
20017  00  =3      BYTE      meterValue1;                  /* MSB */
20018  00  =3      BYTE      meterValue2;                  
20019  00  =3      BYTE      meterValue3;                  /* LSB */
20020  00  =3  } ZW_METER_REPORT_3BYTE_FRAME;
20021  00  =3  
20022  00  =3  /************************************************************/
20023  00  =3  /* Meter Report 4byte command class structs */              
20024  00  =3  /************************************************************/
20025  00  =3  typedef struct _ZW_METER_REPORT_4BYTE_FRAME_
20026  00  =3  {
20027  00  =3      BYTE      cmdClass;                     /* The command class */
20028  00  =3      BYTE      cmd;                          /* The command */
20029  00  =3      BYTE      meterType;                    /**/
20030  00  =3      BYTE      properties1;                  /* masked byte */
20031  00  =3      BYTE      meterValue1;                  /* MSB */
20032  00  =3      BYTE      meterValue2;                  
20033  00  =3      BYTE      meterValue3;                  
20034  00  =3      BYTE      meterValue4;                  /* LSB */
20035  00  =3  } ZW_METER_REPORT_4BYTE_FRAME;
20036  00  =3  
20037  00  =3  /************************************************************/
20038  00  =3  /* Meter Get V2 command class structs */                    
20039  00  =3  /************************************************************/
20040  00  =3  typedef struct _ZW_METER_GET_V2_FRAME_
20041  00  =3  {
20042  00  =3      BYTE      cmdClass;                     /* The command class */
20043  00  =3      BYTE      cmd;                          /* The command */
20044  00  =3      BYTE      properties1;                  /* masked byte */
20045  00  =3  } ZW_METER_GET_V2_FRAME;
20046  00  =3  
20047  00  =3  /************************************************************/
20048  00  =3  /* Meter Report 1byte V2 command class structs */           
20049  00  =3  /************************************************************/
20050  00  =3  typedef struct _ZW_METER_REPORT_1BYTE_V2_FRAME_
20051  00  =3  {
20052  00  =3      BYTE      cmdClass;                     /* The command class */
20053  00  =3      BYTE      cmd;                          /* The command */
20054  00  =3      BYTE      properties1;                  /* masked byte */
20055  00  =3      BYTE      properties2;                  /* masked byte */
20056  00  =3      BYTE      meterValue1;                  
20057  00  =3      BYTE      deltaTime1;                   /* MSB */
20058  00  =3      BYTE      deltaTime2;                   /* LSB */
20059  00  =3      BYTE      previousMeterValue1;          
20060  00  =3  } ZW_METER_REPORT_1BYTE_V2_FRAME;
20061  00  =3  
20062  00  =3  /************************************************************/
20063  00  =3  /* Meter Report 2byte V2 command class structs */           
20064  00  =3  /************************************************************/
20065  00  =3  typedef struct _ZW_METER_REPORT_2BYTE_V2_FRAME_
20066  00  =3  {
20067  00  =3      BYTE      cmdClass;                     /* The command class */
20068  00  =3      BYTE      cmd;                          /* The command */
20069  00  =3      BYTE      properties1;                  /* masked byte */
20070  00  =3      BYTE      properties2;                  /* masked byte */
20071  00  =3      BYTE      meterValue1;                  /* MSB */
20072  00  =3      BYTE      meterValue2;                  /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 340 

20073  00  =3      BYTE      deltaTime1;                   /* MSB */
20074  00  =3      BYTE      deltaTime2;                   /* LSB */
20075  00  =3      BYTE      previousMeterValue1;          /* MSB */
20076  00  =3      BYTE      previousMeterValue2;          /* LSB */
20077  00  =3  } ZW_METER_REPORT_2BYTE_V2_FRAME;
20078  00  =3  
20079  00  =3  /************************************************************/
20080  00  =3  /* Meter Report 3byte V2 command class structs */           
20081  00  =3  /************************************************************/
20082  00  =3  typedef struct _ZW_METER_REPORT_3BYTE_V2_FRAME_
20083  00  =3  {
20084  00  =3      BYTE      cmdClass;                     /* The command class */
20085  00  =3      BYTE      cmd;                          /* The command */
20086  00  =3      BYTE      properties1;                  /* masked byte */
20087  00  =3      BYTE      properties2;                  /* masked byte */
20088  00  =3      BYTE      meterValue1;                  /* MSB */
20089  00  =3      BYTE      meterValue2;                  
20090  00  =3      BYTE      meterValue3;                  /* LSB */
20091  00  =3      BYTE      deltaTime1;                   /* MSB */
20092  00  =3      BYTE      deltaTime2;                   /* LSB */
20093  00  =3      BYTE      previousMeterValue1;          /* MSB */
20094  00  =3      BYTE      previousMeterValue2;          
20095  00  =3      BYTE      previousMeterValue3;          /* LSB */
20096  00  =3  } ZW_METER_REPORT_3BYTE_V2_FRAME;
20097  00  =3  
20098  00  =3  /************************************************************/
20099  00  =3  /* Meter Report 4byte V2 command class structs */           
20100  00  =3  /************************************************************/
20101  00  =3  typedef struct _ZW_METER_REPORT_4BYTE_V2_FRAME_
20102  00  =3  {
20103  00  =3      BYTE      cmdClass;                     /* The command class */
20104  00  =3      BYTE      cmd;                          /* The command */
20105  00  =3      BYTE      properties1;                  /* masked byte */
20106  00  =3      BYTE      properties2;                  /* masked byte */
20107  00  =3      BYTE      meterValue1;                  /* MSB */
20108  00  =3      BYTE      meterValue2;                  
20109  00  =3      BYTE      meterValue3;                  
20110  00  =3      BYTE      meterValue4;                  /* LSB */
20111  00  =3      BYTE      deltaTime1;                   /* MSB */
20112  00  =3      BYTE      deltaTime2;                   /* LSB */
20113  00  =3      BYTE      previousMeterValue1;          /* MSB */
20114  00  =3      BYTE      previousMeterValue2;          
20115  00  =3      BYTE      previousMeterValue3;          
20116  00  =3      BYTE      previousMeterValue4;          /* LSB */
20117  00  =3  } ZW_METER_REPORT_4BYTE_V2_FRAME;
20118  00  =3  
20119  00  =3  /************************************************************/
20120  00  =3  /* Meter Reset V2 command class structs */                  
20121  00  =3  /************************************************************/
20122  00  =3  typedef struct _ZW_METER_RESET_V2_FRAME_
20123  00  =3  {
20124  00  =3      BYTE      cmdClass;                     /* The command class */
20125  00  =3      BYTE      cmd;                          /* The command */
20126  00  =3  } ZW_METER_RESET_V2_FRAME;
20127  00  =3  
20128  00  =3  /************************************************************/
20129  00  =3  /* Meter Supported Get V2 command class structs */          
20130  00  =3  /************************************************************/
20131  00  =3  typedef struct _ZW_METER_SUPPORTED_GET_V2_FRAME_
20132  00  =3  {
20133  00  =3      BYTE      cmdClass;                     /* The command class */
20134  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 341 

20135  00  =3  } ZW_METER_SUPPORTED_GET_V2_FRAME;
20136  00  =3  
20137  00  =3  /************************************************************/
20138  00  =3  /* Meter Supported Report V2 command class structs */       
20139  00  =3  /************************************************************/
20140  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_V2_FRAME_
20141  00  =3  {
20142  00  =3      BYTE      cmdClass;                     /* The command class */
20143  00  =3      BYTE      cmd;                          /* The command */
20144  00  =3      BYTE      properties1;                  /* masked byte */
20145  00  =3      BYTE      properties2;                  /* masked byte */
20146  00  =3  } ZW_METER_SUPPORTED_REPORT_V2_FRAME;
20147  00  =3  
20148  00  =3  /************************************************************/
20149  00  =3  /* Meter Get V3 command class structs */                    
20150  00  =3  /************************************************************/
20151  00  =3  typedef struct _ZW_METER_GET_V3_FRAME_
20152  00  =3  {
20153  00  =3      BYTE      cmdClass;                     /* The command class */
20154  00  =3      BYTE      cmd;                          /* The command */
20155  00  =3      BYTE      properties1;                  /* masked byte */
20156  00  =3  } ZW_METER_GET_V3_FRAME;
20157  00  =3  
20158  00  =3  /************************************************************/
20159  00  =3  /* Meter Report 1byte V3 command class structs */           
20160  00  =3  /************************************************************/
20161  00  =3  typedef struct _ZW_METER_REPORT_1BYTE_V3_FRAME_
20162  00  =3  {
20163  00  =3      BYTE      cmdClass;                     /* The command class */
20164  00  =3      BYTE      cmd;                          /* The command */
20165  00  =3      BYTE      properties1;                  /* masked byte */
20166  00  =3      BYTE      properties2;                  /* masked byte */
20167  00  =3      BYTE      meterValue1;                  
20168  00  =3      BYTE      deltaTime1;                   /* MSB */
20169  00  =3      BYTE      deltaTime2;                   /* LSB */
20170  00  =3      BYTE      previousMeterValue1;          
20171  00  =3  } ZW_METER_REPORT_1BYTE_V3_FRAME;
20172  00  =3  
20173  00  =3  /************************************************************/
20174  00  =3  /* Meter Report 2byte V3 command class structs */           
20175  00  =3  /************************************************************/
20176  00  =3  typedef struct _ZW_METER_REPORT_2BYTE_V3_FRAME_
20177  00  =3  {
20178  00  =3      BYTE      cmdClass;                     /* The command class */
20179  00  =3      BYTE      cmd;                          /* The command */
20180  00  =3      BYTE      properties1;                  /* masked byte */
20181  00  =3      BYTE      properties2;                  /* masked byte */
20182  00  =3      BYTE      meterValue1;                  /* MSB */
20183  00  =3      BYTE      meterValue2;                  /* LSB */
20184  00  =3      BYTE      deltaTime1;                   /* MSB */
20185  00  =3      BYTE      deltaTime2;                   /* LSB */
20186  00  =3      BYTE      previousMeterValue1;          /* MSB */
20187  00  =3      BYTE      previousMeterValue2;          /* LSB */
20188  00  =3  } ZW_METER_REPORT_2BYTE_V3_FRAME;
20189  00  =3  
20190  00  =3  /************************************************************/
20191  00  =3  /* Meter Report 3byte V3 command class structs */           
20192  00  =3  /************************************************************/
20193  00  =3  typedef struct _ZW_METER_REPORT_3BYTE_V3_FRAME_
20194  00  =3  {
20195  00  =3      BYTE      cmdClass;                     /* The command class */
20196  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 342 

20197  00  =3      BYTE      properties1;                  /* masked byte */
20198  00  =3      BYTE      properties2;                  /* masked byte */
20199  00  =3      BYTE      meterValue1;                  /* MSB */
20200  00  =3      BYTE      meterValue2;                  
20201  00  =3      BYTE      meterValue3;                  /* LSB */
20202  00  =3      BYTE      deltaTime1;                   /* MSB */
20203  00  =3      BYTE      deltaTime2;                   /* LSB */
20204  00  =3      BYTE      previousMeterValue1;          /* MSB */
20205  00  =3      BYTE      previousMeterValue2;          
20206  00  =3      BYTE      previousMeterValue3;          /* LSB */
20207  00  =3  } ZW_METER_REPORT_3BYTE_V3_FRAME;
20208  00  =3  
20209  00  =3  /************************************************************/
20210  00  =3  /* Meter Report 4byte V3 command class structs */           
20211  00  =3  /************************************************************/
20212  00  =3  typedef struct _ZW_METER_REPORT_4BYTE_V3_FRAME_
20213  00  =3  {
20214  00  =3      BYTE      cmdClass;                     /* The command class */
20215  00  =3      BYTE      cmd;                          /* The command */
20216  00  =3      BYTE      properties1;                  /* masked byte */
20217  00  =3      BYTE      properties2;                  /* masked byte */
20218  00  =3      BYTE      meterValue1;                  /* MSB */
20219  00  =3      BYTE      meterValue2;                  
20220  00  =3      BYTE      meterValue3;                  
20221  00  =3      BYTE      meterValue4;                  /* LSB */
20222  00  =3      BYTE      deltaTime1;                   /* MSB */
20223  00  =3      BYTE      deltaTime2;                   /* LSB */
20224  00  =3      BYTE      previousMeterValue1;          /* MSB */
20225  00  =3      BYTE      previousMeterValue2;          
20226  00  =3      BYTE      previousMeterValue3;          
20227  00  =3      BYTE      previousMeterValue4;          /* LSB */
20228  00  =3  } ZW_METER_REPORT_4BYTE_V3_FRAME;
20229  00  =3  
20230  00  =3  /************************************************************/
20231  00  =3  /* Meter Reset V3 command class structs */                  
20232  00  =3  /************************************************************/
20233  00  =3  typedef struct _ZW_METER_RESET_V3_FRAME_
20234  00  =3  {
20235  00  =3      BYTE      cmdClass;                     /* The command class */
20236  00  =3      BYTE      cmd;                          /* The command */
20237  00  =3  } ZW_METER_RESET_V3_FRAME;
20238  00  =3  
20239  00  =3  /************************************************************/
20240  00  =3  /* Meter Supported Get V3 command class structs */          
20241  00  =3  /************************************************************/
20242  00  =3  typedef struct _ZW_METER_SUPPORTED_GET_V3_FRAME_
20243  00  =3  {
20244  00  =3      BYTE      cmdClass;                     /* The command class */
20245  00  =3      BYTE      cmd;                          /* The command */
20246  00  =3  } ZW_METER_SUPPORTED_GET_V3_FRAME;
20247  00  =3  
20248  00  =3  /************************************************************/
20249  00  =3  /* Meter Supported Report V3 command class structs */       
20250  00  =3  /************************************************************/
20251  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_V3_FRAME_
20252  00  =3  {
20253  00  =3      BYTE      cmdClass;                     /* The command class */
20254  00  =3      BYTE      cmd;                          /* The command */
20255  00  =3      BYTE      properties1;                  /* masked byte */
20256  00  =3      BYTE      scaleSupported;               /**/
20257  00  =3  } ZW_METER_SUPPORTED_REPORT_V3_FRAME;
20258  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 343 

20259  00  =3  /************************************************************/
20260  00  =3  /* Meter Get V4 command class structs */                    
20261  00  =3  /************************************************************/
20262  00  =3  typedef struct _ZW_METER_GET_V4_FRAME_
20263  00  =3  {
20264  00  =3      BYTE      cmdClass;                     /* The command class */
20265  00  =3      BYTE      cmd;                          /* The command */
20266  00  =3      BYTE      properties1;                  /* masked byte */
20267  00  =3      BYTE      scale2;                       /**/
20268  00  =3  } ZW_METER_GET_V4_FRAME;
20269  00  =3  
20270  00  =3  /************************************************************/
20271  00  =3  /* Meter Report 1byte V4 command class structs */           
20272  00  =3  /************************************************************/
20273  00  =3  typedef struct _ZW_METER_REPORT_1BYTE_V4_FRAME_
20274  00  =3  {
20275  00  =3      BYTE      cmdClass;                     /* The command class */
20276  00  =3      BYTE      cmd;                          /* The command */
20277  00  =3      BYTE      properties1;                  /* masked byte */
20278  00  =3      BYTE      properties2;                  /* masked byte */
20279  00  =3      BYTE      meterValue1;                  
20280  00  =3      BYTE      deltaTime1;                   /* MSB */
20281  00  =3      BYTE      deltaTime2;                   /* LSB */
20282  00  =3      BYTE      previousMeterValue1;          
20283  00  =3      BYTE      scale2;                       /**/
20284  00  =3  } ZW_METER_REPORT_1BYTE_V4_FRAME;
20285  00  =3  
20286  00  =3  /************************************************************/
20287  00  =3  /* Meter Report 2byte V4 command class structs */           
20288  00  =3  /************************************************************/
20289  00  =3  typedef struct _ZW_METER_REPORT_2BYTE_V4_FRAME_
20290  00  =3  {
20291  00  =3      BYTE      cmdClass;                     /* The command class */
20292  00  =3      BYTE      cmd;                          /* The command */
20293  00  =3      BYTE      properties1;                  /* masked byte */
20294  00  =3      BYTE      properties2;                  /* masked byte */
20295  00  =3      BYTE      meterValue1;                  /* MSB */
20296  00  =3      BYTE      meterValue2;                  /* LSB */
20297  00  =3      BYTE      deltaTime1;                   /* MSB */
20298  00  =3      BYTE      deltaTime2;                   /* LSB */
20299  00  =3      BYTE      previousMeterValue1;          /* MSB */
20300  00  =3      BYTE      previousMeterValue2;          /* LSB */
20301  00  =3      BYTE      scale2;                       /**/
20302  00  =3  } ZW_METER_REPORT_2BYTE_V4_FRAME;
20303  00  =3  
20304  00  =3  /************************************************************/
20305  00  =3  /* Meter Report 3byte V4 command class structs */           
20306  00  =3  /************************************************************/
20307  00  =3  typedef struct _ZW_METER_REPORT_3BYTE_V4_FRAME_
20308  00  =3  {
20309  00  =3      BYTE      cmdClass;                     /* The command class */
20310  00  =3      BYTE      cmd;                          /* The command */
20311  00  =3      BYTE      properties1;                  /* masked byte */
20312  00  =3      BYTE      properties2;                  /* masked byte */
20313  00  =3      BYTE      meterValue1;                  /* MSB */
20314  00  =3      BYTE      meterValue2;                  
20315  00  =3      BYTE      meterValue3;                  /* LSB */
20316  00  =3      BYTE      deltaTime1;                   /* MSB */
20317  00  =3      BYTE      deltaTime2;                   /* LSB */
20318  00  =3      BYTE      previousMeterValue1;          /* MSB */
20319  00  =3      BYTE      previousMeterValue2;          
20320  00  =3      BYTE      previousMeterValue3;          /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 344 

20321  00  =3      BYTE      scale2;                       /**/
20322  00  =3  } ZW_METER_REPORT_3BYTE_V4_FRAME;
20323  00  =3  
20324  00  =3  /************************************************************/
20325  00  =3  /* Meter Report 4byte V4 command class structs */           
20326  00  =3  /************************************************************/
20327  00  =3  typedef struct _ZW_METER_REPORT_4BYTE_V4_FRAME_
20328  00  =3  {
20329  00  =3      BYTE      cmdClass;                     /* The command class */
20330  00  =3      BYTE      cmd;                          /* The command */
20331  00  =3      BYTE      properties1;                  /* masked byte */
20332  00  =3      BYTE      properties2;                  /* masked byte */
20333  00  =3      BYTE      meterValue1;                  /* MSB */
20334  00  =3      BYTE      meterValue2;                  
20335  00  =3      BYTE      meterValue3;                  
20336  00  =3      BYTE      meterValue4;                  /* LSB */
20337  00  =3      BYTE      deltaTime1;                   /* MSB */
20338  00  =3      BYTE      deltaTime2;                   /* LSB */
20339  00  =3      BYTE      previousMeterValue1;          /* MSB */
20340  00  =3      BYTE      previousMeterValue2;          
20341  00  =3      BYTE      previousMeterValue3;          
20342  00  =3      BYTE      previousMeterValue4;          /* LSB */
20343  00  =3      BYTE      scale2;                       /**/
20344  00  =3  } ZW_METER_REPORT_4BYTE_V4_FRAME;
20345  00  =3  
20346  00  =3  /************************************************************/
20347  00  =3  /* Meter Reset V4 command class structs */                  
20348  00  =3  /************************************************************/
20349  00  =3  typedef struct _ZW_METER_RESET_V4_FRAME_
20350  00  =3  {
20351  00  =3      BYTE      cmdClass;                     /* The command class */
20352  00  =3      BYTE      cmd;                          /* The command */
20353  00  =3  } ZW_METER_RESET_V4_FRAME;
20354  00  =3  
20355  00  =3  /************************************************************/
20356  00  =3  /* Meter Supported Get V4 command class structs */          
20357  00  =3  /************************************************************/
20358  00  =3  typedef struct _ZW_METER_SUPPORTED_GET_V4_FRAME_
20359  00  =3  {
20360  00  =3      BYTE      cmdClass;                     /* The command class */
20361  00  =3      BYTE      cmd;                          /* The command */
20362  00  =3  } ZW_METER_SUPPORTED_GET_V4_FRAME;
20363  00  =3  
20364  00  =3  /************************************************************/
20365  00  =3  /* Meter Supported Report 1byte V4 command class structs */ 
20366  00  =3  /************************************************************/
20367  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_1BYTE_V4_FRAME_
20368  00  =3  {
20369  00  =3      BYTE      cmdClass;                     /* The command class */
20370  00  =3      BYTE      cmd;                          /* The command */
20371  00  =3      BYTE      properties1;                  /* masked byte */
20372  00  =3      BYTE      properties2;                  /* masked byte */
20373  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20374  00  =3      BYTE      scaleSupported1;              
20375  00  =3  } ZW_METER_SUPPORTED_REPORT_1BYTE_V4_FRAME;
20376  00  =3  
20377  00  =3  /************************************************************/
20378  00  =3  /* Meter Supported Report 2byte V4 command class structs */ 
20379  00  =3  /************************************************************/
20380  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_2BYTE_V4_FRAME_
20381  00  =3  {
20382  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 345 

20383  00  =3      BYTE      cmd;                          /* The command */
20384  00  =3      BYTE      properties1;                  /* masked byte */
20385  00  =3      BYTE      properties2;                  /* masked byte */
20386  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20387  00  =3      BYTE      scaleSupported1;              /* MSB */
20388  00  =3      BYTE      scaleSupported2;              /* LSB */
20389  00  =3  } ZW_METER_SUPPORTED_REPORT_2BYTE_V4_FRAME;
20390  00  =3  
20391  00  =3  /************************************************************/
20392  00  =3  /* Meter Supported Report 3byte V4 command class structs */ 
20393  00  =3  /************************************************************/
20394  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_3BYTE_V4_FRAME_
20395  00  =3  {
20396  00  =3      BYTE      cmdClass;                     /* The command class */
20397  00  =3      BYTE      cmd;                          /* The command */
20398  00  =3      BYTE      properties1;                  /* masked byte */
20399  00  =3      BYTE      properties2;                  /* masked byte */
20400  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20401  00  =3      BYTE      scaleSupported1;              /* MSB */
20402  00  =3      BYTE      scaleSupported2;              
20403  00  =3      BYTE      scaleSupported3;              /* LSB */
20404  00  =3  } ZW_METER_SUPPORTED_REPORT_3BYTE_V4_FRAME;
20405  00  =3  
20406  00  =3  /************************************************************/
20407  00  =3  /* Meter Supported Report 4byte V4 command class structs */ 
20408  00  =3  /************************************************************/
20409  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_4BYTE_V4_FRAME_
20410  00  =3  {
20411  00  =3      BYTE      cmdClass;                     /* The command class */
20412  00  =3      BYTE      cmd;                          /* The command */
20413  00  =3      BYTE      properties1;                  /* masked byte */
20414  00  =3      BYTE      properties2;                  /* masked byte */
20415  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20416  00  =3      BYTE      scaleSupported1;              /* MSB */
20417  00  =3      BYTE      scaleSupported2;              
20418  00  =3      BYTE      scaleSupported3;              
20419  00  =3      BYTE      scaleSupported4;              /* LSB */
20420  00  =3  } ZW_METER_SUPPORTED_REPORT_4BYTE_V4_FRAME;
20421  00  =3  
20422  00  =3  /************************************************************/
20423  00  =3  /* Meter Get V5 command class structs */                    
20424  00  =3  /************************************************************/
20425  00  =3  typedef struct _ZW_METER_GET_V5_FRAME_
20426  00  =3  {
20427  00  =3      BYTE      cmdClass;                     /* The command class */
20428  00  =3      BYTE      cmd;                          /* The command */
20429  00  =3      BYTE      properties1;                  /* masked byte */
20430  00  =3      BYTE      scale2;                       /**/
20431  00  =3  } ZW_METER_GET_V5_FRAME;
20432  00  =3  
20433  00  =3  /************************************************************/
20434  00  =3  /* Meter Report 1byte V5 command class structs */           
20435  00  =3  /************************************************************/
20436  00  =3  typedef struct _ZW_METER_REPORT_1BYTE_V5_FRAME_
20437  00  =3  {
20438  00  =3      BYTE      cmdClass;                     /* The command class */
20439  00  =3      BYTE      cmd;                          /* The command */
20440  00  =3      BYTE      properties1;                  /* masked byte */
20441  00  =3      BYTE      properties2;                  /* masked byte */
20442  00  =3      BYTE      meterValue1;                  
20443  00  =3      BYTE      deltaTime1;                   /* MSB */
20444  00  =3      BYTE      deltaTime2;                   /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 346 

20445  00  =3      BYTE      previousMeterValue1;          
20446  00  =3      BYTE      scale2;                       /**/
20447  00  =3  } ZW_METER_REPORT_1BYTE_V5_FRAME;
20448  00  =3  
20449  00  =3  /************************************************************/
20450  00  =3  /* Meter Report 2byte V5 command class structs */           
20451  00  =3  /************************************************************/
20452  00  =3  typedef struct _ZW_METER_REPORT_2BYTE_V5_FRAME_
20453  00  =3  {
20454  00  =3      BYTE      cmdClass;                     /* The command class */
20455  00  =3      BYTE      cmd;                          /* The command */
20456  00  =3      BYTE      properties1;                  /* masked byte */
20457  00  =3      BYTE      properties2;                  /* masked byte */
20458  00  =3      BYTE      meterValue1;                  /* MSB */
20459  00  =3      BYTE      meterValue2;                  /* LSB */
20460  00  =3      BYTE      deltaTime1;                   /* MSB */
20461  00  =3      BYTE      deltaTime2;                   /* LSB */
20462  00  =3      BYTE      previousMeterValue1;          /* MSB */
20463  00  =3      BYTE      previousMeterValue2;          /* LSB */
20464  00  =3      BYTE      scale2;                       /**/
20465  00  =3  } ZW_METER_REPORT_2BYTE_V5_FRAME;
20466  00  =3  
20467  00  =3  /************************************************************/
20468  00  =3  /* Meter Report 3byte V5 command class structs */           
20469  00  =3  /************************************************************/
20470  00  =3  typedef struct _ZW_METER_REPORT_3BYTE_V5_FRAME_
20471  00  =3  {
20472  00  =3      BYTE      cmdClass;                     /* The command class */
20473  00  =3      BYTE      cmd;                          /* The command */
20474  00  =3      BYTE      properties1;                  /* masked byte */
20475  00  =3      BYTE      properties2;                  /* masked byte */
20476  00  =3      BYTE      meterValue1;                  /* MSB */
20477  00  =3      BYTE      meterValue2;                  
20478  00  =3      BYTE      meterValue3;                  /* LSB */
20479  00  =3      BYTE      deltaTime1;                   /* MSB */
20480  00  =3      BYTE      deltaTime2;                   /* LSB */
20481  00  =3      BYTE      previousMeterValue1;          /* MSB */
20482  00  =3      BYTE      previousMeterValue2;          
20483  00  =3      BYTE      previousMeterValue3;          /* LSB */
20484  00  =3      BYTE      scale2;                       /**/
20485  00  =3  } ZW_METER_REPORT_3BYTE_V5_FRAME;
20486  00  =3  
20487  00  =3  /************************************************************/
20488  00  =3  /* Meter Report 4byte V5 command class structs */           
20489  00  =3  /************************************************************/
20490  00  =3  typedef struct _ZW_METER_REPORT_4BYTE_V5_FRAME_
20491  00  =3  {
20492  00  =3      BYTE      cmdClass;                     /* The command class */
20493  00  =3      BYTE      cmd;                          /* The command */
20494  00  =3      BYTE      properties1;                  /* masked byte */
20495  00  =3      BYTE      properties2;                  /* masked byte */
20496  00  =3      BYTE      meterValue1;                  /* MSB */
20497  00  =3      BYTE      meterValue2;                  
20498  00  =3      BYTE      meterValue3;                  
20499  00  =3      BYTE      meterValue4;                  /* LSB */
20500  00  =3      BYTE      deltaTime1;                   /* MSB */
20501  00  =3      BYTE      deltaTime2;                   /* LSB */
20502  00  =3      BYTE      previousMeterValue1;          /* MSB */
20503  00  =3      BYTE      previousMeterValue2;          
20504  00  =3      BYTE      previousMeterValue3;          
20505  00  =3      BYTE      previousMeterValue4;          /* LSB */
20506  00  =3      BYTE      scale2;                       /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 347 

20507  00  =3  } ZW_METER_REPORT_4BYTE_V5_FRAME;
20508  00  =3  
20509  00  =3  /************************************************************/
20510  00  =3  /* Meter Reset V5 command class structs */                  
20511  00  =3  /************************************************************/
20512  00  =3  typedef struct _ZW_METER_RESET_V5_FRAME_
20513  00  =3  {
20514  00  =3      BYTE      cmdClass;                     /* The command class */
20515  00  =3      BYTE      cmd;                          /* The command */
20516  00  =3  } ZW_METER_RESET_V5_FRAME;
20517  00  =3  
20518  00  =3  /************************************************************/
20519  00  =3  /* Meter Supported Get V5 command class structs */          
20520  00  =3  /************************************************************/
20521  00  =3  typedef struct _ZW_METER_SUPPORTED_GET_V5_FRAME_
20522  00  =3  {
20523  00  =3      BYTE      cmdClass;                     /* The command class */
20524  00  =3      BYTE      cmd;                          /* The command */
20525  00  =3  } ZW_METER_SUPPORTED_GET_V5_FRAME;
20526  00  =3  
20527  00  =3  /************************************************************/
20528  00  =3  /* Meter Supported Report 1byte V5 command class structs */ 
20529  00  =3  /************************************************************/
20530  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_1BYTE_V5_FRAME_
20531  00  =3  {
20532  00  =3      BYTE      cmdClass;                     /* The command class */
20533  00  =3      BYTE      cmd;                          /* The command */
20534  00  =3      BYTE      properties1;                  /* masked byte */
20535  00  =3      BYTE      properties2;                  /* masked byte */
20536  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20537  00  =3      BYTE      scaleSupported1;              
20538  00  =3  } ZW_METER_SUPPORTED_REPORT_1BYTE_V5_FRAME;
20539  00  =3  
20540  00  =3  /************************************************************/
20541  00  =3  /* Meter Supported Report 2byte V5 command class structs */ 
20542  00  =3  /************************************************************/
20543  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_2BYTE_V5_FRAME_
20544  00  =3  {
20545  00  =3      BYTE      cmdClass;                     /* The command class */
20546  00  =3      BYTE      cmd;                          /* The command */
20547  00  =3      BYTE      properties1;                  /* masked byte */
20548  00  =3      BYTE      properties2;                  /* masked byte */
20549  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20550  00  =3      BYTE      scaleSupported1;              /* MSB */
20551  00  =3      BYTE      scaleSupported2;              /* LSB */
20552  00  =3  } ZW_METER_SUPPORTED_REPORT_2BYTE_V5_FRAME;
20553  00  =3  
20554  00  =3  /************************************************************/
20555  00  =3  /* Meter Supported Report 3byte V5 command class structs */ 
20556  00  =3  /************************************************************/
20557  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_3BYTE_V5_FRAME_
20558  00  =3  {
20559  00  =3      BYTE      cmdClass;                     /* The command class */
20560  00  =3      BYTE      cmd;                          /* The command */
20561  00  =3      BYTE      properties1;                  /* masked byte */
20562  00  =3      BYTE      properties2;                  /* masked byte */
20563  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20564  00  =3      BYTE      scaleSupported1;              /* MSB */
20565  00  =3      BYTE      scaleSupported2;              
20566  00  =3      BYTE      scaleSupported3;              /* LSB */
20567  00  =3  } ZW_METER_SUPPORTED_REPORT_3BYTE_V5_FRAME;
20568  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 348 

20569  00  =3  /************************************************************/
20570  00  =3  /* Meter Supported Report 4byte V5 command class structs */ 
20571  00  =3  /************************************************************/
20572  00  =3  typedef struct _ZW_METER_SUPPORTED_REPORT_4BYTE_V5_FRAME_
20573  00  =3  {
20574  00  =3      BYTE      cmdClass;                     /* The command class */
20575  00  =3      BYTE      cmd;                          /* The command */
20576  00  =3      BYTE      properties1;                  /* masked byte */
20577  00  =3      BYTE      properties2;                  /* masked byte */
20578  00  =3      BYTE      numberOfScaleSupportedBytesToFollow;/**/
20579  00  =3      BYTE      scaleSupported1;              /* MSB */
20580  00  =3      BYTE      scaleSupported2;              
20581  00  =3      BYTE      scaleSupported3;              
20582  00  =3      BYTE      scaleSupported4;              /* LSB */
20583  00  =3  } ZW_METER_SUPPORTED_REPORT_4BYTE_V5_FRAME;
20584  00  =3  
20585  00  =3  /************************************************************/
20586  00  =3  /* Move To Position Get command class structs */            
20587  00  =3  /************************************************************/
20588  00  =3  typedef struct _ZW_MOVE_TO_POSITION_GET_FRAME_
20589  00  =3  {
20590  00  =3      BYTE      cmdClass;                     /* The command class */
20591  00  =3      BYTE      cmd;                          /* The command */
20592  00  =3  } ZW_MOVE_TO_POSITION_GET_FRAME;
20593  00  =3  
20594  00  =3  /************************************************************/
20595  00  =3  /* Move To Position Report command class structs */         
20596  00  =3  /************************************************************/
20597  00  =3  typedef struct _ZW_MOVE_TO_POSITION_REPORT_FRAME_
20598  00  =3  {
20599  00  =3      BYTE      cmdClass;                     /* The command class */
20600  00  =3      BYTE      cmd;                          /* The command */
20601  00  =3      BYTE      value;                        /**/
20602  00  =3  } ZW_MOVE_TO_POSITION_REPORT_FRAME;
20603  00  =3  
20604  00  =3  /************************************************************/
20605  00  =3  /* Move To Position Set command class structs */            
20606  00  =3  /************************************************************/
20607  00  =3  typedef struct _ZW_MOVE_TO_POSITION_SET_FRAME_
20608  00  =3  {
20609  00  =3      BYTE      cmdClass;                     /* The command class */
20610  00  =3      BYTE      cmd;                          /* The command */
20611  00  =3      BYTE      value;                        /**/
20612  00  =3  } ZW_MOVE_TO_POSITION_SET_FRAME;
20613  00  =3  
20614  00  =3  /************************************************************/
20615  00  =3  /* Multi Channel Association Get V2 command class structs */
20616  00  =3  /************************************************************/
20617  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_GET_V2_FRAME_
20618  00  =3  {
20619  00  =3      BYTE      cmdClass;                     /* The command class */
20620  00  =3      BYTE      cmd;                          /* The command */
20621  00  =3      BYTE      groupingIdentifier;           /**/
20622  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_GET_V2_FRAME;
20623  00  =3  
20624  00  =3  /************************************************************/
20625  00  =3  /* Multi Channel Association Groupings Get V2 command class structs */
20626  00  =3  /************************************************************/
20627  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V2_FRAME_
20628  00  =3  {
20629  00  =3      BYTE      cmdClass;                     /* The command class */
20630  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 349 

20631  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V2_FRAME;
20632  00  =3  
20633  00  =3  /************************************************************/
20634  00  =3  /* Multi Channel Association Groupings Report V2 command class structs */
20635  00  =3  /************************************************************/
20636  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V2_FRAME_
20637  00  =3  {
20638  00  =3      BYTE      cmdClass;                     /* The command class */
20639  00  =3      BYTE      cmd;                          /* The command */
20640  00  =3      BYTE      supportedGroupings;           /**/
20641  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V2_FRAME;
20642  00  =3  
20643  00  =3  /************************************************************/
20644  00  =3  /* Multi Channel Association Remove V2 variant group structs */
20645  00  =3  /************************************************************/
20646  00  =3  typedef struct _VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG_
20647  00  =3  {
20648  00  =3      BYTE      multiChannelNodeId;           /**/
20649  00  =3      BYTE      properties1;                  /* masked byte */
20650  00  =3  } VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG;
20651  00  =3  
20652  00  =3  /************************************************************/
20653  00  =3  /* Multi Channel Association Remove 1byte V2 command class structs */
20654  00  =3  /************************************************************/
20655  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_1BYTE_V2_FRAME_
20656  00  =3  {
20657  00  =3      BYTE      cmdClass;                     /* The command class */
20658  00  =3      BYTE      cmd;                          /* The command */
20659  00  =3      BYTE      groupingIdentifier;           /**/
20660  00  =3      BYTE      nodeId1;                      
20661  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20662  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup1;                /**/
20663  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_1BYTE_V2_FRAME;
20664  00  =3  
20665  00  =3  /************************************************************/
20666  00  =3  /* Multi Channel Association Remove 2byte V2 command class structs */
20667  00  =3  /************************************************************/
20668  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_2BYTE_V2_FRAME_
20669  00  =3  {
20670  00  =3      BYTE      cmdClass;                     /* The command class */
20671  00  =3      BYTE      cmd;                          /* The command */
20672  00  =3      BYTE      groupingIdentifier;           /**/
20673  00  =3      BYTE      nodeId1;                      /* MSB */
20674  00  =3      BYTE      nodeId2;                      /* LSB */
20675  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20676  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup1;                /**/
20677  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup2;                /**/
20678  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_2BYTE_V2_FRAME;
20679  00  =3  
20680  00  =3  /************************************************************/
20681  00  =3  /* Multi Channel Association Remove 3byte V2 command class structs */
20682  00  =3  /************************************************************/
20683  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_3BYTE_V2_FRAME_
20684  00  =3  {
20685  00  =3      BYTE      cmdClass;                     /* The command class */
20686  00  =3      BYTE      cmd;                          /* The command */
20687  00  =3      BYTE      groupingIdentifier;           /**/
20688  00  =3      BYTE      nodeId1;                      /* MSB */
20689  00  =3      BYTE      nodeId2;                      
20690  00  =3      BYTE      nodeId3;                      /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 350 

20691  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20692  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup1;                /**/
20693  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup2;                /**/
20694  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup3;                /**/
20695  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_3BYTE_V2_FRAME;
20696  00  =3  
20697  00  =3  /************************************************************/
20698  00  =3  /* Multi Channel Association Remove 4byte V2 command class structs */
20699  00  =3  /************************************************************/
20700  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_4BYTE_V2_FRAME_
20701  00  =3  {
20702  00  =3      BYTE      cmdClass;                     /* The command class */
20703  00  =3      BYTE      cmd;                          /* The command */
20704  00  =3      BYTE      groupingIdentifier;           /**/
20705  00  =3      BYTE      nodeId1;                      /* MSB */
20706  00  =3      BYTE      nodeId2;                      
20707  00  =3      BYTE      nodeId3;                      
20708  00  =3      BYTE      nodeId4;                      /* LSB */
20709  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20710  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup1;                /**/
20711  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup2;                /**/
20712  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup3;                /**/
20713  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V2_VG variantgroup4;                /**/
20714  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_4BYTE_V2_FRAME;
20715  00  =3  
20716  00  =3  /************************************************************/
20717  00  =3  /* Multi Channel Association Report V2 variant group structs */
20718  00  =3  /************************************************************/
20719  00  =3  typedef struct _VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG_
20720  00  =3  {
20721  00  =3      BYTE      multiChannelNodeId;           /**/
20722  00  =3      BYTE      properties1;                  /* masked byte */
20723  00  =3  } VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG;
20724  00  =3  
20725  00  =3  /************************************************************/
20726  00  =3  /* Multi Channel Association Report 1byte V2 command class structs */
20727  00  =3  /************************************************************/
20728  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_1BYTE_V2_FRAME_
20729  00  =3  {
20730  00  =3      BYTE      cmdClass;                     /* The command class */
20731  00  =3      BYTE      cmd;                          /* The command */
20732  00  =3      BYTE      groupingIdentifier;           /**/
20733  00  =3      BYTE      maxNodesSupported;            /**/
20734  00  =3      BYTE      reportsToFollow;              /**/
20735  00  =3      BYTE      nodeId1;                      
20736  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20737  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup1;                /**/
20738  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_1BYTE_V2_FRAME;
20739  00  =3  
20740  00  =3  /************************************************************/
20741  00  =3  /* Multi Channel Association Report 2byte V2 command class structs */
20742  00  =3  /************************************************************/
20743  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_2BYTE_V2_FRAME_
20744  00  =3  {
20745  00  =3      BYTE      cmdClass;                     /* The command class */
20746  00  =3      BYTE      cmd;                          /* The command */
20747  00  =3      BYTE      groupingIdentifier;           /**/
20748  00  =3      BYTE      maxNodesSupported;            /**/
20749  00  =3      BYTE      reportsToFollow;              /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 351 

20750  00  =3      BYTE      nodeId1;                      /* MSB */
20751  00  =3      BYTE      nodeId2;                      /* LSB */
20752  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20753  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup1;                /**/
20754  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup2;                /**/
20755  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_2BYTE_V2_FRAME;
20756  00  =3  
20757  00  =3  /************************************************************/
20758  00  =3  /* Multi Channel Association Report 3byte V2 command class structs */
20759  00  =3  /************************************************************/
20760  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_3BYTE_V2_FRAME_
20761  00  =3  {
20762  00  =3      BYTE      cmdClass;                     /* The command class */
20763  00  =3      BYTE      cmd;                          /* The command */
20764  00  =3      BYTE      groupingIdentifier;           /**/
20765  00  =3      BYTE      maxNodesSupported;            /**/
20766  00  =3      BYTE      reportsToFollow;              /**/
20767  00  =3      BYTE      nodeId1;                      /* MSB */
20768  00  =3      BYTE      nodeId2;                      
20769  00  =3      BYTE      nodeId3;                      /* LSB */
20770  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20771  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup1;                /**/
20772  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup2;                /**/
20773  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup3;                /**/
20774  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_3BYTE_V2_FRAME;
20775  00  =3  
20776  00  =3  /************************************************************/
20777  00  =3  /* Multi Channel Association Report 4byte V2 command class structs */
20778  00  =3  /************************************************************/
20779  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_4BYTE_V2_FRAME_
20780  00  =3  {
20781  00  =3      BYTE      cmdClass;                     /* The command class */
20782  00  =3      BYTE      cmd;                          /* The command */
20783  00  =3      BYTE      groupingIdentifier;           /**/
20784  00  =3      BYTE      maxNodesSupported;            /**/
20785  00  =3      BYTE      reportsToFollow;              /**/
20786  00  =3      BYTE      nodeId1;                      /* MSB */
20787  00  =3      BYTE      nodeId2;                      
20788  00  =3      BYTE      nodeId3;                      
20789  00  =3      BYTE      nodeId4;                      /* LSB */
20790  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20791  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup1;                /**/
20792  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup2;                /**/
20793  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup3;                /**/
20794  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V2_VG variantgroup4;                /**/
20795  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_4BYTE_V2_FRAME;
20796  00  =3  
20797  00  =3  /************************************************************/
20798  00  =3  /* Multi Channel Association Set V2 variant group structs */
20799  00  =3  /************************************************************/
20800  00  =3  typedef struct _VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG_
20801  00  =3  {
20802  00  =3      BYTE      multiChannelNodeId;           /**/
20803  00  =3      BYTE      properties1;                  /* masked byte */
20804  00  =3  } VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG;
20805  00  =3  
20806  00  =3  /************************************************************/
20807  00  =3  /* Multi Channel Association Set 1byte V2 command class structs */
20808  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 352 

20809  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V2_FRAME_
20810  00  =3  {
20811  00  =3      BYTE      cmdClass;                     /* The command class */
20812  00  =3      BYTE      cmd;                          /* The command */
20813  00  =3      BYTE      groupingIdentifier;           /**/
20814  00  =3      BYTE      nodeId1;                      
20815  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20816  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup1;                /**/
20817  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V2_FRAME;
20818  00  =3  
20819  00  =3  /************************************************************/
20820  00  =3  /* Multi Channel Association Set 2byte V2 command class structs */
20821  00  =3  /************************************************************/
20822  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_2BYTE_V2_FRAME_
20823  00  =3  {
20824  00  =3      BYTE      cmdClass;                     /* The command class */
20825  00  =3      BYTE      cmd;                          /* The command */
20826  00  =3      BYTE      groupingIdentifier;           /**/
20827  00  =3      BYTE      nodeId1;                      /* MSB */
20828  00  =3      BYTE      nodeId2;                      /* LSB */
20829  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20830  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup1;                /**/
20831  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup2;                /**/
20832  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_2BYTE_V2_FRAME;
20833  00  =3  
20834  00  =3  /************************************************************/
20835  00  =3  /* Multi Channel Association Set 3byte V2 command class structs */
20836  00  =3  /************************************************************/
20837  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_3BYTE_V2_FRAME_
20838  00  =3  {
20839  00  =3      BYTE      cmdClass;                     /* The command class */
20840  00  =3      BYTE      cmd;                          /* The command */
20841  00  =3      BYTE      groupingIdentifier;           /**/
20842  00  =3      BYTE      nodeId1;                      /* MSB */
20843  00  =3      BYTE      nodeId2;                      
20844  00  =3      BYTE      nodeId3;                      /* LSB */
20845  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20846  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup1;                /**/
20847  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup2;                /**/
20848  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup3;                /**/
20849  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_3BYTE_V2_FRAME;
20850  00  =3  
20851  00  =3  /************************************************************/
20852  00  =3  /* Multi Channel Association Set 4byte V2 command class structs */
20853  00  =3  /************************************************************/
20854  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_4BYTE_V2_FRAME_
20855  00  =3  {
20856  00  =3      BYTE      cmdClass;                     /* The command class */
20857  00  =3      BYTE      cmd;                          /* The command */
20858  00  =3      BYTE      groupingIdentifier;           /**/
20859  00  =3      BYTE      nodeId1;                      /* MSB */
20860  00  =3      BYTE      nodeId2;                      
20861  00  =3      BYTE      nodeId3;                      
20862  00  =3      BYTE      nodeId4;                      /* LSB */
20863  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20864  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup1;                /**/
20865  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup2;                /**/
20866  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup3;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 353 

20867  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V2_VG variantgroup4;                /**/
20868  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_4BYTE_V2_FRAME;
20869  00  =3  
20870  00  =3  /************************************************************/
20871  00  =3  /* Multi Channel Association Get V3 command class structs */
20872  00  =3  /************************************************************/
20873  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_GET_V3_FRAME_
20874  00  =3  {
20875  00  =3      BYTE      cmdClass;                     /* The command class */
20876  00  =3      BYTE      cmd;                          /* The command */
20877  00  =3      BYTE      groupingIdentifier;           /**/
20878  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_GET_V3_FRAME;
20879  00  =3  
20880  00  =3  /************************************************************/
20881  00  =3  /* Multi Channel Association Groupings Get V3 command class structs */
20882  00  =3  /************************************************************/
20883  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V3_FRAME_
20884  00  =3  {
20885  00  =3      BYTE      cmdClass;                     /* The command class */
20886  00  =3      BYTE      cmd;                          /* The command */
20887  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET_V3_FRAME;
20888  00  =3  
20889  00  =3  /************************************************************/
20890  00  =3  /* Multi Channel Association Groupings Report V3 command class structs */
20891  00  =3  /************************************************************/
20892  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V3_FRAME_
20893  00  =3  {
20894  00  =3      BYTE      cmdClass;                     /* The command class */
20895  00  =3      BYTE      cmd;                          /* The command */
20896  00  =3      BYTE      supportedGroupings;           /**/
20897  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT_V3_FRAME;
20898  00  =3  
20899  00  =3  /************************************************************/
20900  00  =3  /* Multi Channel Association Remove V3 variant group structs */
20901  00  =3  /************************************************************/
20902  00  =3  typedef struct _VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG_
20903  00  =3  {
20904  00  =3      BYTE      multiChannelNodeId;           /**/
20905  00  =3      BYTE      properties1;                  /* masked byte */
20906  00  =3  } VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG;
20907  00  =3  
20908  00  =3  /************************************************************/
20909  00  =3  /* Multi Channel Association Remove 1byte V3 command class structs */
20910  00  =3  /************************************************************/
20911  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_1BYTE_V3_FRAME_
20912  00  =3  {
20913  00  =3      BYTE      cmdClass;                     /* The command class */
20914  00  =3      BYTE      cmd;                          /* The command */
20915  00  =3      BYTE      groupingIdentifier;           /**/
20916  00  =3      BYTE      nodeId1;                      
20917  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20918  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup1;                /**/
20919  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_1BYTE_V3_FRAME;
20920  00  =3  
20921  00  =3  /************************************************************/
20922  00  =3  /* Multi Channel Association Remove 2byte V3 command class structs */
20923  00  =3  /************************************************************/
20924  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_2BYTE_V3_FRAME_
20925  00  =3  {
20926  00  =3      BYTE      cmdClass;                     /* The command class */
20927  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 354 

20928  00  =3      BYTE      groupingIdentifier;           /**/
20929  00  =3      BYTE      nodeId1;                      /* MSB */
20930  00  =3      BYTE      nodeId2;                      /* LSB */
20931  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20932  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup1;                /**/
20933  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup2;                /**/
20934  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_2BYTE_V3_FRAME;
20935  00  =3  
20936  00  =3  /************************************************************/
20937  00  =3  /* Multi Channel Association Remove 3byte V3 command class structs */
20938  00  =3  /************************************************************/
20939  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_3BYTE_V3_FRAME_
20940  00  =3  {
20941  00  =3      BYTE      cmdClass;                     /* The command class */
20942  00  =3      BYTE      cmd;                          /* The command */
20943  00  =3      BYTE      groupingIdentifier;           /**/
20944  00  =3      BYTE      nodeId1;                      /* MSB */
20945  00  =3      BYTE      nodeId2;                      
20946  00  =3      BYTE      nodeId3;                      /* LSB */
20947  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20948  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup1;                /**/
20949  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup2;                /**/
20950  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup3;                /**/
20951  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_3BYTE_V3_FRAME;
20952  00  =3  
20953  00  =3  /************************************************************/
20954  00  =3  /* Multi Channel Association Remove 4byte V3 command class structs */
20955  00  =3  /************************************************************/
20956  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_4BYTE_V3_FRAME_
20957  00  =3  {
20958  00  =3      BYTE      cmdClass;                     /* The command class */
20959  00  =3      BYTE      cmd;                          /* The command */
20960  00  =3      BYTE      groupingIdentifier;           /**/
20961  00  =3      BYTE      nodeId1;                      /* MSB */
20962  00  =3      BYTE      nodeId2;                      
20963  00  =3      BYTE      nodeId3;                      
20964  00  =3      BYTE      nodeId4;                      /* LSB */
20965  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20966  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup1;                /**/
20967  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup2;                /**/
20968  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup3;                /**/
20969  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REMOVE_V3_VG variantgroup4;                /**/
20970  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_4BYTE_V3_FRAME;
20971  00  =3  
20972  00  =3  /************************************************************/
20973  00  =3  /* Multi Channel Association Report V3 variant group structs */
20974  00  =3  /************************************************************/
20975  00  =3  typedef struct _VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG_
20976  00  =3  {
20977  00  =3      BYTE      multiChannelNodeId;           /**/
20978  00  =3      BYTE      properties1;                  /* masked byte */
20979  00  =3  } VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG;
20980  00  =3  
20981  00  =3  /************************************************************/
20982  00  =3  /* Multi Channel Association Report 1byte V3 command class structs */
20983  00  =3  /************************************************************/
20984  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_1BYTE_V3_FRAME_
20985  00  =3  {
20986  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 355 

20987  00  =3      BYTE      cmd;                          /* The command */
20988  00  =3      BYTE      groupingIdentifier;           /**/
20989  00  =3      BYTE      maxNodesSupported;            /**/
20990  00  =3      BYTE      reportsToFollow;              /**/
20991  00  =3      BYTE      nodeId1;                      
20992  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
20993  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup1;                /**/
20994  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_1BYTE_V3_FRAME;
20995  00  =3  
20996  00  =3  /************************************************************/
20997  00  =3  /* Multi Channel Association Report 2byte V3 command class structs */
20998  00  =3  /************************************************************/
20999  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_2BYTE_V3_FRAME_
21000  00  =3  {
21001  00  =3      BYTE      cmdClass;                     /* The command class */
21002  00  =3      BYTE      cmd;                          /* The command */
21003  00  =3      BYTE      groupingIdentifier;           /**/
21004  00  =3      BYTE      maxNodesSupported;            /**/
21005  00  =3      BYTE      reportsToFollow;              /**/
21006  00  =3      BYTE      nodeId1;                      /* MSB */
21007  00  =3      BYTE      nodeId2;                      /* LSB */
21008  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21009  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup1;                /**/
21010  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup2;                /**/
21011  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_2BYTE_V3_FRAME;
21012  00  =3  
21013  00  =3  /************************************************************/
21014  00  =3  /* Multi Channel Association Report 3byte V3 command class structs */
21015  00  =3  /************************************************************/
21016  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_3BYTE_V3_FRAME_
21017  00  =3  {
21018  00  =3      BYTE      cmdClass;                     /* The command class */
21019  00  =3      BYTE      cmd;                          /* The command */
21020  00  =3      BYTE      groupingIdentifier;           /**/
21021  00  =3      BYTE      maxNodesSupported;            /**/
21022  00  =3      BYTE      reportsToFollow;              /**/
21023  00  =3      BYTE      nodeId1;                      /* MSB */
21024  00  =3      BYTE      nodeId2;                      
21025  00  =3      BYTE      nodeId3;                      /* LSB */
21026  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21027  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup1;                /**/
21028  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup2;                /**/
21029  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup3;                /**/
21030  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_3BYTE_V3_FRAME;
21031  00  =3  
21032  00  =3  /************************************************************/
21033  00  =3  /* Multi Channel Association Report 4byte V3 command class structs */
21034  00  =3  /************************************************************/
21035  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_4BYTE_V3_FRAME_
21036  00  =3  {
21037  00  =3      BYTE      cmdClass;                     /* The command class */
21038  00  =3      BYTE      cmd;                          /* The command */
21039  00  =3      BYTE      groupingIdentifier;           /**/
21040  00  =3      BYTE      maxNodesSupported;            /**/
21041  00  =3      BYTE      reportsToFollow;              /**/
21042  00  =3      BYTE      nodeId1;                      /* MSB */
21043  00  =3      BYTE      nodeId2;                      
21044  00  =3      BYTE      nodeId3;                      
21045  00  =3      BYTE      nodeId4;                      /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 356 

21046  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21047  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup1;                /**/
21048  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup2;                /**/
21049  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup3;                /**/
21050  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_REPORT_V3_VG variantgroup4;                /**/
21051  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_REPORT_4BYTE_V3_FRAME;
21052  00  =3  
21053  00  =3  /************************************************************/
21054  00  =3  /* Multi Channel Association Set V3 variant group structs */
21055  00  =3  /************************************************************/
21056  00  =3  typedef struct _VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG_
21057  00  =3  {
21058  00  =3      BYTE      multiChannelNodeId;           /**/
21059  00  =3      BYTE      properties1;                  /* masked byte */
21060  00  =3  } VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG;
21061  00  =3  
21062  00  =3  /************************************************************/
21063  00  =3  /* Multi Channel Association Set 1byte V3 command class structs */
21064  00  =3  /************************************************************/
21065  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V3_FRAME_
21066  00  =3  {
21067  00  =3      BYTE      cmdClass;                     /* The command class */
21068  00  =3      BYTE      cmd;                          /* The command */
21069  00  =3      BYTE      groupingIdentifier;           /**/
21070  00  =3      BYTE      nodeId1;                      
21071  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21072  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup1;                /**/
21073  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V3_FRAME;
21074  00  =3  
21075  00  =3  /************************************************************/
21076  00  =3  /* Multi Channel Association Set 2byte V3 command class structs */
21077  00  =3  /************************************************************/
21078  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_2BYTE_V3_FRAME_
21079  00  =3  {
21080  00  =3      BYTE      cmdClass;                     /* The command class */
21081  00  =3      BYTE      cmd;                          /* The command */
21082  00  =3      BYTE      groupingIdentifier;           /**/
21083  00  =3      BYTE      nodeId1;                      /* MSB */
21084  00  =3      BYTE      nodeId2;                      /* LSB */
21085  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21086  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup1;                /**/
21087  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup2;                /**/
21088  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_2BYTE_V3_FRAME;
21089  00  =3  
21090  00  =3  /************************************************************/
21091  00  =3  /* Multi Channel Association Set 3byte V3 command class structs */
21092  00  =3  /************************************************************/
21093  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_3BYTE_V3_FRAME_
21094  00  =3  {
21095  00  =3      BYTE      cmdClass;                     /* The command class */
21096  00  =3      BYTE      cmd;                          /* The command */
21097  00  =3      BYTE      groupingIdentifier;           /**/
21098  00  =3      BYTE      nodeId1;                      /* MSB */
21099  00  =3      BYTE      nodeId2;                      
21100  00  =3      BYTE      nodeId3;                      /* LSB */
21101  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21102  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup1;                /**/
21103  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup2;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 357 

21104  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup3;                /**/
21105  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_3BYTE_V3_FRAME;
21106  00  =3  
21107  00  =3  /************************************************************/
21108  00  =3  /* Multi Channel Association Set 4byte V3 command class structs */
21109  00  =3  /************************************************************/
21110  00  =3  typedef struct _ZW_MULTI_CHANNEL_ASSOCIATION_SET_4BYTE_V3_FRAME_
21111  00  =3  {
21112  00  =3      BYTE      cmdClass;                     /* The command class */
21113  00  =3      BYTE      cmd;                          /* The command */
21114  00  =3      BYTE      groupingIdentifier;           /**/
21115  00  =3      BYTE      nodeId1;                      /* MSB */
21116  00  =3      BYTE      nodeId2;                      
21117  00  =3      BYTE      nodeId3;                      
21118  00  =3      BYTE      nodeId4;                      /* LSB */
21119  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21120  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup1;                /**/
21121  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup2;                /**/
21122  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup3;                /**/
21123  00  =3      VG_MULTI_CHANNEL_ASSOCIATION_SET_V3_VG variantgroup4;                /**/
21124  00  =3  } ZW_MULTI_CHANNEL_ASSOCIATION_SET_4BYTE_V3_FRAME;
21125  00  =3  
21126  00  =3  /************************************************************/
21127  00  =3  /* Multi Channel Capability Get V2 command class structs */ 
21128  00  =3  /************************************************************/
21129  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_GET_V2_FRAME_
21130  00  =3  {
21131  00  =3      BYTE      cmdClass;                     /* The command class */
21132  00  =3      BYTE      cmd;                          /* The command */
21133  00  =3      BYTE      properties1;                  /* masked byte */
21134  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_GET_V2_FRAME;
21135  00  =3  
21136  00  =3  /************************************************************/
21137  00  =3  /* Multi Channel Capability Report 1byte V2 command class structs */
21138  00  =3  /************************************************************/
21139  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V2_FRAME_
21140  00  =3  {
21141  00  =3      BYTE      cmdClass;                     /* The command class */
21142  00  =3      BYTE      cmd;                          /* The command */
21143  00  =3      BYTE      properties1;                  /* masked byte */
21144  00  =3      BYTE      genericDeviceClass;           /**/
21145  00  =3      BYTE      specificDeviceClass;          /**/
21146  00  =3      BYTE      commandClass1;                
21147  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V2_FRAME;
21148  00  =3  
21149  00  =3  /************************************************************/
21150  00  =3  /* Multi Channel Capability Report 2byte V2 command class structs */
21151  00  =3  /************************************************************/
21152  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V2_FRAME_
21153  00  =3  {
21154  00  =3      BYTE      cmdClass;                     /* The command class */
21155  00  =3      BYTE      cmd;                          /* The command */
21156  00  =3      BYTE      properties1;                  /* masked byte */
21157  00  =3      BYTE      genericDeviceClass;           /**/
21158  00  =3      BYTE      specificDeviceClass;          /**/
21159  00  =3      BYTE      commandClass1;                /* MSB */
21160  00  =3      BYTE      commandClass2;                /* LSB */
21161  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V2_FRAME;
21162  00  =3  
21163  00  =3  /************************************************************/
21164  00  =3  /* Multi Channel Capability Report 3byte V2 command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 358 

21165  00  =3  /************************************************************/
21166  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V2_FRAME_
21167  00  =3  {
21168  00  =3      BYTE      cmdClass;                     /* The command class */
21169  00  =3      BYTE      cmd;                          /* The command */
21170  00  =3      BYTE      properties1;                  /* masked byte */
21171  00  =3      BYTE      genericDeviceClass;           /**/
21172  00  =3      BYTE      specificDeviceClass;          /**/
21173  00  =3      BYTE      commandClass1;                /* MSB */
21174  00  =3      BYTE      commandClass2;                
21175  00  =3      BYTE      commandClass3;                /* LSB */
21176  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V2_FRAME;
21177  00  =3  
21178  00  =3  /************************************************************/
21179  00  =3  /* Multi Channel Capability Report 4byte V2 command class structs */
21180  00  =3  /************************************************************/
21181  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V2_FRAME_
21182  00  =3  {
21183  00  =3      BYTE      cmdClass;                     /* The command class */
21184  00  =3      BYTE      cmd;                          /* The command */
21185  00  =3      BYTE      properties1;                  /* masked byte */
21186  00  =3      BYTE      genericDeviceClass;           /**/
21187  00  =3      BYTE      specificDeviceClass;          /**/
21188  00  =3      BYTE      commandClass1;                /* MSB */
21189  00  =3      BYTE      commandClass2;                
21190  00  =3      BYTE      commandClass3;                
21191  00  =3      BYTE      commandClass4;                /* LSB */
21192  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V2_FRAME;
21193  00  =3  
21194  00  =3  /************************************************************/
21195  00  =3  /* Multi Channel End Point Find V2 command class structs */ 
21196  00  =3  /************************************************************/
21197  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_V2_FRAME_
21198  00  =3  {
21199  00  =3      BYTE      cmdClass;                     /* The command class */
21200  00  =3      BYTE      cmd;                          /* The command */
21201  00  =3      BYTE      genericDeviceClass;           /**/
21202  00  =3      BYTE      specificDeviceClass;          /**/
21203  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_V2_FRAME;
21204  00  =3  
21205  00  =3  /************************************************************/
21206  00  =3  /* Multi Channel End Point Find Report V2 variant group structs */
21207  00  =3  /************************************************************/
21208  00  =3  typedef struct _VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG_
21209  00  =3  {
21210  00  =3      BYTE      properties1;                  /* masked byte */
21211  00  =3  } VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG;
21212  00  =3  
21213  00  =3  /************************************************************/
21214  00  =3  /* Multi Channel End Point Find Report 1byte V2 command class structs */
21215  00  =3  /************************************************************/
21216  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V2_FRAME_
21217  00  =3  {
21218  00  =3      BYTE      cmdClass;                     /* The command class */
21219  00  =3      BYTE      cmd;                          /* The command */
21220  00  =3      BYTE      reportsToFollow;              /**/
21221  00  =3      BYTE      genericDeviceClass;           /**/
21222  00  =3      BYTE      specificDeviceClass;          /**/
21223  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup1;                /**/
21224  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V2_FRAME;
21225  00  =3  
21226  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 359 

21227  00  =3  /* Multi Channel End Point Find Report 2byte V2 command class structs */
21228  00  =3  /************************************************************/
21229  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V2_FRAME_
21230  00  =3  {
21231  00  =3      BYTE      cmdClass;                     /* The command class */
21232  00  =3      BYTE      cmd;                          /* The command */
21233  00  =3      BYTE      reportsToFollow;              /**/
21234  00  =3      BYTE      genericDeviceClass;           /**/
21235  00  =3      BYTE      specificDeviceClass;          /**/
21236  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup1;                /**/
21237  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup2;                /**/
21238  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V2_FRAME;
21239  00  =3  
21240  00  =3  /************************************************************/
21241  00  =3  /* Multi Channel End Point Find Report 3byte V2 command class structs */
21242  00  =3  /************************************************************/
21243  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V2_FRAME_
21244  00  =3  {
21245  00  =3      BYTE      cmdClass;                     /* The command class */
21246  00  =3      BYTE      cmd;                          /* The command */
21247  00  =3      BYTE      reportsToFollow;              /**/
21248  00  =3      BYTE      genericDeviceClass;           /**/
21249  00  =3      BYTE      specificDeviceClass;          /**/
21250  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup1;                /**/
21251  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup2;                /**/
21252  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup3;                /**/
21253  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V2_FRAME;
21254  00  =3  
21255  00  =3  /************************************************************/
21256  00  =3  /* Multi Channel End Point Find Report 4byte V2 command class structs */
21257  00  =3  /************************************************************/
21258  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V2_FRAME_
21259  00  =3  {
21260  00  =3      BYTE      cmdClass;                     /* The command class */
21261  00  =3      BYTE      cmd;                          /* The command */
21262  00  =3      BYTE      reportsToFollow;              /**/
21263  00  =3      BYTE      genericDeviceClass;           /**/
21264  00  =3      BYTE      specificDeviceClass;          /**/
21265  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup1;                /**/
21266  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup2;                /**/
21267  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup3;                /**/
21268  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V2_VG variantgroup4;                /**/
21269  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V2_FRAME;
21270  00  =3  
21271  00  =3  /************************************************************/
21272  00  =3  /* Multi Channel End Point Get V2 command class structs */  
21273  00  =3  /************************************************************/
21274  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_GET_V2_FRAME_
21275  00  =3  {
21276  00  =3      BYTE      cmdClass;                     /* The command class */
21277  00  =3      BYTE      cmd;                          /* The command */
21278  00  =3  } ZW_MULTI_CHANNEL_END_POINT_GET_V2_FRAME;
21279  00  =3  
21280  00  =3  /************************************************************/
21281  00  =3  /* Multi Channel End Point Report V2 command class structs */
21282  00  =3  /************************************************************/
21283  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_REPORT_V2_FRAME_
21284  00  =3  {
21285  00  =3      BYTE      cmdClass;                     /* The command class */
21286  00  =3      BYTE      cmd;                          /* The command */
21287  00  =3      BYTE      properties1;                  /* masked byte */
21288  00  =3      BYTE      properties2;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 360 

21289  00  =3  } ZW_MULTI_CHANNEL_END_POINT_REPORT_V2_FRAME;
21290  00  =3  
21291  00  =3  /************************************************************/
21292  00  =3  /* Multi Instance Get V2 command class structs */           
21293  00  =3  /************************************************************/
21294  00  =3  typedef struct _ZW_MULTI_INSTANCE_GET_V2_FRAME_
21295  00  =3  {
21296  00  =3      BYTE      cmdClass;                     /* The command class */
21297  00  =3      BYTE      cmd;                          /* The command */
21298  00  =3      BYTE      commandClass;                 /**/
21299  00  =3  } ZW_MULTI_INSTANCE_GET_V2_FRAME;
21300  00  =3  
21301  00  =3  /************************************************************/
21302  00  =3  /* Multi Instance Report V2 command class structs */        
21303  00  =3  /************************************************************/
21304  00  =3  typedef struct _ZW_MULTI_INSTANCE_REPORT_V2_FRAME_
21305  00  =3  {
21306  00  =3      BYTE      cmdClass;                     /* The command class */
21307  00  =3      BYTE      cmd;                          /* The command */
21308  00  =3      BYTE      commandClass;                 /**/
21309  00  =3      BYTE      properties1;                  /* masked byte */
21310  00  =3  } ZW_MULTI_INSTANCE_REPORT_V2_FRAME;
21311  00  =3  
21312  00  =3  /************************************************************/
21313  00  =3  /* Multi Channel Capability Get V3 command class structs */ 
21314  00  =3  /************************************************************/
21315  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_GET_V3_FRAME_
21316  00  =3  {
21317  00  =3      BYTE      cmdClass;                     /* The command class */
21318  00  =3      BYTE      cmd;                          /* The command */
21319  00  =3      BYTE      properties1;                  /* masked byte */
21320  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_GET_V3_FRAME;
21321  00  =3  
21322  00  =3  /************************************************************/
21323  00  =3  /* Multi Channel Capability Report 1byte V3 command class structs */
21324  00  =3  /************************************************************/
21325  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V3_FRAME_
21326  00  =3  {
21327  00  =3      BYTE      cmdClass;                     /* The command class */
21328  00  =3      BYTE      cmd;                          /* The command */
21329  00  =3      BYTE      properties1;                  /* masked byte */
21330  00  =3      BYTE      genericDeviceClass;           /**/
21331  00  =3      BYTE      specificDeviceClass;          /**/
21332  00  =3      BYTE      commandClass1;                
21333  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V3_FRAME;
21334  00  =3  
21335  00  =3  /************************************************************/
21336  00  =3  /* Multi Channel Capability Report 2byte V3 command class structs */
21337  00  =3  /************************************************************/
21338  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V3_FRAME_
21339  00  =3  {
21340  00  =3      BYTE      cmdClass;                     /* The command class */
21341  00  =3      BYTE      cmd;                          /* The command */
21342  00  =3      BYTE      properties1;                  /* masked byte */
21343  00  =3      BYTE      genericDeviceClass;           /**/
21344  00  =3      BYTE      specificDeviceClass;          /**/
21345  00  =3      BYTE      commandClass1;                /* MSB */
21346  00  =3      BYTE      commandClass2;                /* LSB */
21347  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V3_FRAME;
21348  00  =3  
21349  00  =3  /************************************************************/
21350  00  =3  /* Multi Channel Capability Report 3byte V3 command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 361 

21351  00  =3  /************************************************************/
21352  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V3_FRAME_
21353  00  =3  {
21354  00  =3      BYTE      cmdClass;                     /* The command class */
21355  00  =3      BYTE      cmd;                          /* The command */
21356  00  =3      BYTE      properties1;                  /* masked byte */
21357  00  =3      BYTE      genericDeviceClass;           /**/
21358  00  =3      BYTE      specificDeviceClass;          /**/
21359  00  =3      BYTE      commandClass1;                /* MSB */
21360  00  =3      BYTE      commandClass2;                
21361  00  =3      BYTE      commandClass3;                /* LSB */
21362  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V3_FRAME;
21363  00  =3  
21364  00  =3  /************************************************************/
21365  00  =3  /* Multi Channel Capability Report 4byte V3 command class structs */
21366  00  =3  /************************************************************/
21367  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V3_FRAME_
21368  00  =3  {
21369  00  =3      BYTE      cmdClass;                     /* The command class */
21370  00  =3      BYTE      cmd;                          /* The command */
21371  00  =3      BYTE      properties1;                  /* masked byte */
21372  00  =3      BYTE      genericDeviceClass;           /**/
21373  00  =3      BYTE      specificDeviceClass;          /**/
21374  00  =3      BYTE      commandClass1;                /* MSB */
21375  00  =3      BYTE      commandClass2;                
21376  00  =3      BYTE      commandClass3;                
21377  00  =3      BYTE      commandClass4;                /* LSB */
21378  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V3_FRAME;
21379  00  =3  
21380  00  =3  /************************************************************/
21381  00  =3  /* Multi Channel End Point Find V3 command class structs */ 
21382  00  =3  /************************************************************/
21383  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_V3_FRAME_
21384  00  =3  {
21385  00  =3      BYTE      cmdClass;                     /* The command class */
21386  00  =3      BYTE      cmd;                          /* The command */
21387  00  =3      BYTE      genericDeviceClass;           /**/
21388  00  =3      BYTE      specificDeviceClass;          /**/
21389  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_V3_FRAME;
21390  00  =3  
21391  00  =3  /************************************************************/
21392  00  =3  /* Multi Channel End Point Find Report V3 variant group structs */
21393  00  =3  /************************************************************/
21394  00  =3  typedef struct _VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG_
21395  00  =3  {
21396  00  =3      BYTE      properties1;                  /* masked byte */
21397  00  =3  } VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG;
21398  00  =3  
21399  00  =3  /************************************************************/
21400  00  =3  /* Multi Channel End Point Find Report 1byte V3 command class structs */
21401  00  =3  /************************************************************/
21402  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V3_FRAME_
21403  00  =3  {
21404  00  =3      BYTE      cmdClass;                     /* The command class */
21405  00  =3      BYTE      cmd;                          /* The command */
21406  00  =3      BYTE      reportsToFollow;              /**/
21407  00  =3      BYTE      genericDeviceClass;           /**/
21408  00  =3      BYTE      specificDeviceClass;          /**/
21409  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup1;                /**/
21410  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V3_FRAME;
21411  00  =3  
21412  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 362 

21413  00  =3  /* Multi Channel End Point Find Report 2byte V3 command class structs */
21414  00  =3  /************************************************************/
21415  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V3_FRAME_
21416  00  =3  {
21417  00  =3      BYTE      cmdClass;                     /* The command class */
21418  00  =3      BYTE      cmd;                          /* The command */
21419  00  =3      BYTE      reportsToFollow;              /**/
21420  00  =3      BYTE      genericDeviceClass;           /**/
21421  00  =3      BYTE      specificDeviceClass;          /**/
21422  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup1;                /**/
21423  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup2;                /**/
21424  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V3_FRAME;
21425  00  =3  
21426  00  =3  /************************************************************/
21427  00  =3  /* Multi Channel End Point Find Report 3byte V3 command class structs */
21428  00  =3  /************************************************************/
21429  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V3_FRAME_
21430  00  =3  {
21431  00  =3      BYTE      cmdClass;                     /* The command class */
21432  00  =3      BYTE      cmd;                          /* The command */
21433  00  =3      BYTE      reportsToFollow;              /**/
21434  00  =3      BYTE      genericDeviceClass;           /**/
21435  00  =3      BYTE      specificDeviceClass;          /**/
21436  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup1;                /**/
21437  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup2;                /**/
21438  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup3;                /**/
21439  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V3_FRAME;
21440  00  =3  
21441  00  =3  /************************************************************/
21442  00  =3  /* Multi Channel End Point Find Report 4byte V3 command class structs */
21443  00  =3  /************************************************************/
21444  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V3_FRAME_
21445  00  =3  {
21446  00  =3      BYTE      cmdClass;                     /* The command class */
21447  00  =3      BYTE      cmd;                          /* The command */
21448  00  =3      BYTE      reportsToFollow;              /**/
21449  00  =3      BYTE      genericDeviceClass;           /**/
21450  00  =3      BYTE      specificDeviceClass;          /**/
21451  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup1;                /**/
21452  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup2;                /**/
21453  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup3;                /**/
21454  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V3_VG variantgroup4;                /**/
21455  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V3_FRAME;
21456  00  =3  
21457  00  =3  /************************************************************/
21458  00  =3  /* Multi Channel End Point Get V3 command class structs */  
21459  00  =3  /************************************************************/
21460  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_GET_V3_FRAME_
21461  00  =3  {
21462  00  =3      BYTE      cmdClass;                     /* The command class */
21463  00  =3      BYTE      cmd;                          /* The command */
21464  00  =3  } ZW_MULTI_CHANNEL_END_POINT_GET_V3_FRAME;
21465  00  =3  
21466  00  =3  /************************************************************/
21467  00  =3  /* Multi Channel End Point Report V3 command class structs */
21468  00  =3  /************************************************************/
21469  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_REPORT_V3_FRAME_
21470  00  =3  {
21471  00  =3      BYTE      cmdClass;                     /* The command class */
21472  00  =3      BYTE      cmd;                          /* The command */
21473  00  =3      BYTE      properties1;                  /* masked byte */
21474  00  =3      BYTE      properties2;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 363 

21475  00  =3  } ZW_MULTI_CHANNEL_END_POINT_REPORT_V3_FRAME;
21476  00  =3  
21477  00  =3  /************************************************************/
21478  00  =3  /* Multi Instance Get V3 command class structs */           
21479  00  =3  /************************************************************/
21480  00  =3  typedef struct _ZW_MULTI_INSTANCE_GET_V3_FRAME_
21481  00  =3  {
21482  00  =3      BYTE      cmdClass;                     /* The command class */
21483  00  =3      BYTE      cmd;                          /* The command */
21484  00  =3      BYTE      commandClass;                 /**/
21485  00  =3  } ZW_MULTI_INSTANCE_GET_V3_FRAME;
21486  00  =3  
21487  00  =3  /************************************************************/
21488  00  =3  /* Multi Instance Report V3 command class structs */        
21489  00  =3  /************************************************************/
21490  00  =3  typedef struct _ZW_MULTI_INSTANCE_REPORT_V3_FRAME_
21491  00  =3  {
21492  00  =3      BYTE      cmdClass;                     /* The command class */
21493  00  =3      BYTE      cmd;                          /* The command */
21494  00  =3      BYTE      commandClass;                 /**/
21495  00  =3      BYTE      properties1;                  /* masked byte */
21496  00  =3  } ZW_MULTI_INSTANCE_REPORT_V3_FRAME;
21497  00  =3  
21498  00  =3  /************************************************************/
21499  00  =3  /* Multi Channel Capability Get V4 command class structs */ 
21500  00  =3  /************************************************************/
21501  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_GET_V4_FRAME_
21502  00  =3  {
21503  00  =3      BYTE      cmdClass;                     /* The command class */
21504  00  =3      BYTE      cmd;                          /* The command */
21505  00  =3      BYTE      properties1;                  /* masked byte */
21506  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_GET_V4_FRAME;
21507  00  =3  
21508  00  =3  /************************************************************/
21509  00  =3  /* Multi Channel Capability Report 1byte V4 command class structs */
21510  00  =3  /************************************************************/
21511  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V4_FRAME_
21512  00  =3  {
21513  00  =3      BYTE      cmdClass;                     /* The command class */
21514  00  =3      BYTE      cmd;                          /* The command */
21515  00  =3      BYTE      properties1;                  /* masked byte */
21516  00  =3      BYTE      genericDeviceClass;           /**/
21517  00  =3      BYTE      specificDeviceClass;          /**/
21518  00  =3      BYTE      commandClass1;                
21519  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V4_FRAME;
21520  00  =3  
21521  00  =3  /************************************************************/
21522  00  =3  /* Multi Channel Capability Report 2byte V4 command class structs */
21523  00  =3  /************************************************************/
21524  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V4_FRAME_
21525  00  =3  {
21526  00  =3      BYTE      cmdClass;                     /* The command class */
21527  00  =3      BYTE      cmd;                          /* The command */
21528  00  =3      BYTE      properties1;                  /* masked byte */
21529  00  =3      BYTE      genericDeviceClass;           /**/
21530  00  =3      BYTE      specificDeviceClass;          /**/
21531  00  =3      BYTE      commandClass1;                /* MSB */
21532  00  =3      BYTE      commandClass2;                /* LSB */
21533  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V4_FRAME;
21534  00  =3  
21535  00  =3  /************************************************************/
21536  00  =3  /* Multi Channel Capability Report 3byte V4 command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 364 

21537  00  =3  /************************************************************/
21538  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V4_FRAME_
21539  00  =3  {
21540  00  =3      BYTE      cmdClass;                     /* The command class */
21541  00  =3      BYTE      cmd;                          /* The command */
21542  00  =3      BYTE      properties1;                  /* masked byte */
21543  00  =3      BYTE      genericDeviceClass;           /**/
21544  00  =3      BYTE      specificDeviceClass;          /**/
21545  00  =3      BYTE      commandClass1;                /* MSB */
21546  00  =3      BYTE      commandClass2;                
21547  00  =3      BYTE      commandClass3;                /* LSB */
21548  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V4_FRAME;
21549  00  =3  
21550  00  =3  /************************************************************/
21551  00  =3  /* Multi Channel Capability Report 4byte V4 command class structs */
21552  00  =3  /************************************************************/
21553  00  =3  typedef struct _ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V4_FRAME_
21554  00  =3  {
21555  00  =3      BYTE      cmdClass;                     /* The command class */
21556  00  =3      BYTE      cmd;                          /* The command */
21557  00  =3      BYTE      properties1;                  /* masked byte */
21558  00  =3      BYTE      genericDeviceClass;           /**/
21559  00  =3      BYTE      specificDeviceClass;          /**/
21560  00  =3      BYTE      commandClass1;                /* MSB */
21561  00  =3      BYTE      commandClass2;                
21562  00  =3      BYTE      commandClass3;                
21563  00  =3      BYTE      commandClass4;                /* LSB */
21564  00  =3  } ZW_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V4_FRAME;
21565  00  =3  
21566  00  =3  /************************************************************/
21567  00  =3  /* Multi Channel End Point Find V4 command class structs */ 
21568  00  =3  /************************************************************/
21569  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_V4_FRAME_
21570  00  =3  {
21571  00  =3      BYTE      cmdClass;                     /* The command class */
21572  00  =3      BYTE      cmd;                          /* The command */
21573  00  =3      BYTE      genericDeviceClass;           /**/
21574  00  =3      BYTE      specificDeviceClass;          /**/
21575  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_V4_FRAME;
21576  00  =3  
21577  00  =3  /************************************************************/
21578  00  =3  /* Multi Channel End Point Find Report V4 variant group structs */
21579  00  =3  /************************************************************/
21580  00  =3  typedef struct _VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG_
21581  00  =3  {
21582  00  =3      BYTE      properties1;                  /* masked byte */
21583  00  =3  } VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG;
21584  00  =3  
21585  00  =3  /************************************************************/
21586  00  =3  /* Multi Channel End Point Find Report 1byte V4 command class structs */
21587  00  =3  /************************************************************/
21588  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V4_FRAME_
21589  00  =3  {
21590  00  =3      BYTE      cmdClass;                     /* The command class */
21591  00  =3      BYTE      cmd;                          /* The command */
21592  00  =3      BYTE      reportsToFollow;              /**/
21593  00  =3      BYTE      genericDeviceClass;           /**/
21594  00  =3      BYTE      specificDeviceClass;          /**/
21595  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup1;                /**/
21596  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_1BYTE_V4_FRAME;
21597  00  =3  
21598  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 365 

21599  00  =3  /* Multi Channel End Point Find Report 2byte V4 command class structs */
21600  00  =3  /************************************************************/
21601  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V4_FRAME_
21602  00  =3  {
21603  00  =3      BYTE      cmdClass;                     /* The command class */
21604  00  =3      BYTE      cmd;                          /* The command */
21605  00  =3      BYTE      reportsToFollow;              /**/
21606  00  =3      BYTE      genericDeviceClass;           /**/
21607  00  =3      BYTE      specificDeviceClass;          /**/
21608  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup1;                /**/
21609  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup2;                /**/
21610  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_2BYTE_V4_FRAME;
21611  00  =3  
21612  00  =3  /************************************************************/
21613  00  =3  /* Multi Channel End Point Find Report 3byte V4 command class structs */
21614  00  =3  /************************************************************/
21615  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V4_FRAME_
21616  00  =3  {
21617  00  =3      BYTE      cmdClass;                     /* The command class */
21618  00  =3      BYTE      cmd;                          /* The command */
21619  00  =3      BYTE      reportsToFollow;              /**/
21620  00  =3      BYTE      genericDeviceClass;           /**/
21621  00  =3      BYTE      specificDeviceClass;          /**/
21622  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup1;                /**/
21623  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup2;                /**/
21624  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup3;                /**/
21625  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_3BYTE_V4_FRAME;
21626  00  =3  
21627  00  =3  /************************************************************/
21628  00  =3  /* Multi Channel End Point Find Report 4byte V4 command class structs */
21629  00  =3  /************************************************************/
21630  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V4_FRAME_
21631  00  =3  {
21632  00  =3      BYTE      cmdClass;                     /* The command class */
21633  00  =3      BYTE      cmd;                          /* The command */
21634  00  =3      BYTE      reportsToFollow;              /**/
21635  00  =3      BYTE      genericDeviceClass;           /**/
21636  00  =3      BYTE      specificDeviceClass;          /**/
21637  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup1;                /**/
21638  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup2;                /**/
21639  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup3;                /**/
21640  00  =3      VG_MULTI_CHANNEL_END_POINT_FIND_REPORT_V4_VG variantgroup4;                /**/
21641  00  =3  } ZW_MULTI_CHANNEL_END_POINT_FIND_REPORT_4BYTE_V4_FRAME;
21642  00  =3  
21643  00  =3  /************************************************************/
21644  00  =3  /* Multi Channel End Point Get V4 command class structs */  
21645  00  =3  /************************************************************/
21646  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_GET_V4_FRAME_
21647  00  =3  {
21648  00  =3      BYTE      cmdClass;                     /* The command class */
21649  00  =3      BYTE      cmd;                          /* The command */
21650  00  =3  } ZW_MULTI_CHANNEL_END_POINT_GET_V4_FRAME;
21651  00  =3  
21652  00  =3  /************************************************************/
21653  00  =3  /* Multi Channel End Point Report V4 command class structs */
21654  00  =3  /************************************************************/
21655  00  =3  typedef struct _ZW_MULTI_CHANNEL_END_POINT_REPORT_V4_FRAME_
21656  00  =3  {
21657  00  =3      BYTE      cmdClass;                     /* The command class */
21658  00  =3      BYTE      cmd;                          /* The command */
21659  00  =3      BYTE      properties1;                  /* masked byte */
21660  00  =3      BYTE      properties2;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 366 

21661  00  =3      BYTE      properties3;                  /* masked byte */
21662  00  =3  } ZW_MULTI_CHANNEL_END_POINT_REPORT_V4_FRAME;
21663  00  =3  
21664  00  =3  /************************************************************/
21665  00  =3  /* Multi Instance Get V4 command class structs */           
21666  00  =3  /************************************************************/
21667  00  =3  typedef struct _ZW_MULTI_INSTANCE_GET_V4_FRAME_
21668  00  =3  {
21669  00  =3      BYTE      cmdClass;                     /* The command class */
21670  00  =3      BYTE      cmd;                          /* The command */
21671  00  =3      BYTE      commandClass;                 /**/
21672  00  =3  } ZW_MULTI_INSTANCE_GET_V4_FRAME;
21673  00  =3  
21674  00  =3  /************************************************************/
21675  00  =3  /* Multi Instance Report V4 command class structs */        
21676  00  =3  /************************************************************/
21677  00  =3  typedef struct _ZW_MULTI_INSTANCE_REPORT_V4_FRAME_
21678  00  =3  {
21679  00  =3      BYTE      cmdClass;                     /* The command class */
21680  00  =3      BYTE      cmd;                          /* The command */
21681  00  =3      BYTE      commandClass;                 /**/
21682  00  =3      BYTE      properties1;                  /* masked byte */
21683  00  =3  } ZW_MULTI_INSTANCE_REPORT_V4_FRAME;
21684  00  =3  
21685  00  =3  /************************************************************/
21686  00  =3  /* Multi Channel Aggregated Members Get V4 command class structs */
21687  00  =3  /************************************************************/
21688  00  =3  typedef struct _ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V4_FRAME_
21689  00  =3  {
21690  00  =3      BYTE      cmdClass;                     /* The command class */
21691  00  =3      BYTE      cmd;                          /* The command */
21692  00  =3      BYTE      properties1;                  /* masked byte */
21693  00  =3  } ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V4_FRAME;
21694  00  =3  
21695  00  =3  /************************************************************/
21696  00  =3  /* Multi Channel Aggregated Members Report 1byte V4 command class structs */
21697  00  =3  /************************************************************/
21698  00  =3  typedef struct _ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_1BYTE_V4_FRAME_
21699  00  =3  {
21700  00  =3      BYTE      cmdClass;                     /* The command class */
21701  00  =3      BYTE      cmd;                          /* The command */
21702  00  =3      BYTE      properties1;                  /* masked byte */
21703  00  =3      BYTE      numberOfBitMasks;             /**/
21704  00  =3      BYTE      aggregatedMembersBitMask1;    
21705  00  =3  } ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_1BYTE_V4_FRAME;
21706  00  =3  
21707  00  =3  /************************************************************/
21708  00  =3  /* Multi Channel Aggregated Members Report 2byte V4 command class structs */
21709  00  =3  /************************************************************/
21710  00  =3  typedef struct _ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_2BYTE_V4_FRAME_
21711  00  =3  {
21712  00  =3      BYTE      cmdClass;                     /* The command class */
21713  00  =3      BYTE      cmd;                          /* The command */
21714  00  =3      BYTE      properties1;                  /* masked byte */
21715  00  =3      BYTE      numberOfBitMasks;             /**/
21716  00  =3      BYTE      aggregatedMembersBitMask1;    /* MSB */
21717  00  =3      BYTE      aggregatedMembersBitMask2;    /* LSB */
21718  00  =3  } ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_2BYTE_V4_FRAME;
21719  00  =3  
21720  00  =3  /************************************************************/
21721  00  =3  /* Multi Channel Aggregated Members Report 3byte V4 command class structs */
21722  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 367 

21723  00  =3  typedef struct _ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_3BYTE_V4_FRAME_
21724  00  =3  {
21725  00  =3      BYTE      cmdClass;                     /* The command class */
21726  00  =3      BYTE      cmd;                          /* The command */
21727  00  =3      BYTE      properties1;                  /* masked byte */
21728  00  =3      BYTE      numberOfBitMasks;             /**/
21729  00  =3      BYTE      aggregatedMembersBitMask1;    /* MSB */
21730  00  =3      BYTE      aggregatedMembersBitMask2;    
21731  00  =3      BYTE      aggregatedMembersBitMask3;    /* LSB */
21732  00  =3  } ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_3BYTE_V4_FRAME;
21733  00  =3  
21734  00  =3  /************************************************************/
21735  00  =3  /* Multi Channel Aggregated Members Report 4byte V4 command class structs */
21736  00  =3  /************************************************************/
21737  00  =3  typedef struct _ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_4BYTE_V4_FRAME_
21738  00  =3  {
21739  00  =3      BYTE      cmdClass;                     /* The command class */
21740  00  =3      BYTE      cmd;                          /* The command */
21741  00  =3      BYTE      properties1;                  /* masked byte */
21742  00  =3      BYTE      numberOfBitMasks;             /**/
21743  00  =3      BYTE      aggregatedMembersBitMask1;    /* MSB */
21744  00  =3      BYTE      aggregatedMembersBitMask2;    
21745  00  =3      BYTE      aggregatedMembersBitMask3;    
21746  00  =3      BYTE      aggregatedMembersBitMask4;    /* LSB */
21747  00  =3  } ZW_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_4BYTE_V4_FRAME;
21748  00  =3  
21749  00  =3  /************************************************************/
21750  00  =3  /* Multi Instance Association Get command class structs */  
21751  00  =3  /************************************************************/
21752  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_GET_FRAME_
21753  00  =3  {
21754  00  =3      BYTE      cmdClass;                     /* The command class */
21755  00  =3      BYTE      cmd;                          /* The command */
21756  00  =3      BYTE      groupingIdentifier;           /**/
21757  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_GET_FRAME;
21758  00  =3  
21759  00  =3  /************************************************************/
21760  00  =3  /* Multi Instance Association Groupings Get command class structs */
21761  00  =3  /************************************************************/
21762  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET_FRAME_
21763  00  =3  {
21764  00  =3      BYTE      cmdClass;                     /* The command class */
21765  00  =3      BYTE      cmd;                          /* The command */
21766  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET_FRAME;
21767  00  =3  
21768  00  =3  /************************************************************/
21769  00  =3  /* Multi Instance Association Groupings Report command class structs */
21770  00  =3  /************************************************************/
21771  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT_FRAME_
21772  00  =3  {
21773  00  =3      BYTE      cmdClass;                     /* The command class */
21774  00  =3      BYTE      cmd;                          /* The command */
21775  00  =3      BYTE      supportedGroupings;           /**/
21776  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT_FRAME;
21777  00  =3  
21778  00  =3  /************************************************************/
21779  00  =3  /* Multi Instance Association Remove variant group structs */
21780  00  =3  /************************************************************/
21781  00  =3  typedef struct _VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG_
21782  00  =3  {
21783  00  =3      BYTE      multiInstanceNodeId;          /**/
21784  00  =3      BYTE      instance;                     /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 368 

21785  00  =3  } VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG;
21786  00  =3  
21787  00  =3  /************************************************************/
21788  00  =3  /* Multi Instance Association Remove 1byte command class structs */
21789  00  =3  /************************************************************/
21790  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_1BYTE_FRAME_
21791  00  =3  {
21792  00  =3      BYTE      cmdClass;                     /* The command class */
21793  00  =3      BYTE      cmd;                          /* The command */
21794  00  =3      BYTE      groupingIdentifier;           /**/
21795  00  =3      BYTE      nodeId1;                      
21796  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21797  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup1;                /**/
21798  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_1BYTE_FRAME;
21799  00  =3  
21800  00  =3  /************************************************************/
21801  00  =3  /* Multi Instance Association Remove 2byte command class structs */
21802  00  =3  /************************************************************/
21803  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_2BYTE_FRAME_
21804  00  =3  {
21805  00  =3      BYTE      cmdClass;                     /* The command class */
21806  00  =3      BYTE      cmd;                          /* The command */
21807  00  =3      BYTE      groupingIdentifier;           /**/
21808  00  =3      BYTE      nodeId1;                      /* MSB */
21809  00  =3      BYTE      nodeId2;                      /* LSB */
21810  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21811  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup1;                /**/
21812  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup2;                /**/
21813  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_2BYTE_FRAME;
21814  00  =3  
21815  00  =3  /************************************************************/
21816  00  =3  /* Multi Instance Association Remove 3byte command class structs */
21817  00  =3  /************************************************************/
21818  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_3BYTE_FRAME_
21819  00  =3  {
21820  00  =3      BYTE      cmdClass;                     /* The command class */
21821  00  =3      BYTE      cmd;                          /* The command */
21822  00  =3      BYTE      groupingIdentifier;           /**/
21823  00  =3      BYTE      nodeId1;                      /* MSB */
21824  00  =3      BYTE      nodeId2;                      
21825  00  =3      BYTE      nodeId3;                      /* LSB */
21826  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21827  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup1;                /**/
21828  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup2;                /**/
21829  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup3;                /**/
21830  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_3BYTE_FRAME;
21831  00  =3  
21832  00  =3  /************************************************************/
21833  00  =3  /* Multi Instance Association Remove 4byte command class structs */
21834  00  =3  /************************************************************/
21835  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_4BYTE_FRAME_
21836  00  =3  {
21837  00  =3      BYTE      cmdClass;                     /* The command class */
21838  00  =3      BYTE      cmd;                          /* The command */
21839  00  =3      BYTE      groupingIdentifier;           /**/
21840  00  =3      BYTE      nodeId1;                      /* MSB */
21841  00  =3      BYTE      nodeId2;                      
21842  00  =3      BYTE      nodeId3;                      
21843  00  =3      BYTE      nodeId4;                      /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 369 

21844  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21845  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup1;                /**/
21846  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup2;                /**/
21847  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup3;                /**/
21848  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REMOVE_VG variantgroup4;                /**/
21849  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REMOVE_4BYTE_FRAME;
21850  00  =3  
21851  00  =3  /************************************************************/
21852  00  =3  /* Multi Instance Association Report variant group structs */
21853  00  =3  /************************************************************/
21854  00  =3  typedef struct _VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG_
21855  00  =3  {
21856  00  =3      BYTE      multiInstanceNodeId;          /**/
21857  00  =3      BYTE      instance;                     /**/
21858  00  =3  } VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG;
21859  00  =3  
21860  00  =3  /************************************************************/
21861  00  =3  /* Multi Instance Association Report 1byte command class structs */
21862  00  =3  /************************************************************/
21863  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_1BYTE_FRAME_
21864  00  =3  {
21865  00  =3      BYTE      cmdClass;                     /* The command class */
21866  00  =3      BYTE      cmd;                          /* The command */
21867  00  =3      BYTE      groupingIdentifier;           /**/
21868  00  =3      BYTE      maxNodesSupported;            /**/
21869  00  =3      BYTE      reportsToFollow;              /**/
21870  00  =3      BYTE      nodeId1;                      
21871  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21872  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup1;                /**/
21873  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_1BYTE_FRAME;
21874  00  =3  
21875  00  =3  /************************************************************/
21876  00  =3  /* Multi Instance Association Report 2byte command class structs */
21877  00  =3  /************************************************************/
21878  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_2BYTE_FRAME_
21879  00  =3  {
21880  00  =3      BYTE      cmdClass;                     /* The command class */
21881  00  =3      BYTE      cmd;                          /* The command */
21882  00  =3      BYTE      groupingIdentifier;           /**/
21883  00  =3      BYTE      maxNodesSupported;            /**/
21884  00  =3      BYTE      reportsToFollow;              /**/
21885  00  =3      BYTE      nodeId1;                      /* MSB */
21886  00  =3      BYTE      nodeId2;                      /* LSB */
21887  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21888  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup1;                /**/
21889  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup2;                /**/
21890  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_2BYTE_FRAME;
21891  00  =3  
21892  00  =3  /************************************************************/
21893  00  =3  /* Multi Instance Association Report 3byte command class structs */
21894  00  =3  /************************************************************/
21895  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_3BYTE_FRAME_
21896  00  =3  {
21897  00  =3      BYTE      cmdClass;                     /* The command class */
21898  00  =3      BYTE      cmd;                          /* The command */
21899  00  =3      BYTE      groupingIdentifier;           /**/
21900  00  =3      BYTE      maxNodesSupported;            /**/
21901  00  =3      BYTE      reportsToFollow;              /**/
21902  00  =3      BYTE      nodeId1;                      /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 370 

21903  00  =3      BYTE      nodeId2;                      
21904  00  =3      BYTE      nodeId3;                      /* LSB */
21905  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21906  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup1;                /**/
21907  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup2;                /**/
21908  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup3;                /**/
21909  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_3BYTE_FRAME;
21910  00  =3  
21911  00  =3  /************************************************************/
21912  00  =3  /* Multi Instance Association Report 4byte command class structs */
21913  00  =3  /************************************************************/
21914  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_4BYTE_FRAME_
21915  00  =3  {
21916  00  =3      BYTE      cmdClass;                     /* The command class */
21917  00  =3      BYTE      cmd;                          /* The command */
21918  00  =3      BYTE      groupingIdentifier;           /**/
21919  00  =3      BYTE      maxNodesSupported;            /**/
21920  00  =3      BYTE      reportsToFollow;              /**/
21921  00  =3      BYTE      nodeId1;                      /* MSB */
21922  00  =3      BYTE      nodeId2;                      
21923  00  =3      BYTE      nodeId3;                      
21924  00  =3      BYTE      nodeId4;                      /* LSB */
21925  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21926  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup1;                /**/
21927  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup2;                /**/
21928  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup3;                /**/
21929  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_REPORT_VG variantgroup4;                /**/
21930  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_REPORT_4BYTE_FRAME;
21931  00  =3  
21932  00  =3  /************************************************************/
21933  00  =3  /* Multi Instance Association Set variant group structs */  
21934  00  =3  /************************************************************/
21935  00  =3  typedef struct _VG_MULTI_INSTANCE_ASSOCIATION_SET_VG_
21936  00  =3  {
21937  00  =3      BYTE      multiInstanceNodeId;          /**/
21938  00  =3      BYTE      instance;                     /**/
21939  00  =3  } VG_MULTI_INSTANCE_ASSOCIATION_SET_VG;
21940  00  =3  
21941  00  =3  /************************************************************/
21942  00  =3  /* Multi Instance Association Set 1byte command class structs */
21943  00  =3  /************************************************************/
21944  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_SET_1BYTE_FRAME_
21945  00  =3  {
21946  00  =3      BYTE      cmdClass;                     /* The command class */
21947  00  =3      BYTE      cmd;                          /* The command */
21948  00  =3      BYTE      groupingIdentifier;           /**/
21949  00  =3      BYTE      nodeId1;                      
21950  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21951  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup1;                /**/
21952  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_SET_1BYTE_FRAME;
21953  00  =3  
21954  00  =3  /************************************************************/
21955  00  =3  /* Multi Instance Association Set 2byte command class structs */
21956  00  =3  /************************************************************/
21957  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_SET_2BYTE_FRAME_
21958  00  =3  {
21959  00  =3      BYTE      cmdClass;                     /* The command class */
21960  00  =3      BYTE      cmd;                          /* The command */
21961  00  =3      BYTE      groupingIdentifier;           /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 371 

21962  00  =3      BYTE      nodeId1;                      /* MSB */
21963  00  =3      BYTE      nodeId2;                      /* LSB */
21964  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21965  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup1;                /**/
21966  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup2;                /**/
21967  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_SET_2BYTE_FRAME;
21968  00  =3  
21969  00  =3  /************************************************************/
21970  00  =3  /* Multi Instance Association Set 3byte command class structs */
21971  00  =3  /************************************************************/
21972  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_SET_3BYTE_FRAME_
21973  00  =3  {
21974  00  =3      BYTE      cmdClass;                     /* The command class */
21975  00  =3      BYTE      cmd;                          /* The command */
21976  00  =3      BYTE      groupingIdentifier;           /**/
21977  00  =3      BYTE      nodeId1;                      /* MSB */
21978  00  =3      BYTE      nodeId2;                      
21979  00  =3      BYTE      nodeId3;                      /* LSB */
21980  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21981  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup1;                /**/
21982  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup2;                /**/
21983  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup3;                /**/
21984  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_SET_3BYTE_FRAME;
21985  00  =3  
21986  00  =3  /************************************************************/
21987  00  =3  /* Multi Instance Association Set 4byte command class structs */
21988  00  =3  /************************************************************/
21989  00  =3  typedef struct _ZW_MULTI_INSTANCE_ASSOCIATION_SET_4BYTE_FRAME_
21990  00  =3  {
21991  00  =3      BYTE      cmdClass;                     /* The command class */
21992  00  =3      BYTE      cmd;                          /* The command */
21993  00  =3      BYTE      groupingIdentifier;           /**/
21994  00  =3      BYTE      nodeId1;                      /* MSB */
21995  00  =3      BYTE      nodeId2;                      
21996  00  =3      BYTE      nodeId3;                      
21997  00  =3      BYTE      nodeId4;                      /* LSB */
21998  00  =3      BYTE      marker;                       /*This marker identifier is used to separate between nodes wi
             -thout and with end points attached. This field can be omitted in case no Multi Channel node follows.*/
21999  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup1;                /**/
22000  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup2;                /**/
22001  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup3;                /**/
22002  00  =3      VG_MULTI_INSTANCE_ASSOCIATION_SET_VG variantgroup4;                /**/
22003  00  =3  } ZW_MULTI_INSTANCE_ASSOCIATION_SET_4BYTE_FRAME;
22004  00  =3  
22005  00  =3  /************************************************************/
22006  00  =3  /* Multi Instance Get command class structs */              
22007  00  =3  /************************************************************/
22008  00  =3  typedef struct _ZW_MULTI_INSTANCE_GET_FRAME_
22009  00  =3  {
22010  00  =3      BYTE      cmdClass;                     /* The command class */
22011  00  =3      BYTE      cmd;                          /* The command */
22012  00  =3      BYTE      commandClass;                 /**/
22013  00  =3  } ZW_MULTI_INSTANCE_GET_FRAME;
22014  00  =3  
22015  00  =3  /************************************************************/
22016  00  =3  /* Multi Instance Report command class structs */           
22017  00  =3  /************************************************************/
22018  00  =3  typedef struct _ZW_MULTI_INSTANCE_REPORT_FRAME_
22019  00  =3  {
22020  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 372 

22021  00  =3      BYTE      cmd;                          /* The command */
22022  00  =3      BYTE      commandClass;                 /**/
22023  00  =3      BYTE      instances;                    /**/
22024  00  =3  } ZW_MULTI_INSTANCE_REPORT_FRAME;
22025  00  =3  
22026  00  =3  /************************************************************/
22027  00  =3  /* Node Info Cached Get command class structs */            
22028  00  =3  /************************************************************/
22029  00  =3  typedef struct _ZW_NODE_INFO_CACHED_GET_FRAME_
22030  00  =3  {
22031  00  =3      BYTE      cmdClass;                     /* The command class */
22032  00  =3      BYTE      cmd;                          /* The command */
22033  00  =3      BYTE      seqNo;                        /**/
22034  00  =3      BYTE      properties1;                  /* masked byte */
22035  00  =3      BYTE      nodeId;                       /**/
22036  00  =3  } ZW_NODE_INFO_CACHED_GET_FRAME;
22037  00  =3  
22038  00  =3  /************************************************************/
22039  00  =3  /* Node Info Cached Report 1byte command class structs */   
22040  00  =3  /************************************************************/
22041  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_1BYTE_FRAME_
22042  00  =3  {
22043  00  =3      BYTE      cmdClass;                     /* The command class */
22044  00  =3      BYTE      cmd;                          /* The command */
22045  00  =3      BYTE      seqNo;                        /**/
22046  00  =3      BYTE      properties1;                  /* masked byte */
22047  00  =3      BYTE      properties2;                  /* masked byte */
22048  00  =3      BYTE      properties3;                  /* masked byte */
22049  00  =3      BYTE      reserved;                     /**/
22050  00  =3      BYTE      basicDeviceClass;             /**/
22051  00  =3      BYTE      genericDeviceClass;           /**/
22052  00  =3      BYTE      specificDeviceClass;          /**/
22053  00  =3      BYTE      commandClass1;                
22054  00  =3  } ZW_NODE_INFO_CACHED_REPORT_1BYTE_FRAME;
22055  00  =3  
22056  00  =3  /************************************************************/
22057  00  =3  /* Node Info Cached Report 2byte command class structs */   
22058  00  =3  /************************************************************/
22059  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_2BYTE_FRAME_
22060  00  =3  {
22061  00  =3      BYTE      cmdClass;                     /* The command class */
22062  00  =3      BYTE      cmd;                          /* The command */
22063  00  =3      BYTE      seqNo;                        /**/
22064  00  =3      BYTE      properties1;                  /* masked byte */
22065  00  =3      BYTE      properties2;                  /* masked byte */
22066  00  =3      BYTE      properties3;                  /* masked byte */
22067  00  =3      BYTE      reserved;                     /**/
22068  00  =3      BYTE      basicDeviceClass;             /**/
22069  00  =3      BYTE      genericDeviceClass;           /**/
22070  00  =3      BYTE      specificDeviceClass;          /**/
22071  00  =3      BYTE      commandClass1;                /* MSB */
22072  00  =3      BYTE      commandClass2;                /* LSB */
22073  00  =3  } ZW_NODE_INFO_CACHED_REPORT_2BYTE_FRAME;
22074  00  =3  
22075  00  =3  /************************************************************/
22076  00  =3  /* Node Info Cached Report 3byte command class structs */   
22077  00  =3  /************************************************************/
22078  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_3BYTE_FRAME_
22079  00  =3  {
22080  00  =3      BYTE      cmdClass;                     /* The command class */
22081  00  =3      BYTE      cmd;                          /* The command */
22082  00  =3      BYTE      seqNo;                        /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 373 

22083  00  =3      BYTE      properties1;                  /* masked byte */
22084  00  =3      BYTE      properties2;                  /* masked byte */
22085  00  =3      BYTE      properties3;                  /* masked byte */
22086  00  =3      BYTE      reserved;                     /**/
22087  00  =3      BYTE      basicDeviceClass;             /**/
22088  00  =3      BYTE      genericDeviceClass;           /**/
22089  00  =3      BYTE      specificDeviceClass;          /**/
22090  00  =3      BYTE      commandClass1;                /* MSB */
22091  00  =3      BYTE      commandClass2;                
22092  00  =3      BYTE      commandClass3;                /* LSB */
22093  00  =3  } ZW_NODE_INFO_CACHED_REPORT_3BYTE_FRAME;
22094  00  =3  
22095  00  =3  /************************************************************/
22096  00  =3  /* Node Info Cached Report 4byte command class structs */   
22097  00  =3  /************************************************************/
22098  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_4BYTE_FRAME_
22099  00  =3  {
22100  00  =3      BYTE      cmdClass;                     /* The command class */
22101  00  =3      BYTE      cmd;                          /* The command */
22102  00  =3      BYTE      seqNo;                        /**/
22103  00  =3      BYTE      properties1;                  /* masked byte */
22104  00  =3      BYTE      properties2;                  /* masked byte */
22105  00  =3      BYTE      properties3;                  /* masked byte */
22106  00  =3      BYTE      reserved;                     /**/
22107  00  =3      BYTE      basicDeviceClass;             /**/
22108  00  =3      BYTE      genericDeviceClass;           /**/
22109  00  =3      BYTE      specificDeviceClass;          /**/
22110  00  =3      BYTE      commandClass1;                /* MSB */
22111  00  =3      BYTE      commandClass2;                
22112  00  =3      BYTE      commandClass3;                
22113  00  =3      BYTE      commandClass4;                /* LSB */
22114  00  =3  } ZW_NODE_INFO_CACHED_REPORT_4BYTE_FRAME;
22115  00  =3  
22116  00  =3  /************************************************************/
22117  00  =3  /* Node List Get command class structs */                   
22118  00  =3  /************************************************************/
22119  00  =3  typedef struct _ZW_NODE_LIST_GET_FRAME_
22120  00  =3  {
22121  00  =3      BYTE      cmdClass;                     /* The command class */
22122  00  =3      BYTE      cmd;                          /* The command */
22123  00  =3      BYTE      seqNo;                        /**/
22124  00  =3  } ZW_NODE_LIST_GET_FRAME;
22125  00  =3  
22126  00  =3  /************************************************************/
22127  00  =3  /* Node List Report 1byte command class structs */          
22128  00  =3  /************************************************************/
22129  00  =3  typedef struct _ZW_NODE_LIST_REPORT_1BYTE_FRAME_
22130  00  =3  {
22131  00  =3      BYTE      cmdClass;                     /* The command class */
22132  00  =3      BYTE      cmd;                          /* The command */
22133  00  =3      BYTE      seqNo;                        /**/
22134  00  =3      BYTE      status;                       /**/
22135  00  =3      BYTE      nodeListControllerId;         /**/
22136  00  =3      BYTE      nodeListData1;                
22137  00  =3  } ZW_NODE_LIST_REPORT_1BYTE_FRAME;
22138  00  =3  
22139  00  =3  /************************************************************/
22140  00  =3  /* Node List Report 2byte command class structs */          
22141  00  =3  /************************************************************/
22142  00  =3  typedef struct _ZW_NODE_LIST_REPORT_2BYTE_FRAME_
22143  00  =3  {
22144  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 374 

22145  00  =3      BYTE      cmd;                          /* The command */
22146  00  =3      BYTE      seqNo;                        /**/
22147  00  =3      BYTE      status;                       /**/
22148  00  =3      BYTE      nodeListControllerId;         /**/
22149  00  =3      BYTE      nodeListData1;                /* MSB */
22150  00  =3      BYTE      nodeListData2;                /* LSB */
22151  00  =3  } ZW_NODE_LIST_REPORT_2BYTE_FRAME;
22152  00  =3  
22153  00  =3  /************************************************************/
22154  00  =3  /* Node List Report 3byte command class structs */          
22155  00  =3  /************************************************************/
22156  00  =3  typedef struct _ZW_NODE_LIST_REPORT_3BYTE_FRAME_
22157  00  =3  {
22158  00  =3      BYTE      cmdClass;                     /* The command class */
22159  00  =3      BYTE      cmd;                          /* The command */
22160  00  =3      BYTE      seqNo;                        /**/
22161  00  =3      BYTE      status;                       /**/
22162  00  =3      BYTE      nodeListControllerId;         /**/
22163  00  =3      BYTE      nodeListData1;                /* MSB */
22164  00  =3      BYTE      nodeListData2;                
22165  00  =3      BYTE      nodeListData3;                /* LSB */
22166  00  =3  } ZW_NODE_LIST_REPORT_3BYTE_FRAME;
22167  00  =3  
22168  00  =3  /************************************************************/
22169  00  =3  /* Node List Report 4byte command class structs */          
22170  00  =3  /************************************************************/
22171  00  =3  typedef struct _ZW_NODE_LIST_REPORT_4BYTE_FRAME_
22172  00  =3  {
22173  00  =3      BYTE      cmdClass;                     /* The command class */
22174  00  =3      BYTE      cmd;                          /* The command */
22175  00  =3      BYTE      seqNo;                        /**/
22176  00  =3      BYTE      status;                       /**/
22177  00  =3      BYTE      nodeListControllerId;         /**/
22178  00  =3      BYTE      nodeListData1;                /* MSB */
22179  00  =3      BYTE      nodeListData2;                
22180  00  =3      BYTE      nodeListData3;                
22181  00  =3      BYTE      nodeListData4;                /* LSB */
22182  00  =3  } ZW_NODE_LIST_REPORT_4BYTE_FRAME;
22183  00  =3  
22184  00  =3  /************************************************************/
22185  00  =3  /* Node Info Cached Get V2 command class structs */         
22186  00  =3  /************************************************************/
22187  00  =3  typedef struct _ZW_NODE_INFO_CACHED_GET_V2_FRAME_
22188  00  =3  {
22189  00  =3      BYTE      cmdClass;                     /* The command class */
22190  00  =3      BYTE      cmd;                          /* The command */
22191  00  =3      BYTE      seqNo;                        /**/
22192  00  =3      BYTE      properties1;                  /* masked byte */
22193  00  =3      BYTE      nodeId;                       /**/
22194  00  =3  } ZW_NODE_INFO_CACHED_GET_V2_FRAME;
22195  00  =3  
22196  00  =3  /************************************************************/
22197  00  =3  /* Node Info Cached Report 1byte V2 command class structs */
22198  00  =3  /************************************************************/
22199  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_1BYTE_V2_FRAME_
22200  00  =3  {
22201  00  =3      BYTE      cmdClass;                     /* The command class */
22202  00  =3      BYTE      cmd;                          /* The command */
22203  00  =3      BYTE      seqNo;                        /**/
22204  00  =3      BYTE      properties1;                  /* masked byte */
22205  00  =3      BYTE      properties2;                  /* masked byte */
22206  00  =3      BYTE      properties3;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 375 

22207  00  =3      BYTE      grantedKeys;                  /**/
22208  00  =3      BYTE      basicDeviceClass;             /**/
22209  00  =3      BYTE      genericDeviceClass;           /**/
22210  00  =3      BYTE      specificDeviceClass;          /**/
22211  00  =3      BYTE      commandClass1;                
22212  00  =3  } ZW_NODE_INFO_CACHED_REPORT_1BYTE_V2_FRAME;
22213  00  =3  
22214  00  =3  /************************************************************/
22215  00  =3  /* Node Info Cached Report 2byte V2 command class structs */
22216  00  =3  /************************************************************/
22217  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_2BYTE_V2_FRAME_
22218  00  =3  {
22219  00  =3      BYTE      cmdClass;                     /* The command class */
22220  00  =3      BYTE      cmd;                          /* The command */
22221  00  =3      BYTE      seqNo;                        /**/
22222  00  =3      BYTE      properties1;                  /* masked byte */
22223  00  =3      BYTE      properties2;                  /* masked byte */
22224  00  =3      BYTE      properties3;                  /* masked byte */
22225  00  =3      BYTE      grantedKeys;                  /**/
22226  00  =3      BYTE      basicDeviceClass;             /**/
22227  00  =3      BYTE      genericDeviceClass;           /**/
22228  00  =3      BYTE      specificDeviceClass;          /**/
22229  00  =3      BYTE      commandClass1;                /* MSB */
22230  00  =3      BYTE      commandClass2;                /* LSB */
22231  00  =3  } ZW_NODE_INFO_CACHED_REPORT_2BYTE_V2_FRAME;
22232  00  =3  
22233  00  =3  /************************************************************/
22234  00  =3  /* Node Info Cached Report 3byte V2 command class structs */
22235  00  =3  /************************************************************/
22236  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_3BYTE_V2_FRAME_
22237  00  =3  {
22238  00  =3      BYTE      cmdClass;                     /* The command class */
22239  00  =3      BYTE      cmd;                          /* The command */
22240  00  =3      BYTE      seqNo;                        /**/
22241  00  =3      BYTE      properties1;                  /* masked byte */
22242  00  =3      BYTE      properties2;                  /* masked byte */
22243  00  =3      BYTE      properties3;                  /* masked byte */
22244  00  =3      BYTE      grantedKeys;                  /**/
22245  00  =3      BYTE      basicDeviceClass;             /**/
22246  00  =3      BYTE      genericDeviceClass;           /**/
22247  00  =3      BYTE      specificDeviceClass;          /**/
22248  00  =3      BYTE      commandClass1;                /* MSB */
22249  00  =3      BYTE      commandClass2;                
22250  00  =3      BYTE      commandClass3;                /* LSB */
22251  00  =3  } ZW_NODE_INFO_CACHED_REPORT_3BYTE_V2_FRAME;
22252  00  =3  
22253  00  =3  /************************************************************/
22254  00  =3  /* Node Info Cached Report 4byte V2 command class structs */
22255  00  =3  /************************************************************/
22256  00  =3  typedef struct _ZW_NODE_INFO_CACHED_REPORT_4BYTE_V2_FRAME_
22257  00  =3  {
22258  00  =3      BYTE      cmdClass;                     /* The command class */
22259  00  =3      BYTE      cmd;                          /* The command */
22260  00  =3      BYTE      seqNo;                        /**/
22261  00  =3      BYTE      properties1;                  /* masked byte */
22262  00  =3      BYTE      properties2;                  /* masked byte */
22263  00  =3      BYTE      properties3;                  /* masked byte */
22264  00  =3      BYTE      grantedKeys;                  /**/
22265  00  =3      BYTE      basicDeviceClass;             /**/
22266  00  =3      BYTE      genericDeviceClass;           /**/
22267  00  =3      BYTE      specificDeviceClass;          /**/
22268  00  =3      BYTE      commandClass1;                /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 376 

22269  00  =3      BYTE      commandClass2;                
22270  00  =3      BYTE      commandClass3;                
22271  00  =3      BYTE      commandClass4;                /* LSB */
22272  00  =3  } ZW_NODE_INFO_CACHED_REPORT_4BYTE_V2_FRAME;
22273  00  =3  
22274  00  =3  /************************************************************/
22275  00  =3  /* Node List Get V2 command class structs */                
22276  00  =3  /************************************************************/
22277  00  =3  typedef struct _ZW_NODE_LIST_GET_V2_FRAME_
22278  00  =3  {
22279  00  =3      BYTE      cmdClass;                     /* The command class */
22280  00  =3      BYTE      cmd;                          /* The command */
22281  00  =3      BYTE      seqNo;                        /**/
22282  00  =3  } ZW_NODE_LIST_GET_V2_FRAME;
22283  00  =3  
22284  00  =3  /************************************************************/
22285  00  =3  /* Node List Report 1byte V2 command class structs */       
22286  00  =3  /************************************************************/
22287  00  =3  typedef struct _ZW_NODE_LIST_REPORT_1BYTE_V2_FRAME_
22288  00  =3  {
22289  00  =3      BYTE      cmdClass;                     /* The command class */
22290  00  =3      BYTE      cmd;                          /* The command */
22291  00  =3      BYTE      seqNo;                        /**/
22292  00  =3      BYTE      status;                       /**/
22293  00  =3      BYTE      nodeListControllerId;         /**/
22294  00  =3      BYTE      nodeListData1;                
22295  00  =3  } ZW_NODE_LIST_REPORT_1BYTE_V2_FRAME;
22296  00  =3  
22297  00  =3  /************************************************************/
22298  00  =3  /* Node List Report 2byte V2 command class structs */       
22299  00  =3  /************************************************************/
22300  00  =3  typedef struct _ZW_NODE_LIST_REPORT_2BYTE_V2_FRAME_
22301  00  =3  {
22302  00  =3      BYTE      cmdClass;                     /* The command class */
22303  00  =3      BYTE      cmd;                          /* The command */
22304  00  =3      BYTE      seqNo;                        /**/
22305  00  =3      BYTE      status;                       /**/
22306  00  =3      BYTE      nodeListControllerId;         /**/
22307  00  =3      BYTE      nodeListData1;                /* MSB */
22308  00  =3      BYTE      nodeListData2;                /* LSB */
22309  00  =3  } ZW_NODE_LIST_REPORT_2BYTE_V2_FRAME;
22310  00  =3  
22311  00  =3  /************************************************************/
22312  00  =3  /* Node List Report 3byte V2 command class structs */       
22313  00  =3  /************************************************************/
22314  00  =3  typedef struct _ZW_NODE_LIST_REPORT_3BYTE_V2_FRAME_
22315  00  =3  {
22316  00  =3      BYTE      cmdClass;                     /* The command class */
22317  00  =3      BYTE      cmd;                          /* The command */
22318  00  =3      BYTE      seqNo;                        /**/
22319  00  =3      BYTE      status;                       /**/
22320  00  =3      BYTE      nodeListControllerId;         /**/
22321  00  =3      BYTE      nodeListData1;                /* MSB */
22322  00  =3      BYTE      nodeListData2;                
22323  00  =3      BYTE      nodeListData3;                /* LSB */
22324  00  =3  } ZW_NODE_LIST_REPORT_3BYTE_V2_FRAME;
22325  00  =3  
22326  00  =3  /************************************************************/
22327  00  =3  /* Node List Report 4byte V2 command class structs */       
22328  00  =3  /************************************************************/
22329  00  =3  typedef struct _ZW_NODE_LIST_REPORT_4BYTE_V2_FRAME_
22330  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 377 

22331  00  =3      BYTE      cmdClass;                     /* The command class */
22332  00  =3      BYTE      cmd;                          /* The command */
22333  00  =3      BYTE      seqNo;                        /**/
22334  00  =3      BYTE      status;                       /**/
22335  00  =3      BYTE      nodeListControllerId;         /**/
22336  00  =3      BYTE      nodeListData1;                /* MSB */
22337  00  =3      BYTE      nodeListData2;                
22338  00  =3      BYTE      nodeListData3;                
22339  00  =3      BYTE      nodeListData4;                /* LSB */
22340  00  =3  } ZW_NODE_LIST_REPORT_4BYTE_V2_FRAME;
22341  00  =3  
22342  00  =3  /************************************************************/
22343  00  =3  /* Nm Multi Channel End Point Get V2 command class structs */
22344  00  =3  /************************************************************/
22345  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_END_POINT_GET_V2_FRAME_
22346  00  =3  {
22347  00  =3      BYTE      cmdClass;                     /* The command class */
22348  00  =3      BYTE      cmd;                          /* The command */
22349  00  =3      BYTE      seqNo;                        /**/
22350  00  =3      BYTE      nodeid;                       /**/
22351  00  =3  } ZW_NM_MULTI_CHANNEL_END_POINT_GET_V2_FRAME;
22352  00  =3  
22353  00  =3  /************************************************************/
22354  00  =3  /* Nm Multi Channel End Point Report V2 command class structs */
22355  00  =3  /************************************************************/
22356  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_END_POINT_REPORT_V2_FRAME_
22357  00  =3  {
22358  00  =3      BYTE      cmdClass;                     /* The command class */
22359  00  =3      BYTE      cmd;                          /* The command */
22360  00  =3      BYTE      seqNo;                        /**/
22361  00  =3      BYTE      nodeid;                       /**/
22362  00  =3      BYTE      reserved;                     /**/
22363  00  =3      BYTE      properties1;                  /* masked byte */
22364  00  =3      BYTE      properties2;                  /* masked byte */
22365  00  =3  } ZW_NM_MULTI_CHANNEL_END_POINT_REPORT_V2_FRAME;
22366  00  =3  
22367  00  =3  /************************************************************/
22368  00  =3  /* Nm Multi Channel Capability Get V2 command class structs */
22369  00  =3  /************************************************************/
22370  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_CAPABILITY_GET_V2_FRAME_
22371  00  =3  {
22372  00  =3      BYTE      cmdClass;                     /* The command class */
22373  00  =3      BYTE      cmd;                          /* The command */
22374  00  =3      BYTE      seqNo;                        /**/
22375  00  =3      BYTE      nodeid;                       /**/
22376  00  =3      BYTE      properties1;                  /* masked byte */
22377  00  =3  } ZW_NM_MULTI_CHANNEL_CAPABILITY_GET_V2_FRAME;
22378  00  =3  
22379  00  =3  /************************************************************/
22380  00  =3  /* Nm Multi Channel Capability Report 1byte V2 command class structs */
22381  00  =3  /************************************************************/
22382  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V2_FRAME_
22383  00  =3  {
22384  00  =3      BYTE      cmdClass;                     /* The command class */
22385  00  =3      BYTE      cmd;                          /* The command */
22386  00  =3      BYTE      seqNo;                        /**/
22387  00  =3      BYTE      nodeid;                       /**/
22388  00  =3      BYTE      commandClassLength;           /**/
22389  00  =3      BYTE      properties1;                  /* masked byte */
22390  00  =3      BYTE      genericDeviceClass;           /**/
22391  00  =3      BYTE      specificDeviceClass;          /**/
22392  00  =3      BYTE      commandClass1;                
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 378 

22393  00  =3  } ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_1BYTE_V2_FRAME;
22394  00  =3  
22395  00  =3  /************************************************************/
22396  00  =3  /* Nm Multi Channel Capability Report 2byte V2 command class structs */
22397  00  =3  /************************************************************/
22398  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V2_FRAME_
22399  00  =3  {
22400  00  =3      BYTE      cmdClass;                     /* The command class */
22401  00  =3      BYTE      cmd;                          /* The command */
22402  00  =3      BYTE      seqNo;                        /**/
22403  00  =3      BYTE      nodeid;                       /**/
22404  00  =3      BYTE      commandClassLength;           /**/
22405  00  =3      BYTE      properties1;                  /* masked byte */
22406  00  =3      BYTE      genericDeviceClass;           /**/
22407  00  =3      BYTE      specificDeviceClass;          /**/
22408  00  =3      BYTE      commandClass1;                /* MSB */
22409  00  =3      BYTE      commandClass2;                /* LSB */
22410  00  =3  } ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_2BYTE_V2_FRAME;
22411  00  =3  
22412  00  =3  /************************************************************/
22413  00  =3  /* Nm Multi Channel Capability Report 3byte V2 command class structs */
22414  00  =3  /************************************************************/
22415  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V2_FRAME_
22416  00  =3  {
22417  00  =3      BYTE      cmdClass;                     /* The command class */
22418  00  =3      BYTE      cmd;                          /* The command */
22419  00  =3      BYTE      seqNo;                        /**/
22420  00  =3      BYTE      nodeid;                       /**/
22421  00  =3      BYTE      commandClassLength;           /**/
22422  00  =3      BYTE      properties1;                  /* masked byte */
22423  00  =3      BYTE      genericDeviceClass;           /**/
22424  00  =3      BYTE      specificDeviceClass;          /**/
22425  00  =3      BYTE      commandClass1;                /* MSB */
22426  00  =3      BYTE      commandClass2;                
22427  00  =3      BYTE      commandClass3;                /* LSB */
22428  00  =3  } ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_3BYTE_V2_FRAME;
22429  00  =3  
22430  00  =3  /************************************************************/
22431  00  =3  /* Nm Multi Channel Capability Report 4byte V2 command class structs */
22432  00  =3  /************************************************************/
22433  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V2_FRAME_
22434  00  =3  {
22435  00  =3      BYTE      cmdClass;                     /* The command class */
22436  00  =3      BYTE      cmd;                          /* The command */
22437  00  =3      BYTE      seqNo;                        /**/
22438  00  =3      BYTE      nodeid;                       /**/
22439  00  =3      BYTE      commandClassLength;           /**/
22440  00  =3      BYTE      properties1;                  /* masked byte */
22441  00  =3      BYTE      genericDeviceClass;           /**/
22442  00  =3      BYTE      specificDeviceClass;          /**/
22443  00  =3      BYTE      commandClass1;                /* MSB */
22444  00  =3      BYTE      commandClass2;                
22445  00  =3      BYTE      commandClass3;                
22446  00  =3      BYTE      commandClass4;                /* LSB */
22447  00  =3  } ZW_NM_MULTI_CHANNEL_CAPABILITY_REPORT_4BYTE_V2_FRAME;
22448  00  =3  
22449  00  =3  /************************************************************/
22450  00  =3  /* Nm Multi Channel Aggregated Members Get V2 command class structs */
22451  00  =3  /************************************************************/
22452  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V2_FRAME_
22453  00  =3  {
22454  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 379 

22455  00  =3      BYTE      cmd;                          /* The command */
22456  00  =3      BYTE      seqNo;                        /**/
22457  00  =3      BYTE      nodeid;                       /**/
22458  00  =3      BYTE      properties1;                  /* masked byte */
22459  00  =3  } ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_GET_V2_FRAME;
22460  00  =3  
22461  00  =3  /************************************************************/
22462  00  =3  /* Nm Multi Channel Aggregated Members Report V2 variant group structs */
22463  00  =3  /************************************************************/
22464  00  =3  typedef struct _VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG_
22465  00  =3  {
22466  00  =3      BYTE      properties1;                  /* masked byte */
22467  00  =3  } VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG;
22468  00  =3  
22469  00  =3  /************************************************************/
22470  00  =3  /* Nm Multi Channel Aggregated Members Report 1byte V2 command class structs */
22471  00  =3  /************************************************************/
22472  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_1BYTE_V2_FRAME_
22473  00  =3  {
22474  00  =3      BYTE      cmdClass;                     /* The command class */
22475  00  =3      BYTE      cmd;                          /* The command */
22476  00  =3      BYTE      seqNo;                        /**/
22477  00  =3      BYTE      nodeid;                       /**/
22478  00  =3      BYTE      properties1;                  /* masked byte */
22479  00  =3      BYTE      numberOfMembers;              /**/
22480  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup1;                /**/
22481  00  =3  } ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_1BYTE_V2_FRAME;
22482  00  =3  
22483  00  =3  /************************************************************/
22484  00  =3  /* Nm Multi Channel Aggregated Members Report 2byte V2 command class structs */
22485  00  =3  /************************************************************/
22486  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_2BYTE_V2_FRAME_
22487  00  =3  {
22488  00  =3      BYTE      cmdClass;                     /* The command class */
22489  00  =3      BYTE      cmd;                          /* The command */
22490  00  =3      BYTE      seqNo;                        /**/
22491  00  =3      BYTE      nodeid;                       /**/
22492  00  =3      BYTE      properties1;                  /* masked byte */
22493  00  =3      BYTE      numberOfMembers;              /**/
22494  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup1;                /**/
22495  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup2;                /**/
22496  00  =3  } ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_2BYTE_V2_FRAME;
22497  00  =3  
22498  00  =3  /************************************************************/
22499  00  =3  /* Nm Multi Channel Aggregated Members Report 3byte V2 command class structs */
22500  00  =3  /************************************************************/
22501  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_3BYTE_V2_FRAME_
22502  00  =3  {
22503  00  =3      BYTE      cmdClass;                     /* The command class */
22504  00  =3      BYTE      cmd;                          /* The command */
22505  00  =3      BYTE      seqNo;                        /**/
22506  00  =3      BYTE      nodeid;                       /**/
22507  00  =3      BYTE      properties1;                  /* masked byte */
22508  00  =3      BYTE      numberOfMembers;              /**/
22509  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup1;                /**/
22510  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup2;                /**/
22511  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup3;                /**/
22512  00  =3  } ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_3BYTE_V2_FRAME;
22513  00  =3  
22514  00  =3  /************************************************************/
22515  00  =3  /* Nm Multi Channel Aggregated Members Report 4byte V2 command class structs */
22516  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 380 

22517  00  =3  typedef struct _ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_4BYTE_V2_FRAME_
22518  00  =3  {
22519  00  =3      BYTE      cmdClass;                     /* The command class */
22520  00  =3      BYTE      cmd;                          /* The command */
22521  00  =3      BYTE      seqNo;                        /**/
22522  00  =3      BYTE      nodeid;                       /**/
22523  00  =3      BYTE      properties1;                  /* masked byte */
22524  00  =3      BYTE      numberOfMembers;              /**/
22525  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup1;                /**/
22526  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup2;                /**/
22527  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup3;                /**/
22528  00  =3      VG_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_V2_VG variantgroup4;                /**/
22529  00  =3  } ZW_NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT_4BYTE_V2_FRAME;
22530  00  =3  
22531  00  =3  /************************************************************/
22532  00  =3  /* Learn Mode Set command class structs */                  
22533  00  =3  /************************************************************/
22534  00  =3  typedef struct _ZW_LEARN_MODE_SET_FRAME_
22535  00  =3  {
22536  00  =3      BYTE      cmdClass;                     /* The command class */
22537  00  =3      BYTE      cmd;                          /* The command */
22538  00  =3      BYTE      seqNo;                        /**/
22539  00  =3      BYTE      reserved;                     /**/
22540  00  =3      BYTE      mode;                         /**/
22541  00  =3  } ZW_LEARN_MODE_SET_FRAME;
22542  00  =3  
22543  00  =3  /************************************************************/
22544  00  =3  /* Learn Mode Set Status command class structs */           
22545  00  =3  /************************************************************/
22546  00  =3  typedef struct _ZW_LEARN_MODE_SET_STATUS_FRAME_
22547  00  =3  {
22548  00  =3      BYTE      cmdClass;                     /* The command class */
22549  00  =3      BYTE      cmd;                          /* The command */
22550  00  =3      BYTE      seqNo;                        /**/
22551  00  =3      BYTE      status;                       /**/
22552  00  =3      BYTE      reserved;                     /**/
22553  00  =3      BYTE      newNodeId;                    /**/
22554  00  =3  } ZW_LEARN_MODE_SET_STATUS_FRAME;
22555  00  =3  
22556  00  =3  /************************************************************/
22557  00  =3  /* Node Information Send command class structs */           
22558  00  =3  /************************************************************/
22559  00  =3  typedef struct _ZW_NODE_INFORMATION_SEND_FRAME_
22560  00  =3  {
22561  00  =3      BYTE      cmdClass;                     /* The command class */
22562  00  =3      BYTE      cmd;                          /* The command */
22563  00  =3      BYTE      seqNo;                        /**/
22564  00  =3      BYTE      reserved;                     /**/
22565  00  =3      BYTE      destinationNodeId;            /**/
22566  00  =3      BYTE      txOptions;                    /**/
22567  00  =3  } ZW_NODE_INFORMATION_SEND_FRAME;
22568  00  =3  
22569  00  =3  /************************************************************/
22570  00  =3  /* Network Update Request command class structs */          
22571  00  =3  /************************************************************/
22572  00  =3  typedef struct _ZW_NETWORK_UPDATE_REQUEST_FRAME_
22573  00  =3  {
22574  00  =3      BYTE      cmdClass;                     /* The command class */
22575  00  =3      BYTE      cmd;                          /* The command */
22576  00  =3      BYTE      seqNo;                        /**/
22577  00  =3  } ZW_NETWORK_UPDATE_REQUEST_FRAME;
22578  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 381 

22579  00  =3  /************************************************************/
22580  00  =3  /* Network Update Request Status command class structs */   
22581  00  =3  /************************************************************/
22582  00  =3  typedef struct _ZW_NETWORK_UPDATE_REQUEST_STATUS_FRAME_
22583  00  =3  {
22584  00  =3      BYTE      cmdClass;                     /* The command class */
22585  00  =3      BYTE      cmd;                          /* The command */
22586  00  =3      BYTE      seqNo;                        /**/
22587  00  =3      BYTE      status;                       /**/
22588  00  =3  } ZW_NETWORK_UPDATE_REQUEST_STATUS_FRAME;
22589  00  =3  
22590  00  =3  /************************************************************/
22591  00  =3  /* Default Set command class structs */                     
22592  00  =3  /************************************************************/
22593  00  =3  typedef struct _ZW_DEFAULT_SET_FRAME_
22594  00  =3  {
22595  00  =3      BYTE      cmdClass;                     /* The command class */
22596  00  =3      BYTE      cmd;                          /* The command */
22597  00  =3      BYTE      seqNo;                        /**/
22598  00  =3  } ZW_DEFAULT_SET_FRAME;
22599  00  =3  
22600  00  =3  /************************************************************/
22601  00  =3  /* Default Set Complete command class structs */            
22602  00  =3  /************************************************************/
22603  00  =3  typedef struct _ZW_DEFAULT_SET_COMPLETE_FRAME_
22604  00  =3  {
22605  00  =3      BYTE      cmdClass;                     /* The command class */
22606  00  =3      BYTE      cmd;                          /* The command */
22607  00  =3      BYTE      seqNo;                        /**/
22608  00  =3      BYTE      status;                       /**/
22609  00  =3  } ZW_DEFAULT_SET_COMPLETE_FRAME;
22610  00  =3  
22611  00  =3  /************************************************************/
22612  00  =3  /* Learn Mode Set V2 command class structs */               
22613  00  =3  /************************************************************/
22614  00  =3  typedef struct _ZW_LEARN_MODE_SET_V2_FRAME_
22615  00  =3  {
22616  00  =3      BYTE      cmdClass;                     /* The command class */
22617  00  =3      BYTE      cmd;                          /* The command */
22618  00  =3      BYTE      seqNo;                        /**/
22619  00  =3      BYTE      properties1;                  /* masked byte */
22620  00  =3      BYTE      mode;                         /**/
22621  00  =3  } ZW_LEARN_MODE_SET_V2_FRAME;
22622  00  =3  
22623  00  =3  /************************************************************/
22624  00  =3  /* Learn Mode Set Status V2 command class structs */        
22625  00  =3  /************************************************************/
22626  00  =3  typedef struct _ZW_LEARN_MODE_SET_STATUS_V2_FRAME_
22627  00  =3  {
22628  00  =3      BYTE      cmdClass;                     /* The command class */
22629  00  =3      BYTE      cmd;                          /* The command */
22630  00  =3      BYTE      seqNo;                        /**/
22631  00  =3      BYTE      status;                       /**/
22632  00  =3      BYTE      reserved;                     /**/
22633  00  =3      BYTE      newNodeId;                    /**/
22634  00  =3      BYTE      grantedKeys;                  /**/
22635  00  =3      BYTE      dsk1;                         /* MSB */
22636  00  =3      BYTE      dsk2;                         
22637  00  =3      BYTE      dsk3;                         
22638  00  =3      BYTE      dsk4;                         
22639  00  =3      BYTE      dsk5;                         
22640  00  =3      BYTE      dsk6;                         
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 382 

22641  00  =3      BYTE      dsk7;                         
22642  00  =3      BYTE      dsk8;                         
22643  00  =3      BYTE      dsk9;                         
22644  00  =3      BYTE      dsk10;                        
22645  00  =3      BYTE      dsk11;                        
22646  00  =3      BYTE      dsk12;                        
22647  00  =3      BYTE      dsk13;                        
22648  00  =3      BYTE      dsk14;                        
22649  00  =3      BYTE      dsk15;                        
22650  00  =3      BYTE      dsk16;                        /* LSB */
22651  00  =3  } ZW_LEARN_MODE_SET_STATUS_V2_FRAME;
22652  00  =3  
22653  00  =3  /************************************************************/
22654  00  =3  /* Node Information Send V2 command class structs */        
22655  00  =3  /************************************************************/
22656  00  =3  typedef struct _ZW_NODE_INFORMATION_SEND_V2_FRAME_
22657  00  =3  {
22658  00  =3      BYTE      cmdClass;                     /* The command class */
22659  00  =3      BYTE      cmd;                          /* The command */
22660  00  =3      BYTE      seqNo;                        /**/
22661  00  =3      BYTE      reserved;                     /**/
22662  00  =3      BYTE      destinationNodeId;            /**/
22663  00  =3      BYTE      txOptions;                    /**/
22664  00  =3  } ZW_NODE_INFORMATION_SEND_V2_FRAME;
22665  00  =3  
22666  00  =3  /************************************************************/
22667  00  =3  /* Network Update Request V2 command class structs */       
22668  00  =3  /************************************************************/
22669  00  =3  typedef struct _ZW_NETWORK_UPDATE_REQUEST_V2_FRAME_
22670  00  =3  {
22671  00  =3      BYTE      cmdClass;                     /* The command class */
22672  00  =3      BYTE      cmd;                          /* The command */
22673  00  =3      BYTE      seqNo;                        /**/
22674  00  =3  } ZW_NETWORK_UPDATE_REQUEST_V2_FRAME;
22675  00  =3  
22676  00  =3  /************************************************************/
22677  00  =3  /* Network Update Request Status V2 command class structs */
22678  00  =3  /************************************************************/
22679  00  =3  typedef struct _ZW_NETWORK_UPDATE_REQUEST_STATUS_V2_FRAME_
22680  00  =3  {
22681  00  =3      BYTE      cmdClass;                     /* The command class */
22682  00  =3      BYTE      cmd;                          /* The command */
22683  00  =3      BYTE      seqNo;                        /**/
22684  00  =3      BYTE      status;                       /**/
22685  00  =3  } ZW_NETWORK_UPDATE_REQUEST_STATUS_V2_FRAME;
22686  00  =3  
22687  00  =3  /************************************************************/
22688  00  =3  /* Default Set V2 command class structs */                  
22689  00  =3  /************************************************************/
22690  00  =3  typedef struct _ZW_DEFAULT_SET_V2_FRAME_
22691  00  =3  {
22692  00  =3      BYTE      cmdClass;                     /* The command class */
22693  00  =3      BYTE      cmd;                          /* The command */
22694  00  =3      BYTE      seqNo;                        /**/
22695  00  =3  } ZW_DEFAULT_SET_V2_FRAME;
22696  00  =3  
22697  00  =3  /************************************************************/
22698  00  =3  /* Default Set Complete V2 command class structs */         
22699  00  =3  /************************************************************/
22700  00  =3  typedef struct _ZW_DEFAULT_SET_COMPLETE_V2_FRAME_
22701  00  =3  {
22702  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 383 

22703  00  =3      BYTE      cmd;                          /* The command */
22704  00  =3      BYTE      seqNo;                        /**/
22705  00  =3      BYTE      status;                       /**/
22706  00  =3  } ZW_DEFAULT_SET_COMPLETE_V2_FRAME;
22707  00  =3  
22708  00  =3  /************************************************************/
22709  00  =3  /* Dsk Get V2 command class structs */                      
22710  00  =3  /************************************************************/
22711  00  =3  typedef struct _ZW_DSK_GET_V2_FRAME_
22712  00  =3  {
22713  00  =3      BYTE      cmdClass;                     /* The command class */
22714  00  =3      BYTE      cmd;                          /* The command */
22715  00  =3      BYTE      seqNo;                        /**/
22716  00  =3      BYTE      properties1;                  /* masked byte */
22717  00  =3  } ZW_DSK_GET_V2_FRAME;
22718  00  =3  
22719  00  =3  /************************************************************/
22720  00  =3  /* Dsk Report V2 command class structs */                   
22721  00  =3  /************************************************************/
22722  00  =3  typedef struct _ZW_DSK_REPORT_V2_FRAME_
22723  00  =3  {
22724  00  =3      BYTE      cmdClass;                     /* The command class */
22725  00  =3      BYTE      cmd;                          /* The command */
22726  00  =3      BYTE      seqNo;                        /**/
22727  00  =3      BYTE      properties1;                  /* masked byte */
22728  00  =3      BYTE      dsk1;                         /* MSB */
22729  00  =3      BYTE      dsk2;                         
22730  00  =3      BYTE      dsk3;                         
22731  00  =3      BYTE      dsk4;                         
22732  00  =3      BYTE      dsk5;                         
22733  00  =3      BYTE      dsk6;                         
22734  00  =3      BYTE      dsk7;                         
22735  00  =3      BYTE      dsk8;                         
22736  00  =3      BYTE      dsk9;                         
22737  00  =3      BYTE      dsk10;                        
22738  00  =3      BYTE      dsk11;                        
22739  00  =3      BYTE      dsk12;                        
22740  00  =3      BYTE      dsk13;                        
22741  00  =3      BYTE      dsk14;                        
22742  00  =3      BYTE      dsk15;                        
22743  00  =3      BYTE      dsk16;                        /* LSB */
22744  00  =3  } ZW_DSK_REPORT_V2_FRAME;
22745  00  =3  
22746  00  =3  /************************************************************/
22747  00  =3  /* Failed Node Remove command class structs */              
22748  00  =3  /************************************************************/
22749  00  =3  typedef struct _ZW_FAILED_NODE_REMOVE_FRAME_
22750  00  =3  {
22751  00  =3      BYTE      cmdClass;                     /* The command class */
22752  00  =3      BYTE      cmd;                          /* The command */
22753  00  =3      BYTE      seqNo;                        /**/
22754  00  =3      BYTE      nodeId;                       /**/
22755  00  =3  } ZW_FAILED_NODE_REMOVE_FRAME;
22756  00  =3  
22757  00  =3  /************************************************************/
22758  00  =3  /* Failed Node Remove Status command class structs */       
22759  00  =3  /************************************************************/
22760  00  =3  typedef struct _ZW_FAILED_NODE_REMOVE_STATUS_FRAME_
22761  00  =3  {
22762  00  =3      BYTE      cmdClass;                     /* The command class */
22763  00  =3      BYTE      cmd;                          /* The command */
22764  00  =3      BYTE      seqNo;                        /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 384 

22765  00  =3      BYTE      status;                       /**/
22766  00  =3      BYTE      nodeId;                       /**/
22767  00  =3  } ZW_FAILED_NODE_REMOVE_STATUS_FRAME;
22768  00  =3  
22769  00  =3  /************************************************************/
22770  00  =3  /* Node Add command class structs */                        
22771  00  =3  /************************************************************/
22772  00  =3  typedef struct _ZW_NODE_ADD_FRAME_
22773  00  =3  {
22774  00  =3      BYTE      cmdClass;                     /* The command class */
22775  00  =3      BYTE      cmd;                          /* The command */
22776  00  =3      BYTE      seqNo;                        /**/
22777  00  =3      BYTE      reserved;                     /**/
22778  00  =3      BYTE      mode;                         /**/
22779  00  =3      BYTE      txOptions;                    /**/
22780  00  =3  } ZW_NODE_ADD_FRAME;
22781  00  =3  
22782  00  =3  /************************************************************/
22783  00  =3  /* Node Add Status 1byte command class structs */           
22784  00  =3  /************************************************************/
22785  00  =3  typedef struct _ZW_NODE_ADD_STATUS_1BYTE_FRAME_
22786  00  =3  {
22787  00  =3      BYTE      cmdClass;                     /* The command class */
22788  00  =3      BYTE      cmd;                          /* The command */
22789  00  =3      BYTE      seqNo;                        /**/
22790  00  =3      BYTE      status;                       /**/
22791  00  =3      BYTE      reserved;                     /**/
22792  00  =3      BYTE      newNodeId;                    /**/
22793  00  =3      BYTE      nodeInfoLength;               /**/
22794  00  =3      BYTE      properties1;                  /* masked byte */
22795  00  =3      BYTE      properties2;                  /* masked byte */
22796  00  =3      BYTE      basicDeviceClass;             /**/
22797  00  =3      BYTE      genericDeviceClass;           /**/
22798  00  =3      BYTE      specificDeviceClass;          /**/
22799  00  =3      BYTE      commandClass1;                
22800  00  =3  } ZW_NODE_ADD_STATUS_1BYTE_FRAME;
22801  00  =3  
22802  00  =3  /************************************************************/
22803  00  =3  /* Node Add Status 2byte command class structs */           
22804  00  =3  /************************************************************/
22805  00  =3  typedef struct _ZW_NODE_ADD_STATUS_2BYTE_FRAME_
22806  00  =3  {
22807  00  =3      BYTE      cmdClass;                     /* The command class */
22808  00  =3      BYTE      cmd;                          /* The command */
22809  00  =3      BYTE      seqNo;                        /**/
22810  00  =3      BYTE      status;                       /**/
22811  00  =3      BYTE      reserved;                     /**/
22812  00  =3      BYTE      newNodeId;                    /**/
22813  00  =3      BYTE      nodeInfoLength;               /**/
22814  00  =3      BYTE      properties1;                  /* masked byte */
22815  00  =3      BYTE      properties2;                  /* masked byte */
22816  00  =3      BYTE      basicDeviceClass;             /**/
22817  00  =3      BYTE      genericDeviceClass;           /**/
22818  00  =3      BYTE      specificDeviceClass;          /**/
22819  00  =3      BYTE      commandClass1;                /* MSB */
22820  00  =3      BYTE      commandClass2;                /* LSB */
22821  00  =3  } ZW_NODE_ADD_STATUS_2BYTE_FRAME;
22822  00  =3  
22823  00  =3  /************************************************************/
22824  00  =3  /* Node Add Status 3byte command class structs */           
22825  00  =3  /************************************************************/
22826  00  =3  typedef struct _ZW_NODE_ADD_STATUS_3BYTE_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 385 

22827  00  =3  {
22828  00  =3      BYTE      cmdClass;                     /* The command class */
22829  00  =3      BYTE      cmd;                          /* The command */
22830  00  =3      BYTE      seqNo;                        /**/
22831  00  =3      BYTE      status;                       /**/
22832  00  =3      BYTE      reserved;                     /**/
22833  00  =3      BYTE      newNodeId;                    /**/
22834  00  =3      BYTE      nodeInfoLength;               /**/
22835  00  =3      BYTE      properties1;                  /* masked byte */
22836  00  =3      BYTE      properties2;                  /* masked byte */
22837  00  =3      BYTE      basicDeviceClass;             /**/
22838  00  =3      BYTE      genericDeviceClass;           /**/
22839  00  =3      BYTE      specificDeviceClass;          /**/
22840  00  =3      BYTE      commandClass1;                /* MSB */
22841  00  =3      BYTE      commandClass2;                
22842  00  =3      BYTE      commandClass3;                /* LSB */
22843  00  =3  } ZW_NODE_ADD_STATUS_3BYTE_FRAME;
22844  00  =3  
22845  00  =3  /************************************************************/
22846  00  =3  /* Node Add Status 4byte command class structs */           
22847  00  =3  /************************************************************/
22848  00  =3  typedef struct _ZW_NODE_ADD_STATUS_4BYTE_FRAME_
22849  00  =3  {
22850  00  =3      BYTE      cmdClass;                     /* The command class */
22851  00  =3      BYTE      cmd;                          /* The command */
22852  00  =3      BYTE      seqNo;                        /**/
22853  00  =3      BYTE      status;                       /**/
22854  00  =3      BYTE      reserved;                     /**/
22855  00  =3      BYTE      newNodeId;                    /**/
22856  00  =3      BYTE      nodeInfoLength;               /**/
22857  00  =3      BYTE      properties1;                  /* masked byte */
22858  00  =3      BYTE      properties2;                  /* masked byte */
22859  00  =3      BYTE      basicDeviceClass;             /**/
22860  00  =3      BYTE      genericDeviceClass;           /**/
22861  00  =3      BYTE      specificDeviceClass;          /**/
22862  00  =3      BYTE      commandClass1;                /* MSB */
22863  00  =3      BYTE      commandClass2;                
22864  00  =3      BYTE      commandClass3;                
22865  00  =3      BYTE      commandClass4;                /* LSB */
22866  00  =3  } ZW_NODE_ADD_STATUS_4BYTE_FRAME;
22867  00  =3  
22868  00  =3  /************************************************************/
22869  00  =3  /* Node Remove command class structs */                     
22870  00  =3  /************************************************************/
22871  00  =3  typedef struct _ZW_NODE_REMOVE_FRAME_
22872  00  =3  {
22873  00  =3      BYTE      cmdClass;                     /* The command class */
22874  00  =3      BYTE      cmd;                          /* The command */
22875  00  =3      BYTE      seqNo;                        /**/
22876  00  =3      BYTE      reserved;                     /**/
22877  00  =3      BYTE      mode;                         /**/
22878  00  =3  } ZW_NODE_REMOVE_FRAME;
22879  00  =3  
22880  00  =3  /************************************************************/
22881  00  =3  /* Node Remove Status command class structs */              
22882  00  =3  /************************************************************/
22883  00  =3  typedef struct _ZW_NODE_REMOVE_STATUS_FRAME_
22884  00  =3  {
22885  00  =3      BYTE      cmdClass;                     /* The command class */
22886  00  =3      BYTE      cmd;                          /* The command */
22887  00  =3      BYTE      seqNo;                        /**/
22888  00  =3      BYTE      status;                       /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 386 

22889  00  =3      BYTE      nodeid;                       /**/
22890  00  =3  } ZW_NODE_REMOVE_STATUS_FRAME;
22891  00  =3  
22892  00  =3  /************************************************************/
22893  00  =3  /* Failed Node Replace command class structs */             
22894  00  =3  /************************************************************/
22895  00  =3  typedef struct _ZW_FAILED_NODE_REPLACE_FRAME_
22896  00  =3  {
22897  00  =3      BYTE      cmdClass;                     /* The command class */
22898  00  =3      BYTE      cmd;                          /* The command */
22899  00  =3      BYTE      seqNo;                        /**/
22900  00  =3      BYTE      nodeId;                       /**/
22901  00  =3      BYTE      txOptions;                    /**/
22902  00  =3      BYTE      mode;                         /**/
22903  00  =3  } ZW_FAILED_NODE_REPLACE_FRAME;
22904  00  =3  
22905  00  =3  /************************************************************/
22906  00  =3  /* Failed Node Replace Status command class structs */      
22907  00  =3  /************************************************************/
22908  00  =3  typedef struct _ZW_FAILED_NODE_REPLACE_STATUS_FRAME_
22909  00  =3  {
22910  00  =3      BYTE      cmdClass;                     /* The command class */
22911  00  =3      BYTE      cmd;                          /* The command */
22912  00  =3      BYTE      seqNo;                        /**/
22913  00  =3      BYTE      status;                       /**/
22914  00  =3      BYTE      nodeId;                       /**/
22915  00  =3  } ZW_FAILED_NODE_REPLACE_STATUS_FRAME;
22916  00  =3  
22917  00  =3  /************************************************************/
22918  00  =3  /* Node Neighbor Update Request command class structs */    
22919  00  =3  /************************************************************/
22920  00  =3  typedef struct _ZW_NODE_NEIGHBOR_UPDATE_REQUEST_FRAME_
22921  00  =3  {
22922  00  =3      BYTE      cmdClass;                     /* The command class */
22923  00  =3      BYTE      cmd;                          /* The command */
22924  00  =3      BYTE      seqNo;                        /**/
22925  00  =3      BYTE      nodeId;                       /**/
22926  00  =3  } ZW_NODE_NEIGHBOR_UPDATE_REQUEST_FRAME;
22927  00  =3  
22928  00  =3  /************************************************************/
22929  00  =3  /* Node Neighbor Update Status command class structs */     
22930  00  =3  /************************************************************/
22931  00  =3  typedef struct _ZW_NODE_NEIGHBOR_UPDATE_STATUS_FRAME_
22932  00  =3  {
22933  00  =3      BYTE      cmdClass;                     /* The command class */
22934  00  =3      BYTE      cmd;                          /* The command */
22935  00  =3      BYTE      seqNo;                        /**/
22936  00  =3      BYTE      status;                       /**/
22937  00  =3  } ZW_NODE_NEIGHBOR_UPDATE_STATUS_FRAME;
22938  00  =3  
22939  00  =3  /************************************************************/
22940  00  =3  /* Return Route Assign command class structs */             
22941  00  =3  /************************************************************/
22942  00  =3  typedef struct _ZW_RETURN_ROUTE_ASSIGN_FRAME_
22943  00  =3  {
22944  00  =3      BYTE      cmdClass;                     /* The command class */
22945  00  =3      BYTE      cmd;                          /* The command */
22946  00  =3      BYTE      seqNo;                        /**/
22947  00  =3      BYTE      sourceNodeId;                 /**/
22948  00  =3      BYTE      destinationNodeId;            /**/
22949  00  =3  } ZW_RETURN_ROUTE_ASSIGN_FRAME;
22950  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 387 

22951  00  =3  /************************************************************/
22952  00  =3  /* Return Route Assign Complete command class structs */    
22953  00  =3  /************************************************************/
22954  00  =3  typedef struct _ZW_RETURN_ROUTE_ASSIGN_COMPLETE_FRAME_
22955  00  =3  {
22956  00  =3      BYTE      cmdClass;                     /* The command class */
22957  00  =3      BYTE      cmd;                          /* The command */
22958  00  =3      BYTE      seqNo;                        /**/
22959  00  =3      BYTE      status;                       /**/
22960  00  =3  } ZW_RETURN_ROUTE_ASSIGN_COMPLETE_FRAME;
22961  00  =3  
22962  00  =3  /************************************************************/
22963  00  =3  /* Return Route Delete command class structs */             
22964  00  =3  /************************************************************/
22965  00  =3  typedef struct _ZW_RETURN_ROUTE_DELETE_FRAME_
22966  00  =3  {
22967  00  =3      BYTE      cmdClass;                     /* The command class */
22968  00  =3      BYTE      cmd;                          /* The command */
22969  00  =3      BYTE      seqNo;                        /**/
22970  00  =3      BYTE      nodeId;                       /**/
22971  00  =3  } ZW_RETURN_ROUTE_DELETE_FRAME;
22972  00  =3  
22973  00  =3  /************************************************************/
22974  00  =3  /* Return Route Delete Complete command class structs */    
22975  00  =3  /************************************************************/
22976  00  =3  typedef struct _ZW_RETURN_ROUTE_DELETE_COMPLETE_FRAME_
22977  00  =3  {
22978  00  =3      BYTE      cmdClass;                     /* The command class */
22979  00  =3      BYTE      cmd;                          /* The command */
22980  00  =3      BYTE      seqNo;                        /**/
22981  00  =3      BYTE      status;                       /**/
22982  00  =3  } ZW_RETURN_ROUTE_DELETE_COMPLETE_FRAME;
22983  00  =3  
22984  00  =3  /************************************************************/
22985  00  =3  /* Failed Node Remove V2 command class structs */           
22986  00  =3  /************************************************************/
22987  00  =3  typedef struct _ZW_FAILED_NODE_REMOVE_V2_FRAME_
22988  00  =3  {
22989  00  =3      BYTE      cmdClass;                     /* The command class */
22990  00  =3      BYTE      cmd;                          /* The command */
22991  00  =3      BYTE      seqNo;                        /**/
22992  00  =3      BYTE      nodeId;                       /**/
22993  00  =3  } ZW_FAILED_NODE_REMOVE_V2_FRAME;
22994  00  =3  
22995  00  =3  /************************************************************/
22996  00  =3  /* Failed Node Remove Status V2 command class structs */    
22997  00  =3  /************************************************************/
22998  00  =3  typedef struct _ZW_FAILED_NODE_REMOVE_STATUS_V2_FRAME_
22999  00  =3  {
23000  00  =3      BYTE      cmdClass;                     /* The command class */
23001  00  =3      BYTE      cmd;                          /* The command */
23002  00  =3      BYTE      seqNo;                        /**/
23003  00  =3      BYTE      status;                       /**/
23004  00  =3      BYTE      nodeId;                       /**/
23005  00  =3  } ZW_FAILED_NODE_REMOVE_STATUS_V2_FRAME;
23006  00  =3  
23007  00  =3  /************************************************************/
23008  00  =3  /* Node Add V2 command class structs */                     
23009  00  =3  /************************************************************/
23010  00  =3  typedef struct _ZW_NODE_ADD_V2_FRAME_
23011  00  =3  {
23012  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 388 

23013  00  =3      BYTE      cmd;                          /* The command */
23014  00  =3      BYTE      seqNo;                        /**/
23015  00  =3      BYTE      reserved;                     /**/
23016  00  =3      BYTE      mode;                         /**/
23017  00  =3      BYTE      txOptions;                    /**/
23018  00  =3  } ZW_NODE_ADD_V2_FRAME;
23019  00  =3  
23020  00  =3  /************************************************************/
23021  00  =3  /* Node Add Status 1byte V2 command class structs */        
23022  00  =3  /************************************************************/
23023  00  =3  typedef struct _ZW_NODE_ADD_STATUS_1BYTE_V2_FRAME_
23024  00  =3  {
23025  00  =3      BYTE      cmdClass;                     /* The command class */
23026  00  =3      BYTE      cmd;                          /* The command */
23027  00  =3      BYTE      seqNo;                        /**/
23028  00  =3      BYTE      status;                       /**/
23029  00  =3      BYTE      reserved;                     /**/
23030  00  =3      BYTE      newNodeId;                    /**/
23031  00  =3      BYTE      nodeInfoLength;               /**/
23032  00  =3      BYTE      properties1;                  /* masked byte */
23033  00  =3      BYTE      properties2;                  /* masked byte */
23034  00  =3      BYTE      basicDeviceClass;             /**/
23035  00  =3      BYTE      genericDeviceClass;           /**/
23036  00  =3      BYTE      specificDeviceClass;          /**/
23037  00  =3      BYTE      commandClass1;                
23038  00  =3      BYTE      grantedKeys;                  /**/
23039  00  =3      BYTE      kexFailType;                  /**/
23040  00  =3  } ZW_NODE_ADD_STATUS_1BYTE_V2_FRAME;
23041  00  =3  
23042  00  =3  /************************************************************/
23043  00  =3  /* Node Add Status 2byte V2 command class structs */        
23044  00  =3  /************************************************************/
23045  00  =3  typedef struct _ZW_NODE_ADD_STATUS_2BYTE_V2_FRAME_
23046  00  =3  {
23047  00  =3      BYTE      cmdClass;                     /* The command class */
23048  00  =3      BYTE      cmd;                          /* The command */
23049  00  =3      BYTE      seqNo;                        /**/
23050  00  =3      BYTE      status;                       /**/
23051  00  =3      BYTE      reserved;                     /**/
23052  00  =3      BYTE      newNodeId;                    /**/
23053  00  =3      BYTE      nodeInfoLength;               /**/
23054  00  =3      BYTE      properties1;                  /* masked byte */
23055  00  =3      BYTE      properties2;                  /* masked byte */
23056  00  =3      BYTE      basicDeviceClass;             /**/
23057  00  =3      BYTE      genericDeviceClass;           /**/
23058  00  =3      BYTE      specificDeviceClass;          /**/
23059  00  =3      BYTE      commandClass1;                /* MSB */
23060  00  =3      BYTE      commandClass2;                /* LSB */
23061  00  =3      BYTE      grantedKeys;                  /**/
23062  00  =3      BYTE      kexFailType;                  /**/
23063  00  =3  } ZW_NODE_ADD_STATUS_2BYTE_V2_FRAME;
23064  00  =3  
23065  00  =3  /************************************************************/
23066  00  =3  /* Node Add Status 3byte V2 command class structs */        
23067  00  =3  /************************************************************/
23068  00  =3  typedef struct _ZW_NODE_ADD_STATUS_3BYTE_V2_FRAME_
23069  00  =3  {
23070  00  =3      BYTE      cmdClass;                     /* The command class */
23071  00  =3      BYTE      cmd;                          /* The command */
23072  00  =3      BYTE      seqNo;                        /**/
23073  00  =3      BYTE      status;                       /**/
23074  00  =3      BYTE      reserved;                     /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 389 

23075  00  =3      BYTE      newNodeId;                    /**/
23076  00  =3      BYTE      nodeInfoLength;               /**/
23077  00  =3      BYTE      properties1;                  /* masked byte */
23078  00  =3      BYTE      properties2;                  /* masked byte */
23079  00  =3      BYTE      basicDeviceClass;             /**/
23080  00  =3      BYTE      genericDeviceClass;           /**/
23081  00  =3      BYTE      specificDeviceClass;          /**/
23082  00  =3      BYTE      commandClass1;                /* MSB */
23083  00  =3      BYTE      commandClass2;                
23084  00  =3      BYTE      commandClass3;                /* LSB */
23085  00  =3      BYTE      grantedKeys;                  /**/
23086  00  =3      BYTE      kexFailType;                  /**/
23087  00  =3  } ZW_NODE_ADD_STATUS_3BYTE_V2_FRAME;
23088  00  =3  
23089  00  =3  /************************************************************/
23090  00  =3  /* Node Add Status 4byte V2 command class structs */        
23091  00  =3  /************************************************************/
23092  00  =3  typedef struct _ZW_NODE_ADD_STATUS_4BYTE_V2_FRAME_
23093  00  =3  {
23094  00  =3      BYTE      cmdClass;                     /* The command class */
23095  00  =3      BYTE      cmd;                          /* The command */
23096  00  =3      BYTE      seqNo;                        /**/
23097  00  =3      BYTE      status;                       /**/
23098  00  =3      BYTE      reserved;                     /**/
23099  00  =3      BYTE      newNodeId;                    /**/
23100  00  =3      BYTE      nodeInfoLength;               /**/
23101  00  =3      BYTE      properties1;                  /* masked byte */
23102  00  =3      BYTE      properties2;                  /* masked byte */
23103  00  =3      BYTE      basicDeviceClass;             /**/
23104  00  =3      BYTE      genericDeviceClass;           /**/
23105  00  =3      BYTE      specificDeviceClass;          /**/
23106  00  =3      BYTE      commandClass1;                /* MSB */
23107  00  =3      BYTE      commandClass2;                
23108  00  =3      BYTE      commandClass3;                
23109  00  =3      BYTE      commandClass4;                /* LSB */
23110  00  =3      BYTE      grantedKeys;                  /**/
23111  00  =3      BYTE      kexFailType;                  /**/
23112  00  =3  } ZW_NODE_ADD_STATUS_4BYTE_V2_FRAME;
23113  00  =3  
23114  00  =3  /************************************************************/
23115  00  =3  /* Node Remove V2 command class structs */                  
23116  00  =3  /************************************************************/
23117  00  =3  typedef struct _ZW_NODE_REMOVE_V2_FRAME_
23118  00  =3  {
23119  00  =3      BYTE      cmdClass;                     /* The command class */
23120  00  =3      BYTE      cmd;                          /* The command */
23121  00  =3      BYTE      seqNo;                        /**/
23122  00  =3      BYTE      reserved;                     /**/
23123  00  =3      BYTE      mode;                         /**/
23124  00  =3  } ZW_NODE_REMOVE_V2_FRAME;
23125  00  =3  
23126  00  =3  /************************************************************/
23127  00  =3  /* Node Remove Status V2 command class structs */           
23128  00  =3  /************************************************************/
23129  00  =3  typedef struct _ZW_NODE_REMOVE_STATUS_V2_FRAME_
23130  00  =3  {
23131  00  =3      BYTE      cmdClass;                     /* The command class */
23132  00  =3      BYTE      cmd;                          /* The command */
23133  00  =3      BYTE      seqNo;                        /**/
23134  00  =3      BYTE      status;                       /**/
23135  00  =3      BYTE      nodeid;                       /**/
23136  00  =3  } ZW_NODE_REMOVE_STATUS_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 390 

23137  00  =3  
23138  00  =3  /************************************************************/
23139  00  =3  /* Failed Node Replace V2 command class structs */          
23140  00  =3  /************************************************************/
23141  00  =3  typedef struct _ZW_FAILED_NODE_REPLACE_V2_FRAME_
23142  00  =3  {
23143  00  =3      BYTE      cmdClass;                     /* The command class */
23144  00  =3      BYTE      cmd;                          /* The command */
23145  00  =3      BYTE      seqNo;                        /**/
23146  00  =3      BYTE      nodeId;                       /**/
23147  00  =3      BYTE      txOptions;                    /**/
23148  00  =3      BYTE      mode;                         /**/
23149  00  =3  } ZW_FAILED_NODE_REPLACE_V2_FRAME;
23150  00  =3  
23151  00  =3  /************************************************************/
23152  00  =3  /* Failed Node Replace Status V2 command class structs */   
23153  00  =3  /************************************************************/
23154  00  =3  typedef struct _ZW_FAILED_NODE_REPLACE_STATUS_V2_FRAME_
23155  00  =3  {
23156  00  =3      BYTE      cmdClass;                     /* The command class */
23157  00  =3      BYTE      cmd;                          /* The command */
23158  00  =3      BYTE      seqNo;                        /**/
23159  00  =3      BYTE      status;                       /**/
23160  00  =3      BYTE      nodeId;                       /**/
23161  00  =3      BYTE      grantedKeys;                  /**/
23162  00  =3      BYTE      kexFailType;                  /**/
23163  00  =3  } ZW_FAILED_NODE_REPLACE_STATUS_V2_FRAME;
23164  00  =3  
23165  00  =3  /************************************************************/
23166  00  =3  /* Node Neighbor Update Request V2 command class structs */ 
23167  00  =3  /************************************************************/
23168  00  =3  typedef struct _ZW_NODE_NEIGHBOR_UPDATE_REQUEST_V2_FRAME_
23169  00  =3  {
23170  00  =3      BYTE      cmdClass;                     /* The command class */
23171  00  =3      BYTE      cmd;                          /* The command */
23172  00  =3      BYTE      seqNo;                        /**/
23173  00  =3      BYTE      nodeId;                       /**/
23174  00  =3  } ZW_NODE_NEIGHBOR_UPDATE_REQUEST_V2_FRAME;
23175  00  =3  
23176  00  =3  /************************************************************/
23177  00  =3  /* Node Neighbor Update Status V2 command class structs */  
23178  00  =3  /************************************************************/
23179  00  =3  typedef struct _ZW_NODE_NEIGHBOR_UPDATE_STATUS_V2_FRAME_
23180  00  =3  {
23181  00  =3      BYTE      cmdClass;                     /* The command class */
23182  00  =3      BYTE      cmd;                          /* The command */
23183  00  =3      BYTE      seqNo;                        /**/
23184  00  =3      BYTE      status;                       /**/
23185  00  =3  } ZW_NODE_NEIGHBOR_UPDATE_STATUS_V2_FRAME;
23186  00  =3  
23187  00  =3  /************************************************************/
23188  00  =3  /* Return Route Assign V2 command class structs */          
23189  00  =3  /************************************************************/
23190  00  =3  typedef struct _ZW_RETURN_ROUTE_ASSIGN_V2_FRAME_
23191  00  =3  {
23192  00  =3      BYTE      cmdClass;                     /* The command class */
23193  00  =3      BYTE      cmd;                          /* The command */
23194  00  =3      BYTE      seqNo;                        /**/
23195  00  =3      BYTE      sourceNodeId;                 /**/
23196  00  =3      BYTE      destinationNodeId;            /**/
23197  00  =3  } ZW_RETURN_ROUTE_ASSIGN_V2_FRAME;
23198  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 391 

23199  00  =3  /************************************************************/
23200  00  =3  /* Return Route Assign Complete V2 command class structs */ 
23201  00  =3  /************************************************************/
23202  00  =3  typedef struct _ZW_RETURN_ROUTE_ASSIGN_COMPLETE_V2_FRAME_
23203  00  =3  {
23204  00  =3      BYTE      cmdClass;                     /* The command class */
23205  00  =3      BYTE      cmd;                          /* The command */
23206  00  =3      BYTE      seqNo;                        /**/
23207  00  =3      BYTE      status;                       /**/
23208  00  =3  } ZW_RETURN_ROUTE_ASSIGN_COMPLETE_V2_FRAME;
23209  00  =3  
23210  00  =3  /************************************************************/
23211  00  =3  /* Return Route Delete V2 command class structs */          
23212  00  =3  /************************************************************/
23213  00  =3  typedef struct _ZW_RETURN_ROUTE_DELETE_V2_FRAME_
23214  00  =3  {
23215  00  =3      BYTE      cmdClass;                     /* The command class */
23216  00  =3      BYTE      cmd;                          /* The command */
23217  00  =3      BYTE      seqNo;                        /**/
23218  00  =3      BYTE      nodeId;                       /**/
23219  00  =3  } ZW_RETURN_ROUTE_DELETE_V2_FRAME;
23220  00  =3  
23221  00  =3  /************************************************************/
23222  00  =3  /* Return Route Delete Complete V2 command class structs */ 
23223  00  =3  /************************************************************/
23224  00  =3  typedef struct _ZW_RETURN_ROUTE_DELETE_COMPLETE_V2_FRAME_
23225  00  =3  {
23226  00  =3      BYTE      cmdClass;                     /* The command class */
23227  00  =3      BYTE      cmd;                          /* The command */
23228  00  =3      BYTE      seqNo;                        /**/
23229  00  =3      BYTE      status;                       /**/
23230  00  =3  } ZW_RETURN_ROUTE_DELETE_COMPLETE_V2_FRAME;
23231  00  =3  
23232  00  =3  /************************************************************/
23233  00  =3  /* Node Add Keys Report V2 command class structs */         
23234  00  =3  /************************************************************/
23235  00  =3  typedef struct _ZW_NODE_ADD_KEYS_REPORT_V2_FRAME_
23236  00  =3  {
23237  00  =3      BYTE      cmdClass;                     /* The command class */
23238  00  =3      BYTE      cmd;                          /* The command */
23239  00  =3      BYTE      seqNo;                        /**/
23240  00  =3      BYTE      properties1;                  /* masked byte */
23241  00  =3      BYTE      requestedKeys;                /**/
23242  00  =3  } ZW_NODE_ADD_KEYS_REPORT_V2_FRAME;
23243  00  =3  
23244  00  =3  /************************************************************/
23245  00  =3  /* Node Add Keys Set V2 command class structs */            
23246  00  =3  /************************************************************/
23247  00  =3  typedef struct _ZW_NODE_ADD_KEYS_SET_V2_FRAME_
23248  00  =3  {
23249  00  =3      BYTE      cmdClass;                     /* The command class */
23250  00  =3      BYTE      cmd;                          /* The command */
23251  00  =3      BYTE      seqNo;                        /**/
23252  00  =3      BYTE      properties1;                  /* masked byte */
23253  00  =3      BYTE      grantedKeys;                  /**/
23254  00  =3  } ZW_NODE_ADD_KEYS_SET_V2_FRAME;
23255  00  =3  
23256  00  =3  /************************************************************/
23257  00  =3  /* Node Add Dsk Report V2 command class structs */          
23258  00  =3  /************************************************************/
23259  00  =3  typedef struct _ZW_NODE_ADD_DSK_REPORT_V2_FRAME_
23260  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 392 

23261  00  =3      BYTE      cmdClass;                     /* The command class */
23262  00  =3      BYTE      cmd;                          /* The command */
23263  00  =3      BYTE      seqNo;                        /**/
23264  00  =3      BYTE      properties1;                  /* masked byte */
23265  00  =3      BYTE      dsk1;                         /* MSB */
23266  00  =3      BYTE      dsk2;                         
23267  00  =3      BYTE      dsk3;                         
23268  00  =3      BYTE      dsk4;                         
23269  00  =3      BYTE      dsk5;                         
23270  00  =3      BYTE      dsk6;                         
23271  00  =3      BYTE      dsk7;                         
23272  00  =3      BYTE      dsk8;                         
23273  00  =3      BYTE      dsk9;                         
23274  00  =3      BYTE      dsk10;                        
23275  00  =3      BYTE      dsk11;                        
23276  00  =3      BYTE      dsk12;                        
23277  00  =3      BYTE      dsk13;                        
23278  00  =3      BYTE      dsk14;                        
23279  00  =3      BYTE      dsk15;                        
23280  00  =3      BYTE      dsk16;                        /* LSB */
23281  00  =3  } ZW_NODE_ADD_DSK_REPORT_V2_FRAME;
23282  00  =3  
23283  00  =3  /************************************************************/
23284  00  =3  /* Node Add Dsk Set 1byte V2 command class structs */       
23285  00  =3  /************************************************************/
23286  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_1BYTE_V2_FRAME_
23287  00  =3  {
23288  00  =3      BYTE      cmdClass;                     /* The command class */
23289  00  =3      BYTE      cmd;                          /* The command */
23290  00  =3      BYTE      seqNo;                        /**/
23291  00  =3      BYTE      properties1;                  /* masked byte */
23292  00  =3      BYTE      inputDsk1;                    
23293  00  =3  } ZW_NODE_ADD_DSK_SET_1BYTE_V2_FRAME;
23294  00  =3  
23295  00  =3  /************************************************************/
23296  00  =3  /* Node Add Dsk Set 2byte V2 command class structs */       
23297  00  =3  /************************************************************/
23298  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_2BYTE_V2_FRAME_
23299  00  =3  {
23300  00  =3      BYTE      cmdClass;                     /* The command class */
23301  00  =3      BYTE      cmd;                          /* The command */
23302  00  =3      BYTE      seqNo;                        /**/
23303  00  =3      BYTE      properties1;                  /* masked byte */
23304  00  =3      BYTE      inputDsk1;                    /* MSB */
23305  00  =3      BYTE      inputDsk2;                    /* LSB */
23306  00  =3  } ZW_NODE_ADD_DSK_SET_2BYTE_V2_FRAME;
23307  00  =3  
23308  00  =3  /************************************************************/
23309  00  =3  /* Node Add Dsk Set 3byte V2 command class structs */       
23310  00  =3  /************************************************************/
23311  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_3BYTE_V2_FRAME_
23312  00  =3  {
23313  00  =3      BYTE      cmdClass;                     /* The command class */
23314  00  =3      BYTE      cmd;                          /* The command */
23315  00  =3      BYTE      seqNo;                        /**/
23316  00  =3      BYTE      properties1;                  /* masked byte */
23317  00  =3      BYTE      inputDsk1;                    /* MSB */
23318  00  =3      BYTE      inputDsk2;                    
23319  00  =3      BYTE      inputDsk3;                    /* LSB */
23320  00  =3  } ZW_NODE_ADD_DSK_SET_3BYTE_V2_FRAME;
23321  00  =3  
23322  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 393 

23323  00  =3  /* Node Add Dsk Set 4byte V2 command class structs */       
23324  00  =3  /************************************************************/
23325  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_4BYTE_V2_FRAME_
23326  00  =3  {
23327  00  =3      BYTE      cmdClass;                     /* The command class */
23328  00  =3      BYTE      cmd;                          /* The command */
23329  00  =3      BYTE      seqNo;                        /**/
23330  00  =3      BYTE      properties1;                  /* masked byte */
23331  00  =3      BYTE      inputDsk1;                    /* MSB */
23332  00  =3      BYTE      inputDsk2;                    
23333  00  =3      BYTE      inputDsk3;                    
23334  00  =3      BYTE      inputDsk4;                    /* LSB */
23335  00  =3  } ZW_NODE_ADD_DSK_SET_4BYTE_V2_FRAME;
23336  00  =3  
23337  00  =3  /************************************************************/
23338  00  =3  /* Failed Node Remove V3 command class structs */           
23339  00  =3  /************************************************************/
23340  00  =3  typedef struct _ZW_FAILED_NODE_REMOVE_V3_FRAME_
23341  00  =3  {
23342  00  =3      BYTE      cmdClass;                     /* The command class */
23343  00  =3      BYTE      cmd;                          /* The command */
23344  00  =3      BYTE      seqNo;                        /**/
23345  00  =3      BYTE      nodeId;                       /**/
23346  00  =3  } ZW_FAILED_NODE_REMOVE_V3_FRAME;
23347  00  =3  
23348  00  =3  /************************************************************/
23349  00  =3  /* Failed Node Remove Status V3 command class structs */    
23350  00  =3  /************************************************************/
23351  00  =3  typedef struct _ZW_FAILED_NODE_REMOVE_STATUS_V3_FRAME_
23352  00  =3  {
23353  00  =3      BYTE      cmdClass;                     /* The command class */
23354  00  =3      BYTE      cmd;                          /* The command */
23355  00  =3      BYTE      seqNo;                        /**/
23356  00  =3      BYTE      status;                       /**/
23357  00  =3      BYTE      nodeId;                       /**/
23358  00  =3  } ZW_FAILED_NODE_REMOVE_STATUS_V3_FRAME;
23359  00  =3  
23360  00  =3  /************************************************************/
23361  00  =3  /* Node Add V3 command class structs */                     
23362  00  =3  /************************************************************/
23363  00  =3  typedef struct _ZW_NODE_ADD_V3_FRAME_
23364  00  =3  {
23365  00  =3      BYTE      cmdClass;                     /* The command class */
23366  00  =3      BYTE      cmd;                          /* The command */
23367  00  =3      BYTE      seqNo;                        /**/
23368  00  =3      BYTE      reserved;                     /**/
23369  00  =3      BYTE      mode;                         /**/
23370  00  =3      BYTE      txOptions;                    /**/
23371  00  =3  } ZW_NODE_ADD_V3_FRAME;
23372  00  =3  
23373  00  =3  /************************************************************/
23374  00  =3  /* Node Add Status 1byte V3 command class structs */        
23375  00  =3  /************************************************************/
23376  00  =3  typedef struct _ZW_NODE_ADD_STATUS_1BYTE_V3_FRAME_
23377  00  =3  {
23378  00  =3      BYTE      cmdClass;                     /* The command class */
23379  00  =3      BYTE      cmd;                          /* The command */
23380  00  =3      BYTE      seqNo;                        /**/
23381  00  =3      BYTE      status;                       /**/
23382  00  =3      BYTE      reserved1;                    /**/
23383  00  =3      BYTE      newNodeId;                    /**/
23384  00  =3      BYTE      nodeInfoLength;               /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 394 

23385  00  =3      BYTE      properties1;                  /* masked byte */
23386  00  =3      BYTE      properties2;                  /* masked byte */
23387  00  =3      BYTE      basicDeviceClass;             /**/
23388  00  =3      BYTE      genericDeviceClass;           /**/
23389  00  =3      BYTE      specificDeviceClass;          /**/
23390  00  =3      BYTE      commandClass1;                
23391  00  =3      BYTE      grantedKeys;                  /**/
23392  00  =3      BYTE      kexFailType;                  /**/
23393  00  =3      BYTE      properties3;                  /* masked byte */
23394  00  =3      BYTE      dsk1;                         
23395  00  =3  } ZW_NODE_ADD_STATUS_1BYTE_V3_FRAME;
23396  00  =3  
23397  00  =3  /************************************************************/
23398  00  =3  /* Node Add Status 2byte V3 command class structs */        
23399  00  =3  /************************************************************/
23400  00  =3  typedef struct _ZW_NODE_ADD_STATUS_2BYTE_V3_FRAME_
23401  00  =3  {
23402  00  =3      BYTE      cmdClass;                     /* The command class */
23403  00  =3      BYTE      cmd;                          /* The command */
23404  00  =3      BYTE      seqNo;                        /**/
23405  00  =3      BYTE      status;                       /**/
23406  00  =3      BYTE      reserved1;                    /**/
23407  00  =3      BYTE      newNodeId;                    /**/
23408  00  =3      BYTE      nodeInfoLength;               /**/
23409  00  =3      BYTE      properties1;                  /* masked byte */
23410  00  =3      BYTE      properties2;                  /* masked byte */
23411  00  =3      BYTE      basicDeviceClass;             /**/
23412  00  =3      BYTE      genericDeviceClass;           /**/
23413  00  =3      BYTE      specificDeviceClass;          /**/
23414  00  =3      BYTE      commandClass1;                /* MSB */
23415  00  =3      BYTE      commandClass2;                /* LSB */
23416  00  =3      BYTE      grantedKeys;                  /**/
23417  00  =3      BYTE      kexFailType;                  /**/
23418  00  =3      BYTE      properties3;                  /* masked byte */
23419  00  =3      BYTE      dsk1;                         /* MSB */
23420  00  =3      BYTE      dsk2;                         /* LSB */
23421  00  =3  } ZW_NODE_ADD_STATUS_2BYTE_V3_FRAME;
23422  00  =3  
23423  00  =3  /************************************************************/
23424  00  =3  /* Node Add Status 3byte V3 command class structs */        
23425  00  =3  /************************************************************/
23426  00  =3  typedef struct _ZW_NODE_ADD_STATUS_3BYTE_V3_FRAME_
23427  00  =3  {
23428  00  =3      BYTE      cmdClass;                     /* The command class */
23429  00  =3      BYTE      cmd;                          /* The command */
23430  00  =3      BYTE      seqNo;                        /**/
23431  00  =3      BYTE      status;                       /**/
23432  00  =3      BYTE      reserved1;                    /**/
23433  00  =3      BYTE      newNodeId;                    /**/
23434  00  =3      BYTE      nodeInfoLength;               /**/
23435  00  =3      BYTE      properties1;                  /* masked byte */
23436  00  =3      BYTE      properties2;                  /* masked byte */
23437  00  =3      BYTE      basicDeviceClass;             /**/
23438  00  =3      BYTE      genericDeviceClass;           /**/
23439  00  =3      BYTE      specificDeviceClass;          /**/
23440  00  =3      BYTE      commandClass1;                /* MSB */
23441  00  =3      BYTE      commandClass2;                
23442  00  =3      BYTE      commandClass3;                /* LSB */
23443  00  =3      BYTE      grantedKeys;                  /**/
23444  00  =3      BYTE      kexFailType;                  /**/
23445  00  =3      BYTE      properties3;                  /* masked byte */
23446  00  =3      BYTE      dsk1;                         /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 395 

23447  00  =3      BYTE      dsk2;                         
23448  00  =3      BYTE      dsk3;                         /* LSB */
23449  00  =3  } ZW_NODE_ADD_STATUS_3BYTE_V3_FRAME;
23450  00  =3  
23451  00  =3  /************************************************************/
23452  00  =3  /* Node Add Status 4byte V3 command class structs */        
23453  00  =3  /************************************************************/
23454  00  =3  typedef struct _ZW_NODE_ADD_STATUS_4BYTE_V3_FRAME_
23455  00  =3  {
23456  00  =3      BYTE      cmdClass;                     /* The command class */
23457  00  =3      BYTE      cmd;                          /* The command */
23458  00  =3      BYTE      seqNo;                        /**/
23459  00  =3      BYTE      status;                       /**/
23460  00  =3      BYTE      reserved1;                    /**/
23461  00  =3      BYTE      newNodeId;                    /**/
23462  00  =3      BYTE      nodeInfoLength;               /**/
23463  00  =3      BYTE      properties1;                  /* masked byte */
23464  00  =3      BYTE      properties2;                  /* masked byte */
23465  00  =3      BYTE      basicDeviceClass;             /**/
23466  00  =3      BYTE      genericDeviceClass;           /**/
23467  00  =3      BYTE      specificDeviceClass;          /**/
23468  00  =3      BYTE      commandClass1;                /* MSB */
23469  00  =3      BYTE      commandClass2;                
23470  00  =3      BYTE      commandClass3;                
23471  00  =3      BYTE      commandClass4;                /* LSB */
23472  00  =3      BYTE      grantedKeys;                  /**/
23473  00  =3      BYTE      kexFailType;                  /**/
23474  00  =3      BYTE      properties3;                  /* masked byte */
23475  00  =3      BYTE      dsk1;                         /* MSB */
23476  00  =3      BYTE      dsk2;                         
23477  00  =3      BYTE      dsk3;                         
23478  00  =3      BYTE      dsk4;                         /* LSB */
23479  00  =3  } ZW_NODE_ADD_STATUS_4BYTE_V3_FRAME;
23480  00  =3  
23481  00  =3  /************************************************************/
23482  00  =3  /* Node Remove V3 command class structs */                  
23483  00  =3  /************************************************************/
23484  00  =3  typedef struct _ZW_NODE_REMOVE_V3_FRAME_
23485  00  =3  {
23486  00  =3      BYTE      cmdClass;                     /* The command class */
23487  00  =3      BYTE      cmd;                          /* The command */
23488  00  =3      BYTE      seqNo;                        /**/
23489  00  =3      BYTE      reserved;                     /**/
23490  00  =3      BYTE      mode;                         /**/
23491  00  =3  } ZW_NODE_REMOVE_V3_FRAME;
23492  00  =3  
23493  00  =3  /************************************************************/
23494  00  =3  /* Node Remove Status V3 command class structs */           
23495  00  =3  /************************************************************/
23496  00  =3  typedef struct _ZW_NODE_REMOVE_STATUS_V3_FRAME_
23497  00  =3  {
23498  00  =3      BYTE      cmdClass;                     /* The command class */
23499  00  =3      BYTE      cmd;                          /* The command */
23500  00  =3      BYTE      seqNo;                        /**/
23501  00  =3      BYTE      status;                       /**/
23502  00  =3      BYTE      nodeid;                       /**/
23503  00  =3  } ZW_NODE_REMOVE_STATUS_V3_FRAME;
23504  00  =3  
23505  00  =3  /************************************************************/
23506  00  =3  /* Failed Node Replace V3 command class structs */          
23507  00  =3  /************************************************************/
23508  00  =3  typedef struct _ZW_FAILED_NODE_REPLACE_V3_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 396 

23509  00  =3  {
23510  00  =3      BYTE      cmdClass;                     /* The command class */
23511  00  =3      BYTE      cmd;                          /* The command */
23512  00  =3      BYTE      seqNo;                        /**/
23513  00  =3      BYTE      nodeId;                       /**/
23514  00  =3      BYTE      txOptions;                    /**/
23515  00  =3      BYTE      mode;                         /**/
23516  00  =3  } ZW_FAILED_NODE_REPLACE_V3_FRAME;
23517  00  =3  
23518  00  =3  /************************************************************/
23519  00  =3  /* Failed Node Replace Status V3 command class structs */   
23520  00  =3  /************************************************************/
23521  00  =3  typedef struct _ZW_FAILED_NODE_REPLACE_STATUS_V3_FRAME_
23522  00  =3  {
23523  00  =3      BYTE      cmdClass;                     /* The command class */
23524  00  =3      BYTE      cmd;                          /* The command */
23525  00  =3      BYTE      seqNo;                        /**/
23526  00  =3      BYTE      status;                       /**/
23527  00  =3      BYTE      nodeId;                       /**/
23528  00  =3      BYTE      grantedKeys;                  /**/
23529  00  =3      BYTE      kexFailType;                  /**/
23530  00  =3  } ZW_FAILED_NODE_REPLACE_STATUS_V3_FRAME;
23531  00  =3  
23532  00  =3  /************************************************************/
23533  00  =3  /* Node Neighbor Update Request V3 command class structs */ 
23534  00  =3  /************************************************************/
23535  00  =3  typedef struct _ZW_NODE_NEIGHBOR_UPDATE_REQUEST_V3_FRAME_
23536  00  =3  {
23537  00  =3      BYTE      cmdClass;                     /* The command class */
23538  00  =3      BYTE      cmd;                          /* The command */
23539  00  =3      BYTE      seqNo;                        /**/
23540  00  =3      BYTE      nodeId;                       /**/
23541  00  =3  } ZW_NODE_NEIGHBOR_UPDATE_REQUEST_V3_FRAME;
23542  00  =3  
23543  00  =3  /************************************************************/
23544  00  =3  /* Node Neighbor Update Status V3 command class structs */  
23545  00  =3  /************************************************************/
23546  00  =3  typedef struct _ZW_NODE_NEIGHBOR_UPDATE_STATUS_V3_FRAME_
23547  00  =3  {
23548  00  =3      BYTE      cmdClass;                     /* The command class */
23549  00  =3      BYTE      cmd;                          /* The command */
23550  00  =3      BYTE      seqNo;                        /**/
23551  00  =3      BYTE      status;                       /**/
23552  00  =3  } ZW_NODE_NEIGHBOR_UPDATE_STATUS_V3_FRAME;
23553  00  =3  
23554  00  =3  /************************************************************/
23555  00  =3  /* Return Route Assign V3 command class structs */          
23556  00  =3  /************************************************************/
23557  00  =3  typedef struct _ZW_RETURN_ROUTE_ASSIGN_V3_FRAME_
23558  00  =3  {
23559  00  =3      BYTE      cmdClass;                     /* The command class */
23560  00  =3      BYTE      cmd;                          /* The command */
23561  00  =3      BYTE      seqNo;                        /**/
23562  00  =3      BYTE      sourceNodeId;                 /**/
23563  00  =3      BYTE      destinationNodeId;            /**/
23564  00  =3  } ZW_RETURN_ROUTE_ASSIGN_V3_FRAME;
23565  00  =3  
23566  00  =3  /************************************************************/
23567  00  =3  /* Return Route Assign Complete V3 command class structs */ 
23568  00  =3  /************************************************************/
23569  00  =3  typedef struct _ZW_RETURN_ROUTE_ASSIGN_COMPLETE_V3_FRAME_
23570  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 397 

23571  00  =3      BYTE      cmdClass;                     /* The command class */
23572  00  =3      BYTE      cmd;                          /* The command */
23573  00  =3      BYTE      seqNo;                        /**/
23574  00  =3      BYTE      status;                       /**/
23575  00  =3  } ZW_RETURN_ROUTE_ASSIGN_COMPLETE_V3_FRAME;
23576  00  =3  
23577  00  =3  /************************************************************/
23578  00  =3  /* Return Route Delete V3 command class structs */          
23579  00  =3  /************************************************************/
23580  00  =3  typedef struct _ZW_RETURN_ROUTE_DELETE_V3_FRAME_
23581  00  =3  {
23582  00  =3      BYTE      cmdClass;                     /* The command class */
23583  00  =3      BYTE      cmd;                          /* The command */
23584  00  =3      BYTE      seqNo;                        /**/
23585  00  =3      BYTE      nodeId;                       /**/
23586  00  =3  } ZW_RETURN_ROUTE_DELETE_V3_FRAME;
23587  00  =3  
23588  00  =3  /************************************************************/
23589  00  =3  /* Return Route Delete Complete V3 command class structs */ 
23590  00  =3  /************************************************************/
23591  00  =3  typedef struct _ZW_RETURN_ROUTE_DELETE_COMPLETE_V3_FRAME_
23592  00  =3  {
23593  00  =3      BYTE      cmdClass;                     /* The command class */
23594  00  =3      BYTE      cmd;                          /* The command */
23595  00  =3      BYTE      seqNo;                        /**/
23596  00  =3      BYTE      status;                       /**/
23597  00  =3  } ZW_RETURN_ROUTE_DELETE_COMPLETE_V3_FRAME;
23598  00  =3  
23599  00  =3  /************************************************************/
23600  00  =3  /* Node Add Keys Report V3 command class structs */         
23601  00  =3  /************************************************************/
23602  00  =3  typedef struct _ZW_NODE_ADD_KEYS_REPORT_V3_FRAME_
23603  00  =3  {
23604  00  =3      BYTE      cmdClass;                     /* The command class */
23605  00  =3      BYTE      cmd;                          /* The command */
23606  00  =3      BYTE      seqNo;                        /**/
23607  00  =3      BYTE      properties1;                  /* masked byte */
23608  00  =3      BYTE      requestedKeys;                /**/
23609  00  =3  } ZW_NODE_ADD_KEYS_REPORT_V3_FRAME;
23610  00  =3  
23611  00  =3  /************************************************************/
23612  00  =3  /* Node Add Keys Set V3 command class structs */            
23613  00  =3  /************************************************************/
23614  00  =3  typedef struct _ZW_NODE_ADD_KEYS_SET_V3_FRAME_
23615  00  =3  {
23616  00  =3      BYTE      cmdClass;                     /* The command class */
23617  00  =3      BYTE      cmd;                          /* The command */
23618  00  =3      BYTE      seqNo;                        /**/
23619  00  =3      BYTE      properties1;                  /* masked byte */
23620  00  =3      BYTE      grantedKeys;                  /**/
23621  00  =3  } ZW_NODE_ADD_KEYS_SET_V3_FRAME;
23622  00  =3  
23623  00  =3  /************************************************************/
23624  00  =3  /* Node Add Dsk Report V3 command class structs */          
23625  00  =3  /************************************************************/
23626  00  =3  typedef struct _ZW_NODE_ADD_DSK_REPORT_V3_FRAME_
23627  00  =3  {
23628  00  =3      BYTE      cmdClass;                     /* The command class */
23629  00  =3      BYTE      cmd;                          /* The command */
23630  00  =3      BYTE      seqNo;                        /**/
23631  00  =3      BYTE      properties1;                  /* masked byte */
23632  00  =3      BYTE      dsk1;                         /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 398 

23633  00  =3      BYTE      dsk2;                         
23634  00  =3      BYTE      dsk3;                         
23635  00  =3      BYTE      dsk4;                         
23636  00  =3      BYTE      dsk5;                         
23637  00  =3      BYTE      dsk6;                         
23638  00  =3      BYTE      dsk7;                         
23639  00  =3      BYTE      dsk8;                         
23640  00  =3      BYTE      dsk9;                         
23641  00  =3      BYTE      dsk10;                        
23642  00  =3      BYTE      dsk11;                        
23643  00  =3      BYTE      dsk12;                        
23644  00  =3      BYTE      dsk13;                        
23645  00  =3      BYTE      dsk14;                        
23646  00  =3      BYTE      dsk15;                        
23647  00  =3      BYTE      dsk16;                        /* LSB */
23648  00  =3  } ZW_NODE_ADD_DSK_REPORT_V3_FRAME;
23649  00  =3  
23650  00  =3  /************************************************************/
23651  00  =3  /* Node Add Dsk Set 1byte V3 command class structs */       
23652  00  =3  /************************************************************/
23653  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_1BYTE_V3_FRAME_
23654  00  =3  {
23655  00  =3      BYTE      cmdClass;                     /* The command class */
23656  00  =3      BYTE      cmd;                          /* The command */
23657  00  =3      BYTE      seqNo;                        /**/
23658  00  =3      BYTE      properties1;                  /* masked byte */
23659  00  =3      BYTE      inputDsk1;                    
23660  00  =3  } ZW_NODE_ADD_DSK_SET_1BYTE_V3_FRAME;
23661  00  =3  
23662  00  =3  /************************************************************/
23663  00  =3  /* Node Add Dsk Set 2byte V3 command class structs */       
23664  00  =3  /************************************************************/
23665  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_2BYTE_V3_FRAME_
23666  00  =3  {
23667  00  =3      BYTE      cmdClass;                     /* The command class */
23668  00  =3      BYTE      cmd;                          /* The command */
23669  00  =3      BYTE      seqNo;                        /**/
23670  00  =3      BYTE      properties1;                  /* masked byte */
23671  00  =3      BYTE      inputDsk1;                    /* MSB */
23672  00  =3      BYTE      inputDsk2;                    /* LSB */
23673  00  =3  } ZW_NODE_ADD_DSK_SET_2BYTE_V3_FRAME;
23674  00  =3  
23675  00  =3  /************************************************************/
23676  00  =3  /* Node Add Dsk Set 3byte V3 command class structs */       
23677  00  =3  /************************************************************/
23678  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_3BYTE_V3_FRAME_
23679  00  =3  {
23680  00  =3      BYTE      cmdClass;                     /* The command class */
23681  00  =3      BYTE      cmd;                          /* The command */
23682  00  =3      BYTE      seqNo;                        /**/
23683  00  =3      BYTE      properties1;                  /* masked byte */
23684  00  =3      BYTE      inputDsk1;                    /* MSB */
23685  00  =3      BYTE      inputDsk2;                    
23686  00  =3      BYTE      inputDsk3;                    /* LSB */
23687  00  =3  } ZW_NODE_ADD_DSK_SET_3BYTE_V3_FRAME;
23688  00  =3  
23689  00  =3  /************************************************************/
23690  00  =3  /* Node Add Dsk Set 4byte V3 command class structs */       
23691  00  =3  /************************************************************/
23692  00  =3  typedef struct _ZW_NODE_ADD_DSK_SET_4BYTE_V3_FRAME_
23693  00  =3  {
23694  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 399 

23695  00  =3      BYTE      cmd;                          /* The command */
23696  00  =3      BYTE      seqNo;                        /**/
23697  00  =3      BYTE      properties1;                  /* masked byte */
23698  00  =3      BYTE      inputDsk1;                    /* MSB */
23699  00  =3      BYTE      inputDsk2;                    
23700  00  =3      BYTE      inputDsk3;                    
23701  00  =3      BYTE      inputDsk4;                    /* LSB */
23702  00  =3  } ZW_NODE_ADD_DSK_SET_4BYTE_V3_FRAME;
23703  00  =3  
23704  00  =3  /************************************************************/
23705  00  =3  /* S2 Advanced Join Mode Get V3 command class structs */    
23706  00  =3  /************************************************************/
23707  00  =3  typedef struct _ZW_S2_ADVANCED_JOIN_MODE_GET_V3_FRAME_
23708  00  =3  {
23709  00  =3      BYTE      cmdClass;                     /* The command class */
23710  00  =3      BYTE      cmd;                          /* The command */
23711  00  =3      BYTE      seqNo;                        /**/
23712  00  =3  } ZW_S2_ADVANCED_JOIN_MODE_GET_V3_FRAME;
23713  00  =3  
23714  00  =3  /************************************************************/
23715  00  =3  /* Smart Start Join Started Report 1byte V3 command class structs */
23716  00  =3  /************************************************************/
23717  00  =3  typedef struct _ZW_SMART_START_JOIN_STARTED_REPORT_1BYTE_V3_FRAME_
23718  00  =3  {
23719  00  =3      BYTE      cmdClass;                     /* The command class */
23720  00  =3      BYTE      cmd;                          /* The command */
23721  00  =3      BYTE      seqNo;                        /**/
23722  00  =3      BYTE      properties1;                  /* masked byte */
23723  00  =3      BYTE      dsk1;                         
23724  00  =3  } ZW_SMART_START_JOIN_STARTED_REPORT_1BYTE_V3_FRAME;
23725  00  =3  
23726  00  =3  /************************************************************/
23727  00  =3  /* Smart Start Join Started Report 2byte V3 command class structs */
23728  00  =3  /************************************************************/
23729  00  =3  typedef struct _ZW_SMART_START_JOIN_STARTED_REPORT_2BYTE_V3_FRAME_
23730  00  =3  {
23731  00  =3      BYTE      cmdClass;                     /* The command class */
23732  00  =3      BYTE      cmd;                          /* The command */
23733  00  =3      BYTE      seqNo;                        /**/
23734  00  =3      BYTE      properties1;                  /* masked byte */
23735  00  =3      BYTE      dsk1;                         /* MSB */
23736  00  =3      BYTE      dsk2;                         /* LSB */
23737  00  =3  } ZW_SMART_START_JOIN_STARTED_REPORT_2BYTE_V3_FRAME;
23738  00  =3  
23739  00  =3  /************************************************************/
23740  00  =3  /* Smart Start Join Started Report 3byte V3 command class structs */
23741  00  =3  /************************************************************/
23742  00  =3  typedef struct _ZW_SMART_START_JOIN_STARTED_REPORT_3BYTE_V3_FRAME_
23743  00  =3  {
23744  00  =3      BYTE      cmdClass;                     /* The command class */
23745  00  =3      BYTE      cmd;                          /* The command */
23746  00  =3      BYTE      seqNo;                        /**/
23747  00  =3      BYTE      properties1;                  /* masked byte */
23748  00  =3      BYTE      dsk1;                         /* MSB */
23749  00  =3      BYTE      dsk2;                         
23750  00  =3      BYTE      dsk3;                         /* LSB */
23751  00  =3  } ZW_SMART_START_JOIN_STARTED_REPORT_3BYTE_V3_FRAME;
23752  00  =3  
23753  00  =3  /************************************************************/
23754  00  =3  /* Smart Start Join Started Report 4byte V3 command class structs */
23755  00  =3  /************************************************************/
23756  00  =3  typedef struct _ZW_SMART_START_JOIN_STARTED_REPORT_4BYTE_V3_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 400 

23757  00  =3  {
23758  00  =3      BYTE      cmdClass;                     /* The command class */
23759  00  =3      BYTE      cmd;                          /* The command */
23760  00  =3      BYTE      seqNo;                        /**/
23761  00  =3      BYTE      properties1;                  /* masked byte */
23762  00  =3      BYTE      dsk1;                         /* MSB */
23763  00  =3      BYTE      dsk2;                         
23764  00  =3      BYTE      dsk3;                         
23765  00  =3      BYTE      dsk4;                         /* LSB */
23766  00  =3  } ZW_SMART_START_JOIN_STARTED_REPORT_4BYTE_V3_FRAME;
23767  00  =3  
23768  00  =3  /************************************************************/
23769  00  =3  /* S2 Advanced Join Mode Set V3 command class structs */    
23770  00  =3  /************************************************************/
23771  00  =3  typedef struct _ZW_S2_ADVANCED_JOIN_MODE_SET_V3_FRAME_
23772  00  =3  {
23773  00  =3      BYTE      cmdClass;                     /* The command class */
23774  00  =3      BYTE      cmd;                          /* The command */
23775  00  =3      BYTE      seqNo;                        /**/
23776  00  =3      BYTE      s2AdvancedJoinMode;           /**/
23777  00  =3  } ZW_S2_ADVANCED_JOIN_MODE_SET_V3_FRAME;
23778  00  =3  
23779  00  =3  /************************************************************/
23780  00  =3  /* S2 Advanced Join Mode Report V3 command class structs */ 
23781  00  =3  /************************************************************/
23782  00  =3  typedef struct _ZW_S2_ADVANCED_JOIN_MODE_REPORT_V3_FRAME_
23783  00  =3  {
23784  00  =3      BYTE      cmdClass;                     /* The command class */
23785  00  =3      BYTE      cmd;                          /* The command */
23786  00  =3      BYTE      seqNo;                        /**/
23787  00  =3      BYTE      s2AdvancedJoinMode;           /**/
23788  00  =3  } ZW_S2_ADVANCED_JOIN_MODE_REPORT_V3_FRAME;
23789  00  =3  
23790  00  =3  /************************************************************/
23791  00  =3  /* Included Nif Report V3 command class structs */          
23792  00  =3  /************************************************************/
23793  00  =3  typedef struct _ZW_INCLUDED_NIF_REPORT_V3_FRAME_
23794  00  =3  {
23795  00  =3      BYTE      cmdClass;                     /* The command class */
23796  00  =3      BYTE      cmd;                          /* The command */
23797  00  =3      BYTE      seqNo;                        /**/
23798  00  =3      BYTE      reserved1;                    /**/
23799  00  =3      BYTE      reserved2;                    /**/
23800  00  =3      BYTE      homeid1;                      /* MSB */
23801  00  =3      BYTE      homeid2;                      
23802  00  =3      BYTE      homeid3;                      
23803  00  =3      BYTE      homeid4;                      /* LSB */
23804  00  =3      BYTE      userInputIdentification1;     /* MSB */
23805  00  =3      BYTE      userInputIdentification2;     /* LSB */
23806  00  =3      BYTE      userInputLocalReset1;         /* MSB */
23807  00  =3      BYTE      userInputLocalReset2;         /* LSB */
23808  00  =3  } ZW_INCLUDED_NIF_REPORT_V3_FRAME;
23809  00  =3  
23810  00  =3  /************************************************************/
23811  00  =3  /* Node Naming Node Location Report command class structs */
23812  00  =3  /************************************************************/
23813  00  =3  typedef struct _ZW_NODE_NAMING_NODE_LOCATION_REPORT_FRAME_
23814  00  =3  {
23815  00  =3      BYTE      cmdClass;                     /* The command class */
23816  00  =3      BYTE      cmd;                          /* The command */
23817  00  =3      BYTE      level;                        /* masked byte */
23818  00  =3      BYTE      nodeLocationChar1;            /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 401 

23819  00  =3      BYTE      nodeLocationChar2;            
23820  00  =3      BYTE      nodeLocationChar3;            
23821  00  =3      BYTE      nodeLocationChar4;            
23822  00  =3      BYTE      nodeLocationChar5;            
23823  00  =3      BYTE      nodeLocationChar6;            
23824  00  =3      BYTE      nodeLocationChar7;            
23825  00  =3      BYTE      nodeLocationChar8;            
23826  00  =3      BYTE      nodeLocationChar9;            
23827  00  =3      BYTE      nodeLocationChar10;           
23828  00  =3      BYTE      nodeLocationChar11;           
23829  00  =3      BYTE      nodeLocationChar12;           
23830  00  =3      BYTE      nodeLocationChar13;           
23831  00  =3      BYTE      nodeLocationChar14;           
23832  00  =3      BYTE      nodeLocationChar15;           
23833  00  =3      BYTE      nodeLocationChar16;           /* LSB */
23834  00  =3  } ZW_NODE_NAMING_NODE_LOCATION_REPORT_FRAME;
23835  00  =3  
23836  00  =3  /************************************************************/
23837  00  =3  /* Node Naming Node Location Set command class structs */   
23838  00  =3  /************************************************************/
23839  00  =3  typedef struct _ZW_NODE_NAMING_NODE_LOCATION_SET_FRAME_
23840  00  =3  {
23841  00  =3      BYTE      cmdClass;                     /* The command class */
23842  00  =3      BYTE      cmd;                          /* The command */
23843  00  =3      BYTE      level;                        /* masked byte */
23844  00  =3      BYTE      nodeLocationChar1;            /* MSB */
23845  00  =3      BYTE      nodeLocationChar2;            
23846  00  =3      BYTE      nodeLocationChar3;            
23847  00  =3      BYTE      nodeLocationChar4;            
23848  00  =3      BYTE      nodeLocationChar5;            
23849  00  =3      BYTE      nodeLocationChar6;            
23850  00  =3      BYTE      nodeLocationChar7;            
23851  00  =3      BYTE      nodeLocationChar8;            
23852  00  =3      BYTE      nodeLocationChar9;            
23853  00  =3      BYTE      nodeLocationChar10;           
23854  00  =3      BYTE      nodeLocationChar11;           
23855  00  =3      BYTE      nodeLocationChar12;           
23856  00  =3      BYTE      nodeLocationChar13;           
23857  00  =3      BYTE      nodeLocationChar14;           
23858  00  =3      BYTE      nodeLocationChar15;           
23859  00  =3      BYTE      nodeLocationChar16;           /* LSB */
23860  00  =3  } ZW_NODE_NAMING_NODE_LOCATION_SET_FRAME;
23861  00  =3  
23862  00  =3  /************************************************************/
23863  00  =3  /* Node Naming Node Location Get command class structs */   
23864  00  =3  /************************************************************/
23865  00  =3  typedef struct _ZW_NODE_NAMING_NODE_LOCATION_GET_FRAME_
23866  00  =3  {
23867  00  =3      BYTE      cmdClass;                     /* The command class */
23868  00  =3      BYTE      cmd;                          /* The command */
23869  00  =3  } ZW_NODE_NAMING_NODE_LOCATION_GET_FRAME;
23870  00  =3  
23871  00  =3  /************************************************************/
23872  00  =3  /* Node Naming Node Name Get command class structs */       
23873  00  =3  /************************************************************/
23874  00  =3  typedef struct _ZW_NODE_NAMING_NODE_NAME_GET_FRAME_
23875  00  =3  {
23876  00  =3      BYTE      cmdClass;                     /* The command class */
23877  00  =3      BYTE      cmd;                          /* The command */
23878  00  =3  } ZW_NODE_NAMING_NODE_NAME_GET_FRAME;
23879  00  =3  
23880  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 402 

23881  00  =3  /* Node Naming Node Name Report command class structs */    
23882  00  =3  /************************************************************/
23883  00  =3  typedef struct _ZW_NODE_NAMING_NODE_NAME_REPORT_FRAME_
23884  00  =3  {
23885  00  =3      BYTE      cmdClass;                     /* The command class */
23886  00  =3      BYTE      cmd;                          /* The command */
23887  00  =3      BYTE      level;                        /* masked byte */
23888  00  =3      BYTE      nodeNameChar1;                /* MSB */
23889  00  =3      BYTE      nodeNameChar2;                
23890  00  =3      BYTE      nodeNameChar3;                
23891  00  =3      BYTE      nodeNameChar4;                
23892  00  =3      BYTE      nodeNameChar5;                
23893  00  =3      BYTE      nodeNameChar6;                
23894  00  =3      BYTE      nodeNameChar7;                
23895  00  =3      BYTE      nodeNameChar8;                
23896  00  =3      BYTE      nodeNameChar9;                
23897  00  =3      BYTE      nodeNameChar10;               
23898  00  =3      BYTE      nodeNameChar11;               
23899  00  =3      BYTE      nodeNameChar12;               
23900  00  =3      BYTE      nodeNameChar13;               
23901  00  =3      BYTE      nodeNameChar14;               
23902  00  =3      BYTE      nodeNameChar15;               
23903  00  =3      BYTE      nodeNameChar16;               /* LSB */
23904  00  =3  } ZW_NODE_NAMING_NODE_NAME_REPORT_FRAME;
23905  00  =3  
23906  00  =3  /************************************************************/
23907  00  =3  /* Node Naming Node Name Set command class structs */       
23908  00  =3  /************************************************************/
23909  00  =3  typedef struct _ZW_NODE_NAMING_NODE_NAME_SET_FRAME_
23910  00  =3  {
23911  00  =3      BYTE      cmdClass;                     /* The command class */
23912  00  =3      BYTE      cmd;                          /* The command */
23913  00  =3      BYTE      level;                        /* masked byte */
23914  00  =3      BYTE      nodeNameChar1;                /* MSB */
23915  00  =3      BYTE      nodeNameChar2;                
23916  00  =3      BYTE      nodeNameChar3;                
23917  00  =3      BYTE      nodeNameChar4;                
23918  00  =3      BYTE      nodeNameChar5;                
23919  00  =3      BYTE      nodeNameChar6;                
23920  00  =3      BYTE      nodeNameChar7;                
23921  00  =3      BYTE      nodeNameChar8;                
23922  00  =3      BYTE      nodeNameChar9;                
23923  00  =3      BYTE      nodeNameChar10;               
23924  00  =3      BYTE      nodeNameChar11;               
23925  00  =3      BYTE      nodeNameChar12;               
23926  00  =3      BYTE      nodeNameChar13;               
23927  00  =3      BYTE      nodeNameChar14;               
23928  00  =3      BYTE      nodeNameChar15;               
23929  00  =3      BYTE      nodeNameChar16;               /* LSB */
23930  00  =3  } ZW_NODE_NAMING_NODE_NAME_SET_FRAME;
23931  00  =3  
23932  00  =3  /************************************************************/
23933  00  =3  /* Powerlevel Get command class structs */                  
23934  00  =3  /************************************************************/
23935  00  =3  typedef struct _ZW_POWERLEVEL_GET_FRAME_
23936  00  =3  {
23937  00  =3      BYTE      cmdClass;                     /* The command class */
23938  00  =3      BYTE      cmd;                          /* The command */
23939  00  =3  } ZW_POWERLEVEL_GET_FRAME;
23940  00  =3  
23941  00  =3  /************************************************************/
23942  00  =3  /* Powerlevel Report command class structs */               
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 403 

23943  00  =3  /************************************************************/
23944  00  =3  typedef struct _ZW_POWERLEVEL_REPORT_FRAME_
23945  00  =3  {
23946  00  =3      BYTE      cmdClass;                     /* The command class */
23947  00  =3      BYTE      cmd;                          /* The command */
23948  00  =3      BYTE      powerLevel;                   /**/
23949  00  =3      BYTE      timeout;                      /**/
23950  00  =3  } ZW_POWERLEVEL_REPORT_FRAME;
23951  00  =3  
23952  00  =3  /************************************************************/
23953  00  =3  /* Powerlevel Set command class structs */                  
23954  00  =3  /************************************************************/
23955  00  =3  typedef struct _ZW_POWERLEVEL_SET_FRAME_
23956  00  =3  {
23957  00  =3      BYTE      cmdClass;                     /* The command class */
23958  00  =3      BYTE      cmd;                          /* The command */
23959  00  =3      BYTE      powerLevel;                   /**/
23960  00  =3      BYTE      timeout;                      /**/
23961  00  =3  } ZW_POWERLEVEL_SET_FRAME;
23962  00  =3  
23963  00  =3  /************************************************************/
23964  00  =3  /* Powerlevel Test Node Get command class structs */        
23965  00  =3  /************************************************************/
23966  00  =3  typedef struct _ZW_POWERLEVEL_TEST_NODE_GET_FRAME_
23967  00  =3  {
23968  00  =3      BYTE      cmdClass;                     /* The command class */
23969  00  =3      BYTE      cmd;                          /* The command */
23970  00  =3  } ZW_POWERLEVEL_TEST_NODE_GET_FRAME;
23971  00  =3  
23972  00  =3  /************************************************************/
23973  00  =3  /* Powerlevel Test Node Report command class structs */     
23974  00  =3  /************************************************************/
23975  00  =3  typedef struct _ZW_POWERLEVEL_TEST_NODE_REPORT_FRAME_
23976  00  =3  {
23977  00  =3      BYTE      cmdClass;                     /* The command class */
23978  00  =3      BYTE      cmd;                          /* The command */
23979  00  =3      BYTE      testNodeid;                   /**/
23980  00  =3      BYTE      statusOfOperation;            /**/
23981  00  =3      BYTE      testFrameCount1;              /* MSB */
23982  00  =3      BYTE      testFrameCount2;              /* LSB */
23983  00  =3  } ZW_POWERLEVEL_TEST_NODE_REPORT_FRAME;
23984  00  =3  
23985  00  =3  /************************************************************/
23986  00  =3  /* Powerlevel Test Node Set command class structs */        
23987  00  =3  /************************************************************/
23988  00  =3  typedef struct _ZW_POWERLEVEL_TEST_NODE_SET_FRAME_
23989  00  =3  {
23990  00  =3      BYTE      cmdClass;                     /* The command class */
23991  00  =3      BYTE      cmd;                          /* The command */
23992  00  =3      BYTE      testNodeid;                   /**/
23993  00  =3      BYTE      powerLevel;                   /**/
23994  00  =3      BYTE      testFrameCount1;              /* MSB */
23995  00  =3      BYTE      testFrameCount2;              /* LSB */
23996  00  =3  } ZW_POWERLEVEL_TEST_NODE_SET_FRAME;
23997  00  =3  
23998  00  =3  /************************************************************/
23999  00  =3  /* Cmd Encapsulation 1byte command class structs */         
24000  00  =3  /************************************************************/
24001  00  =3  typedef struct _ZW_CMD_ENCAPSULATION_1BYTE_FRAME_
24002  00  =3  {
24003  00  =3      BYTE      cmdClass;                     /* The command class */
24004  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 404 

24005  00  =3      BYTE      data1;                        
24006  00  =3  } ZW_CMD_ENCAPSULATION_1BYTE_FRAME;
24007  00  =3  
24008  00  =3  /************************************************************/
24009  00  =3  /* Cmd Encapsulation 2byte command class structs */         
24010  00  =3  /************************************************************/
24011  00  =3  typedef struct _ZW_CMD_ENCAPSULATION_2BYTE_FRAME_
24012  00  =3  {
24013  00  =3      BYTE      cmdClass;                     /* The command class */
24014  00  =3      BYTE      cmd;                          /* The command */
24015  00  =3      BYTE      data1;                        /* MSB */
24016  00  =3      BYTE      data2;                        /* LSB */
24017  00  =3  } ZW_CMD_ENCAPSULATION_2BYTE_FRAME;
24018  00  =3  
24019  00  =3  /************************************************************/
24020  00  =3  /* Cmd Encapsulation 3byte command class structs */         
24021  00  =3  /************************************************************/
24022  00  =3  typedef struct _ZW_CMD_ENCAPSULATION_3BYTE_FRAME_
24023  00  =3  {
24024  00  =3      BYTE      cmdClass;                     /* The command class */
24025  00  =3      BYTE      cmd;                          /* The command */
24026  00  =3      BYTE      data1;                        /* MSB */
24027  00  =3      BYTE      data2;                        
24028  00  =3      BYTE      data3;                        /* LSB */
24029  00  =3  } ZW_CMD_ENCAPSULATION_3BYTE_FRAME;
24030  00  =3  
24031  00  =3  /************************************************************/
24032  00  =3  /* Cmd Encapsulation 4byte command class structs */         
24033  00  =3  /************************************************************/
24034  00  =3  typedef struct _ZW_CMD_ENCAPSULATION_4BYTE_FRAME_
24035  00  =3  {
24036  00  =3      BYTE      cmdClass;                     /* The command class */
24037  00  =3      BYTE      cmd;                          /* The command */
24038  00  =3      BYTE      data1;                        /* MSB */
24039  00  =3      BYTE      data2;                        
24040  00  =3      BYTE      data3;                        
24041  00  =3      BYTE      data4;                        /* LSB */
24042  00  =3  } ZW_CMD_ENCAPSULATION_4BYTE_FRAME;
24043  00  =3  
24044  00  =3  /************************************************************/
24045  00  =3  /* Prepayment Balance Get command class structs */          
24046  00  =3  /************************************************************/
24047  00  =3  typedef struct _ZW_PREPAYMENT_BALANCE_GET_FRAME_
24048  00  =3  {
24049  00  =3      BYTE      cmdClass;                     /* The command class */
24050  00  =3      BYTE      cmd;                          /* The command */
24051  00  =3      BYTE      properties1;                  /* masked byte */
24052  00  =3  } ZW_PREPAYMENT_BALANCE_GET_FRAME;
24053  00  =3  
24054  00  =3  /************************************************************/
24055  00  =3  /* Prepayment Balance Report command class structs */       
24056  00  =3  /************************************************************/
24057  00  =3  typedef struct _ZW_PREPAYMENT_BALANCE_REPORT_FRAME_
24058  00  =3  {
24059  00  =3      BYTE      cmdClass;                     /* The command class */
24060  00  =3      BYTE      cmd;                          /* The command */
24061  00  =3      BYTE      properties1;                  /* masked byte */
24062  00  =3      BYTE      properties2;                  /* masked byte */
24063  00  =3      BYTE      balanceValue1;                /* MSB */
24064  00  =3      BYTE      balanceValue2;                
24065  00  =3      BYTE      balanceValue3;                
24066  00  =3      BYTE      balanceValue4;                /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 405 

24067  00  =3      BYTE      properties3;                  /* masked byte */
24068  00  =3      BYTE      debt1;                        /* MSB */
24069  00  =3      BYTE      debt2;                        
24070  00  =3      BYTE      debt3;                        
24071  00  =3      BYTE      debt4;                        /* LSB */
24072  00  =3      BYTE      properties4;                  /* masked byte */
24073  00  =3      BYTE      emerCredit1;                  /* MSB */
24074  00  =3      BYTE      emerCredit2;                  
24075  00  =3      BYTE      emerCredit3;                  
24076  00  =3      BYTE      emerCredit4;                  /* LSB */
24077  00  =3      BYTE      currency1;                    /* MSB */
24078  00  =3      BYTE      currency2;                    
24079  00  =3      BYTE      currency3;                    /* LSB */
24080  00  =3      BYTE      debtRecoveryPercentage;       /**/
24081  00  =3  } ZW_PREPAYMENT_BALANCE_REPORT_FRAME;
24082  00  =3  
24083  00  =3  /************************************************************/
24084  00  =3  /* Prepayment Supported Get command class structs */        
24085  00  =3  /************************************************************/
24086  00  =3  typedef struct _ZW_PREPAYMENT_SUPPORTED_GET_FRAME_
24087  00  =3  {
24088  00  =3      BYTE      cmdClass;                     /* The command class */
24089  00  =3      BYTE      cmd;                          /* The command */
24090  00  =3  } ZW_PREPAYMENT_SUPPORTED_GET_FRAME;
24091  00  =3  
24092  00  =3  /************************************************************/
24093  00  =3  /* Prepayment Supported Report command class structs */     
24094  00  =3  /************************************************************/
24095  00  =3  typedef struct _ZW_PREPAYMENT_SUPPORTED_REPORT_FRAME_
24096  00  =3  {
24097  00  =3      BYTE      cmdClass;                     /* The command class */
24098  00  =3      BYTE      cmd;                          /* The command */
24099  00  =3      BYTE      properties1;                  /* masked byte */
24100  00  =3  } ZW_PREPAYMENT_SUPPORTED_REPORT_FRAME;
24101  00  =3  
24102  00  =3  /************************************************************/
24103  00  =3  /* Proprietary Get 1byte command class structs */           
24104  00  =3  /************************************************************/
24105  00  =3  typedef struct _ZW_PROPRIETARY_GET_1BYTE_FRAME_
24106  00  =3  {
24107  00  =3      BYTE      cmdClass;                     /* The command class */
24108  00  =3      BYTE      cmd;                          /* The command */
24109  00  =3      BYTE      data1;                        
24110  00  =3  } ZW_PROPRIETARY_GET_1BYTE_FRAME;
24111  00  =3  
24112  00  =3  /************************************************************/
24113  00  =3  /* Proprietary Get 2byte command class structs */           
24114  00  =3  /************************************************************/
24115  00  =3  typedef struct _ZW_PROPRIETARY_GET_2BYTE_FRAME_
24116  00  =3  {
24117  00  =3      BYTE      cmdClass;                     /* The command class */
24118  00  =3      BYTE      cmd;                          /* The command */
24119  00  =3      BYTE      data1;                        /* MSB */
24120  00  =3      BYTE      data2;                        /* LSB */
24121  00  =3  } ZW_PROPRIETARY_GET_2BYTE_FRAME;
24122  00  =3  
24123  00  =3  /************************************************************/
24124  00  =3  /* Proprietary Get 3byte command class structs */           
24125  00  =3  /************************************************************/
24126  00  =3  typedef struct _ZW_PROPRIETARY_GET_3BYTE_FRAME_
24127  00  =3  {
24128  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 406 

24129  00  =3      BYTE      cmd;                          /* The command */
24130  00  =3      BYTE      data1;                        /* MSB */
24131  00  =3      BYTE      data2;                        
24132  00  =3      BYTE      data3;                        /* LSB */
24133  00  =3  } ZW_PROPRIETARY_GET_3BYTE_FRAME;
24134  00  =3  
24135  00  =3  /************************************************************/
24136  00  =3  /* Proprietary Get 4byte command class structs */           
24137  00  =3  /************************************************************/
24138  00  =3  typedef struct _ZW_PROPRIETARY_GET_4BYTE_FRAME_
24139  00  =3  {
24140  00  =3      BYTE      cmdClass;                     /* The command class */
24141  00  =3      BYTE      cmd;                          /* The command */
24142  00  =3      BYTE      data1;                        /* MSB */
24143  00  =3      BYTE      data2;                        
24144  00  =3      BYTE      data3;                        
24145  00  =3      BYTE      data4;                        /* LSB */
24146  00  =3  } ZW_PROPRIETARY_GET_4BYTE_FRAME;
24147  00  =3  
24148  00  =3  /************************************************************/
24149  00  =3  /* Proprietary Report 1byte command class structs */        
24150  00  =3  /************************************************************/
24151  00  =3  typedef struct _ZW_PROPRIETARY_REPORT_1BYTE_FRAME_
24152  00  =3  {
24153  00  =3      BYTE      cmdClass;                     /* The command class */
24154  00  =3      BYTE      cmd;                          /* The command */
24155  00  =3      BYTE      data1;                        
24156  00  =3  } ZW_PROPRIETARY_REPORT_1BYTE_FRAME;
24157  00  =3  
24158  00  =3  /************************************************************/
24159  00  =3  /* Proprietary Report 2byte command class structs */        
24160  00  =3  /************************************************************/
24161  00  =3  typedef struct _ZW_PROPRIETARY_REPORT_2BYTE_FRAME_
24162  00  =3  {
24163  00  =3      BYTE      cmdClass;                     /* The command class */
24164  00  =3      BYTE      cmd;                          /* The command */
24165  00  =3      BYTE      data1;                        /* MSB */
24166  00  =3      BYTE      data2;                        /* LSB */
24167  00  =3  } ZW_PROPRIETARY_REPORT_2BYTE_FRAME;
24168  00  =3  
24169  00  =3  /************************************************************/
24170  00  =3  /* Proprietary Report 3byte command class structs */        
24171  00  =3  /************************************************************/
24172  00  =3  typedef struct _ZW_PROPRIETARY_REPORT_3BYTE_FRAME_
24173  00  =3  {
24174  00  =3      BYTE      cmdClass;                     /* The command class */
24175  00  =3      BYTE      cmd;                          /* The command */
24176  00  =3      BYTE      data1;                        /* MSB */
24177  00  =3      BYTE      data2;                        
24178  00  =3      BYTE      data3;                        /* LSB */
24179  00  =3  } ZW_PROPRIETARY_REPORT_3BYTE_FRAME;
24180  00  =3  
24181  00  =3  /************************************************************/
24182  00  =3  /* Proprietary Report 4byte command class structs */        
24183  00  =3  /************************************************************/
24184  00  =3  typedef struct _ZW_PROPRIETARY_REPORT_4BYTE_FRAME_
24185  00  =3  {
24186  00  =3      BYTE      cmdClass;                     /* The command class */
24187  00  =3      BYTE      cmd;                          /* The command */
24188  00  =3      BYTE      data1;                        /* MSB */
24189  00  =3      BYTE      data2;                        
24190  00  =3      BYTE      data3;                        
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 407 

24191  00  =3      BYTE      data4;                        /* LSB */
24192  00  =3  } ZW_PROPRIETARY_REPORT_4BYTE_FRAME;
24193  00  =3  
24194  00  =3  /************************************************************/
24195  00  =3  /* Proprietary Set 1byte command class structs */           
24196  00  =3  /************************************************************/
24197  00  =3  typedef struct _ZW_PROPRIETARY_SET_1BYTE_FRAME_
24198  00  =3  {
24199  00  =3      BYTE      cmdClass;                     /* The command class */
24200  00  =3      BYTE      cmd;                          /* The command */
24201  00  =3      BYTE      data1;                        
24202  00  =3  } ZW_PROPRIETARY_SET_1BYTE_FRAME;
24203  00  =3  
24204  00  =3  /************************************************************/
24205  00  =3  /* Proprietary Set 2byte command class structs */           
24206  00  =3  /************************************************************/
24207  00  =3  typedef struct _ZW_PROPRIETARY_SET_2BYTE_FRAME_
24208  00  =3  {
24209  00  =3      BYTE      cmdClass;                     /* The command class */
24210  00  =3      BYTE      cmd;                          /* The command */
24211  00  =3      BYTE      data1;                        /* MSB */
24212  00  =3      BYTE      data2;                        /* LSB */
24213  00  =3  } ZW_PROPRIETARY_SET_2BYTE_FRAME;
24214  00  =3  
24215  00  =3  /************************************************************/
24216  00  =3  /* Proprietary Set 3byte command class structs */           
24217  00  =3  /************************************************************/
24218  00  =3  typedef struct _ZW_PROPRIETARY_SET_3BYTE_FRAME_
24219  00  =3  {
24220  00  =3      BYTE      cmdClass;                     /* The command class */
24221  00  =3      BYTE      cmd;                          /* The command */
24222  00  =3      BYTE      data1;                        /* MSB */
24223  00  =3      BYTE      data2;                        
24224  00  =3      BYTE      data3;                        /* LSB */
24225  00  =3  } ZW_PROPRIETARY_SET_3BYTE_FRAME;
24226  00  =3  
24227  00  =3  /************************************************************/
24228  00  =3  /* Proprietary Set 4byte command class structs */           
24229  00  =3  /************************************************************/
24230  00  =3  typedef struct _ZW_PROPRIETARY_SET_4BYTE_FRAME_
24231  00  =3  {
24232  00  =3      BYTE      cmdClass;                     /* The command class */
24233  00  =3      BYTE      cmd;                          /* The command */
24234  00  =3      BYTE      data1;                        /* MSB */
24235  00  =3      BYTE      data2;                        
24236  00  =3      BYTE      data3;                        
24237  00  =3      BYTE      data4;                        /* LSB */
24238  00  =3  } ZW_PROPRIETARY_SET_4BYTE_FRAME;
24239  00  =3  
24240  00  =3  /************************************************************/
24241  00  =3  /* Protection Get command class structs */                  
24242  00  =3  /************************************************************/
24243  00  =3  typedef struct _ZW_PROTECTION_GET_FRAME_
24244  00  =3  {
24245  00  =3      BYTE      cmdClass;                     /* The command class */
24246  00  =3      BYTE      cmd;                          /* The command */
24247  00  =3  } ZW_PROTECTION_GET_FRAME;
24248  00  =3  
24249  00  =3  /************************************************************/
24250  00  =3  /* Protection Report command class structs */               
24251  00  =3  /************************************************************/
24252  00  =3  typedef struct _ZW_PROTECTION_REPORT_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 408 

24253  00  =3  {
24254  00  =3      BYTE      cmdClass;                     /* The command class */
24255  00  =3      BYTE      cmd;                          /* The command */
24256  00  =3      BYTE      protectionState;              /**/
24257  00  =3  } ZW_PROTECTION_REPORT_FRAME;
24258  00  =3  
24259  00  =3  /************************************************************/
24260  00  =3  /* Protection Set command class structs */                  
24261  00  =3  /************************************************************/
24262  00  =3  typedef struct _ZW_PROTECTION_SET_FRAME_
24263  00  =3  {
24264  00  =3      BYTE      cmdClass;                     /* The command class */
24265  00  =3      BYTE      cmd;                          /* The command */
24266  00  =3      BYTE      protectionState;              /**/
24267  00  =3  } ZW_PROTECTION_SET_FRAME;
24268  00  =3  
24269  00  =3  /************************************************************/
24270  00  =3  /* Protection Ec Get V2 command class structs */            
24271  00  =3  /************************************************************/
24272  00  =3  typedef struct _ZW_PROTECTION_EC_GET_V2_FRAME_
24273  00  =3  {
24274  00  =3      BYTE      cmdClass;                     /* The command class */
24275  00  =3      BYTE      cmd;                          /* The command */
24276  00  =3  } ZW_PROTECTION_EC_GET_V2_FRAME;
24277  00  =3  
24278  00  =3  /************************************************************/
24279  00  =3  /* Protection Ec Report V2 command class structs */         
24280  00  =3  /************************************************************/
24281  00  =3  typedef struct _ZW_PROTECTION_EC_REPORT_V2_FRAME_
24282  00  =3  {
24283  00  =3      BYTE      cmdClass;                     /* The command class */
24284  00  =3      BYTE      cmd;                          /* The command */
24285  00  =3      BYTE      nodeId;                       /**/
24286  00  =3  } ZW_PROTECTION_EC_REPORT_V2_FRAME;
24287  00  =3  
24288  00  =3  /************************************************************/
24289  00  =3  /* Protection Ec Set V2 command class structs */            
24290  00  =3  /************************************************************/
24291  00  =3  typedef struct _ZW_PROTECTION_EC_SET_V2_FRAME_
24292  00  =3  {
24293  00  =3      BYTE      cmdClass;                     /* The command class */
24294  00  =3      BYTE      cmd;                          /* The command */
24295  00  =3      BYTE      nodeId;                       /**/
24296  00  =3  } ZW_PROTECTION_EC_SET_V2_FRAME;
24297  00  =3  
24298  00  =3  /************************************************************/
24299  00  =3  /* Protection Get V2 command class structs */               
24300  00  =3  /************************************************************/
24301  00  =3  typedef struct _ZW_PROTECTION_GET_V2_FRAME_
24302  00  =3  {
24303  00  =3      BYTE      cmdClass;                     /* The command class */
24304  00  =3      BYTE      cmd;                          /* The command */
24305  00  =3  } ZW_PROTECTION_GET_V2_FRAME;
24306  00  =3  
24307  00  =3  /************************************************************/
24308  00  =3  /* Protection Report V2 command class structs */            
24309  00  =3  /************************************************************/
24310  00  =3  typedef struct _ZW_PROTECTION_REPORT_V2_FRAME_
24311  00  =3  {
24312  00  =3      BYTE      cmdClass;                     /* The command class */
24313  00  =3      BYTE      cmd;                          /* The command */
24314  00  =3      BYTE      level;                        /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 409 

24315  00  =3      BYTE      level2;                       /* masked byte */
24316  00  =3  } ZW_PROTECTION_REPORT_V2_FRAME;
24317  00  =3  
24318  00  =3  /************************************************************/
24319  00  =3  /* Protection Set V2 command class structs */               
24320  00  =3  /************************************************************/
24321  00  =3  typedef struct _ZW_PROTECTION_SET_V2_FRAME_
24322  00  =3  {
24323  00  =3      BYTE      cmdClass;                     /* The command class */
24324  00  =3      BYTE      cmd;                          /* The command */
24325  00  =3      BYTE      level;                        /* masked byte */
24326  00  =3      BYTE      level2;                       /* masked byte */
24327  00  =3  } ZW_PROTECTION_SET_V2_FRAME;
24328  00  =3  
24329  00  =3  /************************************************************/
24330  00  =3  /* Protection Supported Get V2 command class structs */     
24331  00  =3  /************************************************************/
24332  00  =3  typedef struct _ZW_PROTECTION_SUPPORTED_GET_V2_FRAME_
24333  00  =3  {
24334  00  =3      BYTE      cmdClass;                     /* The command class */
24335  00  =3      BYTE      cmd;                          /* The command */
24336  00  =3  } ZW_PROTECTION_SUPPORTED_GET_V2_FRAME;
24337  00  =3  
24338  00  =3  /************************************************************/
24339  00  =3  /* Protection Supported Report V2 command class structs */  
24340  00  =3  /************************************************************/
24341  00  =3  typedef struct _ZW_PROTECTION_SUPPORTED_REPORT_V2_FRAME_
24342  00  =3  {
24343  00  =3      BYTE      cmdClass;                     /* The command class */
24344  00  =3      BYTE      cmd;                          /* The command */
24345  00  =3      BYTE      level;                        /* masked byte */
24346  00  =3      BYTE      localProtectionState1;        /* MSB */
24347  00  =3      BYTE      localProtectionState2;        /* LSB */
24348  00  =3      BYTE      rfProtectionState1;           /* MSB */
24349  00  =3      BYTE      rfProtectionState2;           /* LSB */
24350  00  =3  } ZW_PROTECTION_SUPPORTED_REPORT_V2_FRAME;
24351  00  =3  
24352  00  =3  /************************************************************/
24353  00  =3  /* Protection Timeout Get V2 command class structs */       
24354  00  =3  /************************************************************/
24355  00  =3  typedef struct _ZW_PROTECTION_TIMEOUT_GET_V2_FRAME_
24356  00  =3  {
24357  00  =3      BYTE      cmdClass;                     /* The command class */
24358  00  =3      BYTE      cmd;                          /* The command */
24359  00  =3  } ZW_PROTECTION_TIMEOUT_GET_V2_FRAME;
24360  00  =3  
24361  00  =3  /************************************************************/
24362  00  =3  /* Protection Timeout Report V2 command class structs */    
24363  00  =3  /************************************************************/
24364  00  =3  typedef struct _ZW_PROTECTION_TIMEOUT_REPORT_V2_FRAME_
24365  00  =3  {
24366  00  =3      BYTE      cmdClass;                     /* The command class */
24367  00  =3      BYTE      cmd;                          /* The command */
24368  00  =3      BYTE      timeout;                      /**/
24369  00  =3  } ZW_PROTECTION_TIMEOUT_REPORT_V2_FRAME;
24370  00  =3  
24371  00  =3  /************************************************************/
24372  00  =3  /* Protection Timeout Set V2 command class structs */       
24373  00  =3  /************************************************************/
24374  00  =3  typedef struct _ZW_PROTECTION_TIMEOUT_SET_V2_FRAME_
24375  00  =3  {
24376  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 410 

24377  00  =3      BYTE      cmd;                          /* The command */
24378  00  =3      BYTE      timeout;                      /**/
24379  00  =3  } ZW_PROTECTION_TIMEOUT_SET_V2_FRAME;
24380  00  =3  
24381  00  =3  /************************************************************/
24382  00  =3  /* Rate Tbl Remove 1byte command class structs */           
24383  00  =3  /************************************************************/
24384  00  =3  typedef struct _ZW_RATE_TBL_REMOVE_1BYTE_FRAME_
24385  00  =3  {
24386  00  =3      BYTE      cmdClass;                     /* The command class */
24387  00  =3      BYTE      cmd;                          /* The command */
24388  00  =3      BYTE      properties1;                  /* masked byte */
24389  00  =3      BYTE      rateParameterSetId1;          
24390  00  =3  } ZW_RATE_TBL_REMOVE_1BYTE_FRAME;
24391  00  =3  
24392  00  =3  /************************************************************/
24393  00  =3  /* Rate Tbl Remove 2byte command class structs */           
24394  00  =3  /************************************************************/
24395  00  =3  typedef struct _ZW_RATE_TBL_REMOVE_2BYTE_FRAME_
24396  00  =3  {
24397  00  =3      BYTE      cmdClass;                     /* The command class */
24398  00  =3      BYTE      cmd;                          /* The command */
24399  00  =3      BYTE      properties1;                  /* masked byte */
24400  00  =3      BYTE      rateParameterSetId1;          /* MSB */
24401  00  =3      BYTE      rateParameterSetId2;          /* LSB */
24402  00  =3  } ZW_RATE_TBL_REMOVE_2BYTE_FRAME;
24403  00  =3  
24404  00  =3  /************************************************************/
24405  00  =3  /* Rate Tbl Remove 3byte command class structs */           
24406  00  =3  /************************************************************/
24407  00  =3  typedef struct _ZW_RATE_TBL_REMOVE_3BYTE_FRAME_
24408  00  =3  {
24409  00  =3      BYTE      cmdClass;                     /* The command class */
24410  00  =3      BYTE      cmd;                          /* The command */
24411  00  =3      BYTE      properties1;                  /* masked byte */
24412  00  =3      BYTE      rateParameterSetId1;          /* MSB */
24413  00  =3      BYTE      rateParameterSetId2;          
24414  00  =3      BYTE      rateParameterSetId3;          /* LSB */
24415  00  =3  } ZW_RATE_TBL_REMOVE_3BYTE_FRAME;
24416  00  =3  
24417  00  =3  /************************************************************/
24418  00  =3  /* Rate Tbl Remove 4byte command class structs */           
24419  00  =3  /************************************************************/
24420  00  =3  typedef struct _ZW_RATE_TBL_REMOVE_4BYTE_FRAME_
24421  00  =3  {
24422  00  =3      BYTE      cmdClass;                     /* The command class */
24423  00  =3      BYTE      cmd;                          /* The command */
24424  00  =3      BYTE      properties1;                  /* masked byte */
24425  00  =3      BYTE      rateParameterSetId1;          /* MSB */
24426  00  =3      BYTE      rateParameterSetId2;          
24427  00  =3      BYTE      rateParameterSetId3;          
24428  00  =3      BYTE      rateParameterSetId4;          /* LSB */
24429  00  =3  } ZW_RATE_TBL_REMOVE_4BYTE_FRAME;
24430  00  =3  
24431  00  =3  /************************************************************/
24432  00  =3  /* Rate Tbl Set 1byte command class structs */              
24433  00  =3  /************************************************************/
24434  00  =3  typedef struct _ZW_RATE_TBL_SET_1BYTE_FRAME_
24435  00  =3  {
24436  00  =3      BYTE      cmdClass;                     /* The command class */
24437  00  =3      BYTE      cmd;                          /* The command */
24438  00  =3      BYTE      rateParameterSetId;           /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 411 

24439  00  =3      BYTE      properties1;                  /* masked byte */
24440  00  =3      BYTE      rateCharacter1;               
24441  00  =3      BYTE      startHourLocalTime;           /**/
24442  00  =3      BYTE      startMinuteLocalTime;         /**/
24443  00  =3      BYTE      durationMinute1;              /* MSB */
24444  00  =3      BYTE      durationMinute2;              /* LSB */
24445  00  =3      BYTE      properties2;                  /* masked byte */
24446  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24447  00  =3      BYTE      minConsumptionValue2;         
24448  00  =3      BYTE      minConsumptionValue3;         
24449  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24450  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24451  00  =3      BYTE      maxConsumptionValue2;         
24452  00  =3      BYTE      maxConsumptionValue3;         
24453  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24454  00  =3      BYTE      properties3;                  /* masked byte */
24455  00  =3      BYTE      maxDemandValue1;              /* MSB */
24456  00  =3      BYTE      maxDemandValue2;              
24457  00  =3      BYTE      maxDemandValue3;              
24458  00  =3      BYTE      maxDemandValue4;              /* LSB */
24459  00  =3      BYTE      dcpRateId;                    /**/
24460  00  =3  } ZW_RATE_TBL_SET_1BYTE_FRAME;
24461  00  =3  
24462  00  =3  /************************************************************/
24463  00  =3  /* Rate Tbl Set 2byte command class structs */              
24464  00  =3  /************************************************************/
24465  00  =3  typedef struct _ZW_RATE_TBL_SET_2BYTE_FRAME_
24466  00  =3  {
24467  00  =3      BYTE      cmdClass;                     /* The command class */
24468  00  =3      BYTE      cmd;                          /* The command */
24469  00  =3      BYTE      rateParameterSetId;           /**/
24470  00  =3      BYTE      properties1;                  /* masked byte */
24471  00  =3      BYTE      rateCharacter1;               /* MSB */
24472  00  =3      BYTE      rateCharacter2;               /* LSB */
24473  00  =3      BYTE      startHourLocalTime;           /**/
24474  00  =3      BYTE      startMinuteLocalTime;         /**/
24475  00  =3      BYTE      durationMinute1;              /* MSB */
24476  00  =3      BYTE      durationMinute2;              /* LSB */
24477  00  =3      BYTE      properties2;                  /* masked byte */
24478  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24479  00  =3      BYTE      minConsumptionValue2;         
24480  00  =3      BYTE      minConsumptionValue3;         
24481  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24482  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24483  00  =3      BYTE      maxConsumptionValue2;         
24484  00  =3      BYTE      maxConsumptionValue3;         
24485  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24486  00  =3      BYTE      properties3;                  /* masked byte */
24487  00  =3      BYTE      maxDemandValue1;              /* MSB */
24488  00  =3      BYTE      maxDemandValue2;              
24489  00  =3      BYTE      maxDemandValue3;              
24490  00  =3      BYTE      maxDemandValue4;              /* LSB */
24491  00  =3      BYTE      dcpRateId;                    /**/
24492  00  =3  } ZW_RATE_TBL_SET_2BYTE_FRAME;
24493  00  =3  
24494  00  =3  /************************************************************/
24495  00  =3  /* Rate Tbl Set 3byte command class structs */              
24496  00  =3  /************************************************************/
24497  00  =3  typedef struct _ZW_RATE_TBL_SET_3BYTE_FRAME_
24498  00  =3  {
24499  00  =3      BYTE      cmdClass;                     /* The command class */
24500  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 412 

24501  00  =3      BYTE      rateParameterSetId;           /**/
24502  00  =3      BYTE      properties1;                  /* masked byte */
24503  00  =3      BYTE      rateCharacter1;               /* MSB */
24504  00  =3      BYTE      rateCharacter2;               
24505  00  =3      BYTE      rateCharacter3;               /* LSB */
24506  00  =3      BYTE      startHourLocalTime;           /**/
24507  00  =3      BYTE      startMinuteLocalTime;         /**/
24508  00  =3      BYTE      durationMinute1;              /* MSB */
24509  00  =3      BYTE      durationMinute2;              /* LSB */
24510  00  =3      BYTE      properties2;                  /* masked byte */
24511  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24512  00  =3      BYTE      minConsumptionValue2;         
24513  00  =3      BYTE      minConsumptionValue3;         
24514  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24515  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24516  00  =3      BYTE      maxConsumptionValue2;         
24517  00  =3      BYTE      maxConsumptionValue3;         
24518  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24519  00  =3      BYTE      properties3;                  /* masked byte */
24520  00  =3      BYTE      maxDemandValue1;              /* MSB */
24521  00  =3      BYTE      maxDemandValue2;              
24522  00  =3      BYTE      maxDemandValue3;              
24523  00  =3      BYTE      maxDemandValue4;              /* LSB */
24524  00  =3      BYTE      dcpRateId;                    /**/
24525  00  =3  } ZW_RATE_TBL_SET_3BYTE_FRAME;
24526  00  =3  
24527  00  =3  /************************************************************/
24528  00  =3  /* Rate Tbl Set 4byte command class structs */              
24529  00  =3  /************************************************************/
24530  00  =3  typedef struct _ZW_RATE_TBL_SET_4BYTE_FRAME_
24531  00  =3  {
24532  00  =3      BYTE      cmdClass;                     /* The command class */
24533  00  =3      BYTE      cmd;                          /* The command */
24534  00  =3      BYTE      rateParameterSetId;           /**/
24535  00  =3      BYTE      properties1;                  /* masked byte */
24536  00  =3      BYTE      rateCharacter1;               /* MSB */
24537  00  =3      BYTE      rateCharacter2;               
24538  00  =3      BYTE      rateCharacter3;               
24539  00  =3      BYTE      rateCharacter4;               /* LSB */
24540  00  =3      BYTE      startHourLocalTime;           /**/
24541  00  =3      BYTE      startMinuteLocalTime;         /**/
24542  00  =3      BYTE      durationMinute1;              /* MSB */
24543  00  =3      BYTE      durationMinute2;              /* LSB */
24544  00  =3      BYTE      properties2;                  /* masked byte */
24545  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24546  00  =3      BYTE      minConsumptionValue2;         
24547  00  =3      BYTE      minConsumptionValue3;         
24548  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24549  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24550  00  =3      BYTE      maxConsumptionValue2;         
24551  00  =3      BYTE      maxConsumptionValue3;         
24552  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24553  00  =3      BYTE      properties3;                  /* masked byte */
24554  00  =3      BYTE      maxDemandValue1;              /* MSB */
24555  00  =3      BYTE      maxDemandValue2;              
24556  00  =3      BYTE      maxDemandValue3;              
24557  00  =3      BYTE      maxDemandValue4;              /* LSB */
24558  00  =3      BYTE      dcpRateId;                    /**/
24559  00  =3  } ZW_RATE_TBL_SET_4BYTE_FRAME;
24560  00  =3  
24561  00  =3  /************************************************************/
24562  00  =3  /* Rate Tbl Active Rate Get command class structs */        
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 413 

24563  00  =3  /************************************************************/
24564  00  =3  typedef struct _ZW_RATE_TBL_ACTIVE_RATE_GET_FRAME_
24565  00  =3  {
24566  00  =3      BYTE      cmdClass;                     /* The command class */
24567  00  =3      BYTE      cmd;                          /* The command */
24568  00  =3  } ZW_RATE_TBL_ACTIVE_RATE_GET_FRAME;
24569  00  =3  
24570  00  =3  /************************************************************/
24571  00  =3  /* Rate Tbl Active Rate Report command class structs */     
24572  00  =3  /************************************************************/
24573  00  =3  typedef struct _ZW_RATE_TBL_ACTIVE_RATE_REPORT_FRAME_
24574  00  =3  {
24575  00  =3      BYTE      cmdClass;                     /* The command class */
24576  00  =3      BYTE      cmd;                          /* The command */
24577  00  =3      BYTE      rateParameterSetId;           /**/
24578  00  =3  } ZW_RATE_TBL_ACTIVE_RATE_REPORT_FRAME;
24579  00  =3  
24580  00  =3  /************************************************************/
24581  00  =3  /* Rate Tbl Current Data Get command class structs */       
24582  00  =3  /************************************************************/
24583  00  =3  typedef struct _ZW_RATE_TBL_CURRENT_DATA_GET_FRAME_
24584  00  =3  {
24585  00  =3      BYTE      cmdClass;                     /* The command class */
24586  00  =3      BYTE      cmd;                          /* The command */
24587  00  =3      BYTE      rateParameterSetId;           /**/
24588  00  =3      BYTE      datasetRequested1;            /* MSB */
24589  00  =3      BYTE      datasetRequested2;            
24590  00  =3      BYTE      datasetRequested3;            /* LSB */
24591  00  =3  } ZW_RATE_TBL_CURRENT_DATA_GET_FRAME;
24592  00  =3  
24593  00  =3  /************************************************************/
24594  00  =3  /* Rate Tbl Current Data Report variant group structs */    
24595  00  =3  /************************************************************/
24596  00  =3  typedef struct _VG_RATE_TBL_CURRENT_DATA_REPORT_VG_
24597  00  =3  {
24598  00  =3      BYTE      properties1;                  /* masked byte */
24599  00  =3      BYTE      currentValue1;                /* MSB */
24600  00  =3      BYTE      currentValue2;                
24601  00  =3      BYTE      currentValue3;                
24602  00  =3      BYTE      currentValue4;                /* LSB */
24603  00  =3  } VG_RATE_TBL_CURRENT_DATA_REPORT_VG;
24604  00  =3  
24605  00  =3  /************************************************************/
24606  00  =3  /* Rate Tbl Current Data Report 1byte command class structs */
24607  00  =3  /************************************************************/
24608  00  =3  typedef struct _ZW_RATE_TBL_CURRENT_DATA_REPORT_1BYTE_FRAME_
24609  00  =3  {
24610  00  =3      BYTE      cmdClass;                     /* The command class */
24611  00  =3      BYTE      cmd;                          /* The command */
24612  00  =3      BYTE      reportsToFollow;              /**/
24613  00  =3      BYTE      rateParameterSetId;           /**/
24614  00  =3      BYTE      dataset1;                     /* MSB */
24615  00  =3      BYTE      dataset2;                     
24616  00  =3      BYTE      dataset3;                     /* LSB */
24617  00  =3      BYTE      year1;                        /* MSB */
24618  00  =3      BYTE      year2;                        /* LSB */
24619  00  =3      BYTE      month;                        /**/
24620  00  =3      BYTE      day;                          /**/
24621  00  =3      BYTE      hourLocalTime;                /**/
24622  00  =3      BYTE      minuteLocalTime;              /**/
24623  00  =3      BYTE      secondLocalTime;              /**/
24624  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 414 

24625  00  =3  } ZW_RATE_TBL_CURRENT_DATA_REPORT_1BYTE_FRAME;
24626  00  =3  
24627  00  =3  /************************************************************/
24628  00  =3  /* Rate Tbl Current Data Report 2byte command class structs */
24629  00  =3  /************************************************************/
24630  00  =3  typedef struct _ZW_RATE_TBL_CURRENT_DATA_REPORT_2BYTE_FRAME_
24631  00  =3  {
24632  00  =3      BYTE      cmdClass;                     /* The command class */
24633  00  =3      BYTE      cmd;                          /* The command */
24634  00  =3      BYTE      reportsToFollow;              /**/
24635  00  =3      BYTE      rateParameterSetId;           /**/
24636  00  =3      BYTE      dataset1;                     /* MSB */
24637  00  =3      BYTE      dataset2;                     
24638  00  =3      BYTE      dataset3;                     /* LSB */
24639  00  =3      BYTE      year1;                        /* MSB */
24640  00  =3      BYTE      year2;                        /* LSB */
24641  00  =3      BYTE      month;                        /**/
24642  00  =3      BYTE      day;                          /**/
24643  00  =3      BYTE      hourLocalTime;                /**/
24644  00  =3      BYTE      minuteLocalTime;              /**/
24645  00  =3      BYTE      secondLocalTime;              /**/
24646  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
24647  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup2;                /**/
24648  00  =3  } ZW_RATE_TBL_CURRENT_DATA_REPORT_2BYTE_FRAME;
24649  00  =3  
24650  00  =3  /************************************************************/
24651  00  =3  /* Rate Tbl Current Data Report 3byte command class structs */
24652  00  =3  /************************************************************/
24653  00  =3  typedef struct _ZW_RATE_TBL_CURRENT_DATA_REPORT_3BYTE_FRAME_
24654  00  =3  {
24655  00  =3      BYTE      cmdClass;                     /* The command class */
24656  00  =3      BYTE      cmd;                          /* The command */
24657  00  =3      BYTE      reportsToFollow;              /**/
24658  00  =3      BYTE      rateParameterSetId;           /**/
24659  00  =3      BYTE      dataset1;                     /* MSB */
24660  00  =3      BYTE      dataset2;                     
24661  00  =3      BYTE      dataset3;                     /* LSB */
24662  00  =3      BYTE      year1;                        /* MSB */
24663  00  =3      BYTE      year2;                        /* LSB */
24664  00  =3      BYTE      month;                        /**/
24665  00  =3      BYTE      day;                          /**/
24666  00  =3      BYTE      hourLocalTime;                /**/
24667  00  =3      BYTE      minuteLocalTime;              /**/
24668  00  =3      BYTE      secondLocalTime;              /**/
24669  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
24670  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup2;                /**/
24671  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup3;                /**/
24672  00  =3  } ZW_RATE_TBL_CURRENT_DATA_REPORT_3BYTE_FRAME;
24673  00  =3  
24674  00  =3  /************************************************************/
24675  00  =3  /* Rate Tbl Current Data Report 4byte command class structs */
24676  00  =3  /************************************************************/
24677  00  =3  typedef struct _ZW_RATE_TBL_CURRENT_DATA_REPORT_4BYTE_FRAME_
24678  00  =3  {
24679  00  =3      BYTE      cmdClass;                     /* The command class */
24680  00  =3      BYTE      cmd;                          /* The command */
24681  00  =3      BYTE      reportsToFollow;              /**/
24682  00  =3      BYTE      rateParameterSetId;           /**/
24683  00  =3      BYTE      dataset1;                     /* MSB */
24684  00  =3      BYTE      dataset2;                     
24685  00  =3      BYTE      dataset3;                     /* LSB */
24686  00  =3      BYTE      year1;                        /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 415 

24687  00  =3      BYTE      year2;                        /* LSB */
24688  00  =3      BYTE      month;                        /**/
24689  00  =3      BYTE      day;                          /**/
24690  00  =3      BYTE      hourLocalTime;                /**/
24691  00  =3      BYTE      minuteLocalTime;              /**/
24692  00  =3      BYTE      secondLocalTime;              /**/
24693  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup1;                /**/
24694  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup2;                /**/
24695  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup3;                /**/
24696  00  =3      VG_RATE_TBL_CURRENT_DATA_REPORT_VG variantgroup4;                /**/
24697  00  =3  } ZW_RATE_TBL_CURRENT_DATA_REPORT_4BYTE_FRAME;
24698  00  =3  
24699  00  =3  /************************************************************/
24700  00  =3  /* Rate Tbl Get command class structs */                    
24701  00  =3  /************************************************************/
24702  00  =3  typedef struct _ZW_RATE_TBL_GET_FRAME_
24703  00  =3  {
24704  00  =3      BYTE      cmdClass;                     /* The command class */
24705  00  =3      BYTE      cmd;                          /* The command */
24706  00  =3      BYTE      rateParameterSetId;           /**/
24707  00  =3  } ZW_RATE_TBL_GET_FRAME;
24708  00  =3  
24709  00  =3  /************************************************************/
24710  00  =3  /* Rate Tbl Historical Data Get command class structs */    
24711  00  =3  /************************************************************/
24712  00  =3  typedef struct _ZW_RATE_TBL_HISTORICAL_DATA_GET_FRAME_
24713  00  =3  {
24714  00  =3      BYTE      cmdClass;                     /* The command class */
24715  00  =3      BYTE      cmd;                          /* The command */
24716  00  =3      BYTE      maximumReports;               /**/
24717  00  =3      BYTE      rateParameterSetId;           /**/
24718  00  =3      BYTE      datasetRequested1;            /* MSB */
24719  00  =3      BYTE      datasetRequested2;            
24720  00  =3      BYTE      datasetRequested3;            /* LSB */
24721  00  =3      BYTE      startYear1;                   /* MSB */
24722  00  =3      BYTE      startYear2;                   /* LSB */
24723  00  =3      BYTE      startMonth;                   /**/
24724  00  =3      BYTE      startDay;                     /**/
24725  00  =3      BYTE      startHourLocalTime;           /**/
24726  00  =3      BYTE      startMinuteLocalTime;         /**/
24727  00  =3      BYTE      startSecondLocalTime;         /**/
24728  00  =3      BYTE      stopYear1;                    /* MSB */
24729  00  =3      BYTE      stopYear2;                    /* LSB */
24730  00  =3      BYTE      stopMonth;                    /**/
24731  00  =3      BYTE      stopDay;                      /**/
24732  00  =3      BYTE      stopHourLocalTime;            /**/
24733  00  =3      BYTE      stopMinuteLocalTime;          /**/
24734  00  =3      BYTE      stopSecondLocalTime;          /**/
24735  00  =3  } ZW_RATE_TBL_HISTORICAL_DATA_GET_FRAME;
24736  00  =3  
24737  00  =3  /************************************************************/
24738  00  =3  /* Rate Tbl Historical Data Report variant group structs */ 
24739  00  =3  /************************************************************/
24740  00  =3  typedef struct _VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG_
24741  00  =3  {
24742  00  =3      BYTE      properties1;                  /* masked byte */
24743  00  =3      BYTE      historicalValue1;             /* MSB */
24744  00  =3      BYTE      historicalValue2;             
24745  00  =3      BYTE      historicalValue3;             
24746  00  =3      BYTE      historicalValue4;             /* LSB */
24747  00  =3  } VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG;
24748  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 416 

24749  00  =3  /************************************************************/
24750  00  =3  /* Rate Tbl Historical Data Report 1byte command class structs */
24751  00  =3  /************************************************************/
24752  00  =3  typedef struct _ZW_RATE_TBL_HISTORICAL_DATA_REPORT_1BYTE_FRAME_
24753  00  =3  {
24754  00  =3      BYTE      cmdClass;                     /* The command class */
24755  00  =3      BYTE      cmd;                          /* The command */
24756  00  =3      BYTE      reportsToFollow;              /**/
24757  00  =3      BYTE      rateParameterSetId;           /**/
24758  00  =3      BYTE      dataset1;                     /* MSB */
24759  00  =3      BYTE      dataset2;                     
24760  00  =3      BYTE      dataset3;                     /* LSB */
24761  00  =3      BYTE      year1;                        /* MSB */
24762  00  =3      BYTE      year2;                        /* LSB */
24763  00  =3      BYTE      month;                        /**/
24764  00  =3      BYTE      day;                          /**/
24765  00  =3      BYTE      hourLocalTime;                /**/
24766  00  =3      BYTE      minuteLocalTime;              /**/
24767  00  =3      BYTE      secondLocalTime;              /**/
24768  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
24769  00  =3  } ZW_RATE_TBL_HISTORICAL_DATA_REPORT_1BYTE_FRAME;
24770  00  =3  
24771  00  =3  /************************************************************/
24772  00  =3  /* Rate Tbl Historical Data Report 2byte command class structs */
24773  00  =3  /************************************************************/
24774  00  =3  typedef struct _ZW_RATE_TBL_HISTORICAL_DATA_REPORT_2BYTE_FRAME_
24775  00  =3  {
24776  00  =3      BYTE      cmdClass;                     /* The command class */
24777  00  =3      BYTE      cmd;                          /* The command */
24778  00  =3      BYTE      reportsToFollow;              /**/
24779  00  =3      BYTE      rateParameterSetId;           /**/
24780  00  =3      BYTE      dataset1;                     /* MSB */
24781  00  =3      BYTE      dataset2;                     
24782  00  =3      BYTE      dataset3;                     /* LSB */
24783  00  =3      BYTE      year1;                        /* MSB */
24784  00  =3      BYTE      year2;                        /* LSB */
24785  00  =3      BYTE      month;                        /**/
24786  00  =3      BYTE      day;                          /**/
24787  00  =3      BYTE      hourLocalTime;                /**/
24788  00  =3      BYTE      minuteLocalTime;              /**/
24789  00  =3      BYTE      secondLocalTime;              /**/
24790  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
24791  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup2;                /**/
24792  00  =3  } ZW_RATE_TBL_HISTORICAL_DATA_REPORT_2BYTE_FRAME;
24793  00  =3  
24794  00  =3  /************************************************************/
24795  00  =3  /* Rate Tbl Historical Data Report 3byte command class structs */
24796  00  =3  /************************************************************/
24797  00  =3  typedef struct _ZW_RATE_TBL_HISTORICAL_DATA_REPORT_3BYTE_FRAME_
24798  00  =3  {
24799  00  =3      BYTE      cmdClass;                     /* The command class */
24800  00  =3      BYTE      cmd;                          /* The command */
24801  00  =3      BYTE      reportsToFollow;              /**/
24802  00  =3      BYTE      rateParameterSetId;           /**/
24803  00  =3      BYTE      dataset1;                     /* MSB */
24804  00  =3      BYTE      dataset2;                     
24805  00  =3      BYTE      dataset3;                     /* LSB */
24806  00  =3      BYTE      year1;                        /* MSB */
24807  00  =3      BYTE      year2;                        /* LSB */
24808  00  =3      BYTE      month;                        /**/
24809  00  =3      BYTE      day;                          /**/
24810  00  =3      BYTE      hourLocalTime;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 417 

24811  00  =3      BYTE      minuteLocalTime;              /**/
24812  00  =3      BYTE      secondLocalTime;              /**/
24813  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
24814  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup2;                /**/
24815  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup3;                /**/
24816  00  =3  } ZW_RATE_TBL_HISTORICAL_DATA_REPORT_3BYTE_FRAME;
24817  00  =3  
24818  00  =3  /************************************************************/
24819  00  =3  /* Rate Tbl Historical Data Report 4byte command class structs */
24820  00  =3  /************************************************************/
24821  00  =3  typedef struct _ZW_RATE_TBL_HISTORICAL_DATA_REPORT_4BYTE_FRAME_
24822  00  =3  {
24823  00  =3      BYTE      cmdClass;                     /* The command class */
24824  00  =3      BYTE      cmd;                          /* The command */
24825  00  =3      BYTE      reportsToFollow;              /**/
24826  00  =3      BYTE      rateParameterSetId;           /**/
24827  00  =3      BYTE      dataset1;                     /* MSB */
24828  00  =3      BYTE      dataset2;                     
24829  00  =3      BYTE      dataset3;                     /* LSB */
24830  00  =3      BYTE      year1;                        /* MSB */
24831  00  =3      BYTE      year2;                        /* LSB */
24832  00  =3      BYTE      month;                        /**/
24833  00  =3      BYTE      day;                          /**/
24834  00  =3      BYTE      hourLocalTime;                /**/
24835  00  =3      BYTE      minuteLocalTime;              /**/
24836  00  =3      BYTE      secondLocalTime;              /**/
24837  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup1;                /**/
24838  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup2;                /**/
24839  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup3;                /**/
24840  00  =3      VG_RATE_TBL_HISTORICAL_DATA_REPORT_VG variantgroup4;                /**/
24841  00  =3  } ZW_RATE_TBL_HISTORICAL_DATA_REPORT_4BYTE_FRAME;
24842  00  =3  
24843  00  =3  /************************************************************/
24844  00  =3  /* Rate Tbl Report 1byte command class structs */           
24845  00  =3  /************************************************************/
24846  00  =3  typedef struct _ZW_RATE_TBL_REPORT_1BYTE_FRAME_
24847  00  =3  {
24848  00  =3      BYTE      cmdClass;                     /* The command class */
24849  00  =3      BYTE      cmd;                          /* The command */
24850  00  =3      BYTE      rateParameterSetId;           /**/
24851  00  =3      BYTE      properties1;                  /* masked byte */
24852  00  =3      BYTE      rateCharacter1;               
24853  00  =3      BYTE      startHourLocalTime;           /**/
24854  00  =3      BYTE      startMinuteLocalTime;         /**/
24855  00  =3      BYTE      durationMinute1;              /* MSB */
24856  00  =3      BYTE      durationMinute2;              /* LSB */
24857  00  =3      BYTE      properties2;                  /* masked byte */
24858  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24859  00  =3      BYTE      minConsumptionValue2;         
24860  00  =3      BYTE      minConsumptionValue3;         
24861  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24862  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24863  00  =3      BYTE      maxConsumptionValue2;         
24864  00  =3      BYTE      maxConsumptionValue3;         
24865  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24866  00  =3      BYTE      properties3;                  /* masked byte */
24867  00  =3      BYTE      maxDemandValue1;              /* MSB */
24868  00  =3      BYTE      maxDemandValue2;              
24869  00  =3      BYTE      maxDemandValue3;              
24870  00  =3      BYTE      maxDemandValue4;              /* LSB */
24871  00  =3      BYTE      dcpRateId;                    /**/
24872  00  =3  } ZW_RATE_TBL_REPORT_1BYTE_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 418 

24873  00  =3  
24874  00  =3  /************************************************************/
24875  00  =3  /* Rate Tbl Report 2byte command class structs */           
24876  00  =3  /************************************************************/
24877  00  =3  typedef struct _ZW_RATE_TBL_REPORT_2BYTE_FRAME_
24878  00  =3  {
24879  00  =3      BYTE      cmdClass;                     /* The command class */
24880  00  =3      BYTE      cmd;                          /* The command */
24881  00  =3      BYTE      rateParameterSetId;           /**/
24882  00  =3      BYTE      properties1;                  /* masked byte */
24883  00  =3      BYTE      rateCharacter1;               /* MSB */
24884  00  =3      BYTE      rateCharacter2;               /* LSB */
24885  00  =3      BYTE      startHourLocalTime;           /**/
24886  00  =3      BYTE      startMinuteLocalTime;         /**/
24887  00  =3      BYTE      durationMinute1;              /* MSB */
24888  00  =3      BYTE      durationMinute2;              /* LSB */
24889  00  =3      BYTE      properties2;                  /* masked byte */
24890  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24891  00  =3      BYTE      minConsumptionValue2;         
24892  00  =3      BYTE      minConsumptionValue3;         
24893  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24894  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24895  00  =3      BYTE      maxConsumptionValue2;         
24896  00  =3      BYTE      maxConsumptionValue3;         
24897  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24898  00  =3      BYTE      properties3;                  /* masked byte */
24899  00  =3      BYTE      maxDemandValue1;              /* MSB */
24900  00  =3      BYTE      maxDemandValue2;              
24901  00  =3      BYTE      maxDemandValue3;              
24902  00  =3      BYTE      maxDemandValue4;              /* LSB */
24903  00  =3      BYTE      dcpRateId;                    /**/
24904  00  =3  } ZW_RATE_TBL_REPORT_2BYTE_FRAME;
24905  00  =3  
24906  00  =3  /************************************************************/
24907  00  =3  /* Rate Tbl Report 3byte command class structs */           
24908  00  =3  /************************************************************/
24909  00  =3  typedef struct _ZW_RATE_TBL_REPORT_3BYTE_FRAME_
24910  00  =3  {
24911  00  =3      BYTE      cmdClass;                     /* The command class */
24912  00  =3      BYTE      cmd;                          /* The command */
24913  00  =3      BYTE      rateParameterSetId;           /**/
24914  00  =3      BYTE      properties1;                  /* masked byte */
24915  00  =3      BYTE      rateCharacter1;               /* MSB */
24916  00  =3      BYTE      rateCharacter2;               
24917  00  =3      BYTE      rateCharacter3;               /* LSB */
24918  00  =3      BYTE      startHourLocalTime;           /**/
24919  00  =3      BYTE      startMinuteLocalTime;         /**/
24920  00  =3      BYTE      durationMinute1;              /* MSB */
24921  00  =3      BYTE      durationMinute2;              /* LSB */
24922  00  =3      BYTE      properties2;                  /* masked byte */
24923  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24924  00  =3      BYTE      minConsumptionValue2;         
24925  00  =3      BYTE      minConsumptionValue3;         
24926  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24927  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24928  00  =3      BYTE      maxConsumptionValue2;         
24929  00  =3      BYTE      maxConsumptionValue3;         
24930  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24931  00  =3      BYTE      properties3;                  /* masked byte */
24932  00  =3      BYTE      maxDemandValue1;              /* MSB */
24933  00  =3      BYTE      maxDemandValue2;              
24934  00  =3      BYTE      maxDemandValue3;              
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 419 

24935  00  =3      BYTE      maxDemandValue4;              /* LSB */
24936  00  =3      BYTE      dcpRateId;                    /**/
24937  00  =3  } ZW_RATE_TBL_REPORT_3BYTE_FRAME;
24938  00  =3  
24939  00  =3  /************************************************************/
24940  00  =3  /* Rate Tbl Report 4byte command class structs */           
24941  00  =3  /************************************************************/
24942  00  =3  typedef struct _ZW_RATE_TBL_REPORT_4BYTE_FRAME_
24943  00  =3  {
24944  00  =3      BYTE      cmdClass;                     /* The command class */
24945  00  =3      BYTE      cmd;                          /* The command */
24946  00  =3      BYTE      rateParameterSetId;           /**/
24947  00  =3      BYTE      properties1;                  /* masked byte */
24948  00  =3      BYTE      rateCharacter1;               /* MSB */
24949  00  =3      BYTE      rateCharacter2;               
24950  00  =3      BYTE      rateCharacter3;               
24951  00  =3      BYTE      rateCharacter4;               /* LSB */
24952  00  =3      BYTE      startHourLocalTime;           /**/
24953  00  =3      BYTE      startMinuteLocalTime;         /**/
24954  00  =3      BYTE      durationMinute1;              /* MSB */
24955  00  =3      BYTE      durationMinute2;              /* LSB */
24956  00  =3      BYTE      properties2;                  /* masked byte */
24957  00  =3      BYTE      minConsumptionValue1;         /* MSB */
24958  00  =3      BYTE      minConsumptionValue2;         
24959  00  =3      BYTE      minConsumptionValue3;         
24960  00  =3      BYTE      minConsumptionValue4;         /* LSB */
24961  00  =3      BYTE      maxConsumptionValue1;         /* MSB */
24962  00  =3      BYTE      maxConsumptionValue2;         
24963  00  =3      BYTE      maxConsumptionValue3;         
24964  00  =3      BYTE      maxConsumptionValue4;         /* LSB */
24965  00  =3      BYTE      properties3;                  /* masked byte */
24966  00  =3      BYTE      maxDemandValue1;              /* MSB */
24967  00  =3      BYTE      maxDemandValue2;              
24968  00  =3      BYTE      maxDemandValue3;              
24969  00  =3      BYTE      maxDemandValue4;              /* LSB */
24970  00  =3      BYTE      dcpRateId;                    /**/
24971  00  =3  } ZW_RATE_TBL_REPORT_4BYTE_FRAME;
24972  00  =3  
24973  00  =3  /************************************************************/
24974  00  =3  /* Rate Tbl Supported Get command class structs */          
24975  00  =3  /************************************************************/
24976  00  =3  typedef struct _ZW_RATE_TBL_SUPPORTED_GET_FRAME_
24977  00  =3  {
24978  00  =3      BYTE      cmdClass;                     /* The command class */
24979  00  =3      BYTE      cmd;                          /* The command */
24980  00  =3  } ZW_RATE_TBL_SUPPORTED_GET_FRAME;
24981  00  =3  
24982  00  =3  /************************************************************/
24983  00  =3  /* Rate Tbl Supported Report command class structs */       
24984  00  =3  /************************************************************/
24985  00  =3  typedef struct _ZW_RATE_TBL_SUPPORTED_REPORT_FRAME_
24986  00  =3  {
24987  00  =3      BYTE      cmdClass;                     /* The command class */
24988  00  =3      BYTE      cmd;                          /* The command */
24989  00  =3      BYTE      ratesSupported;               /**/
24990  00  =3      BYTE      parameterSetSupportedBitMask1;/* MSB */
24991  00  =3      BYTE      parameterSetSupportedBitMask2;/* LSB */
24992  00  =3  } ZW_RATE_TBL_SUPPORTED_REPORT_FRAME;
24993  00  =3  
24994  00  =3  /************************************************************/
24995  00  =3  /* Remote Association Activate command class structs */     
24996  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 420 

24997  00  =3  typedef struct _ZW_REMOTE_ASSOCIATION_ACTIVATE_FRAME_
24998  00  =3  {
24999  00  =3      BYTE      cmdClass;                     /* The command class */
25000  00  =3      BYTE      cmd;                          /* The command */
25001  00  =3      BYTE      groupingIdentifier;           /**/
25002  00  =3  } ZW_REMOTE_ASSOCIATION_ACTIVATE_FRAME;
25003  00  =3  
25004  00  =3  /************************************************************/
25005  00  =3  /* Remote Association Configuration Get command class structs */
25006  00  =3  /************************************************************/
25007  00  =3  typedef struct _ZW_REMOTE_ASSOCIATION_CONFIGURATION_GET_FRAME_
25008  00  =3  {
25009  00  =3      BYTE      cmdClass;                     /* The command class */
25010  00  =3      BYTE      cmd;                          /* The command */
25011  00  =3      BYTE      localGroupingIdentifier;      /**/
25012  00  =3  } ZW_REMOTE_ASSOCIATION_CONFIGURATION_GET_FRAME;
25013  00  =3  
25014  00  =3  /************************************************************/
25015  00  =3  /* Remote Association Configuration Report command class structs */
25016  00  =3  /************************************************************/
25017  00  =3  typedef struct _ZW_REMOTE_ASSOCIATION_CONFIGURATION_REPORT_FRAME_
25018  00  =3  {
25019  00  =3      BYTE      cmdClass;                     /* The command class */
25020  00  =3      BYTE      cmd;                          /* The command */
25021  00  =3      BYTE      localGroupingIdentifier;      /**/
25022  00  =3      BYTE      remoteNodeid;                 /**/
25023  00  =3      BYTE      remoteGroupingIdentifier;     /**/
25024  00  =3  } ZW_REMOTE_ASSOCIATION_CONFIGURATION_REPORT_FRAME;
25025  00  =3  
25026  00  =3  /************************************************************/
25027  00  =3  /* Remote Association Configuration Set command class structs */
25028  00  =3  /************************************************************/
25029  00  =3  typedef struct _ZW_REMOTE_ASSOCIATION_CONFIGURATION_SET_FRAME_
25030  00  =3  {
25031  00  =3      BYTE      cmdClass;                     /* The command class */
25032  00  =3      BYTE      cmd;                          /* The command */
25033  00  =3      BYTE      localGroupingIdentifier;      /**/
25034  00  =3      BYTE      remoteNodeid;                 /**/
25035  00  =3      BYTE      remoteGroupingIdentifier;     /**/
25036  00  =3  } ZW_REMOTE_ASSOCIATION_CONFIGURATION_SET_FRAME;
25037  00  =3  
25038  00  =3  /************************************************************/
25039  00  =3  /* Scene Activation Set command class structs */            
25040  00  =3  /************************************************************/
25041  00  =3  typedef struct _ZW_SCENE_ACTIVATION_SET_FRAME_
25042  00  =3  {
25043  00  =3      BYTE      cmdClass;                     /* The command class */
25044  00  =3      BYTE      cmd;                          /* The command */
25045  00  =3      BYTE      sceneId;                      /**/
25046  00  =3      BYTE      dimmingDuration;              /**/
25047  00  =3  } ZW_SCENE_ACTIVATION_SET_FRAME;
25048  00  =3  
25049  00  =3  /************************************************************/
25050  00  =3  /* Scene Actuator Conf Get command class structs */         
25051  00  =3  /************************************************************/
25052  00  =3  typedef struct _ZW_SCENE_ACTUATOR_CONF_GET_FRAME_
25053  00  =3  {
25054  00  =3      BYTE      cmdClass;                     /* The command class */
25055  00  =3      BYTE      cmd;                          /* The command */
25056  00  =3      BYTE      sceneId;                      /**/
25057  00  =3  } ZW_SCENE_ACTUATOR_CONF_GET_FRAME;
25058  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 421 

25059  00  =3  /************************************************************/
25060  00  =3  /* Scene Actuator Conf Report command class structs */      
25061  00  =3  /************************************************************/
25062  00  =3  typedef struct _ZW_SCENE_ACTUATOR_CONF_REPORT_FRAME_
25063  00  =3  {
25064  00  =3      BYTE      cmdClass;                     /* The command class */
25065  00  =3      BYTE      cmd;                          /* The command */
25066  00  =3      BYTE      sceneId;                      /**/
25067  00  =3      BYTE      level;                        /**/
25068  00  =3      BYTE      dimmingDuration;              /**/
25069  00  =3  } ZW_SCENE_ACTUATOR_CONF_REPORT_FRAME;
25070  00  =3  
25071  00  =3  /************************************************************/
25072  00  =3  /* Scene Actuator Conf Set command class structs */         
25073  00  =3  /************************************************************/
25074  00  =3  typedef struct _ZW_SCENE_ACTUATOR_CONF_SET_FRAME_
25075  00  =3  {
25076  00  =3      BYTE      cmdClass;                     /* The command class */
25077  00  =3      BYTE      cmd;                          /* The command */
25078  00  =3      BYTE      sceneId;                      /**/
25079  00  =3      BYTE      dimmingDuration;              /**/
25080  00  =3      BYTE      level2;                       /* masked byte */
25081  00  =3      BYTE      level;                        /**/
25082  00  =3  } ZW_SCENE_ACTUATOR_CONF_SET_FRAME;
25083  00  =3  
25084  00  =3  /************************************************************/
25085  00  =3  /* Scene Controller Conf Get command class structs */       
25086  00  =3  /************************************************************/
25087  00  =3  typedef struct _ZW_SCENE_CONTROLLER_CONF_GET_FRAME_
25088  00  =3  {
25089  00  =3      BYTE      cmdClass;                     /* The command class */
25090  00  =3      BYTE      cmd;                          /* The command */
25091  00  =3      BYTE      groupId;                      /**/
25092  00  =3  } ZW_SCENE_CONTROLLER_CONF_GET_FRAME;
25093  00  =3  
25094  00  =3  /************************************************************/
25095  00  =3  /* Scene Controller Conf Report command class structs */    
25096  00  =3  /************************************************************/
25097  00  =3  typedef struct _ZW_SCENE_CONTROLLER_CONF_REPORT_FRAME_
25098  00  =3  {
25099  00  =3      BYTE      cmdClass;                     /* The command class */
25100  00  =3      BYTE      cmd;                          /* The command */
25101  00  =3      BYTE      groupId;                      /**/
25102  00  =3      BYTE      sceneId;                      /**/
25103  00  =3      BYTE      dimmingDuration;              /**/
25104  00  =3  } ZW_SCENE_CONTROLLER_CONF_REPORT_FRAME;
25105  00  =3  
25106  00  =3  /************************************************************/
25107  00  =3  /* Scene Controller Conf Set command class structs */       
25108  00  =3  /************************************************************/
25109  00  =3  typedef struct _ZW_SCENE_CONTROLLER_CONF_SET_FRAME_
25110  00  =3  {
25111  00  =3      BYTE      cmdClass;                     /* The command class */
25112  00  =3      BYTE      cmd;                          /* The command */
25113  00  =3      BYTE      groupId;                      /**/
25114  00  =3      BYTE      sceneId;                      /**/
25115  00  =3      BYTE      dimmingDuration;              /**/
25116  00  =3  } ZW_SCENE_CONTROLLER_CONF_SET_FRAME;
25117  00  =3  
25118  00  =3  /************************************************************/
25119  00  =3  /* Schedule Entry Lock Enable All Set command class structs */
25120  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 422 

25121  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_FRAME_
25122  00  =3  {
25123  00  =3      BYTE      cmdClass;                     /* The command class */
25124  00  =3      BYTE      cmd;                          /* The command */
25125  00  =3      BYTE      enabled;                      /**/
25126  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_FRAME;
25127  00  =3  
25128  00  =3  /************************************************************/
25129  00  =3  /* Schedule Entry Lock Enable Set command class structs */  
25130  00  =3  /************************************************************/
25131  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_FRAME_
25132  00  =3  {
25133  00  =3      BYTE      cmdClass;                     /* The command class */
25134  00  =3      BYTE      cmd;                          /* The command */
25135  00  =3      BYTE      userIdentifier;               /**/
25136  00  =3      BYTE      enabled;                      /**/
25137  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_FRAME;
25138  00  =3  
25139  00  =3  /************************************************************/
25140  00  =3  /* Schedule Entry Lock Week Day Get command class structs */
25141  00  =3  /************************************************************/
25142  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_FRAME_
25143  00  =3  {
25144  00  =3      BYTE      cmdClass;                     /* The command class */
25145  00  =3      BYTE      cmd;                          /* The command */
25146  00  =3      BYTE      userIdentifier;               /**/
25147  00  =3      BYTE      scheduleSlotId;               /**/
25148  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_FRAME;
25149  00  =3  
25150  00  =3  /************************************************************/
25151  00  =3  /* Schedule Entry Lock Week Day Report command class structs */
25152  00  =3  /************************************************************/
25153  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_FRAME_
25154  00  =3  {
25155  00  =3      BYTE      cmdClass;                     /* The command class */
25156  00  =3      BYTE      cmd;                          /* The command */
25157  00  =3      BYTE      userIdentifier;               /**/
25158  00  =3      BYTE      scheduleSlotId;               /**/
25159  00  =3      BYTE      dayOfWeek;                    /**/
25160  00  =3      BYTE      startHour;                    /**/
25161  00  =3      BYTE      startMinute;                  /**/
25162  00  =3      BYTE      stopHour;                     /**/
25163  00  =3      BYTE      stopMinute;                   /**/
25164  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_FRAME;
25165  00  =3  
25166  00  =3  /************************************************************/
25167  00  =3  /* Schedule Entry Lock Week Day Set command class structs */
25168  00  =3  /************************************************************/
25169  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_FRAME_
25170  00  =3  {
25171  00  =3      BYTE      cmdClass;                     /* The command class */
25172  00  =3      BYTE      cmd;                          /* The command */
25173  00  =3      BYTE      setAction;                    /**/
25174  00  =3      BYTE      userIdentifier;               /**/
25175  00  =3      BYTE      scheduleSlotId;               /**/
25176  00  =3      BYTE      dayOfWeek;                    /**/
25177  00  =3      BYTE      startHour;                    /**/
25178  00  =3      BYTE      startMinute;                  /**/
25179  00  =3      BYTE      stopHour;                     /**/
25180  00  =3      BYTE      stopMinute;                   /**/
25181  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_FRAME;
25182  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 423 

25183  00  =3  /************************************************************/
25184  00  =3  /* Schedule Entry Lock Year Day Get command class structs */
25185  00  =3  /************************************************************/
25186  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_FRAME_
25187  00  =3  {
25188  00  =3      BYTE      cmdClass;                     /* The command class */
25189  00  =3      BYTE      cmd;                          /* The command */
25190  00  =3      BYTE      userIdentifier;               /**/
25191  00  =3      BYTE      scheduleSlotId;               /**/
25192  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_FRAME;
25193  00  =3  
25194  00  =3  /************************************************************/
25195  00  =3  /* Schedule Entry Lock Year Day Report command class structs */
25196  00  =3  /************************************************************/
25197  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_FRAME_
25198  00  =3  {
25199  00  =3      BYTE      cmdClass;                     /* The command class */
25200  00  =3      BYTE      cmd;                          /* The command */
25201  00  =3      BYTE      userIdentifier;               /**/
25202  00  =3      BYTE      scheduleSlotId;               /**/
25203  00  =3      BYTE      startYear;                    /**/
25204  00  =3      BYTE      startMonth;                   /**/
25205  00  =3      BYTE      startDay;                     /**/
25206  00  =3      BYTE      startHour;                    /**/
25207  00  =3      BYTE      startMinute;                  /**/
25208  00  =3      BYTE      stopYear;                     /**/
25209  00  =3      BYTE      stopMonth;                    /**/
25210  00  =3      BYTE      stopDay;                      /**/
25211  00  =3      BYTE      stopHour;                     /**/
25212  00  =3      BYTE      stopMinute;                   /**/
25213  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_FRAME;
25214  00  =3  
25215  00  =3  /************************************************************/
25216  00  =3  /* Schedule Entry Lock Year Day Set command class structs */
25217  00  =3  /************************************************************/
25218  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_FRAME_
25219  00  =3  {
25220  00  =3      BYTE      cmdClass;                     /* The command class */
25221  00  =3      BYTE      cmd;                          /* The command */
25222  00  =3      BYTE      setAction;                    /**/
25223  00  =3      BYTE      userIdentifier;               /**/
25224  00  =3      BYTE      scheduleSlotId;               /**/
25225  00  =3      BYTE      startYear;                    /**/
25226  00  =3      BYTE      startMonth;                   /**/
25227  00  =3      BYTE      startDay;                     /**/
25228  00  =3      BYTE      startHour;                    /**/
25229  00  =3      BYTE      startMinute;                  /**/
25230  00  =3      BYTE      stopYear;                     /**/
25231  00  =3      BYTE      stopMonth;                    /**/
25232  00  =3      BYTE      stopDay;                      /**/
25233  00  =3      BYTE      stopHour;                     /**/
25234  00  =3      BYTE      stopMinute;                   /**/
25235  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_FRAME;
25236  00  =3  
25237  00  =3  /************************************************************/
25238  00  =3  /* Schedule Entry Type Supported Get command class structs */
25239  00  =3  /************************************************************/
25240  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_FRAME_
25241  00  =3  {
25242  00  =3      BYTE      cmdClass;                     /* The command class */
25243  00  =3      BYTE      cmd;                          /* The command */
25244  00  =3  } ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 424 

25245  00  =3  
25246  00  =3  /************************************************************/
25247  00  =3  /* Schedule Entry Type Supported Report command class structs */
25248  00  =3  /************************************************************/
25249  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_FRAME_
25250  00  =3  {
25251  00  =3      BYTE      cmdClass;                     /* The command class */
25252  00  =3      BYTE      cmd;                          /* The command */
25253  00  =3      BYTE      numberOfSlotsWeekDay;         /**/
25254  00  =3      BYTE      numberOfSlotsYearDay;         /**/
25255  00  =3  } ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_FRAME;
25256  00  =3  
25257  00  =3  /************************************************************/
25258  00  =3  /* Schedule Entry Lock Enable All Set V2 command class structs */
25259  00  =3  /************************************************************/
25260  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V2_FRAME_
25261  00  =3  {
25262  00  =3      BYTE      cmdClass;                     /* The command class */
25263  00  =3      BYTE      cmd;                          /* The command */
25264  00  =3      BYTE      enabled;                      /**/
25265  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V2_FRAME;
25266  00  =3  
25267  00  =3  /************************************************************/
25268  00  =3  /* Schedule Entry Lock Enable Set V2 command class structs */
25269  00  =3  /************************************************************/
25270  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_V2_FRAME_
25271  00  =3  {
25272  00  =3      BYTE      cmdClass;                     /* The command class */
25273  00  =3      BYTE      cmd;                          /* The command */
25274  00  =3      BYTE      userIdentifier;               /**/
25275  00  =3      BYTE      enabled;                      /**/
25276  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_V2_FRAME;
25277  00  =3  
25278  00  =3  /************************************************************/
25279  00  =3  /* Schedule Entry Lock Time Offset Get V2 command class structs */
25280  00  =3  /************************************************************/
25281  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V2_FRAME_
25282  00  =3  {
25283  00  =3      BYTE      cmdClass;                     /* The command class */
25284  00  =3      BYTE      cmd;                          /* The command */
25285  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V2_FRAME;
25286  00  =3  
25287  00  =3  /************************************************************/
25288  00  =3  /* Schedule Entry Lock Time Offset Report V2 command class structs */
25289  00  =3  /************************************************************/
25290  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V2_FRAME_
25291  00  =3  {
25292  00  =3      BYTE      cmdClass;                     /* The command class */
25293  00  =3      BYTE      cmd;                          /* The command */
25294  00  =3      BYTE      level;                        /* masked byte */
25295  00  =3      BYTE      minuteTzo;                    /**/
25296  00  =3      BYTE      level2;                       /* masked byte */
25297  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V2_FRAME;
25298  00  =3  
25299  00  =3  /************************************************************/
25300  00  =3  /* Schedule Entry Lock Time Offset Set V2 command class structs */
25301  00  =3  /************************************************************/
25302  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V2_FRAME_
25303  00  =3  {
25304  00  =3      BYTE      cmdClass;                     /* The command class */
25305  00  =3      BYTE      cmd;                          /* The command */
25306  00  =3      BYTE      level;                        /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 425 

25307  00  =3      BYTE      minuteTzo;                    /**/
25308  00  =3      BYTE      level2;                       /* masked byte */
25309  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V2_FRAME;
25310  00  =3  
25311  00  =3  /************************************************************/
25312  00  =3  /* Schedule Entry Lock Week Day Get V2 command class structs */
25313  00  =3  /************************************************************/
25314  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V2_FRAME_
25315  00  =3  {
25316  00  =3      BYTE      cmdClass;                     /* The command class */
25317  00  =3      BYTE      cmd;                          /* The command */
25318  00  =3      BYTE      userIdentifier;               /**/
25319  00  =3      BYTE      scheduleSlotId;               /**/
25320  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V2_FRAME;
25321  00  =3  
25322  00  =3  /************************************************************/
25323  00  =3  /* Schedule Entry Lock Week Day Report V2 command class structs */
25324  00  =3  /************************************************************/
25325  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V2_FRAME_
25326  00  =3  {
25327  00  =3      BYTE      cmdClass;                     /* The command class */
25328  00  =3      BYTE      cmd;                          /* The command */
25329  00  =3      BYTE      userIdentifier;               /**/
25330  00  =3      BYTE      scheduleSlotId;               /**/
25331  00  =3      BYTE      dayOfWeek;                    /**/
25332  00  =3      BYTE      startHour;                    /**/
25333  00  =3      BYTE      startMinute;                  /**/
25334  00  =3      BYTE      stopHour;                     /**/
25335  00  =3      BYTE      stopMinute;                   /**/
25336  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V2_FRAME;
25337  00  =3  
25338  00  =3  /************************************************************/
25339  00  =3  /* Schedule Entry Lock Week Day Set V2 command class structs */
25340  00  =3  /************************************************************/
25341  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V2_FRAME_
25342  00  =3  {
25343  00  =3      BYTE      cmdClass;                     /* The command class */
25344  00  =3      BYTE      cmd;                          /* The command */
25345  00  =3      BYTE      setAction;                    /**/
25346  00  =3      BYTE      userIdentifier;               /**/
25347  00  =3      BYTE      scheduleSlotId;               /**/
25348  00  =3      BYTE      dayOfWeek;                    /**/
25349  00  =3      BYTE      startHour;                    /**/
25350  00  =3      BYTE      startMinute;                  /**/
25351  00  =3      BYTE      stopHour;                     /**/
25352  00  =3      BYTE      stopMinute;                   /**/
25353  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V2_FRAME;
25354  00  =3  
25355  00  =3  /************************************************************/
25356  00  =3  /* Schedule Entry Lock Year Day Get V2 command class structs */
25357  00  =3  /************************************************************/
25358  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V2_FRAME_
25359  00  =3  {
25360  00  =3      BYTE      cmdClass;                     /* The command class */
25361  00  =3      BYTE      cmd;                          /* The command */
25362  00  =3      BYTE      userIdentifier;               /**/
25363  00  =3      BYTE      scheduleSlotId;               /**/
25364  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V2_FRAME;
25365  00  =3  
25366  00  =3  /************************************************************/
25367  00  =3  /* Schedule Entry Lock Year Day Report V2 command class structs */
25368  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 426 

25369  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V2_FRAME_
25370  00  =3  {
25371  00  =3      BYTE      cmdClass;                     /* The command class */
25372  00  =3      BYTE      cmd;                          /* The command */
25373  00  =3      BYTE      userIdentifier;               /**/
25374  00  =3      BYTE      scheduleSlotId;               /**/
25375  00  =3      BYTE      startYear;                    /**/
25376  00  =3      BYTE      startMonth;                   /**/
25377  00  =3      BYTE      startDay;                     /**/
25378  00  =3      BYTE      startHour;                    /**/
25379  00  =3      BYTE      startMinute;                  /**/
25380  00  =3      BYTE      stopYear;                     /**/
25381  00  =3      BYTE      stopMonth;                    /**/
25382  00  =3      BYTE      stopDay;                      /**/
25383  00  =3      BYTE      stopHour;                     /**/
25384  00  =3      BYTE      stopMinute;                   /**/
25385  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V2_FRAME;
25386  00  =3  
25387  00  =3  /************************************************************/
25388  00  =3  /* Schedule Entry Lock Year Day Set V2 command class structs */
25389  00  =3  /************************************************************/
25390  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V2_FRAME_
25391  00  =3  {
25392  00  =3      BYTE      cmdClass;                     /* The command class */
25393  00  =3      BYTE      cmd;                          /* The command */
25394  00  =3      BYTE      setAction;                    /**/
25395  00  =3      BYTE      userIdentifier;               /**/
25396  00  =3      BYTE      scheduleSlotId;               /**/
25397  00  =3      BYTE      startYear;                    /**/
25398  00  =3      BYTE      startMonth;                   /**/
25399  00  =3      BYTE      startDay;                     /**/
25400  00  =3      BYTE      startHour;                    /**/
25401  00  =3      BYTE      startMinute;                  /**/
25402  00  =3      BYTE      stopYear;                     /**/
25403  00  =3      BYTE      stopMonth;                    /**/
25404  00  =3      BYTE      stopDay;                      /**/
25405  00  =3      BYTE      stopHour;                     /**/
25406  00  =3      BYTE      stopMinute;                   /**/
25407  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V2_FRAME;
25408  00  =3  
25409  00  =3  /************************************************************/
25410  00  =3  /* Schedule Entry Type Supported Get V2 command class structs */
25411  00  =3  /************************************************************/
25412  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V2_FRAME_
25413  00  =3  {
25414  00  =3      BYTE      cmdClass;                     /* The command class */
25415  00  =3      BYTE      cmd;                          /* The command */
25416  00  =3  } ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V2_FRAME;
25417  00  =3  
25418  00  =3  /************************************************************/
25419  00  =3  /* Schedule Entry Type Supported Report V2 command class structs */
25420  00  =3  /************************************************************/
25421  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V2_FRAME_
25422  00  =3  {
25423  00  =3      BYTE      cmdClass;                     /* The command class */
25424  00  =3      BYTE      cmd;                          /* The command */
25425  00  =3      BYTE      numberOfSlotsWeekDay;         /**/
25426  00  =3      BYTE      numberOfSlotsYearDay;         /**/
25427  00  =3  } ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V2_FRAME;
25428  00  =3  
25429  00  =3  /************************************************************/
25430  00  =3  /* Schedule Entry Lock Enable All Set V3 command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 427 

25431  00  =3  /************************************************************/
25432  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V3_FRAME_
25433  00  =3  {
25434  00  =3      BYTE      cmdClass;                     /* The command class */
25435  00  =3      BYTE      cmd;                          /* The command */
25436  00  =3      BYTE      enabled;                      /**/
25437  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_V3_FRAME;
25438  00  =3  
25439  00  =3  /************************************************************/
25440  00  =3  /* Schedule Entry Lock Enable Set V3 command class structs */
25441  00  =3  /************************************************************/
25442  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_V3_FRAME_
25443  00  =3  {
25444  00  =3      BYTE      cmdClass;                     /* The command class */
25445  00  =3      BYTE      cmd;                          /* The command */
25446  00  =3      BYTE      userIdentifier;               /**/
25447  00  =3      BYTE      enabled;                      /**/
25448  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_ENABLE_SET_V3_FRAME;
25449  00  =3  
25450  00  =3  /************************************************************/
25451  00  =3  /* Schedule Entry Lock Time Offset Get V3 command class structs */
25452  00  =3  /************************************************************/
25453  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V3_FRAME_
25454  00  =3  {
25455  00  =3      BYTE      cmdClass;                     /* The command class */
25456  00  =3      BYTE      cmd;                          /* The command */
25457  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_GET_V3_FRAME;
25458  00  =3  
25459  00  =3  /************************************************************/
25460  00  =3  /* Schedule Entry Lock Time Offset Report V3 command class structs */
25461  00  =3  /************************************************************/
25462  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V3_FRAME_
25463  00  =3  {
25464  00  =3      BYTE      cmdClass;                     /* The command class */
25465  00  =3      BYTE      cmd;                          /* The command */
25466  00  =3      BYTE      level;                        /* masked byte */
25467  00  =3      BYTE      minuteTzo;                    /**/
25468  00  =3      BYTE      level2;                       /* masked byte */
25469  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_REPORT_V3_FRAME;
25470  00  =3  
25471  00  =3  /************************************************************/
25472  00  =3  /* Schedule Entry Lock Time Offset Set V3 command class structs */
25473  00  =3  /************************************************************/
25474  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V3_FRAME_
25475  00  =3  {
25476  00  =3      BYTE      cmdClass;                     /* The command class */
25477  00  =3      BYTE      cmd;                          /* The command */
25478  00  =3      BYTE      level;                        /* masked byte */
25479  00  =3      BYTE      minuteTzo;                    /**/
25480  00  =3      BYTE      level2;                       /* masked byte */
25481  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_TIME_OFFSET_SET_V3_FRAME;
25482  00  =3  
25483  00  =3  /************************************************************/
25484  00  =3  /* Schedule Entry Lock Week Day Get V3 command class structs */
25485  00  =3  /************************************************************/
25486  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V3_FRAME_
25487  00  =3  {
25488  00  =3      BYTE      cmdClass;                     /* The command class */
25489  00  =3      BYTE      cmd;                          /* The command */
25490  00  =3      BYTE      userIdentifier;               /**/
25491  00  =3      BYTE      scheduleSlotId;               /**/
25492  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_V3_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 428 

25493  00  =3  
25494  00  =3  /************************************************************/
25495  00  =3  /* Schedule Entry Lock Week Day Report V3 command class structs */
25496  00  =3  /************************************************************/
25497  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V3_FRAME_
25498  00  =3  {
25499  00  =3      BYTE      cmdClass;                     /* The command class */
25500  00  =3      BYTE      cmd;                          /* The command */
25501  00  =3      BYTE      userIdentifier;               /**/
25502  00  =3      BYTE      scheduleSlotId;               /**/
25503  00  =3      BYTE      dayOfWeek;                    /**/
25504  00  =3      BYTE      startHour;                    /**/
25505  00  =3      BYTE      startMinute;                  /**/
25506  00  =3      BYTE      stopHour;                     /**/
25507  00  =3      BYTE      stopMinute;                   /**/
25508  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_V3_FRAME;
25509  00  =3  
25510  00  =3  /************************************************************/
25511  00  =3  /* Schedule Entry Lock Week Day Set V3 command class structs */
25512  00  =3  /************************************************************/
25513  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V3_FRAME_
25514  00  =3  {
25515  00  =3      BYTE      cmdClass;                     /* The command class */
25516  00  =3      BYTE      cmd;                          /* The command */
25517  00  =3      BYTE      setAction;                    /**/
25518  00  =3      BYTE      userIdentifier;               /**/
25519  00  =3      BYTE      scheduleSlotId;               /**/
25520  00  =3      BYTE      dayOfWeek;                    /**/
25521  00  =3      BYTE      startHour;                    /**/
25522  00  =3      BYTE      startMinute;                  /**/
25523  00  =3      BYTE      stopHour;                     /**/
25524  00  =3      BYTE      stopMinute;                   /**/
25525  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_V3_FRAME;
25526  00  =3  
25527  00  =3  /************************************************************/
25528  00  =3  /* Schedule Entry Lock Year Day Get V3 command class structs */
25529  00  =3  /************************************************************/
25530  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V3_FRAME_
25531  00  =3  {
25532  00  =3      BYTE      cmdClass;                     /* The command class */
25533  00  =3      BYTE      cmd;                          /* The command */
25534  00  =3      BYTE      userIdentifier;               /**/
25535  00  =3      BYTE      scheduleSlotId;               /**/
25536  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_V3_FRAME;
25537  00  =3  
25538  00  =3  /************************************************************/
25539  00  =3  /* Schedule Entry Lock Year Day Report V3 command class structs */
25540  00  =3  /************************************************************/
25541  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V3_FRAME_
25542  00  =3  {
25543  00  =3      BYTE      cmdClass;                     /* The command class */
25544  00  =3      BYTE      cmd;                          /* The command */
25545  00  =3      BYTE      userIdentifier;               /**/
25546  00  =3      BYTE      scheduleSlotId;               /**/
25547  00  =3      BYTE      startYear;                    /**/
25548  00  =3      BYTE      startMonth;                   /**/
25549  00  =3      BYTE      startDay;                     /**/
25550  00  =3      BYTE      startHour;                    /**/
25551  00  =3      BYTE      startMinute;                  /**/
25552  00  =3      BYTE      stopYear;                     /**/
25553  00  =3      BYTE      stopMonth;                    /**/
25554  00  =3      BYTE      stopDay;                      /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 429 

25555  00  =3      BYTE      stopHour;                     /**/
25556  00  =3      BYTE      stopMinute;                   /**/
25557  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_V3_FRAME;
25558  00  =3  
25559  00  =3  /************************************************************/
25560  00  =3  /* Schedule Entry Lock Year Day Set V3 command class structs */
25561  00  =3  /************************************************************/
25562  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V3_FRAME_
25563  00  =3  {
25564  00  =3      BYTE      cmdClass;                     /* The command class */
25565  00  =3      BYTE      cmd;                          /* The command */
25566  00  =3      BYTE      setAction;                    /**/
25567  00  =3      BYTE      userIdentifier;               /**/
25568  00  =3      BYTE      scheduleSlotId;               /**/
25569  00  =3      BYTE      startYear;                    /**/
25570  00  =3      BYTE      startMonth;                   /**/
25571  00  =3      BYTE      startDay;                     /**/
25572  00  =3      BYTE      startHour;                    /**/
25573  00  =3      BYTE      startMinute;                  /**/
25574  00  =3      BYTE      stopYear;                     /**/
25575  00  =3      BYTE      stopMonth;                    /**/
25576  00  =3      BYTE      stopDay;                      /**/
25577  00  =3      BYTE      stopHour;                     /**/
25578  00  =3      BYTE      stopMinute;                   /**/
25579  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_V3_FRAME;
25580  00  =3  
25581  00  =3  /************************************************************/
25582  00  =3  /* Schedule Entry Type Supported Get V3 command class structs */
25583  00  =3  /************************************************************/
25584  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V3_FRAME_
25585  00  =3  {
25586  00  =3      BYTE      cmdClass;                     /* The command class */
25587  00  =3      BYTE      cmd;                          /* The command */
25588  00  =3  } ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_GET_V3_FRAME;
25589  00  =3  
25590  00  =3  /************************************************************/
25591  00  =3  /* Schedule Entry Type Supported Report V3 command class structs */
25592  00  =3  /************************************************************/
25593  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V3_FRAME_
25594  00  =3  {
25595  00  =3      BYTE      cmdClass;                     /* The command class */
25596  00  =3      BYTE      cmd;                          /* The command */
25597  00  =3      BYTE      numberOfSlotsWeekDay;         /**/
25598  00  =3      BYTE      numberOfSlotsYearDay;         /**/
25599  00  =3      BYTE      numberOfSlotsDailyRepeating;  /**/
25600  00  =3  } ZW_SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT_V3_FRAME;
25601  00  =3  
25602  00  =3  /************************************************************/
25603  00  =3  /* Schedule Entry Lock Daily Repeating Get V3 command class structs */
25604  00  =3  /************************************************************/
25605  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_GET_V3_FRAME_
25606  00  =3  {
25607  00  =3      BYTE      cmdClass;                     /* The command class */
25608  00  =3      BYTE      cmd;                          /* The command */
25609  00  =3      BYTE      userIdentifier;               /**/
25610  00  =3      BYTE      scheduleSlotId;               /**/
25611  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_GET_V3_FRAME;
25612  00  =3  
25613  00  =3  /************************************************************/
25614  00  =3  /* Schedule Entry Lock Daily Repeating Report V3 command class structs */
25615  00  =3  /************************************************************/
25616  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_REPORT_V3_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 430 

25617  00  =3  {
25618  00  =3      BYTE      cmdClass;                     /* The command class */
25619  00  =3      BYTE      cmd;                          /* The command */
25620  00  =3      BYTE      userIdentifier;               /**/
25621  00  =3      BYTE      scheduleSlotId;               /**/
25622  00  =3      BYTE      weekDayBitmask;               /**/
25623  00  =3      BYTE      startHour;                    /**/
25624  00  =3      BYTE      startMinute;                  /**/
25625  00  =3      BYTE      durationHour;                 /**/
25626  00  =3      BYTE      durationMinute;               /**/
25627  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_REPORT_V3_FRAME;
25628  00  =3  
25629  00  =3  /************************************************************/
25630  00  =3  /* Schedule Entry Lock Daily Repeating Set V3 command class structs */
25631  00  =3  /************************************************************/
25632  00  =3  typedef struct _ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_SET_V3_FRAME_
25633  00  =3  {
25634  00  =3      BYTE      cmdClass;                     /* The command class */
25635  00  =3      BYTE      cmd;                          /* The command */
25636  00  =3      BYTE      setAction;                    /**/
25637  00  =3      BYTE      userIdentifier;               /**/
25638  00  =3      BYTE      scheduleSlotId;               /**/
25639  00  =3      BYTE      weekDayBitmask;               /**/
25640  00  =3      BYTE      startHour;                    /**/
25641  00  =3      BYTE      startMinute;                  /**/
25642  00  =3      BYTE      durationHour;                 /**/
25643  00  =3      BYTE      durationMinute;               /**/
25644  00  =3  } ZW_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_SET_V3_FRAME;
25645  00  =3  
25646  00  =3  /************************************************************/
25647  00  =3  /* Screen Attributes Get command class structs */           
25648  00  =3  /************************************************************/
25649  00  =3  typedef struct _ZW_SCREEN_ATTRIBUTES_GET_FRAME_
25650  00  =3  {
25651  00  =3      BYTE      cmdClass;                     /* The command class */
25652  00  =3      BYTE      cmd;                          /* The command */
25653  00  =3  } ZW_SCREEN_ATTRIBUTES_GET_FRAME;
25654  00  =3  
25655  00  =3  /************************************************************/
25656  00  =3  /* Screen Attributes Report command class structs */        
25657  00  =3  /************************************************************/
25658  00  =3  typedef struct _ZW_SCREEN_ATTRIBUTES_REPORT_FRAME_
25659  00  =3  {
25660  00  =3      BYTE      cmdClass;                     /* The command class */
25661  00  =3      BYTE      cmd;                          /* The command */
25662  00  =3      BYTE      properties1;                  /* masked byte */
25663  00  =3      BYTE      numberOfCharactersPerLine;    /**/
25664  00  =3      BYTE      sizeOfLineBuffer;             /**/
25665  00  =3      BYTE      numericalPresentationOfACharacter;/**/
25666  00  =3  } ZW_SCREEN_ATTRIBUTES_REPORT_FRAME;
25667  00  =3  
25668  00  =3  /************************************************************/
25669  00  =3  /* Screen Attributes Get V2 command class structs */        
25670  00  =3  /************************************************************/
25671  00  =3  typedef struct _ZW_SCREEN_ATTRIBUTES_GET_V2_FRAME_
25672  00  =3  {
25673  00  =3      BYTE      cmdClass;                     /* The command class */
25674  00  =3      BYTE      cmd;                          /* The command */
25675  00  =3  } ZW_SCREEN_ATTRIBUTES_GET_V2_FRAME;
25676  00  =3  
25677  00  =3  /************************************************************/
25678  00  =3  /* Screen Attributes Report V2 command class structs */     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 431 

25679  00  =3  /************************************************************/
25680  00  =3  typedef struct _ZW_SCREEN_ATTRIBUTES_REPORT_V2_FRAME_
25681  00  =3  {
25682  00  =3      BYTE      cmdClass;                     /* The command class */
25683  00  =3      BYTE      cmd;                          /* The command */
25684  00  =3      BYTE      properties1;                  /* masked byte */
25685  00  =3      BYTE      numberOfCharactersPerLine;    /**/
25686  00  =3      BYTE      sizeOfLineBuffer;             /**/
25687  00  =3      BYTE      numericalPresentationOfACharacter;/**/
25688  00  =3      BYTE      screenTimeout;                /**/
25689  00  =3  } ZW_SCREEN_ATTRIBUTES_REPORT_V2_FRAME;
25690  00  =3  
25691  00  =3  /************************************************************/
25692  00  =3  /* Screen Md Get command class structs */                   
25693  00  =3  /************************************************************/
25694  00  =3  typedef struct _ZW_SCREEN_MD_GET_FRAME_
25695  00  =3  {
25696  00  =3      BYTE      cmdClass;                     /* The command class */
25697  00  =3      BYTE      cmd;                          /* The command */
25698  00  =3      BYTE      numberOfReports;              /**/
25699  00  =3      BYTE      nodeId;                       /**/
25700  00  =3  } ZW_SCREEN_MD_GET_FRAME;
25701  00  =3  
25702  00  =3  /************************************************************/
25703  00  =3  /* Screen Md Report variant group structs */                
25704  00  =3  /************************************************************/
25705  00  =3  typedef struct _VG_SCREEN_MD_REPORT_1BYTE_VG_
25706  00  =3  {
25707  00  =3      BYTE      properties1;                  /* masked byte */
25708  00  =3      BYTE      characterPosition;            /**/
25709  00  =3      BYTE      numberOfCharacters;           /**/
25710  00  =3      BYTE      character1;                   
25711  00  =3  } VG_SCREEN_MD_REPORT_1BYTE_VG;
25712  00  =3  
25713  00  =3  /************************************************************/
25714  00  =3  /* Screen Md Report variant group structs */                
25715  00  =3  /************************************************************/
25716  00  =3  typedef struct _VG_SCREEN_MD_REPORT_2BYTE_VG_
25717  00  =3  {
25718  00  =3      BYTE      properties1;                  /* masked byte */
25719  00  =3      BYTE      characterPosition;            /**/
25720  00  =3      BYTE      numberOfCharacters;           /**/
25721  00  =3      BYTE      character1;                   /* MSB */
25722  00  =3      BYTE      character2;                   /* LSB */
25723  00  =3  } VG_SCREEN_MD_REPORT_2BYTE_VG;
25724  00  =3  
25725  00  =3  /************************************************************/
25726  00  =3  /* Screen Md Report variant group structs */                
25727  00  =3  /************************************************************/
25728  00  =3  typedef struct _VG_SCREEN_MD_REPORT_3BYTE_VG_
25729  00  =3  {
25730  00  =3      BYTE      properties1;                  /* masked byte */
25731  00  =3      BYTE      characterPosition;            /**/
25732  00  =3      BYTE      numberOfCharacters;           /**/
25733  00  =3      BYTE      character1;                   /* MSB */
25734  00  =3      BYTE      character2;                   
25735  00  =3      BYTE      character3;                   /* LSB */
25736  00  =3  } VG_SCREEN_MD_REPORT_3BYTE_VG;
25737  00  =3  
25738  00  =3  /************************************************************/
25739  00  =3  /* Screen Md Report variant group structs */                
25740  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 432 

25741  00  =3  typedef struct _VG_SCREEN_MD_REPORT_4BYTE_VG_
25742  00  =3  {
25743  00  =3      BYTE      properties1;                  /* masked byte */
25744  00  =3      BYTE      characterPosition;            /**/
25745  00  =3      BYTE      numberOfCharacters;           /**/
25746  00  =3      BYTE      character1;                   /* MSB */
25747  00  =3      BYTE      character2;                   
25748  00  =3      BYTE      character3;                   
25749  00  =3      BYTE      character4;                   /* LSB */
25750  00  =3  } VG_SCREEN_MD_REPORT_4BYTE_VG;
25751  00  =3  
25752  00  =3  /************************************************************/
25753  00  =3  /* Screen Md Report 1byte command class structs */          
25754  00  =3  /************************************************************/
25755  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_1BYTE_FRAME_
25756  00  =3  {
25757  00  =3      BYTE      cmdClass;                     /* The command class */
25758  00  =3      BYTE      cmd;                          /* The command */
25759  00  =3      BYTE      properties1;                  /* masked byte */
25760  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup1;                /**/
25761  00  =3  } ZW_SCREEN_MD_REPORT_1BYTE_FRAME;
25762  00  =3  
25763  00  =3  /************************************************************/
25764  00  =3  /* Screen Md Report 2byte command class structs */          
25765  00  =3  /************************************************************/
25766  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_2BYTE_FRAME_
25767  00  =3  {
25768  00  =3      BYTE      cmdClass;                     /* The command class */
25769  00  =3      BYTE      cmd;                          /* The command */
25770  00  =3      BYTE      properties1;                  /* masked byte */
25771  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup1;                /**/
25772  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup2;                /**/
25773  00  =3  } ZW_SCREEN_MD_REPORT_2BYTE_FRAME;
25774  00  =3  
25775  00  =3  /************************************************************/
25776  00  =3  /* Screen Md Report 3byte command class structs */          
25777  00  =3  /************************************************************/
25778  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_3BYTE_FRAME_
25779  00  =3  {
25780  00  =3      BYTE      cmdClass;                     /* The command class */
25781  00  =3      BYTE      cmd;                          /* The command */
25782  00  =3      BYTE      properties1;                  /* masked byte */
25783  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup1;                /**/
25784  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup2;                /**/
25785  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup3;                /**/
25786  00  =3  } ZW_SCREEN_MD_REPORT_3BYTE_FRAME;
25787  00  =3  
25788  00  =3  /************************************************************/
25789  00  =3  /* Screen Md Report 4byte command class structs */          
25790  00  =3  /************************************************************/
25791  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_4BYTE_FRAME_
25792  00  =3  {
25793  00  =3      BYTE      cmdClass;                     /* The command class */
25794  00  =3      BYTE      cmd;                          /* The command */
25795  00  =3      BYTE      properties1;                  /* masked byte */
25796  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup1;                /**/
25797  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup2;                /**/
25798  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup3;                /**/
25799  00  =3      VG_SCREEN_MD_REPORT_4BYTE_VG variantgroup4;                /**/
25800  00  =3  } ZW_SCREEN_MD_REPORT_4BYTE_FRAME;
25801  00  =3  
25802  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 433 

25803  00  =3  /* Screen Md Get V2 command class structs */                
25804  00  =3  /************************************************************/
25805  00  =3  typedef struct _ZW_SCREEN_MD_GET_V2_FRAME_
25806  00  =3  {
25807  00  =3      BYTE      cmdClass;                     /* The command class */
25808  00  =3      BYTE      cmd;                          /* The command */
25809  00  =3      BYTE      numberOfReports;              /**/
25810  00  =3      BYTE      nodeId;                       /**/
25811  00  =3  } ZW_SCREEN_MD_GET_V2_FRAME;
25812  00  =3  
25813  00  =3  /************************************************************/
25814  00  =3  /* Screen Md Report V2 variant group structs */             
25815  00  =3  /************************************************************/
25816  00  =3  typedef struct _VG_SCREEN_MD_REPORT_1BYTE_V2_VG_
25817  00  =3  {
25818  00  =3      BYTE      properties1;                  /* masked byte */
25819  00  =3      BYTE      characterPosition;            /**/
25820  00  =3      BYTE      numberOfCharacters;           /**/
25821  00  =3      BYTE      character1;                   
25822  00  =3  } VG_SCREEN_MD_REPORT_1BYTE_V2_VG;
25823  00  =3  
25824  00  =3  /************************************************************/
25825  00  =3  /* Screen Md Report V2 variant group structs */             
25826  00  =3  /************************************************************/
25827  00  =3  typedef struct _VG_SCREEN_MD_REPORT_2BYTE_V2_VG_
25828  00  =3  {
25829  00  =3      BYTE      properties1;                  /* masked byte */
25830  00  =3      BYTE      characterPosition;            /**/
25831  00  =3      BYTE      numberOfCharacters;           /**/
25832  00  =3      BYTE      character1;                   /* MSB */
25833  00  =3      BYTE      character2;                   /* LSB */
25834  00  =3  } VG_SCREEN_MD_REPORT_2BYTE_V2_VG;
25835  00  =3  
25836  00  =3  /************************************************************/
25837  00  =3  /* Screen Md Report V2 variant group structs */             
25838  00  =3  /************************************************************/
25839  00  =3  typedef struct _VG_SCREEN_MD_REPORT_3BYTE_V2_VG_
25840  00  =3  {
25841  00  =3      BYTE      properties1;                  /* masked byte */
25842  00  =3      BYTE      characterPosition;            /**/
25843  00  =3      BYTE      numberOfCharacters;           /**/
25844  00  =3      BYTE      character1;                   /* MSB */
25845  00  =3      BYTE      character2;                   
25846  00  =3      BYTE      character3;                   /* LSB */
25847  00  =3  } VG_SCREEN_MD_REPORT_3BYTE_V2_VG;
25848  00  =3  
25849  00  =3  /************************************************************/
25850  00  =3  /* Screen Md Report V2 variant group structs */             
25851  00  =3  /************************************************************/
25852  00  =3  typedef struct _VG_SCREEN_MD_REPORT_4BYTE_V2_VG_
25853  00  =3  {
25854  00  =3      BYTE      properties1;                  /* masked byte */
25855  00  =3      BYTE      characterPosition;            /**/
25856  00  =3      BYTE      numberOfCharacters;           /**/
25857  00  =3      BYTE      character1;                   /* MSB */
25858  00  =3      BYTE      character2;                   
25859  00  =3      BYTE      character3;                   
25860  00  =3      BYTE      character4;                   /* LSB */
25861  00  =3  } VG_SCREEN_MD_REPORT_4BYTE_V2_VG;
25862  00  =3  
25863  00  =3  /************************************************************/
25864  00  =3  /* Screen Md Report 1byte V2 command class structs */       
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 434 

25865  00  =3  /************************************************************/
25866  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_1BYTE_V2_FRAME_
25867  00  =3  {
25868  00  =3      BYTE      cmdClass;                     /* The command class */
25869  00  =3      BYTE      cmd;                          /* The command */
25870  00  =3      BYTE      properties1;                  /* masked byte */
25871  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup1;                /**/
25872  00  =3      BYTE      properties2;                  /* masked byte */
25873  00  =3  } ZW_SCREEN_MD_REPORT_1BYTE_V2_FRAME;
25874  00  =3  
25875  00  =3  /************************************************************/
25876  00  =3  /* Screen Md Report 2byte V2 command class structs */       
25877  00  =3  /************************************************************/
25878  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_2BYTE_V2_FRAME_
25879  00  =3  {
25880  00  =3      BYTE      cmdClass;                     /* The command class */
25881  00  =3      BYTE      cmd;                          /* The command */
25882  00  =3      BYTE      properties1;                  /* masked byte */
25883  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup1;                /**/
25884  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup2;                /**/
25885  00  =3      BYTE      properties2;                  /* masked byte */
25886  00  =3  } ZW_SCREEN_MD_REPORT_2BYTE_V2_FRAME;
25887  00  =3  
25888  00  =3  /************************************************************/
25889  00  =3  /* Screen Md Report 3byte V2 command class structs */       
25890  00  =3  /************************************************************/
25891  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_3BYTE_V2_FRAME_
25892  00  =3  {
25893  00  =3      BYTE      cmdClass;                     /* The command class */
25894  00  =3      BYTE      cmd;                          /* The command */
25895  00  =3      BYTE      properties1;                  /* masked byte */
25896  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup1;                /**/
25897  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup2;                /**/
25898  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup3;                /**/
25899  00  =3      BYTE      properties2;                  /* masked byte */
25900  00  =3  } ZW_SCREEN_MD_REPORT_3BYTE_V2_FRAME;
25901  00  =3  
25902  00  =3  /************************************************************/
25903  00  =3  /* Screen Md Report 4byte V2 command class structs */       
25904  00  =3  /************************************************************/
25905  00  =3  typedef struct _ZW_SCREEN_MD_REPORT_4BYTE_V2_FRAME_
25906  00  =3  {
25907  00  =3      BYTE      cmdClass;                     /* The command class */
25908  00  =3      BYTE      cmd;                          /* The command */
25909  00  =3      BYTE      properties1;                  /* masked byte */
25910  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup1;                /**/
25911  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup2;                /**/
25912  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup3;                /**/
25913  00  =3      VG_SCREEN_MD_REPORT_4BYTE_V2_VG variantgroup4;                /**/
25914  00  =3      BYTE      properties2;                  /* masked byte */
25915  00  =3  } ZW_SCREEN_MD_REPORT_4BYTE_V2_FRAME;
25916  00  =3  
25917  00  =3  /************************************************************/
25918  00  =3  /* Security Panel Mode Get command class structs */         
25919  00  =3  /************************************************************/
25920  00  =3  typedef struct _ZW_SECURITY_PANEL_MODE_GET_FRAME_
25921  00  =3  {
25922  00  =3      BYTE      cmdClass;                     /* The command class */
25923  00  =3      BYTE      cmd;                          /* The command */
25924  00  =3  } ZW_SECURITY_PANEL_MODE_GET_FRAME;
25925  00  =3  
25926  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 435 

25927  00  =3  /* Security Panel Mode Report command class structs */      
25928  00  =3  /************************************************************/
25929  00  =3  typedef struct _ZW_SECURITY_PANEL_MODE_REPORT_FRAME_
25930  00  =3  {
25931  00  =3      BYTE      cmdClass;                     /* The command class */
25932  00  =3      BYTE      cmd;                          /* The command */
25933  00  =3      BYTE      mode;                         /**/
25934  00  =3  } ZW_SECURITY_PANEL_MODE_REPORT_FRAME;
25935  00  =3  
25936  00  =3  /************************************************************/
25937  00  =3  /* Security Panel Mode Set command class structs */         
25938  00  =3  /************************************************************/
25939  00  =3  typedef struct _ZW_SECURITY_PANEL_MODE_SET_FRAME_
25940  00  =3  {
25941  00  =3      BYTE      cmdClass;                     /* The command class */
25942  00  =3      BYTE      cmd;                          /* The command */
25943  00  =3      BYTE      mode;                         /**/
25944  00  =3  } ZW_SECURITY_PANEL_MODE_SET_FRAME;
25945  00  =3  
25946  00  =3  /************************************************************/
25947  00  =3  /* Security Panel Mode Supported Get command class structs */
25948  00  =3  /************************************************************/
25949  00  =3  typedef struct _ZW_SECURITY_PANEL_MODE_SUPPORTED_GET_FRAME_
25950  00  =3  {
25951  00  =3      BYTE      cmdClass;                     /* The command class */
25952  00  =3      BYTE      cmd;                          /* The command */
25953  00  =3  } ZW_SECURITY_PANEL_MODE_SUPPORTED_GET_FRAME;
25954  00  =3  
25955  00  =3  /************************************************************/
25956  00  =3  /* Security Panel Mode Supported Report command class structs */
25957  00  =3  /************************************************************/
25958  00  =3  typedef struct _ZW_SECURITY_PANEL_MODE_SUPPORTED_REPORT_FRAME_
25959  00  =3  {
25960  00  =3      BYTE      cmdClass;                     /* The command class */
25961  00  =3      BYTE      cmd;                          /* The command */
25962  00  =3      BYTE      supportedModeBitMask1;        /* MSB */
25963  00  =3      BYTE      supportedModeBitMask2;        /* LSB */
25964  00  =3  } ZW_SECURITY_PANEL_MODE_SUPPORTED_REPORT_FRAME;
25965  00  =3  
25966  00  =3  /************************************************************/
25967  00  =3  /* Security Panel Zone Sensor Installed Report command class structs */
25968  00  =3  /************************************************************/
25969  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT_FRAME_
25970  00  =3  {
25971  00  =3      BYTE      cmdClass;                     /* The command class */
25972  00  =3      BYTE      cmd;                          /* The command */
25973  00  =3      BYTE      zoneNumber;                   /**/
25974  00  =3      BYTE      numberOfSensors;              /**/
25975  00  =3  } ZW_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT_FRAME;
25976  00  =3  
25977  00  =3  /************************************************************/
25978  00  =3  /* Security Panel Zone Sensor Type Get command class structs */
25979  00  =3  /************************************************************/
25980  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_SENSOR_TYPE_GET_FRAME_
25981  00  =3  {
25982  00  =3      BYTE      cmdClass;                     /* The command class */
25983  00  =3      BYTE      cmd;                          /* The command */
25984  00  =3      BYTE      zoneNumber;                   /**/
25985  00  =3      BYTE      sensorNumber;                 /**/
25986  00  =3  } ZW_SECURITY_PANEL_ZONE_SENSOR_TYPE_GET_FRAME;
25987  00  =3  
25988  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 436 

25989  00  =3  /* Security Panel Zone Sensor Type Report command class structs */
25990  00  =3  /************************************************************/
25991  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT_FRAME_
25992  00  =3  {
25993  00  =3      BYTE      cmdClass;                     /* The command class */
25994  00  =3      BYTE      cmd;                          /* The command */
25995  00  =3      BYTE      zoneNumber;                   /**/
25996  00  =3      BYTE      sensorNumber;                 /**/
25997  00  =3      BYTE      zwaveAlarmType;               /**/
25998  00  =3  } ZW_SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT_FRAME;
25999  00  =3  
26000  00  =3  /************************************************************/
26001  00  =3  /* Security Panel Zone Sensor Installed Get command class structs */
26002  00  =3  /************************************************************/
26003  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET_FRAME_
26004  00  =3  {
26005  00  =3      BYTE      cmdClass;                     /* The command class */
26006  00  =3      BYTE      cmd;                          /* The command */
26007  00  =3      BYTE      zoneNumber;                   /**/
26008  00  =3  } ZW_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET_FRAME;
26009  00  =3  
26010  00  =3  /************************************************************/
26011  00  =3  /* Security Panel Zone Sensor State Get command class structs */
26012  00  =3  /************************************************************/
26013  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_SENSOR_STATE_GET_FRAME_
26014  00  =3  {
26015  00  =3      BYTE      cmdClass;                     /* The command class */
26016  00  =3      BYTE      cmd;                          /* The command */
26017  00  =3      BYTE      zoneNumber;                   /**/
26018  00  =3      BYTE      sensorNumber;                 /**/
26019  00  =3  } ZW_SECURITY_PANEL_ZONE_SENSOR_STATE_GET_FRAME;
26020  00  =3  
26021  00  =3  /************************************************************/
26022  00  =3  /* Security Panel Zone Sensor State Report command class structs */
26023  00  =3  /************************************************************/
26024  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT_FRAME_
26025  00  =3  {
26026  00  =3      BYTE      cmdClass;                     /* The command class */
26027  00  =3      BYTE      cmd;                          /* The command */
26028  00  =3      BYTE      zoneNumber;                   /**/
26029  00  =3      BYTE      sensorNumber;                 /**/
26030  00  =3      BYTE      zwaveAlarmType;               /**/
26031  00  =3      BYTE      zwaveAlarmEvent;              /**/
26032  00  =3      BYTE      eventParameters;              /**/
26033  00  =3  } ZW_SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT_FRAME;
26034  00  =3  
26035  00  =3  /************************************************************/
26036  00  =3  /* Security Panel Zone Number Supported Get command class structs */
26037  00  =3  /************************************************************/
26038  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET_FRAME_
26039  00  =3  {
26040  00  =3      BYTE      cmdClass;                     /* The command class */
26041  00  =3      BYTE      cmd;                          /* The command */
26042  00  =3  } ZW_SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET_FRAME;
26043  00  =3  
26044  00  =3  /************************************************************/
26045  00  =3  /* Security Panel Zone State Get command class structs */   
26046  00  =3  /************************************************************/
26047  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_STATE_GET_FRAME_
26048  00  =3  {
26049  00  =3      BYTE      cmdClass;                     /* The command class */
26050  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 437 

26051  00  =3      BYTE      zoneNumber;                   /**/
26052  00  =3  } ZW_SECURITY_PANEL_ZONE_STATE_GET_FRAME;
26053  00  =3  
26054  00  =3  /************************************************************/
26055  00  =3  /* Security Panel Zone State Report command class structs */
26056  00  =3  /************************************************************/
26057  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_STATE_REPORT_FRAME_
26058  00  =3  {
26059  00  =3      BYTE      cmdClass;                     /* The command class */
26060  00  =3      BYTE      cmd;                          /* The command */
26061  00  =3      BYTE      zoneNumber;                   /**/
26062  00  =3      BYTE      zoneState;                    /**/
26063  00  =3  } ZW_SECURITY_PANEL_ZONE_STATE_REPORT_FRAME;
26064  00  =3  
26065  00  =3  /************************************************************/
26066  00  =3  /* Security Panel Zone Supported Report command class structs */
26067  00  =3  /************************************************************/
26068  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_SUPPORTED_REPORT_FRAME_
26069  00  =3  {
26070  00  =3      BYTE      cmdClass;                     /* The command class */
26071  00  =3      BYTE      cmd;                          /* The command */
26072  00  =3      BYTE      parameters1;                  /* masked byte */
26073  00  =3  } ZW_SECURITY_PANEL_ZONE_SUPPORTED_REPORT_FRAME;
26074  00  =3  
26075  00  =3  /************************************************************/
26076  00  =3  /* Security Panel Zone Type Get command class structs */    
26077  00  =3  /************************************************************/
26078  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_TYPE_GET_FRAME_
26079  00  =3  {
26080  00  =3      BYTE      cmdClass;                     /* The command class */
26081  00  =3      BYTE      cmd;                          /* The command */
26082  00  =3      BYTE      zoneNumber;                   /**/
26083  00  =3  } ZW_SECURITY_PANEL_ZONE_TYPE_GET_FRAME;
26084  00  =3  
26085  00  =3  /************************************************************/
26086  00  =3  /* Security Panel Zone Type Report command class structs */ 
26087  00  =3  /************************************************************/
26088  00  =3  typedef struct _ZW_SECURITY_PANEL_ZONE_TYPE_REPORT_FRAME_
26089  00  =3  {
26090  00  =3      BYTE      cmdClass;                     /* The command class */
26091  00  =3      BYTE      cmd;                          /* The command */
26092  00  =3      BYTE      zoneNumber;                   /**/
26093  00  =3      BYTE      zoneType;                     /**/
26094  00  =3  } ZW_SECURITY_PANEL_ZONE_TYPE_REPORT_FRAME;
26095  00  =3  
26096  00  =3  /************************************************************/
26097  00  =3  /* Network Key Set 1byte command class structs */           
26098  00  =3  /************************************************************/
26099  00  =3  typedef struct _ZW_NETWORK_KEY_SET_1BYTE_FRAME_
26100  00  =3  {
26101  00  =3      BYTE      cmdClass;                     /* The command class */
26102  00  =3      BYTE      cmd;                          /* The command */
26103  00  =3      BYTE      networkKeyByte1;              
26104  00  =3  } ZW_NETWORK_KEY_SET_1BYTE_FRAME;
26105  00  =3  
26106  00  =3  /************************************************************/
26107  00  =3  /* Network Key Set 2byte command class structs */           
26108  00  =3  /************************************************************/
26109  00  =3  typedef struct _ZW_NETWORK_KEY_SET_2BYTE_FRAME_
26110  00  =3  {
26111  00  =3      BYTE      cmdClass;                     /* The command class */
26112  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 438 

26113  00  =3      BYTE      networkKeyByte1;              /* MSB */
26114  00  =3      BYTE      networkKeyByte2;              /* LSB */
26115  00  =3  } ZW_NETWORK_KEY_SET_2BYTE_FRAME;
26116  00  =3  
26117  00  =3  /************************************************************/
26118  00  =3  /* Network Key Set 3byte command class structs */           
26119  00  =3  /************************************************************/
26120  00  =3  typedef struct _ZW_NETWORK_KEY_SET_3BYTE_FRAME_
26121  00  =3  {
26122  00  =3      BYTE      cmdClass;                     /* The command class */
26123  00  =3      BYTE      cmd;                          /* The command */
26124  00  =3      BYTE      networkKeyByte1;              /* MSB */
26125  00  =3      BYTE      networkKeyByte2;              
26126  00  =3      BYTE      networkKeyByte3;              /* LSB */
26127  00  =3  } ZW_NETWORK_KEY_SET_3BYTE_FRAME;
26128  00  =3  
26129  00  =3  /************************************************************/
26130  00  =3  /* Network Key Set 4byte command class structs */           
26131  00  =3  /************************************************************/
26132  00  =3  typedef struct _ZW_NETWORK_KEY_SET_4BYTE_FRAME_
26133  00  =3  {
26134  00  =3      BYTE      cmdClass;                     /* The command class */
26135  00  =3      BYTE      cmd;                          /* The command */
26136  00  =3      BYTE      networkKeyByte1;              /* MSB */
26137  00  =3      BYTE      networkKeyByte2;              
26138  00  =3      BYTE      networkKeyByte3;              
26139  00  =3      BYTE      networkKeyByte4;              /* LSB */
26140  00  =3  } ZW_NETWORK_KEY_SET_4BYTE_FRAME;
26141  00  =3  
26142  00  =3  /************************************************************/
26143  00  =3  /* Network Key Verify command class structs */              
26144  00  =3  /************************************************************/
26145  00  =3  typedef struct _ZW_NETWORK_KEY_VERIFY_FRAME_
26146  00  =3  {
26147  00  =3      BYTE      cmdClass;                     /* The command class */
26148  00  =3      BYTE      cmd;                          /* The command */
26149  00  =3  } ZW_NETWORK_KEY_VERIFY_FRAME;
26150  00  =3  
26151  00  =3  /************************************************************/
26152  00  =3  /* Security Commands Supported Get command class structs */ 
26153  00  =3  /************************************************************/
26154  00  =3  typedef struct _ZW_SECURITY_COMMANDS_SUPPORTED_GET_FRAME_
26155  00  =3  {
26156  00  =3      BYTE      cmdClass;                     /* The command class */
26157  00  =3      BYTE      cmd;                          /* The command */
26158  00  =3  } ZW_SECURITY_COMMANDS_SUPPORTED_GET_FRAME;
26159  00  =3  
26160  00  =3  /************************************************************/
26161  00  =3  /* Security Commands Supported Report 1byte command class structs */
26162  00  =3  /************************************************************/
26163  00  =3  typedef struct _ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_1BYTE_FRAME_
26164  00  =3  {
26165  00  =3      BYTE      cmdClass;                     /* The command class */
26166  00  =3      BYTE      cmd;                          /* The command */
26167  00  =3      BYTE      reportsToFollow;              /**/
26168  00  =3      BYTE      commandClassSupport1;         
26169  00  =3      BYTE      commandClassMark;             /*The COMMAND_CLASS_MARK is used to indicate that all precedi
             -ng command classes are supported and all following command classes are controlled.*/
26170  00  =3      BYTE      commandClassControl1;         
26171  00  =3  } ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_1BYTE_FRAME;
26172  00  =3  
26173  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 439 

26174  00  =3  /* Security Commands Supported Report 2byte command class structs */
26175  00  =3  /************************************************************/
26176  00  =3  typedef struct _ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_2BYTE_FRAME_
26177  00  =3  {
26178  00  =3      BYTE      cmdClass;                     /* The command class */
26179  00  =3      BYTE      cmd;                          /* The command */
26180  00  =3      BYTE      reportsToFollow;              /**/
26181  00  =3      BYTE      commandClassSupport1;         /* MSB */
26182  00  =3      BYTE      commandClassSupport2;         /* LSB */
26183  00  =3      BYTE      commandClassMark;             /*The COMMAND_CLASS_MARK is used to indicate that all precedi
             -ng command classes are supported and all following command classes are controlled.*/
26184  00  =3      BYTE      commandClassControl1;         /* MSB */
26185  00  =3      BYTE      commandClassControl2;         /* LSB */
26186  00  =3  } ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_2BYTE_FRAME;
26187  00  =3  
26188  00  =3  /************************************************************/
26189  00  =3  /* Security Commands Supported Report 3byte command class structs */
26190  00  =3  /************************************************************/
26191  00  =3  typedef struct _ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_3BYTE_FRAME_
26192  00  =3  {
26193  00  =3      BYTE      cmdClass;                     /* The command class */
26194  00  =3      BYTE      cmd;                          /* The command */
26195  00  =3      BYTE      reportsToFollow;              /**/
26196  00  =3      BYTE      commandClassSupport1;         /* MSB */
26197  00  =3      BYTE      commandClassSupport2;         
26198  00  =3      BYTE      commandClassSupport3;         /* LSB */
26199  00  =3      BYTE      commandClassMark;             /*The COMMAND_CLASS_MARK is used to indicate that all precedi
             -ng command classes are supported and all following command classes are controlled.*/
26200  00  =3      BYTE      commandClassControl1;         /* MSB */
26201  00  =3      BYTE      commandClassControl2;         
26202  00  =3      BYTE      commandClassControl3;         /* LSB */
26203  00  =3  } ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_3BYTE_FRAME;
26204  00  =3  
26205  00  =3  /************************************************************/
26206  00  =3  /* Security Commands Supported Report 4byte command class structs */
26207  00  =3  /************************************************************/
26208  00  =3  typedef struct _ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_4BYTE_FRAME_
26209  00  =3  {
26210  00  =3      BYTE      cmdClass;                     /* The command class */
26211  00  =3      BYTE      cmd;                          /* The command */
26212  00  =3      BYTE      reportsToFollow;              /**/
26213  00  =3      BYTE      commandClassSupport1;         /* MSB */
26214  00  =3      BYTE      commandClassSupport2;         
26215  00  =3      BYTE      commandClassSupport3;         
26216  00  =3      BYTE      commandClassSupport4;         /* LSB */
26217  00  =3      BYTE      commandClassMark;             /*The COMMAND_CLASS_MARK is used to indicate that all precedi
             -ng command classes are supported and all following command classes are controlled.*/
26218  00  =3      BYTE      commandClassControl1;         /* MSB */
26219  00  =3      BYTE      commandClassControl2;         
26220  00  =3      BYTE      commandClassControl3;         
26221  00  =3      BYTE      commandClassControl4;         /* LSB */
26222  00  =3  } ZW_SECURITY_COMMANDS_SUPPORTED_REPORT_4BYTE_FRAME;
26223  00  =3  
26224  00  =3  /************************************************************/
26225  00  =3  /* Security Message Encapsulation 1byte command class structs */
26226  00  =3  /************************************************************/
26227  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_1BYTE_FRAME_
26228  00  =3  {
26229  00  =3      BYTE      cmdClass;                     /* The command class */
26230  00  =3      BYTE      cmd;                          /* The command */
26231  00  =3      BYTE      initializationVectorByte1;    /* MSB */
26232  00  =3      BYTE      initializationVectorByte2;    
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 440 

26233  00  =3      BYTE      initializationVectorByte3;    
26234  00  =3      BYTE      initializationVectorByte4;    
26235  00  =3      BYTE      initializationVectorByte5;    
26236  00  =3      BYTE      initializationVectorByte6;    
26237  00  =3      BYTE      initializationVectorByte7;    
26238  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26239  00  =3      BYTE      properties1;                  /* masked byte */
26240  00  =3      BYTE      commandClassIdentifier;       /**/
26241  00  =3      BYTE      commandIdentifier;            /**/
26242  00  =3      BYTE      commandByte1;                 
26243  00  =3      BYTE      receiversNonceIdentifier;     /**/
26244  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26245  00  =3      BYTE      messageAuthenticationCodeByte2;
26246  00  =3      BYTE      messageAuthenticationCodeByte3;
26247  00  =3      BYTE      messageAuthenticationCodeByte4;
26248  00  =3      BYTE      messageAuthenticationCodeByte5;
26249  00  =3      BYTE      messageAuthenticationCodeByte6;
26250  00  =3      BYTE      messageAuthenticationCodeByte7;
26251  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26252  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_1BYTE_FRAME;
26253  00  =3  
26254  00  =3  /************************************************************/
26255  00  =3  /* Security Message Encapsulation 2byte command class structs */
26256  00  =3  /************************************************************/
26257  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_2BYTE_FRAME_
26258  00  =3  {
26259  00  =3      BYTE      cmdClass;                     /* The command class */
26260  00  =3      BYTE      cmd;                          /* The command */
26261  00  =3      BYTE      initializationVectorByte1;    /* MSB */
26262  00  =3      BYTE      initializationVectorByte2;    
26263  00  =3      BYTE      initializationVectorByte3;    
26264  00  =3      BYTE      initializationVectorByte4;    
26265  00  =3      BYTE      initializationVectorByte5;    
26266  00  =3      BYTE      initializationVectorByte6;    
26267  00  =3      BYTE      initializationVectorByte7;    
26268  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26269  00  =3      BYTE      properties1;                  /* masked byte */
26270  00  =3      BYTE      commandClassIdentifier;       /**/
26271  00  =3      BYTE      commandIdentifier;            /**/
26272  00  =3      BYTE      commandByte1;                 /* MSB */
26273  00  =3      BYTE      commandByte2;                 /* LSB */
26274  00  =3      BYTE      receiversNonceIdentifier;     /**/
26275  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26276  00  =3      BYTE      messageAuthenticationCodeByte2;
26277  00  =3      BYTE      messageAuthenticationCodeByte3;
26278  00  =3      BYTE      messageAuthenticationCodeByte4;
26279  00  =3      BYTE      messageAuthenticationCodeByte5;
26280  00  =3      BYTE      messageAuthenticationCodeByte6;
26281  00  =3      BYTE      messageAuthenticationCodeByte7;
26282  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26283  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_2BYTE_FRAME;
26284  00  =3  
26285  00  =3  /************************************************************/
26286  00  =3  /* Security Message Encapsulation 3byte command class structs */
26287  00  =3  /************************************************************/
26288  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_3BYTE_FRAME_
26289  00  =3  {
26290  00  =3      BYTE      cmdClass;                     /* The command class */
26291  00  =3      BYTE      cmd;                          /* The command */
26292  00  =3      BYTE      initializationVectorByte1;    /* MSB */
26293  00  =3      BYTE      initializationVectorByte2;    
26294  00  =3      BYTE      initializationVectorByte3;    
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 441 

26295  00  =3      BYTE      initializationVectorByte4;    
26296  00  =3      BYTE      initializationVectorByte5;    
26297  00  =3      BYTE      initializationVectorByte6;    
26298  00  =3      BYTE      initializationVectorByte7;    
26299  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26300  00  =3      BYTE      properties1;                  /* masked byte */
26301  00  =3      BYTE      commandClassIdentifier;       /**/
26302  00  =3      BYTE      commandIdentifier;            /**/
26303  00  =3      BYTE      commandByte1;                 /* MSB */
26304  00  =3      BYTE      commandByte2;                 
26305  00  =3      BYTE      commandByte3;                 /* LSB */
26306  00  =3      BYTE      receiversNonceIdentifier;     /**/
26307  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26308  00  =3      BYTE      messageAuthenticationCodeByte2;
26309  00  =3      BYTE      messageAuthenticationCodeByte3;
26310  00  =3      BYTE      messageAuthenticationCodeByte4;
26311  00  =3      BYTE      messageAuthenticationCodeByte5;
26312  00  =3      BYTE      messageAuthenticationCodeByte6;
26313  00  =3      BYTE      messageAuthenticationCodeByte7;
26314  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26315  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_3BYTE_FRAME;
26316  00  =3  
26317  00  =3  /************************************************************/
26318  00  =3  /* Security Message Encapsulation 4byte command class structs */
26319  00  =3  /************************************************************/
26320  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_4BYTE_FRAME_
26321  00  =3  {
26322  00  =3      BYTE      cmdClass;                     /* The command class */
26323  00  =3      BYTE      cmd;                          /* The command */
26324  00  =3      BYTE      initializationVectorByte1;    /* MSB */
26325  00  =3      BYTE      initializationVectorByte2;    
26326  00  =3      BYTE      initializationVectorByte3;    
26327  00  =3      BYTE      initializationVectorByte4;    
26328  00  =3      BYTE      initializationVectorByte5;    
26329  00  =3      BYTE      initializationVectorByte6;    
26330  00  =3      BYTE      initializationVectorByte7;    
26331  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26332  00  =3      BYTE      properties1;                  /* masked byte */
26333  00  =3      BYTE      commandClassIdentifier;       /**/
26334  00  =3      BYTE      commandIdentifier;            /**/
26335  00  =3      BYTE      commandByte1;                 /* MSB */
26336  00  =3      BYTE      commandByte2;                 
26337  00  =3      BYTE      commandByte3;                 
26338  00  =3      BYTE      commandByte4;                 /* LSB */
26339  00  =3      BYTE      receiversNonceIdentifier;     /**/
26340  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26341  00  =3      BYTE      messageAuthenticationCodeByte2;
26342  00  =3      BYTE      messageAuthenticationCodeByte3;
26343  00  =3      BYTE      messageAuthenticationCodeByte4;
26344  00  =3      BYTE      messageAuthenticationCodeByte5;
26345  00  =3      BYTE      messageAuthenticationCodeByte6;
26346  00  =3      BYTE      messageAuthenticationCodeByte7;
26347  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26348  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_4BYTE_FRAME;
26349  00  =3  
26350  00  =3  /************************************************************/
26351  00  =3  /* Security Message Encapsulation Nonce Get 1byte command class structs */
26352  00  =3  /************************************************************/
26353  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_1BYTE_FRAME_
26354  00  =3  {
26355  00  =3      BYTE      cmdClass;                     /* The command class */
26356  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 442 

26357  00  =3      BYTE      initializationVectorByte1;    /* MSB */
26358  00  =3      BYTE      initializationVectorByte2;    
26359  00  =3      BYTE      initializationVectorByte3;    
26360  00  =3      BYTE      initializationVectorByte4;    
26361  00  =3      BYTE      initializationVectorByte5;    
26362  00  =3      BYTE      initializationVectorByte6;    
26363  00  =3      BYTE      initializationVectorByte7;    
26364  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26365  00  =3      BYTE      properties1;                  /* masked byte */
26366  00  =3      BYTE      commandClassIdentifier;       /**/
26367  00  =3      BYTE      commandIdentifier;            /**/
26368  00  =3      BYTE      commandByte1;                 
26369  00  =3      BYTE      receiversNonceIdentifier;     /**/
26370  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26371  00  =3      BYTE      messageAuthenticationCodeByte2;
26372  00  =3      BYTE      messageAuthenticationCodeByte3;
26373  00  =3      BYTE      messageAuthenticationCodeByte4;
26374  00  =3      BYTE      messageAuthenticationCodeByte5;
26375  00  =3      BYTE      messageAuthenticationCodeByte6;
26376  00  =3      BYTE      messageAuthenticationCodeByte7;
26377  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26378  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_1BYTE_FRAME;
26379  00  =3  
26380  00  =3  /************************************************************/
26381  00  =3  /* Security Message Encapsulation Nonce Get 2byte command class structs */
26382  00  =3  /************************************************************/
26383  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_2BYTE_FRAME_
26384  00  =3  {
26385  00  =3      BYTE      cmdClass;                     /* The command class */
26386  00  =3      BYTE      cmd;                          /* The command */
26387  00  =3      BYTE      initializationVectorByte1;    /* MSB */
26388  00  =3      BYTE      initializationVectorByte2;    
26389  00  =3      BYTE      initializationVectorByte3;    
26390  00  =3      BYTE      initializationVectorByte4;    
26391  00  =3      BYTE      initializationVectorByte5;    
26392  00  =3      BYTE      initializationVectorByte6;    
26393  00  =3      BYTE      initializationVectorByte7;    
26394  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26395  00  =3      BYTE      properties1;                  /* masked byte */
26396  00  =3      BYTE      commandClassIdentifier;       /**/
26397  00  =3      BYTE      commandIdentifier;            /**/
26398  00  =3      BYTE      commandByte1;                 /* MSB */
26399  00  =3      BYTE      commandByte2;                 /* LSB */
26400  00  =3      BYTE      receiversNonceIdentifier;     /**/
26401  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26402  00  =3      BYTE      messageAuthenticationCodeByte2;
26403  00  =3      BYTE      messageAuthenticationCodeByte3;
26404  00  =3      BYTE      messageAuthenticationCodeByte4;
26405  00  =3      BYTE      messageAuthenticationCodeByte5;
26406  00  =3      BYTE      messageAuthenticationCodeByte6;
26407  00  =3      BYTE      messageAuthenticationCodeByte7;
26408  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26409  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_2BYTE_FRAME;
26410  00  =3  
26411  00  =3  /************************************************************/
26412  00  =3  /* Security Message Encapsulation Nonce Get 3byte command class structs */
26413  00  =3  /************************************************************/
26414  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_3BYTE_FRAME_
26415  00  =3  {
26416  00  =3      BYTE      cmdClass;                     /* The command class */
26417  00  =3      BYTE      cmd;                          /* The command */
26418  00  =3      BYTE      initializationVectorByte1;    /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 443 

26419  00  =3      BYTE      initializationVectorByte2;    
26420  00  =3      BYTE      initializationVectorByte3;    
26421  00  =3      BYTE      initializationVectorByte4;    
26422  00  =3      BYTE      initializationVectorByte5;    
26423  00  =3      BYTE      initializationVectorByte6;    
26424  00  =3      BYTE      initializationVectorByte7;    
26425  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26426  00  =3      BYTE      properties1;                  /* masked byte */
26427  00  =3      BYTE      commandClassIdentifier;       /**/
26428  00  =3      BYTE      commandIdentifier;            /**/
26429  00  =3      BYTE      commandByte1;                 /* MSB */
26430  00  =3      BYTE      commandByte2;                 
26431  00  =3      BYTE      commandByte3;                 /* LSB */
26432  00  =3      BYTE      receiversNonceIdentifier;     /**/
26433  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26434  00  =3      BYTE      messageAuthenticationCodeByte2;
26435  00  =3      BYTE      messageAuthenticationCodeByte3;
26436  00  =3      BYTE      messageAuthenticationCodeByte4;
26437  00  =3      BYTE      messageAuthenticationCodeByte5;
26438  00  =3      BYTE      messageAuthenticationCodeByte6;
26439  00  =3      BYTE      messageAuthenticationCodeByte7;
26440  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26441  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_3BYTE_FRAME;
26442  00  =3  
26443  00  =3  /************************************************************/
26444  00  =3  /* Security Message Encapsulation Nonce Get 4byte command class structs */
26445  00  =3  /************************************************************/
26446  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_4BYTE_FRAME_
26447  00  =3  {
26448  00  =3      BYTE      cmdClass;                     /* The command class */
26449  00  =3      BYTE      cmd;                          /* The command */
26450  00  =3      BYTE      initializationVectorByte1;    /* MSB */
26451  00  =3      BYTE      initializationVectorByte2;    
26452  00  =3      BYTE      initializationVectorByte3;    
26453  00  =3      BYTE      initializationVectorByte4;    
26454  00  =3      BYTE      initializationVectorByte5;    
26455  00  =3      BYTE      initializationVectorByte6;    
26456  00  =3      BYTE      initializationVectorByte7;    
26457  00  =3      BYTE      initializationVectorByte8;    /* LSB */
26458  00  =3      BYTE      properties1;                  /* masked byte */
26459  00  =3      BYTE      commandClassIdentifier;       /**/
26460  00  =3      BYTE      commandIdentifier;            /**/
26461  00  =3      BYTE      commandByte1;                 /* MSB */
26462  00  =3      BYTE      commandByte2;                 
26463  00  =3      BYTE      commandByte3;                 
26464  00  =3      BYTE      commandByte4;                 /* LSB */
26465  00  =3      BYTE      receiversNonceIdentifier;     /**/
26466  00  =3      BYTE      messageAuthenticationCodeByte1;/* MSB */
26467  00  =3      BYTE      messageAuthenticationCodeByte2;
26468  00  =3      BYTE      messageAuthenticationCodeByte3;
26469  00  =3      BYTE      messageAuthenticationCodeByte4;
26470  00  =3      BYTE      messageAuthenticationCodeByte5;
26471  00  =3      BYTE      messageAuthenticationCodeByte6;
26472  00  =3      BYTE      messageAuthenticationCodeByte7;
26473  00  =3      BYTE      messageAuthenticationCodeByte8;/* LSB */
26474  00  =3  } ZW_SECURITY_MESSAGE_ENCAPSULATION_NONCE_GET_4BYTE_FRAME;
26475  00  =3  
26476  00  =3  /************************************************************/
26477  00  =3  /* Security Nonce Get command class structs */              
26478  00  =3  /************************************************************/
26479  00  =3  typedef struct _ZW_SECURITY_NONCE_GET_FRAME_
26480  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 444 

26481  00  =3      BYTE      cmdClass;                     /* The command class */
26482  00  =3      BYTE      cmd;                          /* The command */
26483  00  =3  } ZW_SECURITY_NONCE_GET_FRAME;
26484  00  =3  
26485  00  =3  /************************************************************/
26486  00  =3  /* Security Nonce Report command class structs */           
26487  00  =3  /************************************************************/
26488  00  =3  typedef struct _ZW_SECURITY_NONCE_REPORT_FRAME_
26489  00  =3  {
26490  00  =3      BYTE      cmdClass;                     /* The command class */
26491  00  =3      BYTE      cmd;                          /* The command */
26492  00  =3      BYTE      nonceByte1;                   /* MSB */
26493  00  =3      BYTE      nonceByte2;                   
26494  00  =3      BYTE      nonceByte3;                   
26495  00  =3      BYTE      nonceByte4;                   
26496  00  =3      BYTE      nonceByte5;                   
26497  00  =3      BYTE      nonceByte6;                   
26498  00  =3      BYTE      nonceByte7;                   
26499  00  =3      BYTE      nonceByte8;                   /* LSB */
26500  00  =3  } ZW_SECURITY_NONCE_REPORT_FRAME;
26501  00  =3  
26502  00  =3  /************************************************************/
26503  00  =3  /* Security Scheme Get command class structs */             
26504  00  =3  /************************************************************/
26505  00  =3  typedef struct _ZW_SECURITY_SCHEME_GET_FRAME_
26506  00  =3  {
26507  00  =3      BYTE      cmdClass;                     /* The command class */
26508  00  =3      BYTE      cmd;                          /* The command */
26509  00  =3      BYTE      supportedSecuritySchemes;     /**/
26510  00  =3  } ZW_SECURITY_SCHEME_GET_FRAME;
26511  00  =3  
26512  00  =3  /************************************************************/
26513  00  =3  /* Security Scheme Inherit command class structs */         
26514  00  =3  /************************************************************/
26515  00  =3  typedef struct _ZW_SECURITY_SCHEME_INHERIT_FRAME_
26516  00  =3  {
26517  00  =3      BYTE      cmdClass;                     /* The command class */
26518  00  =3      BYTE      cmd;                          /* The command */
26519  00  =3      BYTE      supportedSecuritySchemes;     /**/
26520  00  =3  } ZW_SECURITY_SCHEME_INHERIT_FRAME;
26521  00  =3  
26522  00  =3  /************************************************************/
26523  00  =3  /* Security Scheme Report command class structs */          
26524  00  =3  /************************************************************/
26525  00  =3  typedef struct _ZW_SECURITY_SCHEME_REPORT_FRAME_
26526  00  =3  {
26527  00  =3      BYTE      cmdClass;                     /* The command class */
26528  00  =3      BYTE      cmd;                          /* The command */
26529  00  =3      BYTE      supportedSecuritySchemes;     /**/
26530  00  =3  } ZW_SECURITY_SCHEME_REPORT_FRAME;
26531  00  =3  
26532  00  =3  /************************************************************/
26533  00  =3  /* Sensor Alarm Get command class structs */                
26534  00  =3  /************************************************************/
26535  00  =3  typedef struct _ZW_SENSOR_ALARM_GET_FRAME_
26536  00  =3  {
26537  00  =3      BYTE      cmdClass;                     /* The command class */
26538  00  =3      BYTE      cmd;                          /* The command */
26539  00  =3      BYTE      sensorType;                   /**/
26540  00  =3  } ZW_SENSOR_ALARM_GET_FRAME;
26541  00  =3  
26542  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 445 

26543  00  =3  /* Sensor Alarm Report command class structs */             
26544  00  =3  /************************************************************/
26545  00  =3  typedef struct _ZW_SENSOR_ALARM_REPORT_FRAME_
26546  00  =3  {
26547  00  =3      BYTE      cmdClass;                     /* The command class */
26548  00  =3      BYTE      cmd;                          /* The command */
26549  00  =3      BYTE      sourceNodeId;                 /**/
26550  00  =3      BYTE      sensorType;                   /**/
26551  00  =3      BYTE      sensorState;                  /**/
26552  00  =3      BYTE      seconds1;                     /* MSB */
26553  00  =3      BYTE      seconds2;                     /* LSB */
26554  00  =3  } ZW_SENSOR_ALARM_REPORT_FRAME;
26555  00  =3  
26556  00  =3  /************************************************************/
26557  00  =3  /* Sensor Alarm Supported Get command class structs */      
26558  00  =3  /************************************************************/
26559  00  =3  typedef struct _ZW_SENSOR_ALARM_SUPPORTED_GET_FRAME_
26560  00  =3  {
26561  00  =3      BYTE      cmdClass;                     /* The command class */
26562  00  =3      BYTE      cmd;                          /* The command */
26563  00  =3  } ZW_SENSOR_ALARM_SUPPORTED_GET_FRAME;
26564  00  =3  
26565  00  =3  /************************************************************/
26566  00  =3  /* Sensor Alarm Supported Report 1byte command class structs */
26567  00  =3  /************************************************************/
26568  00  =3  typedef struct _ZW_SENSOR_ALARM_SUPPORTED_REPORT_1BYTE_FRAME_
26569  00  =3  {
26570  00  =3      BYTE      cmdClass;                     /* The command class */
26571  00  =3      BYTE      cmd;                          /* The command */
26572  00  =3      BYTE      numberOfBitMasks;             /**/
26573  00  =3      BYTE      bitMask1;                     
26574  00  =3  } ZW_SENSOR_ALARM_SUPPORTED_REPORT_1BYTE_FRAME;
26575  00  =3  
26576  00  =3  /************************************************************/
26577  00  =3  /* Sensor Alarm Supported Report 2byte command class structs */
26578  00  =3  /************************************************************/
26579  00  =3  typedef struct _ZW_SENSOR_ALARM_SUPPORTED_REPORT_2BYTE_FRAME_
26580  00  =3  {
26581  00  =3      BYTE      cmdClass;                     /* The command class */
26582  00  =3      BYTE      cmd;                          /* The command */
26583  00  =3      BYTE      numberOfBitMasks;             /**/
26584  00  =3      BYTE      bitMask1;                     /* MSB */
26585  00  =3      BYTE      bitMask2;                     /* LSB */
26586  00  =3  } ZW_SENSOR_ALARM_SUPPORTED_REPORT_2BYTE_FRAME;
26587  00  =3  
26588  00  =3  /************************************************************/
26589  00  =3  /* Sensor Alarm Supported Report 3byte command class structs */
26590  00  =3  /************************************************************/
26591  00  =3  typedef struct _ZW_SENSOR_ALARM_SUPPORTED_REPORT_3BYTE_FRAME_
26592  00  =3  {
26593  00  =3      BYTE      cmdClass;                     /* The command class */
26594  00  =3      BYTE      cmd;                          /* The command */
26595  00  =3      BYTE      numberOfBitMasks;             /**/
26596  00  =3      BYTE      bitMask1;                     /* MSB */
26597  00  =3      BYTE      bitMask2;                     
26598  00  =3      BYTE      bitMask3;                     /* LSB */
26599  00  =3  } ZW_SENSOR_ALARM_SUPPORTED_REPORT_3BYTE_FRAME;
26600  00  =3  
26601  00  =3  /************************************************************/
26602  00  =3  /* Sensor Alarm Supported Report 4byte command class structs */
26603  00  =3  /************************************************************/
26604  00  =3  typedef struct _ZW_SENSOR_ALARM_SUPPORTED_REPORT_4BYTE_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 446 

26605  00  =3  {
26606  00  =3      BYTE      cmdClass;                     /* The command class */
26607  00  =3      BYTE      cmd;                          /* The command */
26608  00  =3      BYTE      numberOfBitMasks;             /**/
26609  00  =3      BYTE      bitMask1;                     /* MSB */
26610  00  =3      BYTE      bitMask2;                     
26611  00  =3      BYTE      bitMask3;                     
26612  00  =3      BYTE      bitMask4;                     /* LSB */
26613  00  =3  } ZW_SENSOR_ALARM_SUPPORTED_REPORT_4BYTE_FRAME;
26614  00  =3  
26615  00  =3  /************************************************************/
26616  00  =3  /* Sensor Binary Get command class structs */               
26617  00  =3  /************************************************************/
26618  00  =3  typedef struct _ZW_SENSOR_BINARY_GET_FRAME_
26619  00  =3  {
26620  00  =3      BYTE      cmdClass;                     /* The command class */
26621  00  =3      BYTE      cmd;                          /* The command */
26622  00  =3  } ZW_SENSOR_BINARY_GET_FRAME;
26623  00  =3  
26624  00  =3  /************************************************************/
26625  00  =3  /* Sensor Binary Report command class structs */            
26626  00  =3  /************************************************************/
26627  00  =3  typedef struct _ZW_SENSOR_BINARY_REPORT_FRAME_
26628  00  =3  {
26629  00  =3      BYTE      cmdClass;                     /* The command class */
26630  00  =3      BYTE      cmd;                          /* The command */
26631  00  =3      BYTE      sensorValue;                  /**/
26632  00  =3  } ZW_SENSOR_BINARY_REPORT_FRAME;
26633  00  =3  
26634  00  =3  /************************************************************/
26635  00  =3  /* Sensor Binary Get V2 command class structs */            
26636  00  =3  /************************************************************/
26637  00  =3  typedef struct _ZW_SENSOR_BINARY_GET_V2_FRAME_
26638  00  =3  {
26639  00  =3      BYTE      cmdClass;                     /* The command class */
26640  00  =3      BYTE      cmd;                          /* The command */
26641  00  =3      BYTE      sensorType;                   /**/
26642  00  =3  } ZW_SENSOR_BINARY_GET_V2_FRAME;
26643  00  =3  
26644  00  =3  /************************************************************/
26645  00  =3  /* Sensor Binary Report V2 command class structs */         
26646  00  =3  /************************************************************/
26647  00  =3  typedef struct _ZW_SENSOR_BINARY_REPORT_V2_FRAME_
26648  00  =3  {
26649  00  =3      BYTE      cmdClass;                     /* The command class */
26650  00  =3      BYTE      cmd;                          /* The command */
26651  00  =3      BYTE      sensorValue;                  /**/
26652  00  =3      BYTE      sensorType;                   /**/
26653  00  =3  } ZW_SENSOR_BINARY_REPORT_V2_FRAME;
26654  00  =3  
26655  00  =3  /************************************************************/
26656  00  =3  /* Sensor Binary Supported Get Sensor V2 command class structs */
26657  00  =3  /************************************************************/
26658  00  =3  typedef struct _ZW_SENSOR_BINARY_SUPPORTED_GET_SENSOR_V2_FRAME_
26659  00  =3  {
26660  00  =3      BYTE      cmdClass;                     /* The command class */
26661  00  =3      BYTE      cmd;                          /* The command */
26662  00  =3  } ZW_SENSOR_BINARY_SUPPORTED_GET_SENSOR_V2_FRAME;
26663  00  =3  
26664  00  =3  /************************************************************/
26665  00  =3  /* Sensor Binary Supported Sensor Report 1byte V2 command class structs */
26666  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 447 

26667  00  =3  typedef struct _ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_1BYTE_V2_FRAME_
26668  00  =3  {
26669  00  =3      BYTE      cmdClass;                     /* The command class */
26670  00  =3      BYTE      cmd;                          /* The command */
26671  00  =3      BYTE      bitMask1;                     
26672  00  =3  } ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_1BYTE_V2_FRAME;
26673  00  =3  
26674  00  =3  /************************************************************/
26675  00  =3  /* Sensor Binary Supported Sensor Report 2byte V2 command class structs */
26676  00  =3  /************************************************************/
26677  00  =3  typedef struct _ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_2BYTE_V2_FRAME_
26678  00  =3  {
26679  00  =3      BYTE      cmdClass;                     /* The command class */
26680  00  =3      BYTE      cmd;                          /* The command */
26681  00  =3      BYTE      bitMask1;                     /* MSB */
26682  00  =3      BYTE      bitMask2;                     /* LSB */
26683  00  =3  } ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_2BYTE_V2_FRAME;
26684  00  =3  
26685  00  =3  /************************************************************/
26686  00  =3  /* Sensor Binary Supported Sensor Report 3byte V2 command class structs */
26687  00  =3  /************************************************************/
26688  00  =3  typedef struct _ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_3BYTE_V2_FRAME_
26689  00  =3  {
26690  00  =3      BYTE      cmdClass;                     /* The command class */
26691  00  =3      BYTE      cmd;                          /* The command */
26692  00  =3      BYTE      bitMask1;                     /* MSB */
26693  00  =3      BYTE      bitMask2;                     
26694  00  =3      BYTE      bitMask3;                     /* LSB */
26695  00  =3  } ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_3BYTE_V2_FRAME;
26696  00  =3  
26697  00  =3  /************************************************************/
26698  00  =3  /* Sensor Binary Supported Sensor Report 4byte V2 command class structs */
26699  00  =3  /************************************************************/
26700  00  =3  typedef struct _ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_4BYTE_V2_FRAME_
26701  00  =3  {
26702  00  =3      BYTE      cmdClass;                     /* The command class */
26703  00  =3      BYTE      cmd;                          /* The command */
26704  00  =3      BYTE      bitMask1;                     /* MSB */
26705  00  =3      BYTE      bitMask2;                     
26706  00  =3      BYTE      bitMask3;                     
26707  00  =3      BYTE      bitMask4;                     /* LSB */
26708  00  =3  } ZW_SENSOR_BINARY_SUPPORTED_SENSOR_REPORT_4BYTE_V2_FRAME;
26709  00  =3  
26710  00  =3  /************************************************************/
26711  00  =3  /* Sensor Trigger Level Get command class structs */        
26712  00  =3  /************************************************************/
26713  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_GET_FRAME_
26714  00  =3  {
26715  00  =3      BYTE      cmdClass;                     /* The command class */
26716  00  =3      BYTE      cmd;                          /* The command */
26717  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_GET_FRAME;
26718  00  =3  
26719  00  =3  /************************************************************/
26720  00  =3  /* Sensor Trigger Level Report 1byte command class structs */
26721  00  =3  /************************************************************/
26722  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_REPORT_1BYTE_FRAME_
26723  00  =3  {
26724  00  =3      BYTE      cmdClass;                     /* The command class */
26725  00  =3      BYTE      cmd;                          /* The command */
26726  00  =3      BYTE      sensorType;                   /**/
26727  00  =3      BYTE      properties1;                  /* masked byte */
26728  00  =3      BYTE      triggerValue1;                
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 448 

26729  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_REPORT_1BYTE_FRAME;
26730  00  =3  
26731  00  =3  /************************************************************/
26732  00  =3  /* Sensor Trigger Level Report 2byte command class structs */
26733  00  =3  /************************************************************/
26734  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_REPORT_2BYTE_FRAME_
26735  00  =3  {
26736  00  =3      BYTE      cmdClass;                     /* The command class */
26737  00  =3      BYTE      cmd;                          /* The command */
26738  00  =3      BYTE      sensorType;                   /**/
26739  00  =3      BYTE      properties1;                  /* masked byte */
26740  00  =3      BYTE      triggerValue1;                /* MSB */
26741  00  =3      BYTE      triggerValue2;                /* LSB */
26742  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_REPORT_2BYTE_FRAME;
26743  00  =3  
26744  00  =3  /************************************************************/
26745  00  =3  /* Sensor Trigger Level Report 3byte command class structs */
26746  00  =3  /************************************************************/
26747  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_REPORT_3BYTE_FRAME_
26748  00  =3  {
26749  00  =3      BYTE      cmdClass;                     /* The command class */
26750  00  =3      BYTE      cmd;                          /* The command */
26751  00  =3      BYTE      sensorType;                   /**/
26752  00  =3      BYTE      properties1;                  /* masked byte */
26753  00  =3      BYTE      triggerValue1;                /* MSB */
26754  00  =3      BYTE      triggerValue2;                
26755  00  =3      BYTE      triggerValue3;                /* LSB */
26756  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_REPORT_3BYTE_FRAME;
26757  00  =3  
26758  00  =3  /************************************************************/
26759  00  =3  /* Sensor Trigger Level Report 4byte command class structs */
26760  00  =3  /************************************************************/
26761  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_REPORT_4BYTE_FRAME_
26762  00  =3  {
26763  00  =3      BYTE      cmdClass;                     /* The command class */
26764  00  =3      BYTE      cmd;                          /* The command */
26765  00  =3      BYTE      sensorType;                   /**/
26766  00  =3      BYTE      properties1;                  /* masked byte */
26767  00  =3      BYTE      triggerValue1;                /* MSB */
26768  00  =3      BYTE      triggerValue2;                
26769  00  =3      BYTE      triggerValue3;                
26770  00  =3      BYTE      triggerValue4;                /* LSB */
26771  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_REPORT_4BYTE_FRAME;
26772  00  =3  
26773  00  =3  /************************************************************/
26774  00  =3  /* Sensor Trigger Level Set 1byte command class structs */  
26775  00  =3  /************************************************************/
26776  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_SET_1BYTE_FRAME_
26777  00  =3  {
26778  00  =3      BYTE      cmdClass;                     /* The command class */
26779  00  =3      BYTE      cmd;                          /* The command */
26780  00  =3      BYTE      properties1;                  /* masked byte */
26781  00  =3      BYTE      sensorType;                   /**/
26782  00  =3      BYTE      properties2;                  /* masked byte */
26783  00  =3      BYTE      triggerValue1;                
26784  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_SET_1BYTE_FRAME;
26785  00  =3  
26786  00  =3  /************************************************************/
26787  00  =3  /* Sensor Trigger Level Set 2byte command class structs */  
26788  00  =3  /************************************************************/
26789  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_SET_2BYTE_FRAME_
26790  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 449 

26791  00  =3      BYTE      cmdClass;                     /* The command class */
26792  00  =3      BYTE      cmd;                          /* The command */
26793  00  =3      BYTE      properties1;                  /* masked byte */
26794  00  =3      BYTE      sensorType;                   /**/
26795  00  =3      BYTE      properties2;                  /* masked byte */
26796  00  =3      BYTE      triggerValue1;                /* MSB */
26797  00  =3      BYTE      triggerValue2;                /* LSB */
26798  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_SET_2BYTE_FRAME;
26799  00  =3  
26800  00  =3  /************************************************************/
26801  00  =3  /* Sensor Trigger Level Set 3byte command class structs */  
26802  00  =3  /************************************************************/
26803  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_SET_3BYTE_FRAME_
26804  00  =3  {
26805  00  =3      BYTE      cmdClass;                     /* The command class */
26806  00  =3      BYTE      cmd;                          /* The command */
26807  00  =3      BYTE      properties1;                  /* masked byte */
26808  00  =3      BYTE      sensorType;                   /**/
26809  00  =3      BYTE      properties2;                  /* masked byte */
26810  00  =3      BYTE      triggerValue1;                /* MSB */
26811  00  =3      BYTE      triggerValue2;                
26812  00  =3      BYTE      triggerValue3;                /* LSB */
26813  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_SET_3BYTE_FRAME;
26814  00  =3  
26815  00  =3  /************************************************************/
26816  00  =3  /* Sensor Trigger Level Set 4byte command class structs */  
26817  00  =3  /************************************************************/
26818  00  =3  typedef struct _ZW_SENSOR_TRIGGER_LEVEL_SET_4BYTE_FRAME_
26819  00  =3  {
26820  00  =3      BYTE      cmdClass;                     /* The command class */
26821  00  =3      BYTE      cmd;                          /* The command */
26822  00  =3      BYTE      properties1;                  /* masked byte */
26823  00  =3      BYTE      sensorType;                   /**/
26824  00  =3      BYTE      properties2;                  /* masked byte */
26825  00  =3      BYTE      triggerValue1;                /* MSB */
26826  00  =3      BYTE      triggerValue2;                
26827  00  =3      BYTE      triggerValue3;                
26828  00  =3      BYTE      triggerValue4;                /* LSB */
26829  00  =3  } ZW_SENSOR_TRIGGER_LEVEL_SET_4BYTE_FRAME;
26830  00  =3  
26831  00  =3  /************************************************************/
26832  00  =3  /* Sensor Multilevel Get command class structs */           
26833  00  =3  /************************************************************/
26834  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_FRAME_
26835  00  =3  {
26836  00  =3      BYTE      cmdClass;                     /* The command class */
26837  00  =3      BYTE      cmd;                          /* The command */
26838  00  =3  } ZW_SENSOR_MULTILEVEL_GET_FRAME;
26839  00  =3  
26840  00  =3  /************************************************************/
26841  00  =3  /* Sensor Multilevel Report 1byte command class structs */  
26842  00  =3  /************************************************************/
26843  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_FRAME_
26844  00  =3  {
26845  00  =3      BYTE      cmdClass;                     /* The command class */
26846  00  =3      BYTE      cmd;                          /* The command */
26847  00  =3      BYTE      sensorType;                   /**/
26848  00  =3      BYTE      level;                        /* masked byte */
26849  00  =3      BYTE      sensorValue1;                 
26850  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_FRAME;
26851  00  =3  
26852  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 450 

26853  00  =3  /* Sensor Multilevel Report 2byte command class structs */  
26854  00  =3  /************************************************************/
26855  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_FRAME_
26856  00  =3  {
26857  00  =3      BYTE      cmdClass;                     /* The command class */
26858  00  =3      BYTE      cmd;                          /* The command */
26859  00  =3      BYTE      sensorType;                   /**/
26860  00  =3      BYTE      level;                        /* masked byte */
26861  00  =3      BYTE      sensorValue1;                 /* MSB */
26862  00  =3      BYTE      sensorValue2;                 /* LSB */
26863  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_FRAME;
26864  00  =3  
26865  00  =3  /************************************************************/
26866  00  =3  /* Sensor Multilevel Report 3byte command class structs */  
26867  00  =3  /************************************************************/
26868  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_FRAME_
26869  00  =3  {
26870  00  =3      BYTE      cmdClass;                     /* The command class */
26871  00  =3      BYTE      cmd;                          /* The command */
26872  00  =3      BYTE      sensorType;                   /**/
26873  00  =3      BYTE      level;                        /* masked byte */
26874  00  =3      BYTE      sensorValue1;                 /* MSB */
26875  00  =3      BYTE      sensorValue2;                 
26876  00  =3      BYTE      sensorValue3;                 /* LSB */
26877  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_FRAME;
26878  00  =3  
26879  00  =3  /************************************************************/
26880  00  =3  /* Sensor Multilevel Report 4byte command class structs */  
26881  00  =3  /************************************************************/
26882  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_FRAME_
26883  00  =3  {
26884  00  =3      BYTE      cmdClass;                     /* The command class */
26885  00  =3      BYTE      cmd;                          /* The command */
26886  00  =3      BYTE      sensorType;                   /**/
26887  00  =3      BYTE      level;                        /* masked byte */
26888  00  =3      BYTE      sensorValue1;                 /* MSB */
26889  00  =3      BYTE      sensorValue2;                 
26890  00  =3      BYTE      sensorValue3;                 
26891  00  =3      BYTE      sensorValue4;                 /* LSB */
26892  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_FRAME;
26893  00  =3  
26894  00  =3  /************************************************************/
26895  00  =3  /* Sensor Multilevel Get V2 command class structs */        
26896  00  =3  /************************************************************/
26897  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V2_FRAME_
26898  00  =3  {
26899  00  =3      BYTE      cmdClass;                     /* The command class */
26900  00  =3      BYTE      cmd;                          /* The command */
26901  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V2_FRAME;
26902  00  =3  
26903  00  =3  /************************************************************/
26904  00  =3  /* Sensor Multilevel Report 1byte V2 command class structs */
26905  00  =3  /************************************************************/
26906  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V2_FRAME_
26907  00  =3  {
26908  00  =3      BYTE      cmdClass;                     /* The command class */
26909  00  =3      BYTE      cmd;                          /* The command */
26910  00  =3      BYTE      sensorType;                   /**/
26911  00  =3      BYTE      level;                        /* masked byte */
26912  00  =3      BYTE      sensorValue1;                 
26913  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V2_FRAME;
26914  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 451 

26915  00  =3  /************************************************************/
26916  00  =3  /* Sensor Multilevel Report 2byte V2 command class structs */
26917  00  =3  /************************************************************/
26918  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V2_FRAME_
26919  00  =3  {
26920  00  =3      BYTE      cmdClass;                     /* The command class */
26921  00  =3      BYTE      cmd;                          /* The command */
26922  00  =3      BYTE      sensorType;                   /**/
26923  00  =3      BYTE      level;                        /* masked byte */
26924  00  =3      BYTE      sensorValue1;                 /* MSB */
26925  00  =3      BYTE      sensorValue2;                 /* LSB */
26926  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V2_FRAME;
26927  00  =3  
26928  00  =3  /************************************************************/
26929  00  =3  /* Sensor Multilevel Report 3byte V2 command class structs */
26930  00  =3  /************************************************************/
26931  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V2_FRAME_
26932  00  =3  {
26933  00  =3      BYTE      cmdClass;                     /* The command class */
26934  00  =3      BYTE      cmd;                          /* The command */
26935  00  =3      BYTE      sensorType;                   /**/
26936  00  =3      BYTE      level;                        /* masked byte */
26937  00  =3      BYTE      sensorValue1;                 /* MSB */
26938  00  =3      BYTE      sensorValue2;                 
26939  00  =3      BYTE      sensorValue3;                 /* LSB */
26940  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V2_FRAME;
26941  00  =3  
26942  00  =3  /************************************************************/
26943  00  =3  /* Sensor Multilevel Report 4byte V2 command class structs */
26944  00  =3  /************************************************************/
26945  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V2_FRAME_
26946  00  =3  {
26947  00  =3      BYTE      cmdClass;                     /* The command class */
26948  00  =3      BYTE      cmd;                          /* The command */
26949  00  =3      BYTE      sensorType;                   /**/
26950  00  =3      BYTE      level;                        /* masked byte */
26951  00  =3      BYTE      sensorValue1;                 /* MSB */
26952  00  =3      BYTE      sensorValue2;                 
26953  00  =3      BYTE      sensorValue3;                 
26954  00  =3      BYTE      sensorValue4;                 /* LSB */
26955  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V2_FRAME;
26956  00  =3  
26957  00  =3  /************************************************************/
26958  00  =3  /* Sensor Multilevel Get V3 command class structs */        
26959  00  =3  /************************************************************/
26960  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V3_FRAME_
26961  00  =3  {
26962  00  =3      BYTE      cmdClass;                     /* The command class */
26963  00  =3      BYTE      cmd;                          /* The command */
26964  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V3_FRAME;
26965  00  =3  
26966  00  =3  /************************************************************/
26967  00  =3  /* Sensor Multilevel Report 1byte V3 command class structs */
26968  00  =3  /************************************************************/
26969  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V3_FRAME_
26970  00  =3  {
26971  00  =3      BYTE      cmdClass;                     /* The command class */
26972  00  =3      BYTE      cmd;                          /* The command */
26973  00  =3      BYTE      sensorType;                   /**/
26974  00  =3      BYTE      level;                        /* masked byte */
26975  00  =3      BYTE      sensorValue1;                 
26976  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V3_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 452 

26977  00  =3  
26978  00  =3  /************************************************************/
26979  00  =3  /* Sensor Multilevel Report 2byte V3 command class structs */
26980  00  =3  /************************************************************/
26981  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V3_FRAME_
26982  00  =3  {
26983  00  =3      BYTE      cmdClass;                     /* The command class */
26984  00  =3      BYTE      cmd;                          /* The command */
26985  00  =3      BYTE      sensorType;                   /**/
26986  00  =3      BYTE      level;                        /* masked byte */
26987  00  =3      BYTE      sensorValue1;                 /* MSB */
26988  00  =3      BYTE      sensorValue2;                 /* LSB */
26989  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V3_FRAME;
26990  00  =3  
26991  00  =3  /************************************************************/
26992  00  =3  /* Sensor Multilevel Report 3byte V3 command class structs */
26993  00  =3  /************************************************************/
26994  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V3_FRAME_
26995  00  =3  {
26996  00  =3      BYTE      cmdClass;                     /* The command class */
26997  00  =3      BYTE      cmd;                          /* The command */
26998  00  =3      BYTE      sensorType;                   /**/
26999  00  =3      BYTE      level;                        /* masked byte */
27000  00  =3      BYTE      sensorValue1;                 /* MSB */
27001  00  =3      BYTE      sensorValue2;                 
27002  00  =3      BYTE      sensorValue3;                 /* LSB */
27003  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V3_FRAME;
27004  00  =3  
27005  00  =3  /************************************************************/
27006  00  =3  /* Sensor Multilevel Report 4byte V3 command class structs */
27007  00  =3  /************************************************************/
27008  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V3_FRAME_
27009  00  =3  {
27010  00  =3      BYTE      cmdClass;                     /* The command class */
27011  00  =3      BYTE      cmd;                          /* The command */
27012  00  =3      BYTE      sensorType;                   /**/
27013  00  =3      BYTE      level;                        /* masked byte */
27014  00  =3      BYTE      sensorValue1;                 /* MSB */
27015  00  =3      BYTE      sensorValue2;                 
27016  00  =3      BYTE      sensorValue3;                 
27017  00  =3      BYTE      sensorValue4;                 /* LSB */
27018  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V3_FRAME;
27019  00  =3  
27020  00  =3  /************************************************************/
27021  00  =3  /* Sensor Multilevel Get V4 command class structs */        
27022  00  =3  /************************************************************/
27023  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V4_FRAME_
27024  00  =3  {
27025  00  =3      BYTE      cmdClass;                     /* The command class */
27026  00  =3      BYTE      cmd;                          /* The command */
27027  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V4_FRAME;
27028  00  =3  
27029  00  =3  /************************************************************/
27030  00  =3  /* Sensor Multilevel Report 1byte V4 command class structs */
27031  00  =3  /************************************************************/
27032  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V4_FRAME_
27033  00  =3  {
27034  00  =3      BYTE      cmdClass;                     /* The command class */
27035  00  =3      BYTE      cmd;                          /* The command */
27036  00  =3      BYTE      sensorType;                   /**/
27037  00  =3      BYTE      level;                        /* masked byte */
27038  00  =3      BYTE      sensorValue1;                 
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 453 

27039  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V4_FRAME;
27040  00  =3  
27041  00  =3  /************************************************************/
27042  00  =3  /* Sensor Multilevel Report 2byte V4 command class structs */
27043  00  =3  /************************************************************/
27044  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V4_FRAME_
27045  00  =3  {
27046  00  =3      BYTE      cmdClass;                     /* The command class */
27047  00  =3      BYTE      cmd;                          /* The command */
27048  00  =3      BYTE      sensorType;                   /**/
27049  00  =3      BYTE      level;                        /* masked byte */
27050  00  =3      BYTE      sensorValue1;                 /* MSB */
27051  00  =3      BYTE      sensorValue2;                 /* LSB */
27052  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V4_FRAME;
27053  00  =3  
27054  00  =3  /************************************************************/
27055  00  =3  /* Sensor Multilevel Report 3byte V4 command class structs */
27056  00  =3  /************************************************************/
27057  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V4_FRAME_
27058  00  =3  {
27059  00  =3      BYTE      cmdClass;                     /* The command class */
27060  00  =3      BYTE      cmd;                          /* The command */
27061  00  =3      BYTE      sensorType;                   /**/
27062  00  =3      BYTE      level;                        /* masked byte */
27063  00  =3      BYTE      sensorValue1;                 /* MSB */
27064  00  =3      BYTE      sensorValue2;                 
27065  00  =3      BYTE      sensorValue3;                 /* LSB */
27066  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V4_FRAME;
27067  00  =3  
27068  00  =3  /************************************************************/
27069  00  =3  /* Sensor Multilevel Report 4byte V4 command class structs */
27070  00  =3  /************************************************************/
27071  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V4_FRAME_
27072  00  =3  {
27073  00  =3      BYTE      cmdClass;                     /* The command class */
27074  00  =3      BYTE      cmd;                          /* The command */
27075  00  =3      BYTE      sensorType;                   /**/
27076  00  =3      BYTE      level;                        /* masked byte */
27077  00  =3      BYTE      sensorValue1;                 /* MSB */
27078  00  =3      BYTE      sensorValue2;                 
27079  00  =3      BYTE      sensorValue3;                 
27080  00  =3      BYTE      sensorValue4;                 /* LSB */
27081  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V4_FRAME;
27082  00  =3  
27083  00  =3  /************************************************************/
27084  00  =3  /* Sensor Multilevel Get V5 command class structs */        
27085  00  =3  /************************************************************/
27086  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V5_FRAME_
27087  00  =3  {
27088  00  =3      BYTE      cmdClass;                     /* The command class */
27089  00  =3      BYTE      cmd;                          /* The command */
27090  00  =3      BYTE      sensorType;                   /**/
27091  00  =3      BYTE      properties1;                  /* masked byte */
27092  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V5_FRAME;
27093  00  =3  
27094  00  =3  /************************************************************/
27095  00  =3  /* Sensor Multilevel Report 1byte V5 command class structs */
27096  00  =3  /************************************************************/
27097  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V5_FRAME_
27098  00  =3  {
27099  00  =3      BYTE      cmdClass;                     /* The command class */
27100  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 454 

27101  00  =3      BYTE      sensorType;                   /**/
27102  00  =3      BYTE      level;                        /* masked byte */
27103  00  =3      BYTE      sensorValue1;                 
27104  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V5_FRAME;
27105  00  =3  
27106  00  =3  /************************************************************/
27107  00  =3  /* Sensor Multilevel Report 2byte V5 command class structs */
27108  00  =3  /************************************************************/
27109  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V5_FRAME_
27110  00  =3  {
27111  00  =3      BYTE      cmdClass;                     /* The command class */
27112  00  =3      BYTE      cmd;                          /* The command */
27113  00  =3      BYTE      sensorType;                   /**/
27114  00  =3      BYTE      level;                        /* masked byte */
27115  00  =3      BYTE      sensorValue1;                 /* MSB */
27116  00  =3      BYTE      sensorValue2;                 /* LSB */
27117  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V5_FRAME;
27118  00  =3  
27119  00  =3  /************************************************************/
27120  00  =3  /* Sensor Multilevel Report 3byte V5 command class structs */
27121  00  =3  /************************************************************/
27122  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V5_FRAME_
27123  00  =3  {
27124  00  =3      BYTE      cmdClass;                     /* The command class */
27125  00  =3      BYTE      cmd;                          /* The command */
27126  00  =3      BYTE      sensorType;                   /**/
27127  00  =3      BYTE      level;                        /* masked byte */
27128  00  =3      BYTE      sensorValue1;                 /* MSB */
27129  00  =3      BYTE      sensorValue2;                 
27130  00  =3      BYTE      sensorValue3;                 /* LSB */
27131  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V5_FRAME;
27132  00  =3  
27133  00  =3  /************************************************************/
27134  00  =3  /* Sensor Multilevel Report 4byte V5 command class structs */
27135  00  =3  /************************************************************/
27136  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V5_FRAME_
27137  00  =3  {
27138  00  =3      BYTE      cmdClass;                     /* The command class */
27139  00  =3      BYTE      cmd;                          /* The command */
27140  00  =3      BYTE      sensorType;                   /**/
27141  00  =3      BYTE      level;                        /* masked byte */
27142  00  =3      BYTE      sensorValue1;                 /* MSB */
27143  00  =3      BYTE      sensorValue2;                 
27144  00  =3      BYTE      sensorValue3;                 
27145  00  =3      BYTE      sensorValue4;                 /* LSB */
27146  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V5_FRAME;
27147  00  =3  
27148  00  =3  /************************************************************/
27149  00  =3  /* Sensor Multilevel Supported Get Sensor V5 command class structs */
27150  00  =3  /************************************************************/
27151  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V5_FRAME_
27152  00  =3  {
27153  00  =3      BYTE      cmdClass;                     /* The command class */
27154  00  =3      BYTE      cmd;                          /* The command */
27155  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V5_FRAME;
27156  00  =3  
27157  00  =3  /************************************************************/
27158  00  =3  /* Sensor Multilevel Supported Sensor Report 1byte V5 command class structs */
27159  00  =3  /************************************************************/
27160  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V5_FRAME_
27161  00  =3  {
27162  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 455 

27163  00  =3      BYTE      cmd;                          /* The command */
27164  00  =3      BYTE      bitMask1;                     
27165  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V5_FRAME;
27166  00  =3  
27167  00  =3  /************************************************************/
27168  00  =3  /* Sensor Multilevel Supported Sensor Report 2byte V5 command class structs */
27169  00  =3  /************************************************************/
27170  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V5_FRAME_
27171  00  =3  {
27172  00  =3      BYTE      cmdClass;                     /* The command class */
27173  00  =3      BYTE      cmd;                          /* The command */
27174  00  =3      BYTE      bitMask1;                     /* MSB */
27175  00  =3      BYTE      bitMask2;                     /* LSB */
27176  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V5_FRAME;
27177  00  =3  
27178  00  =3  /************************************************************/
27179  00  =3  /* Sensor Multilevel Supported Sensor Report 3byte V5 command class structs */
27180  00  =3  /************************************************************/
27181  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V5_FRAME_
27182  00  =3  {
27183  00  =3      BYTE      cmdClass;                     /* The command class */
27184  00  =3      BYTE      cmd;                          /* The command */
27185  00  =3      BYTE      bitMask1;                     /* MSB */
27186  00  =3      BYTE      bitMask2;                     
27187  00  =3      BYTE      bitMask3;                     /* LSB */
27188  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V5_FRAME;
27189  00  =3  
27190  00  =3  /************************************************************/
27191  00  =3  /* Sensor Multilevel Supported Sensor Report 4byte V5 command class structs */
27192  00  =3  /************************************************************/
27193  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V5_FRAME_
27194  00  =3  {
27195  00  =3      BYTE      cmdClass;                     /* The command class */
27196  00  =3      BYTE      cmd;                          /* The command */
27197  00  =3      BYTE      bitMask1;                     /* MSB */
27198  00  =3      BYTE      bitMask2;                     
27199  00  =3      BYTE      bitMask3;                     
27200  00  =3      BYTE      bitMask4;                     /* LSB */
27201  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V5_FRAME;
27202  00  =3  
27203  00  =3  /************************************************************/
27204  00  =3  /* Sensor Multilevel Supported Get Scale V5 command class structs */
27205  00  =3  /************************************************************/
27206  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V5_FRAME_
27207  00  =3  {
27208  00  =3      BYTE      cmdClass;                     /* The command class */
27209  00  =3      BYTE      cmd;                          /* The command */
27210  00  =3      BYTE      sensorType;                   /**/
27211  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V5_FRAME;
27212  00  =3  
27213  00  =3  /************************************************************/
27214  00  =3  /* Sensor Multilevel Supported Scale Report V5 command class structs */
27215  00  =3  /************************************************************/
27216  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V5_FRAME_
27217  00  =3  {
27218  00  =3      BYTE      cmdClass;                     /* The command class */
27219  00  =3      BYTE      cmd;                          /* The command */
27220  00  =3      BYTE      sensorType;                   /**/
27221  00  =3      BYTE      properties1;                  /* masked byte */
27222  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V5_FRAME;
27223  00  =3  
27224  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 456 

27225  00  =3  /* Sensor Multilevel Get V6 command class structs */        
27226  00  =3  /************************************************************/
27227  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V6_FRAME_
27228  00  =3  {
27229  00  =3      BYTE      cmdClass;                     /* The command class */
27230  00  =3      BYTE      cmd;                          /* The command */
27231  00  =3      BYTE      sensorType;                   /**/
27232  00  =3      BYTE      properties1;                  /* masked byte */
27233  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V6_FRAME;
27234  00  =3  
27235  00  =3  /************************************************************/
27236  00  =3  /* Sensor Multilevel Report 1byte V6 command class structs */
27237  00  =3  /************************************************************/
27238  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V6_FRAME_
27239  00  =3  {
27240  00  =3      BYTE      cmdClass;                     /* The command class */
27241  00  =3      BYTE      cmd;                          /* The command */
27242  00  =3      BYTE      sensorType;                   /**/
27243  00  =3      BYTE      level;                        /* masked byte */
27244  00  =3      BYTE      sensorValue1;                 
27245  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V6_FRAME;
27246  00  =3  
27247  00  =3  /************************************************************/
27248  00  =3  /* Sensor Multilevel Report 2byte V6 command class structs */
27249  00  =3  /************************************************************/
27250  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V6_FRAME_
27251  00  =3  {
27252  00  =3      BYTE      cmdClass;                     /* The command class */
27253  00  =3      BYTE      cmd;                          /* The command */
27254  00  =3      BYTE      sensorType;                   /**/
27255  00  =3      BYTE      level;                        /* masked byte */
27256  00  =3      BYTE      sensorValue1;                 /* MSB */
27257  00  =3      BYTE      sensorValue2;                 /* LSB */
27258  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V6_FRAME;
27259  00  =3  
27260  00  =3  /************************************************************/
27261  00  =3  /* Sensor Multilevel Report 3byte V6 command class structs */
27262  00  =3  /************************************************************/
27263  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V6_FRAME_
27264  00  =3  {
27265  00  =3      BYTE      cmdClass;                     /* The command class */
27266  00  =3      BYTE      cmd;                          /* The command */
27267  00  =3      BYTE      sensorType;                   /**/
27268  00  =3      BYTE      level;                        /* masked byte */
27269  00  =3      BYTE      sensorValue1;                 /* MSB */
27270  00  =3      BYTE      sensorValue2;                 
27271  00  =3      BYTE      sensorValue3;                 /* LSB */
27272  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V6_FRAME;
27273  00  =3  
27274  00  =3  /************************************************************/
27275  00  =3  /* Sensor Multilevel Report 4byte V6 command class structs */
27276  00  =3  /************************************************************/
27277  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V6_FRAME_
27278  00  =3  {
27279  00  =3      BYTE      cmdClass;                     /* The command class */
27280  00  =3      BYTE      cmd;                          /* The command */
27281  00  =3      BYTE      sensorType;                   /**/
27282  00  =3      BYTE      level;                        /* masked byte */
27283  00  =3      BYTE      sensorValue1;                 /* MSB */
27284  00  =3      BYTE      sensorValue2;                 
27285  00  =3      BYTE      sensorValue3;                 
27286  00  =3      BYTE      sensorValue4;                 /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 457 

27287  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V6_FRAME;
27288  00  =3  
27289  00  =3  /************************************************************/
27290  00  =3  /* Sensor Multilevel Supported Get Sensor V6 command class structs */
27291  00  =3  /************************************************************/
27292  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V6_FRAME_
27293  00  =3  {
27294  00  =3      BYTE      cmdClass;                     /* The command class */
27295  00  =3      BYTE      cmd;                          /* The command */
27296  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V6_FRAME;
27297  00  =3  
27298  00  =3  /************************************************************/
27299  00  =3  /* Sensor Multilevel Supported Sensor Report 1byte V6 command class structs */
27300  00  =3  /************************************************************/
27301  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V6_FRAME_
27302  00  =3  {
27303  00  =3      BYTE      cmdClass;                     /* The command class */
27304  00  =3      BYTE      cmd;                          /* The command */
27305  00  =3      BYTE      bitMask1;                     
27306  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V6_FRAME;
27307  00  =3  
27308  00  =3  /************************************************************/
27309  00  =3  /* Sensor Multilevel Supported Sensor Report 2byte V6 command class structs */
27310  00  =3  /************************************************************/
27311  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V6_FRAME_
27312  00  =3  {
27313  00  =3      BYTE      cmdClass;                     /* The command class */
27314  00  =3      BYTE      cmd;                          /* The command */
27315  00  =3      BYTE      bitMask1;                     /* MSB */
27316  00  =3      BYTE      bitMask2;                     /* LSB */
27317  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V6_FRAME;
27318  00  =3  
27319  00  =3  /************************************************************/
27320  00  =3  /* Sensor Multilevel Supported Sensor Report 3byte V6 command class structs */
27321  00  =3  /************************************************************/
27322  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V6_FRAME_
27323  00  =3  {
27324  00  =3      BYTE      cmdClass;                     /* The command class */
27325  00  =3      BYTE      cmd;                          /* The command */
27326  00  =3      BYTE      bitMask1;                     /* MSB */
27327  00  =3      BYTE      bitMask2;                     
27328  00  =3      BYTE      bitMask3;                     /* LSB */
27329  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V6_FRAME;
27330  00  =3  
27331  00  =3  /************************************************************/
27332  00  =3  /* Sensor Multilevel Supported Sensor Report 4byte V6 command class structs */
27333  00  =3  /************************************************************/
27334  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V6_FRAME_
27335  00  =3  {
27336  00  =3      BYTE      cmdClass;                     /* The command class */
27337  00  =3      BYTE      cmd;                          /* The command */
27338  00  =3      BYTE      bitMask1;                     /* MSB */
27339  00  =3      BYTE      bitMask2;                     
27340  00  =3      BYTE      bitMask3;                     
27341  00  =3      BYTE      bitMask4;                     /* LSB */
27342  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V6_FRAME;
27343  00  =3  
27344  00  =3  /************************************************************/
27345  00  =3  /* Sensor Multilevel Supported Get Scale V6 command class structs */
27346  00  =3  /************************************************************/
27347  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V6_FRAME_
27348  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 458 

27349  00  =3      BYTE      cmdClass;                     /* The command class */
27350  00  =3      BYTE      cmd;                          /* The command */
27351  00  =3      BYTE      sensorType;                   /**/
27352  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V6_FRAME;
27353  00  =3  
27354  00  =3  /************************************************************/
27355  00  =3  /* Sensor Multilevel Supported Scale Report V6 command class structs */
27356  00  =3  /************************************************************/
27357  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V6_FRAME_
27358  00  =3  {
27359  00  =3      BYTE      cmdClass;                     /* The command class */
27360  00  =3      BYTE      cmd;                          /* The command */
27361  00  =3      BYTE      sensorType;                   /**/
27362  00  =3      BYTE      properties1;                  /* masked byte */
27363  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V6_FRAME;
27364  00  =3  
27365  00  =3  /************************************************************/
27366  00  =3  /* Sensor Multilevel Get V7 command class structs */        
27367  00  =3  /************************************************************/
27368  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V7_FRAME_
27369  00  =3  {
27370  00  =3      BYTE      cmdClass;                     /* The command class */
27371  00  =3      BYTE      cmd;                          /* The command */
27372  00  =3      BYTE      sensorType;                   /**/
27373  00  =3      BYTE      properties1;                  /* masked byte */
27374  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V7_FRAME;
27375  00  =3  
27376  00  =3  /************************************************************/
27377  00  =3  /* Sensor Multilevel Report 1byte V7 command class structs */
27378  00  =3  /************************************************************/
27379  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V7_FRAME_
27380  00  =3  {
27381  00  =3      BYTE      cmdClass;                     /* The command class */
27382  00  =3      BYTE      cmd;                          /* The command */
27383  00  =3      BYTE      sensorType;                   /**/
27384  00  =3      BYTE      level;                        /* masked byte */
27385  00  =3      BYTE      sensorValue1;                 
27386  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V7_FRAME;
27387  00  =3  
27388  00  =3  /************************************************************/
27389  00  =3  /* Sensor Multilevel Report 2byte V7 command class structs */
27390  00  =3  /************************************************************/
27391  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V7_FRAME_
27392  00  =3  {
27393  00  =3      BYTE      cmdClass;                     /* The command class */
27394  00  =3      BYTE      cmd;                          /* The command */
27395  00  =3      BYTE      sensorType;                   /**/
27396  00  =3      BYTE      level;                        /* masked byte */
27397  00  =3      BYTE      sensorValue1;                 /* MSB */
27398  00  =3      BYTE      sensorValue2;                 /* LSB */
27399  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V7_FRAME;
27400  00  =3  
27401  00  =3  /************************************************************/
27402  00  =3  /* Sensor Multilevel Report 3byte V7 command class structs */
27403  00  =3  /************************************************************/
27404  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V7_FRAME_
27405  00  =3  {
27406  00  =3      BYTE      cmdClass;                     /* The command class */
27407  00  =3      BYTE      cmd;                          /* The command */
27408  00  =3      BYTE      sensorType;                   /**/
27409  00  =3      BYTE      level;                        /* masked byte */
27410  00  =3      BYTE      sensorValue1;                 /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 459 

27411  00  =3      BYTE      sensorValue2;                 
27412  00  =3      BYTE      sensorValue3;                 /* LSB */
27413  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V7_FRAME;
27414  00  =3  
27415  00  =3  /************************************************************/
27416  00  =3  /* Sensor Multilevel Report 4byte V7 command class structs */
27417  00  =3  /************************************************************/
27418  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V7_FRAME_
27419  00  =3  {
27420  00  =3      BYTE      cmdClass;                     /* The command class */
27421  00  =3      BYTE      cmd;                          /* The command */
27422  00  =3      BYTE      sensorType;                   /**/
27423  00  =3      BYTE      level;                        /* masked byte */
27424  00  =3      BYTE      sensorValue1;                 /* MSB */
27425  00  =3      BYTE      sensorValue2;                 
27426  00  =3      BYTE      sensorValue3;                 
27427  00  =3      BYTE      sensorValue4;                 /* LSB */
27428  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V7_FRAME;
27429  00  =3  
27430  00  =3  /************************************************************/
27431  00  =3  /* Sensor Multilevel Supported Get Sensor V7 command class structs */
27432  00  =3  /************************************************************/
27433  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V7_FRAME_
27434  00  =3  {
27435  00  =3      BYTE      cmdClass;                     /* The command class */
27436  00  =3      BYTE      cmd;                          /* The command */
27437  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V7_FRAME;
27438  00  =3  
27439  00  =3  /************************************************************/
27440  00  =3  /* Sensor Multilevel Supported Sensor Report 1byte V7 command class structs */
27441  00  =3  /************************************************************/
27442  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V7_FRAME_
27443  00  =3  {
27444  00  =3      BYTE      cmdClass;                     /* The command class */
27445  00  =3      BYTE      cmd;                          /* The command */
27446  00  =3      BYTE      bitMask1;                     
27447  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V7_FRAME;
27448  00  =3  
27449  00  =3  /************************************************************/
27450  00  =3  /* Sensor Multilevel Supported Sensor Report 2byte V7 command class structs */
27451  00  =3  /************************************************************/
27452  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V7_FRAME_
27453  00  =3  {
27454  00  =3      BYTE      cmdClass;                     /* The command class */
27455  00  =3      BYTE      cmd;                          /* The command */
27456  00  =3      BYTE      bitMask1;                     /* MSB */
27457  00  =3      BYTE      bitMask2;                     /* LSB */
27458  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V7_FRAME;
27459  00  =3  
27460  00  =3  /************************************************************/
27461  00  =3  /* Sensor Multilevel Supported Sensor Report 3byte V7 command class structs */
27462  00  =3  /************************************************************/
27463  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V7_FRAME_
27464  00  =3  {
27465  00  =3      BYTE      cmdClass;                     /* The command class */
27466  00  =3      BYTE      cmd;                          /* The command */
27467  00  =3      BYTE      bitMask1;                     /* MSB */
27468  00  =3      BYTE      bitMask2;                     
27469  00  =3      BYTE      bitMask3;                     /* LSB */
27470  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V7_FRAME;
27471  00  =3  
27472  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 460 

27473  00  =3  /* Sensor Multilevel Supported Sensor Report 4byte V7 command class structs */
27474  00  =3  /************************************************************/
27475  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V7_FRAME_
27476  00  =3  {
27477  00  =3      BYTE      cmdClass;                     /* The command class */
27478  00  =3      BYTE      cmd;                          /* The command */
27479  00  =3      BYTE      bitMask1;                     /* MSB */
27480  00  =3      BYTE      bitMask2;                     
27481  00  =3      BYTE      bitMask3;                     
27482  00  =3      BYTE      bitMask4;                     /* LSB */
27483  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V7_FRAME;
27484  00  =3  
27485  00  =3  /************************************************************/
27486  00  =3  /* Sensor Multilevel Supported Get Scale V7 command class structs */
27487  00  =3  /************************************************************/
27488  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V7_FRAME_
27489  00  =3  {
27490  00  =3      BYTE      cmdClass;                     /* The command class */
27491  00  =3      BYTE      cmd;                          /* The command */
27492  00  =3      BYTE      sensorType;                   /**/
27493  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V7_FRAME;
27494  00  =3  
27495  00  =3  /************************************************************/
27496  00  =3  /* Sensor Multilevel Supported Scale Report V7 command class structs */
27497  00  =3  /************************************************************/
27498  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V7_FRAME_
27499  00  =3  {
27500  00  =3      BYTE      cmdClass;                     /* The command class */
27501  00  =3      BYTE      cmd;                          /* The command */
27502  00  =3      BYTE      sensorType;                   /**/
27503  00  =3      BYTE      properties1;                  /* masked byte */
27504  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V7_FRAME;
27505  00  =3  
27506  00  =3  /************************************************************/
27507  00  =3  /* Sensor Multilevel Get V8 command class structs */        
27508  00  =3  /************************************************************/
27509  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V8_FRAME_
27510  00  =3  {
27511  00  =3      BYTE      cmdClass;                     /* The command class */
27512  00  =3      BYTE      cmd;                          /* The command */
27513  00  =3      BYTE      sensorType;                   /**/
27514  00  =3      BYTE      properties1;                  /* masked byte */
27515  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V8_FRAME;
27516  00  =3  
27517  00  =3  /************************************************************/
27518  00  =3  /* Sensor Multilevel Report 1byte V8 command class structs */
27519  00  =3  /************************************************************/
27520  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V8_FRAME_
27521  00  =3  {
27522  00  =3      BYTE      cmdClass;                     /* The command class */
27523  00  =3      BYTE      cmd;                          /* The command */
27524  00  =3      BYTE      sensorType;                   /**/
27525  00  =3      BYTE      level;                        /* masked byte */
27526  00  =3      BYTE      sensorValue1;                 
27527  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V8_FRAME;
27528  00  =3  
27529  00  =3  /************************************************************/
27530  00  =3  /* Sensor Multilevel Report 2byte V8 command class structs */
27531  00  =3  /************************************************************/
27532  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V8_FRAME_
27533  00  =3  {
27534  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 461 

27535  00  =3      BYTE      cmd;                          /* The command */
27536  00  =3      BYTE      sensorType;                   /**/
27537  00  =3      BYTE      level;                        /* masked byte */
27538  00  =3      BYTE      sensorValue1;                 /* MSB */
27539  00  =3      BYTE      sensorValue2;                 /* LSB */
27540  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V8_FRAME;
27541  00  =3  
27542  00  =3  /************************************************************/
27543  00  =3  /* Sensor Multilevel Report 3byte V8 command class structs */
27544  00  =3  /************************************************************/
27545  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V8_FRAME_
27546  00  =3  {
27547  00  =3      BYTE      cmdClass;                     /* The command class */
27548  00  =3      BYTE      cmd;                          /* The command */
27549  00  =3      BYTE      sensorType;                   /**/
27550  00  =3      BYTE      level;                        /* masked byte */
27551  00  =3      BYTE      sensorValue1;                 /* MSB */
27552  00  =3      BYTE      sensorValue2;                 
27553  00  =3      BYTE      sensorValue3;                 /* LSB */
27554  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V8_FRAME;
27555  00  =3  
27556  00  =3  /************************************************************/
27557  00  =3  /* Sensor Multilevel Report 4byte V8 command class structs */
27558  00  =3  /************************************************************/
27559  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V8_FRAME_
27560  00  =3  {
27561  00  =3      BYTE      cmdClass;                     /* The command class */
27562  00  =3      BYTE      cmd;                          /* The command */
27563  00  =3      BYTE      sensorType;                   /**/
27564  00  =3      BYTE      level;                        /* masked byte */
27565  00  =3      BYTE      sensorValue1;                 /* MSB */
27566  00  =3      BYTE      sensorValue2;                 
27567  00  =3      BYTE      sensorValue3;                 
27568  00  =3      BYTE      sensorValue4;                 /* LSB */
27569  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V8_FRAME;
27570  00  =3  
27571  00  =3  /************************************************************/
27572  00  =3  /* Sensor Multilevel Supported Get Sensor V8 command class structs */
27573  00  =3  /************************************************************/
27574  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V8_FRAME_
27575  00  =3  {
27576  00  =3      BYTE      cmdClass;                     /* The command class */
27577  00  =3      BYTE      cmd;                          /* The command */
27578  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V8_FRAME;
27579  00  =3  
27580  00  =3  /************************************************************/
27581  00  =3  /* Sensor Multilevel Supported Sensor Report 1byte V8 command class structs */
27582  00  =3  /************************************************************/
27583  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V8_FRAME_
27584  00  =3  {
27585  00  =3      BYTE      cmdClass;                     /* The command class */
27586  00  =3      BYTE      cmd;                          /* The command */
27587  00  =3      BYTE      bitMask1;                     
27588  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V8_FRAME;
27589  00  =3  
27590  00  =3  /************************************************************/
27591  00  =3  /* Sensor Multilevel Supported Sensor Report 2byte V8 command class structs */
27592  00  =3  /************************************************************/
27593  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V8_FRAME_
27594  00  =3  {
27595  00  =3      BYTE      cmdClass;                     /* The command class */
27596  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 462 

27597  00  =3      BYTE      bitMask1;                     /* MSB */
27598  00  =3      BYTE      bitMask2;                     /* LSB */
27599  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V8_FRAME;
27600  00  =3  
27601  00  =3  /************************************************************/
27602  00  =3  /* Sensor Multilevel Supported Sensor Report 3byte V8 command class structs */
27603  00  =3  /************************************************************/
27604  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V8_FRAME_
27605  00  =3  {
27606  00  =3      BYTE      cmdClass;                     /* The command class */
27607  00  =3      BYTE      cmd;                          /* The command */
27608  00  =3      BYTE      bitMask1;                     /* MSB */
27609  00  =3      BYTE      bitMask2;                     
27610  00  =3      BYTE      bitMask3;                     /* LSB */
27611  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V8_FRAME;
27612  00  =3  
27613  00  =3  /************************************************************/
27614  00  =3  /* Sensor Multilevel Supported Sensor Report 4byte V8 command class structs */
27615  00  =3  /************************************************************/
27616  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V8_FRAME_
27617  00  =3  {
27618  00  =3      BYTE      cmdClass;                     /* The command class */
27619  00  =3      BYTE      cmd;                          /* The command */
27620  00  =3      BYTE      bitMask1;                     /* MSB */
27621  00  =3      BYTE      bitMask2;                     
27622  00  =3      BYTE      bitMask3;                     
27623  00  =3      BYTE      bitMask4;                     /* LSB */
27624  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V8_FRAME;
27625  00  =3  
27626  00  =3  /************************************************************/
27627  00  =3  /* Sensor Multilevel Supported Get Scale V8 command class structs */
27628  00  =3  /************************************************************/
27629  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V8_FRAME_
27630  00  =3  {
27631  00  =3      BYTE      cmdClass;                     /* The command class */
27632  00  =3      BYTE      cmd;                          /* The command */
27633  00  =3      BYTE      sensorType;                   /**/
27634  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V8_FRAME;
27635  00  =3  
27636  00  =3  /************************************************************/
27637  00  =3  /* Sensor Multilevel Supported Scale Report V8 command class structs */
27638  00  =3  /************************************************************/
27639  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V8_FRAME_
27640  00  =3  {
27641  00  =3      BYTE      cmdClass;                     /* The command class */
27642  00  =3      BYTE      cmd;                          /* The command */
27643  00  =3      BYTE      sensorType;                   /**/
27644  00  =3      BYTE      properties1;                  /* masked byte */
27645  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V8_FRAME;
27646  00  =3  
27647  00  =3  /************************************************************/
27648  00  =3  /* Sensor Multilevel Get V9 command class structs */        
27649  00  =3  /************************************************************/
27650  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V9_FRAME_
27651  00  =3  {
27652  00  =3      BYTE      cmdClass;                     /* The command class */
27653  00  =3      BYTE      cmd;                          /* The command */
27654  00  =3      BYTE      sensorType;                   /**/
27655  00  =3      BYTE      properties1;                  /* masked byte */
27656  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V9_FRAME;
27657  00  =3  
27658  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 463 

27659  00  =3  /* Sensor Multilevel Report 1byte V9 command class structs */
27660  00  =3  /************************************************************/
27661  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V9_FRAME_
27662  00  =3  {
27663  00  =3      BYTE      cmdClass;                     /* The command class */
27664  00  =3      BYTE      cmd;                          /* The command */
27665  00  =3      BYTE      sensorType;                   /**/
27666  00  =3      BYTE      level;                        /* masked byte */
27667  00  =3      BYTE      sensorValue1;                 
27668  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V9_FRAME;
27669  00  =3  
27670  00  =3  /************************************************************/
27671  00  =3  /* Sensor Multilevel Report 2byte V9 command class structs */
27672  00  =3  /************************************************************/
27673  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V9_FRAME_
27674  00  =3  {
27675  00  =3      BYTE      cmdClass;                     /* The command class */
27676  00  =3      BYTE      cmd;                          /* The command */
27677  00  =3      BYTE      sensorType;                   /**/
27678  00  =3      BYTE      level;                        /* masked byte */
27679  00  =3      BYTE      sensorValue1;                 /* MSB */
27680  00  =3      BYTE      sensorValue2;                 /* LSB */
27681  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V9_FRAME;
27682  00  =3  
27683  00  =3  /************************************************************/
27684  00  =3  /* Sensor Multilevel Report 3byte V9 command class structs */
27685  00  =3  /************************************************************/
27686  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V9_FRAME_
27687  00  =3  {
27688  00  =3      BYTE      cmdClass;                     /* The command class */
27689  00  =3      BYTE      cmd;                          /* The command */
27690  00  =3      BYTE      sensorType;                   /**/
27691  00  =3      BYTE      level;                        /* masked byte */
27692  00  =3      BYTE      sensorValue1;                 /* MSB */
27693  00  =3      BYTE      sensorValue2;                 
27694  00  =3      BYTE      sensorValue3;                 /* LSB */
27695  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V9_FRAME;
27696  00  =3  
27697  00  =3  /************************************************************/
27698  00  =3  /* Sensor Multilevel Report 4byte V9 command class structs */
27699  00  =3  /************************************************************/
27700  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V9_FRAME_
27701  00  =3  {
27702  00  =3      BYTE      cmdClass;                     /* The command class */
27703  00  =3      BYTE      cmd;                          /* The command */
27704  00  =3      BYTE      sensorType;                   /**/
27705  00  =3      BYTE      level;                        /* masked byte */
27706  00  =3      BYTE      sensorValue1;                 /* MSB */
27707  00  =3      BYTE      sensorValue2;                 
27708  00  =3      BYTE      sensorValue3;                 
27709  00  =3      BYTE      sensorValue4;                 /* LSB */
27710  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V9_FRAME;
27711  00  =3  
27712  00  =3  /************************************************************/
27713  00  =3  /* Sensor Multilevel Supported Get Sensor V9 command class structs */
27714  00  =3  /************************************************************/
27715  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V9_FRAME_
27716  00  =3  {
27717  00  =3      BYTE      cmdClass;                     /* The command class */
27718  00  =3      BYTE      cmd;                          /* The command */
27719  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V9_FRAME;
27720  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 464 

27721  00  =3  /************************************************************/
27722  00  =3  /* Sensor Multilevel Supported Sensor Report 1byte V9 command class structs */
27723  00  =3  /************************************************************/
27724  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V9_FRAME_
27725  00  =3  {
27726  00  =3      BYTE      cmdClass;                     /* The command class */
27727  00  =3      BYTE      cmd;                          /* The command */
27728  00  =3      BYTE      bitMask1;                     
27729  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V9_FRAME;
27730  00  =3  
27731  00  =3  /************************************************************/
27732  00  =3  /* Sensor Multilevel Supported Sensor Report 2byte V9 command class structs */
27733  00  =3  /************************************************************/
27734  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V9_FRAME_
27735  00  =3  {
27736  00  =3      BYTE      cmdClass;                     /* The command class */
27737  00  =3      BYTE      cmd;                          /* The command */
27738  00  =3      BYTE      bitMask1;                     /* MSB */
27739  00  =3      BYTE      bitMask2;                     /* LSB */
27740  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V9_FRAME;
27741  00  =3  
27742  00  =3  /************************************************************/
27743  00  =3  /* Sensor Multilevel Supported Sensor Report 3byte V9 command class structs */
27744  00  =3  /************************************************************/
27745  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V9_FRAME_
27746  00  =3  {
27747  00  =3      BYTE      cmdClass;                     /* The command class */
27748  00  =3      BYTE      cmd;                          /* The command */
27749  00  =3      BYTE      bitMask1;                     /* MSB */
27750  00  =3      BYTE      bitMask2;                     
27751  00  =3      BYTE      bitMask3;                     /* LSB */
27752  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V9_FRAME;
27753  00  =3  
27754  00  =3  /************************************************************/
27755  00  =3  /* Sensor Multilevel Supported Sensor Report 4byte V9 command class structs */
27756  00  =3  /************************************************************/
27757  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V9_FRAME_
27758  00  =3  {
27759  00  =3      BYTE      cmdClass;                     /* The command class */
27760  00  =3      BYTE      cmd;                          /* The command */
27761  00  =3      BYTE      bitMask1;                     /* MSB */
27762  00  =3      BYTE      bitMask2;                     
27763  00  =3      BYTE      bitMask3;                     
27764  00  =3      BYTE      bitMask4;                     /* LSB */
27765  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V9_FRAME;
27766  00  =3  
27767  00  =3  /************************************************************/
27768  00  =3  /* Sensor Multilevel Supported Get Scale V9 command class structs */
27769  00  =3  /************************************************************/
27770  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V9_FRAME_
27771  00  =3  {
27772  00  =3      BYTE      cmdClass;                     /* The command class */
27773  00  =3      BYTE      cmd;                          /* The command */
27774  00  =3      BYTE      sensorType;                   /**/
27775  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V9_FRAME;
27776  00  =3  
27777  00  =3  /************************************************************/
27778  00  =3  /* Sensor Multilevel Supported Scale Report V9 command class structs */
27779  00  =3  /************************************************************/
27780  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V9_FRAME_
27781  00  =3  {
27782  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 465 

27783  00  =3      BYTE      cmd;                          /* The command */
27784  00  =3      BYTE      sensorType;                   /**/
27785  00  =3      BYTE      properties1;                  /* masked byte */
27786  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V9_FRAME;
27787  00  =3  
27788  00  =3  /************************************************************/
27789  00  =3  /* Sensor Multilevel Get V10 command class structs */       
27790  00  =3  /************************************************************/
27791  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V10_FRAME_
27792  00  =3  {
27793  00  =3      BYTE      cmdClass;                     /* The command class */
27794  00  =3      BYTE      cmd;                          /* The command */
27795  00  =3      BYTE      sensorType;                   /**/
27796  00  =3      BYTE      properties1;                  /* masked byte */
27797  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V10_FRAME;
27798  00  =3  
27799  00  =3  /************************************************************/
27800  00  =3  /* Sensor Multilevel Report 1byte V10 command class structs */
27801  00  =3  /************************************************************/
27802  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V10_FRAME_
27803  00  =3  {
27804  00  =3      BYTE      cmdClass;                     /* The command class */
27805  00  =3      BYTE      cmd;                          /* The command */
27806  00  =3      BYTE      sensorType;                   /**/
27807  00  =3      BYTE      level;                        /* masked byte */
27808  00  =3      BYTE      sensorValue1;                 
27809  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V10_FRAME;
27810  00  =3  
27811  00  =3  /************************************************************/
27812  00  =3  /* Sensor Multilevel Report 2byte V10 command class structs */
27813  00  =3  /************************************************************/
27814  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V10_FRAME_
27815  00  =3  {
27816  00  =3      BYTE      cmdClass;                     /* The command class */
27817  00  =3      BYTE      cmd;                          /* The command */
27818  00  =3      BYTE      sensorType;                   /**/
27819  00  =3      BYTE      level;                        /* masked byte */
27820  00  =3      BYTE      sensorValue1;                 /* MSB */
27821  00  =3      BYTE      sensorValue2;                 /* LSB */
27822  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V10_FRAME;
27823  00  =3  
27824  00  =3  /************************************************************/
27825  00  =3  /* Sensor Multilevel Report 3byte V10 command class structs */
27826  00  =3  /************************************************************/
27827  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V10_FRAME_
27828  00  =3  {
27829  00  =3      BYTE      cmdClass;                     /* The command class */
27830  00  =3      BYTE      cmd;                          /* The command */
27831  00  =3      BYTE      sensorType;                   /**/
27832  00  =3      BYTE      level;                        /* masked byte */
27833  00  =3      BYTE      sensorValue1;                 /* MSB */
27834  00  =3      BYTE      sensorValue2;                 
27835  00  =3      BYTE      sensorValue3;                 /* LSB */
27836  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V10_FRAME;
27837  00  =3  
27838  00  =3  /************************************************************/
27839  00  =3  /* Sensor Multilevel Report 4byte V10 command class structs */
27840  00  =3  /************************************************************/
27841  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V10_FRAME_
27842  00  =3  {
27843  00  =3      BYTE      cmdClass;                     /* The command class */
27844  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 466 

27845  00  =3      BYTE      sensorType;                   /**/
27846  00  =3      BYTE      level;                        /* masked byte */
27847  00  =3      BYTE      sensorValue1;                 /* MSB */
27848  00  =3      BYTE      sensorValue2;                 
27849  00  =3      BYTE      sensorValue3;                 
27850  00  =3      BYTE      sensorValue4;                 /* LSB */
27851  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V10_FRAME;
27852  00  =3  
27853  00  =3  /************************************************************/
27854  00  =3  /* Sensor Multilevel Supported Get Sensor V10 command class structs */
27855  00  =3  /************************************************************/
27856  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V10_FRAME_
27857  00  =3  {
27858  00  =3      BYTE      cmdClass;                     /* The command class */
27859  00  =3      BYTE      cmd;                          /* The command */
27860  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V10_FRAME;
27861  00  =3  
27862  00  =3  /************************************************************/
27863  00  =3  /* Sensor Multilevel Supported Sensor Report 1byte V10 command class structs */
27864  00  =3  /************************************************************/
27865  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V10_FRAME_
27866  00  =3  {
27867  00  =3      BYTE      cmdClass;                     /* The command class */
27868  00  =3      BYTE      cmd;                          /* The command */
27869  00  =3      BYTE      bitMask1;                     
27870  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V10_FRAME;
27871  00  =3  
27872  00  =3  /************************************************************/
27873  00  =3  /* Sensor Multilevel Supported Sensor Report 2byte V10 command class structs */
27874  00  =3  /************************************************************/
27875  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V10_FRAME_
27876  00  =3  {
27877  00  =3      BYTE      cmdClass;                     /* The command class */
27878  00  =3      BYTE      cmd;                          /* The command */
27879  00  =3      BYTE      bitMask1;                     /* MSB */
27880  00  =3      BYTE      bitMask2;                     /* LSB */
27881  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V10_FRAME;
27882  00  =3  
27883  00  =3  /************************************************************/
27884  00  =3  /* Sensor Multilevel Supported Sensor Report 3byte V10 command class structs */
27885  00  =3  /************************************************************/
27886  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V10_FRAME_
27887  00  =3  {
27888  00  =3      BYTE      cmdClass;                     /* The command class */
27889  00  =3      BYTE      cmd;                          /* The command */
27890  00  =3      BYTE      bitMask1;                     /* MSB */
27891  00  =3      BYTE      bitMask2;                     
27892  00  =3      BYTE      bitMask3;                     /* LSB */
27893  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V10_FRAME;
27894  00  =3  
27895  00  =3  /************************************************************/
27896  00  =3  /* Sensor Multilevel Supported Sensor Report 4byte V10 command class structs */
27897  00  =3  /************************************************************/
27898  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V10_FRAME_
27899  00  =3  {
27900  00  =3      BYTE      cmdClass;                     /* The command class */
27901  00  =3      BYTE      cmd;                          /* The command */
27902  00  =3      BYTE      bitMask1;                     /* MSB */
27903  00  =3      BYTE      bitMask2;                     
27904  00  =3      BYTE      bitMask3;                     
27905  00  =3      BYTE      bitMask4;                     /* LSB */
27906  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V10_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 467 

27907  00  =3  
27908  00  =3  /************************************************************/
27909  00  =3  /* Sensor Multilevel Supported Get Scale V10 command class structs */
27910  00  =3  /************************************************************/
27911  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V10_FRAME_
27912  00  =3  {
27913  00  =3      BYTE      cmdClass;                     /* The command class */
27914  00  =3      BYTE      cmd;                          /* The command */
27915  00  =3      BYTE      sensorType;                   /**/
27916  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V10_FRAME;
27917  00  =3  
27918  00  =3  /************************************************************/
27919  00  =3  /* Sensor Multilevel Supported Scale Report V10 command class structs */
27920  00  =3  /************************************************************/
27921  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V10_FRAME_
27922  00  =3  {
27923  00  =3      BYTE      cmdClass;                     /* The command class */
27924  00  =3      BYTE      cmd;                          /* The command */
27925  00  =3      BYTE      sensorType;                   /**/
27926  00  =3      BYTE      properties1;                  /* masked byte */
27927  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V10_FRAME;
27928  00  =3  
27929  00  =3  /************************************************************/
27930  00  =3  /* Sensor Multilevel Get V11 command class structs */       
27931  00  =3  /************************************************************/
27932  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_GET_V11_FRAME_
27933  00  =3  {
27934  00  =3      BYTE      cmdClass;                     /* The command class */
27935  00  =3      BYTE      cmd;                          /* The command */
27936  00  =3      BYTE      sensorType;                   /**/
27937  00  =3      BYTE      properties1;                  /* masked byte */
27938  00  =3  } ZW_SENSOR_MULTILEVEL_GET_V11_FRAME;
27939  00  =3  
27940  00  =3  /************************************************************/
27941  00  =3  /* Sensor Multilevel Report 1byte V11 command class structs */
27942  00  =3  /************************************************************/
27943  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V11_FRAME_
27944  00  =3  {
27945  00  =3      BYTE      cmdClass;                     /* The command class */
27946  00  =3      BYTE      cmd;                          /* The command */
27947  00  =3      BYTE      sensorType;                   /**/
27948  00  =3      BYTE      level;                        /* masked byte */
27949  00  =3      BYTE      sensorValue1;                 
27950  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_1BYTE_V11_FRAME;
27951  00  =3  
27952  00  =3  /************************************************************/
27953  00  =3  /* Sensor Multilevel Report 2byte V11 command class structs */
27954  00  =3  /************************************************************/
27955  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V11_FRAME_
27956  00  =3  {
27957  00  =3      BYTE      cmdClass;                     /* The command class */
27958  00  =3      BYTE      cmd;                          /* The command */
27959  00  =3      BYTE      sensorType;                   /**/
27960  00  =3      BYTE      level;                        /* masked byte */
27961  00  =3      BYTE      sensorValue1;                 /* MSB */
27962  00  =3      BYTE      sensorValue2;                 /* LSB */
27963  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_2BYTE_V11_FRAME;
27964  00  =3  
27965  00  =3  /************************************************************/
27966  00  =3  /* Sensor Multilevel Report 3byte V11 command class structs */
27967  00  =3  /************************************************************/
27968  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V11_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 468 

27969  00  =3  {
27970  00  =3      BYTE      cmdClass;                     /* The command class */
27971  00  =3      BYTE      cmd;                          /* The command */
27972  00  =3      BYTE      sensorType;                   /**/
27973  00  =3      BYTE      level;                        /* masked byte */
27974  00  =3      BYTE      sensorValue1;                 /* MSB */
27975  00  =3      BYTE      sensorValue2;                 
27976  00  =3      BYTE      sensorValue3;                 /* LSB */
27977  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_3BYTE_V11_FRAME;
27978  00  =3  
27979  00  =3  /************************************************************/
27980  00  =3  /* Sensor Multilevel Report 4byte V11 command class structs */
27981  00  =3  /************************************************************/
27982  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V11_FRAME_
27983  00  =3  {
27984  00  =3      BYTE      cmdClass;                     /* The command class */
27985  00  =3      BYTE      cmd;                          /* The command */
27986  00  =3      BYTE      sensorType;                   /**/
27987  00  =3      BYTE      level;                        /* masked byte */
27988  00  =3      BYTE      sensorValue1;                 /* MSB */
27989  00  =3      BYTE      sensorValue2;                 
27990  00  =3      BYTE      sensorValue3;                 
27991  00  =3      BYTE      sensorValue4;                 /* LSB */
27992  00  =3  } ZW_SENSOR_MULTILEVEL_REPORT_4BYTE_V11_FRAME;
27993  00  =3  
27994  00  =3  /************************************************************/
27995  00  =3  /* Sensor Multilevel Supported Get Sensor V11 command class structs */
27996  00  =3  /************************************************************/
27997  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V11_FRAME_
27998  00  =3  {
27999  00  =3      BYTE      cmdClass;                     /* The command class */
28000  00  =3      BYTE      cmd;                          /* The command */
28001  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR_V11_FRAME;
28002  00  =3  
28003  00  =3  /************************************************************/
28004  00  =3  /* Sensor Multilevel Supported Sensor Report 1byte V11 command class structs */
28005  00  =3  /************************************************************/
28006  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V11_FRAME_
28007  00  =3  {
28008  00  =3      BYTE      cmdClass;                     /* The command class */
28009  00  =3      BYTE      cmd;                          /* The command */
28010  00  =3      BYTE      bitMask1;                     
28011  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_1BYTE_V11_FRAME;
28012  00  =3  
28013  00  =3  /************************************************************/
28014  00  =3  /* Sensor Multilevel Supported Sensor Report 2byte V11 command class structs */
28015  00  =3  /************************************************************/
28016  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V11_FRAME_
28017  00  =3  {
28018  00  =3      BYTE      cmdClass;                     /* The command class */
28019  00  =3      BYTE      cmd;                          /* The command */
28020  00  =3      BYTE      bitMask1;                     /* MSB */
28021  00  =3      BYTE      bitMask2;                     /* LSB */
28022  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_2BYTE_V11_FRAME;
28023  00  =3  
28024  00  =3  /************************************************************/
28025  00  =3  /* Sensor Multilevel Supported Sensor Report 3byte V11 command class structs */
28026  00  =3  /************************************************************/
28027  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V11_FRAME_
28028  00  =3  {
28029  00  =3      BYTE      cmdClass;                     /* The command class */
28030  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 469 

28031  00  =3      BYTE      bitMask1;                     /* MSB */
28032  00  =3      BYTE      bitMask2;                     
28033  00  =3      BYTE      bitMask3;                     /* LSB */
28034  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_3BYTE_V11_FRAME;
28035  00  =3  
28036  00  =3  /************************************************************/
28037  00  =3  /* Sensor Multilevel Supported Sensor Report 4byte V11 command class structs */
28038  00  =3  /************************************************************/
28039  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V11_FRAME_
28040  00  =3  {
28041  00  =3      BYTE      cmdClass;                     /* The command class */
28042  00  =3      BYTE      cmd;                          /* The command */
28043  00  =3      BYTE      bitMask1;                     /* MSB */
28044  00  =3      BYTE      bitMask2;                     
28045  00  =3      BYTE      bitMask3;                     
28046  00  =3      BYTE      bitMask4;                     /* LSB */
28047  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT_4BYTE_V11_FRAME;
28048  00  =3  
28049  00  =3  /************************************************************/
28050  00  =3  /* Sensor Multilevel Supported Get Scale V11 command class structs */
28051  00  =3  /************************************************************/
28052  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V11_FRAME_
28053  00  =3  {
28054  00  =3      BYTE      cmdClass;                     /* The command class */
28055  00  =3      BYTE      cmd;                          /* The command */
28056  00  =3      BYTE      sensorType;                   /**/
28057  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE_V11_FRAME;
28058  00  =3  
28059  00  =3  /************************************************************/
28060  00  =3  /* Sensor Multilevel Supported Scale Report V11 command class structs */
28061  00  =3  /************************************************************/
28062  00  =3  typedef struct _ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V11_FRAME_
28063  00  =3  {
28064  00  =3      BYTE      cmdClass;                     /* The command class */
28065  00  =3      BYTE      cmd;                          /* The command */
28066  00  =3      BYTE      sensorType;                   /**/
28067  00  =3      BYTE      properties1;                  /* masked byte */
28068  00  =3  } ZW_SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT_V11_FRAME;
28069  00  =3  
28070  00  =3  /************************************************************/
28071  00  =3  /* Sensor Alarm Set 1byte command class structs */          
28072  00  =3  /************************************************************/
28073  00  =3  typedef struct _ZW_SENSOR_ALARM_SET_1BYTE_FRAME_
28074  00  =3  {
28075  00  =3      BYTE      cmdClass;                     /* The command class */
28076  00  =3      BYTE      cmd;                          /* The command */
28077  00  =3      BYTE      mode;                         /**/
28078  00  =3      BYTE      seconds1;                     /* MSB */
28079  00  =3      BYTE      seconds2;                     /* LSB */
28080  00  =3      BYTE      numberOfBitMasks;             /**/
28081  00  =3      BYTE      bitMask1;                     
28082  00  =3  } ZW_SENSOR_ALARM_SET_1BYTE_FRAME;
28083  00  =3  
28084  00  =3  /************************************************************/
28085  00  =3  /* Sensor Alarm Set 2byte command class structs */          
28086  00  =3  /************************************************************/
28087  00  =3  typedef struct _ZW_SENSOR_ALARM_SET_2BYTE_FRAME_
28088  00  =3  {
28089  00  =3      BYTE      cmdClass;                     /* The command class */
28090  00  =3      BYTE      cmd;                          /* The command */
28091  00  =3      BYTE      mode;                         /**/
28092  00  =3      BYTE      seconds1;                     /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 470 

28093  00  =3      BYTE      seconds2;                     /* LSB */
28094  00  =3      BYTE      numberOfBitMasks;             /**/
28095  00  =3      BYTE      bitMask1;                     /* MSB */
28096  00  =3      BYTE      bitMask2;                     /* LSB */
28097  00  =3  } ZW_SENSOR_ALARM_SET_2BYTE_FRAME;
28098  00  =3  
28099  00  =3  /************************************************************/
28100  00  =3  /* Sensor Alarm Set 3byte command class structs */          
28101  00  =3  /************************************************************/
28102  00  =3  typedef struct _ZW_SENSOR_ALARM_SET_3BYTE_FRAME_
28103  00  =3  {
28104  00  =3      BYTE      cmdClass;                     /* The command class */
28105  00  =3      BYTE      cmd;                          /* The command */
28106  00  =3      BYTE      mode;                         /**/
28107  00  =3      BYTE      seconds1;                     /* MSB */
28108  00  =3      BYTE      seconds2;                     /* LSB */
28109  00  =3      BYTE      numberOfBitMasks;             /**/
28110  00  =3      BYTE      bitMask1;                     /* MSB */
28111  00  =3      BYTE      bitMask2;                     
28112  00  =3      BYTE      bitMask3;                     /* LSB */
28113  00  =3  } ZW_SENSOR_ALARM_SET_3BYTE_FRAME;
28114  00  =3  
28115  00  =3  /************************************************************/
28116  00  =3  /* Sensor Alarm Set 4byte command class structs */          
28117  00  =3  /************************************************************/
28118  00  =3  typedef struct _ZW_SENSOR_ALARM_SET_4BYTE_FRAME_
28119  00  =3  {
28120  00  =3      BYTE      cmdClass;                     /* The command class */
28121  00  =3      BYTE      cmd;                          /* The command */
28122  00  =3      BYTE      mode;                         /**/
28123  00  =3      BYTE      seconds1;                     /* MSB */
28124  00  =3      BYTE      seconds2;                     /* LSB */
28125  00  =3      BYTE      numberOfBitMasks;             /**/
28126  00  =3      BYTE      bitMask1;                     /* MSB */
28127  00  =3      BYTE      bitMask2;                     
28128  00  =3      BYTE      bitMask3;                     
28129  00  =3      BYTE      bitMask4;                     /* LSB */
28130  00  =3  } ZW_SENSOR_ALARM_SET_4BYTE_FRAME;
28131  00  =3  
28132  00  =3  /************************************************************/
28133  00  =3  /* Simple Av Control Get command class structs */           
28134  00  =3  /************************************************************/
28135  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_GET_FRAME_
28136  00  =3  {
28137  00  =3      BYTE      cmdClass;                     /* The command class */
28138  00  =3      BYTE      cmd;                          /* The command */
28139  00  =3  } ZW_SIMPLE_AV_CONTROL_GET_FRAME;
28140  00  =3  
28141  00  =3  /************************************************************/
28142  00  =3  /* Simple Av Control Report command class structs */        
28143  00  =3  /************************************************************/
28144  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_REPORT_FRAME_
28145  00  =3  {
28146  00  =3      BYTE      cmdClass;                     /* The command class */
28147  00  =3      BYTE      cmd;                          /* The command */
28148  00  =3      BYTE      numberOfReports;              /**/
28149  00  =3  } ZW_SIMPLE_AV_CONTROL_REPORT_FRAME;
28150  00  =3  
28151  00  =3  /************************************************************/
28152  00  =3  /* Simple Av Control Set variant group structs */           
28153  00  =3  /************************************************************/
28154  00  =3  typedef struct _VG_SIMPLE_AV_CONTROL_SET_VG_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 471 

28155  00  =3  {
28156  00  =3      BYTE      command1;                     /* MSB */
28157  00  =3      BYTE      command2;                     /* LSB */
28158  00  =3  } VG_SIMPLE_AV_CONTROL_SET_VG;
28159  00  =3  
28160  00  =3  /************************************************************/
28161  00  =3  /* Simple Av Control Set 1byte command class structs */     
28162  00  =3  /************************************************************/
28163  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SET_1BYTE_FRAME_
28164  00  =3  {
28165  00  =3      BYTE      cmdClass;                     /* The command class */
28166  00  =3      BYTE      cmd;                          /* The command */
28167  00  =3      BYTE      sequenceNumber;               /**/
28168  00  =3      BYTE      properties1;                  /* masked byte */
28169  00  =3      BYTE      itemId1;                      /* MSB */
28170  00  =3      BYTE      itemId2;                      /* LSB */
28171  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup1;                /**/
28172  00  =3  } ZW_SIMPLE_AV_CONTROL_SET_1BYTE_FRAME;
28173  00  =3  
28174  00  =3  /************************************************************/
28175  00  =3  /* Simple Av Control Set 2byte command class structs */     
28176  00  =3  /************************************************************/
28177  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SET_2BYTE_FRAME_
28178  00  =3  {
28179  00  =3      BYTE      cmdClass;                     /* The command class */
28180  00  =3      BYTE      cmd;                          /* The command */
28181  00  =3      BYTE      sequenceNumber;               /**/
28182  00  =3      BYTE      properties1;                  /* masked byte */
28183  00  =3      BYTE      itemId1;                      /* MSB */
28184  00  =3      BYTE      itemId2;                      /* LSB */
28185  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup1;                /**/
28186  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup2;                /**/
28187  00  =3  } ZW_SIMPLE_AV_CONTROL_SET_2BYTE_FRAME;
28188  00  =3  
28189  00  =3  /************************************************************/
28190  00  =3  /* Simple Av Control Set 3byte command class structs */     
28191  00  =3  /************************************************************/
28192  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SET_3BYTE_FRAME_
28193  00  =3  {
28194  00  =3      BYTE      cmdClass;                     /* The command class */
28195  00  =3      BYTE      cmd;                          /* The command */
28196  00  =3      BYTE      sequenceNumber;               /**/
28197  00  =3      BYTE      properties1;                  /* masked byte */
28198  00  =3      BYTE      itemId1;                      /* MSB */
28199  00  =3      BYTE      itemId2;                      /* LSB */
28200  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup1;                /**/
28201  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup2;                /**/
28202  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup3;                /**/
28203  00  =3  } ZW_SIMPLE_AV_CONTROL_SET_3BYTE_FRAME;
28204  00  =3  
28205  00  =3  /************************************************************/
28206  00  =3  /* Simple Av Control Set 4byte command class structs */     
28207  00  =3  /************************************************************/
28208  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SET_4BYTE_FRAME_
28209  00  =3  {
28210  00  =3      BYTE      cmdClass;                     /* The command class */
28211  00  =3      BYTE      cmd;                          /* The command */
28212  00  =3      BYTE      sequenceNumber;               /**/
28213  00  =3      BYTE      properties1;                  /* masked byte */
28214  00  =3      BYTE      itemId1;                      /* MSB */
28215  00  =3      BYTE      itemId2;                      /* LSB */
28216  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 472 

28217  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup2;                /**/
28218  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup3;                /**/
28219  00  =3      VG_SIMPLE_AV_CONTROL_SET_VG variantgroup4;                /**/
28220  00  =3  } ZW_SIMPLE_AV_CONTROL_SET_4BYTE_FRAME;
28221  00  =3  
28222  00  =3  /************************************************************/
28223  00  =3  /* Simple Av Control Supported Get command class structs */ 
28224  00  =3  /************************************************************/
28225  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SUPPORTED_GET_FRAME_
28226  00  =3  {
28227  00  =3      BYTE      cmdClass;                     /* The command class */
28228  00  =3      BYTE      cmd;                          /* The command */
28229  00  =3      BYTE      reportNo;                     /**/
28230  00  =3  } ZW_SIMPLE_AV_CONTROL_SUPPORTED_GET_FRAME;
28231  00  =3  
28232  00  =3  /************************************************************/
28233  00  =3  /* Simple Av Control Supported Report 1byte command class structs */
28234  00  =3  /************************************************************/
28235  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_1BYTE_FRAME_
28236  00  =3  {
28237  00  =3      BYTE      cmdClass;                     /* The command class */
28238  00  =3      BYTE      cmd;                          /* The command */
28239  00  =3      BYTE      reportNo;                     /**/
28240  00  =3      BYTE      bitMask1;                     
28241  00  =3  } ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_1BYTE_FRAME;
28242  00  =3  
28243  00  =3  /************************************************************/
28244  00  =3  /* Simple Av Control Supported Report 2byte command class structs */
28245  00  =3  /************************************************************/
28246  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_2BYTE_FRAME_
28247  00  =3  {
28248  00  =3      BYTE      cmdClass;                     /* The command class */
28249  00  =3      BYTE      cmd;                          /* The command */
28250  00  =3      BYTE      reportNo;                     /**/
28251  00  =3      BYTE      bitMask1;                     /* MSB */
28252  00  =3      BYTE      bitMask2;                     /* LSB */
28253  00  =3  } ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_2BYTE_FRAME;
28254  00  =3  
28255  00  =3  /************************************************************/
28256  00  =3  /* Simple Av Control Supported Report 3byte command class structs */
28257  00  =3  /************************************************************/
28258  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_3BYTE_FRAME_
28259  00  =3  {
28260  00  =3      BYTE      cmdClass;                     /* The command class */
28261  00  =3      BYTE      cmd;                          /* The command */
28262  00  =3      BYTE      reportNo;                     /**/
28263  00  =3      BYTE      bitMask1;                     /* MSB */
28264  00  =3      BYTE      bitMask2;                     
28265  00  =3      BYTE      bitMask3;                     /* LSB */
28266  00  =3  } ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_3BYTE_FRAME;
28267  00  =3  
28268  00  =3  /************************************************************/
28269  00  =3  /* Simple Av Control Supported Report 4byte command class structs */
28270  00  =3  /************************************************************/
28271  00  =3  typedef struct _ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_4BYTE_FRAME_
28272  00  =3  {
28273  00  =3      BYTE      cmdClass;                     /* The command class */
28274  00  =3      BYTE      cmd;                          /* The command */
28275  00  =3      BYTE      reportNo;                     /**/
28276  00  =3      BYTE      bitMask1;                     /* MSB */
28277  00  =3      BYTE      bitMask2;                     
28278  00  =3      BYTE      bitMask3;                     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 473 

28279  00  =3      BYTE      bitMask4;                     /* LSB */
28280  00  =3  } ZW_SIMPLE_AV_CONTROL_SUPPORTED_REPORT_4BYTE_FRAME;
28281  00  =3  
28282  00  =3  /************************************************************/
28283  00  =3  /* Switch All Get command class structs */                  
28284  00  =3  /************************************************************/
28285  00  =3  typedef struct _ZW_SWITCH_ALL_GET_FRAME_
28286  00  =3  {
28287  00  =3      BYTE      cmdClass;                     /* The command class */
28288  00  =3      BYTE      cmd;                          /* The command */
28289  00  =3  } ZW_SWITCH_ALL_GET_FRAME;
28290  00  =3  
28291  00  =3  /************************************************************/
28292  00  =3  /* Switch All Off command class structs */                  
28293  00  =3  /************************************************************/
28294  00  =3  typedef struct _ZW_SWITCH_ALL_OFF_FRAME_
28295  00  =3  {
28296  00  =3      BYTE      cmdClass;                     /* The command class */
28297  00  =3      BYTE      cmd;                          /* The command */
28298  00  =3  } ZW_SWITCH_ALL_OFF_FRAME;
28299  00  =3  
28300  00  =3  /************************************************************/
28301  00  =3  /* Switch All On command class structs */                   
28302  00  =3  /************************************************************/
28303  00  =3  typedef struct _ZW_SWITCH_ALL_ON_FRAME_
28304  00  =3  {
28305  00  =3      BYTE      cmdClass;                     /* The command class */
28306  00  =3      BYTE      cmd;                          /* The command */
28307  00  =3  } ZW_SWITCH_ALL_ON_FRAME;
28308  00  =3  
28309  00  =3  /************************************************************/
28310  00  =3  /* Switch All Report command class structs */               
28311  00  =3  /************************************************************/
28312  00  =3  typedef struct _ZW_SWITCH_ALL_REPORT_FRAME_
28313  00  =3  {
28314  00  =3      BYTE      cmdClass;                     /* The command class */
28315  00  =3      BYTE      cmd;                          /* The command */
28316  00  =3      BYTE      mode;                         /**/
28317  00  =3  } ZW_SWITCH_ALL_REPORT_FRAME;
28318  00  =3  
28319  00  =3  /************************************************************/
28320  00  =3  /* Switch All Set command class structs */                  
28321  00  =3  /************************************************************/
28322  00  =3  typedef struct _ZW_SWITCH_ALL_SET_FRAME_
28323  00  =3  {
28324  00  =3      BYTE      cmdClass;                     /* The command class */
28325  00  =3      BYTE      cmd;                          /* The command */
28326  00  =3      BYTE      mode;                         /**/
28327  00  =3  } ZW_SWITCH_ALL_SET_FRAME;
28328  00  =3  
28329  00  =3  /************************************************************/
28330  00  =3  /* Switch Binary Get command class structs */               
28331  00  =3  /************************************************************/
28332  00  =3  typedef struct _ZW_SWITCH_BINARY_GET_FRAME_
28333  00  =3  {
28334  00  =3      BYTE      cmdClass;                     /* The command class */
28335  00  =3      BYTE      cmd;                          /* The command */
28336  00  =3  } ZW_SWITCH_BINARY_GET_FRAME;
28337  00  =3  
28338  00  =3  /************************************************************/
28339  00  =3  /* Switch Binary Report command class structs */            
28340  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 474 

28341  00  =3  typedef struct _ZW_SWITCH_BINARY_REPORT_FRAME_
28342  00  =3  {
28343  00  =3      BYTE      cmdClass;                     /* The command class */
28344  00  =3      BYTE      cmd;                          /* The command */
28345  00  =3      BYTE      value;                        /**/
28346  00  =3  } ZW_SWITCH_BINARY_REPORT_FRAME;
28347  00  =3  
28348  00  =3  /************************************************************/
28349  00  =3  /* Switch Binary Set command class structs */               
28350  00  =3  /************************************************************/
28351  00  =3  typedef struct _ZW_SWITCH_BINARY_SET_FRAME_
28352  00  =3  {
28353  00  =3      BYTE      cmdClass;                     /* The command class */
28354  00  =3      BYTE      cmd;                          /* The command */
28355  00  =3      BYTE      switchValue;                  /**/
28356  00  =3  } ZW_SWITCH_BINARY_SET_FRAME;
28357  00  =3  
28358  00  =3  /************************************************************/
28359  00  =3  /* Switch Binary Get V2 command class structs */            
28360  00  =3  /************************************************************/
28361  00  =3  typedef struct _ZW_SWITCH_BINARY_GET_V2_FRAME_
28362  00  =3  {
28363  00  =3      BYTE      cmdClass;                     /* The command class */
28364  00  =3      BYTE      cmd;                          /* The command */
28365  00  =3  } ZW_SWITCH_BINARY_GET_V2_FRAME;
28366  00  =3  
28367  00  =3  /************************************************************/
28368  00  =3  /* Switch Binary Report V2 command class structs */         
28369  00  =3  /************************************************************/
28370  00  =3  typedef struct _ZW_SWITCH_BINARY_REPORT_V2_FRAME_
28371  00  =3  {
28372  00  =3      BYTE      cmdClass;                     /* The command class */
28373  00  =3      BYTE      cmd;                          /* The command */
28374  00  =3      BYTE      currentValue;                 /**/
28375  00  =3      BYTE      targetValue;                  /**/
28376  00  =3      BYTE      duration;                     /**/
28377  00  =3  } ZW_SWITCH_BINARY_REPORT_V2_FRAME;
28378  00  =3  
28379  00  =3  /************************************************************/
28380  00  =3  /* Switch Binary Set V2 command class structs */            
28381  00  =3  /************************************************************/
28382  00  =3  typedef struct _ZW_SWITCH_BINARY_SET_V2_FRAME_
28383  00  =3  {
28384  00  =3      BYTE      cmdClass;                     /* The command class */
28385  00  =3      BYTE      cmd;                          /* The command */
28386  00  =3      BYTE      targetValue;                  /**/
28387  00  =3      BYTE      duration;                     /**/
28388  00  =3  } ZW_SWITCH_BINARY_SET_V2_FRAME;
28389  00  =3  
28390  00  =3  /************************************************************/
28391  00  =3  /* Switch Multilevel Get command class structs */           
28392  00  =3  /************************************************************/
28393  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_GET_FRAME_
28394  00  =3  {
28395  00  =3      BYTE      cmdClass;                     /* The command class */
28396  00  =3      BYTE      cmd;                          /* The command */
28397  00  =3  } ZW_SWITCH_MULTILEVEL_GET_FRAME;
28398  00  =3  
28399  00  =3  /************************************************************/
28400  00  =3  /* Switch Multilevel Report command class structs */        
28401  00  =3  /************************************************************/
28402  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_REPORT_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 475 

28403  00  =3  {
28404  00  =3      BYTE      cmdClass;                     /* The command class */
28405  00  =3      BYTE      cmd;                          /* The command */
28406  00  =3      BYTE      value;                        /**/
28407  00  =3  } ZW_SWITCH_MULTILEVEL_REPORT_FRAME;
28408  00  =3  
28409  00  =3  /************************************************************/
28410  00  =3  /* Switch Multilevel Set command class structs */           
28411  00  =3  /************************************************************/
28412  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SET_FRAME_
28413  00  =3  {
28414  00  =3      BYTE      cmdClass;                     /* The command class */
28415  00  =3      BYTE      cmd;                          /* The command */
28416  00  =3      BYTE      value;                        /**/
28417  00  =3  } ZW_SWITCH_MULTILEVEL_SET_FRAME;
28418  00  =3  
28419  00  =3  /************************************************************/
28420  00  =3  /* Switch Multilevel Start Level Change command class structs */
28421  00  =3  /************************************************************/
28422  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_FRAME_
28423  00  =3  {
28424  00  =3      BYTE      cmdClass;                     /* The command class */
28425  00  =3      BYTE      cmd;                          /* The command */
28426  00  =3      BYTE      level;                        /* masked byte */
28427  00  =3      BYTE      startLevel;                   /**/
28428  00  =3  } ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_FRAME;
28429  00  =3  
28430  00  =3  /************************************************************/
28431  00  =3  /* Switch Multilevel Stop Level Change command class structs */
28432  00  =3  /************************************************************/
28433  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_FRAME_
28434  00  =3  {
28435  00  =3      BYTE      cmdClass;                     /* The command class */
28436  00  =3      BYTE      cmd;                          /* The command */
28437  00  =3  } ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_FRAME;
28438  00  =3  
28439  00  =3  /************************************************************/
28440  00  =3  /* Switch Multilevel Get V2 command class structs */        
28441  00  =3  /************************************************************/
28442  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_GET_V2_FRAME_
28443  00  =3  {
28444  00  =3      BYTE      cmdClass;                     /* The command class */
28445  00  =3      BYTE      cmd;                          /* The command */
28446  00  =3  } ZW_SWITCH_MULTILEVEL_GET_V2_FRAME;
28447  00  =3  
28448  00  =3  /************************************************************/
28449  00  =3  /* Switch Multilevel Report V2 command class structs */     
28450  00  =3  /************************************************************/
28451  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_REPORT_V2_FRAME_
28452  00  =3  {
28453  00  =3      BYTE      cmdClass;                     /* The command class */
28454  00  =3      BYTE      cmd;                          /* The command */
28455  00  =3      BYTE      value;                        /**/
28456  00  =3  } ZW_SWITCH_MULTILEVEL_REPORT_V2_FRAME;
28457  00  =3  
28458  00  =3  /************************************************************/
28459  00  =3  /* Switch Multilevel Set V2 command class structs */        
28460  00  =3  /************************************************************/
28461  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SET_V2_FRAME_
28462  00  =3  {
28463  00  =3      BYTE      cmdClass;                     /* The command class */
28464  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 476 

28465  00  =3      BYTE      value;                        /**/
28466  00  =3      BYTE      dimmingDuration;              /**/
28467  00  =3  } ZW_SWITCH_MULTILEVEL_SET_V2_FRAME;
28468  00  =3  
28469  00  =3  /************************************************************/
28470  00  =3  /* Switch Multilevel Start Level Change V2 command class structs */
28471  00  =3  /************************************************************/
28472  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V2_FRAME_
28473  00  =3  {
28474  00  =3      BYTE      cmdClass;                     /* The command class */
28475  00  =3      BYTE      cmd;                          /* The command */
28476  00  =3      BYTE      properties1;                  /* masked byte */
28477  00  =3      BYTE      startLevel;                   /**/
28478  00  =3      BYTE      dimmingDuration;              /**/
28479  00  =3  } ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V2_FRAME;
28480  00  =3  
28481  00  =3  /************************************************************/
28482  00  =3  /* Switch Multilevel Stop Level Change V2 command class structs */
28483  00  =3  /************************************************************/
28484  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V2_FRAME_
28485  00  =3  {
28486  00  =3      BYTE      cmdClass;                     /* The command class */
28487  00  =3      BYTE      cmd;                          /* The command */
28488  00  =3  } ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V2_FRAME;
28489  00  =3  
28490  00  =3  /************************************************************/
28491  00  =3  /* Switch Multilevel Get V3 command class structs */        
28492  00  =3  /************************************************************/
28493  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_GET_V3_FRAME_
28494  00  =3  {
28495  00  =3      BYTE      cmdClass;                     /* The command class */
28496  00  =3      BYTE      cmd;                          /* The command */
28497  00  =3  } ZW_SWITCH_MULTILEVEL_GET_V3_FRAME;
28498  00  =3  
28499  00  =3  /************************************************************/
28500  00  =3  /* Switch Multilevel Report V3 command class structs */     
28501  00  =3  /************************************************************/
28502  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_REPORT_V3_FRAME_
28503  00  =3  {
28504  00  =3      BYTE      cmdClass;                     /* The command class */
28505  00  =3      BYTE      cmd;                          /* The command */
28506  00  =3      BYTE      value;                        /**/
28507  00  =3  } ZW_SWITCH_MULTILEVEL_REPORT_V3_FRAME;
28508  00  =3  
28509  00  =3  /************************************************************/
28510  00  =3  /* Switch Multilevel Set V3 command class structs */        
28511  00  =3  /************************************************************/
28512  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SET_V3_FRAME_
28513  00  =3  {
28514  00  =3      BYTE      cmdClass;                     /* The command class */
28515  00  =3      BYTE      cmd;                          /* The command */
28516  00  =3      BYTE      value;                        /**/
28517  00  =3      BYTE      dimmingDuration;              /**/
28518  00  =3  } ZW_SWITCH_MULTILEVEL_SET_V3_FRAME;
28519  00  =3  
28520  00  =3  /************************************************************/
28521  00  =3  /* Switch Multilevel Start Level Change V3 command class structs */
28522  00  =3  /************************************************************/
28523  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V3_FRAME_
28524  00  =3  {
28525  00  =3      BYTE      cmdClass;                     /* The command class */
28526  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 477 

28527  00  =3      BYTE      properties1;                  /* masked byte */
28528  00  =3      BYTE      startLevel;                   /**/
28529  00  =3      BYTE      dimmingDuration;              /**/
28530  00  =3      BYTE      stepSize;                     /**/
28531  00  =3  } ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V3_FRAME;
28532  00  =3  
28533  00  =3  /************************************************************/
28534  00  =3  /* Switch Multilevel Stop Level Change V3 command class structs */
28535  00  =3  /************************************************************/
28536  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V3_FRAME_
28537  00  =3  {
28538  00  =3      BYTE      cmdClass;                     /* The command class */
28539  00  =3      BYTE      cmd;                          /* The command */
28540  00  =3  } ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V3_FRAME;
28541  00  =3  
28542  00  =3  /************************************************************/
28543  00  =3  /* Switch Multilevel Supported Get V3 command class structs */
28544  00  =3  /************************************************************/
28545  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SUPPORTED_GET_V3_FRAME_
28546  00  =3  {
28547  00  =3      BYTE      cmdClass;                     /* The command class */
28548  00  =3      BYTE      cmd;                          /* The command */
28549  00  =3  } ZW_SWITCH_MULTILEVEL_SUPPORTED_GET_V3_FRAME;
28550  00  =3  
28551  00  =3  /************************************************************/
28552  00  =3  /* Switch Multilevel Supported Report V3 command class structs */
28553  00  =3  /************************************************************/
28554  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SUPPORTED_REPORT_V3_FRAME_
28555  00  =3  {
28556  00  =3      BYTE      cmdClass;                     /* The command class */
28557  00  =3      BYTE      cmd;                          /* The command */
28558  00  =3      BYTE      properties1;                  /* masked byte */
28559  00  =3      BYTE      properties2;                  /* masked byte */
28560  00  =3  } ZW_SWITCH_MULTILEVEL_SUPPORTED_REPORT_V3_FRAME;
28561  00  =3  
28562  00  =3  /************************************************************/
28563  00  =3  /* Switch Multilevel Get V4 command class structs */        
28564  00  =3  /************************************************************/
28565  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_GET_V4_FRAME_
28566  00  =3  {
28567  00  =3      BYTE      cmdClass;                     /* The command class */
28568  00  =3      BYTE      cmd;                          /* The command */
28569  00  =3  } ZW_SWITCH_MULTILEVEL_GET_V4_FRAME;
28570  00  =3  
28571  00  =3  /************************************************************/
28572  00  =3  /* Switch Multilevel Report V4 command class structs */     
28573  00  =3  /************************************************************/
28574  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_REPORT_V4_FRAME_
28575  00  =3  {
28576  00  =3      BYTE      cmdClass;                     /* The command class */
28577  00  =3      BYTE      cmd;                          /* The command */
28578  00  =3      BYTE      currentValue;                 /**/
28579  00  =3      BYTE      targetValue;                  /**/
28580  00  =3      BYTE      duration;                     /**/
28581  00  =3  } ZW_SWITCH_MULTILEVEL_REPORT_V4_FRAME;
28582  00  =3  
28583  00  =3  /************************************************************/
28584  00  =3  /* Switch Multilevel Set V4 command class structs */        
28585  00  =3  /************************************************************/
28586  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SET_V4_FRAME_
28587  00  =3  {
28588  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 478 

28589  00  =3      BYTE      cmd;                          /* The command */
28590  00  =3      BYTE      value;                        /**/
28591  00  =3      BYTE      dimmingDuration;              /**/
28592  00  =3  } ZW_SWITCH_MULTILEVEL_SET_V4_FRAME;
28593  00  =3  
28594  00  =3  /************************************************************/
28595  00  =3  /* Switch Multilevel Start Level Change V4 command class structs */
28596  00  =3  /************************************************************/
28597  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V4_FRAME_
28598  00  =3  {
28599  00  =3      BYTE      cmdClass;                     /* The command class */
28600  00  =3      BYTE      cmd;                          /* The command */
28601  00  =3      BYTE      properties1;                  /* masked byte */
28602  00  =3      BYTE      startLevel;                   /**/
28603  00  =3      BYTE      dimmingDuration;              /**/
28604  00  =3      BYTE      stepSize;                     /**/
28605  00  =3  } ZW_SWITCH_MULTILEVEL_START_LEVEL_CHANGE_V4_FRAME;
28606  00  =3  
28607  00  =3  /************************************************************/
28608  00  =3  /* Switch Multilevel Stop Level Change V4 command class structs */
28609  00  =3  /************************************************************/
28610  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V4_FRAME_
28611  00  =3  {
28612  00  =3      BYTE      cmdClass;                     /* The command class */
28613  00  =3      BYTE      cmd;                          /* The command */
28614  00  =3  } ZW_SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE_V4_FRAME;
28615  00  =3  
28616  00  =3  /************************************************************/
28617  00  =3  /* Switch Multilevel Supported Get V4 command class structs */
28618  00  =3  /************************************************************/
28619  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SUPPORTED_GET_V4_FRAME_
28620  00  =3  {
28621  00  =3      BYTE      cmdClass;                     /* The command class */
28622  00  =3      BYTE      cmd;                          /* The command */
28623  00  =3  } ZW_SWITCH_MULTILEVEL_SUPPORTED_GET_V4_FRAME;
28624  00  =3  
28625  00  =3  /************************************************************/
28626  00  =3  /* Switch Multilevel Supported Report V4 command class structs */
28627  00  =3  /************************************************************/
28628  00  =3  typedef struct _ZW_SWITCH_MULTILEVEL_SUPPORTED_REPORT_V4_FRAME_
28629  00  =3  {
28630  00  =3      BYTE      cmdClass;                     /* The command class */
28631  00  =3      BYTE      cmd;                          /* The command */
28632  00  =3      BYTE      properties1;                  /* masked byte */
28633  00  =3      BYTE      properties2;                  /* masked byte */
28634  00  =3  } ZW_SWITCH_MULTILEVEL_SUPPORTED_REPORT_V4_FRAME;
28635  00  =3  
28636  00  =3  /************************************************************/
28637  00  =3  /* Switch Toggle Binary Set command class structs */        
28638  00  =3  /************************************************************/
28639  00  =3  typedef struct _ZW_SWITCH_TOGGLE_BINARY_SET_FRAME_
28640  00  =3  {
28641  00  =3      BYTE      cmdClass;                     /* The command class */
28642  00  =3      BYTE      cmd;                          /* The command */
28643  00  =3  } ZW_SWITCH_TOGGLE_BINARY_SET_FRAME;
28644  00  =3  
28645  00  =3  /************************************************************/
28646  00  =3  /* Switch Toggle Binary Get command class structs */        
28647  00  =3  /************************************************************/
28648  00  =3  typedef struct _ZW_SWITCH_TOGGLE_BINARY_GET_FRAME_
28649  00  =3  {
28650  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 479 

28651  00  =3      BYTE      cmd;                          /* The command */
28652  00  =3  } ZW_SWITCH_TOGGLE_BINARY_GET_FRAME;
28653  00  =3  
28654  00  =3  /************************************************************/
28655  00  =3  /* Switch Toggle Binary Report command class structs */     
28656  00  =3  /************************************************************/
28657  00  =3  typedef struct _ZW_SWITCH_TOGGLE_BINARY_REPORT_FRAME_
28658  00  =3  {
28659  00  =3      BYTE      cmdClass;                     /* The command class */
28660  00  =3      BYTE      cmd;                          /* The command */
28661  00  =3      BYTE      value;                        /**/
28662  00  =3  } ZW_SWITCH_TOGGLE_BINARY_REPORT_FRAME;
28663  00  =3  
28664  00  =3  /************************************************************/
28665  00  =3  /* Switch Toggle Multilevel Set command class structs */    
28666  00  =3  /************************************************************/
28667  00  =3  typedef struct _ZW_SWITCH_TOGGLE_MULTILEVEL_SET_FRAME_
28668  00  =3  {
28669  00  =3      BYTE      cmdClass;                     /* The command class */
28670  00  =3      BYTE      cmd;                          /* The command */
28671  00  =3  } ZW_SWITCH_TOGGLE_MULTILEVEL_SET_FRAME;
28672  00  =3  
28673  00  =3  /************************************************************/
28674  00  =3  /* Switch Toggle Multilevel Get command class structs */    
28675  00  =3  /************************************************************/
28676  00  =3  typedef struct _ZW_SWITCH_TOGGLE_MULTILEVEL_GET_FRAME_
28677  00  =3  {
28678  00  =3      BYTE      cmdClass;                     /* The command class */
28679  00  =3      BYTE      cmd;                          /* The command */
28680  00  =3  } ZW_SWITCH_TOGGLE_MULTILEVEL_GET_FRAME;
28681  00  =3  
28682  00  =3  /************************************************************/
28683  00  =3  /* Switch Toggle Multilevel Report command class structs */ 
28684  00  =3  /************************************************************/
28685  00  =3  typedef struct _ZW_SWITCH_TOGGLE_MULTILEVEL_REPORT_FRAME_
28686  00  =3  {
28687  00  =3      BYTE      cmdClass;                     /* The command class */
28688  00  =3      BYTE      cmd;                          /* The command */
28689  00  =3      BYTE      value;                        /**/
28690  00  =3  } ZW_SWITCH_TOGGLE_MULTILEVEL_REPORT_FRAME;
28691  00  =3  
28692  00  =3  /************************************************************/
28693  00  =3  /* Switch Toggle Multilevel Start Level Change command class structs */
28694  00  =3  /************************************************************/
28695  00  =3  typedef struct _ZW_SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE_FRAME_
28696  00  =3  {
28697  00  =3      BYTE      cmdClass;                     /* The command class */
28698  00  =3      BYTE      cmd;                          /* The command */
28699  00  =3      BYTE      level;                        /* masked byte */
28700  00  =3      BYTE      startLevel;                   /**/
28701  00  =3  } ZW_SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE_FRAME;
28702  00  =3  
28703  00  =3  /************************************************************/
28704  00  =3  /* Switch Toggle Multilevel Stop Level Change command class structs */
28705  00  =3  /************************************************************/
28706  00  =3  typedef struct _ZW_SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE_FRAME_
28707  00  =3  {
28708  00  =3      BYTE      cmdClass;                     /* The command class */
28709  00  =3      BYTE      cmd;                          /* The command */
28710  00  =3  } ZW_SWITCH_TOGGLE_MULTILEVEL_STOP_LEVEL_CHANGE_FRAME;
28711  00  =3  
28712  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 480 

28713  00  =3  /* Tariff Tbl Remove 1byte command class structs */         
28714  00  =3  /************************************************************/
28715  00  =3  typedef struct _ZW_TARIFF_TBL_REMOVE_1BYTE_FRAME_
28716  00  =3  {
28717  00  =3      BYTE      cmdClass;                     /* The command class */
28718  00  =3      BYTE      cmd;                          /* The command */
28719  00  =3      BYTE      properties1;                  /* masked byte */
28720  00  =3      BYTE      rateParameterSetId1;          
28721  00  =3  } ZW_TARIFF_TBL_REMOVE_1BYTE_FRAME;
28722  00  =3  
28723  00  =3  /************************************************************/
28724  00  =3  /* Tariff Tbl Remove 2byte command class structs */         
28725  00  =3  /************************************************************/
28726  00  =3  typedef struct _ZW_TARIFF_TBL_REMOVE_2BYTE_FRAME_
28727  00  =3  {
28728  00  =3      BYTE      cmdClass;                     /* The command class */
28729  00  =3      BYTE      cmd;                          /* The command */
28730  00  =3      BYTE      properties1;                  /* masked byte */
28731  00  =3      BYTE      rateParameterSetId1;          /* MSB */
28732  00  =3      BYTE      rateParameterSetId2;          /* LSB */
28733  00  =3  } ZW_TARIFF_TBL_REMOVE_2BYTE_FRAME;
28734  00  =3  
28735  00  =3  /************************************************************/
28736  00  =3  /* Tariff Tbl Remove 3byte command class structs */         
28737  00  =3  /************************************************************/
28738  00  =3  typedef struct _ZW_TARIFF_TBL_REMOVE_3BYTE_FRAME_
28739  00  =3  {
28740  00  =3      BYTE      cmdClass;                     /* The command class */
28741  00  =3      BYTE      cmd;                          /* The command */
28742  00  =3      BYTE      properties1;                  /* masked byte */
28743  00  =3      BYTE      rateParameterSetId1;          /* MSB */
28744  00  =3      BYTE      rateParameterSetId2;          
28745  00  =3      BYTE      rateParameterSetId3;          /* LSB */
28746  00  =3  } ZW_TARIFF_TBL_REMOVE_3BYTE_FRAME;
28747  00  =3  
28748  00  =3  /************************************************************/
28749  00  =3  /* Tariff Tbl Remove 4byte command class structs */         
28750  00  =3  /************************************************************/
28751  00  =3  typedef struct _ZW_TARIFF_TBL_REMOVE_4BYTE_FRAME_
28752  00  =3  {
28753  00  =3      BYTE      cmdClass;                     /* The command class */
28754  00  =3      BYTE      cmd;                          /* The command */
28755  00  =3      BYTE      properties1;                  /* masked byte */
28756  00  =3      BYTE      rateParameterSetId1;          /* MSB */
28757  00  =3      BYTE      rateParameterSetId2;          
28758  00  =3      BYTE      rateParameterSetId3;          
28759  00  =3      BYTE      rateParameterSetId4;          /* LSB */
28760  00  =3  } ZW_TARIFF_TBL_REMOVE_4BYTE_FRAME;
28761  00  =3  
28762  00  =3  /************************************************************/
28763  00  =3  /* Tariff Tbl Set command class structs */                  
28764  00  =3  /************************************************************/
28765  00  =3  typedef struct _ZW_TARIFF_TBL_SET_FRAME_
28766  00  =3  {
28767  00  =3      BYTE      cmdClass;                     /* The command class */
28768  00  =3      BYTE      cmd;                          /* The command */
28769  00  =3      BYTE      rateParameterSetId;           /**/
28770  00  =3      BYTE      properties1;                  /* masked byte */
28771  00  =3      BYTE      tariffValue1;                 /* MSB */
28772  00  =3      BYTE      tariffValue2;                 
28773  00  =3      BYTE      tariffValue3;                 
28774  00  =3      BYTE      tariffValue4;                 /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 481 

28775  00  =3  } ZW_TARIFF_TBL_SET_FRAME;
28776  00  =3  
28777  00  =3  /************************************************************/
28778  00  =3  /* Tariff Tbl Supplier Set 1byte command class structs */   
28779  00  =3  /************************************************************/
28780  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_SET_1BYTE_FRAME_
28781  00  =3  {
28782  00  =3      BYTE      cmdClass;                     /* The command class */
28783  00  =3      BYTE      cmd;                          /* The command */
28784  00  =3      BYTE      year1;                        /* MSB */
28785  00  =3      BYTE      year2;                        /* LSB */
28786  00  =3      BYTE      month;                        /**/
28787  00  =3      BYTE      day;                          /**/
28788  00  =3      BYTE      hourLocalTime;                /**/
28789  00  =3      BYTE      minuteLocalTime;              /**/
28790  00  =3      BYTE      secondLocalTime;              /**/
28791  00  =3      BYTE      currency1;                    /* MSB */
28792  00  =3      BYTE      currency2;                    
28793  00  =3      BYTE      currency3;                    /* LSB */
28794  00  =3      BYTE      properties1;                  /* masked byte */
28795  00  =3      BYTE      standingChargeValue1;         /* MSB */
28796  00  =3      BYTE      standingChargeValue2;         
28797  00  =3      BYTE      standingChargeValue3;         
28798  00  =3      BYTE      standingChargeValue4;         /* LSB */
28799  00  =3      BYTE      properties2;                  /* masked byte */
28800  00  =3      BYTE      supplierCharacter1;           
28801  00  =3  } ZW_TARIFF_TBL_SUPPLIER_SET_1BYTE_FRAME;
28802  00  =3  
28803  00  =3  /************************************************************/
28804  00  =3  /* Tariff Tbl Supplier Set 2byte command class structs */   
28805  00  =3  /************************************************************/
28806  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_SET_2BYTE_FRAME_
28807  00  =3  {
28808  00  =3      BYTE      cmdClass;                     /* The command class */
28809  00  =3      BYTE      cmd;                          /* The command */
28810  00  =3      BYTE      year1;                        /* MSB */
28811  00  =3      BYTE      year2;                        /* LSB */
28812  00  =3      BYTE      month;                        /**/
28813  00  =3      BYTE      day;                          /**/
28814  00  =3      BYTE      hourLocalTime;                /**/
28815  00  =3      BYTE      minuteLocalTime;              /**/
28816  00  =3      BYTE      secondLocalTime;              /**/
28817  00  =3      BYTE      currency1;                    /* MSB */
28818  00  =3      BYTE      currency2;                    
28819  00  =3      BYTE      currency3;                    /* LSB */
28820  00  =3      BYTE      properties1;                  /* masked byte */
28821  00  =3      BYTE      standingChargeValue1;         /* MSB */
28822  00  =3      BYTE      standingChargeValue2;         
28823  00  =3      BYTE      standingChargeValue3;         
28824  00  =3      BYTE      standingChargeValue4;         /* LSB */
28825  00  =3      BYTE      properties2;                  /* masked byte */
28826  00  =3      BYTE      supplierCharacter1;           /* MSB */
28827  00  =3      BYTE      supplierCharacter2;           /* LSB */
28828  00  =3  } ZW_TARIFF_TBL_SUPPLIER_SET_2BYTE_FRAME;
28829  00  =3  
28830  00  =3  /************************************************************/
28831  00  =3  /* Tariff Tbl Supplier Set 3byte command class structs */   
28832  00  =3  /************************************************************/
28833  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_SET_3BYTE_FRAME_
28834  00  =3  {
28835  00  =3      BYTE      cmdClass;                     /* The command class */
28836  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 482 

28837  00  =3      BYTE      year1;                        /* MSB */
28838  00  =3      BYTE      year2;                        /* LSB */
28839  00  =3      BYTE      month;                        /**/
28840  00  =3      BYTE      day;                          /**/
28841  00  =3      BYTE      hourLocalTime;                /**/
28842  00  =3      BYTE      minuteLocalTime;              /**/
28843  00  =3      BYTE      secondLocalTime;              /**/
28844  00  =3      BYTE      currency1;                    /* MSB */
28845  00  =3      BYTE      currency2;                    
28846  00  =3      BYTE      currency3;                    /* LSB */
28847  00  =3      BYTE      properties1;                  /* masked byte */
28848  00  =3      BYTE      standingChargeValue1;         /* MSB */
28849  00  =3      BYTE      standingChargeValue2;         
28850  00  =3      BYTE      standingChargeValue3;         
28851  00  =3      BYTE      standingChargeValue4;         /* LSB */
28852  00  =3      BYTE      properties2;                  /* masked byte */
28853  00  =3      BYTE      supplierCharacter1;           /* MSB */
28854  00  =3      BYTE      supplierCharacter2;           
28855  00  =3      BYTE      supplierCharacter3;           /* LSB */
28856  00  =3  } ZW_TARIFF_TBL_SUPPLIER_SET_3BYTE_FRAME;
28857  00  =3  
28858  00  =3  /************************************************************/
28859  00  =3  /* Tariff Tbl Supplier Set 4byte command class structs */   
28860  00  =3  /************************************************************/
28861  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_SET_4BYTE_FRAME_
28862  00  =3  {
28863  00  =3      BYTE      cmdClass;                     /* The command class */
28864  00  =3      BYTE      cmd;                          /* The command */
28865  00  =3      BYTE      year1;                        /* MSB */
28866  00  =3      BYTE      year2;                        /* LSB */
28867  00  =3      BYTE      month;                        /**/
28868  00  =3      BYTE      day;                          /**/
28869  00  =3      BYTE      hourLocalTime;                /**/
28870  00  =3      BYTE      minuteLocalTime;              /**/
28871  00  =3      BYTE      secondLocalTime;              /**/
28872  00  =3      BYTE      currency1;                    /* MSB */
28873  00  =3      BYTE      currency2;                    
28874  00  =3      BYTE      currency3;                    /* LSB */
28875  00  =3      BYTE      properties1;                  /* masked byte */
28876  00  =3      BYTE      standingChargeValue1;         /* MSB */
28877  00  =3      BYTE      standingChargeValue2;         
28878  00  =3      BYTE      standingChargeValue3;         
28879  00  =3      BYTE      standingChargeValue4;         /* LSB */
28880  00  =3      BYTE      properties2;                  /* masked byte */
28881  00  =3      BYTE      supplierCharacter1;           /* MSB */
28882  00  =3      BYTE      supplierCharacter2;           
28883  00  =3      BYTE      supplierCharacter3;           
28884  00  =3      BYTE      supplierCharacter4;           /* LSB */
28885  00  =3  } ZW_TARIFF_TBL_SUPPLIER_SET_4BYTE_FRAME;
28886  00  =3  
28887  00  =3  /************************************************************/
28888  00  =3  /* Tariff Tbl Cost Get command class structs */             
28889  00  =3  /************************************************************/
28890  00  =3  typedef struct _ZW_TARIFF_TBL_COST_GET_FRAME_
28891  00  =3  {
28892  00  =3      BYTE      cmdClass;                     /* The command class */
28893  00  =3      BYTE      cmd;                          /* The command */
28894  00  =3      BYTE      rateParameterSetId;           /**/
28895  00  =3      BYTE      startYear1;                   /* MSB */
28896  00  =3      BYTE      startYear2;                   /* LSB */
28897  00  =3      BYTE      startMonth;                   /**/
28898  00  =3      BYTE      startDay;                     /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 483 

28899  00  =3      BYTE      startHourLocalTime;           /**/
28900  00  =3      BYTE      startMinuteLocalTime;         /**/
28901  00  =3      BYTE      stopYear1;                    /* MSB */
28902  00  =3      BYTE      stopYear2;                    /* LSB */
28903  00  =3      BYTE      stopMonth;                    /**/
28904  00  =3      BYTE      stopDay;                      /**/
28905  00  =3      BYTE      stopHourLocalTime;            /**/
28906  00  =3      BYTE      stopMinuteLocalTime;          /**/
28907  00  =3  } ZW_TARIFF_TBL_COST_GET_FRAME;
28908  00  =3  
28909  00  =3  /************************************************************/
28910  00  =3  /* Tariff Tbl Cost Report command class structs */          
28911  00  =3  /************************************************************/
28912  00  =3  typedef struct _ZW_TARIFF_TBL_COST_REPORT_FRAME_
28913  00  =3  {
28914  00  =3      BYTE      cmdClass;                     /* The command class */
28915  00  =3      BYTE      cmd;                          /* The command */
28916  00  =3      BYTE      rateParameterSetId;           /**/
28917  00  =3      BYTE      properties1;                  /* masked byte */
28918  00  =3      BYTE      startYear1;                   /* MSB */
28919  00  =3      BYTE      startYear2;                   /* LSB */
28920  00  =3      BYTE      startMonth;                   /**/
28921  00  =3      BYTE      startDay;                     /**/
28922  00  =3      BYTE      startHourLocalTime;           /**/
28923  00  =3      BYTE      startMinuteLocalTime;         /**/
28924  00  =3      BYTE      stopYear1;                    /* MSB */
28925  00  =3      BYTE      stopYear2;                    /* LSB */
28926  00  =3      BYTE      stopMonth;                    /**/
28927  00  =3      BYTE      stopDay;                      /**/
28928  00  =3      BYTE      stopHourLocalTime;            /**/
28929  00  =3      BYTE      stopMinuteLocalTime;          /**/
28930  00  =3      BYTE      currency1;                    /* MSB */
28931  00  =3      BYTE      currency2;                    
28932  00  =3      BYTE      currency3;                    /* LSB */
28933  00  =3      BYTE      properties2;                  /* masked byte */
28934  00  =3      BYTE      costValue1;                   /* MSB */
28935  00  =3      BYTE      costValue2;                   
28936  00  =3      BYTE      costValue3;                   
28937  00  =3      BYTE      costValue4;                   /* LSB */
28938  00  =3  } ZW_TARIFF_TBL_COST_REPORT_FRAME;
28939  00  =3  
28940  00  =3  /************************************************************/
28941  00  =3  /* Tariff Tbl Get command class structs */                  
28942  00  =3  /************************************************************/
28943  00  =3  typedef struct _ZW_TARIFF_TBL_GET_FRAME_
28944  00  =3  {
28945  00  =3      BYTE      cmdClass;                     /* The command class */
28946  00  =3      BYTE      cmd;                          /* The command */
28947  00  =3      BYTE      rateParameterSetId;           /**/
28948  00  =3  } ZW_TARIFF_TBL_GET_FRAME;
28949  00  =3  
28950  00  =3  /************************************************************/
28951  00  =3  /* Tariff Tbl Report command class structs */               
28952  00  =3  /************************************************************/
28953  00  =3  typedef struct _ZW_TARIFF_TBL_REPORT_FRAME_
28954  00  =3  {
28955  00  =3      BYTE      cmdClass;                     /* The command class */
28956  00  =3      BYTE      cmd;                          /* The command */
28957  00  =3      BYTE      rateParameterSetId;           /**/
28958  00  =3      BYTE      properties1;                  /* masked byte */
28959  00  =3      BYTE      tariffValue1;                 /* MSB */
28960  00  =3      BYTE      tariffValue2;                 
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 484 

28961  00  =3      BYTE      tariffValue3;                 
28962  00  =3      BYTE      tariffValue4;                 /* LSB */
28963  00  =3  } ZW_TARIFF_TBL_REPORT_FRAME;
28964  00  =3  
28965  00  =3  /************************************************************/
28966  00  =3  /* Tariff Tbl Supplier Get command class structs */         
28967  00  =3  /************************************************************/
28968  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_GET_FRAME_
28969  00  =3  {
28970  00  =3      BYTE      cmdClass;                     /* The command class */
28971  00  =3      BYTE      cmd;                          /* The command */
28972  00  =3  } ZW_TARIFF_TBL_SUPPLIER_GET_FRAME;
28973  00  =3  
28974  00  =3  /************************************************************/
28975  00  =3  /* Tariff Tbl Supplier Report 1byte command class structs */
28976  00  =3  /************************************************************/
28977  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_REPORT_1BYTE_FRAME_
28978  00  =3  {
28979  00  =3      BYTE      cmdClass;                     /* The command class */
28980  00  =3      BYTE      cmd;                          /* The command */
28981  00  =3      BYTE      year1;                        /* MSB */
28982  00  =3      BYTE      year2;                        /* LSB */
28983  00  =3      BYTE      month;                        /**/
28984  00  =3      BYTE      day;                          /**/
28985  00  =3      BYTE      hourLocalTime;                /**/
28986  00  =3      BYTE      minuteLocalTime;              /**/
28987  00  =3      BYTE      secondLocalTime;              /**/
28988  00  =3      BYTE      currency1;                    /* MSB */
28989  00  =3      BYTE      currency2;                    
28990  00  =3      BYTE      currency3;                    /* LSB */
28991  00  =3      BYTE      properties1;                  /* masked byte */
28992  00  =3      BYTE      standingChargeValue1;         /* MSB */
28993  00  =3      BYTE      standingChargeValue2;         
28994  00  =3      BYTE      standingChargeValue3;         
28995  00  =3      BYTE      standingChargeValue4;         /* LSB */
28996  00  =3      BYTE      properties2;                  /* masked byte */
28997  00  =3      BYTE      supplierCharacter1;           
28998  00  =3  } ZW_TARIFF_TBL_SUPPLIER_REPORT_1BYTE_FRAME;
28999  00  =3  
29000  00  =3  /************************************************************/
29001  00  =3  /* Tariff Tbl Supplier Report 2byte command class structs */
29002  00  =3  /************************************************************/
29003  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_REPORT_2BYTE_FRAME_
29004  00  =3  {
29005  00  =3      BYTE      cmdClass;                     /* The command class */
29006  00  =3      BYTE      cmd;                          /* The command */
29007  00  =3      BYTE      year1;                        /* MSB */
29008  00  =3      BYTE      year2;                        /* LSB */
29009  00  =3      BYTE      month;                        /**/
29010  00  =3      BYTE      day;                          /**/
29011  00  =3      BYTE      hourLocalTime;                /**/
29012  00  =3      BYTE      minuteLocalTime;              /**/
29013  00  =3      BYTE      secondLocalTime;              /**/
29014  00  =3      BYTE      currency1;                    /* MSB */
29015  00  =3      BYTE      currency2;                    
29016  00  =3      BYTE      currency3;                    /* LSB */
29017  00  =3      BYTE      properties1;                  /* masked byte */
29018  00  =3      BYTE      standingChargeValue1;         /* MSB */
29019  00  =3      BYTE      standingChargeValue2;         
29020  00  =3      BYTE      standingChargeValue3;         
29021  00  =3      BYTE      standingChargeValue4;         /* LSB */
29022  00  =3      BYTE      properties2;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 485 

29023  00  =3      BYTE      supplierCharacter1;           /* MSB */
29024  00  =3      BYTE      supplierCharacter2;           /* LSB */
29025  00  =3  } ZW_TARIFF_TBL_SUPPLIER_REPORT_2BYTE_FRAME;
29026  00  =3  
29027  00  =3  /************************************************************/
29028  00  =3  /* Tariff Tbl Supplier Report 3byte command class structs */
29029  00  =3  /************************************************************/
29030  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_REPORT_3BYTE_FRAME_
29031  00  =3  {
29032  00  =3      BYTE      cmdClass;                     /* The command class */
29033  00  =3      BYTE      cmd;                          /* The command */
29034  00  =3      BYTE      year1;                        /* MSB */
29035  00  =3      BYTE      year2;                        /* LSB */
29036  00  =3      BYTE      month;                        /**/
29037  00  =3      BYTE      day;                          /**/
29038  00  =3      BYTE      hourLocalTime;                /**/
29039  00  =3      BYTE      minuteLocalTime;              /**/
29040  00  =3      BYTE      secondLocalTime;              /**/
29041  00  =3      BYTE      currency1;                    /* MSB */
29042  00  =3      BYTE      currency2;                    
29043  00  =3      BYTE      currency3;                    /* LSB */
29044  00  =3      BYTE      properties1;                  /* masked byte */
29045  00  =3      BYTE      standingChargeValue1;         /* MSB */
29046  00  =3      BYTE      standingChargeValue2;         
29047  00  =3      BYTE      standingChargeValue3;         
29048  00  =3      BYTE      standingChargeValue4;         /* LSB */
29049  00  =3      BYTE      properties2;                  /* masked byte */
29050  00  =3      BYTE      supplierCharacter1;           /* MSB */
29051  00  =3      BYTE      supplierCharacter2;           
29052  00  =3      BYTE      supplierCharacter3;           /* LSB */
29053  00  =3  } ZW_TARIFF_TBL_SUPPLIER_REPORT_3BYTE_FRAME;
29054  00  =3  
29055  00  =3  /************************************************************/
29056  00  =3  /* Tariff Tbl Supplier Report 4byte command class structs */
29057  00  =3  /************************************************************/
29058  00  =3  typedef struct _ZW_TARIFF_TBL_SUPPLIER_REPORT_4BYTE_FRAME_
29059  00  =3  {
29060  00  =3      BYTE      cmdClass;                     /* The command class */
29061  00  =3      BYTE      cmd;                          /* The command */
29062  00  =3      BYTE      year1;                        /* MSB */
29063  00  =3      BYTE      year2;                        /* LSB */
29064  00  =3      BYTE      month;                        /**/
29065  00  =3      BYTE      day;                          /**/
29066  00  =3      BYTE      hourLocalTime;                /**/
29067  00  =3      BYTE      minuteLocalTime;              /**/
29068  00  =3      BYTE      secondLocalTime;              /**/
29069  00  =3      BYTE      currency1;                    /* MSB */
29070  00  =3      BYTE      currency2;                    
29071  00  =3      BYTE      currency3;                    /* LSB */
29072  00  =3      BYTE      properties1;                  /* masked byte */
29073  00  =3      BYTE      standingChargeValue1;         /* MSB */
29074  00  =3      BYTE      standingChargeValue2;         
29075  00  =3      BYTE      standingChargeValue3;         
29076  00  =3      BYTE      standingChargeValue4;         /* LSB */
29077  00  =3      BYTE      properties2;                  /* masked byte */
29078  00  =3      BYTE      supplierCharacter1;           /* MSB */
29079  00  =3      BYTE      supplierCharacter2;           
29080  00  =3      BYTE      supplierCharacter3;           
29081  00  =3      BYTE      supplierCharacter4;           /* LSB */
29082  00  =3  } ZW_TARIFF_TBL_SUPPLIER_REPORT_4BYTE_FRAME;
29083  00  =3  
29084  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 486 

29085  00  =3  /* Thermostat Fan Mode Get command class structs */         
29086  00  =3  /************************************************************/
29087  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_GET_FRAME_
29088  00  =3  {
29089  00  =3      BYTE      cmdClass;                     /* The command class */
29090  00  =3      BYTE      cmd;                          /* The command */
29091  00  =3  } ZW_THERMOSTAT_FAN_MODE_GET_FRAME;
29092  00  =3  
29093  00  =3  /************************************************************/
29094  00  =3  /* Thermostat Fan Mode Report command class structs */      
29095  00  =3  /************************************************************/
29096  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_REPORT_FRAME_
29097  00  =3  {
29098  00  =3      BYTE      cmdClass;                     /* The command class */
29099  00  =3      BYTE      cmd;                          /* The command */
29100  00  =3      BYTE      level;                        /* masked byte */
29101  00  =3  } ZW_THERMOSTAT_FAN_MODE_REPORT_FRAME;
29102  00  =3  
29103  00  =3  /************************************************************/
29104  00  =3  /* Thermostat Fan Mode Set command class structs */         
29105  00  =3  /************************************************************/
29106  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SET_FRAME_
29107  00  =3  {
29108  00  =3      BYTE      cmdClass;                     /* The command class */
29109  00  =3      BYTE      cmd;                          /* The command */
29110  00  =3      BYTE      level;                        /* masked byte */
29111  00  =3  } ZW_THERMOSTAT_FAN_MODE_SET_FRAME;
29112  00  =3  
29113  00  =3  /************************************************************/
29114  00  =3  /* Thermostat Fan Mode Supported Get command class structs */
29115  00  =3  /************************************************************/
29116  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_FRAME_
29117  00  =3  {
29118  00  =3      BYTE      cmdClass;                     /* The command class */
29119  00  =3      BYTE      cmd;                          /* The command */
29120  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_FRAME;
29121  00  =3  
29122  00  =3  /************************************************************/
29123  00  =3  /* Thermostat Fan Mode Supported Report 1byte command class structs */
29124  00  =3  /************************************************************/
29125  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_FRAME_
29126  00  =3  {
29127  00  =3      BYTE      cmdClass;                     /* The command class */
29128  00  =3      BYTE      cmd;                          /* The command */
29129  00  =3      BYTE      bitMask1;                     
29130  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_FRAME;
29131  00  =3  
29132  00  =3  /************************************************************/
29133  00  =3  /* Thermostat Fan Mode Supported Report 2byte command class structs */
29134  00  =3  /************************************************************/
29135  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_FRAME_
29136  00  =3  {
29137  00  =3      BYTE      cmdClass;                     /* The command class */
29138  00  =3      BYTE      cmd;                          /* The command */
29139  00  =3      BYTE      bitMask1;                     /* MSB */
29140  00  =3      BYTE      bitMask2;                     /* LSB */
29141  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_FRAME;
29142  00  =3  
29143  00  =3  /************************************************************/
29144  00  =3  /* Thermostat Fan Mode Supported Report 3byte command class structs */
29145  00  =3  /************************************************************/
29146  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 487 

29147  00  =3  {
29148  00  =3      BYTE      cmdClass;                     /* The command class */
29149  00  =3      BYTE      cmd;                          /* The command */
29150  00  =3      BYTE      bitMask1;                     /* MSB */
29151  00  =3      BYTE      bitMask2;                     
29152  00  =3      BYTE      bitMask3;                     /* LSB */
29153  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_FRAME;
29154  00  =3  
29155  00  =3  /************************************************************/
29156  00  =3  /* Thermostat Fan Mode Supported Report 4byte command class structs */
29157  00  =3  /************************************************************/
29158  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_FRAME_
29159  00  =3  {
29160  00  =3      BYTE      cmdClass;                     /* The command class */
29161  00  =3      BYTE      cmd;                          /* The command */
29162  00  =3      BYTE      bitMask1;                     /* MSB */
29163  00  =3      BYTE      bitMask2;                     
29164  00  =3      BYTE      bitMask3;                     
29165  00  =3      BYTE      bitMask4;                     /* LSB */
29166  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_FRAME;
29167  00  =3  
29168  00  =3  /************************************************************/
29169  00  =3  /* Thermostat Fan Mode Get V2 command class structs */      
29170  00  =3  /************************************************************/
29171  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_GET_V2_FRAME_
29172  00  =3  {
29173  00  =3      BYTE      cmdClass;                     /* The command class */
29174  00  =3      BYTE      cmd;                          /* The command */
29175  00  =3  } ZW_THERMOSTAT_FAN_MODE_GET_V2_FRAME;
29176  00  =3  
29177  00  =3  /************************************************************/
29178  00  =3  /* Thermostat Fan Mode Report V2 command class structs */   
29179  00  =3  /************************************************************/
29180  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_REPORT_V2_FRAME_
29181  00  =3  {
29182  00  =3      BYTE      cmdClass;                     /* The command class */
29183  00  =3      BYTE      cmd;                          /* The command */
29184  00  =3      BYTE      level;                        /* masked byte */
29185  00  =3  } ZW_THERMOSTAT_FAN_MODE_REPORT_V2_FRAME;
29186  00  =3  
29187  00  =3  /************************************************************/
29188  00  =3  /* Thermostat Fan Mode Set V2 command class structs */      
29189  00  =3  /************************************************************/
29190  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SET_V2_FRAME_
29191  00  =3  {
29192  00  =3      BYTE      cmdClass;                     /* The command class */
29193  00  =3      BYTE      cmd;                          /* The command */
29194  00  =3      BYTE      level;                        /* masked byte */
29195  00  =3  } ZW_THERMOSTAT_FAN_MODE_SET_V2_FRAME;
29196  00  =3  
29197  00  =3  /************************************************************/
29198  00  =3  /* Thermostat Fan Mode Supported Get V2 command class structs */
29199  00  =3  /************************************************************/
29200  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V2_FRAME_
29201  00  =3  {
29202  00  =3      BYTE      cmdClass;                     /* The command class */
29203  00  =3      BYTE      cmd;                          /* The command */
29204  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V2_FRAME;
29205  00  =3  
29206  00  =3  /************************************************************/
29207  00  =3  /* Thermostat Fan Mode Supported Report 1byte V2 command class structs */
29208  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 488 

29209  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V2_FRAME_
29210  00  =3  {
29211  00  =3      BYTE      cmdClass;                     /* The command class */
29212  00  =3      BYTE      cmd;                          /* The command */
29213  00  =3      BYTE      bitMask1;                     
29214  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V2_FRAME;
29215  00  =3  
29216  00  =3  /************************************************************/
29217  00  =3  /* Thermostat Fan Mode Supported Report 2byte V2 command class structs */
29218  00  =3  /************************************************************/
29219  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V2_FRAME_
29220  00  =3  {
29221  00  =3      BYTE      cmdClass;                     /* The command class */
29222  00  =3      BYTE      cmd;                          /* The command */
29223  00  =3      BYTE      bitMask1;                     /* MSB */
29224  00  =3      BYTE      bitMask2;                     /* LSB */
29225  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V2_FRAME;
29226  00  =3  
29227  00  =3  /************************************************************/
29228  00  =3  /* Thermostat Fan Mode Supported Report 3byte V2 command class structs */
29229  00  =3  /************************************************************/
29230  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V2_FRAME_
29231  00  =3  {
29232  00  =3      BYTE      cmdClass;                     /* The command class */
29233  00  =3      BYTE      cmd;                          /* The command */
29234  00  =3      BYTE      bitMask1;                     /* MSB */
29235  00  =3      BYTE      bitMask2;                     
29236  00  =3      BYTE      bitMask3;                     /* LSB */
29237  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V2_FRAME;
29238  00  =3  
29239  00  =3  /************************************************************/
29240  00  =3  /* Thermostat Fan Mode Supported Report 4byte V2 command class structs */
29241  00  =3  /************************************************************/
29242  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V2_FRAME_
29243  00  =3  {
29244  00  =3      BYTE      cmdClass;                     /* The command class */
29245  00  =3      BYTE      cmd;                          /* The command */
29246  00  =3      BYTE      bitMask1;                     /* MSB */
29247  00  =3      BYTE      bitMask2;                     
29248  00  =3      BYTE      bitMask3;                     
29249  00  =3      BYTE      bitMask4;                     /* LSB */
29250  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V2_FRAME;
29251  00  =3  
29252  00  =3  /************************************************************/
29253  00  =3  /* Thermostat Fan Mode Get V3 command class structs */      
29254  00  =3  /************************************************************/
29255  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_GET_V3_FRAME_
29256  00  =3  {
29257  00  =3      BYTE      cmdClass;                     /* The command class */
29258  00  =3      BYTE      cmd;                          /* The command */
29259  00  =3  } ZW_THERMOSTAT_FAN_MODE_GET_V3_FRAME;
29260  00  =3  
29261  00  =3  /************************************************************/
29262  00  =3  /* Thermostat Fan Mode Report V3 command class structs */   
29263  00  =3  /************************************************************/
29264  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_REPORT_V3_FRAME_
29265  00  =3  {
29266  00  =3      BYTE      cmdClass;                     /* The command class */
29267  00  =3      BYTE      cmd;                          /* The command */
29268  00  =3      BYTE      properties1;                  /* masked byte */
29269  00  =3  } ZW_THERMOSTAT_FAN_MODE_REPORT_V3_FRAME;
29270  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 489 

29271  00  =3  /************************************************************/
29272  00  =3  /* Thermostat Fan Mode Set V3 command class structs */      
29273  00  =3  /************************************************************/
29274  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SET_V3_FRAME_
29275  00  =3  {
29276  00  =3      BYTE      cmdClass;                     /* The command class */
29277  00  =3      BYTE      cmd;                          /* The command */
29278  00  =3      BYTE      properties1;                  /* masked byte */
29279  00  =3  } ZW_THERMOSTAT_FAN_MODE_SET_V3_FRAME;
29280  00  =3  
29281  00  =3  /************************************************************/
29282  00  =3  /* Thermostat Fan Mode Supported Get V3 command class structs */
29283  00  =3  /************************************************************/
29284  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V3_FRAME_
29285  00  =3  {
29286  00  =3      BYTE      cmdClass;                     /* The command class */
29287  00  =3      BYTE      cmd;                          /* The command */
29288  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V3_FRAME;
29289  00  =3  
29290  00  =3  /************************************************************/
29291  00  =3  /* Thermostat Fan Mode Supported Report 1byte V3 command class structs */
29292  00  =3  /************************************************************/
29293  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V3_FRAME_
29294  00  =3  {
29295  00  =3      BYTE      cmdClass;                     /* The command class */
29296  00  =3      BYTE      cmd;                          /* The command */
29297  00  =3      BYTE      bitMask1;                     
29298  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V3_FRAME;
29299  00  =3  
29300  00  =3  /************************************************************/
29301  00  =3  /* Thermostat Fan Mode Supported Report 2byte V3 command class structs */
29302  00  =3  /************************************************************/
29303  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V3_FRAME_
29304  00  =3  {
29305  00  =3      BYTE      cmdClass;                     /* The command class */
29306  00  =3      BYTE      cmd;                          /* The command */
29307  00  =3      BYTE      bitMask1;                     /* MSB */
29308  00  =3      BYTE      bitMask2;                     /* LSB */
29309  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V3_FRAME;
29310  00  =3  
29311  00  =3  /************************************************************/
29312  00  =3  /* Thermostat Fan Mode Supported Report 3byte V3 command class structs */
29313  00  =3  /************************************************************/
29314  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V3_FRAME_
29315  00  =3  {
29316  00  =3      BYTE      cmdClass;                     /* The command class */
29317  00  =3      BYTE      cmd;                          /* The command */
29318  00  =3      BYTE      bitMask1;                     /* MSB */
29319  00  =3      BYTE      bitMask2;                     
29320  00  =3      BYTE      bitMask3;                     /* LSB */
29321  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V3_FRAME;
29322  00  =3  
29323  00  =3  /************************************************************/
29324  00  =3  /* Thermostat Fan Mode Supported Report 4byte V3 command class structs */
29325  00  =3  /************************************************************/
29326  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V3_FRAME_
29327  00  =3  {
29328  00  =3      BYTE      cmdClass;                     /* The command class */
29329  00  =3      BYTE      cmd;                          /* The command */
29330  00  =3      BYTE      bitMask1;                     /* MSB */
29331  00  =3      BYTE      bitMask2;                     
29332  00  =3      BYTE      bitMask3;                     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 490 

29333  00  =3      BYTE      bitMask4;                     /* LSB */
29334  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V3_FRAME;
29335  00  =3  
29336  00  =3  /************************************************************/
29337  00  =3  /* Thermostat Fan Mode Get V4 command class structs */      
29338  00  =3  /************************************************************/
29339  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_GET_V4_FRAME_
29340  00  =3  {
29341  00  =3      BYTE      cmdClass;                     /* The command class */
29342  00  =3      BYTE      cmd;                          /* The command */
29343  00  =3  } ZW_THERMOSTAT_FAN_MODE_GET_V4_FRAME;
29344  00  =3  
29345  00  =3  /************************************************************/
29346  00  =3  /* Thermostat Fan Mode Report V4 command class structs */   
29347  00  =3  /************************************************************/
29348  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_REPORT_V4_FRAME_
29349  00  =3  {
29350  00  =3      BYTE      cmdClass;                     /* The command class */
29351  00  =3      BYTE      cmd;                          /* The command */
29352  00  =3      BYTE      properties1;                  /* masked byte */
29353  00  =3  } ZW_THERMOSTAT_FAN_MODE_REPORT_V4_FRAME;
29354  00  =3  
29355  00  =3  /************************************************************/
29356  00  =3  /* Thermostat Fan Mode Set V4 command class structs */      
29357  00  =3  /************************************************************/
29358  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SET_V4_FRAME_
29359  00  =3  {
29360  00  =3      BYTE      cmdClass;                     /* The command class */
29361  00  =3      BYTE      cmd;                          /* The command */
29362  00  =3      BYTE      properties1;                  /* masked byte */
29363  00  =3  } ZW_THERMOSTAT_FAN_MODE_SET_V4_FRAME;
29364  00  =3  
29365  00  =3  /************************************************************/
29366  00  =3  /* Thermostat Fan Mode Supported Get V4 command class structs */
29367  00  =3  /************************************************************/
29368  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V4_FRAME_
29369  00  =3  {
29370  00  =3      BYTE      cmdClass;                     /* The command class */
29371  00  =3      BYTE      cmd;                          /* The command */
29372  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_GET_V4_FRAME;
29373  00  =3  
29374  00  =3  /************************************************************/
29375  00  =3  /* Thermostat Fan Mode Supported Report 1byte V4 command class structs */
29376  00  =3  /************************************************************/
29377  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V4_FRAME_
29378  00  =3  {
29379  00  =3      BYTE      cmdClass;                     /* The command class */
29380  00  =3      BYTE      cmd;                          /* The command */
29381  00  =3      BYTE      bitMask1;                     
29382  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_1BYTE_V4_FRAME;
29383  00  =3  
29384  00  =3  /************************************************************/
29385  00  =3  /* Thermostat Fan Mode Supported Report 2byte V4 command class structs */
29386  00  =3  /************************************************************/
29387  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V4_FRAME_
29388  00  =3  {
29389  00  =3      BYTE      cmdClass;                     /* The command class */
29390  00  =3      BYTE      cmd;                          /* The command */
29391  00  =3      BYTE      bitMask1;                     /* MSB */
29392  00  =3      BYTE      bitMask2;                     /* LSB */
29393  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_2BYTE_V4_FRAME;
29394  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 491 

29395  00  =3  /************************************************************/
29396  00  =3  /* Thermostat Fan Mode Supported Report 3byte V4 command class structs */
29397  00  =3  /************************************************************/
29398  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V4_FRAME_
29399  00  =3  {
29400  00  =3      BYTE      cmdClass;                     /* The command class */
29401  00  =3      BYTE      cmd;                          /* The command */
29402  00  =3      BYTE      bitMask1;                     /* MSB */
29403  00  =3      BYTE      bitMask2;                     
29404  00  =3      BYTE      bitMask3;                     /* LSB */
29405  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_3BYTE_V4_FRAME;
29406  00  =3  
29407  00  =3  /************************************************************/
29408  00  =3  /* Thermostat Fan Mode Supported Report 4byte V4 command class structs */
29409  00  =3  /************************************************************/
29410  00  =3  typedef struct _ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V4_FRAME_
29411  00  =3  {
29412  00  =3      BYTE      cmdClass;                     /* The command class */
29413  00  =3      BYTE      cmd;                          /* The command */
29414  00  =3      BYTE      bitMask1;                     /* MSB */
29415  00  =3      BYTE      bitMask2;                     
29416  00  =3      BYTE      bitMask3;                     
29417  00  =3      BYTE      bitMask4;                     /* LSB */
29418  00  =3  } ZW_THERMOSTAT_FAN_MODE_SUPPORTED_REPORT_4BYTE_V4_FRAME;
29419  00  =3  
29420  00  =3  /************************************************************/
29421  00  =3  /* Thermostat Fan State Get command class structs */        
29422  00  =3  /************************************************************/
29423  00  =3  typedef struct _ZW_THERMOSTAT_FAN_STATE_GET_FRAME_
29424  00  =3  {
29425  00  =3      BYTE      cmdClass;                     /* The command class */
29426  00  =3      BYTE      cmd;                          /* The command */
29427  00  =3  } ZW_THERMOSTAT_FAN_STATE_GET_FRAME;
29428  00  =3  
29429  00  =3  /************************************************************/
29430  00  =3  /* Thermostat Fan State Report command class structs */     
29431  00  =3  /************************************************************/
29432  00  =3  typedef struct _ZW_THERMOSTAT_FAN_STATE_REPORT_FRAME_
29433  00  =3  {
29434  00  =3      BYTE      cmdClass;                     /* The command class */
29435  00  =3      BYTE      cmd;                          /* The command */
29436  00  =3      BYTE      level;                        /* masked byte */
29437  00  =3  } ZW_THERMOSTAT_FAN_STATE_REPORT_FRAME;
29438  00  =3  
29439  00  =3  /************************************************************/
29440  00  =3  /* Thermostat Fan State Get V2 command class structs */     
29441  00  =3  /************************************************************/
29442  00  =3  typedef struct _ZW_THERMOSTAT_FAN_STATE_GET_V2_FRAME_
29443  00  =3  {
29444  00  =3      BYTE      cmdClass;                     /* The command class */
29445  00  =3      BYTE      cmd;                          /* The command */
29446  00  =3  } ZW_THERMOSTAT_FAN_STATE_GET_V2_FRAME;
29447  00  =3  
29448  00  =3  /************************************************************/
29449  00  =3  /* Thermostat Fan State Report V2 command class structs */  
29450  00  =3  /************************************************************/
29451  00  =3  typedef struct _ZW_THERMOSTAT_FAN_STATE_REPORT_V2_FRAME_
29452  00  =3  {
29453  00  =3      BYTE      cmdClass;                     /* The command class */
29454  00  =3      BYTE      cmd;                          /* The command */
29455  00  =3      BYTE      level;                        /* masked byte */
29456  00  =3  } ZW_THERMOSTAT_FAN_STATE_REPORT_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 492 

29457  00  =3  
29458  00  =3  /************************************************************/
29459  00  =3  /* Thermostat Heating Status Report command class structs */
29460  00  =3  /************************************************************/
29461  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_STATUS_REPORT_FRAME_
29462  00  =3  {
29463  00  =3      BYTE      cmdClass;                     /* The command class */
29464  00  =3      BYTE      cmd;                          /* The command */
29465  00  =3      BYTE      status;                       /**/
29466  00  =3  } ZW_THERMOSTAT_HEATING_STATUS_REPORT_FRAME;
29467  00  =3  
29468  00  =3  /************************************************************/
29469  00  =3  /* Thermostat Heating Mode Get command class structs */     
29470  00  =3  /************************************************************/
29471  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_MODE_GET_FRAME_
29472  00  =3  {
29473  00  =3      BYTE      cmdClass;                     /* The command class */
29474  00  =3      BYTE      cmd;                          /* The command */
29475  00  =3  } ZW_THERMOSTAT_HEATING_MODE_GET_FRAME;
29476  00  =3  
29477  00  =3  /************************************************************/
29478  00  =3  /* Thermostat Heating Mode Report command class structs */  
29479  00  =3  /************************************************************/
29480  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_MODE_REPORT_FRAME_
29481  00  =3  {
29482  00  =3      BYTE      cmdClass;                     /* The command class */
29483  00  =3      BYTE      cmd;                          /* The command */
29484  00  =3      BYTE      mode;                         /**/
29485  00  =3  } ZW_THERMOSTAT_HEATING_MODE_REPORT_FRAME;
29486  00  =3  
29487  00  =3  /************************************************************/
29488  00  =3  /* Thermostat Heating Mode Set command class structs */     
29489  00  =3  /************************************************************/
29490  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_MODE_SET_FRAME_
29491  00  =3  {
29492  00  =3      BYTE      cmdClass;                     /* The command class */
29493  00  =3      BYTE      cmd;                          /* The command */
29494  00  =3      BYTE      mode;                         /**/
29495  00  =3  } ZW_THERMOSTAT_HEATING_MODE_SET_FRAME;
29496  00  =3  
29497  00  =3  /************************************************************/
29498  00  =3  /* Thermostat Heating Relay Status Get command class structs */
29499  00  =3  /************************************************************/
29500  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_RELAY_STATUS_GET_FRAME_
29501  00  =3  {
29502  00  =3      BYTE      cmdClass;                     /* The command class */
29503  00  =3      BYTE      cmd;                          /* The command */
29504  00  =3  } ZW_THERMOSTAT_HEATING_RELAY_STATUS_GET_FRAME;
29505  00  =3  
29506  00  =3  /************************************************************/
29507  00  =3  /* Thermostat Heating Relay Status Report command class structs */
29508  00  =3  /************************************************************/
29509  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_RELAY_STATUS_REPORT_FRAME_
29510  00  =3  {
29511  00  =3      BYTE      cmdClass;                     /* The command class */
29512  00  =3      BYTE      cmd;                          /* The command */
29513  00  =3      BYTE      relayStatus;                  /**/
29514  00  =3  } ZW_THERMOSTAT_HEATING_RELAY_STATUS_REPORT_FRAME;
29515  00  =3  
29516  00  =3  /************************************************************/
29517  00  =3  /* Thermostat Heating Setpoint Get command class structs */ 
29518  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 493 

29519  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_GET_FRAME_
29520  00  =3  {
29521  00  =3      BYTE      cmdClass;                     /* The command class */
29522  00  =3      BYTE      cmd;                          /* The command */
29523  00  =3      BYTE      setpointNr;                   /**/
29524  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_GET_FRAME;
29525  00  =3  
29526  00  =3  /************************************************************/
29527  00  =3  /* Thermostat Heating Setpoint Report 1byte command class structs */
29528  00  =3  /************************************************************/
29529  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_1BYTE_FRAME_
29530  00  =3  {
29531  00  =3      BYTE      cmdClass;                     /* The command class */
29532  00  =3      BYTE      cmd;                          /* The command */
29533  00  =3      BYTE      setpointNr;                   /**/
29534  00  =3      BYTE      properties1;                  /* masked byte */
29535  00  =3      BYTE      value1;                       
29536  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_1BYTE_FRAME;
29537  00  =3  
29538  00  =3  /************************************************************/
29539  00  =3  /* Thermostat Heating Setpoint Report 2byte command class structs */
29540  00  =3  /************************************************************/
29541  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_2BYTE_FRAME_
29542  00  =3  {
29543  00  =3      BYTE      cmdClass;                     /* The command class */
29544  00  =3      BYTE      cmd;                          /* The command */
29545  00  =3      BYTE      setpointNr;                   /**/
29546  00  =3      BYTE      properties1;                  /* masked byte */
29547  00  =3      BYTE      value1;                       /* MSB */
29548  00  =3      BYTE      value2;                       /* LSB */
29549  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_2BYTE_FRAME;
29550  00  =3  
29551  00  =3  /************************************************************/
29552  00  =3  /* Thermostat Heating Setpoint Report 3byte command class structs */
29553  00  =3  /************************************************************/
29554  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_3BYTE_FRAME_
29555  00  =3  {
29556  00  =3      BYTE      cmdClass;                     /* The command class */
29557  00  =3      BYTE      cmd;                          /* The command */
29558  00  =3      BYTE      setpointNr;                   /**/
29559  00  =3      BYTE      properties1;                  /* masked byte */
29560  00  =3      BYTE      value1;                       /* MSB */
29561  00  =3      BYTE      value2;                       
29562  00  =3      BYTE      value3;                       /* LSB */
29563  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_3BYTE_FRAME;
29564  00  =3  
29565  00  =3  /************************************************************/
29566  00  =3  /* Thermostat Heating Setpoint Report 4byte command class structs */
29567  00  =3  /************************************************************/
29568  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_4BYTE_FRAME_
29569  00  =3  {
29570  00  =3      BYTE      cmdClass;                     /* The command class */
29571  00  =3      BYTE      cmd;                          /* The command */
29572  00  =3      BYTE      setpointNr;                   /**/
29573  00  =3      BYTE      properties1;                  /* masked byte */
29574  00  =3      BYTE      value1;                       /* MSB */
29575  00  =3      BYTE      value2;                       
29576  00  =3      BYTE      value3;                       
29577  00  =3      BYTE      value4;                       /* LSB */
29578  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_REPORT_4BYTE_FRAME;
29579  00  =3  
29580  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 494 

29581  00  =3  /* Thermostat Heating Setpoint Set 1byte command class structs */
29582  00  =3  /************************************************************/
29583  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_SET_1BYTE_FRAME_
29584  00  =3  {
29585  00  =3      BYTE      cmdClass;                     /* The command class */
29586  00  =3      BYTE      cmd;                          /* The command */
29587  00  =3      BYTE      setpointNr;                   /**/
29588  00  =3      BYTE      properties1;                  /* masked byte */
29589  00  =3      BYTE      value1;                       
29590  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_SET_1BYTE_FRAME;
29591  00  =3  
29592  00  =3  /************************************************************/
29593  00  =3  /* Thermostat Heating Setpoint Set 2byte command class structs */
29594  00  =3  /************************************************************/
29595  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_SET_2BYTE_FRAME_
29596  00  =3  {
29597  00  =3      BYTE      cmdClass;                     /* The command class */
29598  00  =3      BYTE      cmd;                          /* The command */
29599  00  =3      BYTE      setpointNr;                   /**/
29600  00  =3      BYTE      properties1;                  /* masked byte */
29601  00  =3      BYTE      value1;                       /* MSB */
29602  00  =3      BYTE      value2;                       /* LSB */
29603  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_SET_2BYTE_FRAME;
29604  00  =3  
29605  00  =3  /************************************************************/
29606  00  =3  /* Thermostat Heating Setpoint Set 3byte command class structs */
29607  00  =3  /************************************************************/
29608  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_SET_3BYTE_FRAME_
29609  00  =3  {
29610  00  =3      BYTE      cmdClass;                     /* The command class */
29611  00  =3      BYTE      cmd;                          /* The command */
29612  00  =3      BYTE      setpointNr;                   /**/
29613  00  =3      BYTE      properties1;                  /* masked byte */
29614  00  =3      BYTE      value1;                       /* MSB */
29615  00  =3      BYTE      value2;                       
29616  00  =3      BYTE      value3;                       /* LSB */
29617  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_SET_3BYTE_FRAME;
29618  00  =3  
29619  00  =3  /************************************************************/
29620  00  =3  /* Thermostat Heating Setpoint Set 4byte command class structs */
29621  00  =3  /************************************************************/
29622  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_SETPOINT_SET_4BYTE_FRAME_
29623  00  =3  {
29624  00  =3      BYTE      cmdClass;                     /* The command class */
29625  00  =3      BYTE      cmd;                          /* The command */
29626  00  =3      BYTE      setpointNr;                   /**/
29627  00  =3      BYTE      properties1;                  /* masked byte */
29628  00  =3      BYTE      value1;                       /* MSB */
29629  00  =3      BYTE      value2;                       
29630  00  =3      BYTE      value3;                       
29631  00  =3      BYTE      value4;                       /* LSB */
29632  00  =3  } ZW_THERMOSTAT_HEATING_SETPOINT_SET_4BYTE_FRAME;
29633  00  =3  
29634  00  =3  /************************************************************/
29635  00  =3  /* Thermostat Heating Status Get command class structs */   
29636  00  =3  /************************************************************/
29637  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_STATUS_GET_FRAME_
29638  00  =3  {
29639  00  =3      BYTE      cmdClass;                     /* The command class */
29640  00  =3      BYTE      cmd;                          /* The command */
29641  00  =3  } ZW_THERMOSTAT_HEATING_STATUS_GET_FRAME;
29642  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 495 

29643  00  =3  /************************************************************/
29644  00  =3  /* Thermostat Heating Status Set command class structs */   
29645  00  =3  /************************************************************/
29646  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_STATUS_SET_FRAME_
29647  00  =3  {
29648  00  =3      BYTE      cmdClass;                     /* The command class */
29649  00  =3      BYTE      cmd;                          /* The command */
29650  00  =3      BYTE      status;                       /**/
29651  00  =3  } ZW_THERMOSTAT_HEATING_STATUS_SET_FRAME;
29652  00  =3  
29653  00  =3  /************************************************************/
29654  00  =3  /* Thermostat Heating Timed Off Set command class structs */
29655  00  =3  /************************************************************/
29656  00  =3  typedef struct _ZW_THERMOSTAT_HEATING_TIMED_OFF_SET_FRAME_
29657  00  =3  {
29658  00  =3      BYTE      cmdClass;                     /* The command class */
29659  00  =3      BYTE      cmd;                          /* The command */
29660  00  =3      BYTE      minutes;                      /**/
29661  00  =3      BYTE      hours;                        /**/
29662  00  =3  } ZW_THERMOSTAT_HEATING_TIMED_OFF_SET_FRAME;
29663  00  =3  
29664  00  =3  /************************************************************/
29665  00  =3  /* Thermostat Mode Get command class structs */             
29666  00  =3  /************************************************************/
29667  00  =3  typedef struct _ZW_THERMOSTAT_MODE_GET_FRAME_
29668  00  =3  {
29669  00  =3      BYTE      cmdClass;                     /* The command class */
29670  00  =3      BYTE      cmd;                          /* The command */
29671  00  =3  } ZW_THERMOSTAT_MODE_GET_FRAME;
29672  00  =3  
29673  00  =3  /************************************************************/
29674  00  =3  /* Thermostat Mode Report command class structs */          
29675  00  =3  /************************************************************/
29676  00  =3  typedef struct _ZW_THERMOSTAT_MODE_REPORT_FRAME_
29677  00  =3  {
29678  00  =3      BYTE      cmdClass;                     /* The command class */
29679  00  =3      BYTE      cmd;                          /* The command */
29680  00  =3      BYTE      level;                        /* masked byte */
29681  00  =3  } ZW_THERMOSTAT_MODE_REPORT_FRAME;
29682  00  =3  
29683  00  =3  /************************************************************/
29684  00  =3  /* Thermostat Mode Set command class structs */             
29685  00  =3  /************************************************************/
29686  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SET_FRAME_
29687  00  =3  {
29688  00  =3      BYTE      cmdClass;                     /* The command class */
29689  00  =3      BYTE      cmd;                          /* The command */
29690  00  =3      BYTE      level;                        /* masked byte */
29691  00  =3  } ZW_THERMOSTAT_MODE_SET_FRAME;
29692  00  =3  
29693  00  =3  /************************************************************/
29694  00  =3  /* Thermostat Mode Supported Get command class structs */   
29695  00  =3  /************************************************************/
29696  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_GET_FRAME_
29697  00  =3  {
29698  00  =3      BYTE      cmdClass;                     /* The command class */
29699  00  =3      BYTE      cmd;                          /* The command */
29700  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_GET_FRAME;
29701  00  =3  
29702  00  =3  /************************************************************/
29703  00  =3  /* Thermostat Mode Supported Report 1byte command class structs */
29704  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 496 

29705  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_FRAME_
29706  00  =3  {
29707  00  =3      BYTE      cmdClass;                     /* The command class */
29708  00  =3      BYTE      cmd;                          /* The command */
29709  00  =3      BYTE      bitMask1;                     
29710  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_FRAME;
29711  00  =3  
29712  00  =3  /************************************************************/
29713  00  =3  /* Thermostat Mode Supported Report 2byte command class structs */
29714  00  =3  /************************************************************/
29715  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_FRAME_
29716  00  =3  {
29717  00  =3      BYTE      cmdClass;                     /* The command class */
29718  00  =3      BYTE      cmd;                          /* The command */
29719  00  =3      BYTE      bitMask1;                     /* MSB */
29720  00  =3      BYTE      bitMask2;                     /* LSB */
29721  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_FRAME;
29722  00  =3  
29723  00  =3  /************************************************************/
29724  00  =3  /* Thermostat Mode Supported Report 3byte command class structs */
29725  00  =3  /************************************************************/
29726  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_FRAME_
29727  00  =3  {
29728  00  =3      BYTE      cmdClass;                     /* The command class */
29729  00  =3      BYTE      cmd;                          /* The command */
29730  00  =3      BYTE      bitMask1;                     /* MSB */
29731  00  =3      BYTE      bitMask2;                     
29732  00  =3      BYTE      bitMask3;                     /* LSB */
29733  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_FRAME;
29734  00  =3  
29735  00  =3  /************************************************************/
29736  00  =3  /* Thermostat Mode Supported Report 4byte command class structs */
29737  00  =3  /************************************************************/
29738  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_FRAME_
29739  00  =3  {
29740  00  =3      BYTE      cmdClass;                     /* The command class */
29741  00  =3      BYTE      cmd;                          /* The command */
29742  00  =3      BYTE      bitMask1;                     /* MSB */
29743  00  =3      BYTE      bitMask2;                     
29744  00  =3      BYTE      bitMask3;                     
29745  00  =3      BYTE      bitMask4;                     /* LSB */
29746  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_FRAME;
29747  00  =3  
29748  00  =3  /************************************************************/
29749  00  =3  /* Thermostat Mode Get V2 command class structs */          
29750  00  =3  /************************************************************/
29751  00  =3  typedef struct _ZW_THERMOSTAT_MODE_GET_V2_FRAME_
29752  00  =3  {
29753  00  =3      BYTE      cmdClass;                     /* The command class */
29754  00  =3      BYTE      cmd;                          /* The command */
29755  00  =3  } ZW_THERMOSTAT_MODE_GET_V2_FRAME;
29756  00  =3  
29757  00  =3  /************************************************************/
29758  00  =3  /* Thermostat Mode Report V2 command class structs */       
29759  00  =3  /************************************************************/
29760  00  =3  typedef struct _ZW_THERMOSTAT_MODE_REPORT_V2_FRAME_
29761  00  =3  {
29762  00  =3      BYTE      cmdClass;                     /* The command class */
29763  00  =3      BYTE      cmd;                          /* The command */
29764  00  =3      BYTE      level;                        /* masked byte */
29765  00  =3  } ZW_THERMOSTAT_MODE_REPORT_V2_FRAME;
29766  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 497 

29767  00  =3  /************************************************************/
29768  00  =3  /* Thermostat Mode Set V2 command class structs */          
29769  00  =3  /************************************************************/
29770  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SET_V2_FRAME_
29771  00  =3  {
29772  00  =3      BYTE      cmdClass;                     /* The command class */
29773  00  =3      BYTE      cmd;                          /* The command */
29774  00  =3      BYTE      level;                        /* masked byte */
29775  00  =3  } ZW_THERMOSTAT_MODE_SET_V2_FRAME;
29776  00  =3  
29777  00  =3  /************************************************************/
29778  00  =3  /* Thermostat Mode Supported Get V2 command class structs */
29779  00  =3  /************************************************************/
29780  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_GET_V2_FRAME_
29781  00  =3  {
29782  00  =3      BYTE      cmdClass;                     /* The command class */
29783  00  =3      BYTE      cmd;                          /* The command */
29784  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_GET_V2_FRAME;
29785  00  =3  
29786  00  =3  /************************************************************/
29787  00  =3  /* Thermostat Mode Supported Report 1byte V2 command class structs */
29788  00  =3  /************************************************************/
29789  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_V2_FRAME_
29790  00  =3  {
29791  00  =3      BYTE      cmdClass;                     /* The command class */
29792  00  =3      BYTE      cmd;                          /* The command */
29793  00  =3      BYTE      bitMask1;                     
29794  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_V2_FRAME;
29795  00  =3  
29796  00  =3  /************************************************************/
29797  00  =3  /* Thermostat Mode Supported Report 2byte V2 command class structs */
29798  00  =3  /************************************************************/
29799  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_V2_FRAME_
29800  00  =3  {
29801  00  =3      BYTE      cmdClass;                     /* The command class */
29802  00  =3      BYTE      cmd;                          /* The command */
29803  00  =3      BYTE      bitMask1;                     /* MSB */
29804  00  =3      BYTE      bitMask2;                     /* LSB */
29805  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_V2_FRAME;
29806  00  =3  
29807  00  =3  /************************************************************/
29808  00  =3  /* Thermostat Mode Supported Report 3byte V2 command class structs */
29809  00  =3  /************************************************************/
29810  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_V2_FRAME_
29811  00  =3  {
29812  00  =3      BYTE      cmdClass;                     /* The command class */
29813  00  =3      BYTE      cmd;                          /* The command */
29814  00  =3      BYTE      bitMask1;                     /* MSB */
29815  00  =3      BYTE      bitMask2;                     
29816  00  =3      BYTE      bitMask3;                     /* LSB */
29817  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_V2_FRAME;
29818  00  =3  
29819  00  =3  /************************************************************/
29820  00  =3  /* Thermostat Mode Supported Report 4byte V2 command class structs */
29821  00  =3  /************************************************************/
29822  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_V2_FRAME_
29823  00  =3  {
29824  00  =3      BYTE      cmdClass;                     /* The command class */
29825  00  =3      BYTE      cmd;                          /* The command */
29826  00  =3      BYTE      bitMask1;                     /* MSB */
29827  00  =3      BYTE      bitMask2;                     
29828  00  =3      BYTE      bitMask3;                     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 498 

29829  00  =3      BYTE      bitMask4;                     /* LSB */
29830  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_V2_FRAME;
29831  00  =3  
29832  00  =3  /************************************************************/
29833  00  =3  /* Thermostat Mode Get V3 command class structs */          
29834  00  =3  /************************************************************/
29835  00  =3  typedef struct _ZW_THERMOSTAT_MODE_GET_V3_FRAME_
29836  00  =3  {
29837  00  =3      BYTE      cmdClass;                     /* The command class */
29838  00  =3      BYTE      cmd;                          /* The command */
29839  00  =3  } ZW_THERMOSTAT_MODE_GET_V3_FRAME;
29840  00  =3  
29841  00  =3  /************************************************************/
29842  00  =3  /* Thermostat Mode Report 1byte V3 command class structs */ 
29843  00  =3  /************************************************************/
29844  00  =3  typedef struct _ZW_THERMOSTAT_MODE_REPORT_1BYTE_V3_FRAME_
29845  00  =3  {
29846  00  =3      BYTE      cmdClass;                     /* The command class */
29847  00  =3      BYTE      cmd;                          /* The command */
29848  00  =3      BYTE      level;                        /* masked byte */
29849  00  =3      BYTE      manufacturerData1;            
29850  00  =3  } ZW_THERMOSTAT_MODE_REPORT_1BYTE_V3_FRAME;
29851  00  =3  
29852  00  =3  /************************************************************/
29853  00  =3  /* Thermostat Mode Report 2byte V3 command class structs */ 
29854  00  =3  /************************************************************/
29855  00  =3  typedef struct _ZW_THERMOSTAT_MODE_REPORT_2BYTE_V3_FRAME_
29856  00  =3  {
29857  00  =3      BYTE      cmdClass;                     /* The command class */
29858  00  =3      BYTE      cmd;                          /* The command */
29859  00  =3      BYTE      level;                        /* masked byte */
29860  00  =3      BYTE      manufacturerData1;            /* MSB */
29861  00  =3      BYTE      manufacturerData2;            /* LSB */
29862  00  =3  } ZW_THERMOSTAT_MODE_REPORT_2BYTE_V3_FRAME;
29863  00  =3  
29864  00  =3  /************************************************************/
29865  00  =3  /* Thermostat Mode Report 3byte V3 command class structs */ 
29866  00  =3  /************************************************************/
29867  00  =3  typedef struct _ZW_THERMOSTAT_MODE_REPORT_3BYTE_V3_FRAME_
29868  00  =3  {
29869  00  =3      BYTE      cmdClass;                     /* The command class */
29870  00  =3      BYTE      cmd;                          /* The command */
29871  00  =3      BYTE      level;                        /* masked byte */
29872  00  =3      BYTE      manufacturerData1;            /* MSB */
29873  00  =3      BYTE      manufacturerData2;            
29874  00  =3      BYTE      manufacturerData3;            /* LSB */
29875  00  =3  } ZW_THERMOSTAT_MODE_REPORT_3BYTE_V3_FRAME;
29876  00  =3  
29877  00  =3  /************************************************************/
29878  00  =3  /* Thermostat Mode Report 4byte V3 command class structs */ 
29879  00  =3  /************************************************************/
29880  00  =3  typedef struct _ZW_THERMOSTAT_MODE_REPORT_4BYTE_V3_FRAME_
29881  00  =3  {
29882  00  =3      BYTE      cmdClass;                     /* The command class */
29883  00  =3      BYTE      cmd;                          /* The command */
29884  00  =3      BYTE      level;                        /* masked byte */
29885  00  =3      BYTE      manufacturerData1;            /* MSB */
29886  00  =3      BYTE      manufacturerData2;            
29887  00  =3      BYTE      manufacturerData3;            
29888  00  =3      BYTE      manufacturerData4;            /* LSB */
29889  00  =3  } ZW_THERMOSTAT_MODE_REPORT_4BYTE_V3_FRAME;
29890  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 499 

29891  00  =3  /************************************************************/
29892  00  =3  /* Thermostat Mode Set 1byte V3 command class structs */    
29893  00  =3  /************************************************************/
29894  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SET_1BYTE_V3_FRAME_
29895  00  =3  {
29896  00  =3      BYTE      cmdClass;                     /* The command class */
29897  00  =3      BYTE      cmd;                          /* The command */
29898  00  =3      BYTE      level;                        /* masked byte */
29899  00  =3      BYTE      manufacturerData1;            
29900  00  =3  } ZW_THERMOSTAT_MODE_SET_1BYTE_V3_FRAME;
29901  00  =3  
29902  00  =3  /************************************************************/
29903  00  =3  /* Thermostat Mode Set 2byte V3 command class structs */    
29904  00  =3  /************************************************************/
29905  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SET_2BYTE_V3_FRAME_
29906  00  =3  {
29907  00  =3      BYTE      cmdClass;                     /* The command class */
29908  00  =3      BYTE      cmd;                          /* The command */
29909  00  =3      BYTE      level;                        /* masked byte */
29910  00  =3      BYTE      manufacturerData1;            /* MSB */
29911  00  =3      BYTE      manufacturerData2;            /* LSB */
29912  00  =3  } ZW_THERMOSTAT_MODE_SET_2BYTE_V3_FRAME;
29913  00  =3  
29914  00  =3  /************************************************************/
29915  00  =3  /* Thermostat Mode Set 3byte V3 command class structs */    
29916  00  =3  /************************************************************/
29917  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SET_3BYTE_V3_FRAME_
29918  00  =3  {
29919  00  =3      BYTE      cmdClass;                     /* The command class */
29920  00  =3      BYTE      cmd;                          /* The command */
29921  00  =3      BYTE      level;                        /* masked byte */
29922  00  =3      BYTE      manufacturerData1;            /* MSB */
29923  00  =3      BYTE      manufacturerData2;            
29924  00  =3      BYTE      manufacturerData3;            /* LSB */
29925  00  =3  } ZW_THERMOSTAT_MODE_SET_3BYTE_V3_FRAME;
29926  00  =3  
29927  00  =3  /************************************************************/
29928  00  =3  /* Thermostat Mode Set 4byte V3 command class structs */    
29929  00  =3  /************************************************************/
29930  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SET_4BYTE_V3_FRAME_
29931  00  =3  {
29932  00  =3      BYTE      cmdClass;                     /* The command class */
29933  00  =3      BYTE      cmd;                          /* The command */
29934  00  =3      BYTE      level;                        /* masked byte */
29935  00  =3      BYTE      manufacturerData1;            /* MSB */
29936  00  =3      BYTE      manufacturerData2;            
29937  00  =3      BYTE      manufacturerData3;            
29938  00  =3      BYTE      manufacturerData4;            /* LSB */
29939  00  =3  } ZW_THERMOSTAT_MODE_SET_4BYTE_V3_FRAME;
29940  00  =3  
29941  00  =3  /************************************************************/
29942  00  =3  /* Thermostat Mode Supported Get V3 command class structs */
29943  00  =3  /************************************************************/
29944  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_GET_V3_FRAME_
29945  00  =3  {
29946  00  =3      BYTE      cmdClass;                     /* The command class */
29947  00  =3      BYTE      cmd;                          /* The command */
29948  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_GET_V3_FRAME;
29949  00  =3  
29950  00  =3  /************************************************************/
29951  00  =3  /* Thermostat Mode Supported Report 1byte V3 command class structs */
29952  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 500 

29953  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_V3_FRAME_
29954  00  =3  {
29955  00  =3      BYTE      cmdClass;                     /* The command class */
29956  00  =3      BYTE      cmd;                          /* The command */
29957  00  =3      BYTE      bitMask1;                     
29958  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_1BYTE_V3_FRAME;
29959  00  =3  
29960  00  =3  /************************************************************/
29961  00  =3  /* Thermostat Mode Supported Report 2byte V3 command class structs */
29962  00  =3  /************************************************************/
29963  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_V3_FRAME_
29964  00  =3  {
29965  00  =3      BYTE      cmdClass;                     /* The command class */
29966  00  =3      BYTE      cmd;                          /* The command */
29967  00  =3      BYTE      bitMask1;                     /* MSB */
29968  00  =3      BYTE      bitMask2;                     /* LSB */
29969  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_2BYTE_V3_FRAME;
29970  00  =3  
29971  00  =3  /************************************************************/
29972  00  =3  /* Thermostat Mode Supported Report 3byte V3 command class structs */
29973  00  =3  /************************************************************/
29974  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_V3_FRAME_
29975  00  =3  {
29976  00  =3      BYTE      cmdClass;                     /* The command class */
29977  00  =3      BYTE      cmd;                          /* The command */
29978  00  =3      BYTE      bitMask1;                     /* MSB */
29979  00  =3      BYTE      bitMask2;                     
29980  00  =3      BYTE      bitMask3;                     /* LSB */
29981  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_3BYTE_V3_FRAME;
29982  00  =3  
29983  00  =3  /************************************************************/
29984  00  =3  /* Thermostat Mode Supported Report 4byte V3 command class structs */
29985  00  =3  /************************************************************/
29986  00  =3  typedef struct _ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_V3_FRAME_
29987  00  =3  {
29988  00  =3      BYTE      cmdClass;                     /* The command class */
29989  00  =3      BYTE      cmd;                          /* The command */
29990  00  =3      BYTE      bitMask1;                     /* MSB */
29991  00  =3      BYTE      bitMask2;                     
29992  00  =3      BYTE      bitMask3;                     
29993  00  =3      BYTE      bitMask4;                     /* LSB */
29994  00  =3  } ZW_THERMOSTAT_MODE_SUPPORTED_REPORT_4BYTE_V3_FRAME;
29995  00  =3  
29996  00  =3  /************************************************************/
29997  00  =3  /* Thermostat Operating State Get command class structs */  
29998  00  =3  /************************************************************/
29999  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_GET_FRAME_
30000  00  =3  {
30001  00  =3      BYTE      cmdClass;                     /* The command class */
30002  00  =3      BYTE      cmd;                          /* The command */
30003  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_GET_FRAME;
30004  00  =3  
30005  00  =3  /************************************************************/
30006  00  =3  /* Thermostat Operating State Report command class structs */
30007  00  =3  /************************************************************/
30008  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_REPORT_FRAME_
30009  00  =3  {
30010  00  =3      BYTE      cmdClass;                     /* The command class */
30011  00  =3      BYTE      cmd;                          /* The command */
30012  00  =3      BYTE      level;                        /* masked byte */
30013  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_REPORT_FRAME;
30014  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 501 

30015  00  =3  /************************************************************/
30016  00  =3  /* Thermostat Operating State Get V2 command class structs */
30017  00  =3  /************************************************************/
30018  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_GET_V2_FRAME_
30019  00  =3  {
30020  00  =3      BYTE      cmdClass;                     /* The command class */
30021  00  =3      BYTE      cmd;                          /* The command */
30022  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_GET_V2_FRAME;
30023  00  =3  
30024  00  =3  /************************************************************/
30025  00  =3  /* Thermostat Operating State Report V2 command class structs */
30026  00  =3  /************************************************************/
30027  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_REPORT_V2_FRAME_
30028  00  =3  {
30029  00  =3      BYTE      cmdClass;                     /* The command class */
30030  00  =3      BYTE      cmd;                          /* The command */
30031  00  =3      BYTE      properties1;                  /* masked byte */
30032  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_REPORT_V2_FRAME;
30033  00  =3  
30034  00  =3  /************************************************************/
30035  00  =3  /* Thermostat Operating State Logging Supported Get V2 command class structs */
30036  00  =3  /************************************************************/
30037  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET_V2_FRAME_
30038  00  =3  {
30039  00  =3      BYTE      cmdClass;                     /* The command class */
30040  00  =3      BYTE      cmd;                          /* The command */
30041  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET_V2_FRAME;
30042  00  =3  
30043  00  =3  /************************************************************/
30044  00  =3  /* Thermostat Operating Logging Supported Report 1byte V2 command class structs */
30045  00  =3  /************************************************************/
30046  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_1BYTE_V2_FRAME_
30047  00  =3  {
30048  00  =3      BYTE      cmdClass;                     /* The command class */
30049  00  =3      BYTE      cmd;                          /* The command */
30050  00  =3      BYTE      bitMask1;                     
30051  00  =3  } ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_1BYTE_V2_FRAME;
30052  00  =3  
30053  00  =3  /************************************************************/
30054  00  =3  /* Thermostat Operating Logging Supported Report 2byte V2 command class structs */
30055  00  =3  /************************************************************/
30056  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_2BYTE_V2_FRAME_
30057  00  =3  {
30058  00  =3      BYTE      cmdClass;                     /* The command class */
30059  00  =3      BYTE      cmd;                          /* The command */
30060  00  =3      BYTE      bitMask1;                     /* MSB */
30061  00  =3      BYTE      bitMask2;                     /* LSB */
30062  00  =3  } ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_2BYTE_V2_FRAME;
30063  00  =3  
30064  00  =3  /************************************************************/
30065  00  =3  /* Thermostat Operating Logging Supported Report 3byte V2 command class structs */
30066  00  =3  /************************************************************/
30067  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_3BYTE_V2_FRAME_
30068  00  =3  {
30069  00  =3      BYTE      cmdClass;                     /* The command class */
30070  00  =3      BYTE      cmd;                          /* The command */
30071  00  =3      BYTE      bitMask1;                     /* MSB */
30072  00  =3      BYTE      bitMask2;                     
30073  00  =3      BYTE      bitMask3;                     /* LSB */
30074  00  =3  } ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_3BYTE_V2_FRAME;
30075  00  =3  
30076  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 502 

30077  00  =3  /* Thermostat Operating Logging Supported Report 4byte V2 command class structs */
30078  00  =3  /************************************************************/
30079  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_4BYTE_V2_FRAME_
30080  00  =3  {
30081  00  =3      BYTE      cmdClass;                     /* The command class */
30082  00  =3      BYTE      cmd;                          /* The command */
30083  00  =3      BYTE      bitMask1;                     /* MSB */
30084  00  =3      BYTE      bitMask2;                     
30085  00  =3      BYTE      bitMask3;                     
30086  00  =3      BYTE      bitMask4;                     /* LSB */
30087  00  =3  } ZW_THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT_4BYTE_V2_FRAME;
30088  00  =3  
30089  00  =3  /************************************************************/
30090  00  =3  /* Thermostat Operating State Logging Get 1byte V2 command class structs */
30091  00  =3  /************************************************************/
30092  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_1BYTE_V2_FRAME_
30093  00  =3  {
30094  00  =3      BYTE      cmdClass;                     /* The command class */
30095  00  =3      BYTE      cmd;                          /* The command */
30096  00  =3      BYTE      bitMask1;                     
30097  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_1BYTE_V2_FRAME;
30098  00  =3  
30099  00  =3  /************************************************************/
30100  00  =3  /* Thermostat Operating State Logging Get 2byte V2 command class structs */
30101  00  =3  /************************************************************/
30102  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_2BYTE_V2_FRAME_
30103  00  =3  {
30104  00  =3      BYTE      cmdClass;                     /* The command class */
30105  00  =3      BYTE      cmd;                          /* The command */
30106  00  =3      BYTE      bitMask1;                     /* MSB */
30107  00  =3      BYTE      bitMask2;                     /* LSB */
30108  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_2BYTE_V2_FRAME;
30109  00  =3  
30110  00  =3  /************************************************************/
30111  00  =3  /* Thermostat Operating State Logging Get 3byte V2 command class structs */
30112  00  =3  /************************************************************/
30113  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_3BYTE_V2_FRAME_
30114  00  =3  {
30115  00  =3      BYTE      cmdClass;                     /* The command class */
30116  00  =3      BYTE      cmd;                          /* The command */
30117  00  =3      BYTE      bitMask1;                     /* MSB */
30118  00  =3      BYTE      bitMask2;                     
30119  00  =3      BYTE      bitMask3;                     /* LSB */
30120  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_3BYTE_V2_FRAME;
30121  00  =3  
30122  00  =3  /************************************************************/
30123  00  =3  /* Thermostat Operating State Logging Get 4byte V2 command class structs */
30124  00  =3  /************************************************************/
30125  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_4BYTE_V2_FRAME_
30126  00  =3  {
30127  00  =3      BYTE      cmdClass;                     /* The command class */
30128  00  =3      BYTE      cmd;                          /* The command */
30129  00  =3      BYTE      bitMask1;                     /* MSB */
30130  00  =3      BYTE      bitMask2;                     
30131  00  =3      BYTE      bitMask3;                     
30132  00  =3      BYTE      bitMask4;                     /* LSB */
30133  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_GET_4BYTE_V2_FRAME;
30134  00  =3  
30135  00  =3  /************************************************************/
30136  00  =3  /* Thermostat Operating State Logging Report V2 variant group structs */
30137  00  =3  /************************************************************/
30138  00  =3  typedef struct _VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 503 

30139  00  =3  {
30140  00  =3      BYTE      properties1;                  /* masked byte */
30141  00  =3      BYTE      usageTodayHours;              /**/
30142  00  =3      BYTE      usageTodayMinutes;            /**/
30143  00  =3      BYTE      usageYesterdayHours;          /**/
30144  00  =3      BYTE      usageYesterdayMinutes;        /**/
30145  00  =3  } VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG;
30146  00  =3  
30147  00  =3  /************************************************************/
30148  00  =3  /* Thermostat Operating State Logging Report 1byte V2 command class structs */
30149  00  =3  /************************************************************/
30150  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_1BYTE_V2_FRAME_
30151  00  =3  {
30152  00  =3      BYTE      cmdClass;                     /* The command class */
30153  00  =3      BYTE      cmd;                          /* The command */
30154  00  =3      BYTE      reportsToFollow;              /**/
30155  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup1;                /**/
30156  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_1BYTE_V2_FRAME;
30157  00  =3  
30158  00  =3  /************************************************************/
30159  00  =3  /* Thermostat Operating State Logging Report 2byte V2 command class structs */
30160  00  =3  /************************************************************/
30161  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_2BYTE_V2_FRAME_
30162  00  =3  {
30163  00  =3      BYTE      cmdClass;                     /* The command class */
30164  00  =3      BYTE      cmd;                          /* The command */
30165  00  =3      BYTE      reportsToFollow;              /**/
30166  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup1;                /**/
30167  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup2;                /**/
30168  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_2BYTE_V2_FRAME;
30169  00  =3  
30170  00  =3  /************************************************************/
30171  00  =3  /* Thermostat Operating State Logging Report 3byte V2 command class structs */
30172  00  =3  /************************************************************/
30173  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_3BYTE_V2_FRAME_
30174  00  =3  {
30175  00  =3      BYTE      cmdClass;                     /* The command class */
30176  00  =3      BYTE      cmd;                          /* The command */
30177  00  =3      BYTE      reportsToFollow;              /**/
30178  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup1;                /**/
30179  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup2;                /**/
30180  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup3;                /**/
30181  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_3BYTE_V2_FRAME;
30182  00  =3  
30183  00  =3  /************************************************************/
30184  00  =3  /* Thermostat Operating State Logging Report 4byte V2 command class structs */
30185  00  =3  /************************************************************/
30186  00  =3  typedef struct _ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_4BYTE_V2_FRAME_
30187  00  =3  {
30188  00  =3      BYTE      cmdClass;                     /* The command class */
30189  00  =3      BYTE      cmd;                          /* The command */
30190  00  =3      BYTE      reportsToFollow;              /**/
30191  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup1;                /**/
30192  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup2;                /**/
30193  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup3;                /**/
30194  00  =3      VG_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_V2_VG variantgroup4;                /**/
30195  00  =3  } ZW_THERMOSTAT_OPERATING_STATE_LOGGING_REPORT_4BYTE_V2_FRAME;
30196  00  =3  
30197  00  =3  /************************************************************/
30198  00  =3  /* Thermostat Setback Get command class structs */          
30199  00  =3  /************************************************************/
30200  00  =3  typedef struct _ZW_THERMOSTAT_SETBACK_GET_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 504 

30201  00  =3  {
30202  00  =3      BYTE      cmdClass;                     /* The command class */
30203  00  =3      BYTE      cmd;                          /* The command */
30204  00  =3  } ZW_THERMOSTAT_SETBACK_GET_FRAME;
30205  00  =3  
30206  00  =3  /************************************************************/
30207  00  =3  /* Thermostat Setback Report command class structs */       
30208  00  =3  /************************************************************/
30209  00  =3  typedef struct _ZW_THERMOSTAT_SETBACK_REPORT_FRAME_
30210  00  =3  {
30211  00  =3      BYTE      cmdClass;                     /* The command class */
30212  00  =3      BYTE      cmd;                          /* The command */
30213  00  =3      BYTE      properties1;                  /* masked byte */
30214  00  =3      BYTE      setbackState;                 /**/
30215  00  =3  } ZW_THERMOSTAT_SETBACK_REPORT_FRAME;
30216  00  =3  
30217  00  =3  /************************************************************/
30218  00  =3  /* Thermostat Setback Set command class structs */          
30219  00  =3  /************************************************************/
30220  00  =3  typedef struct _ZW_THERMOSTAT_SETBACK_SET_FRAME_
30221  00  =3  {
30222  00  =3      BYTE      cmdClass;                     /* The command class */
30223  00  =3      BYTE      cmd;                          /* The command */
30224  00  =3      BYTE      properties1;                  /* masked byte */
30225  00  =3      BYTE      setbackState;                 /**/
30226  00  =3  } ZW_THERMOSTAT_SETBACK_SET_FRAME;
30227  00  =3  
30228  00  =3  /************************************************************/
30229  00  =3  /* Thermostat Setpoint Get command class structs */         
30230  00  =3  /************************************************************/
30231  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_GET_FRAME_
30232  00  =3  {
30233  00  =3      BYTE      cmdClass;                     /* The command class */
30234  00  =3      BYTE      cmd;                          /* The command */
30235  00  =3      BYTE      level;                        /* masked byte */
30236  00  =3  } ZW_THERMOSTAT_SETPOINT_GET_FRAME;
30237  00  =3  
30238  00  =3  /************************************************************/
30239  00  =3  /* Thermostat Setpoint Report 1byte command class structs */
30240  00  =3  /************************************************************/
30241  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_FRAME_
30242  00  =3  {
30243  00  =3      BYTE      cmdClass;                     /* The command class */
30244  00  =3      BYTE      cmd;                          /* The command */
30245  00  =3      BYTE      level;                        /* masked byte */
30246  00  =3      BYTE      level2;                       /* masked byte */
30247  00  =3      BYTE      value1;                       
30248  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_FRAME;
30249  00  =3  
30250  00  =3  /************************************************************/
30251  00  =3  /* Thermostat Setpoint Report 2byte command class structs */
30252  00  =3  /************************************************************/
30253  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_FRAME_
30254  00  =3  {
30255  00  =3      BYTE      cmdClass;                     /* The command class */
30256  00  =3      BYTE      cmd;                          /* The command */
30257  00  =3      BYTE      level;                        /* masked byte */
30258  00  =3      BYTE      level2;                       /* masked byte */
30259  00  =3      BYTE      value1;                       /* MSB */
30260  00  =3      BYTE      value2;                       /* LSB */
30261  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_FRAME;
30262  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 505 

30263  00  =3  /************************************************************/
30264  00  =3  /* Thermostat Setpoint Report 3byte command class structs */
30265  00  =3  /************************************************************/
30266  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_FRAME_
30267  00  =3  {
30268  00  =3      BYTE      cmdClass;                     /* The command class */
30269  00  =3      BYTE      cmd;                          /* The command */
30270  00  =3      BYTE      level;                        /* masked byte */
30271  00  =3      BYTE      level2;                       /* masked byte */
30272  00  =3      BYTE      value1;                       /* MSB */
30273  00  =3      BYTE      value2;                       
30274  00  =3      BYTE      value3;                       /* LSB */
30275  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_FRAME;
30276  00  =3  
30277  00  =3  /************************************************************/
30278  00  =3  /* Thermostat Setpoint Report 4byte command class structs */
30279  00  =3  /************************************************************/
30280  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_FRAME_
30281  00  =3  {
30282  00  =3      BYTE      cmdClass;                     /* The command class */
30283  00  =3      BYTE      cmd;                          /* The command */
30284  00  =3      BYTE      level;                        /* masked byte */
30285  00  =3      BYTE      level2;                       /* masked byte */
30286  00  =3      BYTE      value1;                       /* MSB */
30287  00  =3      BYTE      value2;                       
30288  00  =3      BYTE      value3;                       
30289  00  =3      BYTE      value4;                       /* LSB */
30290  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_FRAME;
30291  00  =3  
30292  00  =3  /************************************************************/
30293  00  =3  /* Thermostat Setpoint Set 1byte command class structs */   
30294  00  =3  /************************************************************/
30295  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_1BYTE_FRAME_
30296  00  =3  {
30297  00  =3      BYTE      cmdClass;                     /* The command class */
30298  00  =3      BYTE      cmd;                          /* The command */
30299  00  =3      BYTE      level;                        /* masked byte */
30300  00  =3      BYTE      level2;                       /* masked byte */
30301  00  =3      BYTE      value1;                       
30302  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_1BYTE_FRAME;
30303  00  =3  
30304  00  =3  /************************************************************/
30305  00  =3  /* Thermostat Setpoint Set 2byte command class structs */   
30306  00  =3  /************************************************************/
30307  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_2BYTE_FRAME_
30308  00  =3  {
30309  00  =3      BYTE      cmdClass;                     /* The command class */
30310  00  =3      BYTE      cmd;                          /* The command */
30311  00  =3      BYTE      level;                        /* masked byte */
30312  00  =3      BYTE      level2;                       /* masked byte */
30313  00  =3      BYTE      value1;                       /* MSB */
30314  00  =3      BYTE      value2;                       /* LSB */
30315  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_2BYTE_FRAME;
30316  00  =3  
30317  00  =3  /************************************************************/
30318  00  =3  /* Thermostat Setpoint Set 3byte command class structs */   
30319  00  =3  /************************************************************/
30320  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_3BYTE_FRAME_
30321  00  =3  {
30322  00  =3      BYTE      cmdClass;                     /* The command class */
30323  00  =3      BYTE      cmd;                          /* The command */
30324  00  =3      BYTE      level;                        /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 506 

30325  00  =3      BYTE      level2;                       /* masked byte */
30326  00  =3      BYTE      value1;                       /* MSB */
30327  00  =3      BYTE      value2;                       
30328  00  =3      BYTE      value3;                       /* LSB */
30329  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_3BYTE_FRAME;
30330  00  =3  
30331  00  =3  /************************************************************/
30332  00  =3  /* Thermostat Setpoint Set 4byte command class structs */   
30333  00  =3  /************************************************************/
30334  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_4BYTE_FRAME_
30335  00  =3  {
30336  00  =3      BYTE      cmdClass;                     /* The command class */
30337  00  =3      BYTE      cmd;                          /* The command */
30338  00  =3      BYTE      level;                        /* masked byte */
30339  00  =3      BYTE      level2;                       /* masked byte */
30340  00  =3      BYTE      value1;                       /* MSB */
30341  00  =3      BYTE      value2;                       
30342  00  =3      BYTE      value3;                       
30343  00  =3      BYTE      value4;                       /* LSB */
30344  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_4BYTE_FRAME;
30345  00  =3  
30346  00  =3  /************************************************************/
30347  00  =3  /* Thermostat Setpoint Supported Get command class structs */
30348  00  =3  /************************************************************/
30349  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_FRAME_
30350  00  =3  {
30351  00  =3      BYTE      cmdClass;                     /* The command class */
30352  00  =3      BYTE      cmd;                          /* The command */
30353  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_FRAME;
30354  00  =3  
30355  00  =3  /************************************************************/
30356  00  =3  /* Thermostat Setpoint Supported Report 1byte command class structs */
30357  00  =3  /************************************************************/
30358  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_FRAME_
30359  00  =3  {
30360  00  =3      BYTE      cmdClass;                     /* The command class */
30361  00  =3      BYTE      cmd;                          /* The command */
30362  00  =3      BYTE      bitMask1;                     
30363  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_FRAME;
30364  00  =3  
30365  00  =3  /************************************************************/
30366  00  =3  /* Thermostat Setpoint Supported Report 2byte command class structs */
30367  00  =3  /************************************************************/
30368  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_FRAME_
30369  00  =3  {
30370  00  =3      BYTE      cmdClass;                     /* The command class */
30371  00  =3      BYTE      cmd;                          /* The command */
30372  00  =3      BYTE      bitMask1;                     /* MSB */
30373  00  =3      BYTE      bitMask2;                     /* LSB */
30374  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_FRAME;
30375  00  =3  
30376  00  =3  /************************************************************/
30377  00  =3  /* Thermostat Setpoint Supported Report 3byte command class structs */
30378  00  =3  /************************************************************/
30379  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_FRAME_
30380  00  =3  {
30381  00  =3      BYTE      cmdClass;                     /* The command class */
30382  00  =3      BYTE      cmd;                          /* The command */
30383  00  =3      BYTE      bitMask1;                     /* MSB */
30384  00  =3      BYTE      bitMask2;                     
30385  00  =3      BYTE      bitMask3;                     /* LSB */
30386  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 507 

30387  00  =3  
30388  00  =3  /************************************************************/
30389  00  =3  /* Thermostat Setpoint Supported Report 4byte command class structs */
30390  00  =3  /************************************************************/
30391  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_FRAME_
30392  00  =3  {
30393  00  =3      BYTE      cmdClass;                     /* The command class */
30394  00  =3      BYTE      cmd;                          /* The command */
30395  00  =3      BYTE      bitMask1;                     /* MSB */
30396  00  =3      BYTE      bitMask2;                     
30397  00  =3      BYTE      bitMask3;                     
30398  00  =3      BYTE      bitMask4;                     /* LSB */
30399  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_FRAME;
30400  00  =3  
30401  00  =3  /************************************************************/
30402  00  =3  /* Thermostat Setpoint Get V2 command class structs */      
30403  00  =3  /************************************************************/
30404  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_GET_V2_FRAME_
30405  00  =3  {
30406  00  =3      BYTE      cmdClass;                     /* The command class */
30407  00  =3      BYTE      cmd;                          /* The command */
30408  00  =3      BYTE      level;                        /* masked byte */
30409  00  =3  } ZW_THERMOSTAT_SETPOINT_GET_V2_FRAME;
30410  00  =3  
30411  00  =3  /************************************************************/
30412  00  =3  /* Thermostat Setpoint Report 1byte V2 command class structs */
30413  00  =3  /************************************************************/
30414  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_V2_FRAME_
30415  00  =3  {
30416  00  =3      BYTE      cmdClass;                     /* The command class */
30417  00  =3      BYTE      cmd;                          /* The command */
30418  00  =3      BYTE      level;                        /* masked byte */
30419  00  =3      BYTE      level2;                       /* masked byte */
30420  00  =3      BYTE      value1;                       
30421  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_V2_FRAME;
30422  00  =3  
30423  00  =3  /************************************************************/
30424  00  =3  /* Thermostat Setpoint Report 2byte V2 command class structs */
30425  00  =3  /************************************************************/
30426  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_V2_FRAME_
30427  00  =3  {
30428  00  =3      BYTE      cmdClass;                     /* The command class */
30429  00  =3      BYTE      cmd;                          /* The command */
30430  00  =3      BYTE      level;                        /* masked byte */
30431  00  =3      BYTE      level2;                       /* masked byte */
30432  00  =3      BYTE      value1;                       /* MSB */
30433  00  =3      BYTE      value2;                       /* LSB */
30434  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_V2_FRAME;
30435  00  =3  
30436  00  =3  /************************************************************/
30437  00  =3  /* Thermostat Setpoint Report 3byte V2 command class structs */
30438  00  =3  /************************************************************/
30439  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_V2_FRAME_
30440  00  =3  {
30441  00  =3      BYTE      cmdClass;                     /* The command class */
30442  00  =3      BYTE      cmd;                          /* The command */
30443  00  =3      BYTE      level;                        /* masked byte */
30444  00  =3      BYTE      level2;                       /* masked byte */
30445  00  =3      BYTE      value1;                       /* MSB */
30446  00  =3      BYTE      value2;                       
30447  00  =3      BYTE      value3;                       /* LSB */
30448  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 508 

30449  00  =3  
30450  00  =3  /************************************************************/
30451  00  =3  /* Thermostat Setpoint Report 4byte V2 command class structs */
30452  00  =3  /************************************************************/
30453  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_V2_FRAME_
30454  00  =3  {
30455  00  =3      BYTE      cmdClass;                     /* The command class */
30456  00  =3      BYTE      cmd;                          /* The command */
30457  00  =3      BYTE      level;                        /* masked byte */
30458  00  =3      BYTE      level2;                       /* masked byte */
30459  00  =3      BYTE      value1;                       /* MSB */
30460  00  =3      BYTE      value2;                       
30461  00  =3      BYTE      value3;                       
30462  00  =3      BYTE      value4;                       /* LSB */
30463  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_V2_FRAME;
30464  00  =3  
30465  00  =3  /************************************************************/
30466  00  =3  /* Thermostat Setpoint Set 1byte V2 command class structs */
30467  00  =3  /************************************************************/
30468  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_1BYTE_V2_FRAME_
30469  00  =3  {
30470  00  =3      BYTE      cmdClass;                     /* The command class */
30471  00  =3      BYTE      cmd;                          /* The command */
30472  00  =3      BYTE      level;                        /* masked byte */
30473  00  =3      BYTE      level2;                       /* masked byte */
30474  00  =3      BYTE      value1;                       
30475  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_1BYTE_V2_FRAME;
30476  00  =3  
30477  00  =3  /************************************************************/
30478  00  =3  /* Thermostat Setpoint Set 2byte V2 command class structs */
30479  00  =3  /************************************************************/
30480  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_2BYTE_V2_FRAME_
30481  00  =3  {
30482  00  =3      BYTE      cmdClass;                     /* The command class */
30483  00  =3      BYTE      cmd;                          /* The command */
30484  00  =3      BYTE      level;                        /* masked byte */
30485  00  =3      BYTE      level2;                       /* masked byte */
30486  00  =3      BYTE      value1;                       /* MSB */
30487  00  =3      BYTE      value2;                       /* LSB */
30488  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_2BYTE_V2_FRAME;
30489  00  =3  
30490  00  =3  /************************************************************/
30491  00  =3  /* Thermostat Setpoint Set 3byte V2 command class structs */
30492  00  =3  /************************************************************/
30493  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_3BYTE_V2_FRAME_
30494  00  =3  {
30495  00  =3      BYTE      cmdClass;                     /* The command class */
30496  00  =3      BYTE      cmd;                          /* The command */
30497  00  =3      BYTE      level;                        /* masked byte */
30498  00  =3      BYTE      level2;                       /* masked byte */
30499  00  =3      BYTE      value1;                       /* MSB */
30500  00  =3      BYTE      value2;                       
30501  00  =3      BYTE      value3;                       /* LSB */
30502  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_3BYTE_V2_FRAME;
30503  00  =3  
30504  00  =3  /************************************************************/
30505  00  =3  /* Thermostat Setpoint Set 4byte V2 command class structs */
30506  00  =3  /************************************************************/
30507  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_4BYTE_V2_FRAME_
30508  00  =3  {
30509  00  =3      BYTE      cmdClass;                     /* The command class */
30510  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 509 

30511  00  =3      BYTE      level;                        /* masked byte */
30512  00  =3      BYTE      level2;                       /* masked byte */
30513  00  =3      BYTE      value1;                       /* MSB */
30514  00  =3      BYTE      value2;                       
30515  00  =3      BYTE      value3;                       
30516  00  =3      BYTE      value4;                       /* LSB */
30517  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_4BYTE_V2_FRAME;
30518  00  =3  
30519  00  =3  /************************************************************/
30520  00  =3  /* Thermostat Setpoint Supported Get V2 command class structs */
30521  00  =3  /************************************************************/
30522  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_V2_FRAME_
30523  00  =3  {
30524  00  =3      BYTE      cmdClass;                     /* The command class */
30525  00  =3      BYTE      cmd;                          /* The command */
30526  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_V2_FRAME;
30527  00  =3  
30528  00  =3  /************************************************************/
30529  00  =3  /* Thermostat Setpoint Supported Report 1byte V2 command class structs */
30530  00  =3  /************************************************************/
30531  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_V2_FRAME_
30532  00  =3  {
30533  00  =3      BYTE      cmdClass;                     /* The command class */
30534  00  =3      BYTE      cmd;                          /* The command */
30535  00  =3      BYTE      bitMask1;                     
30536  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_V2_FRAME;
30537  00  =3  
30538  00  =3  /************************************************************/
30539  00  =3  /* Thermostat Setpoint Supported Report 2byte V2 command class structs */
30540  00  =3  /************************************************************/
30541  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_V2_FRAME_
30542  00  =3  {
30543  00  =3      BYTE      cmdClass;                     /* The command class */
30544  00  =3      BYTE      cmd;                          /* The command */
30545  00  =3      BYTE      bitMask1;                     /* MSB */
30546  00  =3      BYTE      bitMask2;                     /* LSB */
30547  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_V2_FRAME;
30548  00  =3  
30549  00  =3  /************************************************************/
30550  00  =3  /* Thermostat Setpoint Supported Report 3byte V2 command class structs */
30551  00  =3  /************************************************************/
30552  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_V2_FRAME_
30553  00  =3  {
30554  00  =3      BYTE      cmdClass;                     /* The command class */
30555  00  =3      BYTE      cmd;                          /* The command */
30556  00  =3      BYTE      bitMask1;                     /* MSB */
30557  00  =3      BYTE      bitMask2;                     
30558  00  =3      BYTE      bitMask3;                     /* LSB */
30559  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_V2_FRAME;
30560  00  =3  
30561  00  =3  /************************************************************/
30562  00  =3  /* Thermostat Setpoint Supported Report 4byte V2 command class structs */
30563  00  =3  /************************************************************/
30564  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_V2_FRAME_
30565  00  =3  {
30566  00  =3      BYTE      cmdClass;                     /* The command class */
30567  00  =3      BYTE      cmd;                          /* The command */
30568  00  =3      BYTE      bitMask1;                     /* MSB */
30569  00  =3      BYTE      bitMask2;                     
30570  00  =3      BYTE      bitMask3;                     
30571  00  =3      BYTE      bitMask4;                     /* LSB */
30572  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 510 

30573  00  =3  
30574  00  =3  /************************************************************/
30575  00  =3  /* Thermostat Setpoint Get V3 command class structs */      
30576  00  =3  /************************************************************/
30577  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_GET_V3_FRAME_
30578  00  =3  {
30579  00  =3      BYTE      cmdClass;                     /* The command class */
30580  00  =3      BYTE      cmd;                          /* The command */
30581  00  =3      BYTE      level;                        /* masked byte */
30582  00  =3  } ZW_THERMOSTAT_SETPOINT_GET_V3_FRAME;
30583  00  =3  
30584  00  =3  /************************************************************/
30585  00  =3  /* Thermostat Setpoint Report 1byte V3 command class structs */
30586  00  =3  /************************************************************/
30587  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_V3_FRAME_
30588  00  =3  {
30589  00  =3      BYTE      cmdClass;                     /* The command class */
30590  00  =3      BYTE      cmd;                          /* The command */
30591  00  =3      BYTE      level;                        /* masked byte */
30592  00  =3      BYTE      level2;                       /* masked byte */
30593  00  =3      BYTE      value1;                       
30594  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_1BYTE_V3_FRAME;
30595  00  =3  
30596  00  =3  /************************************************************/
30597  00  =3  /* Thermostat Setpoint Report 2byte V3 command class structs */
30598  00  =3  /************************************************************/
30599  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_V3_FRAME_
30600  00  =3  {
30601  00  =3      BYTE      cmdClass;                     /* The command class */
30602  00  =3      BYTE      cmd;                          /* The command */
30603  00  =3      BYTE      level;                        /* masked byte */
30604  00  =3      BYTE      level2;                       /* masked byte */
30605  00  =3      BYTE      value1;                       /* MSB */
30606  00  =3      BYTE      value2;                       /* LSB */
30607  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_2BYTE_V3_FRAME;
30608  00  =3  
30609  00  =3  /************************************************************/
30610  00  =3  /* Thermostat Setpoint Report 3byte V3 command class structs */
30611  00  =3  /************************************************************/
30612  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_V3_FRAME_
30613  00  =3  {
30614  00  =3      BYTE      cmdClass;                     /* The command class */
30615  00  =3      BYTE      cmd;                          /* The command */
30616  00  =3      BYTE      level;                        /* masked byte */
30617  00  =3      BYTE      level2;                       /* masked byte */
30618  00  =3      BYTE      value1;                       /* MSB */
30619  00  =3      BYTE      value2;                       
30620  00  =3      BYTE      value3;                       /* LSB */
30621  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_3BYTE_V3_FRAME;
30622  00  =3  
30623  00  =3  /************************************************************/
30624  00  =3  /* Thermostat Setpoint Report 4byte V3 command class structs */
30625  00  =3  /************************************************************/
30626  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_V3_FRAME_
30627  00  =3  {
30628  00  =3      BYTE      cmdClass;                     /* The command class */
30629  00  =3      BYTE      cmd;                          /* The command */
30630  00  =3      BYTE      level;                        /* masked byte */
30631  00  =3      BYTE      level2;                       /* masked byte */
30632  00  =3      BYTE      value1;                       /* MSB */
30633  00  =3      BYTE      value2;                       
30634  00  =3      BYTE      value3;                       
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 511 

30635  00  =3      BYTE      value4;                       /* LSB */
30636  00  =3  } ZW_THERMOSTAT_SETPOINT_REPORT_4BYTE_V3_FRAME;
30637  00  =3  
30638  00  =3  /************************************************************/
30639  00  =3  /* Thermostat Setpoint Set 1byte V3 command class structs */
30640  00  =3  /************************************************************/
30641  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_1BYTE_V3_FRAME_
30642  00  =3  {
30643  00  =3      BYTE      cmdClass;                     /* The command class */
30644  00  =3      BYTE      cmd;                          /* The command */
30645  00  =3      BYTE      level;                        /* masked byte */
30646  00  =3      BYTE      level2;                       /* masked byte */
30647  00  =3      BYTE      value1;                       
30648  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_1BYTE_V3_FRAME;
30649  00  =3  
30650  00  =3  /************************************************************/
30651  00  =3  /* Thermostat Setpoint Set 2byte V3 command class structs */
30652  00  =3  /************************************************************/
30653  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_2BYTE_V3_FRAME_
30654  00  =3  {
30655  00  =3      BYTE      cmdClass;                     /* The command class */
30656  00  =3      BYTE      cmd;                          /* The command */
30657  00  =3      BYTE      level;                        /* masked byte */
30658  00  =3      BYTE      level2;                       /* masked byte */
30659  00  =3      BYTE      value1;                       /* MSB */
30660  00  =3      BYTE      value2;                       /* LSB */
30661  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_2BYTE_V3_FRAME;
30662  00  =3  
30663  00  =3  /************************************************************/
30664  00  =3  /* Thermostat Setpoint Set 3byte V3 command class structs */
30665  00  =3  /************************************************************/
30666  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_3BYTE_V3_FRAME_
30667  00  =3  {
30668  00  =3      BYTE      cmdClass;                     /* The command class */
30669  00  =3      BYTE      cmd;                          /* The command */
30670  00  =3      BYTE      level;                        /* masked byte */
30671  00  =3      BYTE      level2;                       /* masked byte */
30672  00  =3      BYTE      value1;                       /* MSB */
30673  00  =3      BYTE      value2;                       
30674  00  =3      BYTE      value3;                       /* LSB */
30675  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_3BYTE_V3_FRAME;
30676  00  =3  
30677  00  =3  /************************************************************/
30678  00  =3  /* Thermostat Setpoint Set 4byte V3 command class structs */
30679  00  =3  /************************************************************/
30680  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SET_4BYTE_V3_FRAME_
30681  00  =3  {
30682  00  =3      BYTE      cmdClass;                     /* The command class */
30683  00  =3      BYTE      cmd;                          /* The command */
30684  00  =3      BYTE      level;                        /* masked byte */
30685  00  =3      BYTE      level2;                       /* masked byte */
30686  00  =3      BYTE      value1;                       /* MSB */
30687  00  =3      BYTE      value2;                       
30688  00  =3      BYTE      value3;                       
30689  00  =3      BYTE      value4;                       /* LSB */
30690  00  =3  } ZW_THERMOSTAT_SETPOINT_SET_4BYTE_V3_FRAME;
30691  00  =3  
30692  00  =3  /************************************************************/
30693  00  =3  /* Thermostat Setpoint Supported Get V3 command class structs */
30694  00  =3  /************************************************************/
30695  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_V3_FRAME_
30696  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 512 

30697  00  =3      BYTE      cmdClass;                     /* The command class */
30698  00  =3      BYTE      cmd;                          /* The command */
30699  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_GET_V3_FRAME;
30700  00  =3  
30701  00  =3  /************************************************************/
30702  00  =3  /* Thermostat Setpoint Supported Report 1byte V3 command class structs */
30703  00  =3  /************************************************************/
30704  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_V3_FRAME_
30705  00  =3  {
30706  00  =3      BYTE      cmdClass;                     /* The command class */
30707  00  =3      BYTE      cmd;                          /* The command */
30708  00  =3      BYTE      bitMask1;                     
30709  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_1BYTE_V3_FRAME;
30710  00  =3  
30711  00  =3  /************************************************************/
30712  00  =3  /* Thermostat Setpoint Supported Report 2byte V3 command class structs */
30713  00  =3  /************************************************************/
30714  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_V3_FRAME_
30715  00  =3  {
30716  00  =3      BYTE      cmdClass;                     /* The command class */
30717  00  =3      BYTE      cmd;                          /* The command */
30718  00  =3      BYTE      bitMask1;                     /* MSB */
30719  00  =3      BYTE      bitMask2;                     /* LSB */
30720  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_2BYTE_V3_FRAME;
30721  00  =3  
30722  00  =3  /************************************************************/
30723  00  =3  /* Thermostat Setpoint Supported Report 3byte V3 command class structs */
30724  00  =3  /************************************************************/
30725  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_V3_FRAME_
30726  00  =3  {
30727  00  =3      BYTE      cmdClass;                     /* The command class */
30728  00  =3      BYTE      cmd;                          /* The command */
30729  00  =3      BYTE      bitMask1;                     /* MSB */
30730  00  =3      BYTE      bitMask2;                     
30731  00  =3      BYTE      bitMask3;                     /* LSB */
30732  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_3BYTE_V3_FRAME;
30733  00  =3  
30734  00  =3  /************************************************************/
30735  00  =3  /* Thermostat Setpoint Supported Report 4byte V3 command class structs */
30736  00  =3  /************************************************************/
30737  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_V3_FRAME_
30738  00  =3  {
30739  00  =3      BYTE      cmdClass;                     /* The command class */
30740  00  =3      BYTE      cmd;                          /* The command */
30741  00  =3      BYTE      bitMask1;                     /* MSB */
30742  00  =3      BYTE      bitMask2;                     
30743  00  =3      BYTE      bitMask3;                     
30744  00  =3      BYTE      bitMask4;                     /* LSB */
30745  00  =3  } ZW_THERMOSTAT_SETPOINT_SUPPORTED_REPORT_4BYTE_V3_FRAME;
30746  00  =3  
30747  00  =3  /************************************************************/
30748  00  =3  /* Thermostat Setpoint Capabilities Get V3 command class structs */
30749  00  =3  /************************************************************/
30750  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_CAPABILITIES_GET_V3_FRAME_
30751  00  =3  {
30752  00  =3      BYTE      cmdClass;                     /* The command class */
30753  00  =3      BYTE      cmd;                          /* The command */
30754  00  =3      BYTE      properties1;                  /* masked byte */
30755  00  =3  } ZW_THERMOSTAT_SETPOINT_CAPABILITIES_GET_V3_FRAME;
30756  00  =3  
30757  00  =3  /************************************************************/
30758  00  =3  /* Thermostat Setpoint Capabilities Report 1byte V3 command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 513 

30759  00  =3  /************************************************************/
30760  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_1BYTE_V3_FRAME_
30761  00  =3  {
30762  00  =3      BYTE      cmdClass;                     /* The command class */
30763  00  =3      BYTE      cmd;                          /* The command */
30764  00  =3      BYTE      properties1;                  /* masked byte */
30765  00  =3      BYTE      properties2;                  /* masked byte */
30766  00  =3      BYTE      minValue1;                    
30767  00  =3      BYTE      properties3;                  /* masked byte */
30768  00  =3      BYTE      maxvalue1;                    
30769  00  =3  } ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_1BYTE_V3_FRAME;
30770  00  =3  
30771  00  =3  /************************************************************/
30772  00  =3  /* Thermostat Setpoint Capabilities Report 2byte V3 command class structs */
30773  00  =3  /************************************************************/
30774  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_2BYTE_V3_FRAME_
30775  00  =3  {
30776  00  =3      BYTE      cmdClass;                     /* The command class */
30777  00  =3      BYTE      cmd;                          /* The command */
30778  00  =3      BYTE      properties1;                  /* masked byte */
30779  00  =3      BYTE      properties2;                  /* masked byte */
30780  00  =3      BYTE      minValue1;                    /* MSB */
30781  00  =3      BYTE      minValue2;                    /* LSB */
30782  00  =3      BYTE      properties3;                  /* masked byte */
30783  00  =3      BYTE      maxvalue1;                    /* MSB */
30784  00  =3      BYTE      maxvalue2;                    /* LSB */
30785  00  =3  } ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_2BYTE_V3_FRAME;
30786  00  =3  
30787  00  =3  /************************************************************/
30788  00  =3  /* Thermostat Setpoint Capabilities Report 3byte V3 command class structs */
30789  00  =3  /************************************************************/
30790  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_3BYTE_V3_FRAME_
30791  00  =3  {
30792  00  =3      BYTE      cmdClass;                     /* The command class */
30793  00  =3      BYTE      cmd;                          /* The command */
30794  00  =3      BYTE      properties1;                  /* masked byte */
30795  00  =3      BYTE      properties2;                  /* masked byte */
30796  00  =3      BYTE      minValue1;                    /* MSB */
30797  00  =3      BYTE      minValue2;                    
30798  00  =3      BYTE      minValue3;                    /* LSB */
30799  00  =3      BYTE      properties3;                  /* masked byte */
30800  00  =3      BYTE      maxvalue1;                    /* MSB */
30801  00  =3      BYTE      maxvalue2;                    
30802  00  =3      BYTE      maxvalue3;                    /* LSB */
30803  00  =3  } ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_3BYTE_V3_FRAME;
30804  00  =3  
30805  00  =3  /************************************************************/
30806  00  =3  /* Thermostat Setpoint Capabilities Report 4byte V3 command class structs */
30807  00  =3  /************************************************************/
30808  00  =3  typedef struct _ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_4BYTE_V3_FRAME_
30809  00  =3  {
30810  00  =3      BYTE      cmdClass;                     /* The command class */
30811  00  =3      BYTE      cmd;                          /* The command */
30812  00  =3      BYTE      properties1;                  /* masked byte */
30813  00  =3      BYTE      properties2;                  /* masked byte */
30814  00  =3      BYTE      minValue1;                    /* MSB */
30815  00  =3      BYTE      minValue2;                    
30816  00  =3      BYTE      minValue3;                    
30817  00  =3      BYTE      minValue4;                    /* LSB */
30818  00  =3      BYTE      properties3;                  /* masked byte */
30819  00  =3      BYTE      maxvalue1;                    /* MSB */
30820  00  =3      BYTE      maxvalue2;                    
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 514 

30821  00  =3      BYTE      maxvalue3;                    
30822  00  =3      BYTE      maxvalue4;                    /* LSB */
30823  00  =3  } ZW_THERMOSTAT_SETPOINT_CAPABILITIES_REPORT_4BYTE_V3_FRAME;
30824  00  =3  
30825  00  =3  /************************************************************/
30826  00  =3  /* Time Parameters Get command class structs */             
30827  00  =3  /************************************************************/
30828  00  =3  typedef struct _ZW_TIME_PARAMETERS_GET_FRAME_
30829  00  =3  {
30830  00  =3      BYTE      cmdClass;                     /* The command class */
30831  00  =3      BYTE      cmd;                          /* The command */
30832  00  =3  } ZW_TIME_PARAMETERS_GET_FRAME;
30833  00  =3  
30834  00  =3  /************************************************************/
30835  00  =3  /* Time Parameters Report command class structs */          
30836  00  =3  /************************************************************/
30837  00  =3  typedef struct _ZW_TIME_PARAMETERS_REPORT_FRAME_
30838  00  =3  {
30839  00  =3      BYTE      cmdClass;                     /* The command class */
30840  00  =3      BYTE      cmd;                          /* The command */
30841  00  =3      BYTE      year1;                        /* MSB */
30842  00  =3      BYTE      year2;                        /* LSB */
30843  00  =3      BYTE      month;                        /**/
30844  00  =3      BYTE      day;                          /**/
30845  00  =3      BYTE      hourUtc;                      /**/
30846  00  =3      BYTE      minuteUtc;                    /**/
30847  00  =3      BYTE      secondUtc;                    /**/
30848  00  =3  } ZW_TIME_PARAMETERS_REPORT_FRAME;
30849  00  =3  
30850  00  =3  /************************************************************/
30851  00  =3  /* Time Parameters Set command class structs */             
30852  00  =3  /************************************************************/
30853  00  =3  typedef struct _ZW_TIME_PARAMETERS_SET_FRAME_
30854  00  =3  {
30855  00  =3      BYTE      cmdClass;                     /* The command class */
30856  00  =3      BYTE      cmd;                          /* The command */
30857  00  =3      BYTE      year1;                        /* MSB */
30858  00  =3      BYTE      year2;                        /* LSB */
30859  00  =3      BYTE      month;                        /**/
30860  00  =3      BYTE      day;                          /**/
30861  00  =3      BYTE      hourUtc;                      /**/
30862  00  =3      BYTE      minuteUtc;                    /**/
30863  00  =3      BYTE      secondUtc;                    /**/
30864  00  =3  } ZW_TIME_PARAMETERS_SET_FRAME;
30865  00  =3  
30866  00  =3  /************************************************************/
30867  00  =3  /* Date Get command class structs */                        
30868  00  =3  /************************************************************/
30869  00  =3  typedef struct _ZW_DATE_GET_FRAME_
30870  00  =3  {
30871  00  =3      BYTE      cmdClass;                     /* The command class */
30872  00  =3      BYTE      cmd;                          /* The command */
30873  00  =3  } ZW_DATE_GET_FRAME;
30874  00  =3  
30875  00  =3  /************************************************************/
30876  00  =3  /* Date Report command class structs */                     
30877  00  =3  /************************************************************/
30878  00  =3  typedef struct _ZW_DATE_REPORT_FRAME_
30879  00  =3  {
30880  00  =3      BYTE      cmdClass;                     /* The command class */
30881  00  =3      BYTE      cmd;                          /* The command */
30882  00  =3      BYTE      year1;                        /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 515 

30883  00  =3      BYTE      year2;                        /* LSB */
30884  00  =3      BYTE      month;                        /**/
30885  00  =3      BYTE      day;                          /**/
30886  00  =3  } ZW_DATE_REPORT_FRAME;
30887  00  =3  
30888  00  =3  /************************************************************/
30889  00  =3  /* Time Get command class structs */                        
30890  00  =3  /************************************************************/
30891  00  =3  typedef struct _ZW_TIME_GET_FRAME_
30892  00  =3  {
30893  00  =3      BYTE      cmdClass;                     /* The command class */
30894  00  =3      BYTE      cmd;                          /* The command */
30895  00  =3  } ZW_TIME_GET_FRAME;
30896  00  =3  
30897  00  =3  /************************************************************/
30898  00  =3  /* Time Report command class structs */                     
30899  00  =3  /************************************************************/
30900  00  =3  typedef struct _ZW_TIME_REPORT_FRAME_
30901  00  =3  {
30902  00  =3      BYTE      cmdClass;                     /* The command class */
30903  00  =3      BYTE      cmd;                          /* The command */
30904  00  =3      BYTE      hourLocalTime;                /* masked byte */
30905  00  =3      BYTE      minuteLocalTime;              /**/
30906  00  =3      BYTE      secondLocalTime;              /**/
30907  00  =3  } ZW_TIME_REPORT_FRAME;
30908  00  =3  
30909  00  =3  /************************************************************/
30910  00  =3  /* Date Get V2 command class structs */                     
30911  00  =3  /************************************************************/
30912  00  =3  typedef struct _ZW_DATE_GET_V2_FRAME_
30913  00  =3  {
30914  00  =3      BYTE      cmdClass;                     /* The command class */
30915  00  =3      BYTE      cmd;                          /* The command */
30916  00  =3  } ZW_DATE_GET_V2_FRAME;
30917  00  =3  
30918  00  =3  /************************************************************/
30919  00  =3  /* Date Report V2 command class structs */                  
30920  00  =3  /************************************************************/
30921  00  =3  typedef struct _ZW_DATE_REPORT_V2_FRAME_
30922  00  =3  {
30923  00  =3      BYTE      cmdClass;                     /* The command class */
30924  00  =3      BYTE      cmd;                          /* The command */
30925  00  =3      BYTE      year1;                        /* MSB */
30926  00  =3      BYTE      year2;                        /* LSB */
30927  00  =3      BYTE      month;                        /**/
30928  00  =3      BYTE      day;                          /**/
30929  00  =3  } ZW_DATE_REPORT_V2_FRAME;
30930  00  =3  
30931  00  =3  /************************************************************/
30932  00  =3  /* Time Get V2 command class structs */                     
30933  00  =3  /************************************************************/
30934  00  =3  typedef struct _ZW_TIME_GET_V2_FRAME_
30935  00  =3  {
30936  00  =3      BYTE      cmdClass;                     /* The command class */
30937  00  =3      BYTE      cmd;                          /* The command */
30938  00  =3  } ZW_TIME_GET_V2_FRAME;
30939  00  =3  
30940  00  =3  /************************************************************/
30941  00  =3  /* Time Offset Get V2 command class structs */              
30942  00  =3  /************************************************************/
30943  00  =3  typedef struct _ZW_TIME_OFFSET_GET_V2_FRAME_
30944  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 516 

30945  00  =3      BYTE      cmdClass;                     /* The command class */
30946  00  =3      BYTE      cmd;                          /* The command */
30947  00  =3  } ZW_TIME_OFFSET_GET_V2_FRAME;
30948  00  =3  
30949  00  =3  /************************************************************/
30950  00  =3  /* Time Offset Report V2 command class structs */           
30951  00  =3  /************************************************************/
30952  00  =3  typedef struct _ZW_TIME_OFFSET_REPORT_V2_FRAME_
30953  00  =3  {
30954  00  =3      BYTE      cmdClass;                     /* The command class */
30955  00  =3      BYTE      cmd;                          /* The command */
30956  00  =3      BYTE      level;                        /* masked byte */
30957  00  =3      BYTE      minuteTzo;                    /**/
30958  00  =3      BYTE      level2;                       /* masked byte */
30959  00  =3      BYTE      monthStartDst;                /**/
30960  00  =3      BYTE      dayStartDst;                  /**/
30961  00  =3      BYTE      hourStartDst;                 /**/
30962  00  =3      BYTE      monthEndDst;                  /**/
30963  00  =3      BYTE      dayEndDst;                    /**/
30964  00  =3      BYTE      hourEndDst;                   /**/
30965  00  =3  } ZW_TIME_OFFSET_REPORT_V2_FRAME;
30966  00  =3  
30967  00  =3  /************************************************************/
30968  00  =3  /* Time Offset Set V2 command class structs */              
30969  00  =3  /************************************************************/
30970  00  =3  typedef struct _ZW_TIME_OFFSET_SET_V2_FRAME_
30971  00  =3  {
30972  00  =3      BYTE      cmdClass;                     /* The command class */
30973  00  =3      BYTE      cmd;                          /* The command */
30974  00  =3      BYTE      level;                        /* masked byte */
30975  00  =3      BYTE      minuteTzo;                    /**/
30976  00  =3      BYTE      level2;                       /* masked byte */
30977  00  =3      BYTE      monthStartDst;                /**/
30978  00  =3      BYTE      dayStartDst;                  /**/
30979  00  =3      BYTE      hourStartDst;                 /**/
30980  00  =3      BYTE      monthEndDst;                  /**/
30981  00  =3      BYTE      dayEndDst;                    /**/
30982  00  =3      BYTE      hourEndDst;                   /**/
30983  00  =3  } ZW_TIME_OFFSET_SET_V2_FRAME;
30984  00  =3  
30985  00  =3  /************************************************************/
30986  00  =3  /* Time Report V2 command class structs */                  
30987  00  =3  /************************************************************/
30988  00  =3  typedef struct _ZW_TIME_REPORT_V2_FRAME_
30989  00  =3  {
30990  00  =3      BYTE      cmdClass;                     /* The command class */
30991  00  =3      BYTE      cmd;                          /* The command */
30992  00  =3      BYTE      hourLocalTime;                /* masked byte */
30993  00  =3      BYTE      minuteLocalTime;              /**/
30994  00  =3      BYTE      secondLocalTime;              /**/
30995  00  =3  } ZW_TIME_REPORT_V2_FRAME;
30996  00  =3  
30997  00  =3  /************************************************************/
30998  00  =3  /* Command First Segment 1byte V2 command class structs */  
30999  00  =3  /************************************************************/
31000  00  =3  typedef struct _ZW_COMMAND_FIRST_SEGMENT_1BYTE_V2_FRAME_
31001  00  =3  {
31002  00  =3      BYTE      cmdClass;                     /* The command class */
31003  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31004  00  =3      BYTE      datagramSize2;                /**/
31005  00  =3      BYTE      properties2;                  /* masked byte */
31006  00  =3      BYTE      headerExtensionLength;        /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 517 

31007  00  =3      BYTE      headerExtension1;             
31008  00  =3      BYTE      payload1;                     
31009  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31010  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31011  00  =3  } ZW_COMMAND_FIRST_SEGMENT_1BYTE_V2_FRAME;
31012  00  =3  
31013  00  =3  /************************************************************/
31014  00  =3  /* Command First Segment 2byte V2 command class structs */  
31015  00  =3  /************************************************************/
31016  00  =3  typedef struct _ZW_COMMAND_FIRST_SEGMENT_2BYTE_V2_FRAME_
31017  00  =3  {
31018  00  =3      BYTE      cmdClass;                     /* The command class */
31019  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31020  00  =3      BYTE      datagramSize2;                /**/
31021  00  =3      BYTE      properties2;                  /* masked byte */
31022  00  =3      BYTE      headerExtensionLength;        /**/
31023  00  =3      BYTE      headerExtension1;             /* MSB */
31024  00  =3      BYTE      headerExtension2;             /* LSB */
31025  00  =3      BYTE      payload1;                     /* MSB */
31026  00  =3      BYTE      payload2;                     /* LSB */
31027  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31028  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31029  00  =3  } ZW_COMMAND_FIRST_SEGMENT_2BYTE_V2_FRAME;
31030  00  =3  
31031  00  =3  /************************************************************/
31032  00  =3  /* Command First Segment 3byte V2 command class structs */  
31033  00  =3  /************************************************************/
31034  00  =3  typedef struct _ZW_COMMAND_FIRST_SEGMENT_3BYTE_V2_FRAME_
31035  00  =3  {
31036  00  =3      BYTE      cmdClass;                     /* The command class */
31037  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31038  00  =3      BYTE      datagramSize2;                /**/
31039  00  =3      BYTE      properties2;                  /* masked byte */
31040  00  =3      BYTE      headerExtensionLength;        /**/
31041  00  =3      BYTE      headerExtension1;             /* MSB */
31042  00  =3      BYTE      headerExtension2;             
31043  00  =3      BYTE      headerExtension3;             /* LSB */
31044  00  =3      BYTE      payload1;                     /* MSB */
31045  00  =3      BYTE      payload2;                     
31046  00  =3      BYTE      payload3;                     /* LSB */
31047  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31048  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31049  00  =3  } ZW_COMMAND_FIRST_SEGMENT_3BYTE_V2_FRAME;
31050  00  =3  
31051  00  =3  /************************************************************/
31052  00  =3  /* Command First Segment 4byte V2 command class structs */  
31053  00  =3  /************************************************************/
31054  00  =3  typedef struct _ZW_COMMAND_FIRST_SEGMENT_4BYTE_V2_FRAME_
31055  00  =3  {
31056  00  =3      BYTE      cmdClass;                     /* The command class */
31057  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31058  00  =3      BYTE      datagramSize2;                /**/
31059  00  =3      BYTE      properties2;                  /* masked byte */
31060  00  =3      BYTE      headerExtensionLength;        /**/
31061  00  =3      BYTE      headerExtension1;             /* MSB */
31062  00  =3      BYTE      headerExtension2;             
31063  00  =3      BYTE      headerExtension3;             
31064  00  =3      BYTE      headerExtension4;             /* LSB */
31065  00  =3      BYTE      payload1;                     /* MSB */
31066  00  =3      BYTE      payload2;                     
31067  00  =3      BYTE      payload3;                     
31068  00  =3      BYTE      payload4;                     /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 518 

31069  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31070  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31071  00  =3  } ZW_COMMAND_FIRST_SEGMENT_4BYTE_V2_FRAME;
31072  00  =3  
31073  00  =3  /************************************************************/
31074  00  =3  /* Command Segment Complete V2 command class structs */     
31075  00  =3  /************************************************************/
31076  00  =3  typedef struct _ZW_COMMAND_SEGMENT_COMPLETE_V2_FRAME_
31077  00  =3  {
31078  00  =3      BYTE      cmdClass;                     /* The command class */
31079  00  =3      BYTE      cmd_reserved;                 /* The command + parameter reserved */
31080  00  =3      BYTE      properties2;                  /* masked byte */
31081  00  =3  } ZW_COMMAND_SEGMENT_COMPLETE_V2_FRAME;
31082  00  =3  
31083  00  =3  /************************************************************/
31084  00  =3  /* Command Segment Request V2 command class structs */      
31085  00  =3  /************************************************************/
31086  00  =3  typedef struct _ZW_COMMAND_SEGMENT_REQUEST_V2_FRAME_
31087  00  =3  {
31088  00  =3      BYTE      cmdClass;                     /* The command class */
31089  00  =3      BYTE      cmd_reserved;                 /* The command + parameter reserved */
31090  00  =3      BYTE      properties2;                  /* masked byte */
31091  00  =3      BYTE      datagramOffset2;              /**/
31092  00  =3  } ZW_COMMAND_SEGMENT_REQUEST_V2_FRAME;
31093  00  =3  
31094  00  =3  /************************************************************/
31095  00  =3  /* Command Segment Wait V2 command class structs */         
31096  00  =3  /************************************************************/
31097  00  =3  typedef struct _ZW_COMMAND_SEGMENT_WAIT_V2_FRAME_
31098  00  =3  {
31099  00  =3      BYTE      cmdClass;                     /* The command class */
31100  00  =3      BYTE      cmd_reserved;                 /* The command + parameter reserved */
31101  00  =3      BYTE      pendingFragments;             /**/
31102  00  =3  } ZW_COMMAND_SEGMENT_WAIT_V2_FRAME;
31103  00  =3  
31104  00  =3  /************************************************************/
31105  00  =3  /* Command Subsequent Segment 1byte V2 command class structs */
31106  00  =3  /************************************************************/
31107  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_SEGMENT_1BYTE_V2_FRAME_
31108  00  =3  {
31109  00  =3      BYTE      cmdClass;                     /* The command class */
31110  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31111  00  =3      BYTE      datagramSize2;                /**/
31112  00  =3      BYTE      properties2;                  /* masked byte */
31113  00  =3      BYTE      datagramOffset2;              /**/
31114  00  =3      BYTE      headerExtensionLength;        /**/
31115  00  =3      BYTE      headerExtension1;             
31116  00  =3      BYTE      payload1;                     
31117  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31118  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31119  00  =3  } ZW_COMMAND_SUBSEQUENT_SEGMENT_1BYTE_V2_FRAME;
31120  00  =3  
31121  00  =3  /************************************************************/
31122  00  =3  /* Command Subsequent Segment 2byte V2 command class structs */
31123  00  =3  /************************************************************/
31124  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_SEGMENT_2BYTE_V2_FRAME_
31125  00  =3  {
31126  00  =3      BYTE      cmdClass;                     /* The command class */
31127  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31128  00  =3      BYTE      datagramSize2;                /**/
31129  00  =3      BYTE      properties2;                  /* masked byte */
31130  00  =3      BYTE      datagramOffset2;              /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 519 

31131  00  =3      BYTE      headerExtensionLength;        /**/
31132  00  =3      BYTE      headerExtension1;             /* MSB */
31133  00  =3      BYTE      headerExtension2;             /* LSB */
31134  00  =3      BYTE      payload1;                     /* MSB */
31135  00  =3      BYTE      payload2;                     /* LSB */
31136  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31137  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31138  00  =3  } ZW_COMMAND_SUBSEQUENT_SEGMENT_2BYTE_V2_FRAME;
31139  00  =3  
31140  00  =3  /************************************************************/
31141  00  =3  /* Command Subsequent Segment 3byte V2 command class structs */
31142  00  =3  /************************************************************/
31143  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_SEGMENT_3BYTE_V2_FRAME_
31144  00  =3  {
31145  00  =3      BYTE      cmdClass;                     /* The command class */
31146  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31147  00  =3      BYTE      datagramSize2;                /**/
31148  00  =3      BYTE      properties2;                  /* masked byte */
31149  00  =3      BYTE      datagramOffset2;              /**/
31150  00  =3      BYTE      headerExtensionLength;        /**/
31151  00  =3      BYTE      headerExtension1;             /* MSB */
31152  00  =3      BYTE      headerExtension2;             
31153  00  =3      BYTE      headerExtension3;             /* LSB */
31154  00  =3      BYTE      payload1;                     /* MSB */
31155  00  =3      BYTE      payload2;                     
31156  00  =3      BYTE      payload3;                     /* LSB */
31157  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31158  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31159  00  =3  } ZW_COMMAND_SUBSEQUENT_SEGMENT_3BYTE_V2_FRAME;
31160  00  =3  
31161  00  =3  /************************************************************/
31162  00  =3  /* Command Subsequent Segment 4byte V2 command class structs */
31163  00  =3  /************************************************************/
31164  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_SEGMENT_4BYTE_V2_FRAME_
31165  00  =3  {
31166  00  =3      BYTE      cmdClass;                     /* The command class */
31167  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31168  00  =3      BYTE      datagramSize2;                /**/
31169  00  =3      BYTE      properties2;                  /* masked byte */
31170  00  =3      BYTE      datagramOffset2;              /**/
31171  00  =3      BYTE      headerExtensionLength;        /**/
31172  00  =3      BYTE      headerExtension1;             /* MSB */
31173  00  =3      BYTE      headerExtension2;             
31174  00  =3      BYTE      headerExtension3;             
31175  00  =3      BYTE      headerExtension4;             /* LSB */
31176  00  =3      BYTE      payload1;                     /* MSB */
31177  00  =3      BYTE      payload2;                     
31178  00  =3      BYTE      payload3;                     
31179  00  =3      BYTE      payload4;                     /* LSB */
31180  00  =3      BYTE      frameCheckSequence1;          /* MSB */
31181  00  =3      BYTE      frameCheckSequence2;          /* LSB */
31182  00  =3  } ZW_COMMAND_SUBSEQUENT_SEGMENT_4BYTE_V2_FRAME;
31183  00  =3  
31184  00  =3  /************************************************************/
31185  00  =3  /* Command First Fragment 1byte command class structs */    
31186  00  =3  /************************************************************/
31187  00  =3  typedef struct _ZW_COMMAND_FIRST_FRAGMENT_1BYTE_FRAME_
31188  00  =3  {
31189  00  =3      BYTE      cmdClass;                     /* The command class */
31190  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31191  00  =3      BYTE      datagramSize2;                /**/
31192  00  =3      BYTE      properties2;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 520 

31193  00  =3      BYTE      payload1;                     
31194  00  =3      BYTE      checksum1;                    /* MSB */
31195  00  =3      BYTE      checksum2;                    /* LSB */
31196  00  =3  } ZW_COMMAND_FIRST_FRAGMENT_1BYTE_FRAME;
31197  00  =3  
31198  00  =3  /************************************************************/
31199  00  =3  /* Command First Fragment 2byte command class structs */    
31200  00  =3  /************************************************************/
31201  00  =3  typedef struct _ZW_COMMAND_FIRST_FRAGMENT_2BYTE_FRAME_
31202  00  =3  {
31203  00  =3      BYTE      cmdClass;                     /* The command class */
31204  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31205  00  =3      BYTE      datagramSize2;                /**/
31206  00  =3      BYTE      properties2;                  /* masked byte */
31207  00  =3      BYTE      payload1;                     /* MSB */
31208  00  =3      BYTE      payload2;                     /* LSB */
31209  00  =3      BYTE      checksum1;                    /* MSB */
31210  00  =3      BYTE      checksum2;                    /* LSB */
31211  00  =3  } ZW_COMMAND_FIRST_FRAGMENT_2BYTE_FRAME;
31212  00  =3  
31213  00  =3  /************************************************************/
31214  00  =3  /* Command First Fragment 3byte command class structs */    
31215  00  =3  /************************************************************/
31216  00  =3  typedef struct _ZW_COMMAND_FIRST_FRAGMENT_3BYTE_FRAME_
31217  00  =3  {
31218  00  =3      BYTE      cmdClass;                     /* The command class */
31219  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31220  00  =3      BYTE      datagramSize2;                /**/
31221  00  =3      BYTE      properties2;                  /* masked byte */
31222  00  =3      BYTE      payload1;                     /* MSB */
31223  00  =3      BYTE      payload2;                     
31224  00  =3      BYTE      payload3;                     /* LSB */
31225  00  =3      BYTE      checksum1;                    /* MSB */
31226  00  =3      BYTE      checksum2;                    /* LSB */
31227  00  =3  } ZW_COMMAND_FIRST_FRAGMENT_3BYTE_FRAME;
31228  00  =3  
31229  00  =3  /************************************************************/
31230  00  =3  /* Command First Fragment 4byte command class structs */    
31231  00  =3  /************************************************************/
31232  00  =3  typedef struct _ZW_COMMAND_FIRST_FRAGMENT_4BYTE_FRAME_
31233  00  =3  {
31234  00  =3      BYTE      cmdClass;                     /* The command class */
31235  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1  */
31236  00  =3      BYTE      datagramSize2;                /**/
31237  00  =3      BYTE      properties2;                  /* masked byte */
31238  00  =3      BYTE      payload1;                     /* MSB */
31239  00  =3      BYTE      payload2;                     
31240  00  =3      BYTE      payload3;                     
31241  00  =3      BYTE      payload4;                     /* LSB */
31242  00  =3      BYTE      checksum1;                    /* MSB */
31243  00  =3      BYTE      checksum2;                    /* LSB */
31244  00  =3  } ZW_COMMAND_FIRST_FRAGMENT_4BYTE_FRAME;
31245  00  =3  
31246  00  =3  /************************************************************/
31247  00  =3  /* Command Subsequent Fragment 1byte command class structs */
31248  00  =3  /************************************************************/
31249  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_FRAGMENT_1BYTE_FRAME_
31250  00  =3  {
31251  00  =3      BYTE      cmdClass;                     /* The command class */
31252  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31253  00  =3      BYTE      datagramSize2;                /**/
31254  00  =3      BYTE      properties2;                  /* masked byte */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 521 

31255  00  =3      BYTE      datagramOffset2;              /**/
31256  00  =3      BYTE      payload1;                     
31257  00  =3      BYTE      checksum1;                    /* MSB */
31258  00  =3      BYTE      checksum2;                    /* LSB */
31259  00  =3  } ZW_COMMAND_SUBSEQUENT_FRAGMENT_1BYTE_FRAME;
31260  00  =3  
31261  00  =3  /************************************************************/
31262  00  =3  /* Command Subsequent Fragment 2byte command class structs */
31263  00  =3  /************************************************************/
31264  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_FRAGMENT_2BYTE_FRAME_
31265  00  =3  {
31266  00  =3      BYTE      cmdClass;                     /* The command class */
31267  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31268  00  =3      BYTE      datagramSize2;                /**/
31269  00  =3      BYTE      properties2;                  /* masked byte */
31270  00  =3      BYTE      datagramOffset2;              /**/
31271  00  =3      BYTE      payload1;                     /* MSB */
31272  00  =3      BYTE      payload2;                     /* LSB */
31273  00  =3      BYTE      checksum1;                    /* MSB */
31274  00  =3      BYTE      checksum2;                    /* LSB */
31275  00  =3  } ZW_COMMAND_SUBSEQUENT_FRAGMENT_2BYTE_FRAME;
31276  00  =3  
31277  00  =3  /************************************************************/
31278  00  =3  /* Command Subsequent Fragment 3byte command class structs */
31279  00  =3  /************************************************************/
31280  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_FRAGMENT_3BYTE_FRAME_
31281  00  =3  {
31282  00  =3      BYTE      cmdClass;                     /* The command class */
31283  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31284  00  =3      BYTE      datagramSize2;                /**/
31285  00  =3      BYTE      properties2;                  /* masked byte */
31286  00  =3      BYTE      datagramOffset2;              /**/
31287  00  =3      BYTE      payload1;                     /* MSB */
31288  00  =3      BYTE      payload2;                     
31289  00  =3      BYTE      payload3;                     /* LSB */
31290  00  =3      BYTE      checksum1;                    /* MSB */
31291  00  =3      BYTE      checksum2;                    /* LSB */
31292  00  =3  } ZW_COMMAND_SUBSEQUENT_FRAGMENT_3BYTE_FRAME;
31293  00  =3  
31294  00  =3  /************************************************************/
31295  00  =3  /* Command Subsequent Fragment 4byte command class structs */
31296  00  =3  /************************************************************/
31297  00  =3  typedef struct _ZW_COMMAND_SUBSEQUENT_FRAGMENT_4BYTE_FRAME_
31298  00  =3  {
31299  00  =3      BYTE      cmdClass;                     /* The command class */
31300  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter datagram_size_1 */
31301  00  =3      BYTE      datagramSize2;                /**/
31302  00  =3      BYTE      properties2;                  /* masked byte */
31303  00  =3      BYTE      datagramOffset2;              /**/
31304  00  =3      BYTE      payload1;                     /* MSB */
31305  00  =3      BYTE      payload2;                     
31306  00  =3      BYTE      payload3;                     
31307  00  =3      BYTE      payload4;                     /* LSB */
31308  00  =3      BYTE      checksum1;                    /* MSB */
31309  00  =3      BYTE      checksum2;                    /* LSB */
31310  00  =3  } ZW_COMMAND_SUBSEQUENT_FRAGMENT_4BYTE_FRAME;
31311  00  =3  
31312  00  =3  /************************************************************/
31313  00  =3  /* User Code Get command class structs */                   
31314  00  =3  /************************************************************/
31315  00  =3  typedef struct _ZW_USER_CODE_GET_FRAME_
31316  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 522 

31317  00  =3      BYTE      cmdClass;                     /* The command class */
31318  00  =3      BYTE      cmd;                          /* The command */
31319  00  =3      BYTE      userIdentifier;               /**/
31320  00  =3  } ZW_USER_CODE_GET_FRAME;
31321  00  =3  
31322  00  =3  /************************************************************/
31323  00  =3  /* User Code Report 1byte command class structs */          
31324  00  =3  /************************************************************/
31325  00  =3  typedef struct _ZW_USER_CODE_REPORT_1BYTE_FRAME_
31326  00  =3  {
31327  00  =3      BYTE      cmdClass;                     /* The command class */
31328  00  =3      BYTE      cmd;                          /* The command */
31329  00  =3      BYTE      userIdentifier;               /**/
31330  00  =3      BYTE      userIdStatus;                 /**/
31331  00  =3      BYTE      userCode1;                    
31332  00  =3  } ZW_USER_CODE_REPORT_1BYTE_FRAME;
31333  00  =3  
31334  00  =3  /************************************************************/
31335  00  =3  /* User Code Report 2byte command class structs */          
31336  00  =3  /************************************************************/
31337  00  =3  typedef struct _ZW_USER_CODE_REPORT_2BYTE_FRAME_
31338  00  =3  {
31339  00  =3      BYTE      cmdClass;                     /* The command class */
31340  00  =3      BYTE      cmd;                          /* The command */
31341  00  =3      BYTE      userIdentifier;               /**/
31342  00  =3      BYTE      userIdStatus;                 /**/
31343  00  =3      BYTE      userCode1;                    /* MSB */
31344  00  =3      BYTE      userCode2;                    /* LSB */
31345  00  =3  } ZW_USER_CODE_REPORT_2BYTE_FRAME;
31346  00  =3  
31347  00  =3  /************************************************************/
31348  00  =3  /* User Code Report 3byte command class structs */          
31349  00  =3  /************************************************************/
31350  00  =3  typedef struct _ZW_USER_CODE_REPORT_3BYTE_FRAME_
31351  00  =3  {
31352  00  =3      BYTE      cmdClass;                     /* The command class */
31353  00  =3      BYTE      cmd;                          /* The command */
31354  00  =3      BYTE      userIdentifier;               /**/
31355  00  =3      BYTE      userIdStatus;                 /**/
31356  00  =3      BYTE      userCode1;                    /* MSB */
31357  00  =3      BYTE      userCode2;                    
31358  00  =3      BYTE      userCode3;                    /* LSB */
31359  00  =3  } ZW_USER_CODE_REPORT_3BYTE_FRAME;
31360  00  =3  
31361  00  =3  /************************************************************/
31362  00  =3  /* User Code Report 4byte command class structs */          
31363  00  =3  /************************************************************/
31364  00  =3  typedef struct _ZW_USER_CODE_REPORT_4BYTE_FRAME_
31365  00  =3  {
31366  00  =3      BYTE      cmdClass;                     /* The command class */
31367  00  =3      BYTE      cmd;                          /* The command */
31368  00  =3      BYTE      userIdentifier;               /**/
31369  00  =3      BYTE      userIdStatus;                 /**/
31370  00  =3      BYTE      userCode1;                    /* MSB */
31371  00  =3      BYTE      userCode2;                    
31372  00  =3      BYTE      userCode3;                    
31373  00  =3      BYTE      userCode4;                    /* LSB */
31374  00  =3  } ZW_USER_CODE_REPORT_4BYTE_FRAME;
31375  00  =3  
31376  00  =3  /************************************************************/
31377  00  =3  /* User Code Set 1byte command class structs */             
31378  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 523 

31379  00  =3  typedef struct _ZW_USER_CODE_SET_1BYTE_FRAME_
31380  00  =3  {
31381  00  =3      BYTE      cmdClass;                     /* The command class */
31382  00  =3      BYTE      cmd;                          /* The command */
31383  00  =3      BYTE      userIdentifier;               /**/
31384  00  =3      BYTE      userIdStatus;                 /**/
31385  00  =3      BYTE      userCode1;                    
31386  00  =3  } ZW_USER_CODE_SET_1BYTE_FRAME;
31387  00  =3  
31388  00  =3  /************************************************************/
31389  00  =3  /* User Code Set 2byte command class structs */             
31390  00  =3  /************************************************************/
31391  00  =3  typedef struct _ZW_USER_CODE_SET_2BYTE_FRAME_
31392  00  =3  {
31393  00  =3      BYTE      cmdClass;                     /* The command class */
31394  00  =3      BYTE      cmd;                          /* The command */
31395  00  =3      BYTE      userIdentifier;               /**/
31396  00  =3      BYTE      userIdStatus;                 /**/
31397  00  =3      BYTE      userCode1;                    /* MSB */
31398  00  =3      BYTE      userCode2;                    /* LSB */
31399  00  =3  } ZW_USER_CODE_SET_2BYTE_FRAME;
31400  00  =3  
31401  00  =3  /************************************************************/
31402  00  =3  /* User Code Set 3byte command class structs */             
31403  00  =3  /************************************************************/
31404  00  =3  typedef struct _ZW_USER_CODE_SET_3BYTE_FRAME_
31405  00  =3  {
31406  00  =3      BYTE      cmdClass;                     /* The command class */
31407  00  =3      BYTE      cmd;                          /* The command */
31408  00  =3      BYTE      userIdentifier;               /**/
31409  00  =3      BYTE      userIdStatus;                 /**/
31410  00  =3      BYTE      userCode1;                    /* MSB */
31411  00  =3      BYTE      userCode2;                    
31412  00  =3      BYTE      userCode3;                    /* LSB */
31413  00  =3  } ZW_USER_CODE_SET_3BYTE_FRAME;
31414  00  =3  
31415  00  =3  /************************************************************/
31416  00  =3  /* User Code Set 4byte command class structs */             
31417  00  =3  /************************************************************/
31418  00  =3  typedef struct _ZW_USER_CODE_SET_4BYTE_FRAME_
31419  00  =3  {
31420  00  =3      BYTE      cmdClass;                     /* The command class */
31421  00  =3      BYTE      cmd;                          /* The command */
31422  00  =3      BYTE      userIdentifier;               /**/
31423  00  =3      BYTE      userIdStatus;                 /**/
31424  00  =3      BYTE      userCode1;                    /* MSB */
31425  00  =3      BYTE      userCode2;                    
31426  00  =3      BYTE      userCode3;                    
31427  00  =3      BYTE      userCode4;                    /* LSB */
31428  00  =3  } ZW_USER_CODE_SET_4BYTE_FRAME;
31429  00  =3  
31430  00  =3  /************************************************************/
31431  00  =3  /* Users Number Get command class structs */                
31432  00  =3  /************************************************************/
31433  00  =3  typedef struct _ZW_USERS_NUMBER_GET_FRAME_
31434  00  =3  {
31435  00  =3      BYTE      cmdClass;                     /* The command class */
31436  00  =3      BYTE      cmd;                          /* The command */
31437  00  =3  } ZW_USERS_NUMBER_GET_FRAME;
31438  00  =3  
31439  00  =3  /************************************************************/
31440  00  =3  /* Users Number Report command class structs */             
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 524 

31441  00  =3  /************************************************************/
31442  00  =3  typedef struct _ZW_USERS_NUMBER_REPORT_FRAME_
31443  00  =3  {
31444  00  =3      BYTE      cmdClass;                     /* The command class */
31445  00  =3      BYTE      cmd;                          /* The command */
31446  00  =3      BYTE      supportedUsers;               /**/
31447  00  =3  } ZW_USERS_NUMBER_REPORT_FRAME;
31448  00  =3  
31449  00  =3  /************************************************************/
31450  00  =3  /* Version Command Class Get command class structs */       
31451  00  =3  /************************************************************/
31452  00  =3  typedef struct _ZW_VERSION_COMMAND_CLASS_GET_FRAME_
31453  00  =3  {
31454  00  =3      BYTE      cmdClass;                     /* The command class */
31455  00  =3      BYTE      cmd;                          /* The command */
31456  00  =3      BYTE      requestedCommandClass;        /**/
31457  00  =3  } ZW_VERSION_COMMAND_CLASS_GET_FRAME;
31458  00  =3  
31459  00  =3  /************************************************************/
31460  00  =3  /* Version Command Class Report command class structs */    
31461  00  =3  /************************************************************/
31462  00  =3  typedef struct _ZW_VERSION_COMMAND_CLASS_REPORT_FRAME_
31463  00  =3  {
31464  00  =3      BYTE      cmdClass;                     /* The command class */
31465  00  =3      BYTE      cmd;                          /* The command */
31466  00  =3      BYTE      requestedCommandClass;        /**/
31467  00  =3      BYTE      commandClassVersion;          /**/
31468  00  =3  } ZW_VERSION_COMMAND_CLASS_REPORT_FRAME;
31469  00  =3  
31470  00  =3  /************************************************************/
31471  00  =3  /* Version Get command class structs */                     
31472  00  =3  /************************************************************/
31473  00  =3  typedef struct _ZW_VERSION_GET_FRAME_
31474  00  =3  {
31475  00  =3      BYTE      cmdClass;                     /* The command class */
31476  00  =3      BYTE      cmd;                          /* The command */
31477  00  =3  } ZW_VERSION_GET_FRAME;
31478  00  =3  
31479  00  =3  /************************************************************/
31480  00  =3  /* Version Report command class structs */                  
31481  00  =3  /************************************************************/
31482  00  =3  typedef struct _ZW_VERSION_REPORT_FRAME_
31483  00  =3  {
31484  00  =3      BYTE      cmdClass;                     /* The command class */
31485  00  =3      BYTE      cmd;                          /* The command */
31486  00  =3      BYTE      zWaveLibraryType;             /**/
31487  00  =3      BYTE      zWaveProtocolVersion;         /**/
31488  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31489  00  =3      BYTE      applicationVersion;           /**/
31490  00  =3      BYTE      applicationSubVersion;        /**/
31491  00  =3  } ZW_VERSION_REPORT_FRAME;
31492  00  =3  
31493  00  =3  /************************************************************/
31494  00  =3  /* Version Command Class Get V2 command class structs */    
31495  00  =3  /************************************************************/
31496  00  =3  typedef struct _ZW_VERSION_COMMAND_CLASS_GET_V2_FRAME_
31497  00  =3  {
31498  00  =3      BYTE      cmdClass;                     /* The command class */
31499  00  =3      BYTE      cmd;                          /* The command */
31500  00  =3      BYTE      requestedCommandClass;        /**/
31501  00  =3  } ZW_VERSION_COMMAND_CLASS_GET_V2_FRAME;
31502  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 525 

31503  00  =3  /************************************************************/
31504  00  =3  /* Version Command Class Report V2 command class structs */ 
31505  00  =3  /************************************************************/
31506  00  =3  typedef struct _ZW_VERSION_COMMAND_CLASS_REPORT_V2_FRAME_
31507  00  =3  {
31508  00  =3      BYTE      cmdClass;                     /* The command class */
31509  00  =3      BYTE      cmd;                          /* The command */
31510  00  =3      BYTE      requestedCommandClass;        /**/
31511  00  =3      BYTE      commandClassVersion;          /**/
31512  00  =3  } ZW_VERSION_COMMAND_CLASS_REPORT_V2_FRAME;
31513  00  =3  
31514  00  =3  /************************************************************/
31515  00  =3  /* Version Get V2 command class structs */                  
31516  00  =3  /************************************************************/
31517  00  =3  typedef struct _ZW_VERSION_GET_V2_FRAME_
31518  00  =3  {
31519  00  =3      BYTE      cmdClass;                     /* The command class */
31520  00  =3      BYTE      cmd;                          /* The command */
31521  00  =3  } ZW_VERSION_GET_V2_FRAME;
31522  00  =3  
31523  00  =3  /************************************************************/
31524  00  =3  /* Version Report V2 variant group structs */               
31525  00  =3  /************************************************************/
31526  00  =3  typedef struct _VG_VERSION_REPORT_V2_VG_
31527  00  =3  {
31528  00  =3      BYTE      firmwareVersion;              /**/
31529  00  =3      BYTE      firmwareSubVersion;           /**/
31530  00  =3  } VG_VERSION_REPORT_V2_VG;
31531  00  =3  
31532  00  =3  /************************************************************/
31533  00  =3  /* Version Report 1byte V2 command class structs */         
31534  00  =3  /************************************************************/
31535  00  =3  typedef struct _ZW_VERSION_REPORT_1BYTE_V2_FRAME_
31536  00  =3  {
31537  00  =3      BYTE      cmdClass;                     /* The command class */
31538  00  =3      BYTE      cmd;                          /* The command */
31539  00  =3      BYTE      zWaveLibraryType;             /**/
31540  00  =3      BYTE      zWaveProtocolVersion;         /**/
31541  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31542  00  =3      BYTE      firmware0Version;             /**/
31543  00  =3      BYTE      firmware0SubVersion;          /**/
31544  00  =3      BYTE      hardwareVersion;              /**/
31545  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31546  00  =3      VG_VERSION_REPORT_V2_VG variantgroup1;                /**/
31547  00  =3  } ZW_VERSION_REPORT_1BYTE_V2_FRAME;
31548  00  =3  
31549  00  =3  /************************************************************/
31550  00  =3  /* Version Report 2byte V2 command class structs */         
31551  00  =3  /************************************************************/
31552  00  =3  typedef struct _ZW_VERSION_REPORT_2BYTE_V2_FRAME_
31553  00  =3  {
31554  00  =3      BYTE      cmdClass;                     /* The command class */
31555  00  =3      BYTE      cmd;                          /* The command */
31556  00  =3      BYTE      zWaveLibraryType;             /**/
31557  00  =3      BYTE      zWaveProtocolVersion;         /**/
31558  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31559  00  =3      BYTE      firmware0Version;             /**/
31560  00  =3      BYTE      firmware0SubVersion;          /**/
31561  00  =3      BYTE      hardwareVersion;              /**/
31562  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31563  00  =3      VG_VERSION_REPORT_V2_VG variantgroup1;                /**/
31564  00  =3      VG_VERSION_REPORT_V2_VG variantgroup2;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 526 

31565  00  =3  } ZW_VERSION_REPORT_2BYTE_V2_FRAME;
31566  00  =3  
31567  00  =3  /************************************************************/
31568  00  =3  /* Version Report 3byte V2 command class structs */         
31569  00  =3  /************************************************************/
31570  00  =3  typedef struct _ZW_VERSION_REPORT_3BYTE_V2_FRAME_
31571  00  =3  {
31572  00  =3      BYTE      cmdClass;                     /* The command class */
31573  00  =3      BYTE      cmd;                          /* The command */
31574  00  =3      BYTE      zWaveLibraryType;             /**/
31575  00  =3      BYTE      zWaveProtocolVersion;         /**/
31576  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31577  00  =3      BYTE      firmware0Version;             /**/
31578  00  =3      BYTE      firmware0SubVersion;          /**/
31579  00  =3      BYTE      hardwareVersion;              /**/
31580  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31581  00  =3      VG_VERSION_REPORT_V2_VG variantgroup1;                /**/
31582  00  =3      VG_VERSION_REPORT_V2_VG variantgroup2;                /**/
31583  00  =3      VG_VERSION_REPORT_V2_VG variantgroup3;                /**/
31584  00  =3  } ZW_VERSION_REPORT_3BYTE_V2_FRAME;
31585  00  =3  
31586  00  =3  /************************************************************/
31587  00  =3  /* Version Report 4byte V2 command class structs */         
31588  00  =3  /************************************************************/
31589  00  =3  typedef struct _ZW_VERSION_REPORT_4BYTE_V2_FRAME_
31590  00  =3  {
31591  00  =3      BYTE      cmdClass;                     /* The command class */
31592  00  =3      BYTE      cmd;                          /* The command */
31593  00  =3      BYTE      zWaveLibraryType;             /**/
31594  00  =3      BYTE      zWaveProtocolVersion;         /**/
31595  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31596  00  =3      BYTE      firmware0Version;             /**/
31597  00  =3      BYTE      firmware0SubVersion;          /**/
31598  00  =3      BYTE      hardwareVersion;              /**/
31599  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31600  00  =3      VG_VERSION_REPORT_V2_VG variantgroup1;                /**/
31601  00  =3      VG_VERSION_REPORT_V2_VG variantgroup2;                /**/
31602  00  =3      VG_VERSION_REPORT_V2_VG variantgroup3;                /**/
31603  00  =3      VG_VERSION_REPORT_V2_VG variantgroup4;                /**/
31604  00  =3  } ZW_VERSION_REPORT_4BYTE_V2_FRAME;
31605  00  =3  
31606  00  =3  /************************************************************/
31607  00  =3  /* Version Command Class Get V3 command class structs */    
31608  00  =3  /************************************************************/
31609  00  =3  typedef struct _ZW_VERSION_COMMAND_CLASS_GET_V3_FRAME_
31610  00  =3  {
31611  00  =3      BYTE      cmdClass;                     /* The command class */
31612  00  =3      BYTE      cmd;                          /* The command */
31613  00  =3      BYTE      requestedCommandClass;        /**/
31614  00  =3  } ZW_VERSION_COMMAND_CLASS_GET_V3_FRAME;
31615  00  =3  
31616  00  =3  /************************************************************/
31617  00  =3  /* Version Command Class Report V3 command class structs */ 
31618  00  =3  /************************************************************/
31619  00  =3  typedef struct _ZW_VERSION_COMMAND_CLASS_REPORT_V3_FRAME_
31620  00  =3  {
31621  00  =3      BYTE      cmdClass;                     /* The command class */
31622  00  =3      BYTE      cmd;                          /* The command */
31623  00  =3      BYTE      requestedCommandClass;        /**/
31624  00  =3      BYTE      commandClassVersion;          /**/
31625  00  =3  } ZW_VERSION_COMMAND_CLASS_REPORT_V3_FRAME;
31626  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 527 

31627  00  =3  /************************************************************/
31628  00  =3  /* Version Get V3 command class structs */                  
31629  00  =3  /************************************************************/
31630  00  =3  typedef struct _ZW_VERSION_GET_V3_FRAME_
31631  00  =3  {
31632  00  =3      BYTE      cmdClass;                     /* The command class */
31633  00  =3      BYTE      cmd;                          /* The command */
31634  00  =3  } ZW_VERSION_GET_V3_FRAME;
31635  00  =3  
31636  00  =3  /************************************************************/
31637  00  =3  /* Version Report V3 variant group structs */               
31638  00  =3  /************************************************************/
31639  00  =3  typedef struct _VG_VERSION_REPORT_V3_VG_
31640  00  =3  {
31641  00  =3      BYTE      firmwareVersion;              /**/
31642  00  =3      BYTE      firmwareSubVersion;           /**/
31643  00  =3  } VG_VERSION_REPORT_V3_VG;
31644  00  =3  
31645  00  =3  /************************************************************/
31646  00  =3  /* Version Report 1byte V3 command class structs */         
31647  00  =3  /************************************************************/
31648  00  =3  typedef struct _ZW_VERSION_REPORT_1BYTE_V3_FRAME_
31649  00  =3  {
31650  00  =3      BYTE      cmdClass;                     /* The command class */
31651  00  =3      BYTE      cmd;                          /* The command */
31652  00  =3      BYTE      zWaveLibraryType;             /**/
31653  00  =3      BYTE      zWaveProtocolVersion;         /**/
31654  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31655  00  =3      BYTE      firmware0Version;             /**/
31656  00  =3      BYTE      firmware0SubVersion;          /**/
31657  00  =3      BYTE      hardwareVersion;              /**/
31658  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31659  00  =3      VG_VERSION_REPORT_V3_VG variantgroup1;                /**/
31660  00  =3  } ZW_VERSION_REPORT_1BYTE_V3_FRAME;
31661  00  =3  
31662  00  =3  /************************************************************/
31663  00  =3  /* Version Report 2byte V3 command class structs */         
31664  00  =3  /************************************************************/
31665  00  =3  typedef struct _ZW_VERSION_REPORT_2BYTE_V3_FRAME_
31666  00  =3  {
31667  00  =3      BYTE      cmdClass;                     /* The command class */
31668  00  =3      BYTE      cmd;                          /* The command */
31669  00  =3      BYTE      zWaveLibraryType;             /**/
31670  00  =3      BYTE      zWaveProtocolVersion;         /**/
31671  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31672  00  =3      BYTE      firmware0Version;             /**/
31673  00  =3      BYTE      firmware0SubVersion;          /**/
31674  00  =3      BYTE      hardwareVersion;              /**/
31675  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31676  00  =3      VG_VERSION_REPORT_V3_VG variantgroup1;                /**/
31677  00  =3      VG_VERSION_REPORT_V3_VG variantgroup2;                /**/
31678  00  =3  } ZW_VERSION_REPORT_2BYTE_V3_FRAME;
31679  00  =3  
31680  00  =3  /************************************************************/
31681  00  =3  /* Version Report 3byte V3 command class structs */         
31682  00  =3  /************************************************************/
31683  00  =3  typedef struct _ZW_VERSION_REPORT_3BYTE_V3_FRAME_
31684  00  =3  {
31685  00  =3      BYTE      cmdClass;                     /* The command class */
31686  00  =3      BYTE      cmd;                          /* The command */
31687  00  =3      BYTE      zWaveLibraryType;             /**/
31688  00  =3      BYTE      zWaveProtocolVersion;         /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 528 

31689  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31690  00  =3      BYTE      firmware0Version;             /**/
31691  00  =3      BYTE      firmware0SubVersion;          /**/
31692  00  =3      BYTE      hardwareVersion;              /**/
31693  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31694  00  =3      VG_VERSION_REPORT_V3_VG variantgroup1;                /**/
31695  00  =3      VG_VERSION_REPORT_V3_VG variantgroup2;                /**/
31696  00  =3      VG_VERSION_REPORT_V3_VG variantgroup3;                /**/
31697  00  =3  } ZW_VERSION_REPORT_3BYTE_V3_FRAME;
31698  00  =3  
31699  00  =3  /************************************************************/
31700  00  =3  /* Version Report 4byte V3 command class structs */         
31701  00  =3  /************************************************************/
31702  00  =3  typedef struct _ZW_VERSION_REPORT_4BYTE_V3_FRAME_
31703  00  =3  {
31704  00  =3      BYTE      cmdClass;                     /* The command class */
31705  00  =3      BYTE      cmd;                          /* The command */
31706  00  =3      BYTE      zWaveLibraryType;             /**/
31707  00  =3      BYTE      zWaveProtocolVersion;         /**/
31708  00  =3      BYTE      zWaveProtocolSubVersion;      /**/
31709  00  =3      BYTE      firmware0Version;             /**/
31710  00  =3      BYTE      firmware0SubVersion;          /**/
31711  00  =3      BYTE      hardwareVersion;              /**/
31712  00  =3      BYTE      numberOfFirmwareTargets;      /**/
31713  00  =3      VG_VERSION_REPORT_V3_VG variantgroup1;                /**/
31714  00  =3      VG_VERSION_REPORT_V3_VG variantgroup2;                /**/
31715  00  =3      VG_VERSION_REPORT_V3_VG variantgroup3;                /**/
31716  00  =3      VG_VERSION_REPORT_V3_VG variantgroup4;                /**/
31717  00  =3  } ZW_VERSION_REPORT_4BYTE_V3_FRAME;
31718  00  =3  
31719  00  =3  /************************************************************/
31720  00  =3  /* Version Capabilities Get V3 command class structs */     
31721  00  =3  /************************************************************/
31722  00  =3  typedef struct _ZW_VERSION_CAPABILITIES_GET_V3_FRAME_
31723  00  =3  {
31724  00  =3      BYTE      cmdClass;                     /* The command class */
31725  00  =3      BYTE      cmd;                          /* The command */
31726  00  =3  } ZW_VERSION_CAPABILITIES_GET_V3_FRAME;
31727  00  =3  
31728  00  =3  /************************************************************/
31729  00  =3  /* Version Capabilities Report V3 command class structs */  
31730  00  =3  /************************************************************/
31731  00  =3  typedef struct _ZW_VERSION_CAPABILITIES_REPORT_V3_FRAME_
31732  00  =3  {
31733  00  =3      BYTE      cmdClass;                     /* The command class */
31734  00  =3      BYTE      cmd;                          /* The command */
31735  00  =3      BYTE      properties1;                  /* masked byte */
31736  00  =3  } ZW_VERSION_CAPABILITIES_REPORT_V3_FRAME;
31737  00  =3  
31738  00  =3  /************************************************************/
31739  00  =3  /* Version Zwave Software Get V3 command class structs */   
31740  00  =3  /************************************************************/
31741  00  =3  typedef struct _ZW_VERSION_ZWAVE_SOFTWARE_GET_V3_FRAME_
31742  00  =3  {
31743  00  =3      BYTE      cmdClass;                     /* The command class */
31744  00  =3      BYTE      cmd;                          /* The command */
31745  00  =3  } ZW_VERSION_ZWAVE_SOFTWARE_GET_V3_FRAME;
31746  00  =3  
31747  00  =3  /************************************************************/
31748  00  =3  /* Version Zwave Software Report V3 command class structs */
31749  00  =3  /************************************************************/
31750  00  =3  typedef struct _ZW_VERSION_ZWAVE_SOFTWARE_REPORT_V3_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 529 

31751  00  =3  {
31752  00  =3      BYTE      cmdClass;                     /* The command class */
31753  00  =3      BYTE      cmd;                          /* The command */
31754  00  =3      BYTE      sdkVersion1;                  /* MSB */
31755  00  =3      BYTE      sdkVersion2;                  
31756  00  =3      BYTE      sdkVersion3;                  /* LSB */
31757  00  =3      BYTE      applicationFrameworkApiVersion1;/* MSB */
31758  00  =3      BYTE      applicationFrameworkApiVersion2;
31759  00  =3      BYTE      applicationFrameworkApiVersion3;/* LSB */
31760  00  =3      BYTE      applicationFrameworkBuildNumber1;/* MSB */
31761  00  =3      BYTE      applicationFrameworkBuildNumber2;/* LSB */
31762  00  =3      BYTE      hostInterfaceVersion1;        /* MSB */
31763  00  =3      BYTE      hostInterfaceVersion2;        
31764  00  =3      BYTE      hostInterfaceVersion3;        /* LSB */
31765  00  =3      BYTE      hostInterfaceBuildNumber1;    /* MSB */
31766  00  =3      BYTE      hostInterfaceBuildNumber2;    /* LSB */
31767  00  =3      BYTE      zWaveProtocolVersion1;        /* MSB */
31768  00  =3      BYTE      zWaveProtocolVersion2;        
31769  00  =3      BYTE      zWaveProtocolVersion3;        /* LSB */
31770  00  =3      BYTE      zWaveProtocolBuildNumber1;    /* MSB */
31771  00  =3      BYTE      zWaveProtocolBuildNumber2;    /* LSB */
31772  00  =3      BYTE      applicationVersion1;          /* MSB */
31773  00  =3      BYTE      applicationVersion2;          
31774  00  =3      BYTE      applicationVersion3;          /* LSB */
31775  00  =3      BYTE      applicationBuildNumber1;      /* MSB */
31776  00  =3      BYTE      applicationBuildNumber2;      /* LSB */
31777  00  =3  } ZW_VERSION_ZWAVE_SOFTWARE_REPORT_V3_FRAME;
31778  00  =3  
31779  00  =3  /************************************************************/
31780  00  =3  /* Wake Up Interval Get command class structs */            
31781  00  =3  /************************************************************/
31782  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_GET_FRAME_
31783  00  =3  {
31784  00  =3      BYTE      cmdClass;                     /* The command class */
31785  00  =3      BYTE      cmd;                          /* The command */
31786  00  =3  } ZW_WAKE_UP_INTERVAL_GET_FRAME;
31787  00  =3  
31788  00  =3  /************************************************************/
31789  00  =3  /* Wake Up Interval Report command class structs */         
31790  00  =3  /************************************************************/
31791  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_REPORT_FRAME_
31792  00  =3  {
31793  00  =3      BYTE      cmdClass;                     /* The command class */
31794  00  =3      BYTE      cmd;                          /* The command */
31795  00  =3      BYTE      seconds1;                     /* MSB */
31796  00  =3      BYTE      seconds2;                     
31797  00  =3      BYTE      seconds3;                     /* LSB */
31798  00  =3      BYTE      nodeid;                       /**/
31799  00  =3  } ZW_WAKE_UP_INTERVAL_REPORT_FRAME;
31800  00  =3  
31801  00  =3  /************************************************************/
31802  00  =3  /* Wake Up Interval Set command class structs */            
31803  00  =3  /************************************************************/
31804  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_SET_FRAME_
31805  00  =3  {
31806  00  =3      BYTE      cmdClass;                     /* The command class */
31807  00  =3      BYTE      cmd;                          /* The command */
31808  00  =3      BYTE      seconds1;                     /* MSB */
31809  00  =3      BYTE      seconds2;                     
31810  00  =3      BYTE      seconds3;                     /* LSB */
31811  00  =3      BYTE      nodeid;                       /**/
31812  00  =3  } ZW_WAKE_UP_INTERVAL_SET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 530 

31813  00  =3  
31814  00  =3  /************************************************************/
31815  00  =3  /* Wake Up No More Information command class structs */     
31816  00  =3  /************************************************************/
31817  00  =3  typedef struct _ZW_WAKE_UP_NO_MORE_INFORMATION_FRAME_
31818  00  =3  {
31819  00  =3      BYTE      cmdClass;                     /* The command class */
31820  00  =3      BYTE      cmd;                          /* The command */
31821  00  =3  } ZW_WAKE_UP_NO_MORE_INFORMATION_FRAME;
31822  00  =3  
31823  00  =3  /************************************************************/
31824  00  =3  /* Wake Up Notification command class structs */            
31825  00  =3  /************************************************************/
31826  00  =3  typedef struct _ZW_WAKE_UP_NOTIFICATION_FRAME_
31827  00  =3  {
31828  00  =3      BYTE      cmdClass;                     /* The command class */
31829  00  =3      BYTE      cmd;                          /* The command */
31830  00  =3  } ZW_WAKE_UP_NOTIFICATION_FRAME;
31831  00  =3  
31832  00  =3  /************************************************************/
31833  00  =3  /* Wake Up Interval Capabilities Get V2 command class structs */
31834  00  =3  /************************************************************/
31835  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_CAPABILITIES_GET_V2_FRAME_
31836  00  =3  {
31837  00  =3      BYTE      cmdClass;                     /* The command class */
31838  00  =3      BYTE      cmd;                          /* The command */
31839  00  =3  } ZW_WAKE_UP_INTERVAL_CAPABILITIES_GET_V2_FRAME;
31840  00  =3  
31841  00  =3  /************************************************************/
31842  00  =3  /* Wake Up Interval Capabilities Report V2 command class structs */
31843  00  =3  /************************************************************/
31844  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_CAPABILITIES_REPORT_V2_FRAME_
31845  00  =3  {
31846  00  =3      BYTE      cmdClass;                     /* The command class */
31847  00  =3      BYTE      cmd;                          /* The command */
31848  00  =3      BYTE      minimumWakeUpIntervalSeconds1;/* MSB */
31849  00  =3      BYTE      minimumWakeUpIntervalSeconds2;
31850  00  =3      BYTE      minimumWakeUpIntervalSeconds3;/* LSB */
31851  00  =3      BYTE      maximumWakeUpIntervalSeconds1;/* MSB */
31852  00  =3      BYTE      maximumWakeUpIntervalSeconds2;
31853  00  =3      BYTE      maximumWakeUpIntervalSeconds3;/* LSB */
31854  00  =3      BYTE      defaultWakeUpIntervalSeconds1;/* MSB */
31855  00  =3      BYTE      defaultWakeUpIntervalSeconds2;
31856  00  =3      BYTE      defaultWakeUpIntervalSeconds3;/* LSB */
31857  00  =3      BYTE      wakeUpIntervalStepSeconds1;   /* MSB */
31858  00  =3      BYTE      wakeUpIntervalStepSeconds2;   
31859  00  =3      BYTE      wakeUpIntervalStepSeconds3;   /* LSB */
31860  00  =3  } ZW_WAKE_UP_INTERVAL_CAPABILITIES_REPORT_V2_FRAME;
31861  00  =3  
31862  00  =3  /************************************************************/
31863  00  =3  /* Wake Up Interval Get V2 command class structs */         
31864  00  =3  /************************************************************/
31865  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_GET_V2_FRAME_
31866  00  =3  {
31867  00  =3      BYTE      cmdClass;                     /* The command class */
31868  00  =3      BYTE      cmd;                          /* The command */
31869  00  =3  } ZW_WAKE_UP_INTERVAL_GET_V2_FRAME;
31870  00  =3  
31871  00  =3  /************************************************************/
31872  00  =3  /* Wake Up Interval Report V2 command class structs */      
31873  00  =3  /************************************************************/
31874  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_REPORT_V2_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 531 

31875  00  =3  {
31876  00  =3      BYTE      cmdClass;                     /* The command class */
31877  00  =3      BYTE      cmd;                          /* The command */
31878  00  =3      BYTE      seconds1;                     /* MSB */
31879  00  =3      BYTE      seconds2;                     
31880  00  =3      BYTE      seconds3;                     /* LSB */
31881  00  =3      BYTE      nodeid;                       /**/
31882  00  =3  } ZW_WAKE_UP_INTERVAL_REPORT_V2_FRAME;
31883  00  =3  
31884  00  =3  /************************************************************/
31885  00  =3  /* Wake Up Interval Set V2 command class structs */         
31886  00  =3  /************************************************************/
31887  00  =3  typedef struct _ZW_WAKE_UP_INTERVAL_SET_V2_FRAME_
31888  00  =3  {
31889  00  =3      BYTE      cmdClass;                     /* The command class */
31890  00  =3      BYTE      cmd;                          /* The command */
31891  00  =3      BYTE      seconds1;                     /* MSB */
31892  00  =3      BYTE      seconds2;                     
31893  00  =3      BYTE      seconds3;                     /* LSB */
31894  00  =3      BYTE      nodeid;                       /**/
31895  00  =3  } ZW_WAKE_UP_INTERVAL_SET_V2_FRAME;
31896  00  =3  
31897  00  =3  /************************************************************/
31898  00  =3  /* Wake Up No More Information V2 command class structs */  
31899  00  =3  /************************************************************/
31900  00  =3  typedef struct _ZW_WAKE_UP_NO_MORE_INFORMATION_V2_FRAME_
31901  00  =3  {
31902  00  =3      BYTE      cmdClass;                     /* The command class */
31903  00  =3      BYTE      cmd;                          /* The command */
31904  00  =3  } ZW_WAKE_UP_NO_MORE_INFORMATION_V2_FRAME;
31905  00  =3  
31906  00  =3  /************************************************************/
31907  00  =3  /* Wake Up Notification V2 command class structs */         
31908  00  =3  /************************************************************/
31909  00  =3  typedef struct _ZW_WAKE_UP_NOTIFICATION_V2_FRAME_
31910  00  =3  {
31911  00  =3      BYTE      cmdClass;                     /* The command class */
31912  00  =3      BYTE      cmd;                          /* The command */
31913  00  =3  } ZW_WAKE_UP_NOTIFICATION_V2_FRAME;
31914  00  =3  
31915  00  =3  /************************************************************/
31916  00  =3  /* Lowpan First Fragment 1byte command class structs */     
31917  00  =3  /************************************************************/
31918  00  =3  typedef struct _ZW_LOWPAN_FIRST_FRAGMENT_1BYTE_FRAME_
31919  00  =3  {
31920  00  =3      BYTE      cmdClass;                     /* The command class */
31921  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
31922  00  =3      BYTE      datagramSize2;                /**/
31923  00  =3      BYTE      datagramTag;                  /**/
31924  00  =3      BYTE      payload1;                     
31925  00  =3  } ZW_LOWPAN_FIRST_FRAGMENT_1BYTE_FRAME;
31926  00  =3  
31927  00  =3  /************************************************************/
31928  00  =3  /* Lowpan First Fragment 2byte command class structs */     
31929  00  =3  /************************************************************/
31930  00  =3  typedef struct _ZW_LOWPAN_FIRST_FRAGMENT_2BYTE_FRAME_
31931  00  =3  {
31932  00  =3      BYTE      cmdClass;                     /* The command class */
31933  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
31934  00  =3      BYTE      datagramSize2;                /**/
31935  00  =3      BYTE      datagramTag;                  /**/
31936  00  =3      BYTE      payload1;                     /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 532 

31937  00  =3      BYTE      payload2;                     /* LSB */
31938  00  =3  } ZW_LOWPAN_FIRST_FRAGMENT_2BYTE_FRAME;
31939  00  =3  
31940  00  =3  /************************************************************/
31941  00  =3  /* Lowpan First Fragment 3byte command class structs */     
31942  00  =3  /************************************************************/
31943  00  =3  typedef struct _ZW_LOWPAN_FIRST_FRAGMENT_3BYTE_FRAME_
31944  00  =3  {
31945  00  =3      BYTE      cmdClass;                     /* The command class */
31946  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
31947  00  =3      BYTE      datagramSize2;                /**/
31948  00  =3      BYTE      datagramTag;                  /**/
31949  00  =3      BYTE      payload1;                     /* MSB */
31950  00  =3      BYTE      payload2;                     
31951  00  =3      BYTE      payload3;                     /* LSB */
31952  00  =3  } ZW_LOWPAN_FIRST_FRAGMENT_3BYTE_FRAME;
31953  00  =3  
31954  00  =3  /************************************************************/
31955  00  =3  /* Lowpan First Fragment 4byte command class structs */     
31956  00  =3  /************************************************************/
31957  00  =3  typedef struct _ZW_LOWPAN_FIRST_FRAGMENT_4BYTE_FRAME_
31958  00  =3  {
31959  00  =3      BYTE      cmdClass;                     /* The command class */
31960  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
31961  00  =3      BYTE      datagramSize2;                /**/
31962  00  =3      BYTE      datagramTag;                  /**/
31963  00  =3      BYTE      payload1;                     /* MSB */
31964  00  =3      BYTE      payload2;                     
31965  00  =3      BYTE      payload3;                     
31966  00  =3      BYTE      payload4;                     /* LSB */
31967  00  =3  } ZW_LOWPAN_FIRST_FRAGMENT_4BYTE_FRAME;
31968  00  =3  
31969  00  =3  /************************************************************/
31970  00  =3  /* Lowpan Subsequent Fragment 1byte command class structs */
31971  00  =3  /************************************************************/
31972  00  =3  typedef struct _ZW_LOWPAN_SUBSEQUENT_FRAGMENT_1BYTE_FRAME_
31973  00  =3  {
31974  00  =3      BYTE      cmdClass;                     /* The command class */
31975  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
31976  00  =3      BYTE      datagramSize2;                /**/
31977  00  =3      BYTE      datagramTag;                  /**/
31978  00  =3      BYTE      datagramOffset;               /**/
31979  00  =3      BYTE      payload1;                     
31980  00  =3  } ZW_LOWPAN_SUBSEQUENT_FRAGMENT_1BYTE_FRAME;
31981  00  =3  
31982  00  =3  /************************************************************/
31983  00  =3  /* Lowpan Subsequent Fragment 2byte command class structs */
31984  00  =3  /************************************************************/
31985  00  =3  typedef struct _ZW_LOWPAN_SUBSEQUENT_FRAGMENT_2BYTE_FRAME_
31986  00  =3  {
31987  00  =3      BYTE      cmdClass;                     /* The command class */
31988  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
31989  00  =3      BYTE      datagramSize2;                /**/
31990  00  =3      BYTE      datagramTag;                  /**/
31991  00  =3      BYTE      datagramOffset;               /**/
31992  00  =3      BYTE      payload1;                     /* MSB */
31993  00  =3      BYTE      payload2;                     /* LSB */
31994  00  =3  } ZW_LOWPAN_SUBSEQUENT_FRAGMENT_2BYTE_FRAME;
31995  00  =3  
31996  00  =3  /************************************************************/
31997  00  =3  /* Lowpan Subsequent Fragment 3byte command class structs */
31998  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 533 

31999  00  =3  typedef struct _ZW_LOWPAN_SUBSEQUENT_FRAGMENT_3BYTE_FRAME_
32000  00  =3  {
32001  00  =3      BYTE      cmdClass;                     /* The command class */
32002  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
32003  00  =3      BYTE      datagramSize2;                /**/
32004  00  =3      BYTE      datagramTag;                  /**/
32005  00  =3      BYTE      datagramOffset;               /**/
32006  00  =3      BYTE      payload1;                     /* MSB */
32007  00  =3      BYTE      payload2;                     
32008  00  =3      BYTE      payload3;                     /* LSB */
32009  00  =3  } ZW_LOWPAN_SUBSEQUENT_FRAGMENT_3BYTE_FRAME;
32010  00  =3  
32011  00  =3  /************************************************************/
32012  00  =3  /* Lowpan Subsequent Fragment 4byte command class structs */
32013  00  =3  /************************************************************/
32014  00  =3  typedef struct _ZW_LOWPAN_SUBSEQUENT_FRAGMENT_4BYTE_FRAME_
32015  00  =3  {
32016  00  =3      BYTE      cmdClass;                     /* The command class */
32017  00  =3      BYTE      cmd_datagramSize1;            /* The command + parameter Datagram Size 1 */
32018  00  =3      BYTE      datagramSize2;                /**/
32019  00  =3      BYTE      datagramTag;                  /**/
32020  00  =3      BYTE      datagramOffset;               /**/
32021  00  =3      BYTE      payload1;                     /* MSB */
32022  00  =3      BYTE      payload2;                     
32023  00  =3      BYTE      payload3;                     
32024  00  =3      BYTE      payload4;                     /* LSB */
32025  00  =3  } ZW_LOWPAN_SUBSEQUENT_FRAGMENT_4BYTE_FRAME;
32026  00  =3  
32027  00  =3  /************************************************************/
32028  00  =3  /* Command Zip Packet 1byte command class structs */        
32029  00  =3  /************************************************************/
32030  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_1BYTE_FRAME_
32031  00  =3  {
32032  00  =3      BYTE      cmdClass;                     /* The command class */
32033  00  =3      BYTE      cmd;                          /* The command */
32034  00  =3      BYTE      properties1;                  /* masked byte */
32035  00  =3      BYTE      properties2;                  /* masked byte */
32036  00  =3      BYTE      seqNo;                        /**/
32037  00  =3      BYTE      properties3;                  /* masked byte */
32038  00  =3      BYTE      properties4;                  /* masked byte */
32039  00  =3      BYTE      headerExtension1;             
32040  00  =3      BYTE      zWaveCommand1;                
32041  00  =3  } ZW_COMMAND_ZIP_PACKET_1BYTE_FRAME;
32042  00  =3  
32043  00  =3  /************************************************************/
32044  00  =3  /* Command Zip Packet 2byte command class structs */        
32045  00  =3  /************************************************************/
32046  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_2BYTE_FRAME_
32047  00  =3  {
32048  00  =3      BYTE      cmdClass;                     /* The command class */
32049  00  =3      BYTE      cmd;                          /* The command */
32050  00  =3      BYTE      properties1;                  /* masked byte */
32051  00  =3      BYTE      properties2;                  /* masked byte */
32052  00  =3      BYTE      seqNo;                        /**/
32053  00  =3      BYTE      properties3;                  /* masked byte */
32054  00  =3      BYTE      properties4;                  /* masked byte */
32055  00  =3      BYTE      headerExtension1;             /* MSB */
32056  00  =3      BYTE      headerExtension2;             /* LSB */
32057  00  =3      BYTE      zWaveCommand1;                /* MSB */
32058  00  =3      BYTE      zWaveCommand2;                /* LSB */
32059  00  =3  } ZW_COMMAND_ZIP_PACKET_2BYTE_FRAME;
32060  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 534 

32061  00  =3  /************************************************************/
32062  00  =3  /* Command Zip Packet 3byte command class structs */        
32063  00  =3  /************************************************************/
32064  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_3BYTE_FRAME_
32065  00  =3  {
32066  00  =3      BYTE      cmdClass;                     /* The command class */
32067  00  =3      BYTE      cmd;                          /* The command */
32068  00  =3      BYTE      properties1;                  /* masked byte */
32069  00  =3      BYTE      properties2;                  /* masked byte */
32070  00  =3      BYTE      seqNo;                        /**/
32071  00  =3      BYTE      properties3;                  /* masked byte */
32072  00  =3      BYTE      properties4;                  /* masked byte */
32073  00  =3      BYTE      headerExtension1;             /* MSB */
32074  00  =3      BYTE      headerExtension2;             
32075  00  =3      BYTE      headerExtension3;             /* LSB */
32076  00  =3      BYTE      zWaveCommand1;                /* MSB */
32077  00  =3      BYTE      zWaveCommand2;                
32078  00  =3      BYTE      zWaveCommand3;                /* LSB */
32079  00  =3  } ZW_COMMAND_ZIP_PACKET_3BYTE_FRAME;
32080  00  =3  
32081  00  =3  /************************************************************/
32082  00  =3  /* Command Zip Packet 4byte command class structs */        
32083  00  =3  /************************************************************/
32084  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_4BYTE_FRAME_
32085  00  =3  {
32086  00  =3      BYTE      cmdClass;                     /* The command class */
32087  00  =3      BYTE      cmd;                          /* The command */
32088  00  =3      BYTE      properties1;                  /* masked byte */
32089  00  =3      BYTE      properties2;                  /* masked byte */
32090  00  =3      BYTE      seqNo;                        /**/
32091  00  =3      BYTE      properties3;                  /* masked byte */
32092  00  =3      BYTE      properties4;                  /* masked byte */
32093  00  =3      BYTE      headerExtension1;             /* MSB */
32094  00  =3      BYTE      headerExtension2;             
32095  00  =3      BYTE      headerExtension3;             
32096  00  =3      BYTE      headerExtension4;             /* LSB */
32097  00  =3      BYTE      zWaveCommand1;                /* MSB */
32098  00  =3      BYTE      zWaveCommand2;                
32099  00  =3      BYTE      zWaveCommand3;                
32100  00  =3      BYTE      zWaveCommand4;                /* LSB */
32101  00  =3  } ZW_COMMAND_ZIP_PACKET_4BYTE_FRAME;
32102  00  =3  
32103  00  =3  /************************************************************/
32104  00  =3  /* Command Zip Packet 1byte V2 command class structs */     
32105  00  =3  /************************************************************/
32106  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_1BYTE_V2_FRAME_
32107  00  =3  {
32108  00  =3      BYTE      cmdClass;                     /* The command class */
32109  00  =3      BYTE      cmd;                          /* The command */
32110  00  =3      BYTE      properties1;                  /* masked byte */
32111  00  =3      BYTE      properties2;                  /* masked byte */
32112  00  =3      BYTE      seqNo;                        /**/
32113  00  =3      BYTE      properties3;                  /* masked byte */
32114  00  =3      BYTE      properties4;                  /* masked byte */
32115  00  =3      BYTE      headerLength;                 /**/
32116  00  =3      BYTE      headerExtension1;             
32117  00  =3      BYTE      zWaveCommand1;                
32118  00  =3  } ZW_COMMAND_ZIP_PACKET_1BYTE_V2_FRAME;
32119  00  =3  
32120  00  =3  /************************************************************/
32121  00  =3  /* Command Zip Packet 2byte V2 command class structs */     
32122  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 535 

32123  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_2BYTE_V2_FRAME_
32124  00  =3  {
32125  00  =3      BYTE      cmdClass;                     /* The command class */
32126  00  =3      BYTE      cmd;                          /* The command */
32127  00  =3      BYTE      properties1;                  /* masked byte */
32128  00  =3      BYTE      properties2;                  /* masked byte */
32129  00  =3      BYTE      seqNo;                        /**/
32130  00  =3      BYTE      properties3;                  /* masked byte */
32131  00  =3      BYTE      properties4;                  /* masked byte */
32132  00  =3      BYTE      headerLength;                 /**/
32133  00  =3      BYTE      headerExtension1;             /* MSB */
32134  00  =3      BYTE      headerExtension2;             /* LSB */
32135  00  =3      BYTE      zWaveCommand1;                /* MSB */
32136  00  =3      BYTE      zWaveCommand2;                /* LSB */
32137  00  =3  } ZW_COMMAND_ZIP_PACKET_2BYTE_V2_FRAME;
32138  00  =3  
32139  00  =3  /************************************************************/
32140  00  =3  /* Command Zip Packet 3byte V2 command class structs */     
32141  00  =3  /************************************************************/
32142  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_3BYTE_V2_FRAME_
32143  00  =3  {
32144  00  =3      BYTE      cmdClass;                     /* The command class */
32145  00  =3      BYTE      cmd;                          /* The command */
32146  00  =3      BYTE      properties1;                  /* masked byte */
32147  00  =3      BYTE      properties2;                  /* masked byte */
32148  00  =3      BYTE      seqNo;                        /**/
32149  00  =3      BYTE      properties3;                  /* masked byte */
32150  00  =3      BYTE      properties4;                  /* masked byte */
32151  00  =3      BYTE      headerLength;                 /**/
32152  00  =3      BYTE      headerExtension1;             /* MSB */
32153  00  =3      BYTE      headerExtension2;             
32154  00  =3      BYTE      headerExtension3;             /* LSB */
32155  00  =3      BYTE      zWaveCommand1;                /* MSB */
32156  00  =3      BYTE      zWaveCommand2;                
32157  00  =3      BYTE      zWaveCommand3;                /* LSB */
32158  00  =3  } ZW_COMMAND_ZIP_PACKET_3BYTE_V2_FRAME;
32159  00  =3  
32160  00  =3  /************************************************************/
32161  00  =3  /* Command Zip Packet 4byte V2 command class structs */     
32162  00  =3  /************************************************************/
32163  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_4BYTE_V2_FRAME_
32164  00  =3  {
32165  00  =3      BYTE      cmdClass;                     /* The command class */
32166  00  =3      BYTE      cmd;                          /* The command */
32167  00  =3      BYTE      properties1;                  /* masked byte */
32168  00  =3      BYTE      properties2;                  /* masked byte */
32169  00  =3      BYTE      seqNo;                        /**/
32170  00  =3      BYTE      properties3;                  /* masked byte */
32171  00  =3      BYTE      properties4;                  /* masked byte */
32172  00  =3      BYTE      headerLength;                 /**/
32173  00  =3      BYTE      headerExtension1;             /* MSB */
32174  00  =3      BYTE      headerExtension2;             
32175  00  =3      BYTE      headerExtension3;             
32176  00  =3      BYTE      headerExtension4;             /* LSB */
32177  00  =3      BYTE      zWaveCommand1;                /* MSB */
32178  00  =3      BYTE      zWaveCommand2;                
32179  00  =3      BYTE      zWaveCommand3;                
32180  00  =3      BYTE      zWaveCommand4;                /* LSB */
32181  00  =3  } ZW_COMMAND_ZIP_PACKET_4BYTE_V2_FRAME;
32182  00  =3  
32183  00  =3  /************************************************************/
32184  00  =3  /* Command Zip Packet 1byte V3 command class structs */     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 536 

32185  00  =3  /************************************************************/
32186  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_1BYTE_V3_FRAME_
32187  00  =3  {
32188  00  =3      BYTE      cmdClass;                     /* The command class */
32189  00  =3      BYTE      cmd;                          /* The command */
32190  00  =3      BYTE      properties1;                  /* masked byte */
32191  00  =3      BYTE      properties2;                  /* masked byte */
32192  00  =3      BYTE      seqNo;                        /**/
32193  00  =3      BYTE      properties3;                  /* masked byte */
32194  00  =3      BYTE      properties4;                  /* masked byte */
32195  00  =3      BYTE      headerLength;                 /**/
32196  00  =3      BYTE      headerExtension1;             
32197  00  =3      BYTE      zWaveCommand1;                
32198  00  =3  } ZW_COMMAND_ZIP_PACKET_1BYTE_V3_FRAME;
32199  00  =3  
32200  00  =3  /************************************************************/
32201  00  =3  /* Command Zip Packet 2byte V3 command class structs */     
32202  00  =3  /************************************************************/
32203  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_2BYTE_V3_FRAME_
32204  00  =3  {
32205  00  =3      BYTE      cmdClass;                     /* The command class */
32206  00  =3      BYTE      cmd;                          /* The command */
32207  00  =3      BYTE      properties1;                  /* masked byte */
32208  00  =3      BYTE      properties2;                  /* masked byte */
32209  00  =3      BYTE      seqNo;                        /**/
32210  00  =3      BYTE      properties3;                  /* masked byte */
32211  00  =3      BYTE      properties4;                  /* masked byte */
32212  00  =3      BYTE      headerLength;                 /**/
32213  00  =3      BYTE      headerExtension1;             /* MSB */
32214  00  =3      BYTE      headerExtension2;             /* LSB */
32215  00  =3      BYTE      zWaveCommand1;                /* MSB */
32216  00  =3      BYTE      zWaveCommand2;                /* LSB */
32217  00  =3  } ZW_COMMAND_ZIP_PACKET_2BYTE_V3_FRAME;
32218  00  =3  
32219  00  =3  /************************************************************/
32220  00  =3  /* Command Zip Packet 3byte V3 command class structs */     
32221  00  =3  /************************************************************/
32222  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_3BYTE_V3_FRAME_
32223  00  =3  {
32224  00  =3      BYTE      cmdClass;                     /* The command class */
32225  00  =3      BYTE      cmd;                          /* The command */
32226  00  =3      BYTE      properties1;                  /* masked byte */
32227  00  =3      BYTE      properties2;                  /* masked byte */
32228  00  =3      BYTE      seqNo;                        /**/
32229  00  =3      BYTE      properties3;                  /* masked byte */
32230  00  =3      BYTE      properties4;                  /* masked byte */
32231  00  =3      BYTE      headerLength;                 /**/
32232  00  =3      BYTE      headerExtension1;             /* MSB */
32233  00  =3      BYTE      headerExtension2;             
32234  00  =3      BYTE      headerExtension3;             /* LSB */
32235  00  =3      BYTE      zWaveCommand1;                /* MSB */
32236  00  =3      BYTE      zWaveCommand2;                
32237  00  =3      BYTE      zWaveCommand3;                /* LSB */
32238  00  =3  } ZW_COMMAND_ZIP_PACKET_3BYTE_V3_FRAME;
32239  00  =3  
32240  00  =3  /************************************************************/
32241  00  =3  /* Command Zip Packet 4byte V3 command class structs */     
32242  00  =3  /************************************************************/
32243  00  =3  typedef struct _ZW_COMMAND_ZIP_PACKET_4BYTE_V3_FRAME_
32244  00  =3  {
32245  00  =3      BYTE      cmdClass;                     /* The command class */
32246  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 537 

32247  00  =3      BYTE      properties1;                  /* masked byte */
32248  00  =3      BYTE      properties2;                  /* masked byte */
32249  00  =3      BYTE      seqNo;                        /**/
32250  00  =3      BYTE      properties3;                  /* masked byte */
32251  00  =3      BYTE      properties4;                  /* masked byte */
32252  00  =3      BYTE      headerLength;                 /**/
32253  00  =3      BYTE      headerExtension1;             /* MSB */
32254  00  =3      BYTE      headerExtension2;             
32255  00  =3      BYTE      headerExtension3;             
32256  00  =3      BYTE      headerExtension4;             /* LSB */
32257  00  =3      BYTE      zWaveCommand1;                /* MSB */
32258  00  =3      BYTE      zWaveCommand2;                
32259  00  =3      BYTE      zWaveCommand3;                
32260  00  =3      BYTE      zWaveCommand4;                /* LSB */
32261  00  =3  } ZW_COMMAND_ZIP_PACKET_4BYTE_V3_FRAME;
32262  00  =3  
32263  00  =3  /************************************************************/
32264  00  =3  /* Command Command Class Not Supported command class structs */
32265  00  =3  /************************************************************/
32266  00  =3  typedef struct _ZW_COMMAND_COMMAND_CLASS_NOT_SUPPORTED_FRAME_
32267  00  =3  {
32268  00  =3      BYTE      cmdClass;                     /* The command class */
32269  00  =3      BYTE      cmd;                          /* The command */
32270  00  =3      BYTE      properties1;                  /* masked byte */
32271  00  =3      BYTE      offendingCommandClass;        /**/
32272  00  =3      BYTE      offendingCommand;             /**/
32273  00  =3  } ZW_COMMAND_COMMAND_CLASS_NOT_SUPPORTED_FRAME;
32274  00  =3  
32275  00  =3  /************************************************************/
32276  00  =3  /* Switch Color Supported Get command class structs */      
32277  00  =3  /************************************************************/
32278  00  =3  typedef struct _ZW_SWITCH_COLOR_SUPPORTED_GET_FRAME_
32279  00  =3  {
32280  00  =3      BYTE      cmdClass;                     /* The command class */
32281  00  =3      BYTE      cmd;                          /* The command */
32282  00  =3  } ZW_SWITCH_COLOR_SUPPORTED_GET_FRAME;
32283  00  =3  
32284  00  =3  /************************************************************/
32285  00  =3  /* Switch Color Supported Report command class structs */   
32286  00  =3  /************************************************************/
32287  00  =3  typedef struct _ZW_SWITCH_COLOR_SUPPORTED_REPORT_FRAME_
32288  00  =3  {
32289  00  =3      BYTE      cmdClass;                     /* The command class */
32290  00  =3      BYTE      cmd;                          /* The command */
32291  00  =3      BYTE      colorComponentMask1;          /* MSB */
32292  00  =3      BYTE      colorComponentMask2;          /* LSB */
32293  00  =3  } ZW_SWITCH_COLOR_SUPPORTED_REPORT_FRAME;
32294  00  =3  
32295  00  =3  /************************************************************/
32296  00  =3  /* Switch Color Get command class structs */                
32297  00  =3  /************************************************************/
32298  00  =3  typedef struct _ZW_SWITCH_COLOR_GET_FRAME_
32299  00  =3  {
32300  00  =3      BYTE      cmdClass;                     /* The command class */
32301  00  =3      BYTE      cmd;                          /* The command */
32302  00  =3      BYTE      colorComponentId;             /**/
32303  00  =3  } ZW_SWITCH_COLOR_GET_FRAME;
32304  00  =3  
32305  00  =3  /************************************************************/
32306  00  =3  /* Switch Color Report command class structs */             
32307  00  =3  /************************************************************/
32308  00  =3  typedef struct _ZW_SWITCH_COLOR_REPORT_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 538 

32309  00  =3  {
32310  00  =3      BYTE      cmdClass;                     /* The command class */
32311  00  =3      BYTE      cmd;                          /* The command */
32312  00  =3      BYTE      colorComponentId;             /**/
32313  00  =3      BYTE      value;                        /**/
32314  00  =3  } ZW_SWITCH_COLOR_REPORT_FRAME;
32315  00  =3  
32316  00  =3  /************************************************************/
32317  00  =3  /* Switch Color Set variant group structs */                
32318  00  =3  /************************************************************/
32319  00  =3  typedef struct _VG_SWITCH_COLOR_SET_VG_
32320  00  =3  {
32321  00  =3      BYTE      colorComponentId;             /**/
32322  00  =3      BYTE      value;                        /**/
32323  00  =3  } VG_SWITCH_COLOR_SET_VG;
32324  00  =3  
32325  00  =3  /************************************************************/
32326  00  =3  /* Switch Color Set 1byte command class structs */          
32327  00  =3  /************************************************************/
32328  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_1BYTE_FRAME_
32329  00  =3  {
32330  00  =3      BYTE      cmdClass;                     /* The command class */
32331  00  =3      BYTE      cmd;                          /* The command */
32332  00  =3      BYTE      properties1;                  /* masked byte */
32333  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup1;                /**/
32334  00  =3  } ZW_SWITCH_COLOR_SET_1BYTE_FRAME;
32335  00  =3  
32336  00  =3  /************************************************************/
32337  00  =3  /* Switch Color Set 2byte command class structs */          
32338  00  =3  /************************************************************/
32339  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_2BYTE_FRAME_
32340  00  =3  {
32341  00  =3      BYTE      cmdClass;                     /* The command class */
32342  00  =3      BYTE      cmd;                          /* The command */
32343  00  =3      BYTE      properties1;                  /* masked byte */
32344  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup1;                /**/
32345  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup2;                /**/
32346  00  =3  } ZW_SWITCH_COLOR_SET_2BYTE_FRAME;
32347  00  =3  
32348  00  =3  /************************************************************/
32349  00  =3  /* Switch Color Set 3byte command class structs */          
32350  00  =3  /************************************************************/
32351  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_3BYTE_FRAME_
32352  00  =3  {
32353  00  =3      BYTE      cmdClass;                     /* The command class */
32354  00  =3      BYTE      cmd;                          /* The command */
32355  00  =3      BYTE      properties1;                  /* masked byte */
32356  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup1;                /**/
32357  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup2;                /**/
32358  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup3;                /**/
32359  00  =3  } ZW_SWITCH_COLOR_SET_3BYTE_FRAME;
32360  00  =3  
32361  00  =3  /************************************************************/
32362  00  =3  /* Switch Color Set 4byte command class structs */          
32363  00  =3  /************************************************************/
32364  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_4BYTE_FRAME_
32365  00  =3  {
32366  00  =3      BYTE      cmdClass;                     /* The command class */
32367  00  =3      BYTE      cmd;                          /* The command */
32368  00  =3      BYTE      properties1;                  /* masked byte */
32369  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup1;                /**/
32370  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup2;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 539 

32371  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup3;                /**/
32372  00  =3      VG_SWITCH_COLOR_SET_VG variantgroup4;                /**/
32373  00  =3  } ZW_SWITCH_COLOR_SET_4BYTE_FRAME;
32374  00  =3  
32375  00  =3  /************************************************************/
32376  00  =3  /* Switch Color Start Level Change command class structs */ 
32377  00  =3  /************************************************************/
32378  00  =3  typedef struct _ZW_SWITCH_COLOR_START_LEVEL_CHANGE_FRAME_
32379  00  =3  {
32380  00  =3      BYTE      cmdClass;                     /* The command class */
32381  00  =3      BYTE      cmd;                          /* The command */
32382  00  =3      BYTE      properties1;                  /* masked byte */
32383  00  =3      BYTE      colorComponentId;             /**/
32384  00  =3      BYTE      startLevel;                   /**/
32385  00  =3  } ZW_SWITCH_COLOR_START_LEVEL_CHANGE_FRAME;
32386  00  =3  
32387  00  =3  /************************************************************/
32388  00  =3  /* Switch Color Stop Level Change command class structs */  
32389  00  =3  /************************************************************/
32390  00  =3  typedef struct _ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_FRAME_
32391  00  =3  {
32392  00  =3      BYTE      cmdClass;                     /* The command class */
32393  00  =3      BYTE      cmd;                          /* The command */
32394  00  =3      BYTE      colorComponentId;             /**/
32395  00  =3  } ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_FRAME;
32396  00  =3  
32397  00  =3  /************************************************************/
32398  00  =3  /* Switch Color Supported Get V2 command class structs */   
32399  00  =3  /************************************************************/
32400  00  =3  typedef struct _ZW_SWITCH_COLOR_SUPPORTED_GET_V2_FRAME_
32401  00  =3  {
32402  00  =3      BYTE      cmdClass;                     /* The command class */
32403  00  =3      BYTE      cmd;                          /* The command */
32404  00  =3  } ZW_SWITCH_COLOR_SUPPORTED_GET_V2_FRAME;
32405  00  =3  
32406  00  =3  /************************************************************/
32407  00  =3  /* Switch Color Supported Report V2 command class structs */
32408  00  =3  /************************************************************/
32409  00  =3  typedef struct _ZW_SWITCH_COLOR_SUPPORTED_REPORT_V2_FRAME_
32410  00  =3  {
32411  00  =3      BYTE      cmdClass;                     /* The command class */
32412  00  =3      BYTE      cmd;                          /* The command */
32413  00  =3      BYTE      colorComponentMask1;          /* MSB */
32414  00  =3      BYTE      colorComponentMask2;          /* LSB */
32415  00  =3  } ZW_SWITCH_COLOR_SUPPORTED_REPORT_V2_FRAME;
32416  00  =3  
32417  00  =3  /************************************************************/
32418  00  =3  /* Switch Color Get V2 command class structs */             
32419  00  =3  /************************************************************/
32420  00  =3  typedef struct _ZW_SWITCH_COLOR_GET_V2_FRAME_
32421  00  =3  {
32422  00  =3      BYTE      cmdClass;                     /* The command class */
32423  00  =3      BYTE      cmd;                          /* The command */
32424  00  =3      BYTE      colorComponentId;             /**/
32425  00  =3  } ZW_SWITCH_COLOR_GET_V2_FRAME;
32426  00  =3  
32427  00  =3  /************************************************************/
32428  00  =3  /* Switch Color Report V2 command class structs */          
32429  00  =3  /************************************************************/
32430  00  =3  typedef struct _ZW_SWITCH_COLOR_REPORT_V2_FRAME_
32431  00  =3  {
32432  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 540 

32433  00  =3      BYTE      cmd;                          /* The command */
32434  00  =3      BYTE      colorComponentId;             /**/
32435  00  =3      BYTE      value;                        /**/
32436  00  =3  } ZW_SWITCH_COLOR_REPORT_V2_FRAME;
32437  00  =3  
32438  00  =3  /************************************************************/
32439  00  =3  /* Switch Color Set V2 variant group structs */             
32440  00  =3  /************************************************************/
32441  00  =3  typedef struct _VG_SWITCH_COLOR_SET_V2_VG_
32442  00  =3  {
32443  00  =3      BYTE      colorComponentId;             /**/
32444  00  =3      BYTE      value;                        /**/
32445  00  =3  } VG_SWITCH_COLOR_SET_V2_VG;
32446  00  =3  
32447  00  =3  /************************************************************/
32448  00  =3  /* Switch Color Set 1byte V2 command class structs */       
32449  00  =3  /************************************************************/
32450  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_1BYTE_V2_FRAME_
32451  00  =3  {
32452  00  =3      BYTE      cmdClass;                     /* The command class */
32453  00  =3      BYTE      cmd;                          /* The command */
32454  00  =3      BYTE      properties1;                  /* masked byte */
32455  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup1;                /**/
32456  00  =3      BYTE      duration;                     /**/
32457  00  =3  } ZW_SWITCH_COLOR_SET_1BYTE_V2_FRAME;
32458  00  =3  
32459  00  =3  /************************************************************/
32460  00  =3  /* Switch Color Set 2byte V2 command class structs */       
32461  00  =3  /************************************************************/
32462  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_2BYTE_V2_FRAME_
32463  00  =3  {
32464  00  =3      BYTE      cmdClass;                     /* The command class */
32465  00  =3      BYTE      cmd;                          /* The command */
32466  00  =3      BYTE      properties1;                  /* masked byte */
32467  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup1;                /**/
32468  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup2;                /**/
32469  00  =3      BYTE      duration;                     /**/
32470  00  =3  } ZW_SWITCH_COLOR_SET_2BYTE_V2_FRAME;
32471  00  =3  
32472  00  =3  /************************************************************/
32473  00  =3  /* Switch Color Set 3byte V2 command class structs */       
32474  00  =3  /************************************************************/
32475  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_3BYTE_V2_FRAME_
32476  00  =3  {
32477  00  =3      BYTE      cmdClass;                     /* The command class */
32478  00  =3      BYTE      cmd;                          /* The command */
32479  00  =3      BYTE      properties1;                  /* masked byte */
32480  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup1;                /**/
32481  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup2;                /**/
32482  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup3;                /**/
32483  00  =3      BYTE      duration;                     /**/
32484  00  =3  } ZW_SWITCH_COLOR_SET_3BYTE_V2_FRAME;
32485  00  =3  
32486  00  =3  /************************************************************/
32487  00  =3  /* Switch Color Set 4byte V2 command class structs */       
32488  00  =3  /************************************************************/
32489  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_4BYTE_V2_FRAME_
32490  00  =3  {
32491  00  =3      BYTE      cmdClass;                     /* The command class */
32492  00  =3      BYTE      cmd;                          /* The command */
32493  00  =3      BYTE      properties1;                  /* masked byte */
32494  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 541 

32495  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup2;                /**/
32496  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup3;                /**/
32497  00  =3      VG_SWITCH_COLOR_SET_V2_VG variantgroup4;                /**/
32498  00  =3      BYTE      duration;                     /**/
32499  00  =3  } ZW_SWITCH_COLOR_SET_4BYTE_V2_FRAME;
32500  00  =3  
32501  00  =3  /************************************************************/
32502  00  =3  /* Switch Color Start Level Change V2 command class structs */
32503  00  =3  /************************************************************/
32504  00  =3  typedef struct _ZW_SWITCH_COLOR_START_LEVEL_CHANGE_V2_FRAME_
32505  00  =3  {
32506  00  =3      BYTE      cmdClass;                     /* The command class */
32507  00  =3      BYTE      cmd;                          /* The command */
32508  00  =3      BYTE      properties1;                  /* masked byte */
32509  00  =3      BYTE      colorComponentId;             /**/
32510  00  =3      BYTE      startLevel;                   /**/
32511  00  =3  } ZW_SWITCH_COLOR_START_LEVEL_CHANGE_V2_FRAME;
32512  00  =3  
32513  00  =3  /************************************************************/
32514  00  =3  /* Switch Color Stop Level Change V2 command class structs */
32515  00  =3  /************************************************************/
32516  00  =3  typedef struct _ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_V2_FRAME_
32517  00  =3  {
32518  00  =3      BYTE      cmdClass;                     /* The command class */
32519  00  =3      BYTE      cmd;                          /* The command */
32520  00  =3      BYTE      colorComponentId;             /**/
32521  00  =3  } ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_V2_FRAME;
32522  00  =3  
32523  00  =3  /************************************************************/
32524  00  =3  /* Switch Color Supported Get V3 command class structs */   
32525  00  =3  /************************************************************/
32526  00  =3  typedef struct _ZW_SWITCH_COLOR_SUPPORTED_GET_V3_FRAME_
32527  00  =3  {
32528  00  =3      BYTE      cmdClass;                     /* The command class */
32529  00  =3      BYTE      cmd;                          /* The command */
32530  00  =3  } ZW_SWITCH_COLOR_SUPPORTED_GET_V3_FRAME;
32531  00  =3  
32532  00  =3  /************************************************************/
32533  00  =3  /* Switch Color Supported Report V3 command class structs */
32534  00  =3  /************************************************************/
32535  00  =3  typedef struct _ZW_SWITCH_COLOR_SUPPORTED_REPORT_V3_FRAME_
32536  00  =3  {
32537  00  =3      BYTE      cmdClass;                     /* The command class */
32538  00  =3      BYTE      cmd;                          /* The command */
32539  00  =3      BYTE      colorComponentMask1;          /* MSB */
32540  00  =3      BYTE      colorComponentMask2;          /* LSB */
32541  00  =3  } ZW_SWITCH_COLOR_SUPPORTED_REPORT_V3_FRAME;
32542  00  =3  
32543  00  =3  /************************************************************/
32544  00  =3  /* Switch Color Get V3 command class structs */             
32545  00  =3  /************************************************************/
32546  00  =3  typedef struct _ZW_SWITCH_COLOR_GET_V3_FRAME_
32547  00  =3  {
32548  00  =3      BYTE      cmdClass;                     /* The command class */
32549  00  =3      BYTE      cmd;                          /* The command */
32550  00  =3      BYTE      colorComponentId;             /**/
32551  00  =3  } ZW_SWITCH_COLOR_GET_V3_FRAME;
32552  00  =3  
32553  00  =3  /************************************************************/
32554  00  =3  /* Switch Color Report V3 command class structs */          
32555  00  =3  /************************************************************/
32556  00  =3  typedef struct _ZW_SWITCH_COLOR_REPORT_V3_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 542 

32557  00  =3  {
32558  00  =3      BYTE      cmdClass;                     /* The command class */
32559  00  =3      BYTE      cmd;                          /* The command */
32560  00  =3      BYTE      colorComponentId;             /**/
32561  00  =3      BYTE      currentValue;                 /**/
32562  00  =3      BYTE      targetValue;                  /**/
32563  00  =3      BYTE      duration;                     /**/
32564  00  =3  } ZW_SWITCH_COLOR_REPORT_V3_FRAME;
32565  00  =3  
32566  00  =3  /************************************************************/
32567  00  =3  /* Switch Color Set V3 variant group structs */             
32568  00  =3  /************************************************************/
32569  00  =3  typedef struct _VG_SWITCH_COLOR_SET_V3_VG_
32570  00  =3  {
32571  00  =3      BYTE      colorComponentId;             /**/
32572  00  =3      BYTE      value;                        /**/
32573  00  =3  } VG_SWITCH_COLOR_SET_V3_VG;
32574  00  =3  
32575  00  =3  /************************************************************/
32576  00  =3  /* Switch Color Set 1byte V3 command class structs */       
32577  00  =3  /************************************************************/
32578  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_1BYTE_V3_FRAME_
32579  00  =3  {
32580  00  =3      BYTE      cmdClass;                     /* The command class */
32581  00  =3      BYTE      cmd;                          /* The command */
32582  00  =3      BYTE      properties1;                  /* masked byte */
32583  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup1;                /**/
32584  00  =3      BYTE      duration;                     /**/
32585  00  =3  } ZW_SWITCH_COLOR_SET_1BYTE_V3_FRAME;
32586  00  =3  
32587  00  =3  /************************************************************/
32588  00  =3  /* Switch Color Set 2byte V3 command class structs */       
32589  00  =3  /************************************************************/
32590  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_2BYTE_V3_FRAME_
32591  00  =3  {
32592  00  =3      BYTE      cmdClass;                     /* The command class */
32593  00  =3      BYTE      cmd;                          /* The command */
32594  00  =3      BYTE      properties1;                  /* masked byte */
32595  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup1;                /**/
32596  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup2;                /**/
32597  00  =3      BYTE      duration;                     /**/
32598  00  =3  } ZW_SWITCH_COLOR_SET_2BYTE_V3_FRAME;
32599  00  =3  
32600  00  =3  /************************************************************/
32601  00  =3  /* Switch Color Set 3byte V3 command class structs */       
32602  00  =3  /************************************************************/
32603  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_3BYTE_V3_FRAME_
32604  00  =3  {
32605  00  =3      BYTE      cmdClass;                     /* The command class */
32606  00  =3      BYTE      cmd;                          /* The command */
32607  00  =3      BYTE      properties1;                  /* masked byte */
32608  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup1;                /**/
32609  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup2;                /**/
32610  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup3;                /**/
32611  00  =3      BYTE      duration;                     /**/
32612  00  =3  } ZW_SWITCH_COLOR_SET_3BYTE_V3_FRAME;
32613  00  =3  
32614  00  =3  /************************************************************/
32615  00  =3  /* Switch Color Set 4byte V3 command class structs */       
32616  00  =3  /************************************************************/
32617  00  =3  typedef struct _ZW_SWITCH_COLOR_SET_4BYTE_V3_FRAME_
32618  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 543 

32619  00  =3      BYTE      cmdClass;                     /* The command class */
32620  00  =3      BYTE      cmd;                          /* The command */
32621  00  =3      BYTE      properties1;                  /* masked byte */
32622  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup1;                /**/
32623  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup2;                /**/
32624  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup3;                /**/
32625  00  =3      VG_SWITCH_COLOR_SET_V3_VG variantgroup4;                /**/
32626  00  =3      BYTE      duration;                     /**/
32627  00  =3  } ZW_SWITCH_COLOR_SET_4BYTE_V3_FRAME;
32628  00  =3  
32629  00  =3  /************************************************************/
32630  00  =3  /* Switch Color Start Level Change V3 command class structs */
32631  00  =3  /************************************************************/
32632  00  =3  typedef struct _ZW_SWITCH_COLOR_START_LEVEL_CHANGE_V3_FRAME_
32633  00  =3  {
32634  00  =3      BYTE      cmdClass;                     /* The command class */
32635  00  =3      BYTE      cmd;                          /* The command */
32636  00  =3      BYTE      properties1;                  /* masked byte */
32637  00  =3      BYTE      colorComponentId;             /**/
32638  00  =3      BYTE      startLevel;                   /**/
32639  00  =3      BYTE      duration;                     /**/
32640  00  =3  } ZW_SWITCH_COLOR_START_LEVEL_CHANGE_V3_FRAME;
32641  00  =3  
32642  00  =3  /************************************************************/
32643  00  =3  /* Switch Color Stop Level Change V3 command class structs */
32644  00  =3  /************************************************************/
32645  00  =3  typedef struct _ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_V3_FRAME_
32646  00  =3  {
32647  00  =3      BYTE      cmdClass;                     /* The command class */
32648  00  =3      BYTE      cmd;                          /* The command */
32649  00  =3      BYTE      colorComponentId;             /**/
32650  00  =3  } ZW_SWITCH_COLOR_STOP_LEVEL_CHANGE_V3_FRAME;
32651  00  =3  
32652  00  =3  /************************************************************/
32653  00  =3  /* Schedule Supported Get command class structs */          
32654  00  =3  /************************************************************/
32655  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_GET_FRAME_
32656  00  =3  {
32657  00  =3      BYTE      cmdClass;                     /* The command class */
32658  00  =3      BYTE      cmd;                          /* The command */
32659  00  =3  } ZW_SCHEDULE_SUPPORTED_GET_FRAME;
32660  00  =3  
32661  00  =3  /************************************************************/
32662  00  =3  /* Schedule Supported Report variant group structs */       
32663  00  =3  /************************************************************/
32664  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_REPORT_VG_
32665  00  =3  {
32666  00  =3      BYTE      supportedCc;                  /**/
32667  00  =3      BYTE      properties2;                  /* masked byte */
32668  00  =3  } VG_SCHEDULE_SUPPORTED_REPORT_VG;
32669  00  =3  
32670  00  =3  /************************************************************/
32671  00  =3  /* Schedule Supported Report 1byte command class structs */ 
32672  00  =3  /************************************************************/
32673  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_FRAME_
32674  00  =3  {
32675  00  =3      BYTE      cmdClass;                     /* The command class */
32676  00  =3      BYTE      cmd;                          /* The command */
32677  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
32678  00  =3      BYTE      properties1;                  /* masked byte */
32679  00  =3      BYTE      numberOfSupportedCc;          /**/
32680  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 544 

32681  00  =3      BYTE      properties3;                  /* masked byte */
32682  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_FRAME;
32683  00  =3  
32684  00  =3  /************************************************************/
32685  00  =3  /* Schedule Supported Report 2byte command class structs */ 
32686  00  =3  /************************************************************/
32687  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_FRAME_
32688  00  =3  {
32689  00  =3      BYTE      cmdClass;                     /* The command class */
32690  00  =3      BYTE      cmd;                          /* The command */
32691  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
32692  00  =3      BYTE      properties1;                  /* masked byte */
32693  00  =3      BYTE      numberOfSupportedCc;          /**/
32694  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup1;                /**/
32695  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup2;                /**/
32696  00  =3      BYTE      properties3;                  /* masked byte */
32697  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_FRAME;
32698  00  =3  
32699  00  =3  /************************************************************/
32700  00  =3  /* Schedule Supported Report 3byte command class structs */ 
32701  00  =3  /************************************************************/
32702  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_FRAME_
32703  00  =3  {
32704  00  =3      BYTE      cmdClass;                     /* The command class */
32705  00  =3      BYTE      cmd;                          /* The command */
32706  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
32707  00  =3      BYTE      properties1;                  /* masked byte */
32708  00  =3      BYTE      numberOfSupportedCc;          /**/
32709  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup1;                /**/
32710  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup2;                /**/
32711  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup3;                /**/
32712  00  =3      BYTE      properties3;                  /* masked byte */
32713  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_FRAME;
32714  00  =3  
32715  00  =3  /************************************************************/
32716  00  =3  /* Schedule Supported Report 4byte command class structs */ 
32717  00  =3  /************************************************************/
32718  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_FRAME_
32719  00  =3  {
32720  00  =3      BYTE      cmdClass;                     /* The command class */
32721  00  =3      BYTE      cmd;                          /* The command */
32722  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
32723  00  =3      BYTE      properties1;                  /* masked byte */
32724  00  =3      BYTE      numberOfSupportedCc;          /**/
32725  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup1;                /**/
32726  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup2;                /**/
32727  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup3;                /**/
32728  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_VG variantgroup4;                /**/
32729  00  =3      BYTE      properties3;                  /* masked byte */
32730  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_FRAME;
32731  00  =3  
32732  00  =3  /************************************************************/
32733  00  =3  /* Command Schedule Set variant group structs */            
32734  00  =3  /************************************************************/
32735  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_1BYTE_VG_
32736  00  =3  {
32737  00  =3      BYTE      cmdLength;                    /**/
32738  00  =3      BYTE      cmdByte1;                     
32739  00  =3  } VG_COMMAND_SCHEDULE_SET_1BYTE_VG;
32740  00  =3  
32741  00  =3  /************************************************************/
32742  00  =3  /* Command Schedule Set variant group structs */            
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 545 

32743  00  =3  /************************************************************/
32744  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_2BYTE_VG_
32745  00  =3  {
32746  00  =3      BYTE      cmdLength;                    /**/
32747  00  =3      BYTE      cmdByte1;                     /* MSB */
32748  00  =3      BYTE      cmdByte2;                     /* LSB */
32749  00  =3  } VG_COMMAND_SCHEDULE_SET_2BYTE_VG;
32750  00  =3  
32751  00  =3  /************************************************************/
32752  00  =3  /* Command Schedule Set variant group structs */            
32753  00  =3  /************************************************************/
32754  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_3BYTE_VG_
32755  00  =3  {
32756  00  =3      BYTE      cmdLength;                    /**/
32757  00  =3      BYTE      cmdByte1;                     /* MSB */
32758  00  =3      BYTE      cmdByte2;                     
32759  00  =3      BYTE      cmdByte3;                     /* LSB */
32760  00  =3  } VG_COMMAND_SCHEDULE_SET_3BYTE_VG;
32761  00  =3  
32762  00  =3  /************************************************************/
32763  00  =3  /* Command Schedule Set variant group structs */            
32764  00  =3  /************************************************************/
32765  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_4BYTE_VG_
32766  00  =3  {
32767  00  =3      BYTE      cmdLength;                    /**/
32768  00  =3      BYTE      cmdByte1;                     /* MSB */
32769  00  =3      BYTE      cmdByte2;                     
32770  00  =3      BYTE      cmdByte3;                     
32771  00  =3      BYTE      cmdByte4;                     /* LSB */
32772  00  =3  } VG_COMMAND_SCHEDULE_SET_4BYTE_VG;
32773  00  =3  
32774  00  =3  /************************************************************/
32775  00  =3  /* Command Schedule Set 1byte command class structs */      
32776  00  =3  /************************************************************/
32777  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_1BYTE_FRAME_
32778  00  =3  {
32779  00  =3      BYTE      cmdClass;                     /* The command class */
32780  00  =3      BYTE      cmd;                          /* The command */
32781  00  =3      BYTE      scheduleId;                   /**/
32782  00  =3      BYTE      userIdentifier;               /**/
32783  00  =3      BYTE      startYear;                    /**/
32784  00  =3      BYTE      properties1;                  /* masked byte */
32785  00  =3      BYTE      properties2;                  /* masked byte */
32786  00  =3      BYTE      properties3;                  /* masked byte */
32787  00  =3      BYTE      properties4;                  /* masked byte */
32788  00  =3      BYTE      properties5;                  /* masked byte */
32789  00  =3      BYTE      durationByte1;                /* MSB */
32790  00  =3      BYTE      durationByte2;                /* LSB */
32791  00  =3      BYTE      reportsToFollow;              /**/
32792  00  =3      BYTE      numberOfCmdToFollow;          /**/
32793  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup1;                /**/
32794  00  =3  } ZW_COMMAND_SCHEDULE_SET_1BYTE_FRAME;
32795  00  =3  
32796  00  =3  /************************************************************/
32797  00  =3  /* Command Schedule Set 2byte command class structs */      
32798  00  =3  /************************************************************/
32799  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_2BYTE_FRAME_
32800  00  =3  {
32801  00  =3      BYTE      cmdClass;                     /* The command class */
32802  00  =3      BYTE      cmd;                          /* The command */
32803  00  =3      BYTE      scheduleId;                   /**/
32804  00  =3      BYTE      userIdentifier;               /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 546 

32805  00  =3      BYTE      startYear;                    /**/
32806  00  =3      BYTE      properties1;                  /* masked byte */
32807  00  =3      BYTE      properties2;                  /* masked byte */
32808  00  =3      BYTE      properties3;                  /* masked byte */
32809  00  =3      BYTE      properties4;                  /* masked byte */
32810  00  =3      BYTE      properties5;                  /* masked byte */
32811  00  =3      BYTE      durationByte1;                /* MSB */
32812  00  =3      BYTE      durationByte2;                /* LSB */
32813  00  =3      BYTE      reportsToFollow;              /**/
32814  00  =3      BYTE      numberOfCmdToFollow;          /**/
32815  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup1;                /**/
32816  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup2;                /**/
32817  00  =3  } ZW_COMMAND_SCHEDULE_SET_2BYTE_FRAME;
32818  00  =3  
32819  00  =3  /************************************************************/
32820  00  =3  /* Command Schedule Set 3byte command class structs */      
32821  00  =3  /************************************************************/
32822  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_3BYTE_FRAME_
32823  00  =3  {
32824  00  =3      BYTE      cmdClass;                     /* The command class */
32825  00  =3      BYTE      cmd;                          /* The command */
32826  00  =3      BYTE      scheduleId;                   /**/
32827  00  =3      BYTE      userIdentifier;               /**/
32828  00  =3      BYTE      startYear;                    /**/
32829  00  =3      BYTE      properties1;                  /* masked byte */
32830  00  =3      BYTE      properties2;                  /* masked byte */
32831  00  =3      BYTE      properties3;                  /* masked byte */
32832  00  =3      BYTE      properties4;                  /* masked byte */
32833  00  =3      BYTE      properties5;                  /* masked byte */
32834  00  =3      BYTE      durationByte1;                /* MSB */
32835  00  =3      BYTE      durationByte2;                /* LSB */
32836  00  =3      BYTE      reportsToFollow;              /**/
32837  00  =3      BYTE      numberOfCmdToFollow;          /**/
32838  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup1;                /**/
32839  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup2;                /**/
32840  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup3;                /**/
32841  00  =3  } ZW_COMMAND_SCHEDULE_SET_3BYTE_FRAME;
32842  00  =3  
32843  00  =3  /************************************************************/
32844  00  =3  /* Command Schedule Set 4byte command class structs */      
32845  00  =3  /************************************************************/
32846  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_4BYTE_FRAME_
32847  00  =3  {
32848  00  =3      BYTE      cmdClass;                     /* The command class */
32849  00  =3      BYTE      cmd;                          /* The command */
32850  00  =3      BYTE      scheduleId;                   /**/
32851  00  =3      BYTE      userIdentifier;               /**/
32852  00  =3      BYTE      startYear;                    /**/
32853  00  =3      BYTE      properties1;                  /* masked byte */
32854  00  =3      BYTE      properties2;                  /* masked byte */
32855  00  =3      BYTE      properties3;                  /* masked byte */
32856  00  =3      BYTE      properties4;                  /* masked byte */
32857  00  =3      BYTE      properties5;                  /* masked byte */
32858  00  =3      BYTE      durationByte1;                /* MSB */
32859  00  =3      BYTE      durationByte2;                /* LSB */
32860  00  =3      BYTE      reportsToFollow;              /**/
32861  00  =3      BYTE      numberOfCmdToFollow;          /**/
32862  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup1;                /**/
32863  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup2;                /**/
32864  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup3;                /**/
32865  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_VG variantgroup4;                /**/
32866  00  =3  } ZW_COMMAND_SCHEDULE_SET_4BYTE_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 547 

32867  00  =3  
32868  00  =3  /************************************************************/
32869  00  =3  /* Command Schedule Get command class structs */            
32870  00  =3  /************************************************************/
32871  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_GET_FRAME_
32872  00  =3  {
32873  00  =3      BYTE      cmdClass;                     /* The command class */
32874  00  =3      BYTE      cmd;                          /* The command */
32875  00  =3      BYTE      scheduleId;                   /**/
32876  00  =3  } ZW_COMMAND_SCHEDULE_GET_FRAME;
32877  00  =3  
32878  00  =3  /************************************************************/
32879  00  =3  /* Command Schedule Report variant group structs */         
32880  00  =3  /************************************************************/
32881  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_1BYTE_VG_
32882  00  =3  {
32883  00  =3      BYTE      cmdLength;                    /**/
32884  00  =3      BYTE      cmdByte1;                     
32885  00  =3  } VG_COMMAND_SCHEDULE_REPORT_1BYTE_VG;
32886  00  =3  
32887  00  =3  /************************************************************/
32888  00  =3  /* Command Schedule Report variant group structs */         
32889  00  =3  /************************************************************/
32890  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_2BYTE_VG_
32891  00  =3  {
32892  00  =3      BYTE      cmdLength;                    /**/
32893  00  =3      BYTE      cmdByte1;                     /* MSB */
32894  00  =3      BYTE      cmdByte2;                     /* LSB */
32895  00  =3  } VG_COMMAND_SCHEDULE_REPORT_2BYTE_VG;
32896  00  =3  
32897  00  =3  /************************************************************/
32898  00  =3  /* Command Schedule Report variant group structs */         
32899  00  =3  /************************************************************/
32900  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_3BYTE_VG_
32901  00  =3  {
32902  00  =3      BYTE      cmdLength;                    /**/
32903  00  =3      BYTE      cmdByte1;                     /* MSB */
32904  00  =3      BYTE      cmdByte2;                     
32905  00  =3      BYTE      cmdByte3;                     /* LSB */
32906  00  =3  } VG_COMMAND_SCHEDULE_REPORT_3BYTE_VG;
32907  00  =3  
32908  00  =3  /************************************************************/
32909  00  =3  /* Command Schedule Report variant group structs */         
32910  00  =3  /************************************************************/
32911  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG_
32912  00  =3  {
32913  00  =3      BYTE      cmdLength;                    /**/
32914  00  =3      BYTE      cmdByte1;                     /* MSB */
32915  00  =3      BYTE      cmdByte2;                     
32916  00  =3      BYTE      cmdByte3;                     
32917  00  =3      BYTE      cmdByte4;                     /* LSB */
32918  00  =3  } VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG;
32919  00  =3  
32920  00  =3  /************************************************************/
32921  00  =3  /* Command Schedule Report 1byte command class structs */   
32922  00  =3  /************************************************************/
32923  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_1BYTE_FRAME_
32924  00  =3  {
32925  00  =3      BYTE      cmdClass;                     /* The command class */
32926  00  =3      BYTE      cmd;                          /* The command */
32927  00  =3      BYTE      scheduleId;                   /**/
32928  00  =3      BYTE      userIdentifier;               /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 548 

32929  00  =3      BYTE      startYear;                    /**/
32930  00  =3      BYTE      properties1;                  /* masked byte */
32931  00  =3      BYTE      properties2;                  /* masked byte */
32932  00  =3      BYTE      properties3;                  /* masked byte */
32933  00  =3      BYTE      properties4;                  /* masked byte */
32934  00  =3      BYTE      properties5;                  /* masked byte */
32935  00  =3      BYTE      durationByte1;                /* MSB */
32936  00  =3      BYTE      durationByte2;                /* LSB */
32937  00  =3      BYTE      reportsToFollow;              /**/
32938  00  =3      BYTE      numberOfCmdToFollow;          /**/
32939  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup1;                /**/
32940  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_1BYTE_FRAME;
32941  00  =3  
32942  00  =3  /************************************************************/
32943  00  =3  /* Command Schedule Report 2byte command class structs */   
32944  00  =3  /************************************************************/
32945  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_2BYTE_FRAME_
32946  00  =3  {
32947  00  =3      BYTE      cmdClass;                     /* The command class */
32948  00  =3      BYTE      cmd;                          /* The command */
32949  00  =3      BYTE      scheduleId;                   /**/
32950  00  =3      BYTE      userIdentifier;               /**/
32951  00  =3      BYTE      startYear;                    /**/
32952  00  =3      BYTE      properties1;                  /* masked byte */
32953  00  =3      BYTE      properties2;                  /* masked byte */
32954  00  =3      BYTE      properties3;                  /* masked byte */
32955  00  =3      BYTE      properties4;                  /* masked byte */
32956  00  =3      BYTE      properties5;                  /* masked byte */
32957  00  =3      BYTE      durationByte1;                /* MSB */
32958  00  =3      BYTE      durationByte2;                /* LSB */
32959  00  =3      BYTE      reportsToFollow;              /**/
32960  00  =3      BYTE      numberOfCmdToFollow;          /**/
32961  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup1;                /**/
32962  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup2;                /**/
32963  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_2BYTE_FRAME;
32964  00  =3  
32965  00  =3  /************************************************************/
32966  00  =3  /* Command Schedule Report 3byte command class structs */   
32967  00  =3  /************************************************************/
32968  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_3BYTE_FRAME_
32969  00  =3  {
32970  00  =3      BYTE      cmdClass;                     /* The command class */
32971  00  =3      BYTE      cmd;                          /* The command */
32972  00  =3      BYTE      scheduleId;                   /**/
32973  00  =3      BYTE      userIdentifier;               /**/
32974  00  =3      BYTE      startYear;                    /**/
32975  00  =3      BYTE      properties1;                  /* masked byte */
32976  00  =3      BYTE      properties2;                  /* masked byte */
32977  00  =3      BYTE      properties3;                  /* masked byte */
32978  00  =3      BYTE      properties4;                  /* masked byte */
32979  00  =3      BYTE      properties5;                  /* masked byte */
32980  00  =3      BYTE      durationByte1;                /* MSB */
32981  00  =3      BYTE      durationByte2;                /* LSB */
32982  00  =3      BYTE      reportsToFollow;              /**/
32983  00  =3      BYTE      numberOfCmdToFollow;          /**/
32984  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup1;                /**/
32985  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup2;                /**/
32986  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup3;                /**/
32987  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_3BYTE_FRAME;
32988  00  =3  
32989  00  =3  /************************************************************/
32990  00  =3  /* Command Schedule Report 4byte command class structs */   
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 549 

32991  00  =3  /************************************************************/
32992  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_4BYTE_FRAME_
32993  00  =3  {
32994  00  =3      BYTE      cmdClass;                     /* The command class */
32995  00  =3      BYTE      cmd;                          /* The command */
32996  00  =3      BYTE      scheduleId;                   /**/
32997  00  =3      BYTE      userIdentifier;               /**/
32998  00  =3      BYTE      startYear;                    /**/
32999  00  =3      BYTE      properties1;                  /* masked byte */
33000  00  =3      BYTE      properties2;                  /* masked byte */
33001  00  =3      BYTE      properties3;                  /* masked byte */
33002  00  =3      BYTE      properties4;                  /* masked byte */
33003  00  =3      BYTE      properties5;                  /* masked byte */
33004  00  =3      BYTE      durationByte1;                /* MSB */
33005  00  =3      BYTE      durationByte2;                /* LSB */
33006  00  =3      BYTE      reportsToFollow;              /**/
33007  00  =3      BYTE      numberOfCmdToFollow;          /**/
33008  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup1;                /**/
33009  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup2;                /**/
33010  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup3;                /**/
33011  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_VG variantgroup4;                /**/
33012  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_4BYTE_FRAME;
33013  00  =3  
33014  00  =3  /************************************************************/
33015  00  =3  /* Schedule Remove command class structs */                 
33016  00  =3  /************************************************************/
33017  00  =3  typedef struct _ZW_SCHEDULE_REMOVE_FRAME_
33018  00  =3  {
33019  00  =3      BYTE      cmdClass;                     /* The command class */
33020  00  =3      BYTE      cmd;                          /* The command */
33021  00  =3      BYTE      scheduleId;                   /**/
33022  00  =3  } ZW_SCHEDULE_REMOVE_FRAME;
33023  00  =3  
33024  00  =3  /************************************************************/
33025  00  =3  /* Schedule State Set command class structs */              
33026  00  =3  /************************************************************/
33027  00  =3  typedef struct _ZW_SCHEDULE_STATE_SET_FRAME_
33028  00  =3  {
33029  00  =3      BYTE      cmdClass;                     /* The command class */
33030  00  =3      BYTE      cmd;                          /* The command */
33031  00  =3      BYTE      scheduleId;                   /**/
33032  00  =3      BYTE      scheduleState;                /**/
33033  00  =3  } ZW_SCHEDULE_STATE_SET_FRAME;
33034  00  =3  
33035  00  =3  /************************************************************/
33036  00  =3  /* Schedule State Get command class structs */              
33037  00  =3  /************************************************************/
33038  00  =3  typedef struct _ZW_SCHEDULE_STATE_GET_FRAME_
33039  00  =3  {
33040  00  =3      BYTE      cmdClass;                     /* The command class */
33041  00  =3      BYTE      cmd;                          /* The command */
33042  00  =3  } ZW_SCHEDULE_STATE_GET_FRAME;
33043  00  =3  
33044  00  =3  /************************************************************/
33045  00  =3  /* Schedule State Report variant group structs */           
33046  00  =3  /************************************************************/
33047  00  =3  typedef struct _VG_SCHEDULE_STATE_REPORT_VG_
33048  00  =3  {
33049  00  =3      BYTE      properties2;                  /* masked byte */
33050  00  =3  } VG_SCHEDULE_STATE_REPORT_VG;
33051  00  =3  
33052  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 550 

33053  00  =3  /* Schedule State Report 1byte command class structs */     
33054  00  =3  /************************************************************/
33055  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_1BYTE_FRAME_
33056  00  =3  {
33057  00  =3      BYTE      cmdClass;                     /* The command class */
33058  00  =3      BYTE      cmd;                          /* The command */
33059  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33060  00  =3      BYTE      properties1;                  /* masked byte */
33061  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup1;                /**/
33062  00  =3  } ZW_SCHEDULE_STATE_REPORT_1BYTE_FRAME;
33063  00  =3  
33064  00  =3  /************************************************************/
33065  00  =3  /* Schedule State Report 2byte command class structs */     
33066  00  =3  /************************************************************/
33067  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_2BYTE_FRAME_
33068  00  =3  {
33069  00  =3      BYTE      cmdClass;                     /* The command class */
33070  00  =3      BYTE      cmd;                          /* The command */
33071  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33072  00  =3      BYTE      properties1;                  /* masked byte */
33073  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup1;                /**/
33074  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup2;                /**/
33075  00  =3  } ZW_SCHEDULE_STATE_REPORT_2BYTE_FRAME;
33076  00  =3  
33077  00  =3  /************************************************************/
33078  00  =3  /* Schedule State Report 3byte command class structs */     
33079  00  =3  /************************************************************/
33080  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_3BYTE_FRAME_
33081  00  =3  {
33082  00  =3      BYTE      cmdClass;                     /* The command class */
33083  00  =3      BYTE      cmd;                          /* The command */
33084  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33085  00  =3      BYTE      properties1;                  /* masked byte */
33086  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup1;                /**/
33087  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup2;                /**/
33088  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup3;                /**/
33089  00  =3  } ZW_SCHEDULE_STATE_REPORT_3BYTE_FRAME;
33090  00  =3  
33091  00  =3  /************************************************************/
33092  00  =3  /* Schedule State Report 4byte command class structs */     
33093  00  =3  /************************************************************/
33094  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_4BYTE_FRAME_
33095  00  =3  {
33096  00  =3      BYTE      cmdClass;                     /* The command class */
33097  00  =3      BYTE      cmd;                          /* The command */
33098  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33099  00  =3      BYTE      properties1;                  /* masked byte */
33100  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup1;                /**/
33101  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup2;                /**/
33102  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup3;                /**/
33103  00  =3      VG_SCHEDULE_STATE_REPORT_VG variantgroup4;                /**/
33104  00  =3  } ZW_SCHEDULE_STATE_REPORT_4BYTE_FRAME;
33105  00  =3  
33106  00  =3  /************************************************************/
33107  00  =3  /* Schedule Supported Get V2 command class structs */       
33108  00  =3  /************************************************************/
33109  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_GET_V2_FRAME_
33110  00  =3  {
33111  00  =3      BYTE      cmdClass;                     /* The command class */
33112  00  =3      BYTE      cmd;                          /* The command */
33113  00  =3      BYTE      scheduleIdBlock;              /**/
33114  00  =3  } ZW_SCHEDULE_SUPPORTED_GET_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 551 

33115  00  =3  
33116  00  =3  /************************************************************/
33117  00  =3  /* Schedule Supported Report V2 variant group structs */    
33118  00  =3  /************************************************************/
33119  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_REPORT_V2_VG_
33120  00  =3  {
33121  00  =3      BYTE      supportedCc;                  /**/
33122  00  =3      BYTE      properties2;                  /* masked byte */
33123  00  =3  } VG_SCHEDULE_SUPPORTED_REPORT_V2_VG;
33124  00  =3  
33125  00  =3  /************************************************************/
33126  00  =3  /* Schedule Supported Report 1byte V2 command class structs */
33127  00  =3  /************************************************************/
33128  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V2_FRAME_
33129  00  =3  {
33130  00  =3      BYTE      cmdClass;                     /* The command class */
33131  00  =3      BYTE      cmd;                          /* The command */
33132  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33133  00  =3      BYTE      properties1;                  /* masked byte */
33134  00  =3      BYTE      numberOfSupportedCc;          /**/
33135  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup1;                /**/
33136  00  =3      BYTE      properties3;                  /* masked byte */
33137  00  =3      BYTE      scheduleIdBlock;              /**/
33138  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33139  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V2_FRAME;
33140  00  =3  
33141  00  =3  /************************************************************/
33142  00  =3  /* Schedule Supported Report 2byte V2 command class structs */
33143  00  =3  /************************************************************/
33144  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V2_FRAME_
33145  00  =3  {
33146  00  =3      BYTE      cmdClass;                     /* The command class */
33147  00  =3      BYTE      cmd;                          /* The command */
33148  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33149  00  =3      BYTE      properties1;                  /* masked byte */
33150  00  =3      BYTE      numberOfSupportedCc;          /**/
33151  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup1;                /**/
33152  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup2;                /**/
33153  00  =3      BYTE      properties3;                  /* masked byte */
33154  00  =3      BYTE      scheduleIdBlock;              /**/
33155  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33156  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V2_FRAME;
33157  00  =3  
33158  00  =3  /************************************************************/
33159  00  =3  /* Schedule Supported Report 3byte V2 command class structs */
33160  00  =3  /************************************************************/
33161  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V2_FRAME_
33162  00  =3  {
33163  00  =3      BYTE      cmdClass;                     /* The command class */
33164  00  =3      BYTE      cmd;                          /* The command */
33165  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33166  00  =3      BYTE      properties1;                  /* masked byte */
33167  00  =3      BYTE      numberOfSupportedCc;          /**/
33168  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup1;                /**/
33169  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup2;                /**/
33170  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup3;                /**/
33171  00  =3      BYTE      properties3;                  /* masked byte */
33172  00  =3      BYTE      scheduleIdBlock;              /**/
33173  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33174  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V2_FRAME;
33175  00  =3  
33176  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 552 

33177  00  =3  /* Schedule Supported Report 4byte V2 command class structs */
33178  00  =3  /************************************************************/
33179  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V2_FRAME_
33180  00  =3  {
33181  00  =3      BYTE      cmdClass;                     /* The command class */
33182  00  =3      BYTE      cmd;                          /* The command */
33183  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33184  00  =3      BYTE      properties1;                  /* masked byte */
33185  00  =3      BYTE      numberOfSupportedCc;          /**/
33186  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup1;                /**/
33187  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup2;                /**/
33188  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup3;                /**/
33189  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V2_VG variantgroup4;                /**/
33190  00  =3      BYTE      properties3;                  /* masked byte */
33191  00  =3      BYTE      scheduleIdBlock;              /**/
33192  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33193  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V2_FRAME;
33194  00  =3  
33195  00  =3  /************************************************************/
33196  00  =3  /* Command Schedule Set V2 variant group structs */         
33197  00  =3  /************************************************************/
33198  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_1BYTE_V2_VG_
33199  00  =3  {
33200  00  =3      BYTE      cmdLength;                    /**/
33201  00  =3      BYTE      cmdByte1;                     
33202  00  =3  } VG_COMMAND_SCHEDULE_SET_1BYTE_V2_VG;
33203  00  =3  
33204  00  =3  /************************************************************/
33205  00  =3  /* Command Schedule Set V2 variant group structs */         
33206  00  =3  /************************************************************/
33207  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_2BYTE_V2_VG_
33208  00  =3  {
33209  00  =3      BYTE      cmdLength;                    /**/
33210  00  =3      BYTE      cmdByte1;                     /* MSB */
33211  00  =3      BYTE      cmdByte2;                     /* LSB */
33212  00  =3  } VG_COMMAND_SCHEDULE_SET_2BYTE_V2_VG;
33213  00  =3  
33214  00  =3  /************************************************************/
33215  00  =3  /* Command Schedule Set V2 variant group structs */         
33216  00  =3  /************************************************************/
33217  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_3BYTE_V2_VG_
33218  00  =3  {
33219  00  =3      BYTE      cmdLength;                    /**/
33220  00  =3      BYTE      cmdByte1;                     /* MSB */
33221  00  =3      BYTE      cmdByte2;                     
33222  00  =3      BYTE      cmdByte3;                     /* LSB */
33223  00  =3  } VG_COMMAND_SCHEDULE_SET_3BYTE_V2_VG;
33224  00  =3  
33225  00  =3  /************************************************************/
33226  00  =3  /* Command Schedule Set V2 variant group structs */         
33227  00  =3  /************************************************************/
33228  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG_
33229  00  =3  {
33230  00  =3      BYTE      cmdLength;                    /**/
33231  00  =3      BYTE      cmdByte1;                     /* MSB */
33232  00  =3      BYTE      cmdByte2;                     
33233  00  =3      BYTE      cmdByte3;                     
33234  00  =3      BYTE      cmdByte4;                     /* LSB */
33235  00  =3  } VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG;
33236  00  =3  
33237  00  =3  /************************************************************/
33238  00  =3  /* Command Schedule Set 1byte V2 command class structs */   
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 553 

33239  00  =3  /************************************************************/
33240  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_1BYTE_V2_FRAME_
33241  00  =3  {
33242  00  =3      BYTE      cmdClass;                     /* The command class */
33243  00  =3      BYTE      cmd;                          /* The command */
33244  00  =3      BYTE      scheduleId;                   /**/
33245  00  =3      BYTE      scheduleIdBlock;              /**/
33246  00  =3      BYTE      startYear;                    /**/
33247  00  =3      BYTE      properties1;                  /* masked byte */
33248  00  =3      BYTE      properties2;                  /* masked byte */
33249  00  =3      BYTE      properties3;                  /* masked byte */
33250  00  =3      BYTE      properties4;                  /* masked byte */
33251  00  =3      BYTE      properties5;                  /* masked byte */
33252  00  =3      BYTE      durationByte1;                /* MSB */
33253  00  =3      BYTE      durationByte2;                /* LSB */
33254  00  =3      BYTE      reportsToFollow;              /**/
33255  00  =3      BYTE      numberOfCmdToFollow;          /**/
33256  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup1;                /**/
33257  00  =3  } ZW_COMMAND_SCHEDULE_SET_1BYTE_V2_FRAME;
33258  00  =3  
33259  00  =3  /************************************************************/
33260  00  =3  /* Command Schedule Set 2byte V2 command class structs */   
33261  00  =3  /************************************************************/
33262  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_2BYTE_V2_FRAME_
33263  00  =3  {
33264  00  =3      BYTE      cmdClass;                     /* The command class */
33265  00  =3      BYTE      cmd;                          /* The command */
33266  00  =3      BYTE      scheduleId;                   /**/
33267  00  =3      BYTE      scheduleIdBlock;              /**/
33268  00  =3      BYTE      startYear;                    /**/
33269  00  =3      BYTE      properties1;                  /* masked byte */
33270  00  =3      BYTE      properties2;                  /* masked byte */
33271  00  =3      BYTE      properties3;                  /* masked byte */
33272  00  =3      BYTE      properties4;                  /* masked byte */
33273  00  =3      BYTE      properties5;                  /* masked byte */
33274  00  =3      BYTE      durationByte1;                /* MSB */
33275  00  =3      BYTE      durationByte2;                /* LSB */
33276  00  =3      BYTE      reportsToFollow;              /**/
33277  00  =3      BYTE      numberOfCmdToFollow;          /**/
33278  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup1;                /**/
33279  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup2;                /**/
33280  00  =3  } ZW_COMMAND_SCHEDULE_SET_2BYTE_V2_FRAME;
33281  00  =3  
33282  00  =3  /************************************************************/
33283  00  =3  /* Command Schedule Set 3byte V2 command class structs */   
33284  00  =3  /************************************************************/
33285  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_3BYTE_V2_FRAME_
33286  00  =3  {
33287  00  =3      BYTE      cmdClass;                     /* The command class */
33288  00  =3      BYTE      cmd;                          /* The command */
33289  00  =3      BYTE      scheduleId;                   /**/
33290  00  =3      BYTE      scheduleIdBlock;              /**/
33291  00  =3      BYTE      startYear;                    /**/
33292  00  =3      BYTE      properties1;                  /* masked byte */
33293  00  =3      BYTE      properties2;                  /* masked byte */
33294  00  =3      BYTE      properties3;                  /* masked byte */
33295  00  =3      BYTE      properties4;                  /* masked byte */
33296  00  =3      BYTE      properties5;                  /* masked byte */
33297  00  =3      BYTE      durationByte1;                /* MSB */
33298  00  =3      BYTE      durationByte2;                /* LSB */
33299  00  =3      BYTE      reportsToFollow;              /**/
33300  00  =3      BYTE      numberOfCmdToFollow;          /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 554 

33301  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup1;                /**/
33302  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup2;                /**/
33303  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup3;                /**/
33304  00  =3  } ZW_COMMAND_SCHEDULE_SET_3BYTE_V2_FRAME;
33305  00  =3  
33306  00  =3  /************************************************************/
33307  00  =3  /* Command Schedule Set 4byte V2 command class structs */   
33308  00  =3  /************************************************************/
33309  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_4BYTE_V2_FRAME_
33310  00  =3  {
33311  00  =3      BYTE      cmdClass;                     /* The command class */
33312  00  =3      BYTE      cmd;                          /* The command */
33313  00  =3      BYTE      scheduleId;                   /**/
33314  00  =3      BYTE      scheduleIdBlock;              /**/
33315  00  =3      BYTE      startYear;                    /**/
33316  00  =3      BYTE      properties1;                  /* masked byte */
33317  00  =3      BYTE      properties2;                  /* masked byte */
33318  00  =3      BYTE      properties3;                  /* masked byte */
33319  00  =3      BYTE      properties4;                  /* masked byte */
33320  00  =3      BYTE      properties5;                  /* masked byte */
33321  00  =3      BYTE      durationByte1;                /* MSB */
33322  00  =3      BYTE      durationByte2;                /* LSB */
33323  00  =3      BYTE      reportsToFollow;              /**/
33324  00  =3      BYTE      numberOfCmdToFollow;          /**/
33325  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup1;                /**/
33326  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup2;                /**/
33327  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup3;                /**/
33328  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V2_VG variantgroup4;                /**/
33329  00  =3  } ZW_COMMAND_SCHEDULE_SET_4BYTE_V2_FRAME;
33330  00  =3  
33331  00  =3  /************************************************************/
33332  00  =3  /* Command Schedule Get V2 command class structs */         
33333  00  =3  /************************************************************/
33334  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_GET_V2_FRAME_
33335  00  =3  {
33336  00  =3      BYTE      cmdClass;                     /* The command class */
33337  00  =3      BYTE      cmd;                          /* The command */
33338  00  =3      BYTE      scheduleId;                   /**/
33339  00  =3      BYTE      scheduleIdBlock;              /**/
33340  00  =3  } ZW_COMMAND_SCHEDULE_GET_V2_FRAME;
33341  00  =3  
33342  00  =3  /************************************************************/
33343  00  =3  /* Command Schedule Report V2 variant group structs */      
33344  00  =3  /************************************************************/
33345  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_1BYTE_V2_VG_
33346  00  =3  {
33347  00  =3      BYTE      cmdLength;                    /**/
33348  00  =3      BYTE      cmdByte1;                     
33349  00  =3  } VG_COMMAND_SCHEDULE_REPORT_1BYTE_V2_VG;
33350  00  =3  
33351  00  =3  /************************************************************/
33352  00  =3  /* Command Schedule Report V2 variant group structs */      
33353  00  =3  /************************************************************/
33354  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_2BYTE_V2_VG_
33355  00  =3  {
33356  00  =3      BYTE      cmdLength;                    /**/
33357  00  =3      BYTE      cmdByte1;                     /* MSB */
33358  00  =3      BYTE      cmdByte2;                     /* LSB */
33359  00  =3  } VG_COMMAND_SCHEDULE_REPORT_2BYTE_V2_VG;
33360  00  =3  
33361  00  =3  /************************************************************/
33362  00  =3  /* Command Schedule Report V2 variant group structs */      
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 555 

33363  00  =3  /************************************************************/
33364  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_3BYTE_V2_VG_
33365  00  =3  {
33366  00  =3      BYTE      cmdLength;                    /**/
33367  00  =3      BYTE      cmdByte1;                     /* MSB */
33368  00  =3      BYTE      cmdByte2;                     
33369  00  =3      BYTE      cmdByte3;                     /* LSB */
33370  00  =3  } VG_COMMAND_SCHEDULE_REPORT_3BYTE_V2_VG;
33371  00  =3  
33372  00  =3  /************************************************************/
33373  00  =3  /* Command Schedule Report V2 variant group structs */      
33374  00  =3  /************************************************************/
33375  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG_
33376  00  =3  {
33377  00  =3      BYTE      cmdLength;                    /**/
33378  00  =3      BYTE      cmdByte1;                     /* MSB */
33379  00  =3      BYTE      cmdByte2;                     
33380  00  =3      BYTE      cmdByte3;                     
33381  00  =3      BYTE      cmdByte4;                     /* LSB */
33382  00  =3  } VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG;
33383  00  =3  
33384  00  =3  /************************************************************/
33385  00  =3  /* Command Schedule Report 1byte V2 command class structs */
33386  00  =3  /************************************************************/
33387  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V2_FRAME_
33388  00  =3  {
33389  00  =3      BYTE      cmdClass;                     /* The command class */
33390  00  =3      BYTE      cmd;                          /* The command */
33391  00  =3      BYTE      scheduleId;                   /**/
33392  00  =3      BYTE      scheduleIdBlock;              /**/
33393  00  =3      BYTE      startYear;                    /**/
33394  00  =3      BYTE      properties1;                  /* masked byte */
33395  00  =3      BYTE      properties2;                  /* masked byte */
33396  00  =3      BYTE      properties3;                  /* masked byte */
33397  00  =3      BYTE      properties4;                  /* masked byte */
33398  00  =3      BYTE      properties5;                  /* masked byte */
33399  00  =3      BYTE      durationByte1;                /* MSB */
33400  00  =3      BYTE      durationByte2;                /* LSB */
33401  00  =3      BYTE      reportsToFollow;              /**/
33402  00  =3      BYTE      numberOfCmdToFollow;          /**/
33403  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup1;                /**/
33404  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V2_FRAME;
33405  00  =3  
33406  00  =3  /************************************************************/
33407  00  =3  /* Command Schedule Report 2byte V2 command class structs */
33408  00  =3  /************************************************************/
33409  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V2_FRAME_
33410  00  =3  {
33411  00  =3      BYTE      cmdClass;                     /* The command class */
33412  00  =3      BYTE      cmd;                          /* The command */
33413  00  =3      BYTE      scheduleId;                   /**/
33414  00  =3      BYTE      scheduleIdBlock;              /**/
33415  00  =3      BYTE      startYear;                    /**/
33416  00  =3      BYTE      properties1;                  /* masked byte */
33417  00  =3      BYTE      properties2;                  /* masked byte */
33418  00  =3      BYTE      properties3;                  /* masked byte */
33419  00  =3      BYTE      properties4;                  /* masked byte */
33420  00  =3      BYTE      properties5;                  /* masked byte */
33421  00  =3      BYTE      durationByte1;                /* MSB */
33422  00  =3      BYTE      durationByte2;                /* LSB */
33423  00  =3      BYTE      reportsToFollow;              /**/
33424  00  =3      BYTE      numberOfCmdToFollow;          /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 556 

33425  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup1;                /**/
33426  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup2;                /**/
33427  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V2_FRAME;
33428  00  =3  
33429  00  =3  /************************************************************/
33430  00  =3  /* Command Schedule Report 3byte V2 command class structs */
33431  00  =3  /************************************************************/
33432  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V2_FRAME_
33433  00  =3  {
33434  00  =3      BYTE      cmdClass;                     /* The command class */
33435  00  =3      BYTE      cmd;                          /* The command */
33436  00  =3      BYTE      scheduleId;                   /**/
33437  00  =3      BYTE      scheduleIdBlock;              /**/
33438  00  =3      BYTE      startYear;                    /**/
33439  00  =3      BYTE      properties1;                  /* masked byte */
33440  00  =3      BYTE      properties2;                  /* masked byte */
33441  00  =3      BYTE      properties3;                  /* masked byte */
33442  00  =3      BYTE      properties4;                  /* masked byte */
33443  00  =3      BYTE      properties5;                  /* masked byte */
33444  00  =3      BYTE      durationByte1;                /* MSB */
33445  00  =3      BYTE      durationByte2;                /* LSB */
33446  00  =3      BYTE      reportsToFollow;              /**/
33447  00  =3      BYTE      numberOfCmdToFollow;          /**/
33448  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup1;                /**/
33449  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup2;                /**/
33450  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup3;                /**/
33451  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V2_FRAME;
33452  00  =3  
33453  00  =3  /************************************************************/
33454  00  =3  /* Command Schedule Report 4byte V2 command class structs */
33455  00  =3  /************************************************************/
33456  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V2_FRAME_
33457  00  =3  {
33458  00  =3      BYTE      cmdClass;                     /* The command class */
33459  00  =3      BYTE      cmd;                          /* The command */
33460  00  =3      BYTE      scheduleId;                   /**/
33461  00  =3      BYTE      scheduleIdBlock;              /**/
33462  00  =3      BYTE      startYear;                    /**/
33463  00  =3      BYTE      properties1;                  /* masked byte */
33464  00  =3      BYTE      properties2;                  /* masked byte */
33465  00  =3      BYTE      properties3;                  /* masked byte */
33466  00  =3      BYTE      properties4;                  /* masked byte */
33467  00  =3      BYTE      properties5;                  /* masked byte */
33468  00  =3      BYTE      durationByte1;                /* MSB */
33469  00  =3      BYTE      durationByte2;                /* LSB */
33470  00  =3      BYTE      reportsToFollow;              /**/
33471  00  =3      BYTE      numberOfCmdToFollow;          /**/
33472  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup1;                /**/
33473  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup2;                /**/
33474  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup3;                /**/
33475  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V2_VG variantgroup4;                /**/
33476  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V2_FRAME;
33477  00  =3  
33478  00  =3  /************************************************************/
33479  00  =3  /* Schedule Remove V2 command class structs */              
33480  00  =3  /************************************************************/
33481  00  =3  typedef struct _ZW_SCHEDULE_REMOVE_V2_FRAME_
33482  00  =3  {
33483  00  =3      BYTE      cmdClass;                     /* The command class */
33484  00  =3      BYTE      cmd;                          /* The command */
33485  00  =3      BYTE      scheduleId;                   /**/
33486  00  =3      BYTE      scheduleIdBlock;              /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 557 

33487  00  =3  } ZW_SCHEDULE_REMOVE_V2_FRAME;
33488  00  =3  
33489  00  =3  /************************************************************/
33490  00  =3  /* Schedule State Set V2 command class structs */           
33491  00  =3  /************************************************************/
33492  00  =3  typedef struct _ZW_SCHEDULE_STATE_SET_V2_FRAME_
33493  00  =3  {
33494  00  =3      BYTE      cmdClass;                     /* The command class */
33495  00  =3      BYTE      cmd;                          /* The command */
33496  00  =3      BYTE      scheduleId;                   /**/
33497  00  =3      BYTE      scheduleState;                /**/
33498  00  =3      BYTE      scheduleIdBlock;              /**/
33499  00  =3  } ZW_SCHEDULE_STATE_SET_V2_FRAME;
33500  00  =3  
33501  00  =3  /************************************************************/
33502  00  =3  /* Schedule State Get V2 command class structs */           
33503  00  =3  /************************************************************/
33504  00  =3  typedef struct _ZW_SCHEDULE_STATE_GET_V2_FRAME_
33505  00  =3  {
33506  00  =3      BYTE      cmdClass;                     /* The command class */
33507  00  =3      BYTE      cmd;                          /* The command */
33508  00  =3      BYTE      scheduleIdBlock;              /**/
33509  00  =3  } ZW_SCHEDULE_STATE_GET_V2_FRAME;
33510  00  =3  
33511  00  =3  /************************************************************/
33512  00  =3  /* Schedule State Report V2 variant group structs */        
33513  00  =3  /************************************************************/
33514  00  =3  typedef struct _VG_SCHEDULE_STATE_REPORT_V2_VG_
33515  00  =3  {
33516  00  =3      BYTE      properties2;                  /* masked byte */
33517  00  =3  } VG_SCHEDULE_STATE_REPORT_V2_VG;
33518  00  =3  
33519  00  =3  /************************************************************/
33520  00  =3  /* Schedule State Report 1byte V2 command class structs */  
33521  00  =3  /************************************************************/
33522  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_1BYTE_V2_FRAME_
33523  00  =3  {
33524  00  =3      BYTE      cmdClass;                     /* The command class */
33525  00  =3      BYTE      cmd;                          /* The command */
33526  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33527  00  =3      BYTE      properties1;                  /* masked byte */
33528  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup1;                /**/
33529  00  =3      BYTE      scheduleIdBlock;              /**/
33530  00  =3  } ZW_SCHEDULE_STATE_REPORT_1BYTE_V2_FRAME;
33531  00  =3  
33532  00  =3  /************************************************************/
33533  00  =3  /* Schedule State Report 2byte V2 command class structs */  
33534  00  =3  /************************************************************/
33535  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_2BYTE_V2_FRAME_
33536  00  =3  {
33537  00  =3      BYTE      cmdClass;                     /* The command class */
33538  00  =3      BYTE      cmd;                          /* The command */
33539  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33540  00  =3      BYTE      properties1;                  /* masked byte */
33541  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup1;                /**/
33542  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup2;                /**/
33543  00  =3      BYTE      scheduleIdBlock;              /**/
33544  00  =3  } ZW_SCHEDULE_STATE_REPORT_2BYTE_V2_FRAME;
33545  00  =3  
33546  00  =3  /************************************************************/
33547  00  =3  /* Schedule State Report 3byte V2 command class structs */  
33548  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 558 

33549  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_3BYTE_V2_FRAME_
33550  00  =3  {
33551  00  =3      BYTE      cmdClass;                     /* The command class */
33552  00  =3      BYTE      cmd;                          /* The command */
33553  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33554  00  =3      BYTE      properties1;                  /* masked byte */
33555  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup1;                /**/
33556  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup2;                /**/
33557  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup3;                /**/
33558  00  =3      BYTE      scheduleIdBlock;              /**/
33559  00  =3  } ZW_SCHEDULE_STATE_REPORT_3BYTE_V2_FRAME;
33560  00  =3  
33561  00  =3  /************************************************************/
33562  00  =3  /* Schedule State Report 4byte V2 command class structs */  
33563  00  =3  /************************************************************/
33564  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_4BYTE_V2_FRAME_
33565  00  =3  {
33566  00  =3      BYTE      cmdClass;                     /* The command class */
33567  00  =3      BYTE      cmd;                          /* The command */
33568  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33569  00  =3      BYTE      properties1;                  /* masked byte */
33570  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup1;                /**/
33571  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup2;                /**/
33572  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup3;                /**/
33573  00  =3      VG_SCHEDULE_STATE_REPORT_V2_VG variantgroup4;                /**/
33574  00  =3      BYTE      scheduleIdBlock;              /**/
33575  00  =3  } ZW_SCHEDULE_STATE_REPORT_4BYTE_V2_FRAME;
33576  00  =3  
33577  00  =3  /************************************************************/
33578  00  =3  /* Schedule Supported Get V3 command class structs */       
33579  00  =3  /************************************************************/
33580  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_GET_V3_FRAME_
33581  00  =3  {
33582  00  =3      BYTE      cmdClass;                     /* The command class */
33583  00  =3      BYTE      cmd;                          /* The command */
33584  00  =3      BYTE      scheduleIdBlock;              /**/
33585  00  =3  } ZW_SCHEDULE_SUPPORTED_GET_V3_FRAME;
33586  00  =3  
33587  00  =3  /************************************************************/
33588  00  =3  /* Schedule Supported Report V3 variant group structs */    
33589  00  =3  /************************************************************/
33590  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_REPORT_V3_VG_
33591  00  =3  {
33592  00  =3      BYTE      supportedCc;                  /**/
33593  00  =3      BYTE      properties2;                  /* masked byte */
33594  00  =3  } VG_SCHEDULE_SUPPORTED_REPORT_V3_VG;
33595  00  =3  
33596  00  =3  /************************************************************/
33597  00  =3  /* Schedule Supported Report 1byte V3 command class structs */
33598  00  =3  /************************************************************/
33599  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V3_FRAME_
33600  00  =3  {
33601  00  =3      BYTE      cmdClass;                     /* The command class */
33602  00  =3      BYTE      cmd;                          /* The command */
33603  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33604  00  =3      BYTE      properties1;                  /* masked byte */
33605  00  =3      BYTE      numberOfSupportedCc;          /**/
33606  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup1;                /**/
33607  00  =3      BYTE      properties3;                  /* masked byte */
33608  00  =3      BYTE      scheduleIdBlock;              /**/
33609  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33610  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V3_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 559 

33611  00  =3  
33612  00  =3  /************************************************************/
33613  00  =3  /* Schedule Supported Report 2byte V3 command class structs */
33614  00  =3  /************************************************************/
33615  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V3_FRAME_
33616  00  =3  {
33617  00  =3      BYTE      cmdClass;                     /* The command class */
33618  00  =3      BYTE      cmd;                          /* The command */
33619  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33620  00  =3      BYTE      properties1;                  /* masked byte */
33621  00  =3      BYTE      numberOfSupportedCc;          /**/
33622  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup1;                /**/
33623  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup2;                /**/
33624  00  =3      BYTE      properties3;                  /* masked byte */
33625  00  =3      BYTE      scheduleIdBlock;              /**/
33626  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33627  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V3_FRAME;
33628  00  =3  
33629  00  =3  /************************************************************/
33630  00  =3  /* Schedule Supported Report 3byte V3 command class structs */
33631  00  =3  /************************************************************/
33632  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V3_FRAME_
33633  00  =3  {
33634  00  =3      BYTE      cmdClass;                     /* The command class */
33635  00  =3      BYTE      cmd;                          /* The command */
33636  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33637  00  =3      BYTE      properties1;                  /* masked byte */
33638  00  =3      BYTE      numberOfSupportedCc;          /**/
33639  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup1;                /**/
33640  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup2;                /**/
33641  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup3;                /**/
33642  00  =3      BYTE      properties3;                  /* masked byte */
33643  00  =3      BYTE      scheduleIdBlock;              /**/
33644  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33645  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V3_FRAME;
33646  00  =3  
33647  00  =3  /************************************************************/
33648  00  =3  /* Schedule Supported Report 4byte V3 command class structs */
33649  00  =3  /************************************************************/
33650  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V3_FRAME_
33651  00  =3  {
33652  00  =3      BYTE      cmdClass;                     /* The command class */
33653  00  =3      BYTE      cmd;                          /* The command */
33654  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33655  00  =3      BYTE      properties1;                  /* masked byte */
33656  00  =3      BYTE      numberOfSupportedCc;          /**/
33657  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup1;                /**/
33658  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup2;                /**/
33659  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup3;                /**/
33660  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V3_VG variantgroup4;                /**/
33661  00  =3      BYTE      properties3;                  /* masked byte */
33662  00  =3      BYTE      scheduleIdBlock;              /**/
33663  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
33664  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V3_FRAME;
33665  00  =3  
33666  00  =3  /************************************************************/
33667  00  =3  /* Command Schedule Set V3 variant group structs */         
33668  00  =3  /************************************************************/
33669  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_1BYTE_V3_VG_
33670  00  =3  {
33671  00  =3      BYTE      cmdLength;                    /**/
33672  00  =3      BYTE      cmdByte1;                     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 560 

33673  00  =3  } VG_COMMAND_SCHEDULE_SET_1BYTE_V3_VG;
33674  00  =3  
33675  00  =3  /************************************************************/
33676  00  =3  /* Command Schedule Set V3 variant group structs */         
33677  00  =3  /************************************************************/
33678  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_2BYTE_V3_VG_
33679  00  =3  {
33680  00  =3      BYTE      cmdLength;                    /**/
33681  00  =3      BYTE      cmdByte1;                     /* MSB */
33682  00  =3      BYTE      cmdByte2;                     /* LSB */
33683  00  =3  } VG_COMMAND_SCHEDULE_SET_2BYTE_V3_VG;
33684  00  =3  
33685  00  =3  /************************************************************/
33686  00  =3  /* Command Schedule Set V3 variant group structs */         
33687  00  =3  /************************************************************/
33688  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_3BYTE_V3_VG_
33689  00  =3  {
33690  00  =3      BYTE      cmdLength;                    /**/
33691  00  =3      BYTE      cmdByte1;                     /* MSB */
33692  00  =3      BYTE      cmdByte2;                     
33693  00  =3      BYTE      cmdByte3;                     /* LSB */
33694  00  =3  } VG_COMMAND_SCHEDULE_SET_3BYTE_V3_VG;
33695  00  =3  
33696  00  =3  /************************************************************/
33697  00  =3  /* Command Schedule Set V3 variant group structs */         
33698  00  =3  /************************************************************/
33699  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG_
33700  00  =3  {
33701  00  =3      BYTE      cmdLength;                    /**/
33702  00  =3      BYTE      cmdByte1;                     /* MSB */
33703  00  =3      BYTE      cmdByte2;                     
33704  00  =3      BYTE      cmdByte3;                     
33705  00  =3      BYTE      cmdByte4;                     /* LSB */
33706  00  =3  } VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG;
33707  00  =3  
33708  00  =3  /************************************************************/
33709  00  =3  /* Command Schedule Set 1byte V3 command class structs */   
33710  00  =3  /************************************************************/
33711  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_1BYTE_V3_FRAME_
33712  00  =3  {
33713  00  =3      BYTE      cmdClass;                     /* The command class */
33714  00  =3      BYTE      cmd;                          /* The command */
33715  00  =3      BYTE      scheduleId;                   /**/
33716  00  =3      BYTE      scheduleIdBlock;              /**/
33717  00  =3      BYTE      startYear;                    /**/
33718  00  =3      BYTE      properties1;                  /* masked byte */
33719  00  =3      BYTE      properties2;                  /* masked byte */
33720  00  =3      BYTE      properties3;                  /* masked byte */
33721  00  =3      BYTE      properties4;                  /* masked byte */
33722  00  =3      BYTE      properties5;                  /* masked byte */
33723  00  =3      BYTE      durationByte1;                /* MSB */
33724  00  =3      BYTE      durationByte2;                /* LSB */
33725  00  =3      BYTE      reportsToFollow;              /**/
33726  00  =3      BYTE      numberOfCmdToFollow;          /**/
33727  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup1;                /**/
33728  00  =3  } ZW_COMMAND_SCHEDULE_SET_1BYTE_V3_FRAME;
33729  00  =3  
33730  00  =3  /************************************************************/
33731  00  =3  /* Command Schedule Set 2byte V3 command class structs */   
33732  00  =3  /************************************************************/
33733  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_2BYTE_V3_FRAME_
33734  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 561 

33735  00  =3      BYTE      cmdClass;                     /* The command class */
33736  00  =3      BYTE      cmd;                          /* The command */
33737  00  =3      BYTE      scheduleId;                   /**/
33738  00  =3      BYTE      scheduleIdBlock;              /**/
33739  00  =3      BYTE      startYear;                    /**/
33740  00  =3      BYTE      properties1;                  /* masked byte */
33741  00  =3      BYTE      properties2;                  /* masked byte */
33742  00  =3      BYTE      properties3;                  /* masked byte */
33743  00  =3      BYTE      properties4;                  /* masked byte */
33744  00  =3      BYTE      properties5;                  /* masked byte */
33745  00  =3      BYTE      durationByte1;                /* MSB */
33746  00  =3      BYTE      durationByte2;                /* LSB */
33747  00  =3      BYTE      reportsToFollow;              /**/
33748  00  =3      BYTE      numberOfCmdToFollow;          /**/
33749  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup1;                /**/
33750  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup2;                /**/
33751  00  =3  } ZW_COMMAND_SCHEDULE_SET_2BYTE_V3_FRAME;
33752  00  =3  
33753  00  =3  /************************************************************/
33754  00  =3  /* Command Schedule Set 3byte V3 command class structs */   
33755  00  =3  /************************************************************/
33756  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_3BYTE_V3_FRAME_
33757  00  =3  {
33758  00  =3      BYTE      cmdClass;                     /* The command class */
33759  00  =3      BYTE      cmd;                          /* The command */
33760  00  =3      BYTE      scheduleId;                   /**/
33761  00  =3      BYTE      scheduleIdBlock;              /**/
33762  00  =3      BYTE      startYear;                    /**/
33763  00  =3      BYTE      properties1;                  /* masked byte */
33764  00  =3      BYTE      properties2;                  /* masked byte */
33765  00  =3      BYTE      properties3;                  /* masked byte */
33766  00  =3      BYTE      properties4;                  /* masked byte */
33767  00  =3      BYTE      properties5;                  /* masked byte */
33768  00  =3      BYTE      durationByte1;                /* MSB */
33769  00  =3      BYTE      durationByte2;                /* LSB */
33770  00  =3      BYTE      reportsToFollow;              /**/
33771  00  =3      BYTE      numberOfCmdToFollow;          /**/
33772  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup1;                /**/
33773  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup2;                /**/
33774  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup3;                /**/
33775  00  =3  } ZW_COMMAND_SCHEDULE_SET_3BYTE_V3_FRAME;
33776  00  =3  
33777  00  =3  /************************************************************/
33778  00  =3  /* Command Schedule Set 4byte V3 command class structs */   
33779  00  =3  /************************************************************/
33780  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_4BYTE_V3_FRAME_
33781  00  =3  {
33782  00  =3      BYTE      cmdClass;                     /* The command class */
33783  00  =3      BYTE      cmd;                          /* The command */
33784  00  =3      BYTE      scheduleId;                   /**/
33785  00  =3      BYTE      scheduleIdBlock;              /**/
33786  00  =3      BYTE      startYear;                    /**/
33787  00  =3      BYTE      properties1;                  /* masked byte */
33788  00  =3      BYTE      properties2;                  /* masked byte */
33789  00  =3      BYTE      properties3;                  /* masked byte */
33790  00  =3      BYTE      properties4;                  /* masked byte */
33791  00  =3      BYTE      properties5;                  /* masked byte */
33792  00  =3      BYTE      durationByte1;                /* MSB */
33793  00  =3      BYTE      durationByte2;                /* LSB */
33794  00  =3      BYTE      reportsToFollow;              /**/
33795  00  =3      BYTE      numberOfCmdToFollow;          /**/
33796  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 562 

33797  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup2;                /**/
33798  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup3;                /**/
33799  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V3_VG variantgroup4;                /**/
33800  00  =3  } ZW_COMMAND_SCHEDULE_SET_4BYTE_V3_FRAME;
33801  00  =3  
33802  00  =3  /************************************************************/
33803  00  =3  /* Command Schedule Get V3 command class structs */         
33804  00  =3  /************************************************************/
33805  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_GET_V3_FRAME_
33806  00  =3  {
33807  00  =3      BYTE      cmdClass;                     /* The command class */
33808  00  =3      BYTE      cmd;                          /* The command */
33809  00  =3      BYTE      scheduleId;                   /**/
33810  00  =3      BYTE      scheduleIdBlock;              /**/
33811  00  =3      BYTE      properties1;                  /* masked byte */
33812  00  =3  } ZW_COMMAND_SCHEDULE_GET_V3_FRAME;
33813  00  =3  
33814  00  =3  /************************************************************/
33815  00  =3  /* Command Schedule Report V3 variant group structs */      
33816  00  =3  /************************************************************/
33817  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_1BYTE_V3_VG_
33818  00  =3  {
33819  00  =3      BYTE      cmdLength;                    /**/
33820  00  =3      BYTE      cmdByte1;                     
33821  00  =3  } VG_COMMAND_SCHEDULE_REPORT_1BYTE_V3_VG;
33822  00  =3  
33823  00  =3  /************************************************************/
33824  00  =3  /* Command Schedule Report V3 variant group structs */      
33825  00  =3  /************************************************************/
33826  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_2BYTE_V3_VG_
33827  00  =3  {
33828  00  =3      BYTE      cmdLength;                    /**/
33829  00  =3      BYTE      cmdByte1;                     /* MSB */
33830  00  =3      BYTE      cmdByte2;                     /* LSB */
33831  00  =3  } VG_COMMAND_SCHEDULE_REPORT_2BYTE_V3_VG;
33832  00  =3  
33833  00  =3  /************************************************************/
33834  00  =3  /* Command Schedule Report V3 variant group structs */      
33835  00  =3  /************************************************************/
33836  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_3BYTE_V3_VG_
33837  00  =3  {
33838  00  =3      BYTE      cmdLength;                    /**/
33839  00  =3      BYTE      cmdByte1;                     /* MSB */
33840  00  =3      BYTE      cmdByte2;                     
33841  00  =3      BYTE      cmdByte3;                     /* LSB */
33842  00  =3  } VG_COMMAND_SCHEDULE_REPORT_3BYTE_V3_VG;
33843  00  =3  
33844  00  =3  /************************************************************/
33845  00  =3  /* Command Schedule Report V3 variant group structs */      
33846  00  =3  /************************************************************/
33847  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG_
33848  00  =3  {
33849  00  =3      BYTE      cmdLength;                    /**/
33850  00  =3      BYTE      cmdByte1;                     /* MSB */
33851  00  =3      BYTE      cmdByte2;                     
33852  00  =3      BYTE      cmdByte3;                     
33853  00  =3      BYTE      cmdByte4;                     /* LSB */
33854  00  =3  } VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG;
33855  00  =3  
33856  00  =3  /************************************************************/
33857  00  =3  /* Command Schedule Report 1byte V3 command class structs */
33858  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 563 

33859  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V3_FRAME_
33860  00  =3  {
33861  00  =3      BYTE      cmdClass;                     /* The command class */
33862  00  =3      BYTE      cmd;                          /* The command */
33863  00  =3      BYTE      scheduleId;                   /**/
33864  00  =3      BYTE      scheduleIdBlock;              /**/
33865  00  =3      BYTE      startYear;                    /**/
33866  00  =3      BYTE      properties1;                  /* masked byte */
33867  00  =3      BYTE      properties2;                  /* masked byte */
33868  00  =3      BYTE      properties3;                  /* masked byte */
33869  00  =3      BYTE      properties4;                  /* masked byte */
33870  00  =3      BYTE      properties5;                  /* masked byte */
33871  00  =3      BYTE      durationByte1;                /* MSB */
33872  00  =3      BYTE      durationByte2;                /* LSB */
33873  00  =3      BYTE      reportsToFollow;              /**/
33874  00  =3      BYTE      numberOfCmdToFollow;          /**/
33875  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup1;                /**/
33876  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V3_FRAME;
33877  00  =3  
33878  00  =3  /************************************************************/
33879  00  =3  /* Command Schedule Report 2byte V3 command class structs */
33880  00  =3  /************************************************************/
33881  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V3_FRAME_
33882  00  =3  {
33883  00  =3      BYTE      cmdClass;                     /* The command class */
33884  00  =3      BYTE      cmd;                          /* The command */
33885  00  =3      BYTE      scheduleId;                   /**/
33886  00  =3      BYTE      scheduleIdBlock;              /**/
33887  00  =3      BYTE      startYear;                    /**/
33888  00  =3      BYTE      properties1;                  /* masked byte */
33889  00  =3      BYTE      properties2;                  /* masked byte */
33890  00  =3      BYTE      properties3;                  /* masked byte */
33891  00  =3      BYTE      properties4;                  /* masked byte */
33892  00  =3      BYTE      properties5;                  /* masked byte */
33893  00  =3      BYTE      durationByte1;                /* MSB */
33894  00  =3      BYTE      durationByte2;                /* LSB */
33895  00  =3      BYTE      reportsToFollow;              /**/
33896  00  =3      BYTE      numberOfCmdToFollow;          /**/
33897  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup1;                /**/
33898  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup2;                /**/
33899  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V3_FRAME;
33900  00  =3  
33901  00  =3  /************************************************************/
33902  00  =3  /* Command Schedule Report 3byte V3 command class structs */
33903  00  =3  /************************************************************/
33904  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V3_FRAME_
33905  00  =3  {
33906  00  =3      BYTE      cmdClass;                     /* The command class */
33907  00  =3      BYTE      cmd;                          /* The command */
33908  00  =3      BYTE      scheduleId;                   /**/
33909  00  =3      BYTE      scheduleIdBlock;              /**/
33910  00  =3      BYTE      startYear;                    /**/
33911  00  =3      BYTE      properties1;                  /* masked byte */
33912  00  =3      BYTE      properties2;                  /* masked byte */
33913  00  =3      BYTE      properties3;                  /* masked byte */
33914  00  =3      BYTE      properties4;                  /* masked byte */
33915  00  =3      BYTE      properties5;                  /* masked byte */
33916  00  =3      BYTE      durationByte1;                /* MSB */
33917  00  =3      BYTE      durationByte2;                /* LSB */
33918  00  =3      BYTE      reportsToFollow;              /**/
33919  00  =3      BYTE      numberOfCmdToFollow;          /**/
33920  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 564 

33921  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup2;                /**/
33922  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup3;                /**/
33923  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V3_FRAME;
33924  00  =3  
33925  00  =3  /************************************************************/
33926  00  =3  /* Command Schedule Report 4byte V3 command class structs */
33927  00  =3  /************************************************************/
33928  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V3_FRAME_
33929  00  =3  {
33930  00  =3      BYTE      cmdClass;                     /* The command class */
33931  00  =3      BYTE      cmd;                          /* The command */
33932  00  =3      BYTE      scheduleId;                   /**/
33933  00  =3      BYTE      scheduleIdBlock;              /**/
33934  00  =3      BYTE      startYear;                    /**/
33935  00  =3      BYTE      properties1;                  /* masked byte */
33936  00  =3      BYTE      properties2;                  /* masked byte */
33937  00  =3      BYTE      properties3;                  /* masked byte */
33938  00  =3      BYTE      properties4;                  /* masked byte */
33939  00  =3      BYTE      properties5;                  /* masked byte */
33940  00  =3      BYTE      durationByte1;                /* MSB */
33941  00  =3      BYTE      durationByte2;                /* LSB */
33942  00  =3      BYTE      reportsToFollow;              /**/
33943  00  =3      BYTE      numberOfCmdToFollow;          /**/
33944  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup1;                /**/
33945  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup2;                /**/
33946  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup3;                /**/
33947  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V3_VG variantgroup4;                /**/
33948  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V3_FRAME;
33949  00  =3  
33950  00  =3  /************************************************************/
33951  00  =3  /* Schedule Remove V3 command class structs */              
33952  00  =3  /************************************************************/
33953  00  =3  typedef struct _ZW_SCHEDULE_REMOVE_V3_FRAME_
33954  00  =3  {
33955  00  =3      BYTE      cmdClass;                     /* The command class */
33956  00  =3      BYTE      cmd;                          /* The command */
33957  00  =3      BYTE      scheduleId;                   /**/
33958  00  =3      BYTE      scheduleIdBlock;              /**/
33959  00  =3  } ZW_SCHEDULE_REMOVE_V3_FRAME;
33960  00  =3  
33961  00  =3  /************************************************************/
33962  00  =3  /* Schedule State Set V3 command class structs */           
33963  00  =3  /************************************************************/
33964  00  =3  typedef struct _ZW_SCHEDULE_STATE_SET_V3_FRAME_
33965  00  =3  {
33966  00  =3      BYTE      cmdClass;                     /* The command class */
33967  00  =3      BYTE      cmd;                          /* The command */
33968  00  =3      BYTE      scheduleId;                   /**/
33969  00  =3      BYTE      scheduleState;                /**/
33970  00  =3      BYTE      scheduleIdBlock;              /**/
33971  00  =3  } ZW_SCHEDULE_STATE_SET_V3_FRAME;
33972  00  =3  
33973  00  =3  /************************************************************/
33974  00  =3  /* Schedule State Get V3 command class structs */           
33975  00  =3  /************************************************************/
33976  00  =3  typedef struct _ZW_SCHEDULE_STATE_GET_V3_FRAME_
33977  00  =3  {
33978  00  =3      BYTE      cmdClass;                     /* The command class */
33979  00  =3      BYTE      cmd;                          /* The command */
33980  00  =3      BYTE      scheduleIdBlock;              /**/
33981  00  =3  } ZW_SCHEDULE_STATE_GET_V3_FRAME;
33982  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 565 

33983  00  =3  /************************************************************/
33984  00  =3  /* Schedule State Report V3 variant group structs */        
33985  00  =3  /************************************************************/
33986  00  =3  typedef struct _VG_SCHEDULE_STATE_REPORT_V3_VG_
33987  00  =3  {
33988  00  =3      BYTE      properties2;                  /* masked byte */
33989  00  =3  } VG_SCHEDULE_STATE_REPORT_V3_VG;
33990  00  =3  
33991  00  =3  /************************************************************/
33992  00  =3  /* Schedule State Report 1byte V3 command class structs */  
33993  00  =3  /************************************************************/
33994  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_1BYTE_V3_FRAME_
33995  00  =3  {
33996  00  =3      BYTE      cmdClass;                     /* The command class */
33997  00  =3      BYTE      cmd;                          /* The command */
33998  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
33999  00  =3      BYTE      properties1;                  /* masked byte */
34000  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup1;                /**/
34001  00  =3      BYTE      scheduleIdBlock;              /**/
34002  00  =3  } ZW_SCHEDULE_STATE_REPORT_1BYTE_V3_FRAME;
34003  00  =3  
34004  00  =3  /************************************************************/
34005  00  =3  /* Schedule State Report 2byte V3 command class structs */  
34006  00  =3  /************************************************************/
34007  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_2BYTE_V3_FRAME_
34008  00  =3  {
34009  00  =3      BYTE      cmdClass;                     /* The command class */
34010  00  =3      BYTE      cmd;                          /* The command */
34011  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34012  00  =3      BYTE      properties1;                  /* masked byte */
34013  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup1;                /**/
34014  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup2;                /**/
34015  00  =3      BYTE      scheduleIdBlock;              /**/
34016  00  =3  } ZW_SCHEDULE_STATE_REPORT_2BYTE_V3_FRAME;
34017  00  =3  
34018  00  =3  /************************************************************/
34019  00  =3  /* Schedule State Report 3byte V3 command class structs */  
34020  00  =3  /************************************************************/
34021  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_3BYTE_V3_FRAME_
34022  00  =3  {
34023  00  =3      BYTE      cmdClass;                     /* The command class */
34024  00  =3      BYTE      cmd;                          /* The command */
34025  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34026  00  =3      BYTE      properties1;                  /* masked byte */
34027  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup1;                /**/
34028  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup2;                /**/
34029  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup3;                /**/
34030  00  =3      BYTE      scheduleIdBlock;              /**/
34031  00  =3  } ZW_SCHEDULE_STATE_REPORT_3BYTE_V3_FRAME;
34032  00  =3  
34033  00  =3  /************************************************************/
34034  00  =3  /* Schedule State Report 4byte V3 command class structs */  
34035  00  =3  /************************************************************/
34036  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_4BYTE_V3_FRAME_
34037  00  =3  {
34038  00  =3      BYTE      cmdClass;                     /* The command class */
34039  00  =3      BYTE      cmd;                          /* The command */
34040  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34041  00  =3      BYTE      properties1;                  /* masked byte */
34042  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup1;                /**/
34043  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup2;                /**/
34044  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup3;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 566 

34045  00  =3      VG_SCHEDULE_STATE_REPORT_V3_VG variantgroup4;                /**/
34046  00  =3      BYTE      scheduleIdBlock;              /**/
34047  00  =3  } ZW_SCHEDULE_STATE_REPORT_4BYTE_V3_FRAME;
34048  00  =3  
34049  00  =3  /************************************************************/
34050  00  =3  /* Schedule Supported Get V4 command class structs */       
34051  00  =3  /************************************************************/
34052  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_GET_V4_FRAME_
34053  00  =3  {
34054  00  =3      BYTE      cmdClass;                     /* The command class */
34055  00  =3      BYTE      cmd;                          /* The command */
34056  00  =3      BYTE      scheduleIdBlock;              /**/
34057  00  =3  } ZW_SCHEDULE_SUPPORTED_GET_V4_FRAME;
34058  00  =3  
34059  00  =3  /************************************************************/
34060  00  =3  /* Schedule Supported Report V4 variant group structs */    
34061  00  =3  /************************************************************/
34062  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_REPORT_V4_VG_
34063  00  =3  {
34064  00  =3      BYTE      supportedCc;                  /**/
34065  00  =3      BYTE      properties2;                  /* masked byte */
34066  00  =3  } VG_SCHEDULE_SUPPORTED_REPORT_V4_VG;
34067  00  =3  
34068  00  =3  /************************************************************/
34069  00  =3  /* Schedule Supported Report 1byte V4 command class structs */
34070  00  =3  /************************************************************/
34071  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V4_FRAME_
34072  00  =3  {
34073  00  =3      BYTE      cmdClass;                     /* The command class */
34074  00  =3      BYTE      cmd;                          /* The command */
34075  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34076  00  =3      BYTE      properties1;                  /* masked byte */
34077  00  =3      BYTE      numberOfSupportedCc;          /**/
34078  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup1;                /**/
34079  00  =3      BYTE      properties3;                  /* masked byte */
34080  00  =3      BYTE      scheduleIdBlock;              /**/
34081  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
34082  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_1BYTE_V4_FRAME;
34083  00  =3  
34084  00  =3  /************************************************************/
34085  00  =3  /* Schedule Supported Report 2byte V4 command class structs */
34086  00  =3  /************************************************************/
34087  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V4_FRAME_
34088  00  =3  {
34089  00  =3      BYTE      cmdClass;                     /* The command class */
34090  00  =3      BYTE      cmd;                          /* The command */
34091  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34092  00  =3      BYTE      properties1;                  /* masked byte */
34093  00  =3      BYTE      numberOfSupportedCc;          /**/
34094  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup1;                /**/
34095  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup2;                /**/
34096  00  =3      BYTE      properties3;                  /* masked byte */
34097  00  =3      BYTE      scheduleIdBlock;              /**/
34098  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
34099  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_2BYTE_V4_FRAME;
34100  00  =3  
34101  00  =3  /************************************************************/
34102  00  =3  /* Schedule Supported Report 3byte V4 command class structs */
34103  00  =3  /************************************************************/
34104  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V4_FRAME_
34105  00  =3  {
34106  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 567 

34107  00  =3      BYTE      cmd;                          /* The command */
34108  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34109  00  =3      BYTE      properties1;                  /* masked byte */
34110  00  =3      BYTE      numberOfSupportedCc;          /**/
34111  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup1;                /**/
34112  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup2;                /**/
34113  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup3;                /**/
34114  00  =3      BYTE      properties3;                  /* masked byte */
34115  00  =3      BYTE      scheduleIdBlock;              /**/
34116  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
34117  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_3BYTE_V4_FRAME;
34118  00  =3  
34119  00  =3  /************************************************************/
34120  00  =3  /* Schedule Supported Report 4byte V4 command class structs */
34121  00  =3  /************************************************************/
34122  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V4_FRAME_
34123  00  =3  {
34124  00  =3      BYTE      cmdClass;                     /* The command class */
34125  00  =3      BYTE      cmd;                          /* The command */
34126  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34127  00  =3      BYTE      properties1;                  /* masked byte */
34128  00  =3      BYTE      numberOfSupportedCc;          /**/
34129  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup1;                /**/
34130  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup2;                /**/
34131  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup3;                /**/
34132  00  =3      VG_SCHEDULE_SUPPORTED_REPORT_V4_VG variantgroup4;                /**/
34133  00  =3      BYTE      properties3;                  /* masked byte */
34134  00  =3      BYTE      scheduleIdBlock;              /**/
34135  00  =3      BYTE      numberOfSupportedScheduleBlocks;/**/
34136  00  =3  } ZW_SCHEDULE_SUPPORTED_REPORT_4BYTE_V4_FRAME;
34137  00  =3  
34138  00  =3  /************************************************************/
34139  00  =3  /* Command Schedule Set V4 variant group structs */         
34140  00  =3  /************************************************************/
34141  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_1BYTE_V4_VG_
34142  00  =3  {
34143  00  =3      BYTE      cmdLength;                    /**/
34144  00  =3      BYTE      cmdByte1;                     
34145  00  =3  } VG_COMMAND_SCHEDULE_SET_1BYTE_V4_VG;
34146  00  =3  
34147  00  =3  /************************************************************/
34148  00  =3  /* Command Schedule Set V4 variant group structs */         
34149  00  =3  /************************************************************/
34150  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_2BYTE_V4_VG_
34151  00  =3  {
34152  00  =3      BYTE      cmdLength;                    /**/
34153  00  =3      BYTE      cmdByte1;                     /* MSB */
34154  00  =3      BYTE      cmdByte2;                     /* LSB */
34155  00  =3  } VG_COMMAND_SCHEDULE_SET_2BYTE_V4_VG;
34156  00  =3  
34157  00  =3  /************************************************************/
34158  00  =3  /* Command Schedule Set V4 variant group structs */         
34159  00  =3  /************************************************************/
34160  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_3BYTE_V4_VG_
34161  00  =3  {
34162  00  =3      BYTE      cmdLength;                    /**/
34163  00  =3      BYTE      cmdByte1;                     /* MSB */
34164  00  =3      BYTE      cmdByte2;                     
34165  00  =3      BYTE      cmdByte3;                     /* LSB */
34166  00  =3  } VG_COMMAND_SCHEDULE_SET_3BYTE_V4_VG;
34167  00  =3  
34168  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 568 

34169  00  =3  /* Command Schedule Set V4 variant group structs */         
34170  00  =3  /************************************************************/
34171  00  =3  typedef struct _VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG_
34172  00  =3  {
34173  00  =3      BYTE      cmdLength;                    /**/
34174  00  =3      BYTE      cmdByte1;                     /* MSB */
34175  00  =3      BYTE      cmdByte2;                     
34176  00  =3      BYTE      cmdByte3;                     
34177  00  =3      BYTE      cmdByte4;                     /* LSB */
34178  00  =3  } VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG;
34179  00  =3  
34180  00  =3  /************************************************************/
34181  00  =3  /* Command Schedule Set 1byte V4 command class structs */   
34182  00  =3  /************************************************************/
34183  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_1BYTE_V4_FRAME_
34184  00  =3  {
34185  00  =3      BYTE      cmdClass;                     /* The command class */
34186  00  =3      BYTE      cmd;                          /* The command */
34187  00  =3      BYTE      scheduleId;                   /**/
34188  00  =3      BYTE      scheduleIdBlock;              /**/
34189  00  =3      BYTE      startYear;                    /**/
34190  00  =3      BYTE      properties1;                  /* masked byte */
34191  00  =3      BYTE      properties2;                  /* masked byte */
34192  00  =3      BYTE      properties3;                  /* masked byte */
34193  00  =3      BYTE      properties4;                  /* masked byte */
34194  00  =3      BYTE      properties5;                  /* masked byte */
34195  00  =3      BYTE      durationByte1;                /* MSB */
34196  00  =3      BYTE      durationByte2;                /* LSB */
34197  00  =3      BYTE      reportsToFollow;              /**/
34198  00  =3      BYTE      numberOfCmdToFollow;          /**/
34199  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup1;                /**/
34200  00  =3  } ZW_COMMAND_SCHEDULE_SET_1BYTE_V4_FRAME;
34201  00  =3  
34202  00  =3  /************************************************************/
34203  00  =3  /* Command Schedule Set 2byte V4 command class structs */   
34204  00  =3  /************************************************************/
34205  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_2BYTE_V4_FRAME_
34206  00  =3  {
34207  00  =3      BYTE      cmdClass;                     /* The command class */
34208  00  =3      BYTE      cmd;                          /* The command */
34209  00  =3      BYTE      scheduleId;                   /**/
34210  00  =3      BYTE      scheduleIdBlock;              /**/
34211  00  =3      BYTE      startYear;                    /**/
34212  00  =3      BYTE      properties1;                  /* masked byte */
34213  00  =3      BYTE      properties2;                  /* masked byte */
34214  00  =3      BYTE      properties3;                  /* masked byte */
34215  00  =3      BYTE      properties4;                  /* masked byte */
34216  00  =3      BYTE      properties5;                  /* masked byte */
34217  00  =3      BYTE      durationByte1;                /* MSB */
34218  00  =3      BYTE      durationByte2;                /* LSB */
34219  00  =3      BYTE      reportsToFollow;              /**/
34220  00  =3      BYTE      numberOfCmdToFollow;          /**/
34221  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup1;                /**/
34222  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup2;                /**/
34223  00  =3  } ZW_COMMAND_SCHEDULE_SET_2BYTE_V4_FRAME;
34224  00  =3  
34225  00  =3  /************************************************************/
34226  00  =3  /* Command Schedule Set 3byte V4 command class structs */   
34227  00  =3  /************************************************************/
34228  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_3BYTE_V4_FRAME_
34229  00  =3  {
34230  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 569 

34231  00  =3      BYTE      cmd;                          /* The command */
34232  00  =3      BYTE      scheduleId;                   /**/
34233  00  =3      BYTE      scheduleIdBlock;              /**/
34234  00  =3      BYTE      startYear;                    /**/
34235  00  =3      BYTE      properties1;                  /* masked byte */
34236  00  =3      BYTE      properties2;                  /* masked byte */
34237  00  =3      BYTE      properties3;                  /* masked byte */
34238  00  =3      BYTE      properties4;                  /* masked byte */
34239  00  =3      BYTE      properties5;                  /* masked byte */
34240  00  =3      BYTE      durationByte1;                /* MSB */
34241  00  =3      BYTE      durationByte2;                /* LSB */
34242  00  =3      BYTE      reportsToFollow;              /**/
34243  00  =3      BYTE      numberOfCmdToFollow;          /**/
34244  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup1;                /**/
34245  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup2;                /**/
34246  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup3;                /**/
34247  00  =3  } ZW_COMMAND_SCHEDULE_SET_3BYTE_V4_FRAME;
34248  00  =3  
34249  00  =3  /************************************************************/
34250  00  =3  /* Command Schedule Set 4byte V4 command class structs */   
34251  00  =3  /************************************************************/
34252  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_SET_4BYTE_V4_FRAME_
34253  00  =3  {
34254  00  =3      BYTE      cmdClass;                     /* The command class */
34255  00  =3      BYTE      cmd;                          /* The command */
34256  00  =3      BYTE      scheduleId;                   /**/
34257  00  =3      BYTE      scheduleIdBlock;              /**/
34258  00  =3      BYTE      startYear;                    /**/
34259  00  =3      BYTE      properties1;                  /* masked byte */
34260  00  =3      BYTE      properties2;                  /* masked byte */
34261  00  =3      BYTE      properties3;                  /* masked byte */
34262  00  =3      BYTE      properties4;                  /* masked byte */
34263  00  =3      BYTE      properties5;                  /* masked byte */
34264  00  =3      BYTE      durationByte1;                /* MSB */
34265  00  =3      BYTE      durationByte2;                /* LSB */
34266  00  =3      BYTE      reportsToFollow;              /**/
34267  00  =3      BYTE      numberOfCmdToFollow;          /**/
34268  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup1;                /**/
34269  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup2;                /**/
34270  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup3;                /**/
34271  00  =3      VG_COMMAND_SCHEDULE_SET_4BYTE_V4_VG variantgroup4;                /**/
34272  00  =3  } ZW_COMMAND_SCHEDULE_SET_4BYTE_V4_FRAME;
34273  00  =3  
34274  00  =3  /************************************************************/
34275  00  =3  /* Command Schedule Get V4 command class structs */         
34276  00  =3  /************************************************************/
34277  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_GET_V4_FRAME_
34278  00  =3  {
34279  00  =3      BYTE      cmdClass;                     /* The command class */
34280  00  =3      BYTE      cmd;                          /* The command */
34281  00  =3      BYTE      scheduleId;                   /**/
34282  00  =3      BYTE      scheduleIdBlock;              /**/
34283  00  =3      BYTE      properties1;                  /* masked byte */
34284  00  =3  } ZW_COMMAND_SCHEDULE_GET_V4_FRAME;
34285  00  =3  
34286  00  =3  /************************************************************/
34287  00  =3  /* Command Schedule Report V4 variant group structs */      
34288  00  =3  /************************************************************/
34289  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_1BYTE_V4_VG_
34290  00  =3  {
34291  00  =3      BYTE      cmdLength;                    /**/
34292  00  =3      BYTE      cmdByte1;                     
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 570 

34293  00  =3  } VG_COMMAND_SCHEDULE_REPORT_1BYTE_V4_VG;
34294  00  =3  
34295  00  =3  /************************************************************/
34296  00  =3  /* Command Schedule Report V4 variant group structs */      
34297  00  =3  /************************************************************/
34298  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_2BYTE_V4_VG_
34299  00  =3  {
34300  00  =3      BYTE      cmdLength;                    /**/
34301  00  =3      BYTE      cmdByte1;                     /* MSB */
34302  00  =3      BYTE      cmdByte2;                     /* LSB */
34303  00  =3  } VG_COMMAND_SCHEDULE_REPORT_2BYTE_V4_VG;
34304  00  =3  
34305  00  =3  /************************************************************/
34306  00  =3  /* Command Schedule Report V4 variant group structs */      
34307  00  =3  /************************************************************/
34308  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_3BYTE_V4_VG_
34309  00  =3  {
34310  00  =3      BYTE      cmdLength;                    /**/
34311  00  =3      BYTE      cmdByte1;                     /* MSB */
34312  00  =3      BYTE      cmdByte2;                     
34313  00  =3      BYTE      cmdByte3;                     /* LSB */
34314  00  =3  } VG_COMMAND_SCHEDULE_REPORT_3BYTE_V4_VG;
34315  00  =3  
34316  00  =3  /************************************************************/
34317  00  =3  /* Command Schedule Report V4 variant group structs */      
34318  00  =3  /************************************************************/
34319  00  =3  typedef struct _VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG_
34320  00  =3  {
34321  00  =3      BYTE      cmdLength;                    /**/
34322  00  =3      BYTE      cmdByte1;                     /* MSB */
34323  00  =3      BYTE      cmdByte2;                     
34324  00  =3      BYTE      cmdByte3;                     
34325  00  =3      BYTE      cmdByte4;                     /* LSB */
34326  00  =3  } VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG;
34327  00  =3  
34328  00  =3  /************************************************************/
34329  00  =3  /* Command Schedule Report 1byte V4 command class structs */
34330  00  =3  /************************************************************/
34331  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V4_FRAME_
34332  00  =3  {
34333  00  =3      BYTE      cmdClass;                     /* The command class */
34334  00  =3      BYTE      cmd;                          /* The command */
34335  00  =3      BYTE      scheduleId;                   /**/
34336  00  =3      BYTE      scheduleIdBlock;              /**/
34337  00  =3      BYTE      startYear;                    /**/
34338  00  =3      BYTE      properties1;                  /* masked byte */
34339  00  =3      BYTE      properties2;                  /* masked byte */
34340  00  =3      BYTE      properties3;                  /* masked byte */
34341  00  =3      BYTE      properties4;                  /* masked byte */
34342  00  =3      BYTE      properties5;                  /* masked byte */
34343  00  =3      BYTE      durationByte1;                /* MSB */
34344  00  =3      BYTE      durationByte2;                /* LSB */
34345  00  =3      BYTE      reportsToFollow;              /**/
34346  00  =3      BYTE      numberOfCmdToFollow;          /**/
34347  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup1;                /**/
34348  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_1BYTE_V4_FRAME;
34349  00  =3  
34350  00  =3  /************************************************************/
34351  00  =3  /* Command Schedule Report 2byte V4 command class structs */
34352  00  =3  /************************************************************/
34353  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V4_FRAME_
34354  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 571 

34355  00  =3      BYTE      cmdClass;                     /* The command class */
34356  00  =3      BYTE      cmd;                          /* The command */
34357  00  =3      BYTE      scheduleId;                   /**/
34358  00  =3      BYTE      scheduleIdBlock;              /**/
34359  00  =3      BYTE      startYear;                    /**/
34360  00  =3      BYTE      properties1;                  /* masked byte */
34361  00  =3      BYTE      properties2;                  /* masked byte */
34362  00  =3      BYTE      properties3;                  /* masked byte */
34363  00  =3      BYTE      properties4;                  /* masked byte */
34364  00  =3      BYTE      properties5;                  /* masked byte */
34365  00  =3      BYTE      durationByte1;                /* MSB */
34366  00  =3      BYTE      durationByte2;                /* LSB */
34367  00  =3      BYTE      reportsToFollow;              /**/
34368  00  =3      BYTE      numberOfCmdToFollow;          /**/
34369  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup1;                /**/
34370  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup2;                /**/
34371  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_2BYTE_V4_FRAME;
34372  00  =3  
34373  00  =3  /************************************************************/
34374  00  =3  /* Command Schedule Report 3byte V4 command class structs */
34375  00  =3  /************************************************************/
34376  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V4_FRAME_
34377  00  =3  {
34378  00  =3      BYTE      cmdClass;                     /* The command class */
34379  00  =3      BYTE      cmd;                          /* The command */
34380  00  =3      BYTE      scheduleId;                   /**/
34381  00  =3      BYTE      scheduleIdBlock;              /**/
34382  00  =3      BYTE      startYear;                    /**/
34383  00  =3      BYTE      properties1;                  /* masked byte */
34384  00  =3      BYTE      properties2;                  /* masked byte */
34385  00  =3      BYTE      properties3;                  /* masked byte */
34386  00  =3      BYTE      properties4;                  /* masked byte */
34387  00  =3      BYTE      properties5;                  /* masked byte */
34388  00  =3      BYTE      durationByte1;                /* MSB */
34389  00  =3      BYTE      durationByte2;                /* LSB */
34390  00  =3      BYTE      reportsToFollow;              /**/
34391  00  =3      BYTE      numberOfCmdToFollow;          /**/
34392  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup1;                /**/
34393  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup2;                /**/
34394  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup3;                /**/
34395  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_3BYTE_V4_FRAME;
34396  00  =3  
34397  00  =3  /************************************************************/
34398  00  =3  /* Command Schedule Report 4byte V4 command class structs */
34399  00  =3  /************************************************************/
34400  00  =3  typedef struct _ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V4_FRAME_
34401  00  =3  {
34402  00  =3      BYTE      cmdClass;                     /* The command class */
34403  00  =3      BYTE      cmd;                          /* The command */
34404  00  =3      BYTE      scheduleId;                   /**/
34405  00  =3      BYTE      scheduleIdBlock;              /**/
34406  00  =3      BYTE      startYear;                    /**/
34407  00  =3      BYTE      properties1;                  /* masked byte */
34408  00  =3      BYTE      properties2;                  /* masked byte */
34409  00  =3      BYTE      properties3;                  /* masked byte */
34410  00  =3      BYTE      properties4;                  /* masked byte */
34411  00  =3      BYTE      properties5;                  /* masked byte */
34412  00  =3      BYTE      durationByte1;                /* MSB */
34413  00  =3      BYTE      durationByte2;                /* LSB */
34414  00  =3      BYTE      reportsToFollow;              /**/
34415  00  =3      BYTE      numberOfCmdToFollow;          /**/
34416  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 572 

34417  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup2;                /**/
34418  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup3;                /**/
34419  00  =3      VG_COMMAND_SCHEDULE_REPORT_4BYTE_V4_VG variantgroup4;                /**/
34420  00  =3  } ZW_COMMAND_SCHEDULE_REPORT_4BYTE_V4_FRAME;
34421  00  =3  
34422  00  =3  /************************************************************/
34423  00  =3  /* Schedule Remove V4 command class structs */              
34424  00  =3  /************************************************************/
34425  00  =3  typedef struct _ZW_SCHEDULE_REMOVE_V4_FRAME_
34426  00  =3  {
34427  00  =3      BYTE      cmdClass;                     /* The command class */
34428  00  =3      BYTE      cmd;                          /* The command */
34429  00  =3      BYTE      scheduleId;                   /**/
34430  00  =3      BYTE      scheduleIdBlock;              /**/
34431  00  =3  } ZW_SCHEDULE_REMOVE_V4_FRAME;
34432  00  =3  
34433  00  =3  /************************************************************/
34434  00  =3  /* Schedule State Set V4 command class structs */           
34435  00  =3  /************************************************************/
34436  00  =3  typedef struct _ZW_SCHEDULE_STATE_SET_V4_FRAME_
34437  00  =3  {
34438  00  =3      BYTE      cmdClass;                     /* The command class */
34439  00  =3      BYTE      cmd;                          /* The command */
34440  00  =3      BYTE      scheduleId;                   /**/
34441  00  =3      BYTE      scheduleState;                /**/
34442  00  =3      BYTE      scheduleIdBlock;              /**/
34443  00  =3  } ZW_SCHEDULE_STATE_SET_V4_FRAME;
34444  00  =3  
34445  00  =3  /************************************************************/
34446  00  =3  /* Schedule State Get V4 command class structs */           
34447  00  =3  /************************************************************/
34448  00  =3  typedef struct _ZW_SCHEDULE_STATE_GET_V4_FRAME_
34449  00  =3  {
34450  00  =3      BYTE      cmdClass;                     /* The command class */
34451  00  =3      BYTE      cmd;                          /* The command */
34452  00  =3      BYTE      scheduleIdBlock;              /**/
34453  00  =3  } ZW_SCHEDULE_STATE_GET_V4_FRAME;
34454  00  =3  
34455  00  =3  /************************************************************/
34456  00  =3  /* Schedule State Report V4 variant group structs */        
34457  00  =3  /************************************************************/
34458  00  =3  typedef struct _VG_SCHEDULE_STATE_REPORT_V4_VG_
34459  00  =3  {
34460  00  =3      BYTE      properties2;                  /* masked byte */
34461  00  =3  } VG_SCHEDULE_STATE_REPORT_V4_VG;
34462  00  =3  
34463  00  =3  /************************************************************/
34464  00  =3  /* Schedule State Report 1byte V4 command class structs */  
34465  00  =3  /************************************************************/
34466  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_1BYTE_V4_FRAME_
34467  00  =3  {
34468  00  =3      BYTE      cmdClass;                     /* The command class */
34469  00  =3      BYTE      cmd;                          /* The command */
34470  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34471  00  =3      BYTE      properties1;                  /* masked byte */
34472  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup1;                /**/
34473  00  =3      BYTE      scheduleIdBlock;              /**/
34474  00  =3  } ZW_SCHEDULE_STATE_REPORT_1BYTE_V4_FRAME;
34475  00  =3  
34476  00  =3  /************************************************************/
34477  00  =3  /* Schedule State Report 2byte V4 command class structs */  
34478  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 573 

34479  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_2BYTE_V4_FRAME_
34480  00  =3  {
34481  00  =3      BYTE      cmdClass;                     /* The command class */
34482  00  =3      BYTE      cmd;                          /* The command */
34483  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34484  00  =3      BYTE      properties1;                  /* masked byte */
34485  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup1;                /**/
34486  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup2;                /**/
34487  00  =3      BYTE      scheduleIdBlock;              /**/
34488  00  =3  } ZW_SCHEDULE_STATE_REPORT_2BYTE_V4_FRAME;
34489  00  =3  
34490  00  =3  /************************************************************/
34491  00  =3  /* Schedule State Report 3byte V4 command class structs */  
34492  00  =3  /************************************************************/
34493  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_3BYTE_V4_FRAME_
34494  00  =3  {
34495  00  =3      BYTE      cmdClass;                     /* The command class */
34496  00  =3      BYTE      cmd;                          /* The command */
34497  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34498  00  =3      BYTE      properties1;                  /* masked byte */
34499  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup1;                /**/
34500  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup2;                /**/
34501  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup3;                /**/
34502  00  =3      BYTE      scheduleIdBlock;              /**/
34503  00  =3  } ZW_SCHEDULE_STATE_REPORT_3BYTE_V4_FRAME;
34504  00  =3  
34505  00  =3  /************************************************************/
34506  00  =3  /* Schedule State Report 4byte V4 command class structs */  
34507  00  =3  /************************************************************/
34508  00  =3  typedef struct _ZW_SCHEDULE_STATE_REPORT_4BYTE_V4_FRAME_
34509  00  =3  {
34510  00  =3      BYTE      cmdClass;                     /* The command class */
34511  00  =3      BYTE      cmd;                          /* The command */
34512  00  =3      BYTE      numberOfSupportedScheduleId;  /**/
34513  00  =3      BYTE      properties1;                  /* masked byte */
34514  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup1;                /**/
34515  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup2;                /**/
34516  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup3;                /**/
34517  00  =3      VG_SCHEDULE_STATE_REPORT_V4_VG variantgroup4;                /**/
34518  00  =3      BYTE      scheduleIdBlock;              /**/
34519  00  =3  } ZW_SCHEDULE_STATE_REPORT_4BYTE_V4_FRAME;
34520  00  =3  
34521  00  =3  /************************************************************/
34522  00  =3  /* Schedule Supported Commands Get V4 command class structs */
34523  00  =3  /************************************************************/
34524  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_COMMANDS_GET_V4_FRAME_
34525  00  =3  {
34526  00  =3      BYTE      cmdClass;                     /* The command class */
34527  00  =3      BYTE      cmd;                          /* The command */
34528  00  =3      BYTE      scheduleIdBlock;              /**/
34529  00  =3  } ZW_SCHEDULE_SUPPORTED_COMMANDS_GET_V4_FRAME;
34530  00  =3  
34531  00  =3  /************************************************************/
34532  00  =3  /* Schedule Supported Commands Report V4 variant group structs */
34533  00  =3  /************************************************************/
34534  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_1BYTE_V4_VG_
34535  00  =3  {
34536  00  =3      BYTE      commandClass;                 /**/
34537  00  =3      BYTE      supportedCommandListLength;   /**/
34538  00  =3      BYTE      supportedCommand1;            
34539  00  =3  } VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_1BYTE_V4_VG;
34540  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 574 

34541  00  =3  /************************************************************/
34542  00  =3  /* Schedule Supported Commands Report V4 variant group structs */
34543  00  =3  /************************************************************/
34544  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_2BYTE_V4_VG_
34545  00  =3  {
34546  00  =3      BYTE      commandClass;                 /**/
34547  00  =3      BYTE      supportedCommandListLength;   /**/
34548  00  =3      BYTE      supportedCommand1;            /* MSB */
34549  00  =3      BYTE      supportedCommand2;            /* LSB */
34550  00  =3  } VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_2BYTE_V4_VG;
34551  00  =3  
34552  00  =3  /************************************************************/
34553  00  =3  /* Schedule Supported Commands Report V4 variant group structs */
34554  00  =3  /************************************************************/
34555  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_3BYTE_V4_VG_
34556  00  =3  {
34557  00  =3      BYTE      commandClass;                 /**/
34558  00  =3      BYTE      supportedCommandListLength;   /**/
34559  00  =3      BYTE      supportedCommand1;            /* MSB */
34560  00  =3      BYTE      supportedCommand2;            
34561  00  =3      BYTE      supportedCommand3;            /* LSB */
34562  00  =3  } VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_3BYTE_V4_VG;
34563  00  =3  
34564  00  =3  /************************************************************/
34565  00  =3  /* Schedule Supported Commands Report V4 variant group structs */
34566  00  =3  /************************************************************/
34567  00  =3  typedef struct _VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG_
34568  00  =3  {
34569  00  =3      BYTE      commandClass;                 /**/
34570  00  =3      BYTE      supportedCommandListLength;   /**/
34571  00  =3      BYTE      supportedCommand1;            /* MSB */
34572  00  =3      BYTE      supportedCommand2;            
34573  00  =3      BYTE      supportedCommand3;            
34574  00  =3      BYTE      supportedCommand4;            /* LSB */
34575  00  =3  } VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG;
34576  00  =3  
34577  00  =3  /************************************************************/
34578  00  =3  /* Schedule Supported Commands Report 1byte V4 command class structs */
34579  00  =3  /************************************************************/
34580  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_1BYTE_V4_FRAME_
34581  00  =3  {
34582  00  =3      BYTE      cmdClass;                     /* The command class */
34583  00  =3      BYTE      cmd;                          /* The command */
34584  00  =3      BYTE      scheduleIdBlock;              /**/
34585  00  =3      BYTE      commandClassListLength;       /**/
34586  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup1;                /**/
34587  00  =3  } ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_1BYTE_V4_FRAME;
34588  00  =3  
34589  00  =3  /************************************************************/
34590  00  =3  /* Schedule Supported Commands Report 2byte V4 command class structs */
34591  00  =3  /************************************************************/
34592  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_2BYTE_V4_FRAME_
34593  00  =3  {
34594  00  =3      BYTE      cmdClass;                     /* The command class */
34595  00  =3      BYTE      cmd;                          /* The command */
34596  00  =3      BYTE      scheduleIdBlock;              /**/
34597  00  =3      BYTE      commandClassListLength;       /**/
34598  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup1;                /**/
34599  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup2;                /**/
34600  00  =3  } ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_2BYTE_V4_FRAME;
34601  00  =3  
34602  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 575 

34603  00  =3  /* Schedule Supported Commands Report 3byte V4 command class structs */
34604  00  =3  /************************************************************/
34605  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_3BYTE_V4_FRAME_
34606  00  =3  {
34607  00  =3      BYTE      cmdClass;                     /* The command class */
34608  00  =3      BYTE      cmd;                          /* The command */
34609  00  =3      BYTE      scheduleIdBlock;              /**/
34610  00  =3      BYTE      commandClassListLength;       /**/
34611  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup1;                /**/
34612  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup2;                /**/
34613  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup3;                /**/
34614  00  =3  } ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_3BYTE_V4_FRAME;
34615  00  =3  
34616  00  =3  /************************************************************/
34617  00  =3  /* Schedule Supported Commands Report 4byte V4 command class structs */
34618  00  =3  /************************************************************/
34619  00  =3  typedef struct _ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_FRAME_
34620  00  =3  {
34621  00  =3      BYTE      cmdClass;                     /* The command class */
34622  00  =3      BYTE      cmd;                          /* The command */
34623  00  =3      BYTE      scheduleIdBlock;              /**/
34624  00  =3      BYTE      commandClassListLength;       /**/
34625  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup1;                /**/
34626  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup2;                /**/
34627  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup3;                /**/
34628  00  =3      VG_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_VG variantgroup4;                /**/
34629  00  =3  } ZW_SCHEDULE_SUPPORTED_COMMANDS_REPORT_4BYTE_V4_FRAME;
34630  00  =3  
34631  00  =3  /************************************************************/
34632  00  =3  /* Controller Change command class structs */               
34633  00  =3  /************************************************************/
34634  00  =3  typedef struct _ZW_CONTROLLER_CHANGE_FRAME_
34635  00  =3  {
34636  00  =3      BYTE      cmdClass;                     /* The command class */
34637  00  =3      BYTE      cmd;                          /* The command */
34638  00  =3      BYTE      seqNo;                        /**/
34639  00  =3      BYTE      reserved;                     /**/
34640  00  =3      BYTE      mode;                         /**/
34641  00  =3      BYTE      txOptions;                    /**/
34642  00  =3  } ZW_CONTROLLER_CHANGE_FRAME;
34643  00  =3  
34644  00  =3  /************************************************************/
34645  00  =3  /* Controller Change Status 1byte command class structs */  
34646  00  =3  /************************************************************/
34647  00  =3  typedef struct _ZW_CONTROLLER_CHANGE_STATUS_1BYTE_FRAME_
34648  00  =3  {
34649  00  =3      BYTE      cmdClass;                     /* The command class */
34650  00  =3      BYTE      cmd;                          /* The command */
34651  00  =3      BYTE      seqNo;                        /**/
34652  00  =3      BYTE      status;                       /**/
34653  00  =3      BYTE      reserved;                     /**/
34654  00  =3      BYTE      newNodeId;                    /**/
34655  00  =3      BYTE      nodeInfoLength;               /**/
34656  00  =3      BYTE      properties1;                  /* masked byte */
34657  00  =3      BYTE      properties2;                  /* masked byte */
34658  00  =3      BYTE      basicDeviceClass;             /**/
34659  00  =3      BYTE      genericDeviceClass;           /**/
34660  00  =3      BYTE      specificDeviceClass;          /**/
34661  00  =3      BYTE      commandClass1;                
34662  00  =3  } ZW_CONTROLLER_CHANGE_STATUS_1BYTE_FRAME;
34663  00  =3  
34664  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 576 

34665  00  =3  /* Controller Change Status 2byte command class structs */  
34666  00  =3  /************************************************************/
34667  00  =3  typedef struct _ZW_CONTROLLER_CHANGE_STATUS_2BYTE_FRAME_
34668  00  =3  {
34669  00  =3      BYTE      cmdClass;                     /* The command class */
34670  00  =3      BYTE      cmd;                          /* The command */
34671  00  =3      BYTE      seqNo;                        /**/
34672  00  =3      BYTE      status;                       /**/
34673  00  =3      BYTE      reserved;                     /**/
34674  00  =3      BYTE      newNodeId;                    /**/
34675  00  =3      BYTE      nodeInfoLength;               /**/
34676  00  =3      BYTE      properties1;                  /* masked byte */
34677  00  =3      BYTE      properties2;                  /* masked byte */
34678  00  =3      BYTE      basicDeviceClass;             /**/
34679  00  =3      BYTE      genericDeviceClass;           /**/
34680  00  =3      BYTE      specificDeviceClass;          /**/
34681  00  =3      BYTE      commandClass1;                /* MSB */
34682  00  =3      BYTE      commandClass2;                /* LSB */
34683  00  =3  } ZW_CONTROLLER_CHANGE_STATUS_2BYTE_FRAME;
34684  00  =3  
34685  00  =3  /************************************************************/
34686  00  =3  /* Controller Change Status 3byte command class structs */  
34687  00  =3  /************************************************************/
34688  00  =3  typedef struct _ZW_CONTROLLER_CHANGE_STATUS_3BYTE_FRAME_
34689  00  =3  {
34690  00  =3      BYTE      cmdClass;                     /* The command class */
34691  00  =3      BYTE      cmd;                          /* The command */
34692  00  =3      BYTE      seqNo;                        /**/
34693  00  =3      BYTE      status;                       /**/
34694  00  =3      BYTE      reserved;                     /**/
34695  00  =3      BYTE      newNodeId;                    /**/
34696  00  =3      BYTE      nodeInfoLength;               /**/
34697  00  =3      BYTE      properties1;                  /* masked byte */
34698  00  =3      BYTE      properties2;                  /* masked byte */
34699  00  =3      BYTE      basicDeviceClass;             /**/
34700  00  =3      BYTE      genericDeviceClass;           /**/
34701  00  =3      BYTE      specificDeviceClass;          /**/
34702  00  =3      BYTE      commandClass1;                /* MSB */
34703  00  =3      BYTE      commandClass2;                
34704  00  =3      BYTE      commandClass3;                /* LSB */
34705  00  =3  } ZW_CONTROLLER_CHANGE_STATUS_3BYTE_FRAME;
34706  00  =3  
34707  00  =3  /************************************************************/
34708  00  =3  /* Controller Change Status 4byte command class structs */  
34709  00  =3  /************************************************************/
34710  00  =3  typedef struct _ZW_CONTROLLER_CHANGE_STATUS_4BYTE_FRAME_
34711  00  =3  {
34712  00  =3      BYTE      cmdClass;                     /* The command class */
34713  00  =3      BYTE      cmd;                          /* The command */
34714  00  =3      BYTE      seqNo;                        /**/
34715  00  =3      BYTE      status;                       /**/
34716  00  =3      BYTE      reserved;                     /**/
34717  00  =3      BYTE      newNodeId;                    /**/
34718  00  =3      BYTE      nodeInfoLength;               /**/
34719  00  =3      BYTE      properties1;                  /* masked byte */
34720  00  =3      BYTE      properties2;                  /* masked byte */
34721  00  =3      BYTE      basicDeviceClass;             /**/
34722  00  =3      BYTE      genericDeviceClass;           /**/
34723  00  =3      BYTE      specificDeviceClass;          /**/
34724  00  =3      BYTE      commandClass1;                /* MSB */
34725  00  =3      BYTE      commandClass2;                
34726  00  =3      BYTE      commandClass3;                
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 577 

34727  00  =3      BYTE      commandClass4;                /* LSB */
34728  00  =3  } ZW_CONTROLLER_CHANGE_STATUS_4BYTE_FRAME;
34729  00  =3  
34730  00  =3  /************************************************************/
34731  00  =3  /* Zip Node Solicitation command class structs */           
34732  00  =3  /************************************************************/
34733  00  =3  typedef struct _ZW_ZIP_NODE_SOLICITATION_FRAME_
34734  00  =3  {
34735  00  =3      BYTE      cmdClass;                     /* The command class */
34736  00  =3      BYTE      cmd;                          /* The command */
34737  00  =3      BYTE      reserved;                     /**/
34738  00  =3      BYTE      nodeId;                       /**/
34739  00  =3      BYTE      ipv6Address1;                 /* MSB */
34740  00  =3      BYTE      ipv6Address2;                 
34741  00  =3      BYTE      ipv6Address3;                 
34742  00  =3      BYTE      ipv6Address4;                 
34743  00  =3      BYTE      ipv6Address5;                 
34744  00  =3      BYTE      ipv6Address6;                 
34745  00  =3      BYTE      ipv6Address7;                 
34746  00  =3      BYTE      ipv6Address8;                 
34747  00  =3      BYTE      ipv6Address9;                 
34748  00  =3      BYTE      ipv6Address10;                
34749  00  =3      BYTE      ipv6Address11;                
34750  00  =3      BYTE      ipv6Address12;                
34751  00  =3      BYTE      ipv6Address13;                
34752  00  =3      BYTE      ipv6Address14;                
34753  00  =3      BYTE      ipv6Address15;                
34754  00  =3      BYTE      ipv6Address16;                /* LSB */
34755  00  =3  } ZW_ZIP_NODE_SOLICITATION_FRAME;
34756  00  =3  
34757  00  =3  /************************************************************/
34758  00  =3  /* Zip Inv Node Solicitation command class structs */       
34759  00  =3  /************************************************************/
34760  00  =3  typedef struct _ZW_ZIP_INV_NODE_SOLICITATION_FRAME_
34761  00  =3  {
34762  00  =3      BYTE      cmdClass;                     /* The command class */
34763  00  =3      BYTE      cmd;                          /* The command */
34764  00  =3      BYTE      properties1;                  /* masked byte */
34765  00  =3      BYTE      nodeId;                       /**/
34766  00  =3  } ZW_ZIP_INV_NODE_SOLICITATION_FRAME;
34767  00  =3  
34768  00  =3  /************************************************************/
34769  00  =3  /* Zip Node Advertisement command class structs */          
34770  00  =3  /************************************************************/
34771  00  =3  typedef struct _ZW_ZIP_NODE_ADVERTISEMENT_FRAME_
34772  00  =3  {
34773  00  =3      BYTE      cmdClass;                     /* The command class */
34774  00  =3      BYTE      cmd;                          /* The command */
34775  00  =3      BYTE      properties1;                  /* masked byte */
34776  00  =3      BYTE      nodeId;                       /**/
34777  00  =3      BYTE      ipv6Address1;                 /* MSB */
34778  00  =3      BYTE      ipv6Address2;                 
34779  00  =3      BYTE      ipv6Address3;                 
34780  00  =3      BYTE      ipv6Address4;                 
34781  00  =3      BYTE      ipv6Address5;                 
34782  00  =3      BYTE      ipv6Address6;                 
34783  00  =3      BYTE      ipv6Address7;                 
34784  00  =3      BYTE      ipv6Address8;                 
34785  00  =3      BYTE      ipv6Address9;                 
34786  00  =3      BYTE      ipv6Address10;                
34787  00  =3      BYTE      ipv6Address11;                
34788  00  =3      BYTE      ipv6Address12;                
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 578 

34789  00  =3      BYTE      ipv6Address13;                
34790  00  =3      BYTE      ipv6Address14;                
34791  00  =3      BYTE      ipv6Address15;                
34792  00  =3      BYTE      ipv6Address16;                /* LSB */
34793  00  =3      BYTE      homeId1;                      /* MSB */
34794  00  =3      BYTE      homeId2;                      
34795  00  =3      BYTE      homeId3;                      
34796  00  =3      BYTE      homeId4;                      /* LSB */
34797  00  =3  } ZW_ZIP_NODE_ADVERTISEMENT_FRAME;
34798  00  =3  
34799  00  =3  /************************************************************/
34800  00  =3  /* Association Group Name Get command class structs */      
34801  00  =3  /************************************************************/
34802  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_GET_FRAME_
34803  00  =3  {
34804  00  =3      BYTE      cmdClass;                     /* The command class */
34805  00  =3      BYTE      cmd;                          /* The command */
34806  00  =3      BYTE      groupingIdentifier;           /**/
34807  00  =3  } ZW_ASSOCIATION_GROUP_NAME_GET_FRAME;
34808  00  =3  
34809  00  =3  /************************************************************/
34810  00  =3  /* Association Group Name Report 1byte command class structs */
34811  00  =3  /************************************************************/
34812  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_FRAME_
34813  00  =3  {
34814  00  =3      BYTE      cmdClass;                     /* The command class */
34815  00  =3      BYTE      cmd;                          /* The command */
34816  00  =3      BYTE      groupingIdentifier;           /**/
34817  00  =3      BYTE      lengthOfName;                 /**/
34818  00  =3      BYTE      name1;                        
34819  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_FRAME;
34820  00  =3  
34821  00  =3  /************************************************************/
34822  00  =3  /* Association Group Name Report 2byte command class structs */
34823  00  =3  /************************************************************/
34824  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_FRAME_
34825  00  =3  {
34826  00  =3      BYTE      cmdClass;                     /* The command class */
34827  00  =3      BYTE      cmd;                          /* The command */
34828  00  =3      BYTE      groupingIdentifier;           /**/
34829  00  =3      BYTE      lengthOfName;                 /**/
34830  00  =3      BYTE      name1;                        /* MSB */
34831  00  =3      BYTE      name2;                        /* LSB */
34832  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_FRAME;
34833  00  =3  
34834  00  =3  /************************************************************/
34835  00  =3  /* Association Group Name Report 3byte command class structs */
34836  00  =3  /************************************************************/
34837  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_FRAME_
34838  00  =3  {
34839  00  =3      BYTE      cmdClass;                     /* The command class */
34840  00  =3      BYTE      cmd;                          /* The command */
34841  00  =3      BYTE      groupingIdentifier;           /**/
34842  00  =3      BYTE      lengthOfName;                 /**/
34843  00  =3      BYTE      name1;                        /* MSB */
34844  00  =3      BYTE      name2;                        
34845  00  =3      BYTE      name3;                        /* LSB */
34846  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_FRAME;
34847  00  =3  
34848  00  =3  /************************************************************/
34849  00  =3  /* Association Group Name Report 4byte command class structs */
34850  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 579 

34851  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_FRAME_
34852  00  =3  {
34853  00  =3      BYTE      cmdClass;                     /* The command class */
34854  00  =3      BYTE      cmd;                          /* The command */
34855  00  =3      BYTE      groupingIdentifier;           /**/
34856  00  =3      BYTE      lengthOfName;                 /**/
34857  00  =3      BYTE      name1;                        /* MSB */
34858  00  =3      BYTE      name2;                        
34859  00  =3      BYTE      name3;                        
34860  00  =3      BYTE      name4;                        /* LSB */
34861  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_FRAME;
34862  00  =3  
34863  00  =3  /************************************************************/
34864  00  =3  /* Association Group Info Get command class structs */      
34865  00  =3  /************************************************************/
34866  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_GET_FRAME_
34867  00  =3  {
34868  00  =3      BYTE      cmdClass;                     /* The command class */
34869  00  =3      BYTE      cmd;                          /* The command */
34870  00  =3      BYTE      properties1;                  /* masked byte */
34871  00  =3      BYTE      groupingIdentifier;           /**/
34872  00  =3  } ZW_ASSOCIATION_GROUP_INFO_GET_FRAME;
34873  00  =3  
34874  00  =3  /************************************************************/
34875  00  =3  /* Association Group Info Report variant group structs */   
34876  00  =3  /************************************************************/
34877  00  =3  typedef struct _VG_ASSOCIATION_GROUP_INFO_REPORT_VG_
34878  00  =3  {
34879  00  =3      BYTE      groupingIdentifier;           /**/
34880  00  =3      BYTE      mode;                         /**/
34881  00  =3      BYTE      profile1;                     /**/
34882  00  =3      BYTE      profile2;                     /**/
34883  00  =3      BYTE      reserved;                     /**/
34884  00  =3      BYTE      eventCode1;                   /* MSB */
34885  00  =3      BYTE      eventCode2;                   /* LSB */
34886  00  =3  } VG_ASSOCIATION_GROUP_INFO_REPORT_VG;
34887  00  =3  
34888  00  =3  /************************************************************/
34889  00  =3  /* Association Group Info Report 1byte command class structs */
34890  00  =3  /************************************************************/
34891  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_FRAME_
34892  00  =3  {
34893  00  =3      BYTE      cmdClass;                     /* The command class */
34894  00  =3      BYTE      cmd;                          /* The command */
34895  00  =3      BYTE      properties1;                  /* masked byte */
34896  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup1;                /**/
34897  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_FRAME;
34898  00  =3  
34899  00  =3  /************************************************************/
34900  00  =3  /* Association Group Info Report 2byte command class structs */
34901  00  =3  /************************************************************/
34902  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_FRAME_
34903  00  =3  {
34904  00  =3      BYTE      cmdClass;                     /* The command class */
34905  00  =3      BYTE      cmd;                          /* The command */
34906  00  =3      BYTE      properties1;                  /* masked byte */
34907  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup1;                /**/
34908  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup2;                /**/
34909  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_FRAME;
34910  00  =3  
34911  00  =3  /************************************************************/
34912  00  =3  /* Association Group Info Report 3byte command class structs */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 580 

34913  00  =3  /************************************************************/
34914  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_FRAME_
34915  00  =3  {
34916  00  =3      BYTE      cmdClass;                     /* The command class */
34917  00  =3      BYTE      cmd;                          /* The command */
34918  00  =3      BYTE      properties1;                  /* masked byte */
34919  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup1;                /**/
34920  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup2;                /**/
34921  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup3;                /**/
34922  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_FRAME;
34923  00  =3  
34924  00  =3  /************************************************************/
34925  00  =3  /* Association Group Info Report 4byte command class structs */
34926  00  =3  /************************************************************/
34927  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_FRAME_
34928  00  =3  {
34929  00  =3      BYTE      cmdClass;                     /* The command class */
34930  00  =3      BYTE      cmd;                          /* The command */
34931  00  =3      BYTE      properties1;                  /* masked byte */
34932  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup1;                /**/
34933  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup2;                /**/
34934  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup3;                /**/
34935  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_VG variantgroup4;                /**/
34936  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_FRAME;
34937  00  =3  
34938  00  =3  /************************************************************/
34939  00  =3  /* Association Group Command List Get command class structs */
34940  00  =3  /************************************************************/
34941  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_FRAME_
34942  00  =3  {
34943  00  =3      BYTE      cmdClass;                     /* The command class */
34944  00  =3      BYTE      cmd;                          /* The command */
34945  00  =3      BYTE      properties1;                  /* masked byte */
34946  00  =3      BYTE      groupingIdentifier;           /**/
34947  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_FRAME;
34948  00  =3  
34949  00  =3  /************************************************************/
34950  00  =3  /* Association Group Command List Report 1byte command class structs */
34951  00  =3  /************************************************************/
34952  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_FRAME_
34953  00  =3  {
34954  00  =3      BYTE      cmdClass;                     /* The command class */
34955  00  =3      BYTE      cmd;                          /* The command */
34956  00  =3      BYTE      groupingIdentifier;           /**/
34957  00  =3      BYTE      listLength;                   /**/
34958  00  =3      BYTE      command1;                     
34959  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_FRAME;
34960  00  =3  
34961  00  =3  /************************************************************/
34962  00  =3  /* Association Group Command List Report 2byte command class structs */
34963  00  =3  /************************************************************/
34964  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_FRAME_
34965  00  =3  {
34966  00  =3      BYTE      cmdClass;                     /* The command class */
34967  00  =3      BYTE      cmd;                          /* The command */
34968  00  =3      BYTE      groupingIdentifier;           /**/
34969  00  =3      BYTE      listLength;                   /**/
34970  00  =3      BYTE      command1;                     /* MSB */
34971  00  =3      BYTE      command2;                     /* LSB */
34972  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_FRAME;
34973  00  =3  
34974  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 581 

34975  00  =3  /* Association Group Command List Report 3byte command class structs */
34976  00  =3  /************************************************************/
34977  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_FRAME_
34978  00  =3  {
34979  00  =3      BYTE      cmdClass;                     /* The command class */
34980  00  =3      BYTE      cmd;                          /* The command */
34981  00  =3      BYTE      groupingIdentifier;           /**/
34982  00  =3      BYTE      listLength;                   /**/
34983  00  =3      BYTE      command1;                     /* MSB */
34984  00  =3      BYTE      command2;                     
34985  00  =3      BYTE      command3;                     /* LSB */
34986  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_FRAME;
34987  00  =3  
34988  00  =3  /************************************************************/
34989  00  =3  /* Association Group Command List Report 4byte command class structs */
34990  00  =3  /************************************************************/
34991  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_FRAME_
34992  00  =3  {
34993  00  =3      BYTE      cmdClass;                     /* The command class */
34994  00  =3      BYTE      cmd;                          /* The command */
34995  00  =3      BYTE      groupingIdentifier;           /**/
34996  00  =3      BYTE      listLength;                   /**/
34997  00  =3      BYTE      command1;                     /* MSB */
34998  00  =3      BYTE      command2;                     
34999  00  =3      BYTE      command3;                     
35000  00  =3      BYTE      command4;                     /* LSB */
35001  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_FRAME;
35002  00  =3  
35003  00  =3  /************************************************************/
35004  00  =3  /* Association Group Name Get V2 command class structs */   
35005  00  =3  /************************************************************/
35006  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_GET_V2_FRAME_
35007  00  =3  {
35008  00  =3      BYTE      cmdClass;                     /* The command class */
35009  00  =3      BYTE      cmd;                          /* The command */
35010  00  =3      BYTE      groupingIdentifier;           /**/
35011  00  =3  } ZW_ASSOCIATION_GROUP_NAME_GET_V2_FRAME;
35012  00  =3  
35013  00  =3  /************************************************************/
35014  00  =3  /* Association Group Name Report 1byte V2 command class structs */
35015  00  =3  /************************************************************/
35016  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_V2_FRAME_
35017  00  =3  {
35018  00  =3      BYTE      cmdClass;                     /* The command class */
35019  00  =3      BYTE      cmd;                          /* The command */
35020  00  =3      BYTE      groupingIdentifier;           /**/
35021  00  =3      BYTE      lengthOfName;                 /**/
35022  00  =3      BYTE      name1;                        
35023  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_V2_FRAME;
35024  00  =3  
35025  00  =3  /************************************************************/
35026  00  =3  /* Association Group Name Report 2byte V2 command class structs */
35027  00  =3  /************************************************************/
35028  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_V2_FRAME_
35029  00  =3  {
35030  00  =3      BYTE      cmdClass;                     /* The command class */
35031  00  =3      BYTE      cmd;                          /* The command */
35032  00  =3      BYTE      groupingIdentifier;           /**/
35033  00  =3      BYTE      lengthOfName;                 /**/
35034  00  =3      BYTE      name1;                        /* MSB */
35035  00  =3      BYTE      name2;                        /* LSB */
35036  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_V2_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 582 

35037  00  =3  
35038  00  =3  /************************************************************/
35039  00  =3  /* Association Group Name Report 3byte V2 command class structs */
35040  00  =3  /************************************************************/
35041  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_V2_FRAME_
35042  00  =3  {
35043  00  =3      BYTE      cmdClass;                     /* The command class */
35044  00  =3      BYTE      cmd;                          /* The command */
35045  00  =3      BYTE      groupingIdentifier;           /**/
35046  00  =3      BYTE      lengthOfName;                 /**/
35047  00  =3      BYTE      name1;                        /* MSB */
35048  00  =3      BYTE      name2;                        
35049  00  =3      BYTE      name3;                        /* LSB */
35050  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_V2_FRAME;
35051  00  =3  
35052  00  =3  /************************************************************/
35053  00  =3  /* Association Group Name Report 4byte V2 command class structs */
35054  00  =3  /************************************************************/
35055  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_V2_FRAME_
35056  00  =3  {
35057  00  =3      BYTE      cmdClass;                     /* The command class */
35058  00  =3      BYTE      cmd;                          /* The command */
35059  00  =3      BYTE      groupingIdentifier;           /**/
35060  00  =3      BYTE      lengthOfName;                 /**/
35061  00  =3      BYTE      name1;                        /* MSB */
35062  00  =3      BYTE      name2;                        
35063  00  =3      BYTE      name3;                        
35064  00  =3      BYTE      name4;                        /* LSB */
35065  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_V2_FRAME;
35066  00  =3  
35067  00  =3  /************************************************************/
35068  00  =3  /* Association Group Info Get V2 command class structs */   
35069  00  =3  /************************************************************/
35070  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_GET_V2_FRAME_
35071  00  =3  {
35072  00  =3      BYTE      cmdClass;                     /* The command class */
35073  00  =3      BYTE      cmd;                          /* The command */
35074  00  =3      BYTE      properties1;                  /* masked byte */
35075  00  =3      BYTE      groupingIdentifier;           /**/
35076  00  =3  } ZW_ASSOCIATION_GROUP_INFO_GET_V2_FRAME;
35077  00  =3  
35078  00  =3  /************************************************************/
35079  00  =3  /* Association Group Info Report V2 variant group structs */
35080  00  =3  /************************************************************/
35081  00  =3  typedef struct _VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG_
35082  00  =3  {
35083  00  =3      BYTE      groupingIdentifier;           /**/
35084  00  =3      BYTE      mode;                         /**/
35085  00  =3      BYTE      profile1;                     /**/
35086  00  =3      BYTE      profile2;                     /**/
35087  00  =3      BYTE      reserved;                     /**/
35088  00  =3      BYTE      eventCode1;                   /* MSB */
35089  00  =3      BYTE      eventCode2;                   /* LSB */
35090  00  =3  } VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG;
35091  00  =3  
35092  00  =3  /************************************************************/
35093  00  =3  /* Association Group Info Report 1byte V2 command class structs */
35094  00  =3  /************************************************************/
35095  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_V2_FRAME_
35096  00  =3  {
35097  00  =3      BYTE      cmdClass;                     /* The command class */
35098  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 583 

35099  00  =3      BYTE      properties1;                  /* masked byte */
35100  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup1;                /**/
35101  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_V2_FRAME;
35102  00  =3  
35103  00  =3  /************************************************************/
35104  00  =3  /* Association Group Info Report 2byte V2 command class structs */
35105  00  =3  /************************************************************/
35106  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_V2_FRAME_
35107  00  =3  {
35108  00  =3      BYTE      cmdClass;                     /* The command class */
35109  00  =3      BYTE      cmd;                          /* The command */
35110  00  =3      BYTE      properties1;                  /* masked byte */
35111  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup1;                /**/
35112  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup2;                /**/
35113  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_V2_FRAME;
35114  00  =3  
35115  00  =3  /************************************************************/
35116  00  =3  /* Association Group Info Report 3byte V2 command class structs */
35117  00  =3  /************************************************************/
35118  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_V2_FRAME_
35119  00  =3  {
35120  00  =3      BYTE      cmdClass;                     /* The command class */
35121  00  =3      BYTE      cmd;                          /* The command */
35122  00  =3      BYTE      properties1;                  /* masked byte */
35123  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup1;                /**/
35124  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup2;                /**/
35125  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup3;                /**/
35126  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_V2_FRAME;
35127  00  =3  
35128  00  =3  /************************************************************/
35129  00  =3  /* Association Group Info Report 4byte V2 command class structs */
35130  00  =3  /************************************************************/
35131  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_V2_FRAME_
35132  00  =3  {
35133  00  =3      BYTE      cmdClass;                     /* The command class */
35134  00  =3      BYTE      cmd;                          /* The command */
35135  00  =3      BYTE      properties1;                  /* masked byte */
35136  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup1;                /**/
35137  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup2;                /**/
35138  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup3;                /**/
35139  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V2_VG variantgroup4;                /**/
35140  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_V2_FRAME;
35141  00  =3  
35142  00  =3  /************************************************************/
35143  00  =3  /* Association Group Command List Get V2 command class structs */
35144  00  =3  /************************************************************/
35145  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_V2_FRAME_
35146  00  =3  {
35147  00  =3      BYTE      cmdClass;                     /* The command class */
35148  00  =3      BYTE      cmd;                          /* The command */
35149  00  =3      BYTE      properties1;                  /* masked byte */
35150  00  =3      BYTE      groupingIdentifier;           /**/
35151  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_V2_FRAME;
35152  00  =3  
35153  00  =3  /************************************************************/
35154  00  =3  /* Association Group Command List Report 1byte V2 command class structs */
35155  00  =3  /************************************************************/
35156  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_V2_FRAME_
35157  00  =3  {
35158  00  =3      BYTE      cmdClass;                     /* The command class */
35159  00  =3      BYTE      cmd;                          /* The command */
35160  00  =3      BYTE      groupingIdentifier;           /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 584 

35161  00  =3      BYTE      listLength;                   /**/
35162  00  =3      BYTE      command1;                     
35163  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_V2_FRAME;
35164  00  =3  
35165  00  =3  /************************************************************/
35166  00  =3  /* Association Group Command List Report 2byte V2 command class structs */
35167  00  =3  /************************************************************/
35168  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_V2_FRAME_
35169  00  =3  {
35170  00  =3      BYTE      cmdClass;                     /* The command class */
35171  00  =3      BYTE      cmd;                          /* The command */
35172  00  =3      BYTE      groupingIdentifier;           /**/
35173  00  =3      BYTE      listLength;                   /**/
35174  00  =3      BYTE      command1;                     /* MSB */
35175  00  =3      BYTE      command2;                     /* LSB */
35176  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_V2_FRAME;
35177  00  =3  
35178  00  =3  /************************************************************/
35179  00  =3  /* Association Group Command List Report 3byte V2 command class structs */
35180  00  =3  /************************************************************/
35181  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_V2_FRAME_
35182  00  =3  {
35183  00  =3      BYTE      cmdClass;                     /* The command class */
35184  00  =3      BYTE      cmd;                          /* The command */
35185  00  =3      BYTE      groupingIdentifier;           /**/
35186  00  =3      BYTE      listLength;                   /**/
35187  00  =3      BYTE      command1;                     /* MSB */
35188  00  =3      BYTE      command2;                     
35189  00  =3      BYTE      command3;                     /* LSB */
35190  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_V2_FRAME;
35191  00  =3  
35192  00  =3  /************************************************************/
35193  00  =3  /* Association Group Command List Report 4byte V2 command class structs */
35194  00  =3  /************************************************************/
35195  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_V2_FRAME_
35196  00  =3  {
35197  00  =3      BYTE      cmdClass;                     /* The command class */
35198  00  =3      BYTE      cmd;                          /* The command */
35199  00  =3      BYTE      groupingIdentifier;           /**/
35200  00  =3      BYTE      listLength;                   /**/
35201  00  =3      BYTE      command1;                     /* MSB */
35202  00  =3      BYTE      command2;                     
35203  00  =3      BYTE      command3;                     
35204  00  =3      BYTE      command4;                     /* LSB */
35205  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_V2_FRAME;
35206  00  =3  
35207  00  =3  /************************************************************/
35208  00  =3  /* Association Group Name Get V3 command class structs */   
35209  00  =3  /************************************************************/
35210  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_GET_V3_FRAME_
35211  00  =3  {
35212  00  =3      BYTE      cmdClass;                     /* The command class */
35213  00  =3      BYTE      cmd;                          /* The command */
35214  00  =3      BYTE      groupingIdentifier;           /**/
35215  00  =3  } ZW_ASSOCIATION_GROUP_NAME_GET_V3_FRAME;
35216  00  =3  
35217  00  =3  /************************************************************/
35218  00  =3  /* Association Group Name Report 1byte V3 command class structs */
35219  00  =3  /************************************************************/
35220  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_V3_FRAME_
35221  00  =3  {
35222  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 585 

35223  00  =3      BYTE      cmd;                          /* The command */
35224  00  =3      BYTE      groupingIdentifier;           /**/
35225  00  =3      BYTE      lengthOfName;                 /**/
35226  00  =3      BYTE      name1;                        
35227  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_1BYTE_V3_FRAME;
35228  00  =3  
35229  00  =3  /************************************************************/
35230  00  =3  /* Association Group Name Report 2byte V3 command class structs */
35231  00  =3  /************************************************************/
35232  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_V3_FRAME_
35233  00  =3  {
35234  00  =3      BYTE      cmdClass;                     /* The command class */
35235  00  =3      BYTE      cmd;                          /* The command */
35236  00  =3      BYTE      groupingIdentifier;           /**/
35237  00  =3      BYTE      lengthOfName;                 /**/
35238  00  =3      BYTE      name1;                        /* MSB */
35239  00  =3      BYTE      name2;                        /* LSB */
35240  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_2BYTE_V3_FRAME;
35241  00  =3  
35242  00  =3  /************************************************************/
35243  00  =3  /* Association Group Name Report 3byte V3 command class structs */
35244  00  =3  /************************************************************/
35245  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_V3_FRAME_
35246  00  =3  {
35247  00  =3      BYTE      cmdClass;                     /* The command class */
35248  00  =3      BYTE      cmd;                          /* The command */
35249  00  =3      BYTE      groupingIdentifier;           /**/
35250  00  =3      BYTE      lengthOfName;                 /**/
35251  00  =3      BYTE      name1;                        /* MSB */
35252  00  =3      BYTE      name2;                        
35253  00  =3      BYTE      name3;                        /* LSB */
35254  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_3BYTE_V3_FRAME;
35255  00  =3  
35256  00  =3  /************************************************************/
35257  00  =3  /* Association Group Name Report 4byte V3 command class structs */
35258  00  =3  /************************************************************/
35259  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_V3_FRAME_
35260  00  =3  {
35261  00  =3      BYTE      cmdClass;                     /* The command class */
35262  00  =3      BYTE      cmd;                          /* The command */
35263  00  =3      BYTE      groupingIdentifier;           /**/
35264  00  =3      BYTE      lengthOfName;                 /**/
35265  00  =3      BYTE      name1;                        /* MSB */
35266  00  =3      BYTE      name2;                        
35267  00  =3      BYTE      name3;                        
35268  00  =3      BYTE      name4;                        /* LSB */
35269  00  =3  } ZW_ASSOCIATION_GROUP_NAME_REPORT_4BYTE_V3_FRAME;
35270  00  =3  
35271  00  =3  /************************************************************/
35272  00  =3  /* Association Group Info Get V3 command class structs */   
35273  00  =3  /************************************************************/
35274  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_GET_V3_FRAME_
35275  00  =3  {
35276  00  =3      BYTE      cmdClass;                     /* The command class */
35277  00  =3      BYTE      cmd;                          /* The command */
35278  00  =3      BYTE      properties1;                  /* masked byte */
35279  00  =3      BYTE      groupingIdentifier;           /**/
35280  00  =3  } ZW_ASSOCIATION_GROUP_INFO_GET_V3_FRAME;
35281  00  =3  
35282  00  =3  /************************************************************/
35283  00  =3  /* Association Group Info Report V3 variant group structs */
35284  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 586 

35285  00  =3  typedef struct _VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG_
35286  00  =3  {
35287  00  =3      BYTE      groupingIdentifier;           /**/
35288  00  =3      BYTE      mode;                         /**/
35289  00  =3      BYTE      profile1;                     /**/
35290  00  =3      BYTE      profile2;                     /**/
35291  00  =3      BYTE      reserved;                     /**/
35292  00  =3      BYTE      eventCode1;                   /* MSB */
35293  00  =3      BYTE      eventCode2;                   /* LSB */
35294  00  =3  } VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG;
35295  00  =3  
35296  00  =3  /************************************************************/
35297  00  =3  /* Association Group Info Report 1byte V3 command class structs */
35298  00  =3  /************************************************************/
35299  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_V3_FRAME_
35300  00  =3  {
35301  00  =3      BYTE      cmdClass;                     /* The command class */
35302  00  =3      BYTE      cmd;                          /* The command */
35303  00  =3      BYTE      properties1;                  /* masked byte */
35304  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup1;                /**/
35305  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_1BYTE_V3_FRAME;
35306  00  =3  
35307  00  =3  /************************************************************/
35308  00  =3  /* Association Group Info Report 2byte V3 command class structs */
35309  00  =3  /************************************************************/
35310  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_V3_FRAME_
35311  00  =3  {
35312  00  =3      BYTE      cmdClass;                     /* The command class */
35313  00  =3      BYTE      cmd;                          /* The command */
35314  00  =3      BYTE      properties1;                  /* masked byte */
35315  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup1;                /**/
35316  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup2;                /**/
35317  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_2BYTE_V3_FRAME;
35318  00  =3  
35319  00  =3  /************************************************************/
35320  00  =3  /* Association Group Info Report 3byte V3 command class structs */
35321  00  =3  /************************************************************/
35322  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_V3_FRAME_
35323  00  =3  {
35324  00  =3      BYTE      cmdClass;                     /* The command class */
35325  00  =3      BYTE      cmd;                          /* The command */
35326  00  =3      BYTE      properties1;                  /* masked byte */
35327  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup1;                /**/
35328  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup2;                /**/
35329  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup3;                /**/
35330  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_3BYTE_V3_FRAME;
35331  00  =3  
35332  00  =3  /************************************************************/
35333  00  =3  /* Association Group Info Report 4byte V3 command class structs */
35334  00  =3  /************************************************************/
35335  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_V3_FRAME_
35336  00  =3  {
35337  00  =3      BYTE      cmdClass;                     /* The command class */
35338  00  =3      BYTE      cmd;                          /* The command */
35339  00  =3      BYTE      properties1;                  /* masked byte */
35340  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup1;                /**/
35341  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup2;                /**/
35342  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup3;                /**/
35343  00  =3      VG_ASSOCIATION_GROUP_INFO_REPORT_V3_VG variantgroup4;                /**/
35344  00  =3  } ZW_ASSOCIATION_GROUP_INFO_REPORT_4BYTE_V3_FRAME;
35345  00  =3  
35346  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 587 

35347  00  =3  /* Association Group Command List Get V3 command class structs */
35348  00  =3  /************************************************************/
35349  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_V3_FRAME_
35350  00  =3  {
35351  00  =3      BYTE      cmdClass;                     /* The command class */
35352  00  =3      BYTE      cmd;                          /* The command */
35353  00  =3      BYTE      properties1;                  /* masked byte */
35354  00  =3      BYTE      groupingIdentifier;           /**/
35355  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_GET_V3_FRAME;
35356  00  =3  
35357  00  =3  /************************************************************/
35358  00  =3  /* Association Group Command List Report 1byte V3 command class structs */
35359  00  =3  /************************************************************/
35360  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_V3_FRAME_
35361  00  =3  {
35362  00  =3      BYTE      cmdClass;                     /* The command class */
35363  00  =3      BYTE      cmd;                          /* The command */
35364  00  =3      BYTE      groupingIdentifier;           /**/
35365  00  =3      BYTE      listLength;                   /**/
35366  00  =3      BYTE      command1;                     
35367  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_1BYTE_V3_FRAME;
35368  00  =3  
35369  00  =3  /************************************************************/
35370  00  =3  /* Association Group Command List Report 2byte V3 command class structs */
35371  00  =3  /************************************************************/
35372  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_V3_FRAME_
35373  00  =3  {
35374  00  =3      BYTE      cmdClass;                     /* The command class */
35375  00  =3      BYTE      cmd;                          /* The command */
35376  00  =3      BYTE      groupingIdentifier;           /**/
35377  00  =3      BYTE      listLength;                   /**/
35378  00  =3      BYTE      command1;                     /* MSB */
35379  00  =3      BYTE      command2;                     /* LSB */
35380  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_2BYTE_V3_FRAME;
35381  00  =3  
35382  00  =3  /************************************************************/
35383  00  =3  /* Association Group Command List Report 3byte V3 command class structs */
35384  00  =3  /************************************************************/
35385  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_V3_FRAME_
35386  00  =3  {
35387  00  =3      BYTE      cmdClass;                     /* The command class */
35388  00  =3      BYTE      cmd;                          /* The command */
35389  00  =3      BYTE      groupingIdentifier;           /**/
35390  00  =3      BYTE      listLength;                   /**/
35391  00  =3      BYTE      command1;                     /* MSB */
35392  00  =3      BYTE      command2;                     
35393  00  =3      BYTE      command3;                     /* LSB */
35394  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_3BYTE_V3_FRAME;
35395  00  =3  
35396  00  =3  /************************************************************/
35397  00  =3  /* Association Group Command List Report 4byte V3 command class structs */
35398  00  =3  /************************************************************/
35399  00  =3  typedef struct _ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_V3_FRAME_
35400  00  =3  {
35401  00  =3      BYTE      cmdClass;                     /* The command class */
35402  00  =3      BYTE      cmd;                          /* The command */
35403  00  =3      BYTE      groupingIdentifier;           /**/
35404  00  =3      BYTE      listLength;                   /**/
35405  00  =3      BYTE      command1;                     /* MSB */
35406  00  =3      BYTE      command2;                     
35407  00  =3      BYTE      command3;                     
35408  00  =3      BYTE      command4;                     /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 588 

35409  00  =3  } ZW_ASSOCIATION_GROUP_COMMAND_LIST_REPORT_4BYTE_V3_FRAME;
35410  00  =3  
35411  00  =3  /************************************************************/
35412  00  =3  /* Device Reset Locally Notification command class structs */
35413  00  =3  /************************************************************/
35414  00  =3  typedef struct _ZW_DEVICE_RESET_LOCALLY_NOTIFICATION_FRAME_
35415  00  =3  {
35416  00  =3      BYTE      cmdClass;                     /* The command class */
35417  00  =3      BYTE      cmd;                          /* The command */
35418  00  =3  } ZW_DEVICE_RESET_LOCALLY_NOTIFICATION_FRAME;
35419  00  =3  
35420  00  =3  /************************************************************/
35421  00  =3  /* Central Scene Supported Get command class structs */     
35422  00  =3  /************************************************************/
35423  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_GET_FRAME_
35424  00  =3  {
35425  00  =3      BYTE      cmdClass;                     /* The command class */
35426  00  =3      BYTE      cmd;                          /* The command */
35427  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_GET_FRAME;
35428  00  =3  
35429  00  =3  /************************************************************/
35430  00  =3  /* Central Scene Supported Report command class structs */  
35431  00  =3  /************************************************************/
35432  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_FRAME_
35433  00  =3  {
35434  00  =3      BYTE      cmdClass;                     /* The command class */
35435  00  =3      BYTE      cmd;                          /* The command */
35436  00  =3      BYTE      supportedScenes;              /**/
35437  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_FRAME;
35438  00  =3  
35439  00  =3  /************************************************************/
35440  00  =3  /* Central Scene Notification command class structs */      
35441  00  =3  /************************************************************/
35442  00  =3  typedef struct _ZW_CENTRAL_SCENE_NOTIFICATION_FRAME_
35443  00  =3  {
35444  00  =3      BYTE      cmdClass;                     /* The command class */
35445  00  =3      BYTE      cmd;                          /* The command */
35446  00  =3      BYTE      sequenceNumber;               /**/
35447  00  =3      BYTE      properties1;                  /* masked byte */
35448  00  =3      BYTE      sceneNumber;                  /**/
35449  00  =3  } ZW_CENTRAL_SCENE_NOTIFICATION_FRAME;
35450  00  =3  
35451  00  =3  /************************************************************/
35452  00  =3  /* Central Scene Supported Get V2 command class structs */  
35453  00  =3  /************************************************************/
35454  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_GET_V2_FRAME_
35455  00  =3  {
35456  00  =3      BYTE      cmdClass;                     /* The command class */
35457  00  =3      BYTE      cmd;                          /* The command */
35458  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_GET_V2_FRAME;
35459  00  =3  
35460  00  =3  /************************************************************/
35461  00  =3  /* Central Scene Supported Report V2 variant group structs */
35462  00  =3  /************************************************************/
35463  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V2_VG_
35464  00  =3  {
35465  00  =3      BYTE      supportedKeyAttributesForScene1;
35466  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V2_VG;
35467  00  =3  
35468  00  =3  /************************************************************/
35469  00  =3  /* Central Scene Supported Report V2 variant group structs */
35470  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 589 

35471  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V2_VG_
35472  00  =3  {
35473  00  =3      BYTE      supportedKeyAttributesForScene1;/* MSB */
35474  00  =3      BYTE      supportedKeyAttributesForScene2;/* LSB */
35475  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V2_VG;
35476  00  =3  
35477  00  =3  /************************************************************/
35478  00  =3  /* Central Scene Supported Report V2 variant group structs */
35479  00  =3  /************************************************************/
35480  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V2_VG_
35481  00  =3  {
35482  00  =3      BYTE      supportedKeyAttributesForScene1;/* MSB */
35483  00  =3      BYTE      supportedKeyAttributesForScene2;
35484  00  =3      BYTE      supportedKeyAttributesForScene3;/* LSB */
35485  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V2_VG;
35486  00  =3  
35487  00  =3  /************************************************************/
35488  00  =3  /* Central Scene Supported Report V2 variant group structs */
35489  00  =3  /************************************************************/
35490  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG_
35491  00  =3  {
35492  00  =3      BYTE      supportedKeyAttributesForScene1;/* MSB */
35493  00  =3      BYTE      supportedKeyAttributesForScene2;
35494  00  =3      BYTE      supportedKeyAttributesForScene3;
35495  00  =3      BYTE      supportedKeyAttributesForScene4;/* LSB */
35496  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG;
35497  00  =3  
35498  00  =3  /************************************************************/
35499  00  =3  /* Central Scene Supported Report 1byte V2 command class structs */
35500  00  =3  /************************************************************/
35501  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V2_FRAME_
35502  00  =3  {
35503  00  =3      BYTE      cmdClass;                     /* The command class */
35504  00  =3      BYTE      cmd;                          /* The command */
35505  00  =3      BYTE      supportedScenes;              /**/
35506  00  =3      BYTE      properties1;                  /* masked byte */
35507  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup1;                /**/
35508  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V2_FRAME;
35509  00  =3  
35510  00  =3  /************************************************************/
35511  00  =3  /* Central Scene Supported Report 2byte V2 command class structs */
35512  00  =3  /************************************************************/
35513  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V2_FRAME_
35514  00  =3  {
35515  00  =3      BYTE      cmdClass;                     /* The command class */
35516  00  =3      BYTE      cmd;                          /* The command */
35517  00  =3      BYTE      supportedScenes;              /**/
35518  00  =3      BYTE      properties1;                  /* masked byte */
35519  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup1;                /**/
35520  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup2;                /**/
35521  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V2_FRAME;
35522  00  =3  
35523  00  =3  /************************************************************/
35524  00  =3  /* Central Scene Supported Report 3byte V2 command class structs */
35525  00  =3  /************************************************************/
35526  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V2_FRAME_
35527  00  =3  {
35528  00  =3      BYTE      cmdClass;                     /* The command class */
35529  00  =3      BYTE      cmd;                          /* The command */
35530  00  =3      BYTE      supportedScenes;              /**/
35531  00  =3      BYTE      properties1;                  /* masked byte */
35532  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 590 

35533  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup2;                /**/
35534  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup3;                /**/
35535  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V2_FRAME;
35536  00  =3  
35537  00  =3  /************************************************************/
35538  00  =3  /* Central Scene Supported Report 4byte V2 command class structs */
35539  00  =3  /************************************************************/
35540  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_FRAME_
35541  00  =3  {
35542  00  =3      BYTE      cmdClass;                     /* The command class */
35543  00  =3      BYTE      cmd;                          /* The command */
35544  00  =3      BYTE      supportedScenes;              /**/
35545  00  =3      BYTE      properties1;                  /* masked byte */
35546  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup1;                /**/
35547  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup2;                /**/
35548  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup3;                /**/
35549  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_VG variantgroup4;                /**/
35550  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V2_FRAME;
35551  00  =3  
35552  00  =3  /************************************************************/
35553  00  =3  /* Central Scene Notification V2 command class structs */   
35554  00  =3  /************************************************************/
35555  00  =3  typedef struct _ZW_CENTRAL_SCENE_NOTIFICATION_V2_FRAME_
35556  00  =3  {
35557  00  =3      BYTE      cmdClass;                     /* The command class */
35558  00  =3      BYTE      cmd;                          /* The command */
35559  00  =3      BYTE      sequenceNumber;               /**/
35560  00  =3      BYTE      properties1;                  /* masked byte */
35561  00  =3      BYTE      sceneNumber;                  /**/
35562  00  =3  } ZW_CENTRAL_SCENE_NOTIFICATION_V2_FRAME;
35563  00  =3  
35564  00  =3  /************************************************************/
35565  00  =3  /* Central Scene Supported Get V3 command class structs */  
35566  00  =3  /************************************************************/
35567  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_GET_V3_FRAME_
35568  00  =3  {
35569  00  =3      BYTE      cmdClass;                     /* The command class */
35570  00  =3      BYTE      cmd;                          /* The command */
35571  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_GET_V3_FRAME;
35572  00  =3  
35573  00  =3  /************************************************************/
35574  00  =3  /* Central Scene Supported Report V3 variant group structs */
35575  00  =3  /************************************************************/
35576  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V3_VG_
35577  00  =3  {
35578  00  =3      BYTE      supportedKeyAttributesForScene1;
35579  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V3_VG;
35580  00  =3  
35581  00  =3  /************************************************************/
35582  00  =3  /* Central Scene Supported Report V3 variant group structs */
35583  00  =3  /************************************************************/
35584  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V3_VG_
35585  00  =3  {
35586  00  =3      BYTE      supportedKeyAttributesForScene1;/* MSB */
35587  00  =3      BYTE      supportedKeyAttributesForScene2;/* LSB */
35588  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V3_VG;
35589  00  =3  
35590  00  =3  /************************************************************/
35591  00  =3  /* Central Scene Supported Report V3 variant group structs */
35592  00  =3  /************************************************************/
35593  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V3_VG_
35594  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 591 

35595  00  =3      BYTE      supportedKeyAttributesForScene1;/* MSB */
35596  00  =3      BYTE      supportedKeyAttributesForScene2;
35597  00  =3      BYTE      supportedKeyAttributesForScene3;/* LSB */
35598  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V3_VG;
35599  00  =3  
35600  00  =3  /************************************************************/
35601  00  =3  /* Central Scene Supported Report V3 variant group structs */
35602  00  =3  /************************************************************/
35603  00  =3  typedef struct _VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG_
35604  00  =3  {
35605  00  =3      BYTE      supportedKeyAttributesForScene1;/* MSB */
35606  00  =3      BYTE      supportedKeyAttributesForScene2;
35607  00  =3      BYTE      supportedKeyAttributesForScene3;
35608  00  =3      BYTE      supportedKeyAttributesForScene4;/* LSB */
35609  00  =3  } VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG;
35610  00  =3  
35611  00  =3  /************************************************************/
35612  00  =3  /* Central Scene Supported Report 1byte V3 command class structs */
35613  00  =3  /************************************************************/
35614  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V3_FRAME_
35615  00  =3  {
35616  00  =3      BYTE      cmdClass;                     /* The command class */
35617  00  =3      BYTE      cmd;                          /* The command */
35618  00  =3      BYTE      supportedScenes;              /**/
35619  00  =3      BYTE      properties1;                  /* masked byte */
35620  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup1;                /**/
35621  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_1BYTE_V3_FRAME;
35622  00  =3  
35623  00  =3  /************************************************************/
35624  00  =3  /* Central Scene Supported Report 2byte V3 command class structs */
35625  00  =3  /************************************************************/
35626  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V3_FRAME_
35627  00  =3  {
35628  00  =3      BYTE      cmdClass;                     /* The command class */
35629  00  =3      BYTE      cmd;                          /* The command */
35630  00  =3      BYTE      supportedScenes;              /**/
35631  00  =3      BYTE      properties1;                  /* masked byte */
35632  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup1;                /**/
35633  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup2;                /**/
35634  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_2BYTE_V3_FRAME;
35635  00  =3  
35636  00  =3  /************************************************************/
35637  00  =3  /* Central Scene Supported Report 3byte V3 command class structs */
35638  00  =3  /************************************************************/
35639  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V3_FRAME_
35640  00  =3  {
35641  00  =3      BYTE      cmdClass;                     /* The command class */
35642  00  =3      BYTE      cmd;                          /* The command */
35643  00  =3      BYTE      supportedScenes;              /**/
35644  00  =3      BYTE      properties1;                  /* masked byte */
35645  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup1;                /**/
35646  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup2;                /**/
35647  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup3;                /**/
35648  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_3BYTE_V3_FRAME;
35649  00  =3  
35650  00  =3  /************************************************************/
35651  00  =3  /* Central Scene Supported Report 4byte V3 command class structs */
35652  00  =3  /************************************************************/
35653  00  =3  typedef struct _ZW_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_FRAME_
35654  00  =3  {
35655  00  =3      BYTE      cmdClass;                     /* The command class */
35656  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 592 

35657  00  =3      BYTE      supportedScenes;              /**/
35658  00  =3      BYTE      properties1;                  /* masked byte */
35659  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup1;                /**/
35660  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup2;                /**/
35661  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup3;                /**/
35662  00  =3      VG_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_VG variantgroup4;                /**/
35663  00  =3  } ZW_CENTRAL_SCENE_SUPPORTED_REPORT_4BYTE_V3_FRAME;
35664  00  =3  
35665  00  =3  /************************************************************/
35666  00  =3  /* Central Scene Notification V3 command class structs */   
35667  00  =3  /************************************************************/
35668  00  =3  typedef struct _ZW_CENTRAL_SCENE_NOTIFICATION_V3_FRAME_
35669  00  =3  {
35670  00  =3      BYTE      cmdClass;                     /* The command class */
35671  00  =3      BYTE      cmd;                          /* The command */
35672  00  =3      BYTE      sequenceNumber;               /**/
35673  00  =3      BYTE      properties1;                  /* masked byte */
35674  00  =3      BYTE      sceneNumber;                  /**/
35675  00  =3  } ZW_CENTRAL_SCENE_NOTIFICATION_V3_FRAME;
35676  00  =3  
35677  00  =3  /************************************************************/
35678  00  =3  /* Central Scene Configuration Set V3 command class structs */
35679  00  =3  /************************************************************/
35680  00  =3  typedef struct _ZW_CENTRAL_SCENE_CONFIGURATION_SET_V3_FRAME_
35681  00  =3  {
35682  00  =3      BYTE      cmdClass;                     /* The command class */
35683  00  =3      BYTE      cmd;                          /* The command */
35684  00  =3      BYTE      properties1;                  /* masked byte */
35685  00  =3  } ZW_CENTRAL_SCENE_CONFIGURATION_SET_V3_FRAME;
35686  00  =3  
35687  00  =3  /************************************************************/
35688  00  =3  /* Central Scene Configuration Get V3 command class structs */
35689  00  =3  /************************************************************/
35690  00  =3  typedef struct _ZW_CENTRAL_SCENE_CONFIGURATION_GET_V3_FRAME_
35691  00  =3  {
35692  00  =3      BYTE      cmdClass;                     /* The command class */
35693  00  =3      BYTE      cmd;                          /* The command */
35694  00  =3  } ZW_CENTRAL_SCENE_CONFIGURATION_GET_V3_FRAME;
35695  00  =3  
35696  00  =3  /************************************************************/
35697  00  =3  /* Central Scene Configuration Report V3 command class structs */
35698  00  =3  /************************************************************/
35699  00  =3  typedef struct _ZW_CENTRAL_SCENE_CONFIGURATION_REPORT_V3_FRAME_
35700  00  =3  {
35701  00  =3      BYTE      cmdClass;                     /* The command class */
35702  00  =3      BYTE      cmd;                          /* The command */
35703  00  =3      BYTE      properties1;                  /* masked byte */
35704  00  =3  } ZW_CENTRAL_SCENE_CONFIGURATION_REPORT_V3_FRAME;
35705  00  =3  
35706  00  =3  /************************************************************/
35707  00  =3  /* Ip Association Set command class structs */              
35708  00  =3  /************************************************************/
35709  00  =3  typedef struct _ZW_IP_ASSOCIATION_SET_FRAME_
35710  00  =3  {
35711  00  =3      BYTE      cmdClass;                     /* The command class */
35712  00  =3      BYTE      cmd;                          /* The command */
35713  00  =3      BYTE      groupingIdentifier;           /**/
35714  00  =3      BYTE      ipv6Address1;                 /* MSB */
35715  00  =3      BYTE      ipv6Address2;                 
35716  00  =3      BYTE      ipv6Address3;                 
35717  00  =3      BYTE      ipv6Address4;                 
35718  00  =3      BYTE      ipv6Address5;                 
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 593 

35719  00  =3      BYTE      ipv6Address6;                 
35720  00  =3      BYTE      ipv6Address7;                 
35721  00  =3      BYTE      ipv6Address8;                 
35722  00  =3      BYTE      ipv6Address9;                 
35723  00  =3      BYTE      ipv6Address10;                
35724  00  =3      BYTE      ipv6Address11;                
35725  00  =3      BYTE      ipv6Address12;                
35726  00  =3      BYTE      ipv6Address13;                
35727  00  =3      BYTE      ipv6Address14;                
35728  00  =3      BYTE      ipv6Address15;                
35729  00  =3      BYTE      ipv6Address16;                /* LSB */
35730  00  =3      BYTE      endPoint;                     /**/
35731  00  =3  } ZW_IP_ASSOCIATION_SET_FRAME;
35732  00  =3  
35733  00  =3  /************************************************************/
35734  00  =3  /* Ip Association Get command class structs */              
35735  00  =3  /************************************************************/
35736  00  =3  typedef struct _ZW_IP_ASSOCIATION_GET_FRAME_
35737  00  =3  {
35738  00  =3      BYTE      cmdClass;                     /* The command class */
35739  00  =3      BYTE      cmd;                          /* The command */
35740  00  =3      BYTE      groupingIdentifier;           /**/
35741  00  =3      BYTE      index;                        /**/
35742  00  =3  } ZW_IP_ASSOCIATION_GET_FRAME;
35743  00  =3  
35744  00  =3  /************************************************************/
35745  00  =3  /* Ip Association Report command class structs */           
35746  00  =3  /************************************************************/
35747  00  =3  typedef struct _ZW_IP_ASSOCIATION_REPORT_FRAME_
35748  00  =3  {
35749  00  =3      BYTE      cmdClass;                     /* The command class */
35750  00  =3      BYTE      cmd;                          /* The command */
35751  00  =3      BYTE      groupingIdentifier;           /**/
35752  00  =3      BYTE      index;                        /**/
35753  00  =3      BYTE      actualNodes;                  /**/
35754  00  =3      BYTE      ipv6Address1;                 /* MSB */
35755  00  =3      BYTE      ipv6Address2;                 
35756  00  =3      BYTE      ipv6Address3;                 
35757  00  =3      BYTE      ipv6Address4;                 
35758  00  =3      BYTE      ipv6Address5;                 
35759  00  =3      BYTE      ipv6Address6;                 
35760  00  =3      BYTE      ipv6Address7;                 
35761  00  =3      BYTE      ipv6Address8;                 
35762  00  =3      BYTE      ipv6Address9;                 
35763  00  =3      BYTE      ipv6Address10;                
35764  00  =3      BYTE      ipv6Address11;                
35765  00  =3      BYTE      ipv6Address12;                
35766  00  =3      BYTE      ipv6Address13;                
35767  00  =3      BYTE      ipv6Address14;                
35768  00  =3      BYTE      ipv6Address15;                
35769  00  =3      BYTE      ipv6Address16;                /* LSB */
35770  00  =3      BYTE      endPoint;                     /**/
35771  00  =3  } ZW_IP_ASSOCIATION_REPORT_FRAME;
35772  00  =3  
35773  00  =3  /************************************************************/
35774  00  =3  /* Ip Association Remove command class structs */           
35775  00  =3  /************************************************************/
35776  00  =3  typedef struct _ZW_IP_ASSOCIATION_REMOVE_FRAME_
35777  00  =3  {
35778  00  =3      BYTE      cmdClass;                     /* The command class */
35779  00  =3      BYTE      cmd;                          /* The command */
35780  00  =3      BYTE      groupingIdentifier;           /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 594 

35781  00  =3      BYTE      ipv6Address1;                 /* MSB */
35782  00  =3      BYTE      ipv6Address2;                 
35783  00  =3      BYTE      ipv6Address3;                 
35784  00  =3      BYTE      ipv6Address4;                 
35785  00  =3      BYTE      ipv6Address5;                 
35786  00  =3      BYTE      ipv6Address6;                 
35787  00  =3      BYTE      ipv6Address7;                 
35788  00  =3      BYTE      ipv6Address8;                 
35789  00  =3      BYTE      ipv6Address9;                 
35790  00  =3      BYTE      ipv6Address10;                
35791  00  =3      BYTE      ipv6Address11;                
35792  00  =3      BYTE      ipv6Address12;                
35793  00  =3      BYTE      ipv6Address13;                
35794  00  =3      BYTE      ipv6Address14;                
35795  00  =3      BYTE      ipv6Address15;                
35796  00  =3      BYTE      ipv6Address16;                /* LSB */
35797  00  =3      BYTE      endPoint;                     /**/
35798  00  =3  } ZW_IP_ASSOCIATION_REMOVE_FRAME;
35799  00  =3  
35800  00  =3  /************************************************************/
35801  00  =3  /* Antitheft Set 1byte command class structs */             
35802  00  =3  /************************************************************/
35803  00  =3  typedef struct _ZW_ANTITHEFT_SET_1BYTE_FRAME_
35804  00  =3  {
35805  00  =3      BYTE      cmdClass;                     /* The command class */
35806  00  =3      BYTE      cmd;                          /* The command */
35807  00  =3      BYTE      properties1;                  /* masked byte */
35808  00  =3      BYTE      magicCode1;                   
35809  00  =3      BYTE      manufacturerId1;              /* MSB */
35810  00  =3      BYTE      manufacturerId2;              /* LSB */
35811  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35812  00  =3      BYTE      antiTheftHintByte1;           
35813  00  =3  } ZW_ANTITHEFT_SET_1BYTE_FRAME;
35814  00  =3  
35815  00  =3  /************************************************************/
35816  00  =3  /* Antitheft Set 2byte command class structs */             
35817  00  =3  /************************************************************/
35818  00  =3  typedef struct _ZW_ANTITHEFT_SET_2BYTE_FRAME_
35819  00  =3  {
35820  00  =3      BYTE      cmdClass;                     /* The command class */
35821  00  =3      BYTE      cmd;                          /* The command */
35822  00  =3      BYTE      properties1;                  /* masked byte */
35823  00  =3      BYTE      magicCode1;                   /* MSB */
35824  00  =3      BYTE      magicCode2;                   /* LSB */
35825  00  =3      BYTE      manufacturerId1;              /* MSB */
35826  00  =3      BYTE      manufacturerId2;              /* LSB */
35827  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35828  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35829  00  =3      BYTE      antiTheftHintByte2;           /* LSB */
35830  00  =3  } ZW_ANTITHEFT_SET_2BYTE_FRAME;
35831  00  =3  
35832  00  =3  /************************************************************/
35833  00  =3  /* Antitheft Set 3byte command class structs */             
35834  00  =3  /************************************************************/
35835  00  =3  typedef struct _ZW_ANTITHEFT_SET_3BYTE_FRAME_
35836  00  =3  {
35837  00  =3      BYTE      cmdClass;                     /* The command class */
35838  00  =3      BYTE      cmd;                          /* The command */
35839  00  =3      BYTE      properties1;                  /* masked byte */
35840  00  =3      BYTE      magicCode1;                   /* MSB */
35841  00  =3      BYTE      magicCode2;                   
35842  00  =3      BYTE      magicCode3;                   /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 595 

35843  00  =3      BYTE      manufacturerId1;              /* MSB */
35844  00  =3      BYTE      manufacturerId2;              /* LSB */
35845  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35846  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35847  00  =3      BYTE      antiTheftHintByte2;           
35848  00  =3      BYTE      antiTheftHintByte3;           /* LSB */
35849  00  =3  } ZW_ANTITHEFT_SET_3BYTE_FRAME;
35850  00  =3  
35851  00  =3  /************************************************************/
35852  00  =3  /* Antitheft Set 4byte command class structs */             
35853  00  =3  /************************************************************/
35854  00  =3  typedef struct _ZW_ANTITHEFT_SET_4BYTE_FRAME_
35855  00  =3  {
35856  00  =3      BYTE      cmdClass;                     /* The command class */
35857  00  =3      BYTE      cmd;                          /* The command */
35858  00  =3      BYTE      properties1;                  /* masked byte */
35859  00  =3      BYTE      magicCode1;                   /* MSB */
35860  00  =3      BYTE      magicCode2;                   
35861  00  =3      BYTE      magicCode3;                   
35862  00  =3      BYTE      magicCode4;                   /* LSB */
35863  00  =3      BYTE      manufacturerId1;              /* MSB */
35864  00  =3      BYTE      manufacturerId2;              /* LSB */
35865  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35866  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35867  00  =3      BYTE      antiTheftHintByte2;           
35868  00  =3      BYTE      antiTheftHintByte3;           
35869  00  =3      BYTE      antiTheftHintByte4;           /* LSB */
35870  00  =3  } ZW_ANTITHEFT_SET_4BYTE_FRAME;
35871  00  =3  
35872  00  =3  /************************************************************/
35873  00  =3  /* Antitheft Get command class structs */                   
35874  00  =3  /************************************************************/
35875  00  =3  typedef struct _ZW_ANTITHEFT_GET_FRAME_
35876  00  =3  {
35877  00  =3      BYTE      cmdClass;                     /* The command class */
35878  00  =3      BYTE      cmd;                          /* The command */
35879  00  =3  } ZW_ANTITHEFT_GET_FRAME;
35880  00  =3  
35881  00  =3  /************************************************************/
35882  00  =3  /* Antitheft Report 1byte command class structs */          
35883  00  =3  /************************************************************/
35884  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_1BYTE_FRAME_
35885  00  =3  {
35886  00  =3      BYTE      cmdClass;                     /* The command class */
35887  00  =3      BYTE      cmd;                          /* The command */
35888  00  =3      BYTE      antiTheftProtectionStatus;    /**/
35889  00  =3      BYTE      manufacturerId1;              /* MSB */
35890  00  =3      BYTE      manufacturerId2;              /* LSB */
35891  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35892  00  =3      BYTE      antiTheftHintByte1;           
35893  00  =3  } ZW_ANTITHEFT_REPORT_1BYTE_FRAME;
35894  00  =3  
35895  00  =3  /************************************************************/
35896  00  =3  /* Antitheft Report 2byte command class structs */          
35897  00  =3  /************************************************************/
35898  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_2BYTE_FRAME_
35899  00  =3  {
35900  00  =3      BYTE      cmdClass;                     /* The command class */
35901  00  =3      BYTE      cmd;                          /* The command */
35902  00  =3      BYTE      antiTheftProtectionStatus;    /**/
35903  00  =3      BYTE      manufacturerId1;              /* MSB */
35904  00  =3      BYTE      manufacturerId2;              /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 596 

35905  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35906  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35907  00  =3      BYTE      antiTheftHintByte2;           /* LSB */
35908  00  =3  } ZW_ANTITHEFT_REPORT_2BYTE_FRAME;
35909  00  =3  
35910  00  =3  /************************************************************/
35911  00  =3  /* Antitheft Report 3byte command class structs */          
35912  00  =3  /************************************************************/
35913  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_3BYTE_FRAME_
35914  00  =3  {
35915  00  =3      BYTE      cmdClass;                     /* The command class */
35916  00  =3      BYTE      cmd;                          /* The command */
35917  00  =3      BYTE      antiTheftProtectionStatus;    /**/
35918  00  =3      BYTE      manufacturerId1;              /* MSB */
35919  00  =3      BYTE      manufacturerId2;              /* LSB */
35920  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35921  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35922  00  =3      BYTE      antiTheftHintByte2;           
35923  00  =3      BYTE      antiTheftHintByte3;           /* LSB */
35924  00  =3  } ZW_ANTITHEFT_REPORT_3BYTE_FRAME;
35925  00  =3  
35926  00  =3  /************************************************************/
35927  00  =3  /* Antitheft Report 4byte command class structs */          
35928  00  =3  /************************************************************/
35929  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_4BYTE_FRAME_
35930  00  =3  {
35931  00  =3      BYTE      cmdClass;                     /* The command class */
35932  00  =3      BYTE      cmd;                          /* The command */
35933  00  =3      BYTE      antiTheftProtectionStatus;    /**/
35934  00  =3      BYTE      manufacturerId1;              /* MSB */
35935  00  =3      BYTE      manufacturerId2;              /* LSB */
35936  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35937  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35938  00  =3      BYTE      antiTheftHintByte2;           
35939  00  =3      BYTE      antiTheftHintByte3;           
35940  00  =3      BYTE      antiTheftHintByte4;           /* LSB */
35941  00  =3  } ZW_ANTITHEFT_REPORT_4BYTE_FRAME;
35942  00  =3  
35943  00  =3  /************************************************************/
35944  00  =3  /* Antitheft Set 1byte V2 command class structs */          
35945  00  =3  /************************************************************/
35946  00  =3  typedef struct _ZW_ANTITHEFT_SET_1BYTE_V2_FRAME_
35947  00  =3  {
35948  00  =3      BYTE      cmdClass;                     /* The command class */
35949  00  =3      BYTE      cmd;                          /* The command */
35950  00  =3      BYTE      properties1;                  /* masked byte */
35951  00  =3      BYTE      magicCode1;                   
35952  00  =3      BYTE      manufacturerId1;              /* MSB */
35953  00  =3      BYTE      manufacturerId2;              /* LSB */
35954  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35955  00  =3      BYTE      antiTheftHintByte1;           
35956  00  =3  } ZW_ANTITHEFT_SET_1BYTE_V2_FRAME;
35957  00  =3  
35958  00  =3  /************************************************************/
35959  00  =3  /* Antitheft Set 2byte V2 command class structs */          
35960  00  =3  /************************************************************/
35961  00  =3  typedef struct _ZW_ANTITHEFT_SET_2BYTE_V2_FRAME_
35962  00  =3  {
35963  00  =3      BYTE      cmdClass;                     /* The command class */
35964  00  =3      BYTE      cmd;                          /* The command */
35965  00  =3      BYTE      properties1;                  /* masked byte */
35966  00  =3      BYTE      magicCode1;                   /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 597 

35967  00  =3      BYTE      magicCode2;                   /* LSB */
35968  00  =3      BYTE      manufacturerId1;              /* MSB */
35969  00  =3      BYTE      manufacturerId2;              /* LSB */
35970  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35971  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35972  00  =3      BYTE      antiTheftHintByte2;           /* LSB */
35973  00  =3  } ZW_ANTITHEFT_SET_2BYTE_V2_FRAME;
35974  00  =3  
35975  00  =3  /************************************************************/
35976  00  =3  /* Antitheft Set 3byte V2 command class structs */          
35977  00  =3  /************************************************************/
35978  00  =3  typedef struct _ZW_ANTITHEFT_SET_3BYTE_V2_FRAME_
35979  00  =3  {
35980  00  =3      BYTE      cmdClass;                     /* The command class */
35981  00  =3      BYTE      cmd;                          /* The command */
35982  00  =3      BYTE      properties1;                  /* masked byte */
35983  00  =3      BYTE      magicCode1;                   /* MSB */
35984  00  =3      BYTE      magicCode2;                   
35985  00  =3      BYTE      magicCode3;                   /* LSB */
35986  00  =3      BYTE      manufacturerId1;              /* MSB */
35987  00  =3      BYTE      manufacturerId2;              /* LSB */
35988  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
35989  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
35990  00  =3      BYTE      antiTheftHintByte2;           
35991  00  =3      BYTE      antiTheftHintByte3;           /* LSB */
35992  00  =3  } ZW_ANTITHEFT_SET_3BYTE_V2_FRAME;
35993  00  =3  
35994  00  =3  /************************************************************/
35995  00  =3  /* Antitheft Set 4byte V2 command class structs */          
35996  00  =3  /************************************************************/
35997  00  =3  typedef struct _ZW_ANTITHEFT_SET_4BYTE_V2_FRAME_
35998  00  =3  {
35999  00  =3      BYTE      cmdClass;                     /* The command class */
36000  00  =3      BYTE      cmd;                          /* The command */
36001  00  =3      BYTE      properties1;                  /* masked byte */
36002  00  =3      BYTE      magicCode1;                   /* MSB */
36003  00  =3      BYTE      magicCode2;                   
36004  00  =3      BYTE      magicCode3;                   
36005  00  =3      BYTE      magicCode4;                   /* LSB */
36006  00  =3      BYTE      manufacturerId1;              /* MSB */
36007  00  =3      BYTE      manufacturerId2;              /* LSB */
36008  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
36009  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
36010  00  =3      BYTE      antiTheftHintByte2;           
36011  00  =3      BYTE      antiTheftHintByte3;           
36012  00  =3      BYTE      antiTheftHintByte4;           /* LSB */
36013  00  =3  } ZW_ANTITHEFT_SET_4BYTE_V2_FRAME;
36014  00  =3  
36015  00  =3  /************************************************************/
36016  00  =3  /* Antitheft Get V2 command class structs */                
36017  00  =3  /************************************************************/
36018  00  =3  typedef struct _ZW_ANTITHEFT_GET_V2_FRAME_
36019  00  =3  {
36020  00  =3      BYTE      cmdClass;                     /* The command class */
36021  00  =3      BYTE      cmd;                          /* The command */
36022  00  =3  } ZW_ANTITHEFT_GET_V2_FRAME;
36023  00  =3  
36024  00  =3  /************************************************************/
36025  00  =3  /* Antitheft Report 1byte V2 command class structs */       
36026  00  =3  /************************************************************/
36027  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_1BYTE_V2_FRAME_
36028  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 598 

36029  00  =3      BYTE      cmdClass;                     /* The command class */
36030  00  =3      BYTE      cmd;                          /* The command */
36031  00  =3      BYTE      antiTheftProtectionStatus;    /**/
36032  00  =3      BYTE      manufacturerId1;              /* MSB */
36033  00  =3      BYTE      manufacturerId2;              /* LSB */
36034  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
36035  00  =3      BYTE      antiTheftHintByte1;           
36036  00  =3  } ZW_ANTITHEFT_REPORT_1BYTE_V2_FRAME;
36037  00  =3  
36038  00  =3  /************************************************************/
36039  00  =3  /* Antitheft Report 2byte V2 command class structs */       
36040  00  =3  /************************************************************/
36041  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_2BYTE_V2_FRAME_
36042  00  =3  {
36043  00  =3      BYTE      cmdClass;                     /* The command class */
36044  00  =3      BYTE      cmd;                          /* The command */
36045  00  =3      BYTE      antiTheftProtectionStatus;    /**/
36046  00  =3      BYTE      manufacturerId1;              /* MSB */
36047  00  =3      BYTE      manufacturerId2;              /* LSB */
36048  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
36049  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
36050  00  =3      BYTE      antiTheftHintByte2;           /* LSB */
36051  00  =3  } ZW_ANTITHEFT_REPORT_2BYTE_V2_FRAME;
36052  00  =3  
36053  00  =3  /************************************************************/
36054  00  =3  /* Antitheft Report 3byte V2 command class structs */       
36055  00  =3  /************************************************************/
36056  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_3BYTE_V2_FRAME_
36057  00  =3  {
36058  00  =3      BYTE      cmdClass;                     /* The command class */
36059  00  =3      BYTE      cmd;                          /* The command */
36060  00  =3      BYTE      antiTheftProtectionStatus;    /**/
36061  00  =3      BYTE      manufacturerId1;              /* MSB */
36062  00  =3      BYTE      manufacturerId2;              /* LSB */
36063  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
36064  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
36065  00  =3      BYTE      antiTheftHintByte2;           
36066  00  =3      BYTE      antiTheftHintByte3;           /* LSB */
36067  00  =3  } ZW_ANTITHEFT_REPORT_3BYTE_V2_FRAME;
36068  00  =3  
36069  00  =3  /************************************************************/
36070  00  =3  /* Antitheft Report 4byte V2 command class structs */       
36071  00  =3  /************************************************************/
36072  00  =3  typedef struct _ZW_ANTITHEFT_REPORT_4BYTE_V2_FRAME_
36073  00  =3  {
36074  00  =3      BYTE      cmdClass;                     /* The command class */
36075  00  =3      BYTE      cmd;                          /* The command */
36076  00  =3      BYTE      antiTheftProtectionStatus;    /**/
36077  00  =3      BYTE      manufacturerId1;              /* MSB */
36078  00  =3      BYTE      manufacturerId2;              /* LSB */
36079  00  =3      BYTE      antiTheftHintNumberBytes;     /**/
36080  00  =3      BYTE      antiTheftHintByte1;           /* MSB */
36081  00  =3      BYTE      antiTheftHintByte2;           
36082  00  =3      BYTE      antiTheftHintByte3;           
36083  00  =3      BYTE      antiTheftHintByte4;           /* LSB */
36084  00  =3  } ZW_ANTITHEFT_REPORT_4BYTE_V2_FRAME;
36085  00  =3  
36086  00  =3  /************************************************************/
36087  00  =3  /* Zwaveplus Info Get command class structs */              
36088  00  =3  /************************************************************/
36089  00  =3  typedef struct _ZW_ZWAVEPLUS_INFO_GET_FRAME_
36090  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 599 

36091  00  =3      BYTE      cmdClass;                     /* The command class */
36092  00  =3      BYTE      cmd;                          /* The command */
36093  00  =3  } ZW_ZWAVEPLUS_INFO_GET_FRAME;
36094  00  =3  
36095  00  =3  /************************************************************/
36096  00  =3  /* Zwaveplus Info Report command class structs */           
36097  00  =3  /************************************************************/
36098  00  =3  typedef struct _ZW_ZWAVEPLUS_INFO_REPORT_FRAME_
36099  00  =3  {
36100  00  =3      BYTE      cmdClass;                     /* The command class */
36101  00  =3      BYTE      cmd;                          /* The command */
36102  00  =3      BYTE      zWaveVersion;                 /**/
36103  00  =3      BYTE      roleType;                     /**/
36104  00  =3      BYTE      nodeType;                     /**/
36105  00  =3  } ZW_ZWAVEPLUS_INFO_REPORT_FRAME;
36106  00  =3  
36107  00  =3  /************************************************************/
36108  00  =3  /* Zwaveplus Info Get V2 command class structs */           
36109  00  =3  /************************************************************/
36110  00  =3  typedef struct _ZW_ZWAVEPLUS_INFO_GET_V2_FRAME_
36111  00  =3  {
36112  00  =3      BYTE      cmdClass;                     /* The command class */
36113  00  =3      BYTE      cmd;                          /* The command */
36114  00  =3  } ZW_ZWAVEPLUS_INFO_GET_V2_FRAME;
36115  00  =3  
36116  00  =3  /************************************************************/
36117  00  =3  /* Zwaveplus Info Report V2 command class structs */        
36118  00  =3  /************************************************************/
36119  00  =3  typedef struct _ZW_ZWAVEPLUS_INFO_REPORT_V2_FRAME_
36120  00  =3  {
36121  00  =3      BYTE      cmdClass;                     /* The command class */
36122  00  =3      BYTE      cmd;                          /* The command */
36123  00  =3      BYTE      zWaveVersion;                 /**/
36124  00  =3      BYTE      roleType;                     /**/
36125  00  =3      BYTE      nodeType;                     /**/
36126  00  =3      BYTE      installerIconType1;           /* MSB */
36127  00  =3      BYTE      installerIconType2;           /* LSB */
36128  00  =3      BYTE      userIconType1;                /* MSB */
36129  00  =3      BYTE      userIconType2;                /* LSB */
36130  00  =3  } ZW_ZWAVEPLUS_INFO_REPORT_V2_FRAME;
36131  00  =3  
36132  00  =3  /************************************************************/
36133  00  =3  /* Gateway Mode Set command class structs */                
36134  00  =3  /************************************************************/
36135  00  =3  typedef struct _ZW_GATEWAY_MODE_SET_FRAME_
36136  00  =3  {
36137  00  =3      BYTE      cmdClass;                     /* The command class */
36138  00  =3      BYTE      cmd;                          /* The command */
36139  00  =3      BYTE      mode;                         /**/
36140  00  =3  } ZW_GATEWAY_MODE_SET_FRAME;
36141  00  =3  
36142  00  =3  /************************************************************/
36143  00  =3  /* Gateway Mode Get command class structs */                
36144  00  =3  /************************************************************/
36145  00  =3  typedef struct _ZW_GATEWAY_MODE_GET_FRAME_
36146  00  =3  {
36147  00  =3      BYTE      cmdClass;                     /* The command class */
36148  00  =3      BYTE      cmd;                          /* The command */
36149  00  =3  } ZW_GATEWAY_MODE_GET_FRAME;
36150  00  =3  
36151  00  =3  /************************************************************/
36152  00  =3  /* Gateway Mode Report command class structs */             
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 600 

36153  00  =3  /************************************************************/
36154  00  =3  typedef struct _ZW_GATEWAY_MODE_REPORT_FRAME_
36155  00  =3  {
36156  00  =3      BYTE      cmdClass;                     /* The command class */
36157  00  =3      BYTE      cmd;                          /* The command */
36158  00  =3      BYTE      mode;                         /**/
36159  00  =3  } ZW_GATEWAY_MODE_REPORT_FRAME;
36160  00  =3  
36161  00  =3  /************************************************************/
36162  00  =3  /* Gateway Peer Set 1byte command class structs */          
36163  00  =3  /************************************************************/
36164  00  =3  typedef struct _ZW_GATEWAY_PEER_SET_1BYTE_FRAME_
36165  00  =3  {
36166  00  =3      BYTE      cmdClass;                     /* The command class */
36167  00  =3      BYTE      cmd;                          /* The command */
36168  00  =3      BYTE      peerProfile;                  /**/
36169  00  =3      BYTE      ipv6Address1;                 /* MSB */
36170  00  =3      BYTE      ipv6Address2;                 
36171  00  =3      BYTE      ipv6Address3;                 
36172  00  =3      BYTE      ipv6Address4;                 
36173  00  =3      BYTE      ipv6Address5;                 
36174  00  =3      BYTE      ipv6Address6;                 
36175  00  =3      BYTE      ipv6Address7;                 
36176  00  =3      BYTE      ipv6Address8;                 
36177  00  =3      BYTE      ipv6Address9;                 
36178  00  =3      BYTE      ipv6Address10;                
36179  00  =3      BYTE      ipv6Address11;                
36180  00  =3      BYTE      ipv6Address12;                
36181  00  =3      BYTE      ipv6Address13;                
36182  00  =3      BYTE      ipv6Address14;                
36183  00  =3      BYTE      ipv6Address15;                
36184  00  =3      BYTE      ipv6Address16;                /* LSB */
36185  00  =3      BYTE      port1;                        /* MSB */
36186  00  =3      BYTE      port2;                        /* LSB */
36187  00  =3      BYTE      properties1;                  /* masked byte */
36188  00  =3      BYTE      peerName1;                    
36189  00  =3  } ZW_GATEWAY_PEER_SET_1BYTE_FRAME;
36190  00  =3  
36191  00  =3  /************************************************************/
36192  00  =3  /* Gateway Peer Set 2byte command class structs */          
36193  00  =3  /************************************************************/
36194  00  =3  typedef struct _ZW_GATEWAY_PEER_SET_2BYTE_FRAME_
36195  00  =3  {
36196  00  =3      BYTE      cmdClass;                     /* The command class */
36197  00  =3      BYTE      cmd;                          /* The command */
36198  00  =3      BYTE      peerProfile;                  /**/
36199  00  =3      BYTE      ipv6Address1;                 /* MSB */
36200  00  =3      BYTE      ipv6Address2;                 
36201  00  =3      BYTE      ipv6Address3;                 
36202  00  =3      BYTE      ipv6Address4;                 
36203  00  =3      BYTE      ipv6Address5;                 
36204  00  =3      BYTE      ipv6Address6;                 
36205  00  =3      BYTE      ipv6Address7;                 
36206  00  =3      BYTE      ipv6Address8;                 
36207  00  =3      BYTE      ipv6Address9;                 
36208  00  =3      BYTE      ipv6Address10;                
36209  00  =3      BYTE      ipv6Address11;                
36210  00  =3      BYTE      ipv6Address12;                
36211  00  =3      BYTE      ipv6Address13;                
36212  00  =3      BYTE      ipv6Address14;                
36213  00  =3      BYTE      ipv6Address15;                
36214  00  =3      BYTE      ipv6Address16;                /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 601 

36215  00  =3      BYTE      port1;                        /* MSB */
36216  00  =3      BYTE      port2;                        /* LSB */
36217  00  =3      BYTE      properties1;                  /* masked byte */
36218  00  =3      BYTE      peerName1;                    /* MSB */
36219  00  =3      BYTE      peerName2;                    /* LSB */
36220  00  =3  } ZW_GATEWAY_PEER_SET_2BYTE_FRAME;
36221  00  =3  
36222  00  =3  /************************************************************/
36223  00  =3  /* Gateway Peer Set 3byte command class structs */          
36224  00  =3  /************************************************************/
36225  00  =3  typedef struct _ZW_GATEWAY_PEER_SET_3BYTE_FRAME_
36226  00  =3  {
36227  00  =3      BYTE      cmdClass;                     /* The command class */
36228  00  =3      BYTE      cmd;                          /* The command */
36229  00  =3      BYTE      peerProfile;                  /**/
36230  00  =3      BYTE      ipv6Address1;                 /* MSB */
36231  00  =3      BYTE      ipv6Address2;                 
36232  00  =3      BYTE      ipv6Address3;                 
36233  00  =3      BYTE      ipv6Address4;                 
36234  00  =3      BYTE      ipv6Address5;                 
36235  00  =3      BYTE      ipv6Address6;                 
36236  00  =3      BYTE      ipv6Address7;                 
36237  00  =3      BYTE      ipv6Address8;                 
36238  00  =3      BYTE      ipv6Address9;                 
36239  00  =3      BYTE      ipv6Address10;                
36240  00  =3      BYTE      ipv6Address11;                
36241  00  =3      BYTE      ipv6Address12;                
36242  00  =3      BYTE      ipv6Address13;                
36243  00  =3      BYTE      ipv6Address14;                
36244  00  =3      BYTE      ipv6Address15;                
36245  00  =3      BYTE      ipv6Address16;                /* LSB */
36246  00  =3      BYTE      port1;                        /* MSB */
36247  00  =3      BYTE      port2;                        /* LSB */
36248  00  =3      BYTE      properties1;                  /* masked byte */
36249  00  =3      BYTE      peerName1;                    /* MSB */
36250  00  =3      BYTE      peerName2;                    
36251  00  =3      BYTE      peerName3;                    /* LSB */
36252  00  =3  } ZW_GATEWAY_PEER_SET_3BYTE_FRAME;
36253  00  =3  
36254  00  =3  /************************************************************/
36255  00  =3  /* Gateway Peer Set 4byte command class structs */          
36256  00  =3  /************************************************************/
36257  00  =3  typedef struct _ZW_GATEWAY_PEER_SET_4BYTE_FRAME_
36258  00  =3  {
36259  00  =3      BYTE      cmdClass;                     /* The command class */
36260  00  =3      BYTE      cmd;                          /* The command */
36261  00  =3      BYTE      peerProfile;                  /**/
36262  00  =3      BYTE      ipv6Address1;                 /* MSB */
36263  00  =3      BYTE      ipv6Address2;                 
36264  00  =3      BYTE      ipv6Address3;                 
36265  00  =3      BYTE      ipv6Address4;                 
36266  00  =3      BYTE      ipv6Address5;                 
36267  00  =3      BYTE      ipv6Address6;                 
36268  00  =3      BYTE      ipv6Address7;                 
36269  00  =3      BYTE      ipv6Address8;                 
36270  00  =3      BYTE      ipv6Address9;                 
36271  00  =3      BYTE      ipv6Address10;                
36272  00  =3      BYTE      ipv6Address11;                
36273  00  =3      BYTE      ipv6Address12;                
36274  00  =3      BYTE      ipv6Address13;                
36275  00  =3      BYTE      ipv6Address14;                
36276  00  =3      BYTE      ipv6Address15;                
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 602 

36277  00  =3      BYTE      ipv6Address16;                /* LSB */
36278  00  =3      BYTE      port1;                        /* MSB */
36279  00  =3      BYTE      port2;                        /* LSB */
36280  00  =3      BYTE      properties1;                  /* masked byte */
36281  00  =3      BYTE      peerName1;                    /* MSB */
36282  00  =3      BYTE      peerName2;                    
36283  00  =3      BYTE      peerName3;                    
36284  00  =3      BYTE      peerName4;                    /* LSB */
36285  00  =3  } ZW_GATEWAY_PEER_SET_4BYTE_FRAME;
36286  00  =3  
36287  00  =3  /************************************************************/
36288  00  =3  /* Gateway Peer Get command class structs */                
36289  00  =3  /************************************************************/
36290  00  =3  typedef struct _ZW_GATEWAY_PEER_GET_FRAME_
36291  00  =3  {
36292  00  =3      BYTE      cmdClass;                     /* The command class */
36293  00  =3      BYTE      cmd;                          /* The command */
36294  00  =3      BYTE      peerProfile;                  /**/
36295  00  =3  } ZW_GATEWAY_PEER_GET_FRAME;
36296  00  =3  
36297  00  =3  /************************************************************/
36298  00  =3  /* Gateway Peer Report 1byte command class structs */       
36299  00  =3  /************************************************************/
36300  00  =3  typedef struct _ZW_GATEWAY_PEER_REPORT_1BYTE_FRAME_
36301  00  =3  {
36302  00  =3      BYTE      cmdClass;                     /* The command class */
36303  00  =3      BYTE      cmd;                          /* The command */
36304  00  =3      BYTE      peerProfile;                  /**/
36305  00  =3      BYTE      peerCount;                    /**/
36306  00  =3      BYTE      ipv6Address1;                 /* MSB */
36307  00  =3      BYTE      ipv6Address2;                 
36308  00  =3      BYTE      ipv6Address3;                 
36309  00  =3      BYTE      ipv6Address4;                 
36310  00  =3      BYTE      ipv6Address5;                 
36311  00  =3      BYTE      ipv6Address6;                 
36312  00  =3      BYTE      ipv6Address7;                 
36313  00  =3      BYTE      ipv6Address8;                 
36314  00  =3      BYTE      ipv6Address9;                 
36315  00  =3      BYTE      ipv6Address10;                
36316  00  =3      BYTE      ipv6Address11;                
36317  00  =3      BYTE      ipv6Address12;                
36318  00  =3      BYTE      ipv6Address13;                
36319  00  =3      BYTE      ipv6Address14;                
36320  00  =3      BYTE      ipv6Address15;                
36321  00  =3      BYTE      ipv6Address16;                /* LSB */
36322  00  =3      BYTE      port1;                        /* MSB */
36323  00  =3      BYTE      port2;                        /* LSB */
36324  00  =3      BYTE      properties1;                  /* masked byte */
36325  00  =3      BYTE      peerName1;                    
36326  00  =3  } ZW_GATEWAY_PEER_REPORT_1BYTE_FRAME;
36327  00  =3  
36328  00  =3  /************************************************************/
36329  00  =3  /* Gateway Peer Report 2byte command class structs */       
36330  00  =3  /************************************************************/
36331  00  =3  typedef struct _ZW_GATEWAY_PEER_REPORT_2BYTE_FRAME_
36332  00  =3  {
36333  00  =3      BYTE      cmdClass;                     /* The command class */
36334  00  =3      BYTE      cmd;                          /* The command */
36335  00  =3      BYTE      peerProfile;                  /**/
36336  00  =3      BYTE      peerCount;                    /**/
36337  00  =3      BYTE      ipv6Address1;                 /* MSB */
36338  00  =3      BYTE      ipv6Address2;                 
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 603 

36339  00  =3      BYTE      ipv6Address3;                 
36340  00  =3      BYTE      ipv6Address4;                 
36341  00  =3      BYTE      ipv6Address5;                 
36342  00  =3      BYTE      ipv6Address6;                 
36343  00  =3      BYTE      ipv6Address7;                 
36344  00  =3      BYTE      ipv6Address8;                 
36345  00  =3      BYTE      ipv6Address9;                 
36346  00  =3      BYTE      ipv6Address10;                
36347  00  =3      BYTE      ipv6Address11;                
36348  00  =3      BYTE      ipv6Address12;                
36349  00  =3      BYTE      ipv6Address13;                
36350  00  =3      BYTE      ipv6Address14;                
36351  00  =3      BYTE      ipv6Address15;                
36352  00  =3      BYTE      ipv6Address16;                /* LSB */
36353  00  =3      BYTE      port1;                        /* MSB */
36354  00  =3      BYTE      port2;                        /* LSB */
36355  00  =3      BYTE      properties1;                  /* masked byte */
36356  00  =3      BYTE      peerName1;                    /* MSB */
36357  00  =3      BYTE      peerName2;                    /* LSB */
36358  00  =3  } ZW_GATEWAY_PEER_REPORT_2BYTE_FRAME;
36359  00  =3  
36360  00  =3  /************************************************************/
36361  00  =3  /* Gateway Peer Report 3byte command class structs */       
36362  00  =3  /************************************************************/
36363  00  =3  typedef struct _ZW_GATEWAY_PEER_REPORT_3BYTE_FRAME_
36364  00  =3  {
36365  00  =3      BYTE      cmdClass;                     /* The command class */
36366  00  =3      BYTE      cmd;                          /* The command */
36367  00  =3      BYTE      peerProfile;                  /**/
36368  00  =3      BYTE      peerCount;                    /**/
36369  00  =3      BYTE      ipv6Address1;                 /* MSB */
36370  00  =3      BYTE      ipv6Address2;                 
36371  00  =3      BYTE      ipv6Address3;                 
36372  00  =3      BYTE      ipv6Address4;                 
36373  00  =3      BYTE      ipv6Address5;                 
36374  00  =3      BYTE      ipv6Address6;                 
36375  00  =3      BYTE      ipv6Address7;                 
36376  00  =3      BYTE      ipv6Address8;                 
36377  00  =3      BYTE      ipv6Address9;                 
36378  00  =3      BYTE      ipv6Address10;                
36379  00  =3      BYTE      ipv6Address11;                
36380  00  =3      BYTE      ipv6Address12;                
36381  00  =3      BYTE      ipv6Address13;                
36382  00  =3      BYTE      ipv6Address14;                
36383  00  =3      BYTE      ipv6Address15;                
36384  00  =3      BYTE      ipv6Address16;                /* LSB */
36385  00  =3      BYTE      port1;                        /* MSB */
36386  00  =3      BYTE      port2;                        /* LSB */
36387  00  =3      BYTE      properties1;                  /* masked byte */
36388  00  =3      BYTE      peerName1;                    /* MSB */
36389  00  =3      BYTE      peerName2;                    
36390  00  =3      BYTE      peerName3;                    /* LSB */
36391  00  =3  } ZW_GATEWAY_PEER_REPORT_3BYTE_FRAME;
36392  00  =3  
36393  00  =3  /************************************************************/
36394  00  =3  /* Gateway Peer Report 4byte command class structs */       
36395  00  =3  /************************************************************/
36396  00  =3  typedef struct _ZW_GATEWAY_PEER_REPORT_4BYTE_FRAME_
36397  00  =3  {
36398  00  =3      BYTE      cmdClass;                     /* The command class */
36399  00  =3      BYTE      cmd;                          /* The command */
36400  00  =3      BYTE      peerProfile;                  /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 604 

36401  00  =3      BYTE      peerCount;                    /**/
36402  00  =3      BYTE      ipv6Address1;                 /* MSB */
36403  00  =3      BYTE      ipv6Address2;                 
36404  00  =3      BYTE      ipv6Address3;                 
36405  00  =3      BYTE      ipv6Address4;                 
36406  00  =3      BYTE      ipv6Address5;                 
36407  00  =3      BYTE      ipv6Address6;                 
36408  00  =3      BYTE      ipv6Address7;                 
36409  00  =3      BYTE      ipv6Address8;                 
36410  00  =3      BYTE      ipv6Address9;                 
36411  00  =3      BYTE      ipv6Address10;                
36412  00  =3      BYTE      ipv6Address11;                
36413  00  =3      BYTE      ipv6Address12;                
36414  00  =3      BYTE      ipv6Address13;                
36415  00  =3      BYTE      ipv6Address14;                
36416  00  =3      BYTE      ipv6Address15;                
36417  00  =3      BYTE      ipv6Address16;                /* LSB */
36418  00  =3      BYTE      port1;                        /* MSB */
36419  00  =3      BYTE      port2;                        /* LSB */
36420  00  =3      BYTE      properties1;                  /* masked byte */
36421  00  =3      BYTE      peerName1;                    /* MSB */
36422  00  =3      BYTE      peerName2;                    
36423  00  =3      BYTE      peerName3;                    
36424  00  =3      BYTE      peerName4;                    /* LSB */
36425  00  =3  } ZW_GATEWAY_PEER_REPORT_4BYTE_FRAME;
36426  00  =3  
36427  00  =3  /************************************************************/
36428  00  =3  /* Gateway Lock Set command class structs */                
36429  00  =3  /************************************************************/
36430  00  =3  typedef struct _ZW_GATEWAY_LOCK_SET_FRAME_
36431  00  =3  {
36432  00  =3      BYTE      cmdClass;                     /* The command class */
36433  00  =3      BYTE      cmd;                          /* The command */
36434  00  =3      BYTE      properties1;                  /* masked byte */
36435  00  =3  } ZW_GATEWAY_LOCK_SET_FRAME;
36436  00  =3  
36437  00  =3  /************************************************************/
36438  00  =3  /* Unsolicited Destination Set command class structs */     
36439  00  =3  /************************************************************/
36440  00  =3  typedef struct _ZW_UNSOLICITED_DESTINATION_SET_FRAME_
36441  00  =3  {
36442  00  =3      BYTE      cmdClass;                     /* The command class */
36443  00  =3      BYTE      cmd;                          /* The command */
36444  00  =3      BYTE      unsolicitedIpv6Destination1;  /* MSB */
36445  00  =3      BYTE      unsolicitedIpv6Destination2;  
36446  00  =3      BYTE      unsolicitedIpv6Destination3;  
36447  00  =3      BYTE      unsolicitedIpv6Destination4;  
36448  00  =3      BYTE      unsolicitedIpv6Destination5;  
36449  00  =3      BYTE      unsolicitedIpv6Destination6;  
36450  00  =3      BYTE      unsolicitedIpv6Destination7;  
36451  00  =3      BYTE      unsolicitedIpv6Destination8;  
36452  00  =3      BYTE      unsolicitedIpv6Destination9;  
36453  00  =3      BYTE      unsolicitedIpv6Destination10; 
36454  00  =3      BYTE      unsolicitedIpv6Destination11; 
36455  00  =3      BYTE      unsolicitedIpv6Destination12; 
36456  00  =3      BYTE      unsolicitedIpv6Destination13; 
36457  00  =3      BYTE      unsolicitedIpv6Destination14; 
36458  00  =3      BYTE      unsolicitedIpv6Destination15; 
36459  00  =3      BYTE      unsolicitedIpv6Destination16; /* LSB */
36460  00  =3      BYTE      unsolicitedDestinationPort1;  /* MSB */
36461  00  =3      BYTE      unsolicitedDestinationPort2;  /* LSB */
36462  00  =3  } ZW_UNSOLICITED_DESTINATION_SET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 605 

36463  00  =3  
36464  00  =3  /************************************************************/
36465  00  =3  /* Unsolicited Destination Get command class structs */     
36466  00  =3  /************************************************************/
36467  00  =3  typedef struct _ZW_UNSOLICITED_DESTINATION_GET_FRAME_
36468  00  =3  {
36469  00  =3      BYTE      cmdClass;                     /* The command class */
36470  00  =3      BYTE      cmd;                          /* The command */
36471  00  =3  } ZW_UNSOLICITED_DESTINATION_GET_FRAME;
36472  00  =3  
36473  00  =3  /************************************************************/
36474  00  =3  /* Unsolicited Destination Report command class structs */  
36475  00  =3  /************************************************************/
36476  00  =3  typedef struct _ZW_UNSOLICITED_DESTINATION_REPORT_FRAME_
36477  00  =3  {
36478  00  =3      BYTE      cmdClass;                     /* The command class */
36479  00  =3      BYTE      cmd;                          /* The command */
36480  00  =3      BYTE      unsolicitedIpv6Destination1;  /* MSB */
36481  00  =3      BYTE      unsolicitedIpv6Destination2;  
36482  00  =3      BYTE      unsolicitedIpv6Destination3;  
36483  00  =3      BYTE      unsolicitedIpv6Destination4;  
36484  00  =3      BYTE      unsolicitedIpv6Destination5;  
36485  00  =3      BYTE      unsolicitedIpv6Destination6;  
36486  00  =3      BYTE      unsolicitedIpv6Destination7;  
36487  00  =3      BYTE      unsolicitedIpv6Destination8;  
36488  00  =3      BYTE      unsolicitedIpv6Destination9;  
36489  00  =3      BYTE      unsolicitedIpv6Destination10; 
36490  00  =3      BYTE      unsolicitedIpv6Destination11; 
36491  00  =3      BYTE      unsolicitedIpv6Destination12; 
36492  00  =3      BYTE      unsolicitedIpv6Destination13; 
36493  00  =3      BYTE      unsolicitedIpv6Destination14; 
36494  00  =3      BYTE      unsolicitedIpv6Destination15; 
36495  00  =3      BYTE      unsolicitedIpv6Destination16; /* LSB */
36496  00  =3      BYTE      unsolicitedDestinationPort1;  /* MSB */
36497  00  =3      BYTE      unsolicitedDestinationPort2;  /* LSB */
36498  00  =3  } ZW_UNSOLICITED_DESTINATION_REPORT_FRAME;
36499  00  =3  
36500  00  =3  /************************************************************/
36501  00  =3  /* Command Application Node Info Set 1byte command class structs */
36502  00  =3  /************************************************************/
36503  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_SET_1BYTE_FRAME_
36504  00  =3  {
36505  00  =3      BYTE      cmdClass;                     /* The command class */
36506  00  =3      BYTE      cmd;                          /* The command */
36507  00  =3      BYTE      nonSecureCommandClass1;       
36508  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36509  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36510  00  =3      BYTE      securityScheme0CommandClass1; 
36511  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_SET_1BYTE_FRAME;
36512  00  =3  
36513  00  =3  /************************************************************/
36514  00  =3  /* Command Application Node Info Set 2byte command class structs */
36515  00  =3  /************************************************************/
36516  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_SET_2BYTE_FRAME_
36517  00  =3  {
36518  00  =3      BYTE      cmdClass;                     /* The command class */
36519  00  =3      BYTE      cmd;                          /* The command */
36520  00  =3      BYTE      nonSecureCommandClass1;       /* MSB */
36521  00  =3      BYTE      nonSecureCommandClass2;       /* LSB */
36522  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36523  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36524  00  =3      BYTE      securityScheme0CommandClass1; /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 606 

36525  00  =3      BYTE      securityScheme0CommandClass2; /* LSB */
36526  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_SET_2BYTE_FRAME;
36527  00  =3  
36528  00  =3  /************************************************************/
36529  00  =3  /* Command Application Node Info Set 3byte command class structs */
36530  00  =3  /************************************************************/
36531  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_SET_3BYTE_FRAME_
36532  00  =3  {
36533  00  =3      BYTE      cmdClass;                     /* The command class */
36534  00  =3      BYTE      cmd;                          /* The command */
36535  00  =3      BYTE      nonSecureCommandClass1;       /* MSB */
36536  00  =3      BYTE      nonSecureCommandClass2;       
36537  00  =3      BYTE      nonSecureCommandClass3;       /* LSB */
36538  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36539  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36540  00  =3      BYTE      securityScheme0CommandClass1; /* MSB */
36541  00  =3      BYTE      securityScheme0CommandClass2; 
36542  00  =3      BYTE      securityScheme0CommandClass3; /* LSB */
36543  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_SET_3BYTE_FRAME;
36544  00  =3  
36545  00  =3  /************************************************************/
36546  00  =3  /* Command Application Node Info Set 4byte command class structs */
36547  00  =3  /************************************************************/
36548  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_SET_4BYTE_FRAME_
36549  00  =3  {
36550  00  =3      BYTE      cmdClass;                     /* The command class */
36551  00  =3      BYTE      cmd;                          /* The command */
36552  00  =3      BYTE      nonSecureCommandClass1;       /* MSB */
36553  00  =3      BYTE      nonSecureCommandClass2;       
36554  00  =3      BYTE      nonSecureCommandClass3;       
36555  00  =3      BYTE      nonSecureCommandClass4;       /* LSB */
36556  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36557  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36558  00  =3      BYTE      securityScheme0CommandClass1; /* MSB */
36559  00  =3      BYTE      securityScheme0CommandClass2; 
36560  00  =3      BYTE      securityScheme0CommandClass3; 
36561  00  =3      BYTE      securityScheme0CommandClass4; /* LSB */
36562  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_SET_4BYTE_FRAME;
36563  00  =3  
36564  00  =3  /************************************************************/
36565  00  =3  /* Command Application Node Info Get command class structs */
36566  00  =3  /************************************************************/
36567  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_GET_FRAME_
36568  00  =3  {
36569  00  =3      BYTE      cmdClass;                     /* The command class */
36570  00  =3      BYTE      cmd;                          /* The command */
36571  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_GET_FRAME;
36572  00  =3  
36573  00  =3  /************************************************************/
36574  00  =3  /* Command Application Node Info Report 1byte command class structs */
36575  00  =3  /************************************************************/
36576  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_1BYTE_FRAME_
36577  00  =3  {
36578  00  =3      BYTE      cmdClass;                     /* The command class */
36579  00  =3      BYTE      cmd;                          /* The command */
36580  00  =3      BYTE      nonSecureCommandClass1;       
36581  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36582  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36583  00  =3      BYTE      securityScheme0CommandClass1; 
36584  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_1BYTE_FRAME;
36585  00  =3  
36586  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 607 

36587  00  =3  /* Command Application Node Info Report 2byte command class structs */
36588  00  =3  /************************************************************/
36589  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_2BYTE_FRAME_
36590  00  =3  {
36591  00  =3      BYTE      cmdClass;                     /* The command class */
36592  00  =3      BYTE      cmd;                          /* The command */
36593  00  =3      BYTE      nonSecureCommandClass1;       /* MSB */
36594  00  =3      BYTE      nonSecureCommandClass2;       /* LSB */
36595  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36596  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36597  00  =3      BYTE      securityScheme0CommandClass1; /* MSB */
36598  00  =3      BYTE      securityScheme0CommandClass2; /* LSB */
36599  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_2BYTE_FRAME;
36600  00  =3  
36601  00  =3  /************************************************************/
36602  00  =3  /* Command Application Node Info Report 3byte command class structs */
36603  00  =3  /************************************************************/
36604  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_3BYTE_FRAME_
36605  00  =3  {
36606  00  =3      BYTE      cmdClass;                     /* The command class */
36607  00  =3      BYTE      cmd;                          /* The command */
36608  00  =3      BYTE      nonSecureCommandClass1;       /* MSB */
36609  00  =3      BYTE      nonSecureCommandClass2;       
36610  00  =3      BYTE      nonSecureCommandClass3;       /* LSB */
36611  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36612  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36613  00  =3      BYTE      securityScheme0CommandClass1; /* MSB */
36614  00  =3      BYTE      securityScheme0CommandClass2; 
36615  00  =3      BYTE      securityScheme0CommandClass3; /* LSB */
36616  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_3BYTE_FRAME;
36617  00  =3  
36618  00  =3  /************************************************************/
36619  00  =3  /* Command Application Node Info Report 4byte command class structs */
36620  00  =3  /************************************************************/
36621  00  =3  typedef struct _ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_4BYTE_FRAME_
36622  00  =3  {
36623  00  =3      BYTE      cmdClass;                     /* The command class */
36624  00  =3      BYTE      cmd;                          /* The command */
36625  00  =3      BYTE      nonSecureCommandClass1;       /* MSB */
36626  00  =3      BYTE      nonSecureCommandClass2;       
36627  00  =3      BYTE      nonSecureCommandClass3;       
36628  00  =3      BYTE      nonSecureCommandClass4;       /* LSB */
36629  00  =3      BYTE      securityScheme0Mark1;         /* MSB */
36630  00  =3      BYTE      securityScheme0Mark2;         /* LSB */
36631  00  =3      BYTE      securityScheme0CommandClass1; /* MSB */
36632  00  =3      BYTE      securityScheme0CommandClass2; 
36633  00  =3      BYTE      securityScheme0CommandClass3; 
36634  00  =3      BYTE      securityScheme0CommandClass4; /* LSB */
36635  00  =3  } ZW_COMMAND_APPLICATION_NODE_INFO_REPORT_4BYTE_FRAME;
36636  00  =3  
36637  00  =3  /************************************************************/
36638  00  =3  /* Gateway Configuration Set command class structs */       
36639  00  =3  /************************************************************/
36640  00  =3  typedef struct _ZW_GATEWAY_CONFIGURATION_SET_FRAME_
36641  00  =3  {
36642  00  =3      BYTE      cmdClass;                     /* The command class */
36643  00  =3      BYTE      cmd;                          /* The command */
36644  00  =3      BYTE      lanIpv6Address1;              /* MSB */
36645  00  =3      BYTE      lanIpv6Address2;              
36646  00  =3      BYTE      lanIpv6Address3;              
36647  00  =3      BYTE      lanIpv6Address4;              
36648  00  =3      BYTE      lanIpv6Address5;              
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 608 

36649  00  =3      BYTE      lanIpv6Address6;              
36650  00  =3      BYTE      lanIpv6Address7;              
36651  00  =3      BYTE      lanIpv6Address8;              
36652  00  =3      BYTE      lanIpv6Address9;              
36653  00  =3      BYTE      lanIpv6Address10;             
36654  00  =3      BYTE      lanIpv6Address11;             
36655  00  =3      BYTE      lanIpv6Address12;             
36656  00  =3      BYTE      lanIpv6Address13;             
36657  00  =3      BYTE      lanIpv6Address14;             
36658  00  =3      BYTE      lanIpv6Address15;             
36659  00  =3      BYTE      lanIpv6Address16;             /* LSB */
36660  00  =3      BYTE      lanIpv6PrefixLength;          /**/
36661  00  =3      BYTE      portalIpv6Prefix1;            /* MSB */
36662  00  =3      BYTE      portalIpv6Prefix2;            
36663  00  =3      BYTE      portalIpv6Prefix3;            
36664  00  =3      BYTE      portalIpv6Prefix4;            
36665  00  =3      BYTE      portalIpv6Prefix5;            
36666  00  =3      BYTE      portalIpv6Prefix6;            
36667  00  =3      BYTE      portalIpv6Prefix7;            
36668  00  =3      BYTE      portalIpv6Prefix8;            
36669  00  =3      BYTE      portalIpv6Prefix9;            
36670  00  =3      BYTE      portalIpv6Prefix10;           
36671  00  =3      BYTE      portalIpv6Prefix11;           
36672  00  =3      BYTE      portalIpv6Prefix12;           
36673  00  =3      BYTE      portalIpv6Prefix13;           
36674  00  =3      BYTE      portalIpv6Prefix14;           
36675  00  =3      BYTE      portalIpv6Prefix15;           
36676  00  =3      BYTE      portalIpv6Prefix16;           /* LSB */
36677  00  =3      BYTE      portalIpv6PrefixLength;       /**/
36678  00  =3      BYTE      defaultGatewayIpv6Address1;   /* MSB */
36679  00  =3      BYTE      defaultGatewayIpv6Address2;   
36680  00  =3      BYTE      defaultGatewayIpv6Address3;   
36681  00  =3      BYTE      defaultGatewayIpv6Address4;   
36682  00  =3      BYTE      defaultGatewayIpv6Address5;   
36683  00  =3      BYTE      defaultGatewayIpv6Address6;   
36684  00  =3      BYTE      defaultGatewayIpv6Address7;   
36685  00  =3      BYTE      defaultGatewayIpv6Address8;   
36686  00  =3      BYTE      defaultGatewayIpv6Address9;   
36687  00  =3      BYTE      defaultGatewayIpv6Address10;  
36688  00  =3      BYTE      defaultGatewayIpv6Address11;  
36689  00  =3      BYTE      defaultGatewayIpv6Address12;  
36690  00  =3      BYTE      defaultGatewayIpv6Address13;  
36691  00  =3      BYTE      defaultGatewayIpv6Address14;  
36692  00  =3      BYTE      defaultGatewayIpv6Address15;  
36693  00  =3      BYTE      defaultGatewayIpv6Address16;  /* LSB */
36694  00  =3      BYTE      panIpv6Prefix1;               /* MSB */
36695  00  =3      BYTE      panIpv6Prefix2;               
36696  00  =3      BYTE      panIpv6Prefix3;               
36697  00  =3      BYTE      panIpv6Prefix4;               
36698  00  =3      BYTE      panIpv6Prefix5;               
36699  00  =3      BYTE      panIpv6Prefix6;               
36700  00  =3      BYTE      panIpv6Prefix7;               
36701  00  =3      BYTE      panIpv6Prefix8;               
36702  00  =3      BYTE      panIpv6Prefix9;               
36703  00  =3      BYTE      panIpv6Prefix10;              
36704  00  =3      BYTE      panIpv6Prefix11;              
36705  00  =3      BYTE      panIpv6Prefix12;              
36706  00  =3      BYTE      panIpv6Prefix13;              
36707  00  =3      BYTE      panIpv6Prefix14;              
36708  00  =3      BYTE      panIpv6Prefix15;              
36709  00  =3      BYTE      panIpv6Prefix16;              /* LSB */
36710  00  =3  } ZW_GATEWAY_CONFIGURATION_SET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 609 

36711  00  =3  
36712  00  =3  /************************************************************/
36713  00  =3  /* Gateway Configuration Status command class structs */    
36714  00  =3  /************************************************************/
36715  00  =3  typedef struct _ZW_GATEWAY_CONFIGURATION_STATUS_FRAME_
36716  00  =3  {
36717  00  =3      BYTE      cmdClass;                     /* The command class */
36718  00  =3      BYTE      cmd;                          /* The command */
36719  00  =3      BYTE      status;                       /**/
36720  00  =3  } ZW_GATEWAY_CONFIGURATION_STATUS_FRAME;
36721  00  =3  
36722  00  =3  /************************************************************/
36723  00  =3  /* Gateway Configuration Get command class structs */       
36724  00  =3  /************************************************************/
36725  00  =3  typedef struct _ZW_GATEWAY_CONFIGURATION_GET_FRAME_
36726  00  =3  {
36727  00  =3      BYTE      cmdClass;                     /* The command class */
36728  00  =3      BYTE      cmd;                          /* The command */
36729  00  =3  } ZW_GATEWAY_CONFIGURATION_GET_FRAME;
36730  00  =3  
36731  00  =3  /************************************************************/
36732  00  =3  /* Gateway Configuration Report command class structs */    
36733  00  =3  /************************************************************/
36734  00  =3  typedef struct _ZW_GATEWAY_CONFIGURATION_REPORT_FRAME_
36735  00  =3  {
36736  00  =3      BYTE      cmdClass;                     /* The command class */
36737  00  =3      BYTE      cmd;                          /* The command */
36738  00  =3      BYTE      lanIpv6Address1;              /* MSB */
36739  00  =3      BYTE      lanIpv6Address2;              
36740  00  =3      BYTE      lanIpv6Address3;              
36741  00  =3      BYTE      lanIpv6Address4;              
36742  00  =3      BYTE      lanIpv6Address5;              
36743  00  =3      BYTE      lanIpv6Address6;              
36744  00  =3      BYTE      lanIpv6Address7;              
36745  00  =3      BYTE      lanIpv6Address8;              
36746  00  =3      BYTE      lanIpv6Address9;              
36747  00  =3      BYTE      lanIpv6Address10;             
36748  00  =3      BYTE      lanIpv6Address11;             
36749  00  =3      BYTE      lanIpv6Address12;             
36750  00  =3      BYTE      lanIpv6Address13;             
36751  00  =3      BYTE      lanIpv6Address14;             
36752  00  =3      BYTE      lanIpv6Address15;             
36753  00  =3      BYTE      lanIpv6Address16;             /* LSB */
36754  00  =3      BYTE      lanIpv6PrefixLength;          /**/
36755  00  =3      BYTE      portalIpv6Prefix1;            /* MSB */
36756  00  =3      BYTE      portalIpv6Prefix2;            
36757  00  =3      BYTE      portalIpv6Prefix3;            
36758  00  =3      BYTE      portalIpv6Prefix4;            
36759  00  =3      BYTE      portalIpv6Prefix5;            
36760  00  =3      BYTE      portalIpv6Prefix6;            
36761  00  =3      BYTE      portalIpv6Prefix7;            
36762  00  =3      BYTE      portalIpv6Prefix8;            
36763  00  =3      BYTE      portalIpv6Prefix9;            
36764  00  =3      BYTE      portalIpv6Prefix10;           
36765  00  =3      BYTE      portalIpv6Prefix11;           
36766  00  =3      BYTE      portalIpv6Prefix12;           
36767  00  =3      BYTE      portalIpv6Prefix13;           
36768  00  =3      BYTE      portalIpv6Prefix14;           
36769  00  =3      BYTE      portalIpv6Prefix15;           
36770  00  =3      BYTE      portalIpv6Prefix16;           /* LSB */
36771  00  =3      BYTE      portalIpv6PrefixLength;       /**/
36772  00  =3      BYTE      defaultGatewayIpv6Address1;   /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 610 

36773  00  =3      BYTE      defaultGatewayIpv6Address2;   
36774  00  =3      BYTE      defaultGatewayIpv6Address3;   
36775  00  =3      BYTE      defaultGatewayIpv6Address4;   
36776  00  =3      BYTE      defaultGatewayIpv6Address5;   
36777  00  =3      BYTE      defaultGatewayIpv6Address6;   
36778  00  =3      BYTE      defaultGatewayIpv6Address7;   
36779  00  =3      BYTE      defaultGatewayIpv6Address8;   
36780  00  =3      BYTE      defaultGatewayIpv6Address9;   
36781  00  =3      BYTE      defaultGatewayIpv6Address10;  
36782  00  =3      BYTE      defaultGatewayIpv6Address11;  
36783  00  =3      BYTE      defaultGatewayIpv6Address12;  
36784  00  =3      BYTE      defaultGatewayIpv6Address13;  
36785  00  =3      BYTE      defaultGatewayIpv6Address14;  
36786  00  =3      BYTE      defaultGatewayIpv6Address15;  
36787  00  =3      BYTE      defaultGatewayIpv6Address16;  /* LSB */
36788  00  =3      BYTE      panIpv6Prefix1;               /* MSB */
36789  00  =3      BYTE      panIpv6Prefix2;               
36790  00  =3      BYTE      panIpv6Prefix3;               
36791  00  =3      BYTE      panIpv6Prefix4;               
36792  00  =3      BYTE      panIpv6Prefix5;               
36793  00  =3      BYTE      panIpv6Prefix6;               
36794  00  =3      BYTE      panIpv6Prefix7;               
36795  00  =3      BYTE      panIpv6Prefix8;               
36796  00  =3      BYTE      panIpv6Prefix9;               
36797  00  =3      BYTE      panIpv6Prefix10;              
36798  00  =3      BYTE      panIpv6Prefix11;              
36799  00  =3      BYTE      panIpv6Prefix12;              
36800  00  =3      BYTE      panIpv6Prefix13;              
36801  00  =3      BYTE      panIpv6Prefix14;              
36802  00  =3      BYTE      panIpv6Prefix15;              
36803  00  =3      BYTE      panIpv6Prefix16;              /* LSB */
36804  00  =3  } ZW_GATEWAY_CONFIGURATION_REPORT_FRAME;
36805  00  =3  
36806  00  =3  /************************************************************/
36807  00  =3  /* Dmx Address Set command class structs */                 
36808  00  =3  /************************************************************/
36809  00  =3  typedef struct _ZW_DMX_ADDRESS_SET_FRAME_
36810  00  =3  {
36811  00  =3      BYTE      cmdClass;                     /* The command class */
36812  00  =3      BYTE      cmd;                          /* The command */
36813  00  =3      BYTE      properties1;                  /* masked byte */
36814  00  =3      BYTE      channelId;                    /**/
36815  00  =3  } ZW_DMX_ADDRESS_SET_FRAME;
36816  00  =3  
36817  00  =3  /************************************************************/
36818  00  =3  /* Dmx Address Get command class structs */                 
36819  00  =3  /************************************************************/
36820  00  =3  typedef struct _ZW_DMX_ADDRESS_GET_FRAME_
36821  00  =3  {
36822  00  =3      BYTE      cmdClass;                     /* The command class */
36823  00  =3      BYTE      cmd;                          /* The command */
36824  00  =3  } ZW_DMX_ADDRESS_GET_FRAME;
36825  00  =3  
36826  00  =3  /************************************************************/
36827  00  =3  /* Dmx Address Report command class structs */              
36828  00  =3  /************************************************************/
36829  00  =3  typedef struct _ZW_DMX_ADDRESS_REPORT_FRAME_
36830  00  =3  {
36831  00  =3      BYTE      cmdClass;                     /* The command class */
36832  00  =3      BYTE      cmd;                          /* The command */
36833  00  =3      BYTE      properties1;                  /* masked byte */
36834  00  =3      BYTE      channelId;                    /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 611 

36835  00  =3  } ZW_DMX_ADDRESS_REPORT_FRAME;
36836  00  =3  
36837  00  =3  /************************************************************/
36838  00  =3  /* Dmx Capability Get command class structs */              
36839  00  =3  /************************************************************/
36840  00  =3  typedef struct _ZW_DMX_CAPABILITY_GET_FRAME_
36841  00  =3  {
36842  00  =3      BYTE      cmdClass;                     /* The command class */
36843  00  =3      BYTE      cmd;                          /* The command */
36844  00  =3      BYTE      channelId;                    /**/
36845  00  =3  } ZW_DMX_CAPABILITY_GET_FRAME;
36846  00  =3  
36847  00  =3  /************************************************************/
36848  00  =3  /* Dmx Capability Report command class structs */           
36849  00  =3  /************************************************************/
36850  00  =3  typedef struct _ZW_DMX_CAPABILITY_REPORT_FRAME_
36851  00  =3  {
36852  00  =3      BYTE      cmdClass;                     /* The command class */
36853  00  =3      BYTE      cmd;                          /* The command */
36854  00  =3      BYTE      channelId;                    /**/
36855  00  =3      BYTE      propertyId1;                  /* MSB */
36856  00  =3      BYTE      propertyId2;                  /* LSB */
36857  00  =3      BYTE      deviceChannels;               /**/
36858  00  =3      BYTE      maxChannels;                  /**/
36859  00  =3  } ZW_DMX_CAPABILITY_REPORT_FRAME;
36860  00  =3  
36861  00  =3  /************************************************************/
36862  00  =3  /* Dmx Data 1byte command class structs */                  
36863  00  =3  /************************************************************/
36864  00  =3  typedef struct _ZW_DMX_DATA_1BYTE_FRAME_
36865  00  =3  {
36866  00  =3      BYTE      cmdClass;                     /* The command class */
36867  00  =3      BYTE      cmd;                          /* The command */
36868  00  =3      BYTE      source;                       /**/
36869  00  =3      BYTE      properties1;                  /* masked byte */
36870  00  =3      BYTE      dmxChannel1;                  
36871  00  =3  } ZW_DMX_DATA_1BYTE_FRAME;
36872  00  =3  
36873  00  =3  /************************************************************/
36874  00  =3  /* Dmx Data 2byte command class structs */                  
36875  00  =3  /************************************************************/
36876  00  =3  typedef struct _ZW_DMX_DATA_2BYTE_FRAME_
36877  00  =3  {
36878  00  =3      BYTE      cmdClass;                     /* The command class */
36879  00  =3      BYTE      cmd;                          /* The command */
36880  00  =3      BYTE      source;                       /**/
36881  00  =3      BYTE      properties1;                  /* masked byte */
36882  00  =3      BYTE      dmxChannel1;                  /* MSB */
36883  00  =3      BYTE      dmxChannel2;                  /* LSB */
36884  00  =3  } ZW_DMX_DATA_2BYTE_FRAME;
36885  00  =3  
36886  00  =3  /************************************************************/
36887  00  =3  /* Dmx Data 3byte command class structs */                  
36888  00  =3  /************************************************************/
36889  00  =3  typedef struct _ZW_DMX_DATA_3BYTE_FRAME_
36890  00  =3  {
36891  00  =3      BYTE      cmdClass;                     /* The command class */
36892  00  =3      BYTE      cmd;                          /* The command */
36893  00  =3      BYTE      source;                       /**/
36894  00  =3      BYTE      properties1;                  /* masked byte */
36895  00  =3      BYTE      dmxChannel1;                  /* MSB */
36896  00  =3      BYTE      dmxChannel2;                  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 612 

36897  00  =3      BYTE      dmxChannel3;                  /* LSB */
36898  00  =3  } ZW_DMX_DATA_3BYTE_FRAME;
36899  00  =3  
36900  00  =3  /************************************************************/
36901  00  =3  /* Dmx Data 4byte command class structs */                  
36902  00  =3  /************************************************************/
36903  00  =3  typedef struct _ZW_DMX_DATA_4BYTE_FRAME_
36904  00  =3  {
36905  00  =3      BYTE      cmdClass;                     /* The command class */
36906  00  =3      BYTE      cmd;                          /* The command */
36907  00  =3      BYTE      source;                       /**/
36908  00  =3      BYTE      properties1;                  /* masked byte */
36909  00  =3      BYTE      dmxChannel1;                  /* MSB */
36910  00  =3      BYTE      dmxChannel2;                  
36911  00  =3      BYTE      dmxChannel3;                  
36912  00  =3      BYTE      dmxChannel4;                  /* LSB */
36913  00  =3  } ZW_DMX_DATA_4BYTE_FRAME;
36914  00  =3  
36915  00  =3  /************************************************************/
36916  00  =3  /* Barrier Operator Set command class structs */            
36917  00  =3  /************************************************************/
36918  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SET_FRAME_
36919  00  =3  {
36920  00  =3      BYTE      cmdClass;                     /* The command class */
36921  00  =3      BYTE      cmd;                          /* The command */
36922  00  =3      BYTE      targetValue;                  /**/
36923  00  =3  } ZW_BARRIER_OPERATOR_SET_FRAME;
36924  00  =3  
36925  00  =3  /************************************************************/
36926  00  =3  /* Barrier Operator Get command class structs */            
36927  00  =3  /************************************************************/
36928  00  =3  typedef struct _ZW_BARRIER_OPERATOR_GET_FRAME_
36929  00  =3  {
36930  00  =3      BYTE      cmdClass;                     /* The command class */
36931  00  =3      BYTE      cmd;                          /* The command */
36932  00  =3  } ZW_BARRIER_OPERATOR_GET_FRAME;
36933  00  =3  
36934  00  =3  /************************************************************/
36935  00  =3  /* Barrier Operator Report command class structs */         
36936  00  =3  /************************************************************/
36937  00  =3  typedef struct _ZW_BARRIER_OPERATOR_REPORT_FRAME_
36938  00  =3  {
36939  00  =3      BYTE      cmdClass;                     /* The command class */
36940  00  =3      BYTE      cmd;                          /* The command */
36941  00  =3      BYTE      state;                        /**/
36942  00  =3  } ZW_BARRIER_OPERATOR_REPORT_FRAME;
36943  00  =3  
36944  00  =3  /************************************************************/
36945  00  =3  /* Barrier Operator Signal Supported Get command class structs */
36946  00  =3  /************************************************************/
36947  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET_FRAME_
36948  00  =3  {
36949  00  =3      BYTE      cmdClass;                     /* The command class */
36950  00  =3      BYTE      cmd;                          /* The command */
36951  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET_FRAME;
36952  00  =3  
36953  00  =3  /************************************************************/
36954  00  =3  /* Barrier Operator Signal Supported Report 1byte command class structs */
36955  00  =3  /************************************************************/
36956  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_1BYTE_FRAME_
36957  00  =3  {
36958  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 613 

36959  00  =3      BYTE      cmd;                          /* The command */
36960  00  =3      BYTE      bitMask1;                     
36961  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_1BYTE_FRAME;
36962  00  =3  
36963  00  =3  /************************************************************/
36964  00  =3  /* Barrier Operator Signal Supported Report 2byte command class structs */
36965  00  =3  /************************************************************/
36966  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_2BYTE_FRAME_
36967  00  =3  {
36968  00  =3      BYTE      cmdClass;                     /* The command class */
36969  00  =3      BYTE      cmd;                          /* The command */
36970  00  =3      BYTE      bitMask1;                     /* MSB */
36971  00  =3      BYTE      bitMask2;                     /* LSB */
36972  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_2BYTE_FRAME;
36973  00  =3  
36974  00  =3  /************************************************************/
36975  00  =3  /* Barrier Operator Signal Supported Report 3byte command class structs */
36976  00  =3  /************************************************************/
36977  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_3BYTE_FRAME_
36978  00  =3  {
36979  00  =3      BYTE      cmdClass;                     /* The command class */
36980  00  =3      BYTE      cmd;                          /* The command */
36981  00  =3      BYTE      bitMask1;                     /* MSB */
36982  00  =3      BYTE      bitMask2;                     
36983  00  =3      BYTE      bitMask3;                     /* LSB */
36984  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_3BYTE_FRAME;
36985  00  =3  
36986  00  =3  /************************************************************/
36987  00  =3  /* Barrier Operator Signal Supported Report 4byte command class structs */
36988  00  =3  /************************************************************/
36989  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_4BYTE_FRAME_
36990  00  =3  {
36991  00  =3      BYTE      cmdClass;                     /* The command class */
36992  00  =3      BYTE      cmd;                          /* The command */
36993  00  =3      BYTE      bitMask1;                     /* MSB */
36994  00  =3      BYTE      bitMask2;                     
36995  00  =3      BYTE      bitMask3;                     
36996  00  =3      BYTE      bitMask4;                     /* LSB */
36997  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT_4BYTE_FRAME;
36998  00  =3  
36999  00  =3  /************************************************************/
37000  00  =3  /* Barrier Operator Signal Set command class structs */     
37001  00  =3  /************************************************************/
37002  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_SET_FRAME_
37003  00  =3  {
37004  00  =3      BYTE      cmdClass;                     /* The command class */
37005  00  =3      BYTE      cmd;                          /* The command */
37006  00  =3      BYTE      subsystemType;                /**/
37007  00  =3      BYTE      subsystemState;               /**/
37008  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_SET_FRAME;
37009  00  =3  
37010  00  =3  /************************************************************/
37011  00  =3  /* Barrier Operator Signal Get command class structs */     
37012  00  =3  /************************************************************/
37013  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_GET_FRAME_
37014  00  =3  {
37015  00  =3      BYTE      cmdClass;                     /* The command class */
37016  00  =3      BYTE      cmd;                          /* The command */
37017  00  =3      BYTE      subsystemType;                /**/
37018  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_GET_FRAME;
37019  00  =3  
37020  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 614 

37021  00  =3  /* Barrier Operator Signal Report command class structs */  
37022  00  =3  /************************************************************/
37023  00  =3  typedef struct _ZW_BARRIER_OPERATOR_SIGNAL_REPORT_FRAME_
37024  00  =3  {
37025  00  =3      BYTE      cmdClass;                     /* The command class */
37026  00  =3      BYTE      cmd;                          /* The command */
37027  00  =3      BYTE      subsystemType;                /**/
37028  00  =3      BYTE      subsystemState;               /**/
37029  00  =3  } ZW_BARRIER_OPERATOR_SIGNAL_REPORT_FRAME;
37030  00  =3  
37031  00  =3  /************************************************************/
37032  00  =3  /* Priority Route Set command class structs */              
37033  00  =3  /************************************************************/
37034  00  =3  typedef struct _ZW_PRIORITY_ROUTE_SET_FRAME_
37035  00  =3  {
37036  00  =3      BYTE      cmdClass;                     /* The command class */
37037  00  =3      BYTE      cmd;                          /* The command */
37038  00  =3      BYTE      nodeid;                       /**/
37039  00  =3      BYTE      repeater1;                    /**/
37040  00  =3      BYTE      repeater2;                    /**/
37041  00  =3      BYTE      repeater3;                    /**/
37042  00  =3      BYTE      repeater4;                    /**/
37043  00  =3      BYTE      speed;                        /**/
37044  00  =3  } ZW_PRIORITY_ROUTE_SET_FRAME;
37045  00  =3  
37046  00  =3  /************************************************************/
37047  00  =3  /* Priority Route Get command class structs */              
37048  00  =3  /************************************************************/
37049  00  =3  typedef struct _ZW_PRIORITY_ROUTE_GET_FRAME_
37050  00  =3  {
37051  00  =3      BYTE      cmdClass;                     /* The command class */
37052  00  =3      BYTE      cmd;                          /* The command */
37053  00  =3      BYTE      nodeid;                       /**/
37054  00  =3  } ZW_PRIORITY_ROUTE_GET_FRAME;
37055  00  =3  
37056  00  =3  /************************************************************/
37057  00  =3  /* Priority Route Report command class structs */           
37058  00  =3  /************************************************************/
37059  00  =3  typedef struct _ZW_PRIORITY_ROUTE_REPORT_FRAME_
37060  00  =3  {
37061  00  =3      BYTE      cmdClass;                     /* The command class */
37062  00  =3      BYTE      cmd;                          /* The command */
37063  00  =3      BYTE      nodeid;                       /**/
37064  00  =3      BYTE      type;                         /**/
37065  00  =3      BYTE      repeater1;                    /**/
37066  00  =3      BYTE      repeater2;                    /**/
37067  00  =3      BYTE      repeater3;                    /**/
37068  00  =3      BYTE      repeater4;                    /**/
37069  00  =3      BYTE      speed;                        /**/
37070  00  =3  } ZW_PRIORITY_ROUTE_REPORT_FRAME;
37071  00  =3  
37072  00  =3  /************************************************************/
37073  00  =3  /* Statistics Get command class structs */                  
37074  00  =3  /************************************************************/
37075  00  =3  typedef struct _ZW_STATISTICS_GET_FRAME_
37076  00  =3  {
37077  00  =3      BYTE      cmdClass;                     /* The command class */
37078  00  =3      BYTE      cmd;                          /* The command */
37079  00  =3      BYTE      nodeid;                       /**/
37080  00  =3  } ZW_STATISTICS_GET_FRAME;
37081  00  =3  
37082  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 615 

37083  00  =3  /* Statistics Report variant group structs */               
37084  00  =3  /************************************************************/
37085  00  =3  typedef struct _VG_STATISTICS_REPORT_1BYTE_VG_
37086  00  =3  {
37087  00  =3      BYTE      type;                         /**/
37088  00  =3      BYTE      length;                       /**/
37089  00  =3      BYTE      value1;                       
37090  00  =3  } VG_STATISTICS_REPORT_1BYTE_VG;
37091  00  =3  
37092  00  =3  /************************************************************/
37093  00  =3  /* Statistics Report variant group structs */               
37094  00  =3  /************************************************************/
37095  00  =3  typedef struct _VG_STATISTICS_REPORT_2BYTE_VG_
37096  00  =3  {
37097  00  =3      BYTE      type;                         /**/
37098  00  =3      BYTE      length;                       /**/
37099  00  =3      BYTE      value1;                       /* MSB */
37100  00  =3      BYTE      value2;                       /* LSB */
37101  00  =3  } VG_STATISTICS_REPORT_2BYTE_VG;
37102  00  =3  
37103  00  =3  /************************************************************/
37104  00  =3  /* Statistics Report variant group structs */               
37105  00  =3  /************************************************************/
37106  00  =3  typedef struct _VG_STATISTICS_REPORT_3BYTE_VG_
37107  00  =3  {
37108  00  =3      BYTE      type;                         /**/
37109  00  =3      BYTE      length;                       /**/
37110  00  =3      BYTE      value1;                       /* MSB */
37111  00  =3      BYTE      value2;                       
37112  00  =3      BYTE      value3;                       /* LSB */
37113  00  =3  } VG_STATISTICS_REPORT_3BYTE_VG;
37114  00  =3  
37115  00  =3  /************************************************************/
37116  00  =3  /* Statistics Report variant group structs */               
37117  00  =3  /************************************************************/
37118  00  =3  typedef struct _VG_STATISTICS_REPORT_4BYTE_VG_
37119  00  =3  {
37120  00  =3      BYTE      type;                         /**/
37121  00  =3      BYTE      length;                       /**/
37122  00  =3      BYTE      value1;                       /* MSB */
37123  00  =3      BYTE      value2;                       
37124  00  =3      BYTE      value3;                       
37125  00  =3      BYTE      value4;                       /* LSB */
37126  00  =3  } VG_STATISTICS_REPORT_4BYTE_VG;
37127  00  =3  
37128  00  =3  /************************************************************/
37129  00  =3  /* Statistics Report 1byte command class structs */         
37130  00  =3  /************************************************************/
37131  00  =3  typedef struct _ZW_STATISTICS_REPORT_1BYTE_FRAME_
37132  00  =3  {
37133  00  =3      BYTE      cmdClass;                     /* The command class */
37134  00  =3      BYTE      cmd;                          /* The command */
37135  00  =3      BYTE      nodeid;                       /**/
37136  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup1;                /**/
37137  00  =3  } ZW_STATISTICS_REPORT_1BYTE_FRAME;
37138  00  =3  
37139  00  =3  /************************************************************/
37140  00  =3  /* Statistics Report 2byte command class structs */         
37141  00  =3  /************************************************************/
37142  00  =3  typedef struct _ZW_STATISTICS_REPORT_2BYTE_FRAME_
37143  00  =3  {
37144  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 616 

37145  00  =3      BYTE      cmd;                          /* The command */
37146  00  =3      BYTE      nodeid;                       /**/
37147  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup1;                /**/
37148  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup2;                /**/
37149  00  =3  } ZW_STATISTICS_REPORT_2BYTE_FRAME;
37150  00  =3  
37151  00  =3  /************************************************************/
37152  00  =3  /* Statistics Report 3byte command class structs */         
37153  00  =3  /************************************************************/
37154  00  =3  typedef struct _ZW_STATISTICS_REPORT_3BYTE_FRAME_
37155  00  =3  {
37156  00  =3      BYTE      cmdClass;                     /* The command class */
37157  00  =3      BYTE      cmd;                          /* The command */
37158  00  =3      BYTE      nodeid;                       /**/
37159  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup1;                /**/
37160  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup2;                /**/
37161  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup3;                /**/
37162  00  =3  } ZW_STATISTICS_REPORT_3BYTE_FRAME;
37163  00  =3  
37164  00  =3  /************************************************************/
37165  00  =3  /* Statistics Report 4byte command class structs */         
37166  00  =3  /************************************************************/
37167  00  =3  typedef struct _ZW_STATISTICS_REPORT_4BYTE_FRAME_
37168  00  =3  {
37169  00  =3      BYTE      cmdClass;                     /* The command class */
37170  00  =3      BYTE      cmd;                          /* The command */
37171  00  =3      BYTE      nodeid;                       /**/
37172  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup1;                /**/
37173  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup2;                /**/
37174  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup3;                /**/
37175  00  =3      VG_STATISTICS_REPORT_4BYTE_VG variantgroup4;                /**/
37176  00  =3  } ZW_STATISTICS_REPORT_4BYTE_FRAME;
37177  00  =3  
37178  00  =3  /************************************************************/
37179  00  =3  /* Statistics Clear command class structs */                
37180  00  =3  /************************************************************/
37181  00  =3  typedef struct _ZW_STATISTICS_CLEAR_FRAME_
37182  00  =3  {
37183  00  =3      BYTE      cmdClass;                     /* The command class */
37184  00  =3      BYTE      cmd;                          /* The command */
37185  00  =3  } ZW_STATISTICS_CLEAR_FRAME;
37186  00  =3  
37187  00  =3  /************************************************************/
37188  00  =3  /* Priority Route Set V2 command class structs */           
37189  00  =3  /************************************************************/
37190  00  =3  typedef struct _ZW_PRIORITY_ROUTE_SET_V2_FRAME_
37191  00  =3  {
37192  00  =3      BYTE      cmdClass;                     /* The command class */
37193  00  =3      BYTE      cmd;                          /* The command */
37194  00  =3      BYTE      nodeid;                       /**/
37195  00  =3      BYTE      repeater1;                    /**/
37196  00  =3      BYTE      repeater2;                    /**/
37197  00  =3      BYTE      repeater3;                    /**/
37198  00  =3      BYTE      repeater4;                    /**/
37199  00  =3      BYTE      speed;                        /**/
37200  00  =3  } ZW_PRIORITY_ROUTE_SET_V2_FRAME;
37201  00  =3  
37202  00  =3  /************************************************************/
37203  00  =3  /* Priority Route Get V2 command class structs */           
37204  00  =3  /************************************************************/
37205  00  =3  typedef struct _ZW_PRIORITY_ROUTE_GET_V2_FRAME_
37206  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 617 

37207  00  =3      BYTE      cmdClass;                     /* The command class */
37208  00  =3      BYTE      cmd;                          /* The command */
37209  00  =3      BYTE      nodeid;                       /**/
37210  00  =3  } ZW_PRIORITY_ROUTE_GET_V2_FRAME;
37211  00  =3  
37212  00  =3  /************************************************************/
37213  00  =3  /* Priority Route Report V2 command class structs */        
37214  00  =3  /************************************************************/
37215  00  =3  typedef struct _ZW_PRIORITY_ROUTE_REPORT_V2_FRAME_
37216  00  =3  {
37217  00  =3      BYTE      cmdClass;                     /* The command class */
37218  00  =3      BYTE      cmd;                          /* The command */
37219  00  =3      BYTE      nodeid;                       /**/
37220  00  =3      BYTE      type;                         /**/
37221  00  =3      BYTE      repeater1;                    /**/
37222  00  =3      BYTE      repeater2;                    /**/
37223  00  =3      BYTE      repeater3;                    /**/
37224  00  =3      BYTE      repeater4;                    /**/
37225  00  =3      BYTE      speed;                        /**/
37226  00  =3  } ZW_PRIORITY_ROUTE_REPORT_V2_FRAME;
37227  00  =3  
37228  00  =3  /************************************************************/
37229  00  =3  /* Statistics Get V2 command class structs */               
37230  00  =3  /************************************************************/
37231  00  =3  typedef struct _ZW_STATISTICS_GET_V2_FRAME_
37232  00  =3  {
37233  00  =3      BYTE      cmdClass;                     /* The command class */
37234  00  =3      BYTE      cmd;                          /* The command */
37235  00  =3      BYTE      nodeid;                       /**/
37236  00  =3  } ZW_STATISTICS_GET_V2_FRAME;
37237  00  =3  
37238  00  =3  /************************************************************/
37239  00  =3  /* Statistics Report V2 variant group structs */            
37240  00  =3  /************************************************************/
37241  00  =3  typedef struct _VG_STATISTICS_REPORT_1BYTE_V2_VG_
37242  00  =3  {
37243  00  =3      BYTE      type;                         /**/
37244  00  =3      BYTE      length;                       /**/
37245  00  =3      BYTE      value1;                       
37246  00  =3  } VG_STATISTICS_REPORT_1BYTE_V2_VG;
37247  00  =3  
37248  00  =3  /************************************************************/
37249  00  =3  /* Statistics Report V2 variant group structs */            
37250  00  =3  /************************************************************/
37251  00  =3  typedef struct _VG_STATISTICS_REPORT_2BYTE_V2_VG_
37252  00  =3  {
37253  00  =3      BYTE      type;                         /**/
37254  00  =3      BYTE      length;                       /**/
37255  00  =3      BYTE      value1;                       /* MSB */
37256  00  =3      BYTE      value2;                       /* LSB */
37257  00  =3  } VG_STATISTICS_REPORT_2BYTE_V2_VG;
37258  00  =3  
37259  00  =3  /************************************************************/
37260  00  =3  /* Statistics Report V2 variant group structs */            
37261  00  =3  /************************************************************/
37262  00  =3  typedef struct _VG_STATISTICS_REPORT_3BYTE_V2_VG_
37263  00  =3  {
37264  00  =3      BYTE      type;                         /**/
37265  00  =3      BYTE      length;                       /**/
37266  00  =3      BYTE      value1;                       /* MSB */
37267  00  =3      BYTE      value2;                       
37268  00  =3      BYTE      value3;                       /* LSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 618 

37269  00  =3  } VG_STATISTICS_REPORT_3BYTE_V2_VG;
37270  00  =3  
37271  00  =3  /************************************************************/
37272  00  =3  /* Statistics Report V2 variant group structs */            
37273  00  =3  /************************************************************/
37274  00  =3  typedef struct _VG_STATISTICS_REPORT_4BYTE_V2_VG_
37275  00  =3  {
37276  00  =3      BYTE      type;                         /**/
37277  00  =3      BYTE      length;                       /**/
37278  00  =3      BYTE      value1;                       /* MSB */
37279  00  =3      BYTE      value2;                       
37280  00  =3      BYTE      value3;                       
37281  00  =3      BYTE      value4;                       /* LSB */
37282  00  =3  } VG_STATISTICS_REPORT_4BYTE_V2_VG;
37283  00  =3  
37284  00  =3  /************************************************************/
37285  00  =3  /* Statistics Report 1byte V2 command class structs */      
37286  00  =3  /************************************************************/
37287  00  =3  typedef struct _ZW_STATISTICS_REPORT_1BYTE_V2_FRAME_
37288  00  =3  {
37289  00  =3      BYTE      cmdClass;                     /* The command class */
37290  00  =3      BYTE      cmd;                          /* The command */
37291  00  =3      BYTE      nodeid;                       /**/
37292  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup1;                /**/
37293  00  =3  } ZW_STATISTICS_REPORT_1BYTE_V2_FRAME;
37294  00  =3  
37295  00  =3  /************************************************************/
37296  00  =3  /* Statistics Report 2byte V2 command class structs */      
37297  00  =3  /************************************************************/
37298  00  =3  typedef struct _ZW_STATISTICS_REPORT_2BYTE_V2_FRAME_
37299  00  =3  {
37300  00  =3      BYTE      cmdClass;                     /* The command class */
37301  00  =3      BYTE      cmd;                          /* The command */
37302  00  =3      BYTE      nodeid;                       /**/
37303  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup1;                /**/
37304  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup2;                /**/
37305  00  =3  } ZW_STATISTICS_REPORT_2BYTE_V2_FRAME;
37306  00  =3  
37307  00  =3  /************************************************************/
37308  00  =3  /* Statistics Report 3byte V2 command class structs */      
37309  00  =3  /************************************************************/
37310  00  =3  typedef struct _ZW_STATISTICS_REPORT_3BYTE_V2_FRAME_
37311  00  =3  {
37312  00  =3      BYTE      cmdClass;                     /* The command class */
37313  00  =3      BYTE      cmd;                          /* The command */
37314  00  =3      BYTE      nodeid;                       /**/
37315  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup1;                /**/
37316  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup2;                /**/
37317  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup3;                /**/
37318  00  =3  } ZW_STATISTICS_REPORT_3BYTE_V2_FRAME;
37319  00  =3  
37320  00  =3  /************************************************************/
37321  00  =3  /* Statistics Report 4byte V2 command class structs */      
37322  00  =3  /************************************************************/
37323  00  =3  typedef struct _ZW_STATISTICS_REPORT_4BYTE_V2_FRAME_
37324  00  =3  {
37325  00  =3      BYTE      cmdClass;                     /* The command class */
37326  00  =3      BYTE      cmd;                          /* The command */
37327  00  =3      BYTE      nodeid;                       /**/
37328  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup1;                /**/
37329  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup2;                /**/
37330  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup3;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 619 

37331  00  =3      VG_STATISTICS_REPORT_4BYTE_V2_VG variantgroup4;                /**/
37332  00  =3  } ZW_STATISTICS_REPORT_4BYTE_V2_FRAME;
37333  00  =3  
37334  00  =3  /************************************************************/
37335  00  =3  /* Statistics Clear V2 command class structs */             
37336  00  =3  /************************************************************/
37337  00  =3  typedef struct _ZW_STATISTICS_CLEAR_V2_FRAME_
37338  00  =3  {
37339  00  =3      BYTE      cmdClass;                     /* The command class */
37340  00  =3      BYTE      cmd;                          /* The command */
37341  00  =3  } ZW_STATISTICS_CLEAR_V2_FRAME;
37342  00  =3  
37343  00  =3  /************************************************************/
37344  00  =3  /* Rssi Get V2 command class structs */                     
37345  00  =3  /************************************************************/
37346  00  =3  typedef struct _ZW_RSSI_GET_V2_FRAME_
37347  00  =3  {
37348  00  =3      BYTE      cmdClass;                     /* The command class */
37349  00  =3      BYTE      cmd;                          /* The command */
37350  00  =3  } ZW_RSSI_GET_V2_FRAME;
37351  00  =3  
37352  00  =3  /************************************************************/
37353  00  =3  /* Rssi Report V2 command class structs */                  
37354  00  =3  /************************************************************/
37355  00  =3  typedef struct _ZW_RSSI_REPORT_V2_FRAME_
37356  00  =3  {
37357  00  =3      BYTE      cmdClass;                     /* The command class */
37358  00  =3      BYTE      cmd;                          /* The command */
37359  00  =3      BYTE      channel1Rssi;                 /**/
37360  00  =3      BYTE      channel2Rssi;                 /**/
37361  00  =3      BYTE      channel3Rssi;                 /**/
37362  00  =3  } ZW_RSSI_REPORT_V2_FRAME;
37363  00  =3  
37364  00  =3  /************************************************************/
37365  00  =3  /* Zip Naming Name Set 1byte command class structs */       
37366  00  =3  /************************************************************/
37367  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_SET_1BYTE_FRAME_
37368  00  =3  {
37369  00  =3      BYTE      cmdClass;                     /* The command class */
37370  00  =3      BYTE      cmd;                          /* The command */
37371  00  =3      BYTE      name1;                        
37372  00  =3  } ZW_ZIP_NAMING_NAME_SET_1BYTE_FRAME;
37373  00  =3  
37374  00  =3  /************************************************************/
37375  00  =3  /* Zip Naming Name Set 2byte command class structs */       
37376  00  =3  /************************************************************/
37377  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_SET_2BYTE_FRAME_
37378  00  =3  {
37379  00  =3      BYTE      cmdClass;                     /* The command class */
37380  00  =3      BYTE      cmd;                          /* The command */
37381  00  =3      BYTE      name1;                        /* MSB */
37382  00  =3      BYTE      name2;                        /* LSB */
37383  00  =3  } ZW_ZIP_NAMING_NAME_SET_2BYTE_FRAME;
37384  00  =3  
37385  00  =3  /************************************************************/
37386  00  =3  /* Zip Naming Name Set 3byte command class structs */       
37387  00  =3  /************************************************************/
37388  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_SET_3BYTE_FRAME_
37389  00  =3  {
37390  00  =3      BYTE      cmdClass;                     /* The command class */
37391  00  =3      BYTE      cmd;                          /* The command */
37392  00  =3      BYTE      name1;                        /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 620 

37393  00  =3      BYTE      name2;                        
37394  00  =3      BYTE      name3;                        /* LSB */
37395  00  =3  } ZW_ZIP_NAMING_NAME_SET_3BYTE_FRAME;
37396  00  =3  
37397  00  =3  /************************************************************/
37398  00  =3  /* Zip Naming Name Set 4byte command class structs */       
37399  00  =3  /************************************************************/
37400  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_SET_4BYTE_FRAME_
37401  00  =3  {
37402  00  =3      BYTE      cmdClass;                     /* The command class */
37403  00  =3      BYTE      cmd;                          /* The command */
37404  00  =3      BYTE      name1;                        /* MSB */
37405  00  =3      BYTE      name2;                        
37406  00  =3      BYTE      name3;                        
37407  00  =3      BYTE      name4;                        /* LSB */
37408  00  =3  } ZW_ZIP_NAMING_NAME_SET_4BYTE_FRAME;
37409  00  =3  
37410  00  =3  /************************************************************/
37411  00  =3  /* Zip Naming Name Get command class structs */             
37412  00  =3  /************************************************************/
37413  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_GET_FRAME_
37414  00  =3  {
37415  00  =3      BYTE      cmdClass;                     /* The command class */
37416  00  =3      BYTE      cmd;                          /* The command */
37417  00  =3  } ZW_ZIP_NAMING_NAME_GET_FRAME;
37418  00  =3  
37419  00  =3  /************************************************************/
37420  00  =3  /* Zip Naming Name Report 1byte command class structs */    
37421  00  =3  /************************************************************/
37422  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_REPORT_1BYTE_FRAME_
37423  00  =3  {
37424  00  =3      BYTE      cmdClass;                     /* The command class */
37425  00  =3      BYTE      cmd;                          /* The command */
37426  00  =3      BYTE      name1;                        
37427  00  =3  } ZW_ZIP_NAMING_NAME_REPORT_1BYTE_FRAME;
37428  00  =3  
37429  00  =3  /************************************************************/
37430  00  =3  /* Zip Naming Name Report 2byte command class structs */    
37431  00  =3  /************************************************************/
37432  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_REPORT_2BYTE_FRAME_
37433  00  =3  {
37434  00  =3      BYTE      cmdClass;                     /* The command class */
37435  00  =3      BYTE      cmd;                          /* The command */
37436  00  =3      BYTE      name1;                        /* MSB */
37437  00  =3      BYTE      name2;                        /* LSB */
37438  00  =3  } ZW_ZIP_NAMING_NAME_REPORT_2BYTE_FRAME;
37439  00  =3  
37440  00  =3  /************************************************************/
37441  00  =3  /* Zip Naming Name Report 3byte command class structs */    
37442  00  =3  /************************************************************/
37443  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_REPORT_3BYTE_FRAME_
37444  00  =3  {
37445  00  =3      BYTE      cmdClass;                     /* The command class */
37446  00  =3      BYTE      cmd;                          /* The command */
37447  00  =3      BYTE      name1;                        /* MSB */
37448  00  =3      BYTE      name2;                        
37449  00  =3      BYTE      name3;                        /* LSB */
37450  00  =3  } ZW_ZIP_NAMING_NAME_REPORT_3BYTE_FRAME;
37451  00  =3  
37452  00  =3  /************************************************************/
37453  00  =3  /* Zip Naming Name Report 4byte command class structs */    
37454  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 621 

37455  00  =3  typedef struct _ZW_ZIP_NAMING_NAME_REPORT_4BYTE_FRAME_
37456  00  =3  {
37457  00  =3      BYTE      cmdClass;                     /* The command class */
37458  00  =3      BYTE      cmd;                          /* The command */
37459  00  =3      BYTE      name1;                        /* MSB */
37460  00  =3      BYTE      name2;                        
37461  00  =3      BYTE      name3;                        
37462  00  =3      BYTE      name4;                        /* LSB */
37463  00  =3  } ZW_ZIP_NAMING_NAME_REPORT_4BYTE_FRAME;
37464  00  =3  
37465  00  =3  /************************************************************/
37466  00  =3  /* Zip Naming Location Set 1byte command class structs */   
37467  00  =3  /************************************************************/
37468  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_SET_1BYTE_FRAME_
37469  00  =3  {
37470  00  =3      BYTE      cmdClass;                     /* The command class */
37471  00  =3      BYTE      cmd;                          /* The command */
37472  00  =3      BYTE      location1;                    
37473  00  =3  } ZW_ZIP_NAMING_LOCATION_SET_1BYTE_FRAME;
37474  00  =3  
37475  00  =3  /************************************************************/
37476  00  =3  /* Zip Naming Location Set 2byte command class structs */   
37477  00  =3  /************************************************************/
37478  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_SET_2BYTE_FRAME_
37479  00  =3  {
37480  00  =3      BYTE      cmdClass;                     /* The command class */
37481  00  =3      BYTE      cmd;                          /* The command */
37482  00  =3      BYTE      location1;                    /* MSB */
37483  00  =3      BYTE      location2;                    /* LSB */
37484  00  =3  } ZW_ZIP_NAMING_LOCATION_SET_2BYTE_FRAME;
37485  00  =3  
37486  00  =3  /************************************************************/
37487  00  =3  /* Zip Naming Location Set 3byte command class structs */   
37488  00  =3  /************************************************************/
37489  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_SET_3BYTE_FRAME_
37490  00  =3  {
37491  00  =3      BYTE      cmdClass;                     /* The command class */
37492  00  =3      BYTE      cmd;                          /* The command */
37493  00  =3      BYTE      location1;                    /* MSB */
37494  00  =3      BYTE      location2;                    
37495  00  =3      BYTE      location3;                    /* LSB */
37496  00  =3  } ZW_ZIP_NAMING_LOCATION_SET_3BYTE_FRAME;
37497  00  =3  
37498  00  =3  /************************************************************/
37499  00  =3  /* Zip Naming Location Set 4byte command class structs */   
37500  00  =3  /************************************************************/
37501  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_SET_4BYTE_FRAME_
37502  00  =3  {
37503  00  =3      BYTE      cmdClass;                     /* The command class */
37504  00  =3      BYTE      cmd;                          /* The command */
37505  00  =3      BYTE      location1;                    /* MSB */
37506  00  =3      BYTE      location2;                    
37507  00  =3      BYTE      location3;                    
37508  00  =3      BYTE      location4;                    /* LSB */
37509  00  =3  } ZW_ZIP_NAMING_LOCATION_SET_4BYTE_FRAME;
37510  00  =3  
37511  00  =3  /************************************************************/
37512  00  =3  /* Zip Naming Location Get command class structs */         
37513  00  =3  /************************************************************/
37514  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_GET_FRAME_
37515  00  =3  {
37516  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 622 

37517  00  =3      BYTE      cmd;                          /* The command */
37518  00  =3  } ZW_ZIP_NAMING_LOCATION_GET_FRAME;
37519  00  =3  
37520  00  =3  /************************************************************/
37521  00  =3  /* Zip Naming Location Report 1byte command class structs */
37522  00  =3  /************************************************************/
37523  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_REPORT_1BYTE_FRAME_
37524  00  =3  {
37525  00  =3      BYTE      cmdClass;                     /* The command class */
37526  00  =3      BYTE      cmd;                          /* The command */
37527  00  =3      BYTE      location1;                    
37528  00  =3  } ZW_ZIP_NAMING_LOCATION_REPORT_1BYTE_FRAME;
37529  00  =3  
37530  00  =3  /************************************************************/
37531  00  =3  /* Zip Naming Location Report 2byte command class structs */
37532  00  =3  /************************************************************/
37533  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_REPORT_2BYTE_FRAME_
37534  00  =3  {
37535  00  =3      BYTE      cmdClass;                     /* The command class */
37536  00  =3      BYTE      cmd;                          /* The command */
37537  00  =3      BYTE      location1;                    /* MSB */
37538  00  =3      BYTE      location2;                    /* LSB */
37539  00  =3  } ZW_ZIP_NAMING_LOCATION_REPORT_2BYTE_FRAME;
37540  00  =3  
37541  00  =3  /************************************************************/
37542  00  =3  /* Zip Naming Location Report 3byte command class structs */
37543  00  =3  /************************************************************/
37544  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_REPORT_3BYTE_FRAME_
37545  00  =3  {
37546  00  =3      BYTE      cmdClass;                     /* The command class */
37547  00  =3      BYTE      cmd;                          /* The command */
37548  00  =3      BYTE      location1;                    /* MSB */
37549  00  =3      BYTE      location2;                    
37550  00  =3      BYTE      location3;                    /* LSB */
37551  00  =3  } ZW_ZIP_NAMING_LOCATION_REPORT_3BYTE_FRAME;
37552  00  =3  
37553  00  =3  /************************************************************/
37554  00  =3  /* Zip Naming Location Report 4byte command class structs */
37555  00  =3  /************************************************************/
37556  00  =3  typedef struct _ZW_ZIP_NAMING_LOCATION_REPORT_4BYTE_FRAME_
37557  00  =3  {
37558  00  =3      BYTE      cmdClass;                     /* The command class */
37559  00  =3      BYTE      cmd;                          /* The command */
37560  00  =3      BYTE      location1;                    /* MSB */
37561  00  =3      BYTE      location2;                    
37562  00  =3      BYTE      location3;                    
37563  00  =3      BYTE      location4;                    /* LSB */
37564  00  =3  } ZW_ZIP_NAMING_LOCATION_REPORT_4BYTE_FRAME;
37565  00  =3  
37566  00  =3  /************************************************************/
37567  00  =3  /* Mailbox Configuration Get command class structs */       
37568  00  =3  /************************************************************/
37569  00  =3  typedef struct _ZW_MAILBOX_CONFIGURATION_GET_FRAME_
37570  00  =3  {
37571  00  =3      BYTE      cmdClass;                     /* The command class */
37572  00  =3      BYTE      cmd;                          /* The command */
37573  00  =3  } ZW_MAILBOX_CONFIGURATION_GET_FRAME;
37574  00  =3  
37575  00  =3  /************************************************************/
37576  00  =3  /* Mailbox Configuration Set command class structs */       
37577  00  =3  /************************************************************/
37578  00  =3  typedef struct _ZW_MAILBOX_CONFIGURATION_SET_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 623 

37579  00  =3  {
37580  00  =3      BYTE      cmdClass;                     /* The command class */
37581  00  =3      BYTE      cmd;                          /* The command */
37582  00  =3      BYTE      properties1;                  /* masked byte */
37583  00  =3      BYTE      forwardingDestinationIpv6Address1;/* MSB */
37584  00  =3      BYTE      forwardingDestinationIpv6Address2;
37585  00  =3      BYTE      forwardingDestinationIpv6Address3;
37586  00  =3      BYTE      forwardingDestinationIpv6Address4;
37587  00  =3      BYTE      forwardingDestinationIpv6Address5;
37588  00  =3      BYTE      forwardingDestinationIpv6Address6;
37589  00  =3      BYTE      forwardingDestinationIpv6Address7;
37590  00  =3      BYTE      forwardingDestinationIpv6Address8;
37591  00  =3      BYTE      forwardingDestinationIpv6Address9;
37592  00  =3      BYTE      forwardingDestinationIpv6Address10;
37593  00  =3      BYTE      forwardingDestinationIpv6Address11;
37594  00  =3      BYTE      forwardingDestinationIpv6Address12;
37595  00  =3      BYTE      forwardingDestinationIpv6Address13;
37596  00  =3      BYTE      forwardingDestinationIpv6Address14;
37597  00  =3      BYTE      forwardingDestinationIpv6Address15;
37598  00  =3      BYTE      forwardingDestinationIpv6Address16;/* LSB */
37599  00  =3      BYTE      udpPortNumber1;               /* MSB */
37600  00  =3      BYTE      udpPortNumber2;               /* LSB */
37601  00  =3  } ZW_MAILBOX_CONFIGURATION_SET_FRAME;
37602  00  =3  
37603  00  =3  /************************************************************/
37604  00  =3  /* Mailbox Configuration Report command class structs */    
37605  00  =3  /************************************************************/
37606  00  =3  typedef struct _ZW_MAILBOX_CONFIGURATION_REPORT_FRAME_
37607  00  =3  {
37608  00  =3      BYTE      cmdClass;                     /* The command class */
37609  00  =3      BYTE      cmd;                          /* The command */
37610  00  =3      BYTE      properties1;                  /* masked byte */
37611  00  =3      BYTE      mailboxCapacity1;             /* MSB */
37612  00  =3      BYTE      mailboxCapacity2;             /* LSB */
37613  00  =3      BYTE      forwardingDestinationIpv6Address1;/* MSB */
37614  00  =3      BYTE      forwardingDestinationIpv6Address2;
37615  00  =3      BYTE      forwardingDestinationIpv6Address3;
37616  00  =3      BYTE      forwardingDestinationIpv6Address4;
37617  00  =3      BYTE      forwardingDestinationIpv6Address5;
37618  00  =3      BYTE      forwardingDestinationIpv6Address6;
37619  00  =3      BYTE      forwardingDestinationIpv6Address7;
37620  00  =3      BYTE      forwardingDestinationIpv6Address8;
37621  00  =3      BYTE      forwardingDestinationIpv6Address9;
37622  00  =3      BYTE      forwardingDestinationIpv6Address10;
37623  00  =3      BYTE      forwardingDestinationIpv6Address11;
37624  00  =3      BYTE      forwardingDestinationIpv6Address12;
37625  00  =3      BYTE      forwardingDestinationIpv6Address13;
37626  00  =3      BYTE      forwardingDestinationIpv6Address14;
37627  00  =3      BYTE      forwardingDestinationIpv6Address15;
37628  00  =3      BYTE      forwardingDestinationIpv6Address16;/* LSB */
37629  00  =3      BYTE      udpPortNumber1;               /* MSB */
37630  00  =3      BYTE      udpPortNumber2;               /* LSB */
37631  00  =3  } ZW_MAILBOX_CONFIGURATION_REPORT_FRAME;
37632  00  =3  
37633  00  =3  /************************************************************/
37634  00  =3  /* Mailbox Queue 1byte command class structs */             
37635  00  =3  /************************************************************/
37636  00  =3  typedef struct _ZW_MAILBOX_QUEUE_1BYTE_FRAME_
37637  00  =3  {
37638  00  =3      BYTE      cmdClass;                     /* The command class */
37639  00  =3      BYTE      cmd;                          /* The command */
37640  00  =3      BYTE      sequenceNumber;               /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 624 

37641  00  =3      BYTE      properties1;                  /* masked byte */
37642  00  =3      BYTE      queueHandle;                  /**/
37643  00  =3      BYTE      mailboxEntry1;                
37644  00  =3  } ZW_MAILBOX_QUEUE_1BYTE_FRAME;
37645  00  =3  
37646  00  =3  /************************************************************/
37647  00  =3  /* Mailbox Queue 2byte command class structs */             
37648  00  =3  /************************************************************/
37649  00  =3  typedef struct _ZW_MAILBOX_QUEUE_2BYTE_FRAME_
37650  00  =3  {
37651  00  =3      BYTE      cmdClass;                     /* The command class */
37652  00  =3      BYTE      cmd;                          /* The command */
37653  00  =3      BYTE      sequenceNumber;               /**/
37654  00  =3      BYTE      properties1;                  /* masked byte */
37655  00  =3      BYTE      queueHandle;                  /**/
37656  00  =3      BYTE      mailboxEntry1;                /* MSB */
37657  00  =3      BYTE      mailboxEntry2;                /* LSB */
37658  00  =3  } ZW_MAILBOX_QUEUE_2BYTE_FRAME;
37659  00  =3  
37660  00  =3  /************************************************************/
37661  00  =3  /* Mailbox Queue 3byte command class structs */             
37662  00  =3  /************************************************************/
37663  00  =3  typedef struct _ZW_MAILBOX_QUEUE_3BYTE_FRAME_
37664  00  =3  {
37665  00  =3      BYTE      cmdClass;                     /* The command class */
37666  00  =3      BYTE      cmd;                          /* The command */
37667  00  =3      BYTE      sequenceNumber;               /**/
37668  00  =3      BYTE      properties1;                  /* masked byte */
37669  00  =3      BYTE      queueHandle;                  /**/
37670  00  =3      BYTE      mailboxEntry1;                /* MSB */
37671  00  =3      BYTE      mailboxEntry2;                
37672  00  =3      BYTE      mailboxEntry3;                /* LSB */
37673  00  =3  } ZW_MAILBOX_QUEUE_3BYTE_FRAME;
37674  00  =3  
37675  00  =3  /************************************************************/
37676  00  =3  /* Mailbox Queue 4byte command class structs */             
37677  00  =3  /************************************************************/
37678  00  =3  typedef struct _ZW_MAILBOX_QUEUE_4BYTE_FRAME_
37679  00  =3  {
37680  00  =3      BYTE      cmdClass;                     /* The command class */
37681  00  =3      BYTE      cmd;                          /* The command */
37682  00  =3      BYTE      sequenceNumber;               /**/
37683  00  =3      BYTE      properties1;                  /* masked byte */
37684  00  =3      BYTE      queueHandle;                  /**/
37685  00  =3      BYTE      mailboxEntry1;                /* MSB */
37686  00  =3      BYTE      mailboxEntry2;                
37687  00  =3      BYTE      mailboxEntry3;                
37688  00  =3      BYTE      mailboxEntry4;                /* LSB */
37689  00  =3  } ZW_MAILBOX_QUEUE_4BYTE_FRAME;
37690  00  =3  
37691  00  =3  /************************************************************/
37692  00  =3  /* Mailbox Wakeup Notification command class structs */     
37693  00  =3  /************************************************************/
37694  00  =3  typedef struct _ZW_MAILBOX_WAKEUP_NOTIFICATION_FRAME_
37695  00  =3  {
37696  00  =3      BYTE      cmdClass;                     /* The command class */
37697  00  =3      BYTE      cmd;                          /* The command */
37698  00  =3      BYTE      queueHandle;                  /**/
37699  00  =3  } ZW_MAILBOX_WAKEUP_NOTIFICATION_FRAME;
37700  00  =3  
37701  00  =3  /************************************************************/
37702  00  =3  /* Mailbox Node Failing command class structs */            
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 625 

37703  00  =3  /************************************************************/
37704  00  =3  typedef struct _ZW_MAILBOX_NODE_FAILING_FRAME_
37705  00  =3  {
37706  00  =3      BYTE      cmdClass;                     /* The command class */
37707  00  =3      BYTE      cmd;                          /* The command */
37708  00  =3      BYTE      queueHandle;                  /**/
37709  00  =3  } ZW_MAILBOX_NODE_FAILING_FRAME;
37710  00  =3  
37711  00  =3  /************************************************************/
37712  00  =3  /* Window Covering Supported Get command class structs */   
37713  00  =3  /************************************************************/
37714  00  =3  typedef struct _ZW_WINDOW_COVERING_SUPPORTED_GET_FRAME_
37715  00  =3  {
37716  00  =3      BYTE      cmdClass;                     /* The command class */
37717  00  =3      BYTE      cmd;                          /* The command */
37718  00  =3  } ZW_WINDOW_COVERING_SUPPORTED_GET_FRAME;
37719  00  =3  
37720  00  =3  /************************************************************/
37721  00  =3  /* Window Covering Supported Report 1byte command class structs */
37722  00  =3  /************************************************************/
37723  00  =3  typedef struct _ZW_WINDOW_COVERING_SUPPORTED_REPORT_1BYTE_FRAME_
37724  00  =3  {
37725  00  =3      BYTE      cmdClass;                     /* The command class */
37726  00  =3      BYTE      cmd;                          /* The command */
37727  00  =3      BYTE      properties1;                  /* masked byte */
37728  00  =3      BYTE      parameterMask1;               
37729  00  =3  } ZW_WINDOW_COVERING_SUPPORTED_REPORT_1BYTE_FRAME;
37730  00  =3  
37731  00  =3  /************************************************************/
37732  00  =3  /* Window Covering Supported Report 2byte command class structs */
37733  00  =3  /************************************************************/
37734  00  =3  typedef struct _ZW_WINDOW_COVERING_SUPPORTED_REPORT_2BYTE_FRAME_
37735  00  =3  {
37736  00  =3      BYTE      cmdClass;                     /* The command class */
37737  00  =3      BYTE      cmd;                          /* The command */
37738  00  =3      BYTE      properties1;                  /* masked byte */
37739  00  =3      BYTE      parameterMask1;               /* MSB */
37740  00  =3      BYTE      parameterMask2;               /* LSB */
37741  00  =3  } ZW_WINDOW_COVERING_SUPPORTED_REPORT_2BYTE_FRAME;
37742  00  =3  
37743  00  =3  /************************************************************/
37744  00  =3  /* Window Covering Supported Report 3byte command class structs */
37745  00  =3  /************************************************************/
37746  00  =3  typedef struct _ZW_WINDOW_COVERING_SUPPORTED_REPORT_3BYTE_FRAME_
37747  00  =3  {
37748  00  =3      BYTE      cmdClass;                     /* The command class */
37749  00  =3      BYTE      cmd;                          /* The command */
37750  00  =3      BYTE      properties1;                  /* masked byte */
37751  00  =3      BYTE      parameterMask1;               /* MSB */
37752  00  =3      BYTE      parameterMask2;               
37753  00  =3      BYTE      parameterMask3;               /* LSB */
37754  00  =3  } ZW_WINDOW_COVERING_SUPPORTED_REPORT_3BYTE_FRAME;
37755  00  =3  
37756  00  =3  /************************************************************/
37757  00  =3  /* Window Covering Supported Report 4byte command class structs */
37758  00  =3  /************************************************************/
37759  00  =3  typedef struct _ZW_WINDOW_COVERING_SUPPORTED_REPORT_4BYTE_FRAME_
37760  00  =3  {
37761  00  =3      BYTE      cmdClass;                     /* The command class */
37762  00  =3      BYTE      cmd;                          /* The command */
37763  00  =3      BYTE      properties1;                  /* masked byte */
37764  00  =3      BYTE      parameterMask1;               /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 626 

37765  00  =3      BYTE      parameterMask2;               
37766  00  =3      BYTE      parameterMask3;               
37767  00  =3      BYTE      parameterMask4;               /* LSB */
37768  00  =3  } ZW_WINDOW_COVERING_SUPPORTED_REPORT_4BYTE_FRAME;
37769  00  =3  
37770  00  =3  /************************************************************/
37771  00  =3  /* Window Covering Get command class structs */             
37772  00  =3  /************************************************************/
37773  00  =3  typedef struct _ZW_WINDOW_COVERING_GET_FRAME_
37774  00  =3  {
37775  00  =3      BYTE      cmdClass;                     /* The command class */
37776  00  =3      BYTE      cmd;                          /* The command */
37777  00  =3      BYTE      parameterId;                  /**/
37778  00  =3  } ZW_WINDOW_COVERING_GET_FRAME;
37779  00  =3  
37780  00  =3  /************************************************************/
37781  00  =3  /* Window Covering Report command class structs */          
37782  00  =3  /************************************************************/
37783  00  =3  typedef struct _ZW_WINDOW_COVERING_REPORT_FRAME_
37784  00  =3  {
37785  00  =3      BYTE      cmdClass;                     /* The command class */
37786  00  =3      BYTE      cmd;                          /* The command */
37787  00  =3      BYTE      parameterId;                  /**/
37788  00  =3      BYTE      currentValue;                 /**/
37789  00  =3      BYTE      targetValue;                  /**/
37790  00  =3      BYTE      duration;                     /**/
37791  00  =3  } ZW_WINDOW_COVERING_REPORT_FRAME;
37792  00  =3  
37793  00  =3  /************************************************************/
37794  00  =3  /* Window Covering Set variant group structs */             
37795  00  =3  /************************************************************/
37796  00  =3  typedef struct _VG_WINDOW_COVERING_SET_VG_
37797  00  =3  {
37798  00  =3      BYTE      parameterId;                  /**/
37799  00  =3      BYTE      value;                        /**/
37800  00  =3  } VG_WINDOW_COVERING_SET_VG;
37801  00  =3  
37802  00  =3  /************************************************************/
37803  00  =3  /* Window Covering Set 1byte command class structs */       
37804  00  =3  /************************************************************/
37805  00  =3  typedef struct _ZW_WINDOW_COVERING_SET_1BYTE_FRAME_
37806  00  =3  {
37807  00  =3      BYTE      cmdClass;                     /* The command class */
37808  00  =3      BYTE      cmd;                          /* The command */
37809  00  =3      BYTE      properties1;                  /* masked byte */
37810  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup1;                /**/
37811  00  =3      BYTE      duration;                     /**/
37812  00  =3  } ZW_WINDOW_COVERING_SET_1BYTE_FRAME;
37813  00  =3  
37814  00  =3  /************************************************************/
37815  00  =3  /* Window Covering Set 2byte command class structs */       
37816  00  =3  /************************************************************/
37817  00  =3  typedef struct _ZW_WINDOW_COVERING_SET_2BYTE_FRAME_
37818  00  =3  {
37819  00  =3      BYTE      cmdClass;                     /* The command class */
37820  00  =3      BYTE      cmd;                          /* The command */
37821  00  =3      BYTE      properties1;                  /* masked byte */
37822  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup1;                /**/
37823  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup2;                /**/
37824  00  =3      BYTE      duration;                     /**/
37825  00  =3  } ZW_WINDOW_COVERING_SET_2BYTE_FRAME;
37826  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 627 

37827  00  =3  /************************************************************/
37828  00  =3  /* Window Covering Set 3byte command class structs */       
37829  00  =3  /************************************************************/
37830  00  =3  typedef struct _ZW_WINDOW_COVERING_SET_3BYTE_FRAME_
37831  00  =3  {
37832  00  =3      BYTE      cmdClass;                     /* The command class */
37833  00  =3      BYTE      cmd;                          /* The command */
37834  00  =3      BYTE      properties1;                  /* masked byte */
37835  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup1;                /**/
37836  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup2;                /**/
37837  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup3;                /**/
37838  00  =3      BYTE      duration;                     /**/
37839  00  =3  } ZW_WINDOW_COVERING_SET_3BYTE_FRAME;
37840  00  =3  
37841  00  =3  /************************************************************/
37842  00  =3  /* Window Covering Set 4byte command class structs */       
37843  00  =3  /************************************************************/
37844  00  =3  typedef struct _ZW_WINDOW_COVERING_SET_4BYTE_FRAME_
37845  00  =3  {
37846  00  =3      BYTE      cmdClass;                     /* The command class */
37847  00  =3      BYTE      cmd;                          /* The command */
37848  00  =3      BYTE      properties1;                  /* masked byte */
37849  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup1;                /**/
37850  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup2;                /**/
37851  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup3;                /**/
37852  00  =3      VG_WINDOW_COVERING_SET_VG variantgroup4;                /**/
37853  00  =3      BYTE      duration;                     /**/
37854  00  =3  } ZW_WINDOW_COVERING_SET_4BYTE_FRAME;
37855  00  =3  
37856  00  =3  /************************************************************/
37857  00  =3  /* Window Covering Start Level Change command class structs */
37858  00  =3  /************************************************************/
37859  00  =3  typedef struct _ZW_WINDOW_COVERING_START_LEVEL_CHANGE_FRAME_
37860  00  =3  {
37861  00  =3      BYTE      cmdClass;                     /* The command class */
37862  00  =3      BYTE      cmd;                          /* The command */
37863  00  =3      BYTE      properties1;                  /* masked byte */
37864  00  =3      BYTE      parameterId;                  /**/
37865  00  =3      BYTE      duration;                     /**/
37866  00  =3  } ZW_WINDOW_COVERING_START_LEVEL_CHANGE_FRAME;
37867  00  =3  
37868  00  =3  /************************************************************/
37869  00  =3  /* Window Covering Stop Level Change command class structs */
37870  00  =3  /************************************************************/
37871  00  =3  typedef struct _ZW_WINDOW_COVERING_STOP_LEVEL_CHANGE_FRAME_
37872  00  =3  {
37873  00  =3      BYTE      cmdClass;                     /* The command class */
37874  00  =3      BYTE      cmd;                          /* The command */
37875  00  =3      BYTE      parameterId;                  /**/
37876  00  =3  } ZW_WINDOW_COVERING_STOP_LEVEL_CHANGE_FRAME;
37877  00  =3  
37878  00  =3  /************************************************************/
37879  00  =3  /* Security 2 Nonce Get command class structs */            
37880  00  =3  /************************************************************/
37881  00  =3  typedef struct _ZW_SECURITY_2_NONCE_GET_FRAME_
37882  00  =3  {
37883  00  =3      BYTE      cmdClass;                     /* The command class */
37884  00  =3      BYTE      cmd;                          /* The command */
37885  00  =3      BYTE      sequenceNumber;               /**/
37886  00  =3  } ZW_SECURITY_2_NONCE_GET_FRAME;
37887  00  =3  
37888  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 628 

37889  00  =3  /* Security 2 Nonce Report command class structs */         
37890  00  =3  /************************************************************/
37891  00  =3  typedef struct _ZW_SECURITY_2_NONCE_REPORT_FRAME_
37892  00  =3  {
37893  00  =3      BYTE      cmdClass;                     /* The command class */
37894  00  =3      BYTE      cmd;                          /* The command */
37895  00  =3      BYTE      sequenceNumber;               /**/
37896  00  =3      BYTE      properties1;                  /* masked byte */
37897  00  =3      BYTE      receiversEntropyInput1;       /* MSB */
37898  00  =3      BYTE      receiversEntropyInput2;       
37899  00  =3      BYTE      receiversEntropyInput3;       
37900  00  =3      BYTE      receiversEntropyInput4;       
37901  00  =3      BYTE      receiversEntropyInput5;       
37902  00  =3      BYTE      receiversEntropyInput6;       
37903  00  =3      BYTE      receiversEntropyInput7;       
37904  00  =3      BYTE      receiversEntropyInput8;       
37905  00  =3      BYTE      receiversEntropyInput9;       
37906  00  =3      BYTE      receiversEntropyInput10;      
37907  00  =3      BYTE      receiversEntropyInput11;      
37908  00  =3      BYTE      receiversEntropyInput12;      
37909  00  =3      BYTE      receiversEntropyInput13;      
37910  00  =3      BYTE      receiversEntropyInput14;      
37911  00  =3      BYTE      receiversEntropyInput15;      
37912  00  =3      BYTE      receiversEntropyInput16;      /* LSB */
37913  00  =3  } ZW_SECURITY_2_NONCE_REPORT_FRAME;
37914  00  =3  
37915  00  =3  /************************************************************/
37916  00  =3  /* Security 2 Message Encapsulation variant group structs */
37917  00  =3  /************************************************************/
37918  00  =3  typedef struct _VG_SECURITY_2_MESSAGE_ENCAPSULATION_1BYTE_VG_
37919  00  =3  {
37920  00  =3      BYTE      extensionLength;              /**/
37921  00  =3      BYTE      properties1;                  /* masked byte */
37922  00  =3      BYTE      extension1;                   
37923  00  =3  } VG_SECURITY_2_MESSAGE_ENCAPSULATION_1BYTE_VG;
37924  00  =3  
37925  00  =3  /************************************************************/
37926  00  =3  /* Security 2 Message Encapsulation variant group structs */
37927  00  =3  /************************************************************/
37928  00  =3  typedef struct _VG_SECURITY_2_MESSAGE_ENCAPSULATION_2BYTE_VG_
37929  00  =3  {
37930  00  =3      BYTE      extensionLength;              /**/
37931  00  =3      BYTE      properties1;                  /* masked byte */
37932  00  =3      BYTE      extension1;                   /* MSB */
37933  00  =3      BYTE      extension2;                   /* LSB */
37934  00  =3  } VG_SECURITY_2_MESSAGE_ENCAPSULATION_2BYTE_VG;
37935  00  =3  
37936  00  =3  /************************************************************/
37937  00  =3  /* Security 2 Message Encapsulation variant group structs */
37938  00  =3  /************************************************************/
37939  00  =3  typedef struct _VG_SECURITY_2_MESSAGE_ENCAPSULATION_3BYTE_VG_
37940  00  =3  {
37941  00  =3      BYTE      extensionLength;              /**/
37942  00  =3      BYTE      properties1;                  /* masked byte */
37943  00  =3      BYTE      extension1;                   /* MSB */
37944  00  =3      BYTE      extension2;                   
37945  00  =3      BYTE      extension3;                   /* LSB */
37946  00  =3  } VG_SECURITY_2_MESSAGE_ENCAPSULATION_3BYTE_VG;
37947  00  =3  
37948  00  =3  /************************************************************/
37949  00  =3  /* Security 2 Message Encapsulation variant group structs */
37950  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 629 

37951  00  =3  typedef struct _VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG_
37952  00  =3  {
37953  00  =3      BYTE      extensionLength;              /**/
37954  00  =3      BYTE      properties1;                  /* masked byte */
37955  00  =3      BYTE      extension1;                   /* MSB */
37956  00  =3      BYTE      extension2;                   
37957  00  =3      BYTE      extension3;                   
37958  00  =3      BYTE      extension4;                   /* LSB */
37959  00  =3  } VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG;
37960  00  =3  
37961  00  =3  /************************************************************/
37962  00  =3  /* Security 2 Message Encapsulation 1byte command class structs */
37963  00  =3  /************************************************************/
37964  00  =3  typedef struct _ZW_SECURITY_2_MESSAGE_ENCAPSULATION_1BYTE_FRAME_
37965  00  =3  {
37966  00  =3      BYTE      cmdClass;                     /* The command class */
37967  00  =3      BYTE      cmd;                          /* The command */
37968  00  =3      BYTE      sequenceNumber;               /**/
37969  00  =3      BYTE      properties1;                  /* masked byte */
37970  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup1;                /**/
37971  00  =3      BYTE      ccmCiphertextObject1;         
37972  00  =3  } ZW_SECURITY_2_MESSAGE_ENCAPSULATION_1BYTE_FRAME;
37973  00  =3  
37974  00  =3  /************************************************************/
37975  00  =3  /* Security 2 Message Encapsulation 2byte command class structs */
37976  00  =3  /************************************************************/
37977  00  =3  typedef struct _ZW_SECURITY_2_MESSAGE_ENCAPSULATION_2BYTE_FRAME_
37978  00  =3  {
37979  00  =3      BYTE      cmdClass;                     /* The command class */
37980  00  =3      BYTE      cmd;                          /* The command */
37981  00  =3      BYTE      sequenceNumber;               /**/
37982  00  =3      BYTE      properties1;                  /* masked byte */
37983  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup1;                /**/
37984  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup2;                /**/
37985  00  =3      BYTE      ccmCiphertextObject1;         /* MSB */
37986  00  =3      BYTE      ccmCiphertextObject2;         /* LSB */
37987  00  =3  } ZW_SECURITY_2_MESSAGE_ENCAPSULATION_2BYTE_FRAME;
37988  00  =3  
37989  00  =3  /************************************************************/
37990  00  =3  /* Security 2 Message Encapsulation 3byte command class structs */
37991  00  =3  /************************************************************/
37992  00  =3  typedef struct _ZW_SECURITY_2_MESSAGE_ENCAPSULATION_3BYTE_FRAME_
37993  00  =3  {
37994  00  =3      BYTE      cmdClass;                     /* The command class */
37995  00  =3      BYTE      cmd;                          /* The command */
37996  00  =3      BYTE      sequenceNumber;               /**/
37997  00  =3      BYTE      properties1;                  /* masked byte */
37998  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup1;                /**/
37999  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup2;                /**/
38000  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup3;                /**/
38001  00  =3      BYTE      ccmCiphertextObject1;         /* MSB */
38002  00  =3      BYTE      ccmCiphertextObject2;         
38003  00  =3      BYTE      ccmCiphertextObject3;         /* LSB */
38004  00  =3  } ZW_SECURITY_2_MESSAGE_ENCAPSULATION_3BYTE_FRAME;
38005  00  =3  
38006  00  =3  /************************************************************/
38007  00  =3  /* Security 2 Message Encapsulation 4byte command class structs */
38008  00  =3  /************************************************************/
38009  00  =3  typedef struct _ZW_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_FRAME_
38010  00  =3  {
38011  00  =3      BYTE      cmdClass;                     /* The command class */
38012  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 630 

38013  00  =3      BYTE      sequenceNumber;               /**/
38014  00  =3      BYTE      properties1;                  /* masked byte */
38015  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup1;                /**/
38016  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup2;                /**/
38017  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup3;                /**/
38018  00  =3      VG_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_VG variantgroup4;                /**/
38019  00  =3      BYTE      ccmCiphertextObject1;         /* MSB */
38020  00  =3      BYTE      ccmCiphertextObject2;         
38021  00  =3      BYTE      ccmCiphertextObject3;         
38022  00  =3      BYTE      ccmCiphertextObject4;         /* LSB */
38023  00  =3  } ZW_SECURITY_2_MESSAGE_ENCAPSULATION_4BYTE_FRAME;
38024  00  =3  
38025  00  =3  /************************************************************/
38026  00  =3  /* Kex Get command class structs */                         
38027  00  =3  /************************************************************/
38028  00  =3  typedef struct _ZW_KEX_GET_FRAME_
38029  00  =3  {
38030  00  =3      BYTE      cmdClass;                     /* The command class */
38031  00  =3      BYTE      cmd;                          /* The command */
38032  00  =3  } ZW_KEX_GET_FRAME;
38033  00  =3  
38034  00  =3  /************************************************************/
38035  00  =3  /* Kex Report command class structs */                      
38036  00  =3  /************************************************************/
38037  00  =3  typedef struct _ZW_KEX_REPORT_FRAME_
38038  00  =3  {
38039  00  =3      BYTE      cmdClass;                     /* The command class */
38040  00  =3      BYTE      cmd;                          /* The command */
38041  00  =3      BYTE      properties1;                  /* masked byte */
38042  00  =3      BYTE      supportedKexSchemes;          /**/
38043  00  =3      BYTE      supportedEcdhProfiles;        /**/
38044  00  =3      BYTE      requestedKeys;                /**/
38045  00  =3  } ZW_KEX_REPORT_FRAME;
38046  00  =3  
38047  00  =3  /************************************************************/
38048  00  =3  /* Kex Set command class structs */                         
38049  00  =3  /************************************************************/
38050  00  =3  typedef struct _ZW_KEX_SET_FRAME_
38051  00  =3  {
38052  00  =3      BYTE      cmdClass;                     /* The command class */
38053  00  =3      BYTE      cmd;                          /* The command */
38054  00  =3      BYTE      properties1;                  /* masked byte */
38055  00  =3      BYTE      selectedKexScheme;            /**/
38056  00  =3      BYTE      selectedEcdhProfile;          /**/
38057  00  =3      BYTE      grantedKeys;                  /**/
38058  00  =3  } ZW_KEX_SET_FRAME;
38059  00  =3  
38060  00  =3  /************************************************************/
38061  00  =3  /* Kex Fail command class structs */                        
38062  00  =3  /************************************************************/
38063  00  =3  typedef struct _ZW_KEX_FAIL_FRAME_
38064  00  =3  {
38065  00  =3      BYTE      cmdClass;                     /* The command class */
38066  00  =3      BYTE      cmd;                          /* The command */
38067  00  =3      BYTE      kexFailType;                  /**/
38068  00  =3  } ZW_KEX_FAIL_FRAME;
38069  00  =3  
38070  00  =3  /************************************************************/
38071  00  =3  /* Public Key Report 1byte command class structs */         
38072  00  =3  /************************************************************/
38073  00  =3  typedef struct _ZW_PUBLIC_KEY_REPORT_1BYTE_FRAME_
38074  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 631 

38075  00  =3      BYTE      cmdClass;                     /* The command class */
38076  00  =3      BYTE      cmd;                          /* The command */
38077  00  =3      BYTE      properties1;                  /* masked byte */
38078  00  =3      BYTE      ecdhPublicKey1;               
38079  00  =3  } ZW_PUBLIC_KEY_REPORT_1BYTE_FRAME;
38080  00  =3  
38081  00  =3  /************************************************************/
38082  00  =3  /* Public Key Report 2byte command class structs */         
38083  00  =3  /************************************************************/
38084  00  =3  typedef struct _ZW_PUBLIC_KEY_REPORT_2BYTE_FRAME_
38085  00  =3  {
38086  00  =3      BYTE      cmdClass;                     /* The command class */
38087  00  =3      BYTE      cmd;                          /* The command */
38088  00  =3      BYTE      properties1;                  /* masked byte */
38089  00  =3      BYTE      ecdhPublicKey1;               /* MSB */
38090  00  =3      BYTE      ecdhPublicKey2;               /* LSB */
38091  00  =3  } ZW_PUBLIC_KEY_REPORT_2BYTE_FRAME;
38092  00  =3  
38093  00  =3  /************************************************************/
38094  00  =3  /* Public Key Report 3byte command class structs */         
38095  00  =3  /************************************************************/
38096  00  =3  typedef struct _ZW_PUBLIC_KEY_REPORT_3BYTE_FRAME_
38097  00  =3  {
38098  00  =3      BYTE      cmdClass;                     /* The command class */
38099  00  =3      BYTE      cmd;                          /* The command */
38100  00  =3      BYTE      properties1;                  /* masked byte */
38101  00  =3      BYTE      ecdhPublicKey1;               /* MSB */
38102  00  =3      BYTE      ecdhPublicKey2;               
38103  00  =3      BYTE      ecdhPublicKey3;               /* LSB */
38104  00  =3  } ZW_PUBLIC_KEY_REPORT_3BYTE_FRAME;
38105  00  =3  
38106  00  =3  /************************************************************/
38107  00  =3  /* Public Key Report 4byte command class structs */         
38108  00  =3  /************************************************************/
38109  00  =3  typedef struct _ZW_PUBLIC_KEY_REPORT_4BYTE_FRAME_
38110  00  =3  {
38111  00  =3      BYTE      cmdClass;                     /* The command class */
38112  00  =3      BYTE      cmd;                          /* The command */
38113  00  =3      BYTE      properties1;                  /* masked byte */
38114  00  =3      BYTE      ecdhPublicKey1;               /* MSB */
38115  00  =3      BYTE      ecdhPublicKey2;               
38116  00  =3      BYTE      ecdhPublicKey3;               
38117  00  =3      BYTE      ecdhPublicKey4;               /* LSB */
38118  00  =3  } ZW_PUBLIC_KEY_REPORT_4BYTE_FRAME;
38119  00  =3  
38120  00  =3  /************************************************************/
38121  00  =3  /* Security 2 Network Key Get command class structs */      
38122  00  =3  /************************************************************/
38123  00  =3  typedef struct _ZW_SECURITY_2_NETWORK_KEY_GET_FRAME_
38124  00  =3  {
38125  00  =3      BYTE      cmdClass;                     /* The command class */
38126  00  =3      BYTE      cmd;                          /* The command */
38127  00  =3      BYTE      requestedKey;                 /**/
38128  00  =3  } ZW_SECURITY_2_NETWORK_KEY_GET_FRAME;
38129  00  =3  
38130  00  =3  /************************************************************/
38131  00  =3  /* Security 2 Network Key Report command class structs */   
38132  00  =3  /************************************************************/
38133  00  =3  typedef struct _ZW_SECURITY_2_NETWORK_KEY_REPORT_FRAME_
38134  00  =3  {
38135  00  =3      BYTE      cmdClass;                     /* The command class */
38136  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 632 

38137  00  =3      BYTE      grantedKey;                   /**/
38138  00  =3      BYTE      networkKey1;                  /* MSB */
38139  00  =3      BYTE      networkKey2;                  
38140  00  =3      BYTE      networkKey3;                  
38141  00  =3      BYTE      networkKey4;                  
38142  00  =3      BYTE      networkKey5;                  
38143  00  =3      BYTE      networkKey6;                  
38144  00  =3      BYTE      networkKey7;                  
38145  00  =3      BYTE      networkKey8;                  
38146  00  =3      BYTE      networkKey9;                  
38147  00  =3      BYTE      networkKey10;                 
38148  00  =3      BYTE      networkKey11;                 
38149  00  =3      BYTE      networkKey12;                 
38150  00  =3      BYTE      networkKey13;                 
38151  00  =3      BYTE      networkKey14;                 
38152  00  =3      BYTE      networkKey15;                 
38153  00  =3      BYTE      networkKey16;                 /* LSB */
38154  00  =3  } ZW_SECURITY_2_NETWORK_KEY_REPORT_FRAME;
38155  00  =3  
38156  00  =3  /************************************************************/
38157  00  =3  /* Security 2 Network Key Verify command class structs */   
38158  00  =3  /************************************************************/
38159  00  =3  typedef struct _ZW_SECURITY_2_NETWORK_KEY_VERIFY_FRAME_
38160  00  =3  {
38161  00  =3      BYTE      cmdClass;                     /* The command class */
38162  00  =3      BYTE      cmd;                          /* The command */
38163  00  =3  } ZW_SECURITY_2_NETWORK_KEY_VERIFY_FRAME;
38164  00  =3  
38165  00  =3  /************************************************************/
38166  00  =3  /* Security 2 Transfer End command class structs */         
38167  00  =3  /************************************************************/
38168  00  =3  typedef struct _ZW_SECURITY_2_TRANSFER_END_FRAME_
38169  00  =3  {
38170  00  =3      BYTE      cmdClass;                     /* The command class */
38171  00  =3      BYTE      cmd;                          /* The command */
38172  00  =3      BYTE      properties1;                  /* masked byte */
38173  00  =3  } ZW_SECURITY_2_TRANSFER_END_FRAME;
38174  00  =3  
38175  00  =3  /************************************************************/
38176  00  =3  /* Security 2 Commands Supported Get command class structs */
38177  00  =3  /************************************************************/
38178  00  =3  typedef struct _ZW_SECURITY_2_COMMANDS_SUPPORTED_GET_FRAME_
38179  00  =3  {
38180  00  =3      BYTE      cmdClass;                     /* The command class */
38181  00  =3      BYTE      cmd;                          /* The command */
38182  00  =3  } ZW_SECURITY_2_COMMANDS_SUPPORTED_GET_FRAME;
38183  00  =3  
38184  00  =3  /************************************************************/
38185  00  =3  /* Security 2 Commands Supported Report 1byte command class structs */
38186  00  =3  /************************************************************/
38187  00  =3  typedef struct _ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_1BYTE_FRAME_
38188  00  =3  {
38189  00  =3      BYTE      cmdClass;                     /* The command class */
38190  00  =3      BYTE      cmd;                          /* The command */
38191  00  =3      BYTE      commandClass1;                
38192  00  =3  } ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_1BYTE_FRAME;
38193  00  =3  
38194  00  =3  /************************************************************/
38195  00  =3  /* Security 2 Commands Supported Report 2byte command class structs */
38196  00  =3  /************************************************************/
38197  00  =3  typedef struct _ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_2BYTE_FRAME_
38198  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 633 

38199  00  =3      BYTE      cmdClass;                     /* The command class */
38200  00  =3      BYTE      cmd;                          /* The command */
38201  00  =3      BYTE      commandClass1;                /* MSB */
38202  00  =3      BYTE      commandClass2;                /* LSB */
38203  00  =3  } ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_2BYTE_FRAME;
38204  00  =3  
38205  00  =3  /************************************************************/
38206  00  =3  /* Security 2 Commands Supported Report 3byte command class structs */
38207  00  =3  /************************************************************/
38208  00  =3  typedef struct _ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_3BYTE_FRAME_
38209  00  =3  {
38210  00  =3      BYTE      cmdClass;                     /* The command class */
38211  00  =3      BYTE      cmd;                          /* The command */
38212  00  =3      BYTE      commandClass1;                /* MSB */
38213  00  =3      BYTE      commandClass2;                
38214  00  =3      BYTE      commandClass3;                /* LSB */
38215  00  =3  } ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_3BYTE_FRAME;
38216  00  =3  
38217  00  =3  /************************************************************/
38218  00  =3  /* Security 2 Commands Supported Report 4byte command class structs */
38219  00  =3  /************************************************************/
38220  00  =3  typedef struct _ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_4BYTE_FRAME_
38221  00  =3  {
38222  00  =3      BYTE      cmdClass;                     /* The command class */
38223  00  =3      BYTE      cmd;                          /* The command */
38224  00  =3      BYTE      commandClass1;                /* MSB */
38225  00  =3      BYTE      commandClass2;                
38226  00  =3      BYTE      commandClass3;                
38227  00  =3      BYTE      commandClass4;                /* LSB */
38228  00  =3  } ZW_SECURITY_2_COMMANDS_SUPPORTED_REPORT_4BYTE_FRAME;
38229  00  =3  
38230  00  =3  /************************************************************/
38231  00  =3  /* Security 2 Capabilities Get command class structs */     
38232  00  =3  /************************************************************/
38233  00  =3  typedef struct _ZW_SECURITY_2_CAPABILITIES_GET_FRAME_
38234  00  =3  {
38235  00  =3      BYTE      cmdClass;                     /* The command class */
38236  00  =3      BYTE      cmd;                          /* The command */
38237  00  =3  } ZW_SECURITY_2_CAPABILITIES_GET_FRAME;
38238  00  =3  
38239  00  =3  /************************************************************/
38240  00  =3  /* Security 2 Capabilities Report command class structs */  
38241  00  =3  /************************************************************/
38242  00  =3  typedef struct _ZW_SECURITY_2_CAPABILITIES_REPORT_FRAME_
38243  00  =3  {
38244  00  =3      BYTE      cmdClass;                     /* The command class */
38245  00  =3      BYTE      cmd;                          /* The command */
38246  00  =3  } ZW_SECURITY_2_CAPABILITIES_REPORT_FRAME;
38247  00  =3  
38248  00  =3  /************************************************************/
38249  00  =3  /* Irrigation System Info Get command class structs */      
38250  00  =3  /************************************************************/
38251  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_INFO_GET_FRAME_
38252  00  =3  {
38253  00  =3      BYTE      cmdClass;                     /* The command class */
38254  00  =3      BYTE      cmd;                          /* The command */
38255  00  =3  } ZW_IRRIGATION_SYSTEM_INFO_GET_FRAME;
38256  00  =3  
38257  00  =3  /************************************************************/
38258  00  =3  /* Irrigation System Info Report command class structs */   
38259  00  =3  /************************************************************/
38260  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_INFO_REPORT_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 634 

38261  00  =3  {
38262  00  =3      BYTE      cmdClass;                     /* The command class */
38263  00  =3      BYTE      cmd;                          /* The command */
38264  00  =3      BYTE      properties1;                  /* masked byte */
38265  00  =3      BYTE      totalNumberOfValves;          /**/
38266  00  =3      BYTE      totalNumberOfValveTables;     /**/
38267  00  =3      BYTE      properties2;                  /* masked byte */
38268  00  =3  } ZW_IRRIGATION_SYSTEM_INFO_REPORT_FRAME;
38269  00  =3  
38270  00  =3  /************************************************************/
38271  00  =3  /* Irrigation System Status Get command class structs */    
38272  00  =3  /************************************************************/
38273  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_STATUS_GET_FRAME_
38274  00  =3  {
38275  00  =3      BYTE      cmdClass;                     /* The command class */
38276  00  =3      BYTE      cmd;                          /* The command */
38277  00  =3  } ZW_IRRIGATION_SYSTEM_STATUS_GET_FRAME;
38278  00  =3  
38279  00  =3  /************************************************************/
38280  00  =3  /* Irrigation System Status Report 1byte command class structs */
38281  00  =3  /************************************************************/
38282  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_STATUS_REPORT_1BYTE_FRAME_
38283  00  =3  {
38284  00  =3      BYTE      cmdClass;                     /* The command class */
38285  00  =3      BYTE      cmd;                          /* The command */
38286  00  =3      BYTE      systemVoltage;                /**/
38287  00  =3      BYTE      sensorStatus;                 /**/
38288  00  =3      BYTE      properties1;                  /* masked byte */
38289  00  =3      BYTE      flowValue1;                   
38290  00  =3      BYTE      properties2;                  /* masked byte */
38291  00  =3      BYTE      pressureValue1;               
38292  00  =3      BYTE      shutoffDuration;              /**/
38293  00  =3      BYTE      systemErrorStatus;            /**/
38294  00  =3      BYTE      properties3;                  /* masked byte */
38295  00  =3      BYTE      valveId;                      /**/
38296  00  =3  } ZW_IRRIGATION_SYSTEM_STATUS_REPORT_1BYTE_FRAME;
38297  00  =3  
38298  00  =3  /************************************************************/
38299  00  =3  /* Irrigation System Status Report 2byte command class structs */
38300  00  =3  /************************************************************/
38301  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_STATUS_REPORT_2BYTE_FRAME_
38302  00  =3  {
38303  00  =3      BYTE      cmdClass;                     /* The command class */
38304  00  =3      BYTE      cmd;                          /* The command */
38305  00  =3      BYTE      systemVoltage;                /**/
38306  00  =3      BYTE      sensorStatus;                 /**/
38307  00  =3      BYTE      properties1;                  /* masked byte */
38308  00  =3      BYTE      flowValue1;                   /* MSB */
38309  00  =3      BYTE      flowValue2;                   /* LSB */
38310  00  =3      BYTE      properties2;                  /* masked byte */
38311  00  =3      BYTE      pressureValue1;               /* MSB */
38312  00  =3      BYTE      pressureValue2;               /* LSB */
38313  00  =3      BYTE      shutoffDuration;              /**/
38314  00  =3      BYTE      systemErrorStatus;            /**/
38315  00  =3      BYTE      properties3;                  /* masked byte */
38316  00  =3      BYTE      valveId;                      /**/
38317  00  =3  } ZW_IRRIGATION_SYSTEM_STATUS_REPORT_2BYTE_FRAME;
38318  00  =3  
38319  00  =3  /************************************************************/
38320  00  =3  /* Irrigation System Status Report 3byte command class structs */
38321  00  =3  /************************************************************/
38322  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_STATUS_REPORT_3BYTE_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 635 

38323  00  =3  {
38324  00  =3      BYTE      cmdClass;                     /* The command class */
38325  00  =3      BYTE      cmd;                          /* The command */
38326  00  =3      BYTE      systemVoltage;                /**/
38327  00  =3      BYTE      sensorStatus;                 /**/
38328  00  =3      BYTE      properties1;                  /* masked byte */
38329  00  =3      BYTE      flowValue1;                   /* MSB */
38330  00  =3      BYTE      flowValue2;                   
38331  00  =3      BYTE      flowValue3;                   /* LSB */
38332  00  =3      BYTE      properties2;                  /* masked byte */
38333  00  =3      BYTE      pressureValue1;               /* MSB */
38334  00  =3      BYTE      pressureValue2;               
38335  00  =3      BYTE      pressureValue3;               /* LSB */
38336  00  =3      BYTE      shutoffDuration;              /**/
38337  00  =3      BYTE      systemErrorStatus;            /**/
38338  00  =3      BYTE      properties3;                  /* masked byte */
38339  00  =3      BYTE      valveId;                      /**/
38340  00  =3  } ZW_IRRIGATION_SYSTEM_STATUS_REPORT_3BYTE_FRAME;
38341  00  =3  
38342  00  =3  /************************************************************/
38343  00  =3  /* Irrigation System Status Report 4byte command class structs */
38344  00  =3  /************************************************************/
38345  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_STATUS_REPORT_4BYTE_FRAME_
38346  00  =3  {
38347  00  =3      BYTE      cmdClass;                     /* The command class */
38348  00  =3      BYTE      cmd;                          /* The command */
38349  00  =3      BYTE      systemVoltage;                /**/
38350  00  =3      BYTE      sensorStatus;                 /**/
38351  00  =3      BYTE      properties1;                  /* masked byte */
38352  00  =3      BYTE      flowValue1;                   /* MSB */
38353  00  =3      BYTE      flowValue2;                   
38354  00  =3      BYTE      flowValue3;                   
38355  00  =3      BYTE      flowValue4;                   /* LSB */
38356  00  =3      BYTE      properties2;                  /* masked byte */
38357  00  =3      BYTE      pressureValue1;               /* MSB */
38358  00  =3      BYTE      pressureValue2;               
38359  00  =3      BYTE      pressureValue3;               
38360  00  =3      BYTE      pressureValue4;               /* LSB */
38361  00  =3      BYTE      shutoffDuration;              /**/
38362  00  =3      BYTE      systemErrorStatus;            /**/
38363  00  =3      BYTE      properties3;                  /* masked byte */
38364  00  =3      BYTE      valveId;                      /**/
38365  00  =3  } ZW_IRRIGATION_SYSTEM_STATUS_REPORT_4BYTE_FRAME;
38366  00  =3  
38367  00  =3  /************************************************************/
38368  00  =3  /* Irrigation System Config Set 1byte command class structs */
38369  00  =3  /************************************************************/
38370  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_SET_1BYTE_FRAME_
38371  00  =3  {
38372  00  =3      BYTE      cmdClass;                     /* The command class */
38373  00  =3      BYTE      cmd;                          /* The command */
38374  00  =3      BYTE      masterValveDelay;             /**/
38375  00  =3      BYTE      properties1;                  /* masked byte */
38376  00  =3      BYTE      highPressureThresholdValue1;  
38377  00  =3      BYTE      properties2;                  /* masked byte */
38378  00  =3      BYTE      lowPressureThresholdValue1;   
38379  00  =3      BYTE      sensorPolarity;               /**/
38380  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_SET_1BYTE_FRAME;
38381  00  =3  
38382  00  =3  /************************************************************/
38383  00  =3  /* Irrigation System Config Set 2byte command class structs */
38384  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 636 

38385  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_SET_2BYTE_FRAME_
38386  00  =3  {
38387  00  =3      BYTE      cmdClass;                     /* The command class */
38388  00  =3      BYTE      cmd;                          /* The command */
38389  00  =3      BYTE      masterValveDelay;             /**/
38390  00  =3      BYTE      properties1;                  /* masked byte */
38391  00  =3      BYTE      highPressureThresholdValue1;  /* MSB */
38392  00  =3      BYTE      highPressureThresholdValue2;  /* LSB */
38393  00  =3      BYTE      properties2;                  /* masked byte */
38394  00  =3      BYTE      lowPressureThresholdValue1;   /* MSB */
38395  00  =3      BYTE      lowPressureThresholdValue2;   /* LSB */
38396  00  =3      BYTE      sensorPolarity;               /**/
38397  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_SET_2BYTE_FRAME;
38398  00  =3  
38399  00  =3  /************************************************************/
38400  00  =3  /* Irrigation System Config Set 3byte command class structs */
38401  00  =3  /************************************************************/
38402  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_SET_3BYTE_FRAME_
38403  00  =3  {
38404  00  =3      BYTE      cmdClass;                     /* The command class */
38405  00  =3      BYTE      cmd;                          /* The command */
38406  00  =3      BYTE      masterValveDelay;             /**/
38407  00  =3      BYTE      properties1;                  /* masked byte */
38408  00  =3      BYTE      highPressureThresholdValue1;  /* MSB */
38409  00  =3      BYTE      highPressureThresholdValue2;  
38410  00  =3      BYTE      highPressureThresholdValue3;  /* LSB */
38411  00  =3      BYTE      properties2;                  /* masked byte */
38412  00  =3      BYTE      lowPressureThresholdValue1;   /* MSB */
38413  00  =3      BYTE      lowPressureThresholdValue2;   
38414  00  =3      BYTE      lowPressureThresholdValue3;   /* LSB */
38415  00  =3      BYTE      sensorPolarity;               /**/
38416  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_SET_3BYTE_FRAME;
38417  00  =3  
38418  00  =3  /************************************************************/
38419  00  =3  /* Irrigation System Config Set 4byte command class structs */
38420  00  =3  /************************************************************/
38421  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_SET_4BYTE_FRAME_
38422  00  =3  {
38423  00  =3      BYTE      cmdClass;                     /* The command class */
38424  00  =3      BYTE      cmd;                          /* The command */
38425  00  =3      BYTE      masterValveDelay;             /**/
38426  00  =3      BYTE      properties1;                  /* masked byte */
38427  00  =3      BYTE      highPressureThresholdValue1;  /* MSB */
38428  00  =3      BYTE      highPressureThresholdValue2;  
38429  00  =3      BYTE      highPressureThresholdValue3;  
38430  00  =3      BYTE      highPressureThresholdValue4;  /* LSB */
38431  00  =3      BYTE      properties2;                  /* masked byte */
38432  00  =3      BYTE      lowPressureThresholdValue1;   /* MSB */
38433  00  =3      BYTE      lowPressureThresholdValue2;   
38434  00  =3      BYTE      lowPressureThresholdValue3;   
38435  00  =3      BYTE      lowPressureThresholdValue4;   /* LSB */
38436  00  =3      BYTE      sensorPolarity;               /**/
38437  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_SET_4BYTE_FRAME;
38438  00  =3  
38439  00  =3  /************************************************************/
38440  00  =3  /* Irrigation System Config Get command class structs */    
38441  00  =3  /************************************************************/
38442  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_GET_FRAME_
38443  00  =3  {
38444  00  =3      BYTE      cmdClass;                     /* The command class */
38445  00  =3      BYTE      cmd;                          /* The command */
38446  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_GET_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 637 

38447  00  =3  
38448  00  =3  /************************************************************/
38449  00  =3  /* Irrigation System Config Report 1byte command class structs */
38450  00  =3  /************************************************************/
38451  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_1BYTE_FRAME_
38452  00  =3  {
38453  00  =3      BYTE      cmdClass;                     /* The command class */
38454  00  =3      BYTE      cmd;                          /* The command */
38455  00  =3      BYTE      masterValveDelay;             /**/
38456  00  =3      BYTE      properties1;                  /* masked byte */
38457  00  =3      BYTE      highPressureThresholdValue1;  
38458  00  =3      BYTE      properties2;                  /* masked byte */
38459  00  =3      BYTE      lowPressureThresholdValue1;   
38460  00  =3      BYTE      sensorPolarity;               /**/
38461  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_1BYTE_FRAME;
38462  00  =3  
38463  00  =3  /************************************************************/
38464  00  =3  /* Irrigation System Config Report 2byte command class structs */
38465  00  =3  /************************************************************/
38466  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_2BYTE_FRAME_
38467  00  =3  {
38468  00  =3      BYTE      cmdClass;                     /* The command class */
38469  00  =3      BYTE      cmd;                          /* The command */
38470  00  =3      BYTE      masterValveDelay;             /**/
38471  00  =3      BYTE      properties1;                  /* masked byte */
38472  00  =3      BYTE      highPressureThresholdValue1;  /* MSB */
38473  00  =3      BYTE      highPressureThresholdValue2;  /* LSB */
38474  00  =3      BYTE      properties2;                  /* masked byte */
38475  00  =3      BYTE      lowPressureThresholdValue1;   /* MSB */
38476  00  =3      BYTE      lowPressureThresholdValue2;   /* LSB */
38477  00  =3      BYTE      sensorPolarity;               /**/
38478  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_2BYTE_FRAME;
38479  00  =3  
38480  00  =3  /************************************************************/
38481  00  =3  /* Irrigation System Config Report 3byte command class structs */
38482  00  =3  /************************************************************/
38483  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_3BYTE_FRAME_
38484  00  =3  {
38485  00  =3      BYTE      cmdClass;                     /* The command class */
38486  00  =3      BYTE      cmd;                          /* The command */
38487  00  =3      BYTE      masterValveDelay;             /**/
38488  00  =3      BYTE      properties1;                  /* masked byte */
38489  00  =3      BYTE      highPressureThresholdValue1;  /* MSB */
38490  00  =3      BYTE      highPressureThresholdValue2;  
38491  00  =3      BYTE      highPressureThresholdValue3;  /* LSB */
38492  00  =3      BYTE      properties2;                  /* masked byte */
38493  00  =3      BYTE      lowPressureThresholdValue1;   /* MSB */
38494  00  =3      BYTE      lowPressureThresholdValue2;   
38495  00  =3      BYTE      lowPressureThresholdValue3;   /* LSB */
38496  00  =3      BYTE      sensorPolarity;               /**/
38497  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_3BYTE_FRAME;
38498  00  =3  
38499  00  =3  /************************************************************/
38500  00  =3  /* Irrigation System Config Report 4byte command class structs */
38501  00  =3  /************************************************************/
38502  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_4BYTE_FRAME_
38503  00  =3  {
38504  00  =3      BYTE      cmdClass;                     /* The command class */
38505  00  =3      BYTE      cmd;                          /* The command */
38506  00  =3      BYTE      masterValveDelay;             /**/
38507  00  =3      BYTE      properties1;                  /* masked byte */
38508  00  =3      BYTE      highPressureThresholdValue1;  /* MSB */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 638 

38509  00  =3      BYTE      highPressureThresholdValue2;  
38510  00  =3      BYTE      highPressureThresholdValue3;  
38511  00  =3      BYTE      highPressureThresholdValue4;  /* LSB */
38512  00  =3      BYTE      properties2;                  /* masked byte */
38513  00  =3      BYTE      lowPressureThresholdValue1;   /* MSB */
38514  00  =3      BYTE      lowPressureThresholdValue2;   
38515  00  =3      BYTE      lowPressureThresholdValue3;   
38516  00  =3      BYTE      lowPressureThresholdValue4;   /* LSB */
38517  00  =3      BYTE      sensorPolarity;               /**/
38518  00  =3  } ZW_IRRIGATION_SYSTEM_CONFIG_REPORT_4BYTE_FRAME;
38519  00  =3  
38520  00  =3  /************************************************************/
38521  00  =3  /* Irrigation Valve Info Get command class structs */       
38522  00  =3  /************************************************************/
38523  00  =3  typedef struct _ZW_IRRIGATION_VALVE_INFO_GET_FRAME_
38524  00  =3  {
38525  00  =3      BYTE      cmdClass;                     /* The command class */
38526  00  =3      BYTE      cmd;                          /* The command */
38527  00  =3      BYTE      properties1;                  /* masked byte */
38528  00  =3      BYTE      valveId;                      /**/
38529  00  =3  } ZW_IRRIGATION_VALVE_INFO_GET_FRAME;
38530  00  =3  
38531  00  =3  /************************************************************/
38532  00  =3  /* Irrigation Valve Info Report command class structs */    
38533  00  =3  /************************************************************/
38534  00  =3  typedef struct _ZW_IRRIGATION_VALVE_INFO_REPORT_FRAME_
38535  00  =3  {
38536  00  =3      BYTE      cmdClass;                     /* The command class */
38537  00  =3      BYTE      cmd;                          /* The command */
38538  00  =3      BYTE      properties1;                  /* masked byte */
38539  00  =3      BYTE      valveId;                      /**/
38540  00  =3      BYTE      nominalCurrent;               /**/
38541  00  =3      BYTE      valveErrorStatus;             /**/
38542  00  =3  } ZW_IRRIGATION_VALVE_INFO_REPORT_FRAME;
38543  00  =3  
38544  00  =3  /************************************************************/
38545  00  =3  /* Irrigation Valve Config Set 1byte command class structs */
38546  00  =3  /************************************************************/
38547  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_SET_1BYTE_FRAME_
38548  00  =3  {
38549  00  =3      BYTE      cmdClass;                     /* The command class */
38550  00  =3      BYTE      cmd;                          /* The command */
38551  00  =3      BYTE      properties1;                  /* masked byte */
38552  00  =3      BYTE      valveId;                      /**/
38553  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38554  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38555  00  =3      BYTE      properties2;                  /* masked byte */
38556  00  =3      BYTE      maximumFlowValue1;            
38557  00  =3      BYTE      properties3;                  /* masked byte */
38558  00  =3      BYTE      flowHighThresholdValue1;      
38559  00  =3      BYTE      properties4;                  /* masked byte */
38560  00  =3      BYTE      flowLowThresholdValue1;       
38561  00  =3      BYTE      sensorUsage;                  /**/
38562  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_SET_1BYTE_FRAME;
38563  00  =3  
38564  00  =3  /************************************************************/
38565  00  =3  /* Irrigation Valve Config Set 2byte command class structs */
38566  00  =3  /************************************************************/
38567  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_SET_2BYTE_FRAME_
38568  00  =3  {
38569  00  =3      BYTE      cmdClass;                     /* The command class */
38570  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 639 

38571  00  =3      BYTE      properties1;                  /* masked byte */
38572  00  =3      BYTE      valveId;                      /**/
38573  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38574  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38575  00  =3      BYTE      properties2;                  /* masked byte */
38576  00  =3      BYTE      maximumFlowValue1;            /* MSB */
38577  00  =3      BYTE      maximumFlowValue2;            /* LSB */
38578  00  =3      BYTE      properties3;                  /* masked byte */
38579  00  =3      BYTE      flowHighThresholdValue1;      /* MSB */
38580  00  =3      BYTE      flowHighThresholdValue2;      /* LSB */
38581  00  =3      BYTE      properties4;                  /* masked byte */
38582  00  =3      BYTE      flowLowThresholdValue1;       /* MSB */
38583  00  =3      BYTE      flowLowThresholdValue2;       /* LSB */
38584  00  =3      BYTE      sensorUsage;                  /**/
38585  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_SET_2BYTE_FRAME;
38586  00  =3  
38587  00  =3  /************************************************************/
38588  00  =3  /* Irrigation Valve Config Set 3byte command class structs */
38589  00  =3  /************************************************************/
38590  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_SET_3BYTE_FRAME_
38591  00  =3  {
38592  00  =3      BYTE      cmdClass;                     /* The command class */
38593  00  =3      BYTE      cmd;                          /* The command */
38594  00  =3      BYTE      properties1;                  /* masked byte */
38595  00  =3      BYTE      valveId;                      /**/
38596  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38597  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38598  00  =3      BYTE      properties2;                  /* masked byte */
38599  00  =3      BYTE      maximumFlowValue1;            /* MSB */
38600  00  =3      BYTE      maximumFlowValue2;            
38601  00  =3      BYTE      maximumFlowValue3;            /* LSB */
38602  00  =3      BYTE      properties3;                  /* masked byte */
38603  00  =3      BYTE      flowHighThresholdValue1;      /* MSB */
38604  00  =3      BYTE      flowHighThresholdValue2;      
38605  00  =3      BYTE      flowHighThresholdValue3;      /* LSB */
38606  00  =3      BYTE      properties4;                  /* masked byte */
38607  00  =3      BYTE      flowLowThresholdValue1;       /* MSB */
38608  00  =3      BYTE      flowLowThresholdValue2;       
38609  00  =3      BYTE      flowLowThresholdValue3;       /* LSB */
38610  00  =3      BYTE      sensorUsage;                  /**/
38611  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_SET_3BYTE_FRAME;
38612  00  =3  
38613  00  =3  /************************************************************/
38614  00  =3  /* Irrigation Valve Config Set 4byte command class structs */
38615  00  =3  /************************************************************/
38616  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_SET_4BYTE_FRAME_
38617  00  =3  {
38618  00  =3      BYTE      cmdClass;                     /* The command class */
38619  00  =3      BYTE      cmd;                          /* The command */
38620  00  =3      BYTE      properties1;                  /* masked byte */
38621  00  =3      BYTE      valveId;                      /**/
38622  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38623  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38624  00  =3      BYTE      properties2;                  /* masked byte */
38625  00  =3      BYTE      maximumFlowValue1;            /* MSB */
38626  00  =3      BYTE      maximumFlowValue2;            
38627  00  =3      BYTE      maximumFlowValue3;            
38628  00  =3      BYTE      maximumFlowValue4;            /* LSB */
38629  00  =3      BYTE      properties3;                  /* masked byte */
38630  00  =3      BYTE      flowHighThresholdValue1;      /* MSB */
38631  00  =3      BYTE      flowHighThresholdValue2;      
38632  00  =3      BYTE      flowHighThresholdValue3;      
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 640 

38633  00  =3      BYTE      flowHighThresholdValue4;      /* LSB */
38634  00  =3      BYTE      properties4;                  /* masked byte */
38635  00  =3      BYTE      flowLowThresholdValue1;       /* MSB */
38636  00  =3      BYTE      flowLowThresholdValue2;       
38637  00  =3      BYTE      flowLowThresholdValue3;       
38638  00  =3      BYTE      flowLowThresholdValue4;       /* LSB */
38639  00  =3      BYTE      sensorUsage;                  /**/
38640  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_SET_4BYTE_FRAME;
38641  00  =3  
38642  00  =3  /************************************************************/
38643  00  =3  /* Irrigation Valve Config Get command class structs */     
38644  00  =3  /************************************************************/
38645  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_GET_FRAME_
38646  00  =3  {
38647  00  =3      BYTE      cmdClass;                     /* The command class */
38648  00  =3      BYTE      cmd;                          /* The command */
38649  00  =3      BYTE      properties1;                  /* masked byte */
38650  00  =3      BYTE      valveId;                      /**/
38651  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_GET_FRAME;
38652  00  =3  
38653  00  =3  /************************************************************/
38654  00  =3  /* Irrigation Valve Config Report 1byte command class structs */
38655  00  =3  /************************************************************/
38656  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_REPORT_1BYTE_FRAME_
38657  00  =3  {
38658  00  =3      BYTE      cmdClass;                     /* The command class */
38659  00  =3      BYTE      cmd;                          /* The command */
38660  00  =3      BYTE      properties1;                  /* masked byte */
38661  00  =3      BYTE      valveId;                      /**/
38662  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38663  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38664  00  =3      BYTE      properties2;                  /* masked byte */
38665  00  =3      BYTE      maximumFlowValue1;            
38666  00  =3      BYTE      properties3;                  /* masked byte */
38667  00  =3      BYTE      flowHighThresholdValue1;      
38668  00  =3      BYTE      properties4;                  /* masked byte */
38669  00  =3      BYTE      flowLowThresholdValue1;       
38670  00  =3      BYTE      sensorUsage;                  /**/
38671  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_REPORT_1BYTE_FRAME;
38672  00  =3  
38673  00  =3  /************************************************************/
38674  00  =3  /* Irrigation Valve Config Report 2byte command class structs */
38675  00  =3  /************************************************************/
38676  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_REPORT_2BYTE_FRAME_
38677  00  =3  {
38678  00  =3      BYTE      cmdClass;                     /* The command class */
38679  00  =3      BYTE      cmd;                          /* The command */
38680  00  =3      BYTE      properties1;                  /* masked byte */
38681  00  =3      BYTE      valveId;                      /**/
38682  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38683  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38684  00  =3      BYTE      properties2;                  /* masked byte */
38685  00  =3      BYTE      maximumFlowValue1;            /* MSB */
38686  00  =3      BYTE      maximumFlowValue2;            /* LSB */
38687  00  =3      BYTE      properties3;                  /* masked byte */
38688  00  =3      BYTE      flowHighThresholdValue1;      /* MSB */
38689  00  =3      BYTE      flowHighThresholdValue2;      /* LSB */
38690  00  =3      BYTE      properties4;                  /* masked byte */
38691  00  =3      BYTE      flowLowThresholdValue1;       /* MSB */
38692  00  =3      BYTE      flowLowThresholdValue2;       /* LSB */
38693  00  =3      BYTE      sensorUsage;                  /**/
38694  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_REPORT_2BYTE_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 641 

38695  00  =3  
38696  00  =3  /************************************************************/
38697  00  =3  /* Irrigation Valve Config Report 3byte command class structs */
38698  00  =3  /************************************************************/
38699  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_REPORT_3BYTE_FRAME_
38700  00  =3  {
38701  00  =3      BYTE      cmdClass;                     /* The command class */
38702  00  =3      BYTE      cmd;                          /* The command */
38703  00  =3      BYTE      properties1;                  /* masked byte */
38704  00  =3      BYTE      valveId;                      /**/
38705  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38706  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38707  00  =3      BYTE      properties2;                  /* masked byte */
38708  00  =3      BYTE      maximumFlowValue1;            /* MSB */
38709  00  =3      BYTE      maximumFlowValue2;            
38710  00  =3      BYTE      maximumFlowValue3;            /* LSB */
38711  00  =3      BYTE      properties3;                  /* masked byte */
38712  00  =3      BYTE      flowHighThresholdValue1;      /* MSB */
38713  00  =3      BYTE      flowHighThresholdValue2;      
38714  00  =3      BYTE      flowHighThresholdValue3;      /* LSB */
38715  00  =3      BYTE      properties4;                  /* masked byte */
38716  00  =3      BYTE      flowLowThresholdValue1;       /* MSB */
38717  00  =3      BYTE      flowLowThresholdValue2;       
38718  00  =3      BYTE      flowLowThresholdValue3;       /* LSB */
38719  00  =3      BYTE      sensorUsage;                  /**/
38720  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_REPORT_3BYTE_FRAME;
38721  00  =3  
38722  00  =3  /************************************************************/
38723  00  =3  /* Irrigation Valve Config Report 4byte command class structs */
38724  00  =3  /************************************************************/
38725  00  =3  typedef struct _ZW_IRRIGATION_VALVE_CONFIG_REPORT_4BYTE_FRAME_
38726  00  =3  {
38727  00  =3      BYTE      cmdClass;                     /* The command class */
38728  00  =3      BYTE      cmd;                          /* The command */
38729  00  =3      BYTE      properties1;                  /* masked byte */
38730  00  =3      BYTE      valveId;                      /**/
38731  00  =3      BYTE      nominalCurrentHighThreshold;  /**/
38732  00  =3      BYTE      nominalCurrentLowThreshold;   /**/
38733  00  =3      BYTE      properties2;                  /* masked byte */
38734  00  =3      BYTE      maximumFlowValue1;            /* MSB */
38735  00  =3      BYTE      maximumFlowValue2;            
38736  00  =3      BYTE      maximumFlowValue3;            
38737  00  =3      BYTE      maximumFlowValue4;            /* LSB */
38738  00  =3      BYTE      properties3;                  /* masked byte */
38739  00  =3      BYTE      flowHighThresholdValue1;      /* MSB */
38740  00  =3      BYTE      flowHighThresholdValue2;      
38741  00  =3      BYTE      flowHighThresholdValue3;      
38742  00  =3      BYTE      flowHighThresholdValue4;      /* LSB */
38743  00  =3      BYTE      properties4;                  /* masked byte */
38744  00  =3      BYTE      flowLowThresholdValue1;       /* MSB */
38745  00  =3      BYTE      flowLowThresholdValue2;       
38746  00  =3      BYTE      flowLowThresholdValue3;       
38747  00  =3      BYTE      flowLowThresholdValue4;       /* LSB */
38748  00  =3      BYTE      sensorUsage;                  /**/
38749  00  =3  } ZW_IRRIGATION_VALVE_CONFIG_REPORT_4BYTE_FRAME;
38750  00  =3  
38751  00  =3  /************************************************************/
38752  00  =3  /* Irrigation Valve Run command class structs */            
38753  00  =3  /************************************************************/
38754  00  =3  typedef struct _ZW_IRRIGATION_VALVE_RUN_FRAME_
38755  00  =3  {
38756  00  =3      BYTE      cmdClass;                     /* The command class */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 642 

38757  00  =3      BYTE      cmd;                          /* The command */
38758  00  =3      BYTE      properties1;                  /* masked byte */
38759  00  =3      BYTE      valveId;                      /**/
38760  00  =3      BYTE      duration1;                    /* MSB */
38761  00  =3      BYTE      duration2;                    /* LSB */
38762  00  =3  } ZW_IRRIGATION_VALVE_RUN_FRAME;
38763  00  =3  
38764  00  =3  /************************************************************/
38765  00  =3  /* Irrigation Valve Table Set variant group structs */      
38766  00  =3  /************************************************************/
38767  00  =3  typedef struct _VG_IRRIGATION_VALVE_TABLE_SET_VG_
38768  00  =3  {
38769  00  =3      BYTE      valveId;                      /**/
38770  00  =3      BYTE      duration1;                    /* MSB */
38771  00  =3      BYTE      duration2;                    /* LSB */
38772  00  =3  } VG_IRRIGATION_VALVE_TABLE_SET_VG;
38773  00  =3  
38774  00  =3  /************************************************************/
38775  00  =3  /* Irrigation Valve Table Set 1byte command class structs */
38776  00  =3  /************************************************************/
38777  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_SET_1BYTE_FRAME_
38778  00  =3  {
38779  00  =3      BYTE      cmdClass;                     /* The command class */
38780  00  =3      BYTE      cmd;                          /* The command */
38781  00  =3      BYTE      valveTableId;                 /**/
38782  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup1;                /**/
38783  00  =3  } ZW_IRRIGATION_VALVE_TABLE_SET_1BYTE_FRAME;
38784  00  =3  
38785  00  =3  /************************************************************/
38786  00  =3  /* Irrigation Valve Table Set 2byte command class structs */
38787  00  =3  /************************************************************/
38788  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_SET_2BYTE_FRAME_
38789  00  =3  {
38790  00  =3      BYTE      cmdClass;                     /* The command class */
38791  00  =3      BYTE      cmd;                          /* The command */
38792  00  =3      BYTE      valveTableId;                 /**/
38793  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup1;                /**/
38794  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup2;                /**/
38795  00  =3  } ZW_IRRIGATION_VALVE_TABLE_SET_2BYTE_FRAME;
38796  00  =3  
38797  00  =3  /************************************************************/
38798  00  =3  /* Irrigation Valve Table Set 3byte command class structs */
38799  00  =3  /************************************************************/
38800  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_SET_3BYTE_FRAME_
38801  00  =3  {
38802  00  =3      BYTE      cmdClass;                     /* The command class */
38803  00  =3      BYTE      cmd;                          /* The command */
38804  00  =3      BYTE      valveTableId;                 /**/
38805  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup1;                /**/
38806  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup2;                /**/
38807  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup3;                /**/
38808  00  =3  } ZW_IRRIGATION_VALVE_TABLE_SET_3BYTE_FRAME;
38809  00  =3  
38810  00  =3  /************************************************************/
38811  00  =3  /* Irrigation Valve Table Set 4byte command class structs */
38812  00  =3  /************************************************************/
38813  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_SET_4BYTE_FRAME_
38814  00  =3  {
38815  00  =3      BYTE      cmdClass;                     /* The command class */
38816  00  =3      BYTE      cmd;                          /* The command */
38817  00  =3      BYTE      valveTableId;                 /**/
38818  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 643 

38819  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup2;                /**/
38820  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup3;                /**/
38821  00  =3      VG_IRRIGATION_VALVE_TABLE_SET_VG variantgroup4;                /**/
38822  00  =3  } ZW_IRRIGATION_VALVE_TABLE_SET_4BYTE_FRAME;
38823  00  =3  
38824  00  =3  /************************************************************/
38825  00  =3  /* Irrigation Valve Table Get command class structs */      
38826  00  =3  /************************************************************/
38827  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_GET_FRAME_
38828  00  =3  {
38829  00  =3      BYTE      cmdClass;                     /* The command class */
38830  00  =3      BYTE      cmd;                          /* The command */
38831  00  =3      BYTE      valveTableId;                 /**/
38832  00  =3  } ZW_IRRIGATION_VALVE_TABLE_GET_FRAME;
38833  00  =3  
38834  00  =3  /************************************************************/
38835  00  =3  /* Irrigation Valve Table Report variant group structs */   
38836  00  =3  /************************************************************/
38837  00  =3  typedef struct _VG_IRRIGATION_VALVE_TABLE_REPORT_VG_
38838  00  =3  {
38839  00  =3      BYTE      valveId;                      /**/
38840  00  =3      BYTE      duration1;                    /* MSB */
38841  00  =3      BYTE      duration2;                    /* LSB */
38842  00  =3  } VG_IRRIGATION_VALVE_TABLE_REPORT_VG;
38843  00  =3  
38844  00  =3  /************************************************************/
38845  00  =3  /* Irrigation Valve Table Report 1byte command class structs */
38846  00  =3  /************************************************************/
38847  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_REPORT_1BYTE_FRAME_
38848  00  =3  {
38849  00  =3      BYTE      cmdClass;                     /* The command class */
38850  00  =3      BYTE      cmd;                          /* The command */
38851  00  =3      BYTE      valveTableId;                 /**/
38852  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup1;                /**/
38853  00  =3  } ZW_IRRIGATION_VALVE_TABLE_REPORT_1BYTE_FRAME;
38854  00  =3  
38855  00  =3  /************************************************************/
38856  00  =3  /* Irrigation Valve Table Report 2byte command class structs */
38857  00  =3  /************************************************************/
38858  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_REPORT_2BYTE_FRAME_
38859  00  =3  {
38860  00  =3      BYTE      cmdClass;                     /* The command class */
38861  00  =3      BYTE      cmd;                          /* The command */
38862  00  =3      BYTE      valveTableId;                 /**/
38863  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup1;                /**/
38864  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup2;                /**/
38865  00  =3  } ZW_IRRIGATION_VALVE_TABLE_REPORT_2BYTE_FRAME;
38866  00  =3  
38867  00  =3  /************************************************************/
38868  00  =3  /* Irrigation Valve Table Report 3byte command class structs */
38869  00  =3  /************************************************************/
38870  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_REPORT_3BYTE_FRAME_
38871  00  =3  {
38872  00  =3      BYTE      cmdClass;                     /* The command class */
38873  00  =3      BYTE      cmd;                          /* The command */
38874  00  =3      BYTE      valveTableId;                 /**/
38875  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup1;                /**/
38876  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup2;                /**/
38877  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup3;                /**/
38878  00  =3  } ZW_IRRIGATION_VALVE_TABLE_REPORT_3BYTE_FRAME;
38879  00  =3  
38880  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 644 

38881  00  =3  /* Irrigation Valve Table Report 4byte command class structs */
38882  00  =3  /************************************************************/
38883  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_REPORT_4BYTE_FRAME_
38884  00  =3  {
38885  00  =3      BYTE      cmdClass;                     /* The command class */
38886  00  =3      BYTE      cmd;                          /* The command */
38887  00  =3      BYTE      valveTableId;                 /**/
38888  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup1;                /**/
38889  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup2;                /**/
38890  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup3;                /**/
38891  00  =3      VG_IRRIGATION_VALVE_TABLE_REPORT_VG variantgroup4;                /**/
38892  00  =3  } ZW_IRRIGATION_VALVE_TABLE_REPORT_4BYTE_FRAME;
38893  00  =3  
38894  00  =3  /************************************************************/
38895  00  =3  /* Irrigation Valve Table Run 1byte command class structs */
38896  00  =3  /************************************************************/
38897  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_RUN_1BYTE_FRAME_
38898  00  =3  {
38899  00  =3      BYTE      cmdClass;                     /* The command class */
38900  00  =3      BYTE      cmd;                          /* The command */
38901  00  =3      BYTE      valveTableId1;                
38902  00  =3  } ZW_IRRIGATION_VALVE_TABLE_RUN_1BYTE_FRAME;
38903  00  =3  
38904  00  =3  /************************************************************/
38905  00  =3  /* Irrigation Valve Table Run 2byte command class structs */
38906  00  =3  /************************************************************/
38907  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_RUN_2BYTE_FRAME_
38908  00  =3  {
38909  00  =3      BYTE      cmdClass;                     /* The command class */
38910  00  =3      BYTE      cmd;                          /* The command */
38911  00  =3      BYTE      valveTableId1;                /* MSB */
38912  00  =3      BYTE      valveTableId2;                /* LSB */
38913  00  =3  } ZW_IRRIGATION_VALVE_TABLE_RUN_2BYTE_FRAME;
38914  00  =3  
38915  00  =3  /************************************************************/
38916  00  =3  /* Irrigation Valve Table Run 3byte command class structs */
38917  00  =3  /************************************************************/
38918  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_RUN_3BYTE_FRAME_
38919  00  =3  {
38920  00  =3      BYTE      cmdClass;                     /* The command class */
38921  00  =3      BYTE      cmd;                          /* The command */
38922  00  =3      BYTE      valveTableId1;                /* MSB */
38923  00  =3      BYTE      valveTableId2;                
38924  00  =3      BYTE      valveTableId3;                /* LSB */
38925  00  =3  } ZW_IRRIGATION_VALVE_TABLE_RUN_3BYTE_FRAME;
38926  00  =3  
38927  00  =3  /************************************************************/
38928  00  =3  /* Irrigation Valve Table Run 4byte command class structs */
38929  00  =3  /************************************************************/
38930  00  =3  typedef struct _ZW_IRRIGATION_VALVE_TABLE_RUN_4BYTE_FRAME_
38931  00  =3  {
38932  00  =3      BYTE      cmdClass;                     /* The command class */
38933  00  =3      BYTE      cmd;                          /* The command */
38934  00  =3      BYTE      valveTableId1;                /* MSB */
38935  00  =3      BYTE      valveTableId2;                
38936  00  =3      BYTE      valveTableId3;                
38937  00  =3      BYTE      valveTableId4;                /* LSB */
38938  00  =3  } ZW_IRRIGATION_VALVE_TABLE_RUN_4BYTE_FRAME;
38939  00  =3  
38940  00  =3  /************************************************************/
38941  00  =3  /* Irrigation System Shutoff command class structs */       
38942  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 645 

38943  00  =3  typedef struct _ZW_IRRIGATION_SYSTEM_SHUTOFF_FRAME_
38944  00  =3  {
38945  00  =3      BYTE      cmdClass;                     /* The command class */
38946  00  =3      BYTE      cmd;                          /* The command */
38947  00  =3      BYTE      duration;                     /**/
38948  00  =3  } ZW_IRRIGATION_SYSTEM_SHUTOFF_FRAME;
38949  00  =3  
38950  00  =3  /************************************************************/
38951  00  =3  /* Supervision Get command class structs */                 
38952  00  =3  /************************************************************/
38953  00  =3  typedef struct _ZW_SUPERVISION_GET_FRAME_
38954  00  =3  {
38955  00  =3      BYTE      cmdClass;                     /* The command class */
38956  00  =3      BYTE      cmd;                          /* The command */
38957  00  =3      BYTE      properties1;                  /* masked byte */
38958  00  =3      BYTE      encapsulatedCommandLength;    /**/
38959  00  =3  } ZW_SUPERVISION_GET_FRAME;
38960  00  =3  
38961  00  =3  /************************************************************/
38962  00  =3  /* Supervision Report command class structs */              
38963  00  =3  /************************************************************/
38964  00  =3  typedef struct _ZW_SUPERVISION_REPORT_FRAME_
38965  00  =3  {
38966  00  =3      BYTE      cmdClass;                     /* The command class */
38967  00  =3      BYTE      cmd;                          /* The command */
38968  00  =3      BYTE      properties1;                  /* masked byte */
38969  00  =3      BYTE      status;                       /**/
38970  00  =3      BYTE      duration;                     /**/
38971  00  =3  } ZW_SUPERVISION_REPORT_FRAME;
38972  00  =3  
38973  00  =3  /************************************************************/
38974  00  =3  /* Humidity Control Setpoint Set 1byte command class structs */
38975  00  =3  /************************************************************/
38976  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SET_1BYTE_FRAME_
38977  00  =3  {
38978  00  =3      BYTE      cmdClass;                     /* The command class */
38979  00  =3      BYTE      cmd;                          /* The command */
38980  00  =3      BYTE      properties1;                  /* masked byte */
38981  00  =3      BYTE      properties2;                  /* masked byte */
38982  00  =3      BYTE      value1;                       
38983  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SET_1BYTE_FRAME;
38984  00  =3  
38985  00  =3  /************************************************************/
38986  00  =3  /* Humidity Control Setpoint Set 2byte command class structs */
38987  00  =3  /************************************************************/
38988  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SET_2BYTE_FRAME_
38989  00  =3  {
38990  00  =3      BYTE      cmdClass;                     /* The command class */
38991  00  =3      BYTE      cmd;                          /* The command */
38992  00  =3      BYTE      properties1;                  /* masked byte */
38993  00  =3      BYTE      properties2;                  /* masked byte */
38994  00  =3      BYTE      value1;                       /* MSB */
38995  00  =3      BYTE      value2;                       /* LSB */
38996  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SET_2BYTE_FRAME;
38997  00  =3  
38998  00  =3  /************************************************************/
38999  00  =3  /* Humidity Control Setpoint Set 3byte command class structs */
39000  00  =3  /************************************************************/
39001  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SET_3BYTE_FRAME_
39002  00  =3  {
39003  00  =3      BYTE      cmdClass;                     /* The command class */
39004  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 646 

39005  00  =3      BYTE      properties1;                  /* masked byte */
39006  00  =3      BYTE      properties2;                  /* masked byte */
39007  00  =3      BYTE      value1;                       /* MSB */
39008  00  =3      BYTE      value2;                       
39009  00  =3      BYTE      value3;                       /* LSB */
39010  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SET_3BYTE_FRAME;
39011  00  =3  
39012  00  =3  /************************************************************/
39013  00  =3  /* Humidity Control Setpoint Set 4byte command class structs */
39014  00  =3  /************************************************************/
39015  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SET_4BYTE_FRAME_
39016  00  =3  {
39017  00  =3      BYTE      cmdClass;                     /* The command class */
39018  00  =3      BYTE      cmd;                          /* The command */
39019  00  =3      BYTE      properties1;                  /* masked byte */
39020  00  =3      BYTE      properties2;                  /* masked byte */
39021  00  =3      BYTE      value1;                       /* MSB */
39022  00  =3      BYTE      value2;                       
39023  00  =3      BYTE      value3;                       
39024  00  =3      BYTE      value4;                       /* LSB */
39025  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SET_4BYTE_FRAME;
39026  00  =3  
39027  00  =3  /************************************************************/
39028  00  =3  /* Humidity Control Setpoint Get command class structs */   
39029  00  =3  /************************************************************/
39030  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_GET_FRAME_
39031  00  =3  {
39032  00  =3      BYTE      cmdClass;                     /* The command class */
39033  00  =3      BYTE      cmd;                          /* The command */
39034  00  =3      BYTE      properties1;                  /* masked byte */
39035  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_GET_FRAME;
39036  00  =3  
39037  00  =3  /************************************************************/
39038  00  =3  /* Humidity Control Setpoint Report 1byte command class structs */
39039  00  =3  /************************************************************/
39040  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_1BYTE_FRAME_
39041  00  =3  {
39042  00  =3      BYTE      cmdClass;                     /* The command class */
39043  00  =3      BYTE      cmd;                          /* The command */
39044  00  =3      BYTE      properties1;                  /* masked byte */
39045  00  =3      BYTE      properties2;                  /* masked byte */
39046  00  =3      BYTE      value1;                       
39047  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_1BYTE_FRAME;
39048  00  =3  
39049  00  =3  /************************************************************/
39050  00  =3  /* Humidity Control Setpoint Report 2byte command class structs */
39051  00  =3  /************************************************************/
39052  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_2BYTE_FRAME_
39053  00  =3  {
39054  00  =3      BYTE      cmdClass;                     /* The command class */
39055  00  =3      BYTE      cmd;                          /* The command */
39056  00  =3      BYTE      properties1;                  /* masked byte */
39057  00  =3      BYTE      properties2;                  /* masked byte */
39058  00  =3      BYTE      value1;                       /* MSB */
39059  00  =3      BYTE      value2;                       /* LSB */
39060  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_2BYTE_FRAME;
39061  00  =3  
39062  00  =3  /************************************************************/
39063  00  =3  /* Humidity Control Setpoint Report 3byte command class structs */
39064  00  =3  /************************************************************/
39065  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_3BYTE_FRAME_
39066  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 647 

39067  00  =3      BYTE      cmdClass;                     /* The command class */
39068  00  =3      BYTE      cmd;                          /* The command */
39069  00  =3      BYTE      properties1;                  /* masked byte */
39070  00  =3      BYTE      properties2;                  /* masked byte */
39071  00  =3      BYTE      value1;                       /* MSB */
39072  00  =3      BYTE      value2;                       
39073  00  =3      BYTE      value3;                       /* LSB */
39074  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_3BYTE_FRAME;
39075  00  =3  
39076  00  =3  /************************************************************/
39077  00  =3  /* Humidity Control Setpoint Report 4byte command class structs */
39078  00  =3  /************************************************************/
39079  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_4BYTE_FRAME_
39080  00  =3  {
39081  00  =3      BYTE      cmdClass;                     /* The command class */
39082  00  =3      BYTE      cmd;                          /* The command */
39083  00  =3      BYTE      properties1;                  /* masked byte */
39084  00  =3      BYTE      properties2;                  /* masked byte */
39085  00  =3      BYTE      value1;                       /* MSB */
39086  00  =3      BYTE      value2;                       
39087  00  =3      BYTE      value3;                       
39088  00  =3      BYTE      value4;                       /* LSB */
39089  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_REPORT_4BYTE_FRAME;
39090  00  =3  
39091  00  =3  /************************************************************/
39092  00  =3  /* Humidity Control Setpoint Supported Get command class structs */
39093  00  =3  /************************************************************/
39094  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET_FRAME_
39095  00  =3  {
39096  00  =3      BYTE      cmdClass;                     /* The command class */
39097  00  =3      BYTE      cmd;                          /* The command */
39098  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET_FRAME;
39099  00  =3  
39100  00  =3  /************************************************************/
39101  00  =3  /* Humidity Control Setpoint Supported Report command class structs */
39102  00  =3  /************************************************************/
39103  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT_FRAME_
39104  00  =3  {
39105  00  =3      BYTE      cmdClass;                     /* The command class */
39106  00  =3      BYTE      cmd;                          /* The command */
39107  00  =3      BYTE      bitMask;                      /**/
39108  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT_FRAME;
39109  00  =3  
39110  00  =3  /************************************************************/
39111  00  =3  /* Humidity Control Setpoint Scale Supported Get command class structs */
39112  00  =3  /************************************************************/
39113  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_FRAME_
39114  00  =3  {
39115  00  =3      BYTE      cmdClass;                     /* The command class */
39116  00  =3      BYTE      cmd;                          /* The command */
39117  00  =3      BYTE      properties1;                  /* masked byte */
39118  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET_FRAME;
39119  00  =3  
39120  00  =3  /************************************************************/
39121  00  =3  /* Humidity Control Setpoint Scale Supported Report command class structs */
39122  00  =3  /************************************************************/
39123  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_FRAME_
39124  00  =3  {
39125  00  =3      BYTE      cmdClass;                     /* The command class */
39126  00  =3      BYTE      cmd;                          /* The command */
39127  00  =3      BYTE      properties1;                  /* masked byte */
39128  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT_FRAME;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 648 

39129  00  =3  
39130  00  =3  /************************************************************/
39131  00  =3  /* Humidity Control Setpoint Capabilities Get command class structs */
39132  00  =3  /************************************************************/
39133  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_FRAME_
39134  00  =3  {
39135  00  =3      BYTE      cmdClass;                     /* The command class */
39136  00  =3      BYTE      cmd;                          /* The command */
39137  00  =3      BYTE      properties1;                  /* masked byte */
39138  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET_FRAME;
39139  00  =3  
39140  00  =3  /************************************************************/
39141  00  =3  /* Humidity Control Setpoint Capabilities Report 1byte command class structs */
39142  00  =3  /************************************************************/
39143  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_1BYTE_FRAME_
39144  00  =3  {
39145  00  =3      BYTE      cmdClass;                     /* The command class */
39146  00  =3      BYTE      cmd;                          /* The command */
39147  00  =3      BYTE      properties1;                  /* masked byte */
39148  00  =3      BYTE      properties2;                  /* masked byte */
39149  00  =3      BYTE      minimumValue1;                
39150  00  =3      BYTE      properties3;                  /* masked byte */
39151  00  =3      BYTE      maximumValue1;                
39152  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_1BYTE_FRAME;
39153  00  =3  
39154  00  =3  /************************************************************/
39155  00  =3  /* Humidity Control Setpoint Capabilities Report 2byte command class structs */
39156  00  =3  /************************************************************/
39157  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_2BYTE_FRAME_
39158  00  =3  {
39159  00  =3      BYTE      cmdClass;                     /* The command class */
39160  00  =3      BYTE      cmd;                          /* The command */
39161  00  =3      BYTE      properties1;                  /* masked byte */
39162  00  =3      BYTE      properties2;                  /* masked byte */
39163  00  =3      BYTE      minimumValue1;                /* MSB */
39164  00  =3      BYTE      minimumValue2;                /* LSB */
39165  00  =3      BYTE      properties3;                  /* masked byte */
39166  00  =3      BYTE      maximumValue1;                /* MSB */
39167  00  =3      BYTE      maximumValue2;                /* LSB */
39168  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_2BYTE_FRAME;
39169  00  =3  
39170  00  =3  /************************************************************/
39171  00  =3  /* Humidity Control Setpoint Capabilities Report 3byte command class structs */
39172  00  =3  /************************************************************/
39173  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_3BYTE_FRAME_
39174  00  =3  {
39175  00  =3      BYTE      cmdClass;                     /* The command class */
39176  00  =3      BYTE      cmd;                          /* The command */
39177  00  =3      BYTE      properties1;                  /* masked byte */
39178  00  =3      BYTE      properties2;                  /* masked byte */
39179  00  =3      BYTE      minimumValue1;                /* MSB */
39180  00  =3      BYTE      minimumValue2;                
39181  00  =3      BYTE      minimumValue3;                /* LSB */
39182  00  =3      BYTE      properties3;                  /* masked byte */
39183  00  =3      BYTE      maximumValue1;                /* MSB */
39184  00  =3      BYTE      maximumValue2;                
39185  00  =3      BYTE      maximumValue3;                /* LSB */
39186  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_3BYTE_FRAME;
39187  00  =3  
39188  00  =3  /************************************************************/
39189  00  =3  /* Humidity Control Setpoint Capabilities Report 4byte command class structs */
39190  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 649 

39191  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_4BYTE_FRAME_
39192  00  =3  {
39193  00  =3      BYTE      cmdClass;                     /* The command class */
39194  00  =3      BYTE      cmd;                          /* The command */
39195  00  =3      BYTE      properties1;                  /* masked byte */
39196  00  =3      BYTE      properties2;                  /* masked byte */
39197  00  =3      BYTE      minimumValue1;                /* MSB */
39198  00  =3      BYTE      minimumValue2;                
39199  00  =3      BYTE      minimumValue3;                
39200  00  =3      BYTE      minimumValue4;                /* LSB */
39201  00  =3      BYTE      properties3;                  /* masked byte */
39202  00  =3      BYTE      maximumValue1;                /* MSB */
39203  00  =3      BYTE      maximumValue2;                
39204  00  =3      BYTE      maximumValue3;                
39205  00  =3      BYTE      maximumValue4;                /* LSB */
39206  00  =3  } ZW_HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT_4BYTE_FRAME;
39207  00  =3  
39208  00  =3  /************************************************************/
39209  00  =3  /* Humidity Control Mode Set command class structs */       
39210  00  =3  /************************************************************/
39211  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_MODE_SET_FRAME_
39212  00  =3  {
39213  00  =3      BYTE      cmdClass;                     /* The command class */
39214  00  =3      BYTE      cmd;                          /* The command */
39215  00  =3      BYTE      properties1;                  /* masked byte */
39216  00  =3  } ZW_HUMIDITY_CONTROL_MODE_SET_FRAME;
39217  00  =3  
39218  00  =3  /************************************************************/
39219  00  =3  /* Humidity Control Mode Get command class structs */       
39220  00  =3  /************************************************************/
39221  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_MODE_GET_FRAME_
39222  00  =3  {
39223  00  =3      BYTE      cmdClass;                     /* The command class */
39224  00  =3      BYTE      cmd;                          /* The command */
39225  00  =3  } ZW_HUMIDITY_CONTROL_MODE_GET_FRAME;
39226  00  =3  
39227  00  =3  /************************************************************/
39228  00  =3  /* Humidity Control Mode Report command class structs */    
39229  00  =3  /************************************************************/
39230  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_MODE_REPORT_FRAME_
39231  00  =3  {
39232  00  =3      BYTE      cmdClass;                     /* The command class */
39233  00  =3      BYTE      cmd;                          /* The command */
39234  00  =3      BYTE      properties1;                  /* masked byte */
39235  00  =3  } ZW_HUMIDITY_CONTROL_MODE_REPORT_FRAME;
39236  00  =3  
39237  00  =3  /************************************************************/
39238  00  =3  /* Humidity Control Mode Supported Get command class structs */
39239  00  =3  /************************************************************/
39240  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_MODE_SUPPORTED_GET_FRAME_
39241  00  =3  {
39242  00  =3      BYTE      cmdClass;                     /* The command class */
39243  00  =3      BYTE      cmd;                          /* The command */
39244  00  =3  } ZW_HUMIDITY_CONTROL_MODE_SUPPORTED_GET_FRAME;
39245  00  =3  
39246  00  =3  /************************************************************/
39247  00  =3  /* Humidity Control Mode Supported Report command class structs */
39248  00  =3  /************************************************************/
39249  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT_FRAME_
39250  00  =3  {
39251  00  =3      BYTE      cmdClass;                     /* The command class */
39252  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 650 

39253  00  =3      BYTE      bitMask;                      /**/
39254  00  =3  } ZW_HUMIDITY_CONTROL_MODE_SUPPORTED_REPORT_FRAME;
39255  00  =3  
39256  00  =3  /************************************************************/
39257  00  =3  /* Humidity Control Operating State Get command class structs */
39258  00  =3  /************************************************************/
39259  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_OPERATING_STATE_GET_FRAME_
39260  00  =3  {
39261  00  =3      BYTE      cmdClass;                     /* The command class */
39262  00  =3      BYTE      cmd;                          /* The command */
39263  00  =3  } ZW_HUMIDITY_CONTROL_OPERATING_STATE_GET_FRAME;
39264  00  =3  
39265  00  =3  /************************************************************/
39266  00  =3  /* Humidity Control Operating State Report command class structs */
39267  00  =3  /************************************************************/
39268  00  =3  typedef struct _ZW_HUMIDITY_CONTROL_OPERATING_STATE_REPORT_FRAME_
39269  00  =3  {
39270  00  =3      BYTE      cmdClass;                     /* The command class */
39271  00  =3      BYTE      cmd;                          /* The command */
39272  00  =3      BYTE      properties1;                  /* masked byte */
39273  00  =3  } ZW_HUMIDITY_CONTROL_OPERATING_STATE_REPORT_FRAME;
39274  00  =3  
39275  00  =3  /************************************************************/
39276  00  =3  /* Entry Control Notification 1byte command class structs */
39277  00  =3  /************************************************************/
39278  00  =3  typedef struct _ZW_ENTRY_CONTROL_NOTIFICATION_1BYTE_FRAME_
39279  00  =3  {
39280  00  =3      BYTE      cmdClass;                     /* The command class */
39281  00  =3      BYTE      cmd;                          /* The command */
39282  00  =3      BYTE      sequenceNumber;               /**/
39283  00  =3      BYTE      properties1;                  /* masked byte */
39284  00  =3      BYTE      eventType;                    /**/
39285  00  =3      BYTE      eventDataLength;              /**/
39286  00  =3      BYTE      eventData1;                   
39287  00  =3  } ZW_ENTRY_CONTROL_NOTIFICATION_1BYTE_FRAME;
39288  00  =3  
39289  00  =3  /************************************************************/
39290  00  =3  /* Entry Control Notification 2byte command class structs */
39291  00  =3  /************************************************************/
39292  00  =3  typedef struct _ZW_ENTRY_CONTROL_NOTIFICATION_2BYTE_FRAME_
39293  00  =3  {
39294  00  =3      BYTE      cmdClass;                     /* The command class */
39295  00  =3      BYTE      cmd;                          /* The command */
39296  00  =3      BYTE      sequenceNumber;               /**/
39297  00  =3      BYTE      properties1;                  /* masked byte */
39298  00  =3      BYTE      eventType;                    /**/
39299  00  =3      BYTE      eventDataLength;              /**/
39300  00  =3      BYTE      eventData1;                   /* MSB */
39301  00  =3      BYTE      eventData2;                   /* LSB */
39302  00  =3  } ZW_ENTRY_CONTROL_NOTIFICATION_2BYTE_FRAME;
39303  00  =3  
39304  00  =3  /************************************************************/
39305  00  =3  /* Entry Control Notification 3byte command class structs */
39306  00  =3  /************************************************************/
39307  00  =3  typedef struct _ZW_ENTRY_CONTROL_NOTIFICATION_3BYTE_FRAME_
39308  00  =3  {
39309  00  =3      BYTE      cmdClass;                     /* The command class */
39310  00  =3      BYTE      cmd;                          /* The command */
39311  00  =3      BYTE      sequenceNumber;               /**/
39312  00  =3      BYTE      properties1;                  /* masked byte */
39313  00  =3      BYTE      eventType;                    /**/
39314  00  =3      BYTE      eventDataLength;              /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 651 

39315  00  =3      BYTE      eventData1;                   /* MSB */
39316  00  =3      BYTE      eventData2;                   
39317  00  =3      BYTE      eventData3;                   /* LSB */
39318  00  =3  } ZW_ENTRY_CONTROL_NOTIFICATION_3BYTE_FRAME;
39319  00  =3  
39320  00  =3  /************************************************************/
39321  00  =3  /* Entry Control Notification 4byte command class structs */
39322  00  =3  /************************************************************/
39323  00  =3  typedef struct _ZW_ENTRY_CONTROL_NOTIFICATION_4BYTE_FRAME_
39324  00  =3  {
39325  00  =3      BYTE      cmdClass;                     /* The command class */
39326  00  =3      BYTE      cmd;                          /* The command */
39327  00  =3      BYTE      sequenceNumber;               /**/
39328  00  =3      BYTE      properties1;                  /* masked byte */
39329  00  =3      BYTE      eventType;                    /**/
39330  00  =3      BYTE      eventDataLength;              /**/
39331  00  =3      BYTE      eventData1;                   /* MSB */
39332  00  =3      BYTE      eventData2;                   
39333  00  =3      BYTE      eventData3;                   
39334  00  =3      BYTE      eventData4;                   /* LSB */
39335  00  =3  } ZW_ENTRY_CONTROL_NOTIFICATION_4BYTE_FRAME;
39336  00  =3  
39337  00  =3  /************************************************************/
39338  00  =3  /* Entry Control Key Supported Get command class structs */ 
39339  00  =3  /************************************************************/
39340  00  =3  typedef struct _ZW_ENTRY_CONTROL_KEY_SUPPORTED_GET_FRAME_
39341  00  =3  {
39342  00  =3      BYTE      cmdClass;                     /* The command class */
39343  00  =3      BYTE      cmd;                          /* The command */
39344  00  =3  } ZW_ENTRY_CONTROL_KEY_SUPPORTED_GET_FRAME;
39345  00  =3  
39346  00  =3  /************************************************************/
39347  00  =3  /* Entry Control Key Supported Report 1byte command class structs */
39348  00  =3  /************************************************************/
39349  00  =3  typedef struct _ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_1BYTE_FRAME_
39350  00  =3  {
39351  00  =3      BYTE      cmdClass;                     /* The command class */
39352  00  =3      BYTE      cmd;                          /* The command */
39353  00  =3      BYTE      keySupportedBitMaskLength;    /**/
39354  00  =3      BYTE      keySupportedBitMask1;         
39355  00  =3  } ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_1BYTE_FRAME;
39356  00  =3  
39357  00  =3  /************************************************************/
39358  00  =3  /* Entry Control Key Supported Report 2byte command class structs */
39359  00  =3  /************************************************************/
39360  00  =3  typedef struct _ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_2BYTE_FRAME_
39361  00  =3  {
39362  00  =3      BYTE      cmdClass;                     /* The command class */
39363  00  =3      BYTE      cmd;                          /* The command */
39364  00  =3      BYTE      keySupportedBitMaskLength;    /**/
39365  00  =3      BYTE      keySupportedBitMask1;         /* MSB */
39366  00  =3      BYTE      keySupportedBitMask2;         /* LSB */
39367  00  =3  } ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_2BYTE_FRAME;
39368  00  =3  
39369  00  =3  /************************************************************/
39370  00  =3  /* Entry Control Key Supported Report 3byte command class structs */
39371  00  =3  /************************************************************/
39372  00  =3  typedef struct _ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_3BYTE_FRAME_
39373  00  =3  {
39374  00  =3      BYTE      cmdClass;                     /* The command class */
39375  00  =3      BYTE      cmd;                          /* The command */
39376  00  =3      BYTE      keySupportedBitMaskLength;    /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 652 

39377  00  =3      BYTE      keySupportedBitMask1;         /* MSB */
39378  00  =3      BYTE      keySupportedBitMask2;         
39379  00  =3      BYTE      keySupportedBitMask3;         /* LSB */
39380  00  =3  } ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_3BYTE_FRAME;
39381  00  =3  
39382  00  =3  /************************************************************/
39383  00  =3  /* Entry Control Key Supported Report 4byte command class structs */
39384  00  =3  /************************************************************/
39385  00  =3  typedef struct _ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_4BYTE_FRAME_
39386  00  =3  {
39387  00  =3      BYTE      cmdClass;                     /* The command class */
39388  00  =3      BYTE      cmd;                          /* The command */
39389  00  =3      BYTE      keySupportedBitMaskLength;    /**/
39390  00  =3      BYTE      keySupportedBitMask1;         /* MSB */
39391  00  =3      BYTE      keySupportedBitMask2;         
39392  00  =3      BYTE      keySupportedBitMask3;         
39393  00  =3      BYTE      keySupportedBitMask4;         /* LSB */
39394  00  =3  } ZW_ENTRY_CONTROL_KEY_SUPPORTED_REPORT_4BYTE_FRAME;
39395  00  =3  
39396  00  =3  /************************************************************/
39397  00  =3  /* Entry Control Event Supported Get command class structs */
39398  00  =3  /************************************************************/
39399  00  =3  typedef struct _ZW_ENTRY_CONTROL_EVENT_SUPPORTED_GET_FRAME_
39400  00  =3  {
39401  00  =3      BYTE      cmdClass;                     /* The command class */
39402  00  =3      BYTE      cmd;                          /* The command */
39403  00  =3  } ZW_ENTRY_CONTROL_EVENT_SUPPORTED_GET_FRAME;
39404  00  =3  
39405  00  =3  /************************************************************/
39406  00  =3  /* Entry Control Event Supported Report 1byte command class structs */
39407  00  =3  /************************************************************/
39408  00  =3  typedef struct _ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_1BYTE_FRAME_
39409  00  =3  {
39410  00  =3      BYTE      cmdClass;                     /* The command class */
39411  00  =3      BYTE      cmd;                          /* The command */
39412  00  =3      BYTE      properties1;                  /* masked byte */
39413  00  =3      BYTE      dataTypeSupportedBitMask1;    
39414  00  =3      BYTE      properties2;                  /* masked byte */
39415  00  =3      BYTE      eventTypeSupportedBitMask1;   
39416  00  =3      BYTE      keyCachedSizeSupportedMinimum;/**/
39417  00  =3      BYTE      keyCachedSizeSupportedMaximum;/**/
39418  00  =3      BYTE      keyCachedTimeoutSupportedMinimum;/**/
39419  00  =3      BYTE      keyCachedTimeoutSupportedMaximum;/**/
39420  00  =3  } ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_1BYTE_FRAME;
39421  00  =3  
39422  00  =3  /************************************************************/
39423  00  =3  /* Entry Control Event Supported Report 2byte command class structs */
39424  00  =3  /************************************************************/
39425  00  =3  typedef struct _ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_2BYTE_FRAME_
39426  00  =3  {
39427  00  =3      BYTE      cmdClass;                     /* The command class */
39428  00  =3      BYTE      cmd;                          /* The command */
39429  00  =3      BYTE      properties1;                  /* masked byte */
39430  00  =3      BYTE      dataTypeSupportedBitMask1;    /* MSB */
39431  00  =3      BYTE      dataTypeSupportedBitMask2;    /* LSB */
39432  00  =3      BYTE      properties2;                  /* masked byte */
39433  00  =3      BYTE      eventTypeSupportedBitMask1;   /* MSB */
39434  00  =3      BYTE      eventTypeSupportedBitMask2;   /* LSB */
39435  00  =3      BYTE      keyCachedSizeSupportedMinimum;/**/
39436  00  =3      BYTE      keyCachedSizeSupportedMaximum;/**/
39437  00  =3      BYTE      keyCachedTimeoutSupportedMinimum;/**/
39438  00  =3      BYTE      keyCachedTimeoutSupportedMaximum;/**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 653 

39439  00  =3  } ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_2BYTE_FRAME;
39440  00  =3  
39441  00  =3  /************************************************************/
39442  00  =3  /* Entry Control Event Supported Report 3byte command class structs */
39443  00  =3  /************************************************************/
39444  00  =3  typedef struct _ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_3BYTE_FRAME_
39445  00  =3  {
39446  00  =3      BYTE      cmdClass;                     /* The command class */
39447  00  =3      BYTE      cmd;                          /* The command */
39448  00  =3      BYTE      properties1;                  /* masked byte */
39449  00  =3      BYTE      dataTypeSupportedBitMask1;    /* MSB */
39450  00  =3      BYTE      dataTypeSupportedBitMask2;    
39451  00  =3      BYTE      dataTypeSupportedBitMask3;    /* LSB */
39452  00  =3      BYTE      properties2;                  /* masked byte */
39453  00  =3      BYTE      eventTypeSupportedBitMask1;   /* MSB */
39454  00  =3      BYTE      eventTypeSupportedBitMask2;   
39455  00  =3      BYTE      eventTypeSupportedBitMask3;   /* LSB */
39456  00  =3      BYTE      keyCachedSizeSupportedMinimum;/**/
39457  00  =3      BYTE      keyCachedSizeSupportedMaximum;/**/
39458  00  =3      BYTE      keyCachedTimeoutSupportedMinimum;/**/
39459  00  =3      BYTE      keyCachedTimeoutSupportedMaximum;/**/
39460  00  =3  } ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_3BYTE_FRAME;
39461  00  =3  
39462  00  =3  /************************************************************/
39463  00  =3  /* Entry Control Event Supported Report 4byte command class structs */
39464  00  =3  /************************************************************/
39465  00  =3  typedef struct _ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_4BYTE_FRAME_
39466  00  =3  {
39467  00  =3      BYTE      cmdClass;                     /* The command class */
39468  00  =3      BYTE      cmd;                          /* The command */
39469  00  =3      BYTE      properties1;                  /* masked byte */
39470  00  =3      BYTE      dataTypeSupportedBitMask1;    /* MSB */
39471  00  =3      BYTE      dataTypeSupportedBitMask2;    
39472  00  =3      BYTE      dataTypeSupportedBitMask3;    
39473  00  =3      BYTE      dataTypeSupportedBitMask4;    /* LSB */
39474  00  =3      BYTE      properties2;                  /* masked byte */
39475  00  =3      BYTE      eventTypeSupportedBitMask1;   /* MSB */
39476  00  =3      BYTE      eventTypeSupportedBitMask2;   
39477  00  =3      BYTE      eventTypeSupportedBitMask3;   
39478  00  =3      BYTE      eventTypeSupportedBitMask4;   /* LSB */
39479  00  =3      BYTE      keyCachedSizeSupportedMinimum;/**/
39480  00  =3      BYTE      keyCachedSizeSupportedMaximum;/**/
39481  00  =3      BYTE      keyCachedTimeoutSupportedMinimum;/**/
39482  00  =3      BYTE      keyCachedTimeoutSupportedMaximum;/**/
39483  00  =3  } ZW_ENTRY_CONTROL_EVENT_SUPPORTED_REPORT_4BYTE_FRAME;
39484  00  =3  
39485  00  =3  /************************************************************/
39486  00  =3  /* Entry Control Configuration Set command class structs */ 
39487  00  =3  /************************************************************/
39488  00  =3  typedef struct _ZW_ENTRY_CONTROL_CONFIGURATION_SET_FRAME_
39489  00  =3  {
39490  00  =3      BYTE      cmdClass;                     /* The command class */
39491  00  =3      BYTE      cmd;                          /* The command */
39492  00  =3      BYTE      keyCacheSize;                 /**/
39493  00  =3      BYTE      keyCacheTimeout;              /**/
39494  00  =3  } ZW_ENTRY_CONTROL_CONFIGURATION_SET_FRAME;
39495  00  =3  
39496  00  =3  /************************************************************/
39497  00  =3  /* Entry Control Configuration Get command class structs */ 
39498  00  =3  /************************************************************/
39499  00  =3  typedef struct _ZW_ENTRY_CONTROL_CONFIGURATION_GET_FRAME_
39500  00  =3  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 654 

39501  00  =3      BYTE      cmdClass;                     /* The command class */
39502  00  =3      BYTE      cmd;                          /* The command */
39503  00  =3  } ZW_ENTRY_CONTROL_CONFIGURATION_GET_FRAME;
39504  00  =3  
39505  00  =3  /************************************************************/
39506  00  =3  /* Entry Control Configuration Report command class structs */
39507  00  =3  /************************************************************/
39508  00  =3  typedef struct _ZW_ENTRY_CONTROL_CONFIGURATION_REPORT_FRAME_
39509  00  =3  {
39510  00  =3      BYTE      cmdClass;                     /* The command class */
39511  00  =3      BYTE      cmd;                          /* The command */
39512  00  =3      BYTE      keyCacheSize;                 /**/
39513  00  =3      BYTE      keyCacheTimeout;              /**/
39514  00  =3  } ZW_ENTRY_CONTROL_CONFIGURATION_REPORT_FRAME;
39515  00  =3  
39516  00  =3  /************************************************************/
39517  00  =3  /* Initiate command class structs */                        
39518  00  =3  /************************************************************/
39519  00  =3  typedef struct _ZW_INITIATE_FRAME_
39520  00  =3  {
39521  00  =3      BYTE      cmdClass;                     /* The command class */
39522  00  =3      BYTE      cmd;                          /* The command */
39523  00  =3      BYTE      nodeId;                       /**/
39524  00  =3      BYTE      stepId;                       /**/
39525  00  =3  } ZW_INITIATE_FRAME;
39526  00  =3  
39527  00  =3  /************************************************************/
39528  00  =3  /* Complete command class structs */                        
39529  00  =3  /************************************************************/
39530  00  =3  typedef struct _ZW_COMPLETE_FRAME_
39531  00  =3  {
39532  00  =3      BYTE      cmdClass;                     /* The command class */
39533  00  =3      BYTE      cmd;                          /* The command */
39534  00  =3      BYTE      stepId;                       /**/
39535  00  =3      BYTE      status;                       /**/
39536  00  =3  } ZW_COMPLETE_FRAME;
39537  00  =3  
39538  00  =3  /************************************************************/
39539  00  =3  /* Node Provision Set variant group structs */              
39540  00  =3  /************************************************************/
39541  00  =3  typedef struct _VG_NODE_PROVISION_SET_1BYTE_VG_
39542  00  =3  {
39543  00  =3      BYTE      properties2;                  /* masked byte */
39544  00  =3      BYTE      length;                       /**/
39545  00  =3      BYTE      value1;                       
39546  00  =3  } VG_NODE_PROVISION_SET_1BYTE_VG;
39547  00  =3  
39548  00  =3  /************************************************************/
39549  00  =3  /* Node Provision Set variant group structs */              
39550  00  =3  /************************************************************/
39551  00  =3  typedef struct _VG_NODE_PROVISION_SET_2BYTE_VG_
39552  00  =3  {
39553  00  =3      BYTE      properties2;                  /* masked byte */
39554  00  =3      BYTE      length;                       /**/
39555  00  =3      BYTE      value1;                       /* MSB */
39556  00  =3      BYTE      value2;                       /* LSB */
39557  00  =3  } VG_NODE_PROVISION_SET_2BYTE_VG;
39558  00  =3  
39559  00  =3  /************************************************************/
39560  00  =3  /* Node Provision Set variant group structs */              
39561  00  =3  /************************************************************/
39562  00  =3  typedef struct _VG_NODE_PROVISION_SET_3BYTE_VG_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 655 

39563  00  =3  {
39564  00  =3      BYTE      properties2;                  /* masked byte */
39565  00  =3      BYTE      length;                       /**/
39566  00  =3      BYTE      value1;                       /* MSB */
39567  00  =3      BYTE      value2;                       
39568  00  =3      BYTE      value3;                       /* LSB */
39569  00  =3  } VG_NODE_PROVISION_SET_3BYTE_VG;
39570  00  =3  
39571  00  =3  /************************************************************/
39572  00  =3  /* Node Provision Set variant group structs */              
39573  00  =3  /************************************************************/
39574  00  =3  typedef struct _VG_NODE_PROVISION_SET_4BYTE_VG_
39575  00  =3  {
39576  00  =3      BYTE      properties2;                  /* masked byte */
39577  00  =3      BYTE      length;                       /**/
39578  00  =3      BYTE      value1;                       /* MSB */
39579  00  =3      BYTE      value2;                       
39580  00  =3      BYTE      value3;                       
39581  00  =3      BYTE      value4;                       /* LSB */
39582  00  =3  } VG_NODE_PROVISION_SET_4BYTE_VG;
39583  00  =3  
39584  00  =3  /************************************************************/
39585  00  =3  /* Node Provision Set 1byte command class structs */        
39586  00  =3  /************************************************************/
39587  00  =3  typedef struct _ZW_NODE_PROVISION_SET_1BYTE_FRAME_
39588  00  =3  {
39589  00  =3      BYTE      cmdClass;                     /* The command class */
39590  00  =3      BYTE      cmd;                          /* The command */
39591  00  =3      BYTE      seqNo;                        /**/
39592  00  =3      BYTE      properties1;                  /* masked byte */
39593  00  =3      BYTE      dsk1;                         
39594  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup1;                /**/
39595  00  =3  } ZW_NODE_PROVISION_SET_1BYTE_FRAME;
39596  00  =3  
39597  00  =3  /************************************************************/
39598  00  =3  /* Node Provision Set 2byte command class structs */        
39599  00  =3  /************************************************************/
39600  00  =3  typedef struct _ZW_NODE_PROVISION_SET_2BYTE_FRAME_
39601  00  =3  {
39602  00  =3      BYTE      cmdClass;                     /* The command class */
39603  00  =3      BYTE      cmd;                          /* The command */
39604  00  =3      BYTE      seqNo;                        /**/
39605  00  =3      BYTE      properties1;                  /* masked byte */
39606  00  =3      BYTE      dsk1;                         /* MSB */
39607  00  =3      BYTE      dsk2;                         /* LSB */
39608  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup1;                /**/
39609  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup2;                /**/
39610  00  =3  } ZW_NODE_PROVISION_SET_2BYTE_FRAME;
39611  00  =3  
39612  00  =3  /************************************************************/
39613  00  =3  /* Node Provision Set 3byte command class structs */        
39614  00  =3  /************************************************************/
39615  00  =3  typedef struct _ZW_NODE_PROVISION_SET_3BYTE_FRAME_
39616  00  =3  {
39617  00  =3      BYTE      cmdClass;                     /* The command class */
39618  00  =3      BYTE      cmd;                          /* The command */
39619  00  =3      BYTE      seqNo;                        /**/
39620  00  =3      BYTE      properties1;                  /* masked byte */
39621  00  =3      BYTE      dsk1;                         /* MSB */
39622  00  =3      BYTE      dsk2;                         
39623  00  =3      BYTE      dsk3;                         /* LSB */
39624  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup1;                /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 656 

39625  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup2;                /**/
39626  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup3;                /**/
39627  00  =3  } ZW_NODE_PROVISION_SET_3BYTE_FRAME;
39628  00  =3  
39629  00  =3  /************************************************************/
39630  00  =3  /* Node Provision Set 4byte command class structs */        
39631  00  =3  /************************************************************/
39632  00  =3  typedef struct _ZW_NODE_PROVISION_SET_4BYTE_FRAME_
39633  00  =3  {
39634  00  =3      BYTE      cmdClass;                     /* The command class */
39635  00  =3      BYTE      cmd;                          /* The command */
39636  00  =3      BYTE      seqNo;                        /**/
39637  00  =3      BYTE      properties1;                  /* masked byte */
39638  00  =3      BYTE      dsk1;                         /* MSB */
39639  00  =3      BYTE      dsk2;                         
39640  00  =3      BYTE      dsk3;                         
39641  00  =3      BYTE      dsk4;                         /* LSB */
39642  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup1;                /**/
39643  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup2;                /**/
39644  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup3;                /**/
39645  00  =3      VG_NODE_PROVISION_SET_4BYTE_VG variantgroup4;                /**/
39646  00  =3  } ZW_NODE_PROVISION_SET_4BYTE_FRAME;
39647  00  =3  
39648  00  =3  /************************************************************/
39649  00  =3  /* Node Provision Delete 1byte command class structs */     
39650  00  =3  /************************************************************/
39651  00  =3  typedef struct _ZW_NODE_PROVISION_DELETE_1BYTE_FRAME_
39652  00  =3  {
39653  00  =3      BYTE      cmdClass;                     /* The command class */
39654  00  =3      BYTE      cmd;                          /* The command */
39655  00  =3      BYTE      seqNo;                        /**/
39656  00  =3      BYTE      properties1;                  /* masked byte */
39657  00  =3      BYTE      dsk1;                         
39658  00  =3  } ZW_NODE_PROVISION_DELETE_1BYTE_FRAME;
39659  00  =3  
39660  00  =3  /************************************************************/
39661  00  =3  /* Node Provision Delete 2byte command class structs */     
39662  00  =3  /************************************************************/
39663  00  =3  typedef struct _ZW_NODE_PROVISION_DELETE_2BYTE_FRAME_
39664  00  =3  {
39665  00  =3      BYTE      cmdClass;                     /* The command class */
39666  00  =3      BYTE      cmd;                          /* The command */
39667  00  =3      BYTE      seqNo;                        /**/
39668  00  =3      BYTE      properties1;                  /* masked byte */
39669  00  =3      BYTE      dsk1;                         /* MSB */
39670  00  =3      BYTE      dsk2;                         /* LSB */
39671  00  =3  } ZW_NODE_PROVISION_DELETE_2BYTE_FRAME;
39672  00  =3  
39673  00  =3  /************************************************************/
39674  00  =3  /* Node Provision Delete 3byte command class structs */     
39675  00  =3  /************************************************************/
39676  00  =3  typedef struct _ZW_NODE_PROVISION_DELETE_3BYTE_FRAME_
39677  00  =3  {
39678  00  =3      BYTE      cmdClass;                     /* The command class */
39679  00  =3      BYTE      cmd;                          /* The command */
39680  00  =3      BYTE      seqNo;                        /**/
39681  00  =3      BYTE      properties1;                  /* masked byte */
39682  00  =3      BYTE      dsk1;                         /* MSB */
39683  00  =3      BYTE      dsk2;                         
39684  00  =3      BYTE      dsk3;                         /* LSB */
39685  00  =3  } ZW_NODE_PROVISION_DELETE_3BYTE_FRAME;
39686  00  =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 657 

39687  00  =3  /************************************************************/
39688  00  =3  /* Node Provision Delete 4byte command class structs */     
39689  00  =3  /************************************************************/
39690  00  =3  typedef struct _ZW_NODE_PROVISION_DELETE_4BYTE_FRAME_
39691  00  =3  {
39692  00  =3      BYTE      cmdClass;                     /* The command class */
39693  00  =3      BYTE      cmd;                          /* The command */
39694  00  =3      BYTE      seqNo;                        /**/
39695  00  =3      BYTE      properties1;                  /* masked byte */
39696  00  =3      BYTE      dsk1;                         /* MSB */
39697  00  =3      BYTE      dsk2;                         
39698  00  =3      BYTE      dsk3;                         
39699  00  =3      BYTE      dsk4;                         /* LSB */
39700  00  =3  } ZW_NODE_PROVISION_DELETE_4BYTE_FRAME;
39701  00  =3  
39702  00  =3  /************************************************************/
39703  00  =3  /* Node Provisioning List Iteration Get command class structs */
39704  00  =3  /************************************************************/
39705  00  =3  typedef struct _ZW_NODE_PROVISIONING_LIST_ITERATION_GET_FRAME_
39706  00  =3  {
39707  00  =3      BYTE      cmdClass;                     /* The command class */
39708  00  =3      BYTE      cmd;                          /* The command */
39709  00  =3      BYTE      seqNo;                        /**/
39710  00  =3      BYTE      remainingCounter;             /**/
39711  00  =3  } ZW_NODE_PROVISIONING_LIST_ITERATION_GET_FRAME;
39712  00  =3  
39713  00  =3  /************************************************************/
39714  00  =3  /* Node Provisioning List Iteration Report variant group structs */
39715  00  =3  /************************************************************/
39716  00  =3  typedef struct _VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_1BYTE_VG_
39717  00  =3  {
39718  00  =3      BYTE      properties2;                  /* masked byte */
39719  00  =3      BYTE      length;                       /**/
39720  00  =3      BYTE      value1;                       
39721  00  =3  } VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_1BYTE_VG;
39722  00  =3  
39723  00  =3  /************************************************************/
39724  00  =3  /* Node Provisioning List Iteration Report variant group structs */
39725  00  =3  /************************************************************/
39726  00  =3  typedef struct _VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_2BYTE_VG_
39727  00  =3  {
39728  00  =3      BYTE      properties2;                  /* masked byte */
39729  00  =3      BYTE      length;                       /**/
39730  00  =3      BYTE      value1;                       /* MSB */
39731  00  =3      BYTE      value2;                       /* LSB */
39732  00  =3  } VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_2BYTE_VG;
39733  00  =3  
39734  00  =3  /************************************************************/
39735  00  =3  /* Node Provisioning List Iteration Report variant group structs */
39736  00  =3  /************************************************************/
39737  00  =3  typedef struct _VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_3BYTE_VG_
39738  00  =3  {
39739  00  =3      BYTE      properties2;                  /* masked byte */
39740  00  =3      BYTE      length;                       /**/
39741  00  =3      BYTE      value1;                       /* MSB */
39742  00  =3      BYTE      value2;                       
39743  00  =3      BYTE      value3;                       /* LSB */
39744  00  =3  } VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_3BYTE_VG;
39745  00  =3  
39746  00  =3  /************************************************************/
39747  00  =3  /* Node Provisioning List Iteration Report variant group structs */
39748  00  =3  /************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 658 

39749  00  =3  typedef struct _VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG_
39750  00  =3  {
39751  00  =3      BYTE      properties2;                  /* masked byte */
39752  00  =3      BYTE      length;                       /**/
39753  00  =3      BYTE      value1;                       /* MSB */
39754  00  =3      BYTE      value2;                       
39755  00  =3      BYTE      value3;                       
39756  00  =3      BYTE      value4;                       /* LSB */
39757  00  =3  } VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG;
39758  00  =3  
39759  00  =3  /************************************************************/
39760  00  =3  /* Node Provisioning List Iteration Report 1byte command class structs */
39761  00  =3  /************************************************************/
39762  00  =3  typedef struct _ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_1BYTE_FRAME_
39763  00  =3  {
39764  00  =3      BYTE      cmdClass;                     /* The command class */
39765  00  =3      BYTE      cmd;                          /* The command */
39766  00  =3      BYTE      seqNo;                        /**/
39767  00  =3      BYTE      remainingCount;               /**/
39768  00  =3      BYTE      properties1;                  /* masked byte */
39769  00  =3      BYTE      dsk1;                         
39770  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup1;                /**/
39771  00  =3  } ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_1BYTE_FRAME;
39772  00  =3  
39773  00  =3  /************************************************************/
39774  00  =3  /* Node Provisioning List Iteration Report 2byte command class structs */
39775  00  =3  /************************************************************/
39776  00  =3  typedef struct _ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_2BYTE_FRAME_
39777  00  =3  {
39778  00  =3      BYTE      cmdClass;                     /* The command class */
39779  00  =3      BYTE      cmd;                          /* The command */
39780  00  =3      BYTE      seqNo;                        /**/
39781  00  =3      BYTE      remainingCount;               /**/
39782  00  =3      BYTE      properties1;                  /* masked byte */
39783  00  =3      BYTE      dsk1;                         /* MSB */
39784  00  =3      BYTE      dsk2;                         /* LSB */
39785  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup1;                /**/
39786  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup2;                /**/
39787  00  =3  } ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_2BYTE_FRAME;
39788  00  =3  
39789  00  =3  /************************************************************/
39790  00  =3  /* Node Provisioning List Iteration Report 3byte command class structs */
39791  00  =3  /************************************************************/
39792  00  =3  typedef struct _ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_3BYTE_FRAME_
39793  00  =3  {
39794  00  =3      BYTE      cmdClass;                     /* The command class */
39795  00  =3      BYTE      cmd;                          /* The command */
39796  00  =3      BYTE      seqNo;                        /**/
39797  00  =3      BYTE      remainingCount;               /**/
39798  00  =3      BYTE      properties1;                  /* masked byte */
39799  00  =3      BYTE      dsk1;                         /* MSB */
39800  00  =3      BYTE      dsk2;                         
39801  00  =3      BYTE      dsk3;                         /* LSB */
39802  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup1;                /**/
39803  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup2;                /**/
39804  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup3;                /**/
39805  00  =3  } ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_3BYTE_FRAME;
39806  00  =3  
39807  00  =3  /************************************************************/
39808  00  =3  /* Node Provisioning List Iteration Report 4byte command class structs */
39809  00  =3  /************************************************************/
39810  00  =3  typedef struct _ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_FRAME_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 659 

39811  00  =3  {
39812  00  =3      BYTE      cmdClass;                     /* The command class */
39813  00  =3      BYTE      cmd;                          /* The command */
39814  00  =3      BYTE      seqNo;                        /**/
39815  00  =3      BYTE      remainingCount;               /**/
39816  00  =3      BYTE      properties1;                  /* masked byte */
39817  00  =3      BYTE      dsk1;                         /* MSB */
39818  00  =3      BYTE      dsk2;                         
39819  00  =3      BYTE      dsk3;                         
39820  00  =3      BYTE      dsk4;                         /* LSB */
39821  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup1;                /**/
39822  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup2;                /**/
39823  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup3;                /**/
39824  00  =3      VG_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_VG variantgroup4;                /**/
39825  00  =3  } ZW_NODE_PROVISIONING_LIST_ITERATION_REPORT_4BYTE_FRAME;
39826  00  =3  
39827  00  =3  /************************************************************/
39828  00  =3  /* Node Provision Get 1byte command class structs */        
39829  00  =3  /************************************************************/
39830  00  =3  typedef struct _ZW_NODE_PROVISION_GET_1BYTE_FRAME_
39831  00  =3  {
39832  00  =3      BYTE      cmdClass;                     /* The command class */
39833  00  =3      BYTE      cmd;                          /* The command */
39834  00  =3      BYTE      seqNo;                        /**/
39835  00  =3      BYTE      properties1;                  /* masked byte */
39836  00  =3      BYTE      dsk1;                         
39837  00  =3  } ZW_NODE_PROVISION_GET_1BYTE_FRAME;
39838  00  =3  
39839  00  =3  /************************************************************/
39840  00  =3  /* Node Provision Get 2byte command class structs */        
39841  00  =3  /************************************************************/
39842  00  =3  typedef struct _ZW_NODE_PROVISION_GET_2BYTE_FRAME_
39843  00  =3  {
39844  00  =3      BYTE      cmdClass;                     /* The command class */
39845  00  =3      BYTE      cmd;                          /* The command */
39846  00  =3      BYTE      seqNo;                        /**/
39847  00  =3      BYTE      properties1;                  /* masked byte */
39848  00  =3      BYTE      dsk1;                         /* MSB */
39849  00  =3      BYTE      dsk2;                         /* LSB */
39850  00  =3  } ZW_NODE_PROVISION_GET_2BYTE_FRAME;
39851  00  =3  
39852  00  =3  /************************************************************/
39853  00  =3  /* Node Provision Get 3byte command class structs */        
39854  00  =3  /************************************************************/
39855  00  =3  typedef struct _ZW_NODE_PROVISION_GET_3BYTE_FRAME_
39856  00  =3  {
39857  00  =3      BYTE      cmdClass;                     /* The command class */
39858  00  =3      BYTE      cmd;                          /* The command */
39859  00  =3      BYTE      seqNo;                        /**/
39860  00  =3      BYTE      properties1;                  /* masked byte */
39861  00  =3      BYTE      dsk1;                         /* MSB */
39862  00  =3      BYTE      dsk2;                         
39863  00  =3      BYTE      dsk3;                         /* LSB */
39864  00  =3  } ZW_NODE_PROVISION_GET_3BYTE_FRAME;
39865  00  =3  
39866  00  =3  /************************************************************/
39867  00  =3  /* Node Provision Get 4byte command class structs */        
39868  00  =3  /************************************************************/
39869  00  =3  typedef struct _ZW_NODE_PROVISION_GET_4BYTE_FRAME_
39870  00  =3  {
39871  00  =3      BYTE      cmdClass;                     /* The command class */
39872  00  =3      BYTE      cmd;                          /* The command */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 660 

39873  00  =3      BYTE      seqNo;                        /**/
39874  00  =3      BYTE      properties1;                  /* masked byte */
39875  00  =3      BYTE      dsk1;                         /* MSB */
39876  00  =3      BYTE      dsk2;                         
39877  00  =3      BYTE      dsk3;                         
39878  00  =3      BYTE      dsk4;                         /* LSB */
39879  00  =3  } ZW_NODE_PROVISION_GET_4BYTE_FRAME;
39880  00  =3  
39881  00  =3  /************************************************************/
39882  00  =3  /* Node Provision Report variant group structs */           
39883  00  =3  /************************************************************/
39884  00  =3  typedef struct _VG_NODE_PROVISION_REPORT_1BYTE_VG_
39885  00  =3  {
39886  00  =3      BYTE      properties1;                  /* masked byte */
39887  00  =3      BYTE      length;                       /**/
39888  00  =3      BYTE      value1;                       
39889  00  =3  } VG_NODE_PROVISION_REPORT_1BYTE_VG;
39890  00  =3  
39891  00  =3  /************************************************************/
39892  00  =3  /* Node Provision Report variant group structs */           
39893  00  =3  /************************************************************/
39894  00  =3  typedef struct _VG_NODE_PROVISION_REPORT_2BYTE_VG_
39895  00  =3  {
39896  00  =3      BYTE      properties1;                  /* masked byte */
39897  00  =3      BYTE      length;                       /**/
39898  00  =3      BYTE      value1;                       /* MSB */
39899  00  =3      BYTE      value2;                       /* LSB */
39900  00  =3  } VG_NODE_PROVISION_REPORT_2BYTE_VG;
39901  00  =3  
39902  00  =3  /************************************************************/
39903  00  =3  /* Node Provision Report variant group structs */           
39904  00  =3  /************************************************************/
39905  00  =3  typedef struct _VG_NODE_PROVISION_REPORT_3BYTE_VG_
39906  00  =3  {
39907  00  =3      BYTE      properties1;                  /* masked byte */
39908  00  =3      BYTE      length;                       /**/
39909  00  =3      BYTE      value1;                       /* MSB */
39910  00  =3      BYTE      value2;                       
39911  00  =3      BYTE      value3;                       /* LSB */
39912  00  =3  } VG_NODE_PROVISION_REPORT_3BYTE_VG;
39913  00  =3  
39914  00  =3  /************************************************************/
39915  00  =3  /* Node Provision Report variant group structs */           
39916  00  =3  /************************************************************/
39917  00  =3  typedef struct _VG_NODE_PROVISION_REPORT_4BYTE_VG_
39918  00  =3  {
39919  00  =3      BYTE      properties1;                  /* masked byte */
39920  00  =3      BYTE      length;                       /**/
39921  00  =3      BYTE      value1;                       /* MSB */
39922  00  =3      BYTE      value2;                       
39923  00  =3      BYTE      value3;                       
39924  00  =3      BYTE      value4;                       /* LSB */
39925  00  =3  } VG_NODE_PROVISION_REPORT_4BYTE_VG;
39926  00  =3  
39927  00  =3  /************************************************************/
39928  00  =3  /* Node Provision Report 1byte command class structs */     
39929  00  =3  /************************************************************/
39930  00  =3  typedef struct _ZW_NODE_PROVISION_REPORT_1BYTE_FRAME_
39931  00  =3  {
39932  00  =3      BYTE      cmdClass;                     /* The command class */
39933  00  =3      BYTE      cmd;                          /* The command */
39934  00  =3      BYTE      seqNo;                        /**/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 661 

39935  00  =3      BYTE      properties1;                  /* masked byte */
39936  00  =3      BYTE      dsk1;                         
39937  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup1;                /**/
39938  00  =3  } ZW_NODE_PROVISION_REPORT_1BYTE_FRAME;
39939  00  =3  
39940  00  =3  /************************************************************/
39941  00  =3  /* Node Provision Report 2byte command class structs */     
39942  00  =3  /************************************************************/
39943  00  =3  typedef struct _ZW_NODE_PROVISION_REPORT_2BYTE_FRAME_
39944  00  =3  {
39945  00  =3      BYTE      cmdClass;                     /* The command class */
39946  00  =3      BYTE      cmd;                          /* The command */
39947  00  =3      BYTE      seqNo;                        /**/
39948  00  =3      BYTE      properties1;                  /* masked byte */
39949  00  =3      BYTE      dsk1;                         /* MSB */
39950  00  =3      BYTE      dsk2;                         /* LSB */
39951  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup1;                /**/
39952  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup2;                /**/
39953  00  =3  } ZW_NODE_PROVISION_REPORT_2BYTE_FRAME;
39954  00  =3  
39955  00  =3  /************************************************************/
39956  00  =3  /* Node Provision Report 3byte command class structs */     
39957  00  =3  /************************************************************/
39958  00  =3  typedef struct _ZW_NODE_PROVISION_REPORT_3BYTE_FRAME_
39959  00  =3  {
39960  00  =3      BYTE      cmdClass;                     /* The command class */
39961  00  =3      BYTE      cmd;                          /* The command */
39962  00  =3      BYTE      seqNo;                        /**/
39963  00  =3      BYTE      properties1;                  /* masked byte */
39964  00  =3      BYTE      dsk1;                         /* MSB */
39965  00  =3      BYTE      dsk2;                         
39966  00  =3      BYTE      dsk3;                         /* LSB */
39967  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup1;                /**/
39968  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup2;                /**/
39969  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup3;                /**/
39970  00  =3  } ZW_NODE_PROVISION_REPORT_3BYTE_FRAME;
39971  00  =3  
39972  00  =3  /************************************************************/
39973  00  =3  /* Node Provision Report 4byte command class structs */     
39974  00  =3  /************************************************************/
39975  00  =3  typedef struct _ZW_NODE_PROVISION_REPORT_4BYTE_FRAME_
39976  00  =3  {
39977  00  =3      BYTE      cmdClass;                     /* The command class */
39978  00  =3      BYTE      cmd;                          /* The command */
39979  00  =3      BYTE      seqNo;                        /**/
39980  00  =3      BYTE      properties1;                  /* masked byte */
39981  00  =3      BYTE      dsk1;                         /* MSB */
39982  00  =3      BYTE      dsk2;                         
39983  00  =3      BYTE      dsk3;                         
39984  00  =3      BYTE      dsk4;                         /* LSB */
39985  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup1;                /**/
39986  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup2;                /**/
39987  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup3;                /**/
39988  00  =3      VG_NODE_PROVISION_REPORT_4BYTE_VG variantgroup4;                /**/
39989  00  =3  } ZW_NODE_PROVISION_REPORT_4BYTE_FRAME;
39990  00  =3  
39991  00  =3  
39992  00  =3  
39993  00  =3  /**********************************************************************/
39994  00  =3  /* Command class structs use to encapsulating other commands          */
39995  00  =3  /* Do not define these commands in ZW_FRAME_COLLECTION_MACRO          */
39996  00  =3  /* Do not include commands defined in ZW_FRAME_COLLECTION_MACRO below */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 662 

39997  00  =3  /**********************************************************************/
39998  00  =3  typedef union _ALL_EXCEPT_ENCAP
39999  00  =3  {
40000  00  =3  ZW_FRAME_COLLECTION_MACRO0
40001  00  =3  ZW_FRAME_COLLECTION_MACRO1
40002  00  =3  ZW_FRAME_COLLECTION_MACRO2
40003  00  =3  ZW_FRAME_COLLECTION_MACRO3
40004  00  =3  ZW_FRAME_COLLECTION_MACRO4
40005  00  =3  ZW_FRAME_COLLECTION_MACRO5
40006  00  =3  } ALL_EXCEPT_ENCAP;
40007  00  =3  
40008  00  =3  typedef struct _ZW_MULTI_COMMAND_ENCAP_FRAME_
40009  00  =3  {
40010  00  =3    BYTE        cmdClass;            /* The command class */
40011  00  =3    BYTE        cmd;                 /* The command */
40012  00  =3    BYTE        numberOfCommands;
40013  00  =3    BYTE        commandLength;
40014  00  =3    ALL_EXCEPT_ENCAP     encapFrame;
40015  00  =3  } ZW_MULTI_COMMAND_ENCAP_FRAME;
40016  00  =3  
40017  00  =3  typedef struct _ZW_COMPOSITE_CMD_ENCAP_FRAME_
40018  00  =3  {
40019  00  =3    BYTE        cmdClass;            /* The command class */
40020  00  =3    BYTE        cmd;                 /* The command */
40021  00  =3    BYTE        endPointMask1;       /* End point mask 1 */
40022  00  =3    BYTE        endPointMask2;       /* End point mask 2 */
40023  00  =3    ALL_EXCEPT_ENCAP     encapFrame;
40024  00  =3  } ZW_COMPOSITE_CMD_ENCAP_FRAME;
40025  00  =3  
40026  00  =3  typedef struct _ZW_COMPOSITE_REPLY_ENCAP_FRAME_
40027  00  =3  {
40028  00  =3    BYTE        cmdClass;            /* The command class */
40029  00  =3    BYTE        cmd;                 /* The command */
40030  00  =3    BYTE        endPoint;            /* Bit7-5=Reserved and Bit0-4=End Point */
40031  00  =3    ALL_EXCEPT_ENCAP     encapFrame;
40032  00  =3  } ZW_COMPOSITE_REPLY_ENCAP_FRAME;
40033  00  =3  
40034  00  =3  typedef struct _ZW_MULTI_INSTANCE_CMD_ENCAP_FRAME_
40035  00  =3  {
40036  00  =3    BYTE        cmdClass;            /* The command class */
40037  00  =3    BYTE        cmd;                 /* The command */
40038  00  =3    BYTE        instance;            /* The instance to access */
40039  00  =3    ALL_EXCEPT_ENCAP     encapFrame;
40040  00  =3  } ZW_MULTI_INSTANCE_CMD_ENCAP_FRAME;
40041  00  =3  
40042  00  =3  typedef struct _ZW_MULTI_CHANNEL_CMD_ENCAP_V2_FRAME_
40043  00  =3  {
40044  00  =3      BYTE      cmdClass;                     /* The command class */
40045  00  =3      BYTE      cmd;                          /* The command */
40046  00  =3      BYTE      properties1;                  /* masked byte */
40047  00  =3      BYTE      properties2;                  /* masked byte */
40048  00  =3    ALL_EXCEPT_ENCAP     encapFrame;
40049  00  =3  } ZW_MULTI_CHANNEL_CMD_ENCAP_V2_FRAME;
40050  00  =3  
40051  00  =3  typedef struct _ZW_SECURITY_MESSAGE_ENCAP_FRAME_
40052  00  =3  {
40053  00  =3    BYTE        cmdClass;            /* The command class */
40054  00  =3    BYTE        cmd;                 /* The command */
40055  00  =3    BYTE        initVectorByte1;     /* The initialization vector byte 1 (MSB) */
40056  00  =3    BYTE        initVectorByte2;     /* The initialization vector byte 2  */
40057  00  =3    BYTE        initVectorByte3;     /* The initialization vector byte 3 */
40058  00  =3    BYTE        initVectorByte4;     /* The initialization vector byte 4 */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 663 

40059  00  =3    BYTE        initVectorByte5;     /* The initialization vector byte 5 */
40060  00  =3    BYTE        initVectorByte6;     /* The initialization vector byte 6 */
40061  00  =3    BYTE        initVectorByte7;     /* The initialization vector byte 7 */
40062  00  =3    BYTE        initVectorByte8;     /* The initialization vector byte 8 (LSB) */
40063  00  =3    BYTE        securityEncapMessage[29];
40064  00  =3    BYTE        receiverNonceIdent;
40065  00  =3    BYTE        messageAuthenticationCodeByte1; /* The Authentication code byte 1 (MSB) */
40066  00  =3    BYTE        messageAuthenticationCodeByte2; /* The Authentication code byte 2 */
40067  00  =3    BYTE        messageAuthenticationCodeByte3; /* The Authentication code byte 3 */
40068  00  =3    BYTE        messageAuthenticationCodeByte4; /* The Authentication code byte 4 */
40069  00  =3    BYTE        messageAuthenticationCodeByte5; /* The Authentication code byte 5 */
40070  00  =3    BYTE        messageAuthenticationCodeByte6; /* The Authentication code byte 6 */
40071  00  =3    BYTE        messageAuthenticationCodeByte7; /* The Authentication code byte 7 */
40072  00  =3    BYTE        messageAuthenticationCodeByte8; /* The Authentication code byte 8 (LSB) */
40073  00  =3  } ZW_SECURITY_MESSAGE_ENCAP_FRAME;
40074  00  =3  
40075  00  =3  /************************************************************/
40076  00  =3  /* Union of all command classes                             */
40077  00  =3  /************************************************************/
40078  00  =3  typedef union _ZW_APPLICATION_TX_BUFFER_
40079  00  =3  {
40080  00  =3    ZW_MULTI_COMMAND_ENCAP_FRAME           ZW_MultiCommandEncapFrame;
40081  00  =3    ZW_COMPOSITE_CMD_ENCAP_FRAME           ZW_CompositeCmdEncapFrame;
40082  00  =3    ZW_COMPOSITE_REPLY_ENCAP_FRAME         ZW_CompositeReplyEncapFrame;
40083  00  =3    ZW_MULTI_INSTANCE_CMD_ENCAP_FRAME      ZW_MultiInstanceCmdEncapFrame;
40084  00  =3    ZW_MULTI_CHANNEL_CMD_ENCAP_V2_FRAME    ZW_MultiChannelCmdEncapV2Frame;
40085  00  =3  ZW_FRAME_COLLECTION_MACRO0
40086  00  =3  ZW_FRAME_COLLECTION_MACRO1
40087  00  =3  ZW_FRAME_COLLECTION_MACRO2
40088  00  =3  ZW_FRAME_COLLECTION_MACRO3
40089  00  =3  ZW_FRAME_COLLECTION_MACRO4
40090  00  =3  ZW_FRAME_COLLECTION_MACRO5
40091  00  =3  } ZW_APPLICATION_TX_BUFFER;
40092  00  =3  
40093  00  =3  /************************************************************/
40094  00  =3  /* Union of all command classes with room for a full        */
40095  00  =3  /* meta data frame                                          */
40096  00  =3  /************************************************************/
40097  00  =3  typedef union _ZW_APPLICATION_META_TX_BUFFER_
40098  00  =3  {
40099  00  =3    ZW_MULTI_COMMAND_ENCAP_FRAME           ZW_MultiCommandEncapFrame;
40100  00  =3    ZW_COMPOSITE_CMD_ENCAP_FRAME           ZW_CompositeCmdEncapFrame;
40101  00  =3    ZW_COMPOSITE_REPLY_ENCAP_FRAME         ZW_CompositeReplyEncapFrame;
40102  00  =3    ZW_MULTI_INSTANCE_CMD_ENCAP_FRAME      ZW_MultiInstanceCmdEncapFrame;
40103  00  =3    ZW_MULTI_CHANNEL_CMD_ENCAP_V2_FRAME    ZW_MultiChannelCmdEncapV2Frame;
40104  00  =3  ZW_FRAME_COLLECTION_MACRO0
40105  00  =3  ZW_FRAME_COLLECTION_MACRO1
40106  00  =3  ZW_FRAME_COLLECTION_MACRO2
40107  00  =3  ZW_FRAME_COLLECTION_MACRO3
40108  00  =3  ZW_FRAME_COLLECTION_MACRO4
40109  00  =3  ZW_FRAME_COLLECTION_MACRO5
40110  00  =3    BYTE                                    bPadding[META_DATA_MAX_DATA_SIZE];
40111  00  =3  } ZW_APPLICATION_META_TX_BUFFER;
40112  00  =3  
40113  00  =3  
40114  00  =3  #endif
  16      =2  #include <ZW_TransportEndpoint.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Transport layer for Multi Channel endpoint functionality.
   4      =3   * @copyright Copyright (c) 2001-2017
   5      =3   * Sigma Designs, Inc.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 664 

   6      =3   * All Rights Reserved
   7      =3   */
   8      =3  
   9      =3  #ifndef _ZW_TRANSPORTENDPOINT_H_
  10      =3  #define _ZW_TRANSPORTENDPOINT_H_
  11      =3  
  12      =3  /****************************************************************************/
  13      =3  /*                              INCLUDE FILES                               */
  14      =3  /****************************************************************************/
  15      =3  #include <ZW_typedefs.h>
   1      =4  /*******************************  ZW_typedefs.h  *******************************
   2      =4   *           #######
   3      =4   *           ##  ##
   4      =4   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =4   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =4   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =4   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =4   *          #######   ####   ##  ##  #####       ##  #####
   9      =4   *                                           #####
  10      =4   *          Products that speak Z-Wave work together better
  11      =4   *
  12      =4   *              Copyright (c) 2008
  13      =4   *              Zensys A/S
  14      =4   *              Denmark
  15      =4   *
  16      =4   *              All Rights Reserved
  17      =4   *
  18      =4   *    This source file is subject to the terms and conditions of the
  19      =4   *    Zensys Software License Agreement which restricts the manner
  20      =4   *    in which it may be used.
  21      =4   *
  22      =4   *---------------------------------------------------------------------------
  23      =4   *
  24      =4   * Description: Module description
  25      =4   *
  26      =4   * Author:   Ivar Jeppesen
  27      =4   *
  28      =4   * Last Changed By:  $Author: efh $
  29      =4   * Revision:         $Revision: 29359 $
  30      =4   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =4   *
  32      =4   ****************************************************************************/
  33      =4  #ifndef _ZW_TYPEDEFS_H_
  16      =3  #include <ZW_classcmd.h>
   1      =4  // Generated on: 04.08.2017 15:17:23
   2      =4  /*******************************  ZW_classcmd.h  *******************************
   3      =4   *
   4      =4   * Copyright (c) 2001-2016
   5      =4   * Sigma Designs, Inc.
   6      =4   * All Rights Reserved
   7      =4   *
   8      =4   *---------------------------------------------------------------------------
   9      =4   *
  10      =4   * Description: Device and command class types and definitions.
  11      =4   *
  12      =4   *              Be aware that temporary types and definitions can be present
  13      =4   *              in this header file. Only the types and definitions found in
  14      =4   *              the latest version of the Z-Wave Device Class Specification
  15      =4   *              (doc. nr. 9031002xx) is valid.
  16      =4   *
  17      =4   * Author: JÑrgen Franck
  18      =4   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 665 

  19      =4   * Last Changed By:  $Author: sro $
  20      =4   * Revision:         $Revision: 35619 $
  21      =4   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =4   *
  23      =4   ****************************************************************************/
  24      =4  #ifndef _ZW_CLASSCMD_H_
  17      =3  #include <ZW_tx_mutex.h>
   1      =4  /**
   2      =4   * @file
   3      =4   * Transmit mutex.
   4      =4   *
   5      =4   * Protected transmit buffers used to send data. Use this module to get
   6      =4   * a transmit buffer and release the buffer again when data is sent and application
   7      =4   * is notified with a callback. There are 2 types for buffers: one for unsolicited
   8      =4   * commands and one for responses to incoming commands.
   9      =4   *
  10      =4   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
  11      =4   */
  12      =4  
  13      =4  #ifndef _ZW_MUTEX_H_
  14      =4  #define _ZW_MUTEX_H_
  15      =4  
  16      =4  /****************************************************************************/
  17      =4  /*                              INCLUDE FILES                               */
  18      =4  /****************************************************************************/
  19      =4  #ifdef __C51__
  20      =4  #include <ZW_stdint.h>
   1      =5  /*
   2      =5   * ZW_stdint.h
   3      =5   *
   4      =5   * Define integer types by their conventional POSIX names [1].
   5      =5   * Note: This is a small subset of the spec, NOT a complete definition.
   6      =5   *
   7      =5   *  [1] http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html
   8      =5   *
   9      =5   *  Created on: 18/01/2013
  10      =5   *      Author: jbu
  11      =5   */
  12      =5  #ifndef ZW_STDINT_H_
  13      =5  #define ZW_STDINT_H_
  14      =5  
  15      =5  #ifdef __GNUC__
  18      =5  
  19      =5  #ifndef _STDINT_H // yield to "proper" stdint
  20      =5  #define _STDINT_H
  21      =5  
  22      =5  typedef unsigned char uint8_t;
  23      =5  typedef unsigned short uint16_t;
  24      =5  
  25      =5  /* These are needed to satisfy Yakindu*/
  26      =5  #ifndef __GNUC__
  27      =5  typedef signed short int_fast16_t;
  28      =5  typedef unsigned short uint_fast16_t;
  29      =5  #endif
  30      =5  #ifdef __C51__
  31      =5  typedef signed long int32_t;
  32      =5  typedef unsigned long uint32_t;
  33      =5  typedef int32_t  *intptr_t;
  34      =5  #endif
  35      =5  typedef unsigned char bool;
  36      =5  //   typedef unsigned __int64  uintptr_t;
  37      =5  //#else // _WIN64 ][
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 666 

  38      =5  //   typedef _W64 signed int   intptr_t;
  39      =5  //   typedef _W64 unsigned int uintptr_t;
  40      =5  #define true (1)
  41      =5  #define false (0)
  42      =5  
  43      =5  #endif /*#ifndef _STDINT_H*/
  44      =5  
  45      =5  /* These are actually not POSIX, but from contiki */
  46      =5  typedef uint8_t u8_t;
  47      =5  typedef uint16_t u16_t;
  48      =5  
  49      =5  #endif /* ZW_STDINT_H_ */
  21      =4  #else
  24      =4  #include <ZW_typedefs.h>
   1      =5  /*******************************  ZW_typedefs.h  *******************************
   2      =5   *           #######
   3      =5   *           ##  ##
   4      =5   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =5   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =5   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =5   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =5   *          #######   ####   ##  ##  #####       ##  #####
   9      =5   *                                           #####
  10      =5   *          Products that speak Z-Wave work together better
  11      =5   *
  12      =5   *              Copyright (c) 2008
  13      =5   *              Zensys A/S
  14      =5   *              Denmark
  15      =5   *
  16      =5   *              All Rights Reserved
  17      =5   *
  18      =5   *    This source file is subject to the terms and conditions of the
  19      =5   *    Zensys Software License Agreement which restricts the manner
  20      =5   *    in which it may be used.
  21      =5   *
  22      =5   *---------------------------------------------------------------------------
  23      =5   *
  24      =5   * Description: Module description
  25      =5   *
  26      =5   * Author:   Ivar Jeppesen
  27      =5   *
  28      =5   * Last Changed By:  $Author: efh $
  29      =5   * Revision:         $Revision: 29359 $
  30      =5   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =5   *
  32      =5   ****************************************************************************/
  33      =5  #ifndef _ZW_TYPEDEFS_H_
  25      =4  #include <ZW_classcmd.h>
   1      =5  // Generated on: 04.08.2017 15:17:23
   2      =5  /*******************************  ZW_classcmd.h  *******************************
   3      =5   *
   4      =5   * Copyright (c) 2001-2016
   5      =5   * Sigma Designs, Inc.
   6      =5   * All Rights Reserved
   7      =5   *
   8      =5   *---------------------------------------------------------------------------
   9      =5   *
  10      =5   * Description: Device and command class types and definitions.
  11      =5   *
  12      =5   *              Be aware that temporary types and definitions can be present
  13      =5   *              in this header file. Only the types and definitions found in
  14      =5   *              the latest version of the Z-Wave Device Class Specification
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 667 

  15      =5   *              (doc. nr. 9031002xx) is valid.
  16      =5   *
  17      =5   * Author: JÑrgen Franck
  18      =5   *
  19      =5   * Last Changed By:  $Author: sro $
  20      =5   * Revision:         $Revision: 35619 $
  21      =5   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =5   *
  23      =5   ****************************************************************************/
  24      =5  #ifndef _ZW_CLASSCMD_H_
  26      =4  #include <CommandClass.h>
   1      =5  /**
   2      =5   * @file
   3      =5   * Common types and definitions for all command classes.
   4      =5   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =5   */
   6      =5  
   7      =5  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
   8      =5  #define PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
   9      =5  
  10      =5  #include <ZW_typedefs.h>
   1      =6  /*******************************  ZW_typedefs.h  *******************************
   2      =6   *           #######
   3      =6   *           ##  ##
   4      =6   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =6   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =6   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =6   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =6   *          #######   ####   ##  ##  #####       ##  #####
   9      =6   *                                           #####
  10      =6   *          Products that speak Z-Wave work together better
  11      =6   *
  12      =6   *              Copyright (c) 2008
  13      =6   *              Zensys A/S
  14      =6   *              Denmark
  15      =6   *
  16      =6   *              All Rights Reserved
  17      =6   *
  18      =6   *    This source file is subject to the terms and conditions of the
  19      =6   *    Zensys Software License Agreement which restricts the manner
  20      =6   *    in which it may be used.
  21      =6   *
  22      =6   *---------------------------------------------------------------------------
  23      =6   *
  24      =6   * Description: Module description
  25      =6   *
  26      =6   * Author:   Ivar Jeppesen
  27      =6   *
  28      =6   * Last Changed By:  $Author: efh $
  29      =6   * Revision:         $Revision: 29359 $
  30      =6   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =6   *
  32      =6   ****************************************************************************/
  33      =6  #ifndef _ZW_TYPEDEFS_H_
  11      =5  #include <ZW_stdint.h>
   1      =6  /*
   2      =6   * ZW_stdint.h
   3      =6   *
   4      =6   * Define integer types by their conventional POSIX names [1].
   5      =6   * Note: This is a small subset of the spec, NOT a complete definition.
   6      =6   *
   7      =6   *  [1] http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 668 

   8      =6   *
   9      =6   *  Created on: 18/01/2013
  10      =6   *      Author: jbu
  11      =6   */
  12      =6  #ifndef ZW_STDINT_H_
  12      =5  
  13      =5  /****************************************************************************/
  14      =5  /*                     EXPORTED TYPES and DEFINITIONS                       */
  15      =5  /****************************************************************************/
  16      =5  
  17      =5  /**
  18      =5   * Can be used for pairing a command class with a specific command in the command class.
  19      =5   */
  20      =5  typedef struct
  21      =5  {
  22      =5    uint8_t cmdClass; /**< Command class*/
  23      =5    uint8_t cmd; /**< Command*/
  24      =5  }
  25      =5  cc_group_t;
  26      =5  
  27      =5  /**
  28      =5   * For backwards compatibility.
  29      =5   */
  30      =5  typedef cc_group_t CMD_CLASS_GRP;
  31      =5  
  32      =5  /**
  33      =5   * Can be used for pairing AGI profile identifiers listed in \cite SDS12657.
  34      =5   */
  35      =5  typedef struct
  36      =5  {
  37      =5    uint8_t profile_MS; /**< AGI profile of type: ASSOCIATION_GROUP_INFO_REPORT_PROFILE_...*/
  38      =5    uint8_t profile_LS; /**< AGI profile of type: ASSOCIATION_GROUP_INFO_REPORT_PROFILE_...*/
  39      =5  }
  40      =5  agi_profile_t;
  41      =5  
  42      =5  /**
  43      =5   * For backwards compatibility.
  44      =5   */
  45      =5  typedef agi_profile_t AGI_PROFILE;
  46      =5  
  47      =5  /**
  48      =5   * Callback status used on framework API for request/response-job
  49      =5   */
  50      =5  typedef enum
  51      =5  {
  52      =5    JOB_STATUS_SUCCESS = 0, /**< Job has been started. */
  53      =5    JOB_STATUS_BUSY, /**< Job couldn't start.  */
  54      =5    JOB_STATUS_NO_DESTINATIONS /**< Job couldn't start because there is no destinations. */
  55      =5  }
  56      =5  job_status_t;
  57      =5  
  58      =5  /**
  59      =5   * For backwards compatibility.
  60      =5   */
  61      =5  typedef job_status_t JOB_STATUS;
  62      =5  
  63      =5  /**
  64      =5   * Indicates whether all transmissions are done. Used by \ref TRANSMISSION_RESULT.
  65      =5   */
  66      =5  typedef enum
  67      =5  {
  68      =5    TRANSMISSION_RESULT_NOT_FINISHED, /**< Still transmitting. */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 669 

  69      =5    TRANSMISSION_RESULT_FINISHED /**< Done transmitting to all nodes. */
  70      =5  } TRANSMISSION_RESULT_FINISH_STATUS;
  71      =5  
  72      =5  
  73      =5  /**
  74      =5   * Status on incoming frame. Use same values as cc_supervision_status_t
  75      =5   */
  76      =5  typedef enum
  77      =5  {
  78      =5    RECEIVED_FRAME_STATUS_NO_SUPPORT = 0x00, /**< Frame not supported*/
  79      =5    RECEIVED_FRAME_STATUS_FAIL = 0x02,       /**< Could not handle incoming frame*/
  80      =5    RECEIVED_FRAME_STATUS_SUCCESS = 0xFF     /**< Frame received successfully*/
  81      =5  } received_frame_status_t;
  82      =5  
  83      =5  
  84      =5  /**
  85      =5   * This struct defines the values which can be parsed to a callback function
  86      =5   * upon an ended transmission regardless of the result.
  87      =5   */
  88      =5  typedef struct
  89      =5  {
  90      =5    uint8_t nodeId; /**< The ID of the node to which the transmission has been done. */
  91      =5    uint8_t status; /**< Status of the transmission. See ZW_transport_api.h. */
  92      =5    /**
  93      =5     * If transmission to several nodes, this flag is set if transmission for the last node has ended.
  94      =5     */
  95      =5    TRANSMISSION_RESULT_FINISH_STATUS isFinished;
  96      =5  }
  97      =5  transmission_result_t;
  98      =5  
  99      =5  /**
 100      =5   * For backwards compatibility.
 101      =5   */
 102      =5  typedef transmission_result_t TRANSMISSION_RESULT;
 103      =5  
 104      =5  /****************************************************************************/
 105      =5  /*                              EXPORTED DATA                               */
 106      =5  /****************************************************************************/
 107      =5  
 108      =5  /****************************************************************************/
 109      =5  /*                           EXPORTED FUNCTIONS                             */
 110      =5  /****************************************************************************/
 111      =5  
 112      =5  JOB_STATUS cc_engine_multicast_request(AGI_PROFILE* pProfile,
 113      =5                                         uint8_t endpoint,
 114      =5                                         CMD_CLASS_GRP *pcmdGrp,
 115      =5                                         uint8_t* pPayload,
 116      =5                                         uint8_t size,
 117      =5                                         uint8_t fSupervisionEnable,
 118      =5                                         VOID_CALLBACKFUNC(pCbFunc) (TRANSMISSION_RESULT * pTransmissionResu
             -lt));
 119      =5  
 120      =5  #endif /* PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_ */
  27      =4  #include <ZW_transport_api.h>
   1      =5  /****************************************************************************
   2      =5   *
   3      =5   * Copyright (c) 2001-2013
   4      =5   * Sigma Designs, Inc.
   5      =5   * All Rights Reserved
   6      =5   *
   7      =5   *---------------------------------------------------------------------------
   8      =5   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 670 

   9      =5   * Description: Z-Wave Transport Application layer interface
  10      =5   *
  11      =5   * Author:   Ivar Jeppesen
  12      =5   *
  13      =5   * Last Changed By:  $Author: jsi $
  14      =5   * Revision:         $Revision: 31344 $
  15      =5   * Last Changed:     $Date: 2015-04-17 13:53:23 +0200 (fr, 17 apr 2015) $
  16      =5   *
  17      =5   ****************************************************************************/
  18      =5  /**
  19      =5   * \file ZW_transport_api.h
  20      =5   * \brief Z-Wave Transport Application layer interface.
  21      =5   *
  22      =5   * The Z Wave transport layer controls transfer of data between Z Wave nodes
  23      =5   * including retransmission, frame check and acknowledgement. The Z Wave
  24      =5   * transport interface includes functions for transfer of data to other Z Wave
  25      =5   * nodes. Application data received from other nodes is handed over to the
  26      =5   * application via the \ref ApplicationCommandHandler function. The ZW_MAX_NODES
  27      =5   * define defines the maximum of nodes possible in a Z Wave network.
  28      =5   */
  29      =5  #ifndef _ZW_TRANSPORT_API_H_
  30      =5  #define _ZW_TRANSPORT_API_H_
  31      =5  #include <ZW_security_api.h>
   1      =6  /***************************************************************************
   2      =6  *
   3      =6  * Copyright (c) 2013
   4      =6  * Sigma Designs, Inc.
   5      =6  * All Rights Reserved
   6      =6  *
   7      =6  *---------------------------------------------------------------------------
   8      =6  *
   9      =6  * Description: Some nice descriptive description.
  10      =6  *
  11      =6  * Author:   Jakob Buron
  12      =6  *
  13      =6  * Last Changed By:  $Author: jdo $
  14      =6  * Revision:         $Revision: 1.38 $
  15      =6  * Last Changed:     $Date: 2005/07/27 15:12:54 $
  16      =6  *
  17      =6  ****************************************************************************/
  18      =6  #ifndef ZW_SECURITY_API_H_
  19      =6  #define ZW_SECURITY_API_H_
  20      =6  
  21      =6  /****************************************************************************/
  22      =6  /*                              INCLUDE FILES                               */
  23      =6  /****************************************************************************/
  24      =6  #include <ZW_typedefs.h>
   1      =7  /*******************************  ZW_typedefs.h  *******************************
   2      =7   *           #######
   3      =7   *           ##  ##
   4      =7   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =7   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =7   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =7   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =7   *          #######   ####   ##  ##  #####       ##  #####
   9      =7   *                                           #####
  10      =7   *          Products that speak Z-Wave work together better
  11      =7   *
  12      =7   *              Copyright (c) 2008
  13      =7   *              Zensys A/S
  14      =7   *              Denmark
  15      =7   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 671 

  16      =7   *              All Rights Reserved
  17      =7   *
  18      =7   *    This source file is subject to the terms and conditions of the
  19      =7   *    Zensys Software License Agreement which restricts the manner
  20      =7   *    in which it may be used.
  21      =7   *
  22      =7   *---------------------------------------------------------------------------
  23      =7   *
  24      =7   * Description: Module description
  25      =7   *
  26      =7   * Author:   Ivar Jeppesen
  27      =7   *
  28      =7   * Last Changed By:  $Author: efh $
  29      =7   * Revision:         $Revision: 29359 $
  30      =7   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =7   *
  32      =7   ****************************************************************************/
  33      =7  #ifndef _ZW_TYPEDEFS_H_
  25      =6  
  26      =6  /****************************************************************************/
  27      =6  /*                     EXPORTED TYPES and DEFINITIONS                       */
  28      =6  /****************************************************************************/
  29      =6  /* The security key a frame was received with or should be sent with.
  30      =6   *
  31      =6   * Special values:
  32      =6  */
  33      =6  typedef enum SECURITY_KEY
  34      =6  {
  35      =6    SECURITY_KEY_NONE = 0x00,
  36      =6    SECURITY_KEY_S2_UNAUTHENTICATED = 0x01,
  37      =6    SECURITY_KEY_S2_AUTHENTICATED = 0x02,
  38      =6    SECURITY_KEY_S2_ACCESS = 0x03,
  39      =6    SECURITY_KEY_S0 = 0x04,
  40      =6  } security_key_t;
  41      =6  
  42      =6  
  43      =6  /**
  44      =6   * Bitmask for security keys. Used by \ref ZW_GetSecurityKeys.
  45      =6   */
  46      =6  #define SECURITY_KEY_S2_UNAUTHENTICATED_BIT 0x01
  47      =6  #define SECURITY_KEY_S2_AUTHENTICATED_BIT 0x02
  48      =6  #define SECURITY_KEY_S2_ACCESS_BIT 0x04
  49      =6  #define SECURITY_KEY_S0_BIT 0x80
  50      =6  
  51      =6  #define SECURITY_KEY_S2_MASK (SECURITY_KEY_S2_UNAUTHENTICATED_BIT \
  52      =6                                | SECURITY_KEY_S2_AUTHENTICATED_BIT \
  53      =6                                | SECURITY_KEY_S2_ACCESS_BIT)
  54      =6  #define SECURITY_KEY_NONE_MASK 0x00
  55      =6  
  56      =6  
  57      =6  /**
  58      =6   * Security S2 Public DSK Key length
  59      =6   */
  60      =6  #define SECURITY_KEY_S2_PUBLIC_DSK_LENGTH     16
  61      =6  
  62      =6  
  63      =6  /**
  64      =6   * Security S2 Public CSA DSK Key length
  65      =6   */
  66      =6  #define SECURITY_KEY_S2_PUBLIC_CSA_DSK_LENGTH 4
  67      =6  
  68      =6  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 672 

  69      =6  /**
  70      =6   *  definitions for Security S2 inclusion Authentication
  71      =6   */
  72      =6  typedef enum _E_SECURTIY_S2_AUTHENTICATION_
  73      =6  {
  74      =6    SECURITY_AUTHENTICATION_SSA = 0x00,
  75      =6    SECURITY_AUTHENTICATION_CSA = 0x01
  76      =6  } e_security_s2_authentication_t;
  77      =6  
  78      =6  
  79      =6  typedef struct _S_SECURITY_S2_INCLUSION_CSA_PUBLIC_DSK_
  80      =6  {
  81      =6    BYTE aCSA_DSK[SECURITY_KEY_S2_PUBLIC_CSA_DSK_LENGTH];
  82      =6  } s_SecurityS2InclusionCSAPublicDSK_t;
  83      =6  
  84      =6  
  85      =6  /**
  86      =6   * Definitions for Application bound Security events
  87      =6   * Delivered from protocol to Application through the Application implmemented
  88      =6   * ApplicationSecurityEvent(s_application_security_event_data_t)
  89      =6   */
  90      =6  typedef enum _E_APPLICATION_SECURITY_EVENT_
  91      =6  {
  92      =6    E_APPLICATION_SECURITY_EVENT_S2_INCLUSION_REQUEST_DSK_CSA
  93      =6  } e_application_security_event_t;
  94      =6  
  95      =6  
  96      =6  /**
  97      =6   *
  98      =6   *
  99      =6   */
 100      =6  typedef struct _S_APPLICATION_SECURITY_EVENT_DATA_
 101      =6  {
 102      =6    e_application_security_event_t event;
 103      =6    BYTE eventDataLength;
 104      =6    BYTE *eventData;
 105      =6  } s_application_security_event_data_t;
 106      =6  
 107      =6  
 108      =6  /**
 109      =6  * Application must implement this. Used by protocol to request/inform Application
 110      =6  * of Security based Events. Currently only an event for Client Side Authentication (CSA)
 111      =6  * has been defined - E_APPLICATION_SECURITY_EVENT_S2_INCLUSION_REQUEST_DSK_CSA.
 112      =6  *
 113      =6  * \ref E_APPLICATION_SECURITY_EVENT_S2_INCLUSION_REQUEST_DSK_CSA Security Event
 114      =6  *   Is posted by protocol when in S2 inclusion with CSA enabled and the
 115      =6  *   Server side DSK is needed.
 116      =6  *   Application must call ZW_SetSecurityS2InclusionCSA_DSK(s_SecurityS2InclusionCSAPublicDSK_t *)
 117      =6  *   with the retrieved Server/Controller side DSK.
 118      =6  *
 119      =6  *   @param[in] securityEvent  Pointer to structure containing the security event
 120      =6  *                             and any possible data connected to the event.
 121      =6  */
 122      =6  void ApplicationSecurityEvent(s_application_security_event_data_t *securiyEvent);
 123      =6  
 124      =6  
 125      =6  /**
 126      =6  * Application must implement this function
 127      =6  * NOTE: If Z-Wave framework are used then ApplicationSecureCommandsSupported
 128      =6  *       are allready implemented in \ref ZW_TransportSecProtocol.c.
 129      =6  */
 130      =6  void
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 673 

 131      =6  ApplicationSecureCommandsSupported(
 132      =6      enum SECURITY_KEY eKey, /* IN Security Key to report on */
 133      =6      BYTE **pCmdClasses,           /* OUT Cmd classes supported by endpoint */
 134      =6      BYTE *pLength);               /* OUT Length of pCmdClasses, 0 if endpoint does not exist */
 135      =6  
 136      =6  
 137      =6  /**
 138      =6  * Application must implement this function to return a bitmask of the
 139      =6  * security keys requested by the node when joining a network.
 140      =6  * The including controller may grant all or a subset of the requested
 141      =6  * keys.
 142      =6  * Supported keys:
 143      =6  * \ref SECURITY_KEY_S0_BIT;
 144      =6  * \ref SECURITY_KEY_S2_ACCESS_BIT;
 145      =6  * \ref SECURITY_KEY_S2_AUTHENTICATED_BIT;
 146      =6  * \ref SECURITY_KEY_S2_UNAUTHENTICATED_BIT;
 147      =6  * \return A bitmask of supported security keys.
 148      =6  *
 149      =6  */
 150      =6  BYTE ApplicationSecureKeysRequested(void);
 151      =6  
 152      =6  
 153      =6  /**
 154      =6  * Application must implement this function to return a value of the
 155      =6  * security authentication requested by the node when joining a network.
 156      =6  * Supported methods:
 157      =6  * \ref SECURITY_AUTHENTICATION_SSA;
 158      =6  * \ref SECURITY_AUTHENTICATION_CSA;
 159      =6  *
 160      =6  */
 161      =6  BYTE ApplicationSecureAuthenticationRequested(void);
 162      =6  
 163      =6  
 164      =6  /**
 165      =6   *    @brief
 166      =6   *    Set the Controller DSK requested by protocol for CSA inclusion through
 167      =6   *    calling ApplicationSecurityS2InclusionRequestDSK_CSA
 168      =6   *
 169      =6   *    @param[in] response retrieved CSA DSK
 170      =6   *
 171      =6   */
 172      =6  void ZW_SetSecurityS2InclusionPublicDSK_CSA(s_SecurityS2InclusionCSAPublicDSK_t *response);
 173      =6  
 174      =6  
 175      =6  /*===========================   ZW_GetSecurityKeys   =========================
 176      =6  **
 177      =6  **    Returns a bitmask of security keys the application can request
 178      =6  **    ZW_SendDataEX() to use. When the node is excluded, no security keys
 179      =6  **    will be reported.
 180      =6  **
 181      =6  **    Side effects:
 182      =6  **
 183      =6  **--------------------------------------------------------------------------*/
 184      =6  BYTE ZW_GetSecurityKeys(void);
 185      =6  
 186      =6  
 187      =6  /*======================   ZW_SetSecurityS0NetworkKey   ======================
 188      =6  **    @brief
 189      =6  **    Set the network key S0 in the protocol.
 190      =6  **    This function is only to be called after a firmware update from an
 191      =6  **    application based upon an SDK prior to 6.70, as example 6.51, 6.60, or
 192      =6  **    6.61 to an application based upon SDK 6.70 or later.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 674 

 193      =6  **
 194      =6  **    Note: This is only relevant for a node that was securely included in an
 195      =6  **          S0 based network.
 196      =6  **
 197      =6  **    @param[in] network_key  Pointer to the S0 network key for the home
 198      =6  **                            network. 16 bytes long.
 199      =6  **
 200      =6  **    Side effects:
 201      =6  **
 202      =6  **--------------------------------------------------------------------------*/
 203      =6  void ZW_SetSecurityS0NetworkKey(BYTE * network_key);
 204      =6  
 205      =6  
 206      =6  /**
 207      =6   *
 208      =6   *
 209      =6   */
 210      =6  void ZW_GetSecurityS2PublicDSK(BYTE *buf);
 211      =6  
 212      =6  
 213      =6  #ifdef ZW_SECURITY_PROTOCOL_SINGLE_NETWORK_KEY
 220      =6  
 221      =6  
 222      =6  /*
 223      =6   *
 224      =6   *
 225      =6   */
 226      =6  void ZW_s2_inclusion_init(void);
 227      =6  
 228      =6  
 229      =6  #endif /* ZW_SECURITY_API_H_ */
  32      =5  #include <ZW_nodemask_api.h>
   1      =6  /*******************************  ZW_NODEMASK_API.H  *******************************
   2      =6   *           #######
   3      =6   *           ##  ##
   4      =6   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =6   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =6   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =6   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =6   *          #######   ####   ##  ##  #####       ##  #####
   9      =6   *                                           #####
  10      =6   *          Z-Wave, the wireless language.
  11      =6   *
  12      =6   *              Copyright (c) 2001
  13      =6   *              Zensys A/S
  14      =6   *              Denmark
  15      =6   *
  16      =6   *              All Rights Reserved
  17      =6   *
  18      =6   *    This source file is subject to the terms and conditions of the
  19      =6   *    Zensys Software License Agreement which restricts the manner
  20      =6   *    in which it may be used.
  21      =6   *
  22      =6   *---------------------------------------------------------------------------
  23      =6   *
  24      =6   * Description: Functions used to manipulate bits (Node ID) in a NodeMask array.
  25      =6   *
  26      =6   * Author:   Ivar Jeppesen
  27      =6   *
  28      =6   * Last Changed By:  $Author: jbu $
  29      =6   * Revision:         $Revision: 26038 $
  30      =6   * Last Changed:     $Date: 2013-06-10 09:08:11 +0200 (ma, 10 jun 2013) $
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 675 

  31      =6   *
  32      =6   ****************************************************************************/
  33      =6  #ifndef _ZW_NODEMASK_API_H_
  34      =6  #define _ZW_NODEMASK_API_H_
  35      =6  
  36      =6  /****************************************************************************/
  37      =6  /*                              INCLUDE FILES                               */
  38      =6  /****************************************************************************/
  39      =6  
  40      =6  
  41      =6  /****************************************************************************/
  42      =6  /*                     EXPORTED TYPES and DEFINITIONS                       */
  43      =6  /****************************************************************************/
  44      =6  
  45      =6  /*The max length of a node mask*/
  46      =6  #define MAX_NODEMASK_LENGTH   (ZW_MAX_NODES/8)
  47      =6  
  48      =6  /****************************  NodeMask  ************************************
  49      =6  ** Functions used to manipulate bits (Node ID) in a byte array (NodeMask array)
  50      =6  **
  51      =6  *****************************************************************************/
  52      =6  
  53      =6  /*===========================   ZW_NodeMaskSetBit   =========================
  54      =6  **    Set the node bit in a node bitmask
  55      =6  **
  56      =6  ** void           RET   Nothing
  57      =6  ** ZW_NodeMaskSetBit(
  58      =6  ** BYTE_P pMask,         IN   pointer nodemask
  59      =6  ** BYTE bNodeID);        IN   node to set in nodemask
  60      =6  **--------------------------------------------------------------------------*/
  61      =6  #define ZW_NODE_MASK_SET_BIT(pMask, bNodeID) ZW_NodeMaskSetBit(pMask, bNodeID)
  62      =6  
  63      =6  /*========================   NodeMaskClearBit   =============================
  64      =6  **    Set the node bit in a node bitmask
  65      =6  **
  66      =6  ** void       RET   Nothing
  67      =6  ** ZW_NodeMaskClearBit(
  68      =6  ** BYTE_P pMask,     IN   nodemask
  69      =6  ** BYTE bNodeID);    IN   node to clear in nodemask
  70      =6  **--------------------------------------------------------------------------*/
  71      =6  #define ZW_NODE_MASK_CLEAR_BIT(pMask, bNodeID) ZW_NodeMaskClearBit(pMask, bNodeID)
  72      =6  
  73      =6  /*===========================   ZW_NodeMaskClear   ==========================
  74      =6  **    Clear all bits in a nodemask
  75      =6  **
  76      =6  ** void       RET   Nothing
  77      =6  ** ZW_NodeMaskClear(
  78      =6  ** BYTE_P pMask,     IN   nodemask
  79      =6  ** BYTE bLength);    IN   length of nodemask
  80      =6  **--------------------------------------------------------------------------*/
  81      =6  #define ZW_NODE_MASK_CLEAR(pMask, bLength) ZW_NodeMaskClear(pMask, bLength)
  82      =6  
  83      =6  /*==========================   ZW_NodeMaskBitsIn   ==========================
  84      =6  **    Check is any bit is set in a nodemask
  85      =6  **
  86      =6  ** BYTE       RET   Number of bits set in nodemask
  87      =6  ** ZW_NodeMaskBitsIn(
  88      =6  ** BYTE_P pMask,     IN   pointer to nodemask
  89      =6  ** BYTE bLength);    IN   length of nodemask
  90      =6  **--------------------------------------------------------------------------*/
  91      =6  #define ZW_NODE_MASK_BITS_IN(pMask, bLength) ZW_NodeMaskBitsIn(pMask, bLength)
  92      =6  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 676 

  93      =6  /*==========================   ZW_NodeMaskNodeIn   ==========================
  94      =6  **    Check if a node is in a nodemask
  95      =6  **
  96      =6  ** BYTE       RET   ZERO if not in nodemask, NONEZERO if in nodemask
  97      =6  ** ZW_NodeMaskNodeIn(
  98      =6  ** BYTE_P pMask,     IN   pointer to nodemask to check for bNode
  99      =6  ** BYTE bNode);      IN   bit number that should be checked
 100      =6  **--------------------------------------------------------------------------*/
 101      =6  #define ZW_NODE_MASK_NODE_IN(pMask, bNode) ZW_NodeMaskNodeIn(pMask, bNode)
 102      =6  
 103      =6  
 104      =6  
 105      =6  /****************************************************************************/
 106      =6  /*                              EXPORTED DATA                               */
 107      =6  /****************************************************************************/
 108      =6  
 109      =6  /****************************************************************************/
 110      =6  /*                           EXPORTED FUNCTIONS                             */
 111      =6  /****************************************************************************/
 112      =6  
 113      =6  /*===========================   ZW_NodeMaskSetBit   =========================
 114      =6  **    Set the node bit in a node bitmask
 115      =6  **
 116      =6  **    Side effects
 117      =6  **
 118      =6  **--------------------------------------------------------------------------*/
 119      =6  extern void           /*RET   Nothing                 */
 120      =6  ZW_NodeMaskSetBit(
 121      =6  BYTE_P pMask,         /* IN   pointer nodemask        */
 122      =6  BYTE bNodeID);         /* IN   node to set in nodemask */
 123      =6  
 124      =6  /*========================   NodeMaskClearBit   =============================
 125      =6  **    Set the node bit in a node bitmask
 126      =6  **
 127      =6  **    Side effects
 128      =6  **
 129      =6  **--------------------------------------------------------------------------*/
 130      =6  extern void       /*RET   Nothing                   */
 131      =6  ZW_NodeMaskClearBit(
 132      =6  BYTE_P pMask,     /* IN   nodemask                  */
 133      =6  BYTE bNodeID);     /* IN   node to clear in nodemask */
 134      =6  
 135      =6  /*===========================   ZW_NodeMaskClear   ==========================
 136      =6  **    Clear all bits in a nodemask
 137      =6  **
 138      =6  **    Side effects
 139      =6  **
 140      =6  **--------------------------------------------------------------------------*/
 141      =6  extern void       /*RET   Nothing             */
 142      =6  ZW_NodeMaskClear(
 143      =6  BYTE_P pMask,     /* IN   nodemask            */
 144      =6  BYTE bLength);     /* IN   length of nodemask  */
 145      =6  
 146      =6  /*==========================   ZW_NodeMaskBitsIn   ==========================
 147      =6  **    Check is any bit is set in a nodemask
 148      =6  **
 149      =6  **--------------------------------------------------------------------------*/
 150      =6  extern BYTE       /*RET   Number of bits set in nodemask  */
 151      =6  ZW_NodeMaskBitsIn(
 152      =6  BYTE_P pMask,     /* IN   pointer to nodemask             */
 153      =6  BYTE bLength);     /* IN   length of nodemask              */
 154      =6  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 677 

 155      =6  /*==========================   ZW_NodeMaskNodeIn   ==========================
 156      =6  **    Check if a node is in a nodemask
 157      =6  **
 158      =6  **--------------------------------------------------------------------------*/
 159      =6  extern BYTE       /*RET   ZERO if not in nodemask, NONEZERO if in nodemask  */
 160      =6  ZW_NodeMaskNodeIn(
 161      =6  BYTE_P pMask,     /* IN   pointer to nodemask to check for bNode            */
 162      =6  BYTE bNode);      /* IN   bit number that should be checked                 */
 163      =6  
 164      =6  /*==========================   ZW_NodeMaskGetNextNode   =====================
 165      =6  ** Function:    Find the next NodeId that is set in a nodemask
 166      =6  **
 167      =6  ** Parameters:
 168      =6  **   currentNodeId                  =  last NodeId found (0 for first call)
 169      =6  **   pMask                          -> Nodemask that should be searched
 170      =6  **
 171      =6  ** Return:
 172      =6  **   If found                       = Next NodeId from the nodemask.
 173      =6  **   If not found                   = 0
 174      =6  **
 175      =6  **--------------------------------------------------------------------------*/
 176      =6  extern BYTE
 177      =6  ZW_NodeMaskGetNextNode(
 178      =6    BYTE currentNodeId,
 179      =6    BYTE_P pMask);
 180      =6  
 181      =6  #endif /* _ZW_NODEMASK_API_H_ */
  33      =5  
  34      =5  /****************************************************************************/
  35      =5  /*                              INCLUDE FILES                               */
  36      =5  /****************************************************************************/
  37      =5  
  38      =5  /****************************************************************************/
  39      =5  /*                     EXPORTED TYPES and DEFINITIONS                       */
  40      =5  /****************************************************************************/
  41      =5  
  42      =5  /* Max number of nodes in a Z-wave system */
  43      =5  #define ZW_MAX_NODES        232
  44      =5  
  45      =5  /************************************************************/
  46      =5  /* Node Information frame*/
  47      =5  /************************************************************/
  48      =5  #define NODEPARM_MAX  35   /* max. number of parameters */
  49      =5  
  50      =5  
  51      =5  /* Transmit frame option flags */
  52      =5  #define TRANSMIT_OPTION_ACK                     0x01    /* request acknowledge from destination node */
  53      =5  #define TRANSMIT_OPTION_LOW_POWER               0x02    /* transmit at low output power level (1/3 of norm
             -al RF range) */
  54      =5  #define TRANSMIT_OPTION_MULTICAST_AS_BROADCAST  0x02    /* The multicast frame should be send as a broadca
             -st */
  55      =5  #ifdef ZW_SLAVE
  56      =5  #define TRANSMIT_OPTION_RETURN_ROUTE            0x04    /* request transmission via return route */
  57      =5  #endif
  58      =5  #define TRANSMIT_OPTION_AUTO_ROUTE              0x04    /* request retransmission via repeater nodes */
  59      =5  /* do not use response route - Even if available */
  60      =5  #define TRANSMIT_OPTION_NO_ROUTE                0x10
  61      =5  /* Use explore frame if needed */
  62      =5  #define TRANSMIT_OPTION_EXPLORE                 0x20
  63      =5  
  64      =5  /* Transmit frame option flag which are valid when sending explore frames  */
  65      =5  #define TRANSMIT_EXPLORE_OPTION_ACK         TRANSMIT_OPTION_ACK
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 678 

  66      =5  #define TRANSMIT_EXPLORE_OPTION_LOW_POWER   TRANSMIT_OPTION_LOW_POWER
  67      =5  
  68      =5  /* Allow Transport Service segmentation of long messages */
  69      =5  #define TRANSMIT_OPTION_2_TRANSPORT_SERVICE 0x01
  70      =5  #define TRANSMIT_OPTION_2_FOLLOWUP          0x08
  71      =5  
  72      =5  /* Received frame status flags */
  73      =5  /**
  74      =5   *  \defgroup RECEIVE_STATUS Status codes for receiving frames.
  75      =5   * \addtogroup RECEIVE_STATUS
  76      =5   * @{
  77      =5   */
  78      =5  
  79      =5  /**
  80      =5   * A response route is locked by the application
  81      =5   */
  82      =5  #define RECEIVE_STATUS_ROUTED_BUSY    0x01
  83      =5  /**
  84      =5   * Received at low output power level, this must
  85      =5   * have the same value as TRANSMIT_OPTION_LOW_POWER
  86      =5   */
  87      =5  #define RECEIVE_STATUS_LOW_POWER      0x02
  88      =5  /**
  89      =5   * Mask for masking out the received frametype bits
  90      =5   */
  91      =5  #define RECEIVE_STATUS_TYPE_MASK      0x0C
  92      =5  /**
  93      =5   * Received frame is singlecast frame (rxOptions == xxxx00xx)
  94      =5   */
  95      =5  #define RECEIVE_STATUS_TYPE_SINGLE    0x00
  96      =5  /**
  97      =5   * Received frame is broadcast frame  (rxOptions == xxxx01xx)
  98      =5   */
  99      =5  #define RECEIVE_STATUS_TYPE_BROAD     0x04
 100      =5  /**
 101      =5   * Received frame is multicast frame (rxOptions == xxxx10xx)
 102      =5   */
 103      =5  #define RECEIVE_STATUS_TYPE_MULTI     0x08
 104      =5  /**
 105      =5   * Received frame is an explore frame (rxOptions == xxx1xxxx)
 106      =5   * Only TYPE_BROAD can be active at the same time as TYPE_EXPLORE
 107      =5   */
 108      =5  #define RECEIVE_STATUS_TYPE_EXPLORE   0x10
 109      =5  /**
 110      =5   * Received frame is not send to me (rxOptions == x1xxxxxx)
 111      =5   * - useful only in promiscuous mode
 112      =5   */
 113      =5  #define RECEIVE_STATUS_FOREIGN_FRAME  0x40
 114      =5  /**
 115      =5   * Received frame is send on another network (rxOptions == 1xxxxxxx)
 116      =5   * - useful only in Smart Start - used when receiving INIF from another network
 117      =5   */
 118      =5  #define RECEIVE_STATUS_FOREIGN_HOMEID 0x80
 119      =5  
 120      =5  /**
 121      =5   * @}
 122      =5   */
 123      =5  
 124      =5  /* Predefined Node ID's */
 125      =5  #define NODE_BROADCAST              0xFF    /* broadcast */
 126      =5  #define ZW_TEST_NOT_A_NODEID        0x00    /* */
 127      =5  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 679 

 128      =5  /* Transmit complete codes */
 129      =5  #define TRANSMIT_COMPLETE_OK      0x00
 130      =5  #define TRANSMIT_COMPLETE_NO_ACK  0x01  /* retransmission error */
 131      =5  #define TRANSMIT_COMPLETE_FAIL    0x02  /* transmit error */
 132      =5  #define TRANSMIT_ROUTING_NOT_IDLE 0x03  /* transmit error */
 133      =5  #ifdef ZW_CONTROLLER
 138      =5  #define TRANSMIT_COMPLETE_VERIFIED 0x05 /* Verified delivery */
 139      =5  
 140      =5  /* ZW_REDISCOVERY_NEEDED callback values. */
 141      =5  /* Note that they are different from ZW_REQUEST_NETWORK_UPDATE callbacks */
 142      =5  #define ZW_ROUTE_LOST_FAILED      0x04  /*Node Asked wont help us*/
 143      =5  #define ZW_ROUTE_LOST_ACCEPT      0x05  /*Accepted to help*/
 144      =5  
 145      =5  
 146      =5  #ifdef ZW_ROUTING_DEMO
 150      =5  
 151      =5  #define ZW_MAX_CACHED_RETURN_ROUTE_DESTINATIONS  5
 152      =5  
 153      =5  #define ZW_RF_TEST_SIGNAL_CARRIER              0x00
 154      =5  #define ZW_RF_TEST_SIGNAL_CARRIER_MODULATED    0x01
 155      =5  
 156      =5  /* Max hops in route */
 157      =5  #define MAX_REPEATERS      4
 158      =5  
 159      =5  
 160      =5  /* TX_STATUS_TYPE Last Used Route array size definitions */
 161      =5  #define LAST_USED_ROUTE_CONF_SIZE               1
 162      =5  #define LAST_USED_ROUTE_SIZE                    (MAX_REPEATERS + LAST_USED_ROUTE_CONF_SIZE)
 163      =5  
 164      =5  /* TX_STATUS_TYPE Last Used Route array index definitions */
 165      =5  #define LAST_USED_ROUTE_REPEATER_0_INDEX        0
 166      =5  #define LAST_USED_ROUTE_REPEATER_1_INDEX        1
 167      =5  #define LAST_USED_ROUTE_REPEATER_2_INDEX        2
 168      =5  #define LAST_USED_ROUTE_REPEATER_3_INDEX        3
 169      =5  #define LAST_USED_ROUTE_CONF_INDEX              4
 170      =5  
 171      =5  
 172      =5  /* RSSI feedback constants */
 173      =5  /* This is a signed 8-bit value. Note that values from RSSI_RESERVED_START to
 174      =5   * 124 are reserved. All values below RSSI_RESERVED_START are received power
 175      =5   * in dBms. Other values are defined below. */
 176      =5  #define RSSI_NOT_AVAILABLE 127       /* RSSI measurement not available */
 177      =5  #define RSSI_MAX_POWER_SATURATED 126 /* Receiver saturated. RSSI too high to measure precisely. */
 178      =5  #define RSSI_BELOW_SENSITIVITY 125   /* No signal detected. The RSSI is too low to measure precisely. */
 179      =5  #define RSSI_RESERVED_START    11    /* All values above and including RSSI_RESERVED_START are reserved,
 180      =5                                          except those defined above. */
 181      =5  
 182      =5  
 183      =5  /* RSSI value array used in TX_STATUS_TYPE.
 184      =5   * Each value is an RSSI feedback constant defined above. */
 185      =5  struct rssi_val {
 186      =5    signed char incoming[MAX_REPEATERS + 1];
 187      =5  };
 188      =5  
 189      =5  typedef struct _S_ROUTE_LINK_
 190      =5  {
 191      =5    BYTE from;
 192      =5    BYTE to;
 193      =5  } S_ROUTE_LINK;
 194      =5  
 195      =5  /* Transport routing scheme state define definitions */
 196      =5  /* 1 = direct, 2 = ApplicationStaticRoute, 3 = responseRoute/lastworkingRoute, */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 680 

 197      =5  /* 4 = Next to LastWorkingRoute(controller), 5 = returnRoute/controllerAutoRoute, 6 = directResort and 7 =
             - explore */
 198      =5  typedef enum _E_ROUTING_SCHEME_
 199      =5  {
 200      =5    ROUTINGSCHEME_IDLE = 0,
 201      =5    ROUTINGSCHEME_DIRECT = 1,
 202      =5    ROUTINGSCHEME_CACHED_ROUTE_SR = 2,
 203      =5    ROUTINGSCHEME_CACHED_ROUTE = 3,
 204      =5    ROUTINGSCHEME_CACHED_ROUTE_NLWR = 4,
 205      =5    ROUTINGSCHEME_ROUTE = 5,
 206      =5    ROUTINGSCHEME_RESORT_DIRECT = 6,
 207      =5    ROUTINGSCHEME_RESORT_EXPLORE = 7
 208      =5  } E_ROUTING_SCHEME;
 209      =5  
 210      =5  
 211      =5  typedef struct _TX_STATUS_TYPE_
 212      =5  {
 213      =5    WORD wTransmitTicks;  /* Passed 10ms ticks */
 214      =5    BYTE bRepeaters;         /* Repeaters in route, zero for direct range */
 215      =5    /* rssi_values per hop for direct and routed frames.
 216      =5     * Contains repeaters + 1 values. */
 217      =5    struct rssi_val rssi_values;
 218      =5    BYTE bACKChannelNo;
 219      =5    BYTE bLastTxChannelNo;
 220      =5    E_ROUTING_SCHEME bRouteSchemeState;
 221      =5    BYTE pLastUsedRoute[LAST_USED_ROUTE_SIZE];
 222      =5    BYTE bRouteTries;
 223      =5    S_ROUTE_LINK bLastFailedLink;
 224      =5  } TX_STATUS_TYPE;
 225      =5  
 226      =5  
 227      =5  typedef struct _RECEIVE_OPTIONS_TYPE
 228      =5  {
 229      =5    /* Frame header info */
 230      =5    BYTE  rxStatus;
 231      =5    /* Command sender Node ID */
 232      =5    BYTE  sourceNode;
 233      =5    /* Frame destination ID, only valid when frame is not Multicast*/
 234      =5    BYTE  destNode;
 235      =5    /* Average RSSI val in dBm as defined in RSSI feedback constants above */
 236      =5    signed char rxRSSIVal;
 237      =5    /* Security key frame was received with. */
 238      =5    enum SECURITY_KEY securityKey;
 239      =5  } RECEIVE_OPTIONS_TYPE;
 240      =5  
 241      =5  
 242      =5  #if defined(ZW_SLAVE_ENHANCED_232) || defined(ZW_SLAVE_ROUTING)
 243      =5  enum ZW_SENDDATA_EX_RETURN_CODES
 244      =5  {
 245      =5      ZW_TX_FAILED = 0,
 246      =5      ZW_TX_IN_PROGRESS = 1
 247      =5  } ;
 248      =5  
 249      =5  
 250      =5  /**
 251      =5  * This flag will activate frame delivery.
 252      =5  *
 253      =5  * In this transmission mode the S2_send_data will try
 254      =5  * to verify that the receiver understood the sent message.
 255      =5  * This is done by waiting a little to see if the node will
 256      =5  * respond nonce report to the encrypted message. If the node
 257      =5  * does respond with a nonce report then the S2_send_data
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 681 

 258      =5  * call will automatically cause the system to re-sync the node,
 259      =5  * and deliver the message
 260      =5  *
 261      =5  */
 262      =5  #define S2_TXOPTION_VERIFY_DELIVERY 1
 263      =5  
 264      =5  /**
 265      =5  * This flag must be present on all single cast followup messages.
 266      =5  */
 267      =5  #define S2_TXOPTION_SINGLECAST_FOLLOWUP 2
 268      =5  
 269      =5  /**
 270      =5  * This flag must be present on the first, and only the first single
 271      =5  * cast followup message in a S2 multicast transmission.
 272      =5  */
 273      =5  #define S2_TXOPTION_FIRST_SINGLECAST_FOLLOWUP 4
 274      =5  
 275      =5  
 276      =5  /* Transmit options for ZW_SendDataEx */
 277      =5  typedef struct _TRANSMIT_OPTIONS_TYPE
 278      =5  {
 279      =5    /* Destination node ID - 0xFF == all nodes */
 280      =5    BYTE destNode;
 281      =5    /* Reserved */
 282      =5    BYTE bSrcNode;
 283      =5    /* Transmit options*/
 284      =5    BYTE txOptions;
 285      =5    /* Options for enabling specific Security scheme functionality */
 286      =5    BYTE txSecOptions;
 287      =5    /* Security key to use for sending. */
 288      =5    enum SECURITY_KEY securityKey;
 289      =5    /* More transmit options */
 290      =5    BYTE txOptions2;
 291      =5  } TRANSMIT_OPTIONS_TYPE;
 292      =5  
 293      =5  /* Transmit options for ZW_SendDataMultiEx */
 294      =5  typedef struct _TRANSMIT_MULTI_OPTIONS_TYPE
 295      =5  {
 296      =5    /* Destination group ID */
 297      =5    BYTE groupID;
 298      =5    /* Reserved */
 299      =5    BYTE bSrcNode;
 300      =5    /* Transmit options*/
 301      =5    BYTE txOptions;
 302      =5    /* Security key to use for sending - only S2 keys are valid. */
 303      =5    enum SECURITY_KEY securityKey;
 304      =5  } TRANSMIT_MULTI_OPTIONS_TYPE;
 305      =5  
 306      =5  typedef BYTE nodemask_t[MAX_NODEMASK_LENGTH];
 307      =5  
 308      =5  #endif /* #if defined(ZW_SLAVE_ENHANCED_232) || defined(ZW_SLAVE_ROUTING) */
 309      =5  
 310      =5  
 311      =5  
 312      =5  #ifdef ZW_SLAVE_ROUTING
 313      =5  
 314      =5  /*============================   ZW_RouteDestinations   ======================
 315      =5  **    Structure description
 316      =5  **      This contains a list of nodes that currently can be reached via
 317      =5  **      return routes.
 318      =5  **      This list MUST not be altered by the Application
 319      =5  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 682 

 320      =5  **--------------------------------------------------------------------------*/
 321      =5  extern BYTE ZW_RouteDestinations[ZW_MAX_CACHED_RETURN_ROUTE_DESTINATIONS];
 322      =5  
 323      =5  #endif  /* ZW_SLAVE_ROUTING */
 324      =5  
 325      =5  #if defined(ZW_CONTROLLER) && !defined(ZW_CONTROLLER_BRIDGE) || (defined(ZW_SLAVE) && !defined(ZW_SLAVE_RO
             -UTING) && !defined(ZW_SLAVE_ENHANCED_232))
 353      =5  
 354      =5  #ifdef ZW_CONTROLLER_BRIDGE
 388      =5  
 389      =5  
 390      =5  #if defined(ZW_CONTROLLER) || defined(ZW_SLAVE_ROUTING)
 391      =5  
 392      =5  /*============================   ZW_SendDataAbort   ========================
 393      =5  **    Abort the ongoing transmit started with ZW_SendData()
 394      =5  **
 395      =5  **    Side effects:
 396      =5  **
 397      =5  **--------------------------------------------------------------------------*/
 398      =5  #define ZW_SEND_DATA_ABORT() ZW_SendDataAbort()
 399      =5  
 400      =5  
 401      =5  #ifndef ZW_CONTROLLER_BRIDGE
 402      =5  /*===============================   ZW_SendDataMulti   ======================
 403      =5  **    Transmit data buffer to a list of Z-Wave Nodes (multicast frame).
 404      =5  **
 405      =5  **
 406      =5  **    txOptions:
 407      =5  **          TRANSMIT_OPTION_LOW_POWER   transmit at low output power level (1/3 of
 408      =5  **                                      normal RF range).
 409      =5  **          TRANSMIT_OPTION_ACK         the multicast frame will be followed by a
 410      =5  **                                      singlecast frame to each of the destination nodes
 411      =5  **                                      and request acknowledge from each destination node.
 412      =5  **          TRANSMIT_OPTION_AUTO_ROUTE  request retransmission on singlecast frames
 413      =5  **                                      via repeater nodes (at normal output power level).
 414      =5  **
 415      =5  ** extern BYTE            RET  FALSE if transmitter queue overflow
 416      =5  ** ZW_SendDataMulti(
 417      =5  **  BYTE *pNodeIDList,     IN  List of destination node ID's
 418      =5  **  BYTE  numberNodes,     IN  Number of Nodes
 419      =5  **  BYTE *pData,           IN  Data buffer pointer
 420      =5  **  BYTE  dataLength,      IN  Data buffer length
 421      =5  **  BYTE  txOptions,       IN  Transmit option flags
 422      =5  **  VOID_CALLBACKFUNC(completedFunc)( IN  Transmit completed call back function
 423      =5  **    BYTE txStatus));     IN  Transmit status
 424      =5  **--------------------------------------------------------------------------*/
 425      =5  #define ZW_SEND_DATA_MULTI(nodelist,data,length,options,func) ZW_SendDataMulti(nodelist,data,length,option
             -s,func)
 426      =5  
 427      =5  #else
 459      =5  
 460      =5  #endif  /* ZW_CONTROLLER || ZW_SLAVE_ROUTING */
 461      =5  
 462      =5  
 463      =5  /*============================   ZW_SEND_CONST =============================
 464      =5  **    Function description
 465      =5  **      If production test is enabled during start up.
 466      =5  **      Calling this function will transmit a constant signal until a new
 467      =5  **      RF function is called
 468      =5  **
 469      =5  **--------------------------------------------------------------------------*/
 470      =5  #define ZW_SEND_CONST() ZW_SendConst(TRUE, 1, ZW_RF_TEST_SIGNAL_CARRIER)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 683 

 471      =5  
 472      =5  
 473      =5  #ifdef ZW_SLAVE
 474      =5  /*============================ ZW_LOCK_RESPONSE_ROUTE ========================
 475      =5  **    Function description
 476      =5  **      This function locks and unlocks all return routes
 477      =5  **      IN  nodeID  != 0x00 lock route to node
 478      =5  **          nodeDI == 0x00 unlock entry
 479      =5  **    Side effects:
 480      =5  **
 481      =5  **--------------------------------------------------------------------------*/
 482      =5  #define ZW_LOCK_RESPONSE_ROUTE(node) ZW_LockRoute(node)
 483      =5  
 484      =5  #else
 499      =5  
 500      =5  
 501      =5  /****************************************************************************/
 502      =5  /*                              EXPORTED DATA                               */
 503      =5  /****************************************************************************/
 504      =5  
 505      =5  /****************************************************************************/
 506      =5  /*                           EXPORTED FUNCTIONS                             */
 507      =5  /****************************************************************************/
 508      =5  
 509      =5  #ifdef ZW_SLAVE
 510      =5  /* TO#2133 fix - Keil compiler >7.50(8.xx) seems to have been changed somehow */
 511      =5  /* in the preprocessor part as if the 2 ZW_LockRoute definitions was ifdefed */
 512      =5  /* by ifdef ZW_SLAVE ... endif and ifdef ZW_CONTROLLER ... endif instead of */
 513      =5  /* ifdef ZW_SLAVE ... else ... endif, the Keil >7.50 reports Warning C235 */
 514      =5  /* on slave/slave routing/slave enhanced targets. */
 515      =5  /*============================   ZW_LockRoute   ==============================
 516      =5  **    Function description
 517      =5  **      This function locks and unlocks any temporary route to a specific nodeID
 518      =5  **    Side effects:
 519      =5  **
 520      =5  **--------------------------------------------------------------------------*/
 521      =5  void
 522      =5  ZW_LockRoute(
 523      =5    BYTE bNodeID);          /* IN if nonezero lock bNodeID entry, */
 524      =5                            /*    zero unlock entry */
 525      =5  
 526      =5  #else  /* ZW_SLAVE */
 542      =5  
 543      =5  
 544      =5  /**============================   ZW_SendConst  =============================
 545      =5  **    Function description
 546      =5  **      Start/Stop generate RF test signal in a desired channel
 547      =5  **      Signal can be
 548      =5  **                a carrier only
 549      =5  **                a modulated carrier
 550      =5  **
 551      =5  **      Side effects:
 552      =5  **-------------------------------------------------------------------------------------------------*/
 553      =5  
 554      =5  void
 555      =5  ZW_SendConst(
 556      =5                BYTE bStart,  /*IN TRUE start sending RF test signal, FALSE disable RF test signal*/
 557      =5                BYTE bChNo,   /*IN channle number to send RF test signal on*/
 558      =5                BYTE bSignalType ); /*IN The RF test signal type.*/
 559      =5  
 560      =5  #if defined(ZW_CONTROLLER) && !defined(ZW_CONTROLLER_BRIDGE) || (defined(ZW_SLAVE) && !defined(ZW_SLAVE_RO
             -UTING) && !defined(ZW_SLAVE_ENHANCED_232))
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 684 

 594      =5  
 595      =5  #ifdef ZW_CONTROLLER_BRIDGE
 631      =5  
 632      =5  
 633      =5  /*============================   ZW_SendDataAbort   ========================
 634      =5  **    Abort the ongoing transmit started with ZW_SendData()
 635      =5  **
 636      =5  **    Side effects:
 637      =5  **
 638      =5  **--------------------------------------------------------------------------*/
 639      =5  void                /*RET FALSE if transmitter busy      */
 640      =5  ZW_SendDataAbort(void);
 641      =5  
 642      =5  
 643      =5  #ifndef ZW_CONTROLLER_BRIDGE
 644      =5  /*===============================   ZW_SendDataMulti   ======================
 645      =5  **    Transmit data buffer to a list of Z-Wave Nodes (multicast frame).
 646      =5  **
 647      =5  **
 648      =5  **    txOptions:
 649      =5  **          TRANSMIT_OPTION_LOW_POWER   transmit at low output power level (1/3 of
 650      =5  **                                      normal RF range).
 651      =5  **          TRANSMIT_OPTION_ACK         the multicast frame will be followed by a
 652      =5  **                                      singlecast frame to each of the destination nodes
 653      =5  **                                      and request acknowledge from each destination node.
 654      =5  **          TRANSMIT_OPTION_AUTO_ROUTE  request retransmission on singlecast frames via
 655      =5  **                                      repeater nodes/return routes (at normal output power level).
 656      =5  **
 657      =5  **--------------------------------------------------------------------------*/
 658      =5  extern BYTE            /*RET  FALSE if transmitter busy      */
 659      =5  ZW_SendDataMulti(
 660      =5    BYTE *pNodeIDList,          /*IN  List of destination node ID's */
 661      =5    BYTE *pData,                /*IN  Data buffer pointer           */
 662      =5    BYTE  dataLength,           /*IN  Data buffer length            */
 663      =5    BYTE  txOptions,            /*IN  Transmit option flags         */
 664      =5    VOID_CALLBACKFUNC(completedFunc)(BYTE)); /*IN  Transmit completed call back function  */
 665      =5  
 666      =5  #else
 691      =5  
 692      =5  #if defined(ZW_SLAVE_ENHANCED_232) || defined(ZW_SLAVE_ROUTING)
 693      =5  /**
 694      =5   * Send multicast security s2 encrypted frame.
 695      =5   * Only the MultiCast/Groupcast frame itself will be transmitted. There will be no single cast follow ups.
 696      =5   *
 697      =5   * \param pData             plaintext to which is going to be sent.
 698      =5   * \param dataLength        length of data to be sent.
 699      =5   * \param pTxOptionMultiEx  Transmit options structure containing the transmission source, transmit option
             -s and
 700      =5   *                          the groupID which is the connection handle for the mulicast group to use,
 701      =5   *
 702      =5   */
 703      =5  enum ZW_SENDDATA_EX_RETURN_CODES                /*RET Return code      */
 704      =5  ZW_SendDataMultiEx(
 705      =5    BYTE *pData,            /* IN Data buffer pointer           */
 706      =5    BYTE  dataLength,       /* IN Data buffer length            */
 707      =5    TRANSMIT_MULTI_OPTIONS_TYPE *pTxOptionsMultiEx,
 708      =5    VOID_CALLBACKFUNC(completedFunc)(BYTE)); /* IN Transmit completed call back function */
 709      =5  
 710      =5  
 711      =5  /*===============================   ZW_SendDataEx   ===========================
 712      =5  **    Transmit data buffer to a single ZW-node or all ZW-nodes (broadcast).
 713      =5  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 685 

 714      =5  **  This supersedes the old ZW_SendData and adds support for secure
 715      =5  **  transmissions.
 716      =5  **
 717      =5  **    pData                             Pointer to the payload data to be transmitted
 718      =5  **
 719      =5  **    dataLength                        Payload data length
 720      =5  **
 721      =5  **    pTxOptionsEx                      Points to Transmit options structure containing:
 722      =5  **
 723      =5  **      destNode
 724      =5  **        destination node id - 0xFF means broadcast to all nodes
 725      =5  **
 726      =5  **      bSrcNode
 727      =5  **        Reserved for future use.
 728      =5  **
 729      =5  **      txOptions:
 730      =5  **        TRANSMIT_OPTION_LOW_POWER     transmit at low output power level
 731      =5  **                                      (1/3 of normal RF range).
 732      =5  **        TRANSMIT_OPTION_ACK           the destination nodes
 733      =5  **                                      and request acknowledge from each
 734      =5  **                                      destination node.
 735      =5  **        TRANSMIT_OPTION_AUTO_ROUTE    request retransmission via return route.
 736      =5  **        TRANSMIT_OPTION_EXPLORE       Use explore frame route resolution if all else fails
 737      =5  **
 738      =5  **
 739      =5  **      securityKeys:
 740      =5  **
 741      =5  **
 742      =5  **      txOptions2
 743      =5  **
 744      =5  **
 745      =5  **--------------------------------------------------------------------------*/
 746      =5  enum ZW_SENDDATA_EX_RETURN_CODES                /*RET Return code      */
 747      =5  ZW_SendDataEx(
 748      =5    BYTE *pData,      /* IN Data buffer pointer           */
 749      =5    BYTE  dataLength, /* IN Data buffer length            */
 750      =5    TRANSMIT_OPTIONS_TYPE *pTxOptionsEx,
 751      =5    VOID_CALLBACKFUNC(completedFunc)(BYTE, TX_STATUS_TYPE*));
 752      =5  #endif /* #if defined(ZW_SLAVE_ENHANCED_232) || defined(ZW_SLAVE_ROUTING) */
 753      =5  
 754      =5  
 755      =5  #ifdef ZW_PROMISCUOUS_MODE
 767      =5  
 768      =5  /*=======================   ZW_SetListenBeforeTalkThreshold   =================
 769      =5  **    Set the threshold that should be added to the standard -75dBm used
 770      =5  **    in JP listen before talk.
 771      =5  **
 772      =5  **    Side effects:
 773      =5  **
 774      =5  **--------------------------------------------------------------------------*/
 775      =5  void                              /*RET: Nothing */
 776      =5  ZW_SetListenBeforeTalkThreshold(
 777      =5    BYTE bChannel,                  /*IN: RF channel to set the threshold for */
 778      =5    BYTE bThreshold);               /*IN: Threshold to be added to RSSI limit */
 779      =5  
 780      =5  /**
 781      =5   * Return Version on supplied Command Class if supported by protocol.
 782      =5   * If supplied Command Class not supported by protocol then UNKNOWN_VERSION is returned.
 783      =5   *
 784      =5   * \param commandClass    command class to query for version.
 785      =5   *
 786      =5   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 686 

 787      =5  BYTE                                  /*RET Version of supplied command class */
 788      =5  ZW_Transport_CommandClassVersionGet(
 789      =5    BYTE commandClass);                 /* IN Command class to query for version */
 790      =5  
 791      =5  
 792      =5  #endif /* _ZW_TRANSPORT_API_H_ */
 793      =5  
  28      =4  /****************************************************************************/
  29      =4  /*                     EXPORTED TYPES and DEFINITIONS                       */
  30      =4  /****************************************************************************/
  31      =4  
  32      =4  /**
  33      =4   * Allocates space for Supervision when used to declare a buffer.
  34      =4   */
  35      =4  typedef struct _REQ_BUF_
  36      =4  {
  37      =4    BYTE multichanCmdEncap[4]; //4 = sizeof(ZW_MULTI_CHANNEL_CMD_ENCAP_V2_FRAME) - sizeof(ALL_EXCEPT_ENCAP)
  38      =4    ZW_SUPERVISION_GET_FRAME supervisionGet;
  39      =4    ZW_APPLICATION_TX_BUFFER appTxBuf;
  40      =4  } REQ_BUF;
  41      =4  
  42      =4  /****************************************************************************/
  43      =4  /*                              EXPORTED DATA                               */
  44      =4  /****************************************************************************/
  45      =4  
  46      =4  
  47      =4  /****************************************************************************/
  48      =4  /*                           EXPORTED FUNCTIONS                             */
  49      =4  /****************************************************************************/
  50      =4  
  51      =4  /**
  52      =4   * @brief Initializes the TX mutexes.
  53      =4   */
  54      =4  void
  55      =4  mutex_init(void);
  56      =4  
  57      =4  /**
  58      =4   * @brief Get pointer to Application tranmit buffer. If return NULL is a job busy and
  59      =4   * current action should be cancel.
  60      =4   * @param completedFunc function-pointer to to return status on job.
  61      =4   * @return pointer to tranmit-buffer. NULL is it not free.
  62      =4   */
  63      =4  ZW_APPLICATION_TX_BUFFER*
  64      =4  GetRequestBuffer( VOID_CALLBACKFUNC(completedFunc)(TRANSMISSION_RESULT * pTransmissionResult) );
  65      =4  
  66      =4  /**
  67      =4   * @brief Free transmit buffer by clear mutex and remove callback. This should be
  68      =4   * called if ZW_SendData() return FALSE.
  69      =4   */
  70      =4  void
  71      =4  FreeRequestBuffer(void);
  72      =4  
  73      =4  /**
  74      =4   * @brief This function must be used a Call-back status function for GetAppCmdFramePointer
  75      =4   * when calling Z-Wave API ZW_SendData().
  76      =4   * @param pTransmissionResult Transmission result.
  77      =4   */
  78      =4  void
  79      =4  ZCB_RequestJobStatus(TRANSMISSION_RESULT * pTransmissionResult);
  80      =4  
  81      =4  /**
  82      =4   * @brief Get transmit buffer for response job. Return NULL if buffer is busy.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 687 

  83      =4   * @return pointer to ZW_APPLICATION_TX_BUFFER. Return NULL if frame is occupeid or
  84      =4   * job is not legal.
  85      =4   */
  86      =4  ZW_APPLICATION_TX_BUFFER*
  87      =4  GetResponseBuffer(void);
  88      =4  
  89      =4  /**
  90      =4   * @brief Get transmit buffer for response job. Return NULL if buffer is busy.
  91      =4   * @param completedFunc function-pointer to to return status on job.
  92      =4   * @return pointer to ZW_APPLICATION_TX_BUFFER. Return NULL if frame is occupied or
  93      =4   * job is not legal.
  94      =4   */
  95      =4  ZW_APPLICATION_TX_BUFFER*
  96      =4  GetResponseBufferCb(VOID_CALLBACKFUNC(completedFunc)(BYTE));
  97      =4  
  98      =4  /**
  99      =4   * @brief Frees the response buffer. Must be used as callback on transmissions using the response
 100      =4   * buffer.
 101      =4   * @param txStatus Transmission status.
 102      =4   */
 103      =4  void
 104      =4  ZCB_ResponseJobStatus(BYTE txStatus);
 105      =4  
 106      =4  /**
 107      =4   * @brief Free response TX-Buffer clear mutex and remove callback.
 108      =4   */
 109      =4  void
 110      =4  FreeResponseBuffer(void);
 111      =4  
 112      =4  /**
 113      =4   * @brief Returns whether any of the mutexes are occupied.
 114      =4   * @return TRUE if one or more mutexes are occupied, otherwise FALSE.
 115      =4   */
 116      =4  BOOL
 117      =4  ZAF_mutex_isActive(void);
 118      =4  
 119      =4  /**
 120      =4   * @brief Set payload length in Supervision cmd.
 121      =4   * @param[in] pPayload pointer to request buffer payload.
 122      =4   * @param[in] payLoadlen add Supervision command.
 123      =4   * @return boolean if ppPayload is legal.
 124      =4   */
 125      =4  BOOL
 126      =4  RequestBufferSetPayloadLength(ZW_APPLICATION_TX_BUFFER* pPayload,  BYTE payLoadlen);
 127      =4  
 128      =4  /**
 129      =4   * @brief Get Requst buffer payload and payload length.
 130      =4   * @param[in,out] ppPayload Pointer to payload. Pointer is changed to point on payload!
 131      =4   * @param[in,out] pPayLoadlen Length of payload.
 132      =4   * @param[in] supervision Specifies whether Supervision should be activated.
 133      =4   * @return boolean if ppPayload is legal.
 134      =4   */
 135      =4  BOOL
 136      =4  RequestBufferSupervisionPayloadActivate(
 137      =4      ZW_APPLICATION_TX_BUFFER** ppPayload,
 138      =4      BYTE* pPayLoadlen,
 139      =4      BOOL supervision);
 140      =4  
 141      =4  #endif /* _ZW_MUTEX_H_ */
 142      =4  
  18      =3  #include <ZW_security_api.h>
   1      =4  /***************************************************************************
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 688 

   2      =4  *
   3      =4  * Copyright (c) 2013
   4      =4  * Sigma Designs, Inc.
   5      =4  * All Rights Reserved
   6      =4  *
   7      =4  *---------------------------------------------------------------------------
   8      =4  *
   9      =4  * Description: Some nice descriptive description.
  10      =4  *
  11      =4  * Author:   Jakob Buron
  12      =4  *
  13      =4  * Last Changed By:  $Author: jdo $
  14      =4  * Revision:         $Revision: 1.38 $
  15      =4  * Last Changed:     $Date: 2005/07/27 15:12:54 $
  16      =4  *
  17      =4  ****************************************************************************/
  18      =4  #ifndef ZW_SECURITY_API_H_
  19      =3  #include <ZW_transport_api.h>
   1      =4  /****************************************************************************
   2      =4   *
   3      =4   * Copyright (c) 2001-2013
   4      =4   * Sigma Designs, Inc.
   5      =4   * All Rights Reserved
   6      =4   *
   7      =4   *---------------------------------------------------------------------------
   8      =4   *
   9      =4   * Description: Z-Wave Transport Application layer interface
  10      =4   *
  11      =4   * Author:   Ivar Jeppesen
  12      =4   *
  13      =4   * Last Changed By:  $Author: jsi $
  14      =4   * Revision:         $Revision: 31344 $
  15      =4   * Last Changed:     $Date: 2015-04-17 13:53:23 +0200 (fr, 17 apr 2015) $
  16      =4   *
  17      =4   ****************************************************************************/
  18      =4  /**
  19      =4   * \file ZW_transport_api.h
  20      =4   * \brief Z-Wave Transport Application layer interface.
  21      =4   *
  22      =4   * The Z Wave transport layer controls transfer of data between Z Wave nodes
  23      =4   * including retransmission, frame check and acknowledgement. The Z Wave
  24      =4   * transport interface includes functions for transfer of data to other Z Wave
  25      =4   * nodes. Application data received from other nodes is handed over to the
  26      =4   * application via the \ref ApplicationCommandHandler function. The ZW_MAX_NODES
  27      =4   * define defines the maximum of nodes possible in a Z Wave network.
  28      =4   */
  29      =4  #ifndef _ZW_TRANSPORT_API_H_
 793      =4  
  20      =3  /****************************************************************************/
  21      =3  /*                     EXPORTED TYPES and DEFINITIONS                       */
  22      =3  /****************************************************************************/
  23      =3  #define RES_ZERO 0
  24      =3  
  25      =3  
  26      =3  typedef struct _MULTICHAN_SOURCE_NODE_ID_
  27      =3  {
  28      =3    uint8_t nodeId;           /* BYTE 0 */
  29      =3    uint8_t endpoint   : 7;   /* BYTE 1, bit 0-6 */
  30      =3    uint8_t res : 1;          /* BYTE 1, bit 7 */
  31      =3  } MULTICHAN_SOURCE_NODE_ID;
  32      =3  
  33      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 689 

  34      =3  typedef struct _MULTICHAN_DEST_NODE_ID_
  35      =3  {
  36      =3    uint8_t nodeId;           /* BYTE 0 */
  37      =3    uint8_t endpoint   : 7;   /* BYTE 1, bit 0-6 */
  38      =3    uint8_t BitAddress : 1;   /* BYTE 1, bit 7 */
  39      =3  } MULTICHAN_DEST_NODE_ID;
  40      =3  
  41      =3  /**
  42      =3   * MULTICHAN_NODE_INFO should include feature node informations as CRC, security etc.
  43      =3   */
  44      =3  typedef struct _MULTICHAN_NODE_INFO_
  45      =3  {
  46      =3    uint8_t BitMultiChannelEncap; /**< BYTE 0, bit 0 */
  47      =3    security_key_t security; /**< of type security_key_t*/
  48      =3  } MULTICHAN_NODE_INFO;
  49      =3  
  50      =3  
  51      =3  /**
  52      =3   * Association node data field in a association group.
  53      =3   */
  54      =3  typedef struct _MULTICHAN_NODE_ID_
  55      =3  {
  56      =3    MULTICHAN_DEST_NODE_ID node;
  57      =3    MULTICHAN_NODE_INFO    nodeInfo;
  58      =3  } MULTICHAN_NODE_ID;
  59      =3  
  60      =3  
  61      =3  
  62      =3  typedef struct _RECEIVE_OPTIONS_TYPE_EX_ {
  63      =3    uint8_t  rxStatus;           /* Frame header info */
  64      =3    security_key_t securityKey;
  65      =3    MULTICHAN_SOURCE_NODE_ID sourceNode;
  66      =3    MULTICHAN_DEST_NODE_ID destNode;
  67      =3  } RECEIVE_OPTIONS_TYPE_EX;
  68      =3  
  69      =3  /* Transmit options for ZW_SendDataEx */
  70      =3  typedef struct _TRANSMIT_OPTIONS_TYPE_EX_ {
  71      =3    uint8_t S2_groupID;
  72      =3    uint8_t txOptions;
  73      =3    uint8_t sourceEndpoint;
  74      =3    MULTICHAN_NODE_ID *pList;
  75      =3    uint8_t list_length;
  76      =3  } TRANSMIT_OPTIONS_TYPE_EX;
  77      =3  
  78      =3  /* Transmit options for ZW_SendDataEx */
  79      =3  typedef struct _TRANSMIT_OPTIONS_TYPE_SINGLE_EX_ {
  80      =3    uint8_t txOptions;
  81      =3    uint8_t txSecOptions; /**< Options for enabling specific Security scheme functionality */
  82      =3    uint8_t sourceEndpoint;
  83      =3    MULTICHAN_NODE_ID* pDestNode;
  84      =3  } TRANSMIT_OPTIONS_TYPE_SINGLE_EX;
  85      =3  
  86      =3  typedef enum _ENDPOINT_
  87      =3  {
  88      =3    ENDPOINT_ROOT,
  89      =3    ENDPOINT_1,
  90      =3    ENDPOINT_2,
  91      =3    ENDPOINT_3,
  92      =3    ENDPOINT_4,
  93      =3    ENDPOINT_5,
  94      =3    ENDPOINT_6,
  95      =3    ENDPOINT_7,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 690 

  96      =3    ENDPOINT_8,
  97      =3    ENDPOINT_9
  98      =3  } ENDPOINT;
  99      =3  
 100      =3  
 101      =3  /**
 102      =3   * struct includes point to list and size of list
 103      =3   */
 104      =3  typedef struct _CMD_CLASS_LIST_
 105      =3  {
 106      =3    uint8_t* pList;
 107      =3    uint8_t size;
 108      =3  } CMD_CLASS_LIST;
 109      =3  
 110      =3  /**
 111      =3   * struct include un-secure and secure cmd class list
 112      =3   */
 113      =3  typedef struct _CMD_CLASS_LIST_GRP_
 114      =3  {
 115      =3    CMD_CLASS_LIST unsecList;
 116      =3    CMD_CLASS_LIST secList;
 117      =3  }CMD_CLASS_LIST_GRP;
 118      =3  
 119      =3  /**
 120      =3   * struct include un-secure and secure cmd class list
 121      =3   */
 122      =3  typedef struct _CMD_CLASS_LIST_3_LIST_
 123      =3  {
 124      =3    CMD_CLASS_LIST unsecList;
 125      =3    CMD_CLASS_LIST_GRP sec;
 126      =3  }CMD_CLASS_LIST_3_LIST;
 127      =3  
 128      =3  /**
 129      =3   * Struct for an Endpoint DEVICE_CLASS.
 130      =3   */
 131      =3  typedef struct _DEVICE_CLASS_
 132      =3  {
 133      =3    uint8_t genericDeviceClass;
 134      =3    uint8_t specificDeviceClass;
 135      =3  } DEVICE_CLASS;
 136      =3  
 137      =3  /**
 138      =3   * Struct for an Endpoint NIF.
 139      =3   */
 140      =3  typedef struct _EP_NIF_
 141      =3  {
 142      =3    uint8_t genericDeviceClass;
 143      =3    uint8_t specificDeviceClass;
 144      =3    CMD_CLASS_LIST_3_LIST CmdClass3List;
 145      =3  } EP_NIF;
 146      =3  
 147      =3  /**
 148      =3   * Struct for setting up aggregation endpoint group bit-mask.
 149      =3   */
 150      =3  typedef struct _AGGREGATED_GROUP_BIT_MASK_
 151      =3  {
 152      =3    uint8_t aggregatedEndpoint;
 153      =3    uint8_t len;
 154      =3    uint8_t* pBitMask;
 155      =3  } AGGREGATED_GROUP_BIT_MASK;
 156      =3  
 157      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 691 

 158      =3  /**
 159      =3   * This bit MUST be set to 1 if all End Points advertise the same generic and specific
 160      =3     device class and support the same optional command classes. The bit MUST be set to 0 if
 161      =3     End Points do not advertise the same device class and command class information.
 162      =3   */
 163      =3  typedef enum _ENDPOINT_IDENTICAL_DEVICE_CLASS_
 164      =3  {
 165      =3    ENDPOINT_IDENTICAL_DEVICE_CLASS_NO = 0,
 166      =3    ENDPOINT_IDENTICAL_DEVICE_CLASS_YES = 1
 167      =3  }ENDPOINT_IDENTICAL_DEVICE_CLASS;
 168      =3  
 169      =3  
 170      =3  /**
 171      =3   * This field is used to advertise if the node implements a dynamic number of End Points.
 172      =3   * The value 1 MUST be used to indicate that the number of End Points is dynamic. The value
 173      =3   * 0 MUST be used to indicate that the number of End Points is static.
 174      =3   */
 175      =3  typedef enum _ENDPOINT_DYNAMIC_
 176      =3  {
 177      =3    ENDPOINT_DYNAMIC_NO = 0,
 178      =3    ENDPOINT_DYNAMIC_YES = 1
 179      =3  } ENDPOINT_DYNAMIC;
 180      =3  
 181      =3  
 182      =3  /**
 183      =3   * The Multi Channel End Point functionality is used to advertise the number
 184      =3   * of End Points implemented by the node. See description of doc. SDS12657
 185      =3   * chapter Multi Channel End Point Report Command
 186      =3   */
 187      =3  struct _EP_FUNCTIONALITY_
 188      =3  {
 189      =3    uint8_t nbrIndividualEndpoints : 7;  /**< B0, Number of End Points implemented by the node. The value MU
             -ST be in the range 1..127 */
 190      =3    uint8_t resIndZeorBit   : 1;  /**< B0, This field MUST be set to 0*/
 191      =3    uint8_t nbrAggregatedEndpoints : 7;  /**< B0, Number of End Points implemented by the node. The value MU
             -ST be in the range 1..127 */
 192      =3    uint8_t resAggZeorBit   : 1;  /**< B0, This field MUST be set to 0*/
 193      =3    uint8_t resZero      : 6;  /**< B1, This field MUST be set to 0*/
 194      =3    ENDPOINT_IDENTICAL_DEVICE_CLASS identical : 1; /**< B1, of enum type ENDPOINT_IDENTICAL_DEVICE_CLASS*/
 195      =3    ENDPOINT_DYNAMIC dynamic: 1;  /**< B1, of enum type ENDPOINT_DYNAMIC*/
 196      =3  };
 197      =3  
 198      =3  /**
 199      =3   * The Multi Channel End Point functionality encpsulation
 200      =3   */
 201      =3  typedef union _EP_FUNCTIONALITY_DATA_
 202      =3  {
 203      =3    struct _EP_FUNCTIONALITY_ bits;
 204      =3    uint8_t   bDdata[3];
 205      =3  } EP_FUNCTIONALITY_DATA;
 206      =3  
 207      =3  
 208      =3  
 209      =3  /****************************************************************************/
 210      =3  /*                              EXPORTED DATA                               */
 211      =3  /****************************************************************************/
 212      =3  
 213      =3  
 214      =3  /****************************************************************************/
 215      =3  /*                           EXPORTED FUNCTIONS                             */
 216      =3  /****************************************************************************/
 217      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 692 

 218      =3  
 219      =3  /**
 220      =3   * @brief Initialization of endpoint NIF's. Each endpoint  have only one command class list
 221      =3   * that is present for device security level. Framework will add non secure command class list
 222      =3   * if device is secure include. Dependent ofr secure level contains the list CC security and security 2.
 223      =3   * This function must be called after Transport_OnApplicationInitSW.
 224      =3   * @param[in] pFunctionality of type EP_FUNCTIONALITY_DATA
 225      =3   * @param[in] pList is a pointer of type EP_LIST to all endpoints NIF's.
 226      =3   * @param[in] sizeList is number of endpoints NIF's pList points to.
 227      =3   */
 228      =3  //@ [Transport_AddEndpointSupport]
 229      =3  void Transport_AddEndpointSupport(
 230      =3      EP_FUNCTIONALITY_DATA* pFunctionality,
 231      =3      EP_NIF* pList,
 232      =3      uint8_t sizeList);
 233      =3  //@ [Transport_AddEndpointSupport]
 234      =3  
 235      =3  
 236      =3  /**
 237      =3   * @brief Setup aggregation groups
 238      =3   * Example including two aggregation endpoints:
 239      =3   * NUMBER_OF_AGGREGATED_ENDPOINTS = 2;
 240      =3   * uint8_t ep4_AGG_Group[2] = {0x03};      //bit mask for endpoints: 1 and 2
 241      =3   * uint8_t ep5_AGG_Group = 0x07;           //bit mask for endpoint 1, 2 and 3
 242      =3   * AGGREGATED_GROUP_BIT_MASK maskarray[NUMBER_OF_AGGREGATED_ENDPOINTS] =
 243      =3   * {
 244      =3   *  {ENDPOINT_4, sizeof(ep4_AGG_Group), &ep4_AGG_Group },
 245      =3   *  {ENDPOINT_5, sizeof(ep5_AGG_Group), &ep5_AGG_Group }
 246      =3   * };
 247      =3   * Transport_SetupAggregationGroups( aggGroup, NUMBER_OF_AGGREGATED_ENDPOINTS);
 248      =3   *
 249      =3   * @param pMaskArray pointer to array of type AGGREGATED_GROUP_BIT_MASK
 250      =3   * @param sizeArray size of array
 251      =3   * @return number of Aggregated Members Bit Mask bytes
 252      =3   */
 253      =3  void
 254      =3  Transport_SetupAggregationGroups(AGGREGATED_GROUP_BIT_MASK* pMaskArray, uint8_t sizeArray);
 255      =3  
 256      =3  
 257      =3  /**
 258      =3   * @brief Read Node endpoint functionality
 259      =3   * @param pFunc pointer of type EP_FUNCTIONALITY.
 260      =3   */
 261      =3  void
 262      =3  GetMultiChannelEndPointFunctionality(EP_FUNCTIONALITY_DATA* pFunc);
 263      =3  
 264      =3  
 265      =3  /**
 266      =3   * @brief Return endpoint device class.
 267      =3   * @param[in] endpoint parameter
 268      =3   * @return pointer of type DEVICE_CLASS!
 269      =3   */
 270      =3  DEVICE_CLASS*
 271      =3  GetEndpointDeviceClass( uint8_t endpoint);
 272      =3  
 273      =3  
 274      =3  /**
 275      =3   * @brief Get endpoint non-secure or secure command class list.
 276      =3   * @param[in] secList TRUE if secure list else FALSE for non-secure list
 277      =3   * @param[in] endpoint parameter
 278      =3   * @return Return endpoint command class list. Return NULL if list is not present!
 279      =3   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 693 

 280      =3  CMD_CLASS_LIST*
 281      =3  GetEndpointcmdClassList( BOOL secList, uint8_t endpoint);
 282      =3  
 283      =3  
 284      =3  /**
 285      =3   * @brief Initialization to search for a specified set of generic and specific
 286      =3   * device class in End Points.
 287      =3   */
 288      =3  void InitNextEndPoint(void);
 289      =3  
 290      =3  
 291      =3  /**
 292      =3   * @brief Search for next specified set of generic and specific
 293      =3   * device class in End Points.
 294      =3   * @param[in] genDeviceClass generic device class parameter
 295      =3   * @param[in] specDeviceClass specific device class parameter
 296      =3   * @param[out] pEp endpoint list pointer
 297      =3   * @return endpoint. 0 if no endpoint.
 298      =3   */
 299      =3  uint8_t FindEndPoints( uint8_t genDeviceClass, uint8_t specDeviceClass, uint8_t* pEp);
 300      =3  
 301      =3  
 302      =3  /**
 303      =3   * @brief Send data request call. Encapsulate data for endpoint support and call protocol ZW_SendDataEx.
 304      =3   * @param[in] pData IN Data buffer pointer.
 305      =3   * @param[in] dataLength IN Data buffer length.
 306      =3   * @param[in] pTxOptionsEx transmit options pointer.
 307      =3   * @param[out] pCallback is a callback function-pointer returning result of the job.
 308      =3   * @return status of enum type ZW_SENDDATA_EX_RETURN_CODES
 309      =3   */
 310      =3  enum ZW_SENDDATA_EX_RETURN_CODES
 311      =3  Transport_SendRequestEP(
 312      =3    uint8_t *pData,
 313      =3    uint8_t  dataLength,
 314      =3    TRANSMIT_OPTIONS_TYPE_SINGLE_EX *pTxOptionsEx,
 315      =3    VOID_CALLBACKFUNC(pCallback)(TRANSMISSION_RESULT * pTransmissionResult));
 316      =3  
 317      =3  
 318      =3  /**
 319      =3   * @brief Send data response call. Encapsulate data for endpoint support and call protocol ZW_SendDataEx.
 320      =3   * @param[in] pData IN Data buffer pointer.
 321      =3   * @param[in] dataLength IN Data buffer length.
 322      =3   * @param[in] pTxOptionsEx transmit options pointer.
 323      =3   * @param[out] pCallback is a callback function-pointer returning result of the job.
 324      =3   * @return status of enum type ZW_SENDDATA_EX_RETURN_CODES
 325      =3   */
 326      =3  enum ZW_SENDDATA_EX_RETURN_CODES
 327      =3  Transport_SendResponseEP(
 328      =3    uint8_t *pData,
 329      =3    uint8_t  dataLength,
 330      =3    TRANSMIT_OPTIONS_TYPE_SINGLE_EX *pTxOptionsEx,
 331      =3    VOID_CALLBACKFUNC(pCallback)(uint8_t bStatus));
 332      =3  
 333      =3  /**
 334      =3   * @brief Application code receiving incoming incoming frames.
 335      =3   * @param[in] rxOpt IN receive options of type RECEIVE_OPTIONS_TYPE_EX.
 336      =3   * @param[in] pCmd IN  Payload from the received frame.
 337      =3   * @param[in] cmdLength IN  Number of command bytes including command.
 338      =3   * @return status of extracting frame
 339      =3   */
 340      =3  extern received_frame_status_t
 341      =3  Transport_ApplicationCommandHandlerEx(
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 694 

 342      =3    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
 343      =3    ZW_APPLICATION_TX_BUFFER *pCmd,
 344      =3    uint8_t   cmdLength);
 345      =3  
 346      =3  
 347      =3  /**
 348      =3   * @brief Helper function to switching endpoints for SendData.
 349      =3   * @param[in] rxopt Receive options to convert.
 350      =3   * @param[out] txopt Converted transmit options
 351      =3   */
 352      =3  void
 353      =3  RxToTxOptions( RECEIVE_OPTIONS_TYPE_EX *rxopt,
 354      =3                 TRANSMIT_OPTIONS_TYPE_SINGLE_EX **txopt);
 355      =3  
 356      =3  
 357      =3  /**
 358      =3   * @brief Validate destination endpoint use bit-addressing. This function must only
 359      =3   * be used to check jobs that return response (Get <-> Report).
 360      =3   * @param[in] rxOpt pointer of type RECEIVE_OPTIONS_TYPE_EX
 361      =3   * @return Boolean TRUE if use bit-addressing else FALSE
 362      =3   */
 363      =3  BOOL
 364      =3  Check_not_legal_response_job(RECEIVE_OPTIONS_TYPE_EX *rxOpt);
 365      =3  
 366      =3  /**
 367      =3   * @brief Read members of an aggregated endpoint
 368      =3   * @param[in] aggregatedEndpoint endpoint number
 369      =3   * @param[out] pAggBitMask pointer to bitmask
 370      =3   * @return number of Aggregated Members Bit Mask bytes
 371      =3   */
 372      =3  uint8_t
 373      =3  ReadAggregatedEndpointGroup( uint8_t aggregatedEndpoint, uint8_t* pAggBitMask);
 374      =3  
 375      =3  /**
 376      =3   * @brief Set supervision-encapsulated-frame flag. The Command class call Check_not_legal_response_job()
 377      =3   * Use the flag to discard current job if a Get<->Response job (CC:006C.01.00.13.002).
 378      =3   * @param[in] flag supervision-encapsulated-frame TRUE if active and FALSE if deactive.
 379      =3   */
 380      =3  void
 381      =3  SetFlagSupervisionEncap(BOOL flag);
 382      =3  
 383      =3  #endif /* _ZW_TRANSPORTENDPOINT_H_ */
 384      =3  
 385      =3  
  17      =2  
  18      =2  /****************************************************************************/
  19      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  20      =2  /****************************************************************************/
  21      =2  
  22      =2  /**
  23      =2   * Returns the version of this CC.
  24      =2   */
  25      =2  #define CommandClassManufacturerVersionGet() MANUFACTURER_SPECIFIC_VERSION_V2
  26      =2  
  27      =2  #define MAN_DEVICE_ID_SIZE (8)
  28      =2  
  29      =2  /**
  30      =2   * Command class manufacturer specific device Id type
  31      =2   */
  32      =2  typedef enum _DEVICE_ID_TYPE_
  33      =2  {
  34      =2    DEVICE_ID_TYPE_OEM = 0,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 695 

  35      =2    DEVICE_ID_TYPE_SERIAL_NBR,
  36      =2    DEVICE_ID_TYPE_PSEUDO_RANDOM
  37      =2  }
  38      =2  DEVICE_ID_TYPE;
  39      =2  
  40      =2  /**
  41      =2   * Command class manufacturer specific device Id format
  42      =2   */
  43      =2  typedef enum _DEVICE_ID_FORMAT_
  44      =2  {
  45      =2    DEVICE_ID_FORMAT_UTF_8 = 0,
  46      =2    DEVICE_ID_FORMAT_BIN
  47      =2  }
  48      =2  DEVICE_ID_FORMAT;
  49      =2  
  50      =2  
  51      =2  /**
  52      =2   * Command class manufacturer specific device Id data
  53      =2   */
  54      =2  typedef struct _DEV_ID_DATA
  55      =2  {
  56      =2    BYTE DevIdDataFormat: 3; /**< Type DEVICE_ID_FORMAT */
  57      =2    BYTE DevIdDataLen: 5;
  58      =2    BYTE* pDevIdData;
  59      =2  }
  60      =2  DEV_ID_DATA;
  61      =2  
  62      =2  /****************************************************************************/
  63      =2  /*                              EXPORTED DATA                               */
  64      =2  /****************************************************************************/
  65      =2  
  66      =2  // Nothing here.
  67      =2  
  68      =2  /****************************************************************************/
  69      =2  /*                           EXPORTED FUNCTIONS                             */
  70      =2  /****************************************************************************/
  71      =2  
  72      =2  /**
  73      =2   * @brief Handler for the Manufacturer Specific command class.
  74      =2   * @param[in] rxOpt receive options of type RECEIVE_OPTIONS_TYPE_EX
  75      =2   * @param[in] pCmd Payload from the received frame, the union should be used to access
  76      =2   * the fields.
  77      =2   * @param[in] cmdLength Number of command bytes including the command.
  78      =2   * @return receive frame status.
  79      =2   */
  80      =2  received_frame_status_t handleCommandClassManufacturerSpecific(
  81      =2      RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  82      =2      ZW_APPLICATION_TX_BUFFER *pCmd,
  83      =2      BYTE cmdLength);
  84      =2  
  85      =2  /**
  86      =2   * @brief Read the Device specifict ID Data fields.
  87      =2   * @param[in] deviceIdType values for the Device ID Type of enum type DEVICE_ID_TYPE
  88      =2   * @param[out] pDevIdDataFormat pointer to data format of type DEVICE_ID_FORMAT
  89      =2   * @param[out] pDevIdDataLen  pointer returning len of the Device ID Data fields.
  90      =2   * @param[out] pDevIdData pointer to the Device ID Data fields.
  91      =2   * @return boolean
  92      =2   */
  93      =2  extern void ApplDeviceSpecificInfoGet(
  94      =2      DEVICE_ID_TYPE *deviceIdType,
  95      =2      DEVICE_ID_FORMAT* pDevIdDataFormat,
  96      =2      BYTE* pDevIdDataLen,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 696 

  97      =2      BYTE* pDevIdData);
  98      =2  
  99      =2  /**
 100      =2   * @brief Read the manufacturer specific unique serial number from NVR if the number from NVR all
 101      =2   * 0xFF then create a random one.
 102      =2   */
 103      =2  void ManufacturerSpecificDeviceIDInit(void);
 104      =2  
 105      =2  #endif /* _COMMANDCLASSMANUFACTURERSPECIFIC_H_ */
  18      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
   8      =2  #define _AGI_H_
   9      =2  
  10      =2  /****************************************************************************/
  11      =2  /*                              INCLUDE FILES                               */
  12      =2  /****************************************************************************/
  13      =2  
  14      =2  #include <ZW_typedefs.h>
   1      =3  /*******************************  ZW_typedefs.h  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Products that speak Z-Wave work together better
  11      =3   *
  12      =3   *              Copyright (c) 2008
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Module description
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: efh $
  29      =3   * Revision:         $Revision: 29359 $
  30      =3   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_TYPEDEFS_H_
  15      =2  #include <ZW_TransportEndpoint.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Transport layer for Multi Channel endpoint functionality.
   4      =3   * @copyright Copyright (c) 2001-2017
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 697 

   5      =3   * Sigma Designs, Inc.
   6      =3   * All Rights Reserved
   7      =3   */
   8      =3  
   9      =3  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =3  
 385      =3  
  16      =2  #include <CommandClass.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Common types and definitions for all command classes.
   4      =3   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =3   */
   6      =3  
   7      =3  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  17      =2  
  18      =2  /****************************************************************************/
  19      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  20      =2  /****************************************************************************/
  21      =2  
  22      =2  /**
  23      =2   * Enmum type NODE_LIST_STATUS is used for return status on API call AGI_NodeIdListGetNext.
  24      =2   * Enum types from NODE_LIST_STATUS_SUCCESS to NODE_LIST_STATUS_ERROR_LIST deliver status
  25      =2   * on the call and after NODE_LIST_STATUS_ERROR_LIST deliver an error identifiers pointing
  26      =2   * to a problem in application AGI/association configuarion.
  27      =2   */
  28      =2  typedef enum
  29      =2  {
  30      =2    NODE_LIST_STATUS_SUCCESS = 0,
  31      =2    NODE_LIST_STATUS_NO_MORE_NODES,
  32      =2    NODE_LIST_STATUS_ASSOCIATION_LIST_EMPTY,
  33      =2    NODE_LIST_STATUS_ERROR_LIST,              /**< enum values higher than this is error identifiers*/
  34      =2    NODE_LIST_STATUS_ERR_NO_TABLE_ENDPOINT,
  35      =2    NODE_LIST_STATUS_ERR_UNKNOWN_PROFILE,
  36      =2    NODE_LIST_STATUS_ERR_ENDPOINT_OUT_OF_RANGE,
  37      =2    NODE_LIST_STATUS_ERR_GROUP_NBR_NOT_LEGAL,
  38      =2    NODE_LIST_STATUS_ERR_LIFELINE_PROFILE_NOT_SUPPORTED,
  39      =2    NODE_LIST_STATUS_ERR_LIFELINE_SUPPORT_NOT_CC_BASIC,
  40      =2    NODE_LIST_STATUS_ERR_PROFILE_LIFELINE_ONLY_SUPPORT_IN_GRP_1,
  41      =2  }
  42      =2  NODE_LIST_STATUS;
  43      =2  
  44      =2  /**
  45      =2   * NODE_LIST is used to control current AGI profile job.
  46      =2   */
  47      =2  typedef struct _NODE_LIST_
  48      =2  {
  49      =2    uint8_t sourceEndpoint;       /**< Active endpoint handling AGI profile job */
  50      =2    MULTICHAN_NODE_ID* pNodeList; /**< pointer to the node list for AGI profile group */
  51      =2    uint8_t len;                     /**< Length of the node list */
  52      =2  }
  53      =2  NODE_LIST;
  54      =2  
  55      =2  /**
  56      =2   * Structure for an AGI group including profile, one command class group and group name
  57      =2   */
  58      =2  typedef struct _AGI_GROUP_
  59      =2  {
  60      =2    AGI_PROFILE profile;
  61      =2    CMD_CLASS_GRP cmdGrp; /**< AGI Profile cmd class group*/
  62      =2    char groupName[42]; /**< AGI Profile group-name UTF-8 format*/
  63      =2  }
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 698 

  64      =2  AGI_GROUP;
  65      =2  
  66      =2  /****************************************************************************/
  67      =2  /*                              EXPORTED DATA                               */
  68      =2  /****************************************************************************/
  69      =2  
  70      =2  // Nothing here.
  71      =2  
  72      =2  /****************************************************************************/
  73      =2  /*                           EXPORTED FUNCTIONS                             */
  74      =2  /****************************************************************************/
  75      =2  
  76      =2  /**
  77      =2   * Initializes all AGI parameters. This MUST be called before calling other AGI functions.
  78      =2   */
  79      =2  //@ [AGI_Init]
  80      =2  void CC_AGI_Init(void);
  81      =2  //@ [AGI_Init]
  82      =2  
  83      =2  /**
  84      =2   * For backwards compatibility.
  85      =2   */
  86      =2  #define AGI_Init() CC_AGI_Init()
  87      =2  
  88      =2  /**
  89      =2   * Setup AGI Lifeline command classes and commands for each endpoint.
  90      =2   * @param[in] pCmdGrpList Pointer to an array of command class and command pairs.
  91      =2   * @param[in] listSize The number of command class and command pairs for the Lifeline (array size).
  92      =2   * @param[in] endpoint The endpoint for which the array applies.
  93      =2   */
  94      =2  //@ [AGI_LifeLineGroupSetup]
  95      =2  void CC_AGI_LifeLineGroupSetup(
  96      =2      cc_group_t const * const pCmdGrpList,
  97      =2      uint8_t listSize,
  98      =2      uint8_t endpoint);
  99      =2  //@ [AGI_LifeLineGroupSetup]
 100      =2  
 101      =2  /**
 102      =2   * For backwards compatibility.
 103      =2   *
 104      =2   * Since Lifeline groups of both root device and endpoints must be named "Lifeline", the text is
 105      =2   * hardcoded in this module. Hence, there's no need for an input parameter for the group name.
 106      =2   */
 107      =2  #define AGI_LifeLineGroupSetup(a, b, c, d) CC_AGI_LifeLineGroupSetup(a, b, d);
 108      =2  
 109      =2   /**
 110      =2   * Sets up the AGI table of groups for a given endpoint (or root device).
 111      =2   * @param[in] pTable[] is AGI table for one endpoint.
 112      =2   * @param[in] tableSize is number of groups in table.
 113      =2   * @param[in] endpoint device endpoint number for the AGI table. Endpoint 0 and 1 will be
 114      =2   * handle as the same number!
 115      =2   */
 116      =2  //@ [AGI_ResourceGroupSetup]
 117      =2  void CC_AGI_ResourceGroupSetup(
 118      =2      AGI_GROUP const * const pTable,
 119      =2      uint8_t tableSize,
 120      =2      uint8_t endpoint);
 121      =2  //@ [AGI_ResourceGroupSetup]
 122      =2  
 123      =2  /**
 124      =2   * For backwards compatibility.
 125      =2   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 699 

 126      =2  #define AGI_ResourceGroupSetup(a, b, c) CC_AGI_ResourceGroupSetup(a, b, c)
 127      =2  
 128      =2  /**
 129      =2   * Request node list is used by Command classes modules to extract the association nodelist for a
 130      =2   * request call.
 131      =2   * @param[in] pProfile is a pointer to AGI profile.
 132      =2   * @param[in] pCurrentCmdGrp is a pointer to command class group
 133      =2   * @param[in] sourceEndpoint device source endpoint
 134      =2   * @return transmit option pointer of type TRANSMIT_OPTIONS_TYPE_EX. Return NULL if something vent
 135      =2   * wrong.
 136      =2   */
 137      =2  TRANSMIT_OPTIONS_TYPE_EX * ReqNodeList(
 138      =2      AGI_PROFILE * pProfile,
 139      =2      CMD_CLASS_GRP * pCurrentCmdGrp,
 140      =2      uint8_t sourceEndpoint);
 141      =2  
 142      =2  #endif /* _AGI_H_ */
  19      =1  #endif
  20      =1  #include <app_config_common.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Contains common definitions used by the Z-Wave+ applications.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONUTILITIES_APP_CONFIG_COMMON_H_
   8      =2  #define PRODUCTPLUS_APPLICATIONUTILITIES_APP_CONFIG_COMMON_H_
   9      =2  
  10      =2  #endif /* PRODUCTPLUS_APPLICATIONUTILITIES_APP_CONFIG_COMMON_H_ */
  21      =1  
  22      =1  /**
  23      =1   * Defines device generic and specific types
  24      =1   */
  25      =1  //@ [GENERIC_TYPE_ID]
  26      =1  #define GENERIC_TYPE  GENERIC_TYPE_SWITCH_BINARY
  27      =1  #define SPECIFIC_TYPE SPECIFIC_TYPE_VALVE_OPEN_CLOSE
  28      =1  //@ [GENERIC_TYPE_ID]
  29      =1  
  30      =1  /**
  31      =1   * See ZW_basic_api.h for ApplicationNodeInformation field deviceOptionMask
  32      =1   */
  33      =1  //@ [DEVICE_OPTIONS_MASK_ID]
  34      =1  #define DEVICE_OPTIONS_MASK   APPLICATION_NODEINFO_LISTENING | APPLICATION_NODEINFO_OPTIONAL_FUNCTIONALITY
  35      =1  //@ [DEVICE_OPTIONS_MASK_ID]
  36      =1  
  37      =1  /**
  38      =1   * Defines used to initialize the Z-Wave Plus Info Command Class.
  39      =1   */
  40      =1   
  41      =1   //icon: display on type column of pc controller
  42      =1  //@ [APP_TYPE_ID]
  43      =1  #define APP_ROLE_TYPE     ZWAVEPLUS_INFO_REPORT_ROLE_TYPE_SLAVE_ALWAYS_ON
  44      =1  #define APP_NODE_TYPE     ZWAVEPLUS_INFO_REPORT_NODE_TYPE_ZWAVEPLUS_NODE      
  45      =1  
  46      =1  #define APP_ICON_TYPE                 ICON_TYPE_GENERIC_VALVE_OPEN_CLOSE
  47      =1  #define APP_USER_ICON_TYPE            ICON_TYPE_GENERIC_VALVE_OPEN_CLOSE
  48      =1  
  49      =1  #define ENDPOINT_ICONS \
  50      =1   {ICON_TYPE_GENERIC_VALVE_OPEN_CLOSE, ICON_TYPE_GENERIC_VALVE_OPEN_CLOSE},  \
  51      =1   {ICON_TYPE_GENERIC_VALVE_OPEN_CLOSE, ICON_TYPE_GENERIC_VALVE_OPEN_CLOSE}, \
  52      =1   {ICON_TYPE_GENERIC_SENSOR_NOTIFICATION, ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_WATER_ALARM}
  53      =1  //@ [APP_TYPE_ID]
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 700 

  54      =1  
  55      =1  
  56      =1  /**
  57      =1   * Defines used to initialize the Manufacturer Specific Command Class.
  58      =1   */
  59      =1  #define APP_MANUFACTURER_ID     MFG_ID_SIGMA_DESIGNS  // 0x1510
  60      =1  
  61      =1  #define APP_PRODUCT_TYPE_ID     PRODUCT_TYPE_ID_ZWAVE_PLUS
  62      =1  #define APP_PRODUCT_ID          PRODUCT_ID_SwitchOnOff
  63      =1  
  64      =1  #define APP_FIRMWARE_ID         APP_PRODUCT_ID | (APP_PRODUCT_TYPE_ID << 8)
  65      =1  
  66      =1  #define APP_DEVICE_ID_TYPE      DEVICE_ID_TYPE_PSEUDO_RANDOM
  67      =1  #define APP_DEVICE_ID_FORMAT    DEVICE_ID_FORMAT_BIN
  68      =1  
  69      =1  /**
  70      =1   * Defines used to initialize the Association Group Information (AGI)
  71      =1   * Command Class.
  72      =1   */
  73      =1  #define NUMBER_OF_INDIVIDUAL_ENDPOINTS    3
  74      =1  #define NUMBER_OF_AGGREGATED_ENDPOINTS    0
  75      =1  #define NUMBER_OF_ENDPOINTS         NUMBER_OF_INDIVIDUAL_ENDPOINTS + NUMBER_OF_AGGREGATED_ENDPOINTS
  76      =1  #define MAX_ASSOCIATION_GROUPS      4
  77      =1  #define MAX_ASSOCIATION_IN_GROUP    5
  78      =1  
  79      =1  //@ [AGI_TABLE_ID]
  80      =1  #define AGITABLE_LIFELINE_GROUP \
  81      =1    {COMMAND_CLASS_DEVICE_RESET_LOCALLY, DEVICE_RESET_LOCALLY_NOTIFICATION}, \
  82      =1    {COMMAND_CLASS_BASIC, BASIC_REPORT},  \
  83      =1    {COMMAND_CLASS_SWITCH_BINARY, SWITCH_BINARY_REPORT}
  84      =1  //  {COMMAND_CLASS_DEVICE_REPORT_LOCALLY, DEVICE_RESET_LOCALLY_NOTIFICATION}
  85      =1  
  86      =1  #define AGITABLE_LIFELINE_GROUP_ENDPOINTS_VALVE \
  87      =1    {COMMAND_CLASS_BASIC, BASIC_REPORT},  \
  88      =1    {COMMAND_CLASS_SWITCH_BINARY, SWITCH_BINARY_REPORT},\
  89      =1    {COMMAND_CLASS_MULTI_CHANNEL_V3, MULTI_CHANNEL_CMD_ENCAP_V3}
  90      =1    
  91      =1    
  92      =1  #define AGITABLE_LIFELINE_GROUP_ENDPOINTS_SENSOR \
  93      =1    {COMMAND_CLASS_BASIC, BASIC_REPORT},  \
  94      =1    {COMMAND_CLASS_NOTIFICATION_V3, NOTIFICATION_REPORT_V3} 
  95      =1    
  96      =1  #define ASSOCIATION_ROOT_GROUP_MAPPING_CONFIG \
  97      =1    {ASS_GRP_ID_2, ENDPOINT_1, ASS_GRP_ID_2}, \
  98      =1    {ASS_GRP_ID_3, ENDPOINT_2, ASS_GRP_ID_2},\
  99      =1    {ASS_GRP_ID_4, ENDPOINT_3, ASS_GRP_ID_2}
 100      =1    
 101      =1    
 102      =1    
 103      =1  #define  AGITABLE_ROOTDEVICE_GROUPS \
 104      =1   {ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION, NOTIFICATION_REPORT_POWER_MANAGEMENT_V4, {COMMAND_CL
             -ASS_NOTIFICATION_V3, NOTIFICATION_REPORT_V3},"alarm EP 1"}, \
 105      =1   {ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION, NOTIFICATION_REPORT_POWER_MANAGEMENT_V4, {COMMAND_CL
             -ASS_NOTIFICATION_V3, NOTIFICATION_REPORT_V3},"alarm EP 2"}, \
 106      =1   {ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION, NOTIFICATION_REPORT_WATER_V3, {COMMAND_CLASS_NOTIFIC
             -ATION_V3, NOTIFICATION_REPORT_V3},"alarm EP 3"}
 107      =1  
 108      =1  #define  AGITABLE_ENDPOINT_1_GROUPS \
 109      =1   {ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION, NOTIFICATION_REPORT_POWER_MANAGEMENT_V4, {COMMAND_CL
             -ASS_NOTIFICATION_V3, NOTIFICATION_REPORT_V3},"alarm EP 1"}
 110      =1  #define  AGITABLE_ENDPOINT_2_GROUPS \
 111      =1   {ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION, NOTIFICATION_REPORT_POWER_MANAGEMENT_V4, {COMMAND_CL
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 701 

             -ASS_NOTIFICATION_V3, NOTIFICATION_REPORT_V3},"alarm EP 2"}
 112      =1  #define  AGITABLE_ENDPOINT_3_GROUPS  \
 113      =1   {ASSOCIATION_GROUP_INFO_REPORT_PROFILE_NOTIFICATION, NOTIFICATION_REPORT_WATER_V3, {COMMAND_CLASS_NOTIFIC
             -ATION_V3, NOTIFICATION_REPORT_V3},"alarm EP 3"}
 114      =1  
 115      =1  #define FIRMWARE_UPGRADABLE        0xFF  /**< 0x00 = Not upgradable, 0xFF = Upgradable*/
 116      =1  
 117      =1  /**
 118      =1   * Configuration for ApplicationUtilities/notification.h + .c
 119      =1   */
 120      =1  #define MAX_NOTIFICATIONS 1
 121      =1  /**
 122      =1   * configuration for ApplicationUtilities/multilevel_switch.h + .c
 123      =1   */
 124      =1  //#define SWITCH_MULTI_ENDPOINTS  0
 125      =1  
 126      =1  
 127      =1  //@ [SECURITY_AUTHENTICATION_ID]
 128      =1  /*
 129      =1   * This definition must be set in order for the application to handle CSA. It is used only in the
 130      =1   * application.
 131      =1   */
 132      =1  // #define APP_SUPPORTS_CLIENT_SIDE_AUTHENTICATION
 133      =1  
 134      =1  /*
 135      =1   * This definition tells the protocol whether the application uses CSA or not.
 136      =1   * It can be set to one of the two following values:
 137      =1   * - SECURITY_AUTHENTICATION_SSA
 138      =1   * - SECURITY_AUTHENTICATION_CSA
 139      =1   */
 140      =1  #define REQUESTED_SECURITY_AUTHENTICATION SECURITY_AUTHENTICATION_SSA
 141      =1  //@ [SECURITY_AUTHENTICATION_ID]
 142      =1  
 143      =1  /**
 144      =1   * Security keys
 145      =1   */
 146      =1  //@ [REQUESTED_SECURITY_KEYS_ID]
 147      =1  #define REQUESTED_SECURITY_KEYS SECURITY_KEY_NONE_MASK  // (SECURITY_KEY_S0_BIT | SECURITY_KEY_S2_UNAUTHENT
             -ICATED_BIT)
 148      =1  //@ [REQUESTED_SECURITY_KEYS_ID]
 149      =1  
 150      =1  #endif /* _CONFIG_APP_H_ */
  29          #include <app_version.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Contains version definitions for the application.
   4      =1   * @copyright 2019 Silicon Laboratories Inc.
   5      =1   */
   6      =1  #ifndef PRODUCTPLUS_SENSORPIR_APP_VERSION_H_
   7      =1  #define PRODUCTPLUS_SENSORPIR_APP_VERSION_H_
   8      =1  
   9      =1  #include "zaf_version.h"
   1      =2  /**
   2      =2   * @file
   3      =2   * Contains version definitions for the Z-Wave Application Framework.
   4      =2   * @copyright 2019 Silicon Laboratories Inc.
   5      =2   */
   6      =2  #define ZAF_VERSION_MAJOR 4
   7      =2  #define ZAF_VERSION_MINOR 5
   8      =2  #define ZAF_VERSION_PATCH 0
  10      =1  
  11      =1  #define APP_VERSION       ZAF_VERSION_MAJOR
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 702 

  12      =1  #define APP_REVISION      ZAF_VERSION_MINOR
  13      =1  #define APP_VERSION_PATCH ZAF_VERSION_PATCH
  14      =1  #define APP_BUILD_NUMBER  ZAF_BUILD_NO
  15      =1  
  16      =1  #endif /* PRODUCTPLUS_SENSORPIR_APP_VERSION_H_ */
  30          
  31          #include <ZW_slave_api.h>
   1      =1  /****************************************************************************
   2      =1   *
   3      =1   * Copyright (c) 2001-2013
   4      =1   * Sigma Designs, Inc.
   5      =1   * All Rights Reserved
   6      =1   *
   7      =1   *---------------------------------------------------------------------------
   8      =1   *
   9      =1   * Description: Z-Wave Slave node application interface
  10      =1   *
  11      =1   * Author:   Ivar Jeppesen
  12      =1   *
  13      =1   * Last Changed By:  $Author: jsi $
  14      =1   * Revision:         $Revision: 28977 $
  15      =1   * Last Changed:     $Date: 2014-06-04 13:28:14 +0200 (on, 04 jun 2014) $
  16      =1   *
  17      =1   ****************************************************************************/
  18      =1  #ifndef _ZW_SLAVE_API_H_
  19      =1  #define _ZW_SLAVE_API_H_
  20      =1  
  21      =1  #ifndef ZW_SLAVE
  24      =1  
  25      =1  /****************************************************************************/
  26      =1  /*                              INCLUDE FILES                               */
  27      =1  /****************************************************************************/
  28      =1  #include <ZW_basis_api.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2013
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: Z-Wave common controller/slave application interface
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: jsi $
  14      =2   * Revision:         $Revision: 31343 $
  15      =2   * Last Changed:     $Date: 2015-04-17 10:57:14 +0200 (fr, 17 apr 2015) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  /**
  19      =2   * @file ZW_basis_api.h
  20      =2   * @brief Z-Wave common controller/slave application interface.
  21      =2   *
  22      =2   * Z Wave <=> Application general software interface.
  23      =2   */
  24      =2  #ifndef _ZW_BASIS_API_H_
  25      =2  #define _ZW_BASIS_API_H_
  26      =2  
  27      =2  /****************************************************************************/
  28      =2  /*                              INCLUDE FILES                               */
  29      =2  /****************************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 703 

  30      =2  #include <ZW_typedefs.h>
   1      =3  /*******************************  ZW_typedefs.h  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Products that speak Z-Wave work together better
  11      =3   *
  12      =3   *              Copyright (c) 2008
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Module description
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: efh $
  29      =3   * Revision:         $Revision: 29359 $
  30      =3   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_TYPEDEFS_H_
  31      =2  #include <ZW_sysdefs.h>
   1      =3  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Z-Wave, the wireless lauguage.
  11      =3   *
  12      =3   *              Copyright (c) 2001
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Z-Wave system defines
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 704 

  28      =3   * Last Changed By:  $Author: tro $
  29      =3   * Revision:         $Revision: 23873 $
  30      =3   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_SYSDEFS_H_
  34      =3  #define _ZW_SYSDEFS_H_
  35      =3  
  36      =3  /****************************************************************************/
  37      =3  /*                              INCLUDE FILES                               */
  38      =3  /****************************************************************************/
  39      =3  #include <ZW0x0x.h>
   1      =4  /***************************************************************************
   2      =4  *
   3      =4  * Copyright (c) 2001-2011
   4      =4  * Sigma Designs, Inc.
   5      =4  * All Rights Reserved
   6      =4  *
   7      =4  *---------------------------------------------------------------------------
   8      =4  *
   9      =4  * Description: Interface file for Inventra 8051 SFR defines.
  10      =4  *
  11      =4  * Author: Thomas Roll
  12      =4  *
  13      =4  * Last Changed By: $Author: jdo $
  14      =4  * Revision: $Revision: 1.38 $
  15      =4  * Last Changed: $Date: 2005/07/27 15:12:54 $
  16      =4  *
  17      =4  ****************************************************************************/
  18      =4  
  19      =4  
  20      =4  #ifndef _ZW0X0X_H_
  21      =4  #define _ZW0X0X_H_
  22      =4  
  23      =4  
  24      =4  #ifdef ZW040x
  27      =4  #include <ZW050x.h>
   1      =5  /*******************************  ZW050x.h  *****************************
   2      =5   *           #######
   3      =5   *           ##  ##
   4      =5   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =5   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =5   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =5   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =5   *          #######   ####   ##  ##  #####       ##  #####
   9      =5   *                                           #####
  10      =5   *          Products that speak Z-Wave work together better
  11      =5   *
  12      =5   *              Copyright (c) 2008
  13      =5   *              Zensys A/S
  14      =5   *              Denmark
  15      =5   *
  16      =5   *              All Rights Reserved
  17      =5   *
  18      =5   *    This source file is subject to the terms and conditions of the
  19      =5   *    Zensys Software License Agreement which restricts the manner
  20      =5   *    in which it may be used.
  21      =5   *
  22      =5   *---------------------------------------------------------------------------
  23      =5   *
  24      =5   * Description: Inventra 8051 SFR defines for the Z-Wave ZW050x RF transceiver.
  25      =5   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 705 

  26      =5   * Author:   Samer Seoud
  27      =5   *
  28      =5   * Last Changed By:  $Author: sse $
  29      =5   * Revision:         $Revision: 9285 $
  30      =5   * Last Changed:     $Date: 2007-09-11 16:07:39 +0200 (Tue, 11 Sep 2007) $
  31      =5   *
  32      =5   ****************************************************************************/
  33      =5  #ifndef _ZW050X_H_
  34      =5  #define _ZW050X_H_
  35      =5  
  36      =5  sfr SFRPAGE   = 0xFF;
  37      =5  sfr ACC       = 0xE0;
  38      =5  sfr SP        = 0x81;
  39      =5  sfr PCON      = 0x87;
  40      =5  sfr TCON      = 0x88;
  41      =5  sfr TMOD      = 0x89;
  42      =5  sfr TL0       = 0x8A;
  43      =5  sfr TL1       = 0x8B;
  44      =5  sfr TH0       = 0x8C;
  45      =5  sfr TH1       = 0x8D;
  46      =5  sfr IE        = 0xA8;
  47      =5  sfr IP        = 0xB8;
  48      =5  sfr PSW       = 0xD0;
  49      =5  sfr IE_1      = 0xE8;
  50      =5  sfr B         = 0xF0;
  51      =5  sfr IP1       = 0xF8;
  52      =5  sfr DPL       = 0x82;
  53      =5  sfr DPH       = 0x83;
  54      =5  sfr P0        = 0x80;
  55      =5  sfr P1        = 0x90;
  56      =5  sfr P2        = 0xA0;
  57      =5  sfr P3        = 0xB0;
  58      =5  sfr P0DIR     = 0xFD;
  59      =5  sfr P1DIR     = 0xC9;
  60      =5  sfr P2DIR     = 0xCA;
  61      =5  sfr P3DIR     = 0xCB;
  62      =5  
  63      =5  /******  BIT accessible Registers ******/
  64      =5  /*P0*/
  65      =5  sbit P0b0  = P0^0;
  66      =5  sbit P0b1  = P0^1;
  67      =5  sbit P0b2  = P0^2;
  68      =5  sbit P0b3  = P0^3;
  69      =5  sbit P0b4  = P0^4;
  70      =5  sbit P0b5  = P0^5;
  71      =5  sbit P0b6  = P0^6;
  72      =5  sbit P0b7  = P0^7;
  73      =5  
  74      =5  
  75      =5  /*P1*/
  76      =5  sbit P1b0  = P1^0;
  77      =5  sbit P1b1  = P1^1;
  78      =5  sbit P1b2  = P1^2;
  79      =5  sbit P1b3  = P1^3;
  80      =5  sbit P1b4  = P1^4;
  81      =5  sbit P1b5  = P1^5;
  82      =5  sbit P1b6  = P1^6;
  83      =5  sbit P1b7  = P1^7;
  84      =5  
  85      =5  /*P2*/
  86      =5  sbit P2b0  = P2^0;
  87      =5  sbit P2b1  = P2^1;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 706 

  88      =5  sbit P2b2  = P2^2;
  89      =5  sbit P2b3  = P2^3;
  90      =5  sbit P2b4  = P2^4;
  91      =5  sbit P2b5  = P2^5;
  92      =5  sbit P2b6  = P2^6;
  93      =5  sbit P2b7  = P2^7;
  94      =5  
  95      =5  /*P3*/
  96      =5  sbit P3b0  = P3^0;
  97      =5  sbit P3b1  = P3^1;
  98      =5  sbit P3b4  = P3^4;
  99      =5  sbit P3b5  = P3^5;
 100      =5  sbit P3b6  = P3^6;
 101      =5  sbit P3b7  = P3^7;
 102      =5  
 103      =5  /*  TCON  */
 104      =5  sbit TF1   = TCON^7;
 105      =5  sbit TR1   = TCON^6;
 106      =5  sbit TF0   = TCON^5;
 107      =5  sbit TR0   = TCON^4;
 108      =5  sbit IE1   = TCON^3;
 109      =5  sbit IT1   = TCON^2;
 110      =5  sbit IE0   = TCON^1;
 111      =5  sbit IT0   = TCON^0;
 112      =5  
 113      =5  /*IE*/
 114      =5  sbit EA     = IE^7;
 115      =5  sbit ES0    = IE^4;
 116      =5  sbit ET1    = IE^3;
 117      =5  sbit EX1    = IE^2;
 118      =5  sbit ET0    = IE^1;
 119      =5  sbit EX0    = IE^0;
 120      =5  
 121      =5  /*IP*/
 122      =5  sbit PS0    = IP^4;
 123      =5  sbit PT1    = IP^3;
 124      =5  sbit PX1    = IP^2;
 125      =5  sbit PT0    = IP^1;
 126      =5  sbit PX0    = IP^0;
 127      =5  
 128      =5  /*PSW*/
 129      =5  sbit CY    = PSW^7;
 130      =5  sbit AC    = PSW^6;
 131      =5  sbit F0    = PSW^5;
 132      =5  sbit RS1   = PSW^4;
 133      =5  sbit RS0   = PSW^3;
 134      =5  sbit OV    = PSW^2;
 135      =5  sbit FL    = PSW^1;
 136      =5  sbit P     = PSW^0;
 137      =5  
 138      =5  /*IE_1*/
 139      =5  sbit ESPI0   = IE_1^7;
 140      =5  sbit EIR     = IE_1^6;
 141      =5  sbit EUSB    = IE_1^5;
 142      =5  sbit ES1     = IE_1^4;
 143      =5  sbit EADC    = IE_1^2;
 144      =5  sbit EGPT    = IE_1^1;
 145      =5  sbit ETRI    = IE_1^0;
 146      =5  
 147      =5  /*IP1*/
 148      =5  sbit PSPI0    = IP1^7;
 149      =5  sbit PIR      = IP1^6;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 707 

 150      =5  sbit PUSB     = IP1^5;
 151      =5  sbit PS1      = IP1^4;
 152      =5  sbit PADC     = IP1^2;
 153      =5  sbit PGPT     = IP1^1;
 154      =5  sbit PTRI     = IP1^0;
 155      =5  
 156      =5  /*SFR registers page select defines*/
 157      =5  #define P0_PAGE    /* ANY */
 158      =5  #define P1_PAGE    /* ANY */
 159      =5  #define P2_PAGE    /* ANY */
 160      =5  #define P3_PAGE    /* ANY */
 161      =5  // Auto-generated vvvvvvvvvvv
 162      =5  #define P0DIR_PAGE SFRPAGE=0x01
 163      =5  #define P1DIR_PAGE SFRPAGE=0x01
 164      =5  #define P2DIR_PAGE SFRPAGE=0x01
 165      =5  #define P3DIR_PAGE SFRPAGE=0x01
 166      =5    // Auto-generated ^^^^^^^^^^^^^^^^^^
 167      =5  #define IP1_PAGE   /* ANY */
 168      =5  #define B_PAGE     /* ANY */
 169      =5  #define IE1_PAGE   /* ANY */
 170      =5  #define A_PAGE     /* ANY */
 171      =5  #define PSW_PAGE   /* ANY */
 172      =5  #define IP_PAGE    /* ANY */
 173      =5  #define IE_PAGE    /* ANY */
 174      =5  #define P1_PAGE    /* ANY */
 175      =5  #define TH1_PAGE   /* ANY */
 176      =5  #define TH0_PAGE   /* ANY */
 177      =5  #define TL1_PAGE   /* ANY */
 178      =5  #define TL0_PAGE   /* ANY */
 179      =5  #define TMOD_PAGE  /* ANY */
 180      =5  #define TCON_PAGE  /* ANY */
 181      =5  #define PCON_PAGE  /* ANY */
 182      =5  #define DPH_PAGE   /* ANY */
 183      =5  #define DPL_PAGE   /* ANY */
 184      =5  #define SP_PAGE    /* ANY */
 185      =5  #define P0_PAGE    /* ANY */
 186      =5  
 187      =5  /*SFR registers bit defines*/
 188      =5  #define P0_BITS                        0xFF
 189      =5  #define P1_BITS                        0xFF
 190      =5  #define P2_BITS                        0xFF
 191      =5  #define P3_H_BITS                      0xF0
 192      =5  #define P3_RESERVED_BITS               0x0C
 193      =5  #define P3_L_BITS                      0x03
 194      =5  #define SFRPAGE_RESERVED_BITS          0xFC
 195      =5  #define SFRPAGE_BITS                   0x03
 196      =5  
 197      =5  /* SFR macros. Sets correct page */
 198      =5  #define SFR_SET(r,v) {r##_PAGE;r=v;}
 199      =5  #define SFR_SET_MASK(r,v,m) {r##_PAGE;r=((r##)&~(m##))|((v##)&(m##));}
 200      =5  #define SFR_GET(d,r) {r##_PAGE;d=r;}
 201      =5  #define SFR_GET_MASK(d,v,r) {r##_PAGE;d=((r)&(v));}
 202      =5  #define SFR_OR(r,v) {r##_PAGE;r=(r|v);}
 203      =5  #define SFR_AND(r,v) {r##_PAGE;r=(r&v);}
 204      =5  
 205      =5  
 206      =5  
 207      =5  //ISR servicing external 0
 208      =5  #define INUM_INT0    0
 209      =5  
 210      =5  //ISR servicing timer 0
 211      =5  #define INUM_TIMER0  1
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 708 

 212      =5  
 213      =5  //ISR servicing external 1
 214      =5  #define INUM_INT1    2
 215      =5  
 216      =5  //ISR servicing timer 1
 217      =5  #define INUM_TIMER1  3
 218      =5  
 219      =5  //ISR servicing serial port 0
 220      =5  #define INUM_SERIAL0 4
 221      =5  
 222      =5  //INUM servicing TRIAC
 223      =5  #define INUM_TRIAC   6
 224      =5  
 225      =5  //ISR servicing general purpose timer
 226      =5  #define INUM_GP_TIMER  7
 227      =5  
 228      =5  //ISR servicing ADC
 229      =5  #define INUM_ADC 8
 230      =5  
 231      =5  
 232      =5  //ISR servicing serial port 1
 233      =5  #define INUM_SERIAL1 10
 234      =5  
 235      =5  //ISR servicing USB
 236      =5  #define INUM_USB 11
 237      =5  
 238      =5  //ISR servicing IR
 239      =5  #define INUM_IR 12
 240      =5  
 241      =5  //ISR servicing SPI0
 242      =5  #define INUM_SPI0 13
 243      =5  
 244      =5  //NMI servicing NMI
 245      =5  #define INUM_NMI 14
 246      =5  
 247      =5  #endif /* _ZW050X_H_ */
  28      =4  #endif
  29      =4  
  30      =4  #endif /* _ZW0X0X_H_ */
  40      =3  
  41      =3  #define __flash code
  42      =3  
  43      =3  /****************************************************************************/
  44      =3  /*                     EXPORTED TYPES and DEFINITIONS                       */
  45      =3  /****************************************************************************/
  46      =3  
  47      =3  /* Reference frequency */
  48      =3  #define CPU_FREQ  32000000
  49      =3  
  50      =3  #endif /* _ZW_SYSDEFS_H_ */
  32      =2  #include <ZW_stdint.h>
   1      =3  /*
   2      =3   * ZW_stdint.h
   3      =3   *
   4      =3   * Define integer types by their conventional POSIX names [1].
   5      =3   * Note: This is a small subset of the spec, NOT a complete definition.
   6      =3   *
   7      =3   *  [1] http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html
   8      =3   *
   9      =3   *  Created on: 18/01/2013
  10      =3   *      Author: jbu
  11      =3   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 709 

  12      =3  #ifndef ZW_STDINT_H_
  33      =2  
  34      =2  #include <ZW_transport_api.h>
   1      =3  /****************************************************************************
   2      =3   *
   3      =3   * Copyright (c) 2001-2013
   4      =3   * Sigma Designs, Inc.
   5      =3   * All Rights Reserved
   6      =3   *
   7      =3   *---------------------------------------------------------------------------
   8      =3   *
   9      =3   * Description: Z-Wave Transport Application layer interface
  10      =3   *
  11      =3   * Author:   Ivar Jeppesen
  12      =3   *
  13      =3   * Last Changed By:  $Author: jsi $
  14      =3   * Revision:         $Revision: 31344 $
  15      =3   * Last Changed:     $Date: 2015-04-17 13:53:23 +0200 (fr, 17 apr 2015) $
  16      =3   *
  17      =3   ****************************************************************************/
  18      =3  /**
  19      =3   * \file ZW_transport_api.h
  20      =3   * \brief Z-Wave Transport Application layer interface.
  21      =3   *
  22      =3   * The Z Wave transport layer controls transfer of data between Z Wave nodes
  23      =3   * including retransmission, frame check and acknowledgement. The Z Wave
  24      =3   * transport interface includes functions for transfer of data to other Z Wave
  25      =3   * nodes. Application data received from other nodes is handed over to the
  26      =3   * application via the \ref ApplicationCommandHandler function. The ZW_MAX_NODES
  27      =3   * define defines the maximum of nodes possible in a Z Wave network.
  28      =3   */
  29      =3  #ifndef _ZW_TRANSPORT_API_H_
 793      =3  
  35      =2  
  36      =2  #include <ZW_timer_api.h>
   1      =3  /*******************************  ZW_TIMER_API.H  ***************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Z-Wave, the wireless lauguage.
  11      =3   *
  12      =3   *              Copyright (c) 2001
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Timer service functions that handle delayed functions calls.
  25      =3   *              The time base is around 10 msec.
  26      =3   *
  27      =3   * Author:   Ivar Jeppesen
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 710 

  28      =3   *
  29      =3   * Last Changed By:  $Author: jsi $
  30      =3   * Revision:         $Revision: 29378 $
  31      =3   * Last Changed:     $Date: 2014-07-18 16:41:06 +0200 (fr, 18 jul 2014) $
  32      =3   *
  33      =3   ****************************************************************************/
  34      =3  #ifndef _ZW_TIMER_API_H_
  35      =3  #define _ZW_TIMER_API_H_
  36      =3  
  37      =3  /****************************************************************************/
  38      =3  /*                              INCLUDE FILES                               */
  39      =3  /****************************************************************************/
  40      =3  
  41      =3  
  42      =3  /****************************************************************************/
  43      =3  /*                     EXPORTED TYPES and DEFINITIONS                       */
  44      =3  /****************************************************************************/
  45      =3  /* One second timeout for 10ms timer */
  46      =3  #define TIMER_ONE_SECOND   100
  47      =3  
  48      =3  /* One time timer */
  49      =3  #define TIMER_ONE_TIME     0
  50      =3  #define TIMER_FOREVER      (BYTE)-1
  51      =3  
  52      =3  /* Long timer handle definition */
  53      =3  typedef BYTE bTimerHandle_t;
  54      =3  
  55      =3  
  56      =3  /******************************  Timer **************************************
  57      =3  ** Timer service functions that handle delayed functions calls.
  58      =3  ** The time base is around 10 msec.
  59      =3  **/
  60      =3  
  61      =3  /*================================   TimerStart   ============================
  62      =3  **    Register a function that is called when the specified time has elapsed.
  63      =3  **    The function is called "repeats" times before the timer is stopped.
  64      =3  **
  65      =3  ** BYTE              RET Timer handle ( 1 to XX if success, 0xFF if failed)
  66      =3  ** TimerStart(
  67      =3  ** VOID_CALLBACKFUNC(func)(),   IN  Timeout function adddress
  68      =3  ** BYTE timerTicks,  IN  Timeout value (value * 10 msec.)
  69      =3  ** BYTE repeats);    IN  Number of function calls (-1: forever)
  70      =3  **--------------------------------------------------------------------------*/
  71      =3  #define ZW_TIMER_START(func,ticks,repeats) TimerStart(func,ticks,repeats)
  72      =3  
  73      =3  /*================================   TimerRestart  ===========================
  74      =3  **    Set the specified timer back to the initial value.
  75      =3  **
  76      =3  ** BYTE               RET TRUE if timer restarted
  77      =3  ** TimerRestart(
  78      =3  ** BYTE timerHandle); IN  Timer number to restart
  79      =3  **--------------------------------------------------------------------------*/
  80      =3  #define ZW_TIMER_RESTART(handle) TimerRestart(handle)
  81      =3  
  82      =3  /*================================   TimerCancel   ===========================
  83      =3  **    Stop the specified timer.
  84      =3  **      0 and 0xFF indicates no timer running.. This is acceptable
  85      =3  ** BYTE               RET TRUE if timer cancelled
  86      =3  ** TimerCancel(
  87      =3  ** BYTE timerHandle); IN  Timer number to stop
  88      =3  **--------------------------------------------------------------------------*/
  89      =3  #define ZW_TIMER_CANCEL(handle) TimerCancel(handle)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 711 

  90      =3  
  91      =3  
  92      =3  /****************************************************************************/
  93      =3  /*                              EXPORTED DATA                               */
  94      =3  /****************************************************************************/
  95      =3  
  96      =3  /****************************************************************************/
  97      =3  /*                           EXPORTED FUNCTIONS                             */
  98      =3  /****************************************************************************/
  99      =3  
 100      =3  /*================================   TimerStart   ============================
 101      =3  **    Register a function that is called when the specified time has elapsed.
 102      =3  **    The function is called "repeats" times before the timer is stopped.
 103      =3  **
 104      =3  **--------------------------------------------------------------------------*/
 105      =3  extern  BYTE              /*RET Timer handle                     */
 106      =3  TimerStart(
 107      =3  VOID_CALLBACKFUNC(func)(),      /*IN  Timeout function address          */
 108      =3  BYTE timerTicks,          /*IN  Timeout value (value * 10 msec.)  */
 109      =3  BYTE repeats);            /*IN  Number of function calls (-1: forever)  */
 110      =3  
 111      =3  /*================================   TimerRestart  ===========================
 112      =3  **    Set the specified timer back to the initial value.
 113      =3  **
 114      =3  **--------------------------------------------------------------------------*/
 115      =3  extern  BYTE              /*RET TRUE if timer restarted   */
 116      =3  TimerRestart(
 117      =3  BYTE timerHandle);        /*IN  Timer number to restart   */
 118      =3  
 119      =3  /*================================   TimerCancel   ===========================
 120      =3  **    Stop the specified timer.
 121      =3  **
 122      =3  **--------------------------------------------------------------------------*/
 123      =3  extern  BYTE              /*RET TRUE if timer cancelled   */
 124      =3  TimerCancel(
 125      =3  BYTE timerHandle);        /*IN  Timer number to stop      */
 126      =3  
 127      =3  
 128      =3  /**
 129      =3   *
 130      =3   */
 131      =3  BYTE
 132      =3  ZW_TimerLongRestart(
 133      =3    bTimerHandle_t bTimerHandle);
 134      =3  
 135      =3  
 136      =3  /**
 137      =3   *
 138      =3   */
 139      =3  BYTE
 140      =3  ZW_TimerLongCancel(
 141      =3    bTimerHandle_t bTimerHandle);
 142      =3  
 143      =3  
 144      =3  /**
 145      =3   *
 146      =3   */
 147      =3  bTimerHandle_t
 148      =3  ZW_TimerLongStart(
 149      =3    VOID_CALLBACKFUNC(func)(),
 150      =3    DWORD dwtimerTicks,
 151      =3    BYTE brepeats);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 712 

 152      =3  
 153      =3  /**
 154      =3   * Given a timer handle this function returns the time left.
 155      =3   * @param bTimerHandle Timer handle.
 156      =3   * @return Returns the time left in ms.
 157      =3   */
 158      =3  DWORD
 159      =3  ZW_TimerLongGetTimeLeft(
 160      =3    bTimerHandle_t bTimerHandle);
 161      =3  
 162      =3  
 163      =3  /**
 164      =3   * Returns number of free application timers
 165      =3   *
 166      =3   */
 167      =3  BYTE
 168      =3  ZW_TimerGetFree();
 169      =3  
 170      =3  
 171      =3  /*================================   getTickTime   ===========================
 172      =3  **    Get the value of freerunning WORD tickTime 10ms ticks in a safe way.
 173      =3  **--------------------------------------------------------------------------*/
 174      =3  extern WORD
 175      =3  getTickTime();
 176      =3  
 177      =3  /*===========================   getTickTimePassed   ==========================
 178      =3  **    Get passed tickTime ticks since wStartTickTime.
 179      =3  **
 180      =3  ** Only usefull if passed tickTime ticks never exceeds 0xFFFF (65535) as
 181      =3  ** passed tickTime ticks are calculated using a WORD sized free running
 182      =3  ** 10ms tick counter.
 183      =3  ** - Max passed tickTime ticks = 65535 * 10ms = 655.35s = 10m 55.35s
 184      =3  **
 185      =3  **--------------------------------------------------------------------------*/
 186      =3  extern WORD
 187      =3  getTickTimePassed(
 188      =3    WORD wStartTickTime);
 189      =3  
 190      =3  
 191      =3  #endif /* _ZW_TIMER_API_H_ */
  37      =2  #include <ZW_mem_api.h>
   1      =3  /*******************************  ZW_MEM_API.H  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Z-Wave, the wireless lauguage.
  11      =3   *
  12      =3   *              Copyright (c) 2001
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 713 

  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Copy of data to/from non-volatile memory (EEPROM)
  25      =3   *              Standard memory functions.
  26      =3   *
  27      =3   * Author:   Ivar Jeppesen
  28      =3   *
  29      =3   * Last Changed By:  $Author: efh $
  30      =3   * Revision:         $Revision: 29682 $
  31      =3   * Last Changed:     $Date: 2014-10-06 15:12:09 +0200 (ma, 06 okt 2014) $
  32      =3   *
  33      =3   ****************************************************************************/
  34      =3  #ifndef _ZW_MEM_API_H_
  35      =3  #define _ZW_MEM_API_H_
  36      =3  
  37      =3  /****************************************************************************/
  38      =3  /*                              INCLUDE FILES                               */
  39      =3  /****************************************************************************/
  40      =3  #include <ZW_typedefs.h>
   1      =4  /*******************************  ZW_typedefs.h  *******************************
   2      =4   *           #######
   3      =4   *           ##  ##
   4      =4   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =4   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =4   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =4   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =4   *          #######   ####   ##  ##  #####       ##  #####
   9      =4   *                                           #####
  10      =4   *          Products that speak Z-Wave work together better
  11      =4   *
  12      =4   *              Copyright (c) 2008
  13      =4   *              Zensys A/S
  14      =4   *              Denmark
  15      =4   *
  16      =4   *              All Rights Reserved
  17      =4   *
  18      =4   *    This source file is subject to the terms and conditions of the
  19      =4   *    Zensys Software License Agreement which restricts the manner
  20      =4   *    in which it may be used.
  21      =4   *
  22      =4   *---------------------------------------------------------------------------
  23      =4   *
  24      =4   * Description: Module description
  25      =4   *
  26      =4   * Author:   Ivar Jeppesen
  27      =4   *
  28      =4   * Last Changed By:  $Author: efh $
  29      =4   * Revision:         $Revision: 29359 $
  30      =4   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =4   *
  32      =4   ****************************************************************************/
  33      =4  #ifndef _ZW_TYPEDEFS_H_
  41      =3  
  42      =3  #ifdef NO_MEM_FUNCTIONS
  45      =3  #define memcpy(dst, src, len)  __ZW_memcpy(len, dst, src)
  46      =3  #define memcmp(dst, src, len)  __ZW_memcmp(len, dst, src)
  47      =3  #define memset(dst, val, len)  __ZW_memset(val, len, dst)
  48      =3  #endif
  49      =3  #define ZW_memcpy(dst, src, len)  __ZW_memcpy(len, dst, src)
  50      =3  #define ZW_memcmp(dst, src, len)  __ZW_memcmp(len, dst, src)
  51      =3  #define ZW_memset(dst, val, len)  __ZW_memset(val, len, dst)
  52      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 714 

  53      =3  /****************************************************************************/
  54      =3  /*                     EXPORTED TYPES and DEFINITIONS                       */
  55      =3  /****************************************************************************/
  56      =3  /****************************  Memory  **************************************
  57      =3  ** Copy of data to non-volatile memory (FLASH) only valid for slave and
  58      =3  ** slave_routing libraries
  59      =3  **
  60      =3  **  Side effects: The non-volatile memory write operation is delayed via a timer.
  61      =3  **                The physical write is delayed about 200 msec.
  62      =3  **/
  63      =3  
  64      =3  /*============================   MemoryGetID   ===============================
  65      =3  **  Copy the Home-ID and Node-ID to the specified RAM addresses
  66      =3  **  BYTE *homeid pointer to RAM were the home ID should be placed
  67      =3  **  BYTE *nodeid pointer to RAM were the Node ID should be placed.
  68      =3  **--------------------------------------------------------------------------*/
  69      =3  #define ZW_MEMORY_GET_ID(homeid,nodeid)   MemoryGetID(homeid,nodeid)
  70      =3  
  71      =3  /*============================   MemoryGetByte   ============================
  72      =3  **    Read one byte from the EEPROM
  73      =3  **
  74      =3  ** BYTE               RET Data
  75      =3  ** MemoryGetByte(
  76      =3  ** WORD  offset );    IN   Application area offset
  77      =3  **--------------------------------------------------------------------------*/
  78      =3  #define ZW_MEM_GET_BYTE(offset) MemoryGetByte(offset)
  79      =3  
  80      =3  /*============================   MemoryPutByte   ============================
  81      =3  **    Write one byte to the EEPROM
  82      =3  **
  83      =3  ** BYTE               RET False if write buffer full
  84      =3  ** MemoryPutByte(
  85      =3  ** WORD  offset,      IN   Application area offset
  86      =3  ** BYTE  data );      IN   Data to store
  87      =3  **--------------------------------------------------------------------------*/
  88      =3  #define ZW_MEM_PUT_BYTE(offset,data) MemoryPutByte(offset,data)
  89      =3  
  90      =3  /*============================   MemoryGetBuffer   =============================
  91      =3  **    Read number of bytes from the EEPROM to a RAM buffer
  92      =3  **
  93      =3  ** void               RET Nothing
  94      =3  ** MemoryGetBuffer(
  95      =3  ** WORD  offset,      IN   Application area offset
  96      =3  ** BYTE  *buffer,     IN   Buffer pointer
  97      =3  ** WORD  length );    IN   Number of bytes to read
  98      =3  **--------------------------------------------------------------------------*/
  99      =3  #define ZW_MEM_GET_BUFFER(offset,buffer,length) MemoryGetBuffer(offset,buffer,length)
 100      =3  
 101      =3  /*============================   MemoryPutBuffer   =============================
 102      =3  **    Copy number of bytes from a RAM buffer to the EEPROM
 103      =3  **
 104      =3  **  Side effects: The EEPROM write operation has been done when function returns
 105      =3  **                and the callback is called max 10ms later via a timer
 106      =3  **
 107      =3  ** BYTE               RET FALSE if the buffer put queue is full
 108      =3  ** MemoryPutBuffer(
 109      =3  ** WORD  offset,          IN   Application area offset
 110      =3  ** BYTE  *buffer,         IN   Buffer pointer
 111      =3  ** WORD  length,          IN   Number of bytes to read
 112      =3  ** VOID_CALLBACKFUNC(func)( void) ); IN   Buffer write completed function pointer
 113      =3  **--------------------------------------------------------------------------*/
 114      =3  #define ZW_MEM_PUT_BUFFER(offset,buffer,length, func) MemoryPutBuffer(offset,buffer,length, func)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 715 

 115      =3  
 116      =3  
 117      =3  /*============================   ZW_MemoryPutBuffer   ========================
 118      =3  **    Copy number of bytes from a RAM buffer to the EEPROM
 119      =3  **
 120      =3  **  Side effects: The EEPROM write operation has been done when function returns
 121      =3  **                and the callback is called max 10ms later via a timer
 122      =3  **
 123      =3  ** BYTE               RET FALSE if the buffer put queue is full
 124      =3  ** ZW_MemoryPutBuffer(
 125      =3  ** WORD  offset,          IN   Application area offset
 126      =3  ** BYTE  length,          IN   Number of bytes to write
 127      =3  ** BYTE  *buffer,         IN   Buffer pointer
 128      =3  **--------------------------------------------------------------------------*/
 129      =3  #define ZW_MEM_PUT_BUFFER_NO_CB(offset,buffer,length) ZW_MemoryPutBuffer(offset,buffer,length)
 130      =3  
 131      =3  
 132      =3  /*===============================   ZW_EepromInit   ====================================
 133      =3  ** This function writes ZEROs in the entire EEPROM, then it write the homeID
 134      =3  ** if it different from ZERO. This function will only operate in the production mode.
 135      =3  **-----------------------------------------------------------------------------------*/
 136      =3  #define ZW_EEPROM_INIT(HOMEID)       ZW_EepromInit(HOMEID)
 137      =3  
 138      =3  /*============================   MemoryFlush   =============================
 139      =3  **    Write the content of the FLASH RAM buffer to the FLASH.
 140      =3  **
 141      =3  **  Side effects: During the write process the CPU wuill be in idle state.
 142      =3  **--------------------------------------------------------------------------*/
 143      =3  #define ZW_MEM_FLUSH()   ZW_MemoryFlush()
 144      =3  
 145      =3  
 146      =3  /****************************************************************************/
 147      =3  /*                              EXPORTED DATA                               */
 148      =3  /****************************************************************************/
 149      =3  
 150      =3  /****************************************************************************/
 151      =3  /*                           LOW LEVEL EXPORTED FUNCTIONS                   */
 152      =3  /****************************************************************************/
 153      =3  
 154      =3  
 155      =3  /****************************************************************************/
 156      =3  /*                           EXPORTED FUNCTIONS                             */
 157      =3  /****************************************************************************/
 158      =3  
 159      =3  /*============================   MemoryGetID   ===============================
 160      =3  **    Copy the Home-ID and Node-ID to the specified RAM addresses
 161      =3  **
 162      =3  **--------------------------------------------------------------------------*/
 163      =3  extern void               /*RET Nothing          */
 164      =3  MemoryGetID(
 165      =3    BYTE *homeID,           /*OUT  Home-ID pointer            */
 166      =3    BYTE *nodeID );         /*OUT  Node-ID pointer            */
 167      =3  
 168      =3  /*============================   MemoryGetByte   =============================
 169      =3  **  Read one byte from the EEPROM
 170      =3  **
 171      =3  **  Side effects:
 172      =3  **--------------------------------------------------------------------------*/
 173      =3  extern BYTE               /*RET Data          */
 174      =3  MemoryGetByte(
 175      =3    WORD  offset );         /*IN   Application area offset            */
 176      =3  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 716 

 177      =3  /*============================   MemoryPutByte   =============================
 178      =3  **  Add one byte to the EEPROM write queue
 179      =3  **
 180      =3  **  Side effects:
 181      =3  **
 182      =3  **--------------------------------------------------------------------------*/
 183      =3  extern BYTE               /*RET FALSE if write buffer full    */
 184      =3  MemoryPutByte(
 185      =3    WORD  offset,           /*IN   Application area offset   */
 186      =3    BYTE  bData );          /*IN   Data to store             */
 187      =3  
 188      =3  /*============================   MemoryGetBuffer   =============================
 189      =3  **    Read number of bytes from the EEPROM to a RAM buffer
 190      =3  **
 191      =3  **  Side effects:
 192      =3  **  Note: API is not supported in 400 series slave and routing slave targets
 193      =3  **--------------------------------------------------------------------------*/
 194      =3  extern void               /*RET Nothing          */
 195      =3  MemoryGetBuffer(
 196      =3    WORD  offset,           /*IN   Application area offset   */
 197      =3    BYTE  *buffer,          /*IN   Buffer pointer            */
 198      =3    BYTE  length );         /*IN   Number of bytes to read  */
 199      =3  
 200      =3  /*============================   MemoryPutBuffer   =============================
 201      =3  **    Copy number of bytes from a RAM buffer to the EEPROM
 202      =3  **
 203      =3  **  Side effects: Write has been executed when function returns and callback
 204      =3  **                is called via a timer max 10ms later
 205      =3  **  Note: API is not supported in 400 series slave and routing slave targets
 206      =3  **--------------------------------------------------------------------------*/
 207      =3  extern BYTE               /*RET FALSE if the buffer put queue is full          */
 208      =3  MemoryPutBuffer(
 209      =3    WORD  offset,           /*IN   Application area offset   */
 210      =3    BYTE  *buffer,          /*IN   Buffer pointer            */
 211      =3    WORD  length,           /*IN   Number of bytes to copy   */
 212      =3    VOID_CALLBACKFUNC(func)( void) );  /*IN   Buffer write completed function pointer */
 213      =3  
 214      =3  
 215      =3  /*==========================   ZW_MemoryPutBuffer   ==========================
 216      =3  **    Copy number of bytes from a RAM buffer to the EEPROM
 217      =3  **
 218      =3  **  Side effects: Write has been executed when function returns
 219      =3  **  Note: API is not supported in 400 series slave and routing slave targets
 220      =3  **--------------------------------------------------------------------------*/
 221      =3  extern BYTE               /*RET FALSE if the buffer put queue is full       */
 222      =3  ZW_MemoryPutBuffer(
 223      =3    WORD  offset,           /* IN Application area offset   */
 224      =3    BYTE  *buffer,          /* IN Buffer pointer            */
 225      =3    WORD  length);          /* IN Number of bytes to copy   */
 226      =3  
 227      =3  
 228      =3  /*===========================   MemoryGetStatus   ============================
 229      =3  **  Read status from the NVM
 230      =3  **
 231      =3  **  Side effects:
 232      =3  **--------------------------------------------------------------------------*/
 233      =3  extern BYTE               /*RET Data FALSE = 0 = OK, TRUE = 1 = read operation disturbed */
 234      =3  MemoryGetStatus(void);    /*IN  none          */
 235      =3  
 236      =3  /*==========================   MemoryClearStatus   ===========================
 237      =3  **  Clear status for the NVM
 238      =3  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 717 

 239      =3  **  Side effects:
 240      =3  **--------------------------------------------------------------------------*/
 241      =3  extern void               /*RET none          */
 242      =3  MemoryClearStatus(void);  /*IN  none          */
 243      =3  
 244      =3  /*=============================   ZW_memcpy   ===============================
 245      =3  **    Copies length bytes from src to dst
 246      =3  **
 247      =3  **--------------------------------------------------------------------------*/
 248      =3  extern void       /* RET  Nothing */
 249      =3  __ZW_memcpy(
 250      =3    BYTE length,    /* IN   Number of bytes to copy */
 251      =3    BYTE *dst,      /* IN   Pointer to destination */
 252      =3    BYTE *src);     /* IN   Pointer to source */
 253      =3  
 254      =3  
 255      =3  /*=============================   ZW_memcmp   ===============================
 256      =3  **    Compares length bytes of src and dest
 257      =3  **
 258      =3  **--------------------------------------------------------------------------*/
 259      =3  extern BYTE       /* RET  0 if *src and *dst are equal, else 1 */
 260      =3  __ZW_memcmp(
 261      =3    BYTE length,    /* IN   Number of bytes to compare */
 262      =3    BYTE *dst,      /* IN   Pointer to buffer 1 */
 263      =3    BYTE *src);     /* IN   Pointer to buffer 2 */
 264      =3  
 265      =3  
 266      =3  /*===============================   ZW_memset   ==============================
 267      =3  **    Fill length bytes in dst with val
 268      =3  **
 269      =3  **--------------------------------------------------------------------------*/
 270      =3  void           /*RET Nothing */
 271      =3  __ZW_memset(
 272      =3    BYTE val,    /* IN Value to fill buffer with */
 273      =3    BYTE length, /* IN Number of bytes to set */
 274      =3    BYTE *dst);  /* IN Pointer to buffer to set/fill */
 275      =3  
 276      =3  
 277      =3  #ifdef NVM_IS_EEPROM
 285      =3  
 286      =3  //#ifdef NVM_IS_FLASH
 287      =3  // NVM_IS_FLASH is defined in ZW_nvm_addr.h, which is not included by ZW_mem_api.h
 288      =3  // As ZW_nvm_addr.h is a basis-include, it cannot be used by an application.
 289      =3  #if defined(ZW_SLAVE_ROUTING) && !defined(ZW_SLAVE_32)
 298      =3  
 299      =3  #endif /* _ZW_MEM_API_H_ */
  38      =2  
  39      =2  #include <ZW_classcmd.h>
   1      =3  // Generated on: 04.08.2017 15:17:23
   2      =3  /*******************************  ZW_classcmd.h  *******************************
   3      =3   *
   4      =3   * Copyright (c) 2001-2016
   5      =3   * Sigma Designs, Inc.
   6      =3   * All Rights Reserved
   7      =3   *
   8      =3   *---------------------------------------------------------------------------
   9      =3   *
  10      =3   * Description: Device and command class types and definitions.
  11      =3   *
  12      =3   *              Be aware that temporary types and definitions can be present
  13      =3   *              in this header file. Only the types and definitions found in
  14      =3   *              the latest version of the Z-Wave Device Class Specification
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 718 

  15      =3   *              (doc. nr. 9031002xx) is valid.
  16      =3   *
  17      =3   * Author: JÑrgen Franck
  18      =3   *
  19      =3   * Last Changed By:  $Author: sro $
  20      =3   * Revision:         $Revision: 35619 $
  21      =3   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =3   *
  23      =3   ****************************************************************************/
  24      =3  #ifndef _ZW_CLASSCMD_H_
  40      =2  
  41      =2  /**
  42      =2   * \defgroup COMMON Z-Wave Common API
  43      =2   * This section describes interface functions that are implemented within all Z Wave nodes.
  44      =2   * The first subsection defines functions that must be implemented within the application
  45      =2   * modules, while the second subsection defines the functions that are implemented within
  46      =2   * the Z Wave basis library.
  47      =2   * Functions that do not complete the requested action before returning to the application
  48      =2   *  (e.g. ZW_SEND_DATA) have a callback function pointer as one of the entry parameters.
  49      =2   *  Unless explicitly specified this function pointer can be set to NULL (no action to take on completion)
             -.
  50      =2   *
  51      =2   *
  52      =2   * \defgroup BASIS Z-Wave Basis API
  53      =2   * This section defines functions that are implemented in all Z Wave nodes.
  54      =2   */
  55      =2  
  56      =2  /* ZW_GetProtocolStatus retrun value masks*/
  57      =2  #define ZW_PROTOCOL_STATUS_ROUTING  0x01
  58      =2  #define ZW_PROTOCOL_STATUS_SUC      0x02
  59      =2  
  60      =2  /* ZW_LIBRARY_TYPEs one of these defines are returned when requesting */
  61      =2  /* Library type */
  62      =2  #define ZW_LIB_CONTROLLER_STATIC  0x01
  63      =2  #define ZW_LIB_CONTROLLER         0x02
  64      =2  #define ZW_LIB_SLAVE_ENHANCED     0x03
  65      =2  #define ZW_LIB_SLAVE              0x04
  66      =2  #define ZW_LIB_INSTALLER          0x05
  67      =2  #define ZW_LIB_SLAVE_ROUTING      0x06
  68      =2  #define ZW_LIB_CONTROLLER_BRIDGE  0x07
  69      =2  #define ZW_LIB_DUT                0x08
  70      =2  #define ZW_LIB_AVREMOTE           0x0A
  71      =2  #define ZW_LIB_AVDEVICE           0x0B
  72      =2  
  73      =2  /* ZW_PROTOCOL_TYPE one of these are returned when requesting */
  74      =2  /* Protocol type */
  75      =2  typedef enum _PROTOCOL_TYPE_
  76      =2  {
  77      =2    Z_WAVE,
  78      =2    Z_WAVE_AV,
  79      =2    Z_WAVE_FOR_IP
  80      =2  } PROTOCOL_TYPE;
  81      =2  
  82      =2  /*This bit mask used as paramters for the API ZW_SetSleepMode to indicate which interrupt to mask out*/
  83      =2  #define ZW_INT_MASK_EXT1       0x02
  84      =2  
  85      =2  #define ZW_AV_VERSION_MAJOR       1
  86      =2  #define ZW_AV_VERSION_MINOR       0
  87      =2  
  88      =2  #ifdef ZW_BETA_RELEASE
  91      =2  
  92      =2  /* Z-Wave Library Chip type */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 719 

  93      =2  #define ZW_CHIP_TYPE              5
  94      =2  #define ZW_CHIP_REVISION          0
  95      =2  
  96      =2  
  97      =2  #ifdef APP_RF_NOTIFY
 100      =2  
 101      =2  #if defined(LIB_RF_NOTIFY)
 108      =2  
 109      =2  /* Interrupt defines for ZW_SetExtIntLevel() */
 110      =2  #define ZW_INT0     0x00
 111      =2  #define ZW_INT1     0x01
 112      =2  
 113      =2  /****************************************************************************/
 114      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
 115      =2  /****************************************************************************/
 116      =2  #ifdef ZW_3CH_SYSTEM
 119      =2  #define NUM_CHANNELS 2
 120      =2  #endif
 121      =2  #define NUM_CHANNELS_2CH 2
 122      =2  #define NUM_CHANNELS_3CH 3
 123      =2  #define NUM_CHANNELS_MAX 3
 124      =2  
 125      =2  /* Node type structure used in ApplicationNodeInformation */
 126      =2  typedef struct _APPL_NODE_TYPE_
 127      =2  {
 128      =2    BYTE generic;
 129      =2    BYTE specific;
 130      =2  } APPL_NODE_TYPE;
 131      =2  
 132      =2  typedef struct _NODE_TYPE_
 133      =2  {
 134      =2    BYTE basic;                 /* Basic Device Type, is it a Controller, Controller_Static, */
 135      =2                                /* Slave or a Slave_Routing Device Type */
 136      =2    BYTE generic;               /* Generic Device Type */
 137      =2    BYTE specific;              /* Specific Device Type */
 138      =2  } NODE_TYPE;
 139      =2  
 140      =2  
 141      =2  /* Node info stored within the non-volatile memory */
 142      =2  /* This are the first (protocol part) payload bytes from the Node Infomation frame */
 143      =2  typedef struct _NODEINFO_
 144      =2  {
 145      =2    BYTE        capability;     /* Network capabilities */
 146      =2    BYTE        security;       /* Network security */
 147      =2    BYTE        reserved;
 148      =2    NODE_TYPE   nodeType;       /* Basic, Generic and Specific Device types - Basic is generated... */
 149      =2  } NODEINFO;
 150      =2  
 151      =2  
 152      =2  /* valid powerlevel values used in ZW_RF_POWERLEVEL_SET and ZW_RF_POWERLEVEL_GET */
 153      =2  enum
 154      =2  {
 155      =2    normalPower = 0,
 156      =2    minus1dBm,
 157      =2    minus2dBm,
 158      =2    minus3dBm,
 159      =2    minus4dBm,
 160      =2    minus5dBm,
 161      =2    minus6dBm,
 162      =2    minus7dBm,
 163      =2    minus8dBm,
 164      =2    minus9dBm,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 720 

 165      =2    miniumPower = minus9dBm
 166      =2  };
 167      =2  
 168      =2  
 169      =2  /* Protocol version structure used in ZW_GetProtocolVersion() */
 170      =2  typedef struct _PROTOCOL_VERSION_
 171      =2  {
 172      =2    BYTE protocolType; /* PROTOCOL_TYPE protocolType; */
 173      =2    BYTE protocolVersionMajor;
 174      =2    BYTE protocolVersionMinor;
 175      =2    BYTE protocolVersionRevision;
 176      =2    uint16_t build_number;
 177      =2  } PROTOCOL_VERSION;
 178      =2  
 179      =2  
 180      =2  typedef struct
 181      =2  {
 182      =2    signed char rssi_dBm[NUM_CHANNELS];
 183      =2  } RSSI_LEVELS;
 184      =2  
 185      =2  typedef struct
 186      =2  {
 187      =2    signed char rssi_dBm[NUM_CHANNELS_2CH];
 188      =2  } RSSI_LEVELS_2CH;
 189      =2  
 190      =2  typedef struct
 191      =2  {
 192      =2    signed char rssi_dBm[NUM_CHANNELS_3CH];
 193      =2  } RSSI_LEVELS_3CH;
 194      =2  
 195      =2  
 196      =2  /* Protocol Network statistics structure returned when calling ZW_GetNetworkStats */
 197      =2  typedef struct _S_NETWORK_STATISTICS_
 198      =2  {
 199      =2    WORD wRFTxFrames;         /* Transmitted Frames */
 200      =2    WORD wRFTxLBTBackOffs;    /* LBT backoffs */
 201      =2    WORD wRFRxFrames;         /* Received Frames (No errors) */
 202      =2    WORD wRFRxLRCErrors;      /* Checksum Errors */
 203      =2    WORD wRFRxCRC16Errors;    /* CRC16 Errors */
 204      =2    WORD wRFRxForeignHomeID;  /* Foreign Home ID */
 205      =2  } S_NETWORK_STATISTICS;
 206      =2  
 207      =2  
 208      =2  /* ZW_NetworkLearnModeStart mode parameter definitions */
 209      =2  typedef enum _E_NETWORK_LEARN_MODE_ACTION_
 210      =2  {
 211      =2    E_NETWORK_LEARN_MODE_DISABLE =  0,      /* Disable learn process */
 212      =2    E_NETWORK_LEARN_MODE_INCLUSION  = 1,    /* Enable the learn process to do an inclusion */
 213      =2    E_NETWORK_LEARN_MODE_EXCLUSION  = 2,    /* Enable the learn process to do an exclusion */
 214      =2    E_NETWORK_LEARN_MODE_EXCLUSION_NWE = 3, /* Enable the learn process to do an network wide exclusion */
 215      =2    E_NETWORK_LEARN_MODE_INCLUSION_SMARTSTART = 4,/* Enable the learn process to do an SMARTSTART inclusion 
             -*/
 216      =2    E_NETWORK_LEARN_MODE_COUNT
 217      =2  } E_NETWORK_LEARN_MODE_ACTION;
 218      =2  
 219      =2  
 220      =2  /*===============================   ZW_Poll   ================================
 221      =2  **    Z-Wave low level poll function.
 222      =2  **    This function must be called while waiting on HW ready states and
 223      =2  **    when executing time consuming functions.
 224      =2  **
 225      =2  **    Not to lose RF receive data the time limit is 3/4 bit time, which is
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 721 

 226      =2  **    around 70 usec at 9600 bps (500 clockcycles). Interrupt must not be
 227      =2  **    disabled more than 1/12 bit time which is around 8 usec (40 clock cycles).
 228      =2  **
 229      =2  **
 230      =2  ** void       RET Nothing
 231      =2  ** ZW_Poll( void );  IN  Nothing
 232      =2  **--------------------------------------------------------------------------*/
 233      =2  #define ZW_POLL() ZW_Poll()
 234      =2  
 235      =2  
 236      =2  /*===============================   ZW_Version   ============================
 237      =2  **    Copy Z-Wave basis version from code memory (Flash) to data memory (SRAM)
 238      =2  **    destintaion should be in XDATA
 239      =2  ** extern void         RET  Nothing
 240      =2  ** ZW_Version(
 241      =2  ** XBYTE *buffer);      IN Destination pointer in RAM
 242      =2  **--------------------------------------------------------------------------*/
 243      =2  #define ZW_VERSION(buf) ZW_Version(buf)
 244      =2  
 245      =2  /*=========================   ZW_GetProtocolVersion   =======================
 246      =2  **    Get different protocol version info
 247      =2  **
 248      =2  **    Fill in the data structure PROTOCOL_TYPE
 249      =2  **    destintaion should be in XDATA
 250      =2  ** extern void
 251      =2  ** ZW_GetProtocolVersion(
 252      =2  **   PROTOCOL_VERSION *dst)     IN Destination pointer in RAM
 253      =2  ** ;
 254      =2  **--------------------------------------------------------------------------*/
 255      =2  #define ZW_GET_PROTOCOL_VERSION(buf) ZW_GetProtocolVersion(buf)
 256      =2  
 257      =2  /*============================   ZW_Type_Library   ===========================
 258      =2  ** Get Z-Wave library type
 259      =2  **
 260      =2  ** extern BYTE            RET  Z-Wave library type (ZW_LIB_xxxx)
 261      =2  ** ZW_Type_Library(void);
 262      =2  **--------------------------------------------------------------------------*/
 263      =2  #define ZW_TYPE_LIBRARY() ZW_Type_Library()
 264      =2  
 265      =2  
 266      =2  /*===========================   SendNodeInformation   =======================
 267      =2  **    Create and transmit a node informations frame
 268      =2  **
 269      =2  ** void                           RET  FALSE if transmitter queue overflow
 270      =2  ** SendNodeInformation(
 271      =2  ** BYTE node                      IN  Destination Node ID (0xff = broadcast)
 272      =2  ** BYTE txOptions,                IN  Transmit option flags
 273      =2  ** VOID_CALLBACKFUNC(completedFunc)(BYTE));  IN  Transmit completed call back function
 274      =2  **--------------------------------------------------------------------------*/
 275      =2  #define ZW_SEND_NODE_INFO(node,option,func) ZW_SendNodeInformation(node,option,func)
 276      =2  
 277      =2  
 278      =2  /*===============================   ZW_SetRFReceiveMode   ===================
 279      =2  **    Initialize the Z-Wave RF chip.
 280      =2  **    Mode on:  Set the RF chip in receive mode and starts the data sampling.
 281      =2  **    Mode off: Set the RF chip in power down mode.
 282      =2  **
 283      =2  ** BYTE           RET TRUE if operation was executed successfully, FALSE if not
 284      =2  ** ZW_SetRFReceiveMode(
 285      =2  ** BYTE mode );   IN  TRUE: On; FALSE: Off mode
 286      =2  **--------------------------------------------------------------------------*/
 287      =2  #define ZW_SET_RX_MODE(mode) ZW_SetRFReceiveMode(mode)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 722 

 288      =2  
 289      =2  
 290      =2  /*===============================   ZW_Random   =============================
 291      =2  **  Pseudo-random number function
 292      =2  **
 293      =2  **--------------------------------------------------------------------------*/
 294      =2  #define ZW_RANDOM() ZW_Random()
 295      =2  
 296      =2  #ifdef DYNAMICAL_POWERLEVEL
 314      =2  
 315      =2  /*==========================   ZW_RFPowerLevelSet  ==========================
 316      =2  **    Set the powerlevel used in RF transmitting.
 317      =2  **    Valid powerlevel values are :
 318      =2  **
 319      =2  **          normalPower : Max power possible
 320      =2  **          minus1dBm   - normalPower - 1dB
 321      =2  **          minus2dBm   - normalPower - 2dB
 322      =2  **          minus3dBm   - normalPower - 3dB
 323      =2  **          minus4dBm   - normalPower - 4dB
 324      =2  **          minus5dBm   - normalPower - 5dB
 325      =2  **          minus6dBm   - normalPower - 6dB
 326      =2  **          minus7dBm   - normalPower - 7dB
 327      =2  **          minus8dBm   - normalPower - 8dB
 328      =2  **          minus9dBm   - normalPower - 9dB
 329      =2  **
 330      =2  **--------------------------------------------------------------------------*/
 331      =2  #define ZW_RF_POWERLEVEL_SET(POWERLEVEL) ZW_RFPowerLevelSet(POWERLEVEL)
 332      =2  
 333      =2  
 334      =2  /*==========================   ZW_RFPowerLevelGet  ==========================
 335      =2  **    Get the current powerlevel used in RF transmitting.
 336      =2  **    Possible powerlevel return values are :
 337      =2  **
 338      =2  **          normalPower : Max power possible
 339      =2  **          minus1dBm   - normalPower - 1dB
 340      =2  **          minus2dBm   - normalPower - 2dB
 341      =2  **          minus3dBm   - normalPower - 3dB
 342      =2  **          minus4dBm   - normalPower - 4dB
 343      =2  **          minus5dBm   - normalPower - 5dB
 344      =2  **          minus6dBm   - normalPower - 6dB
 345      =2  **          minus7dBm   - normalPower - 7dB
 346      =2  **          minus8dBm   - normalPower - 8dB
 347      =2  **          minus9dBm   - normalPower - 9dB
 348      =2  **
 349      =2  **--------------------------------------------------------------------------*/
 350      =2  
 351      =2  #define ZW_RF_POWERLEVEL_GET() ZW_RFPowerLevelGet()
 352      =2  
 353      =2  
 354      =2  /*==========================   ZW_SEND_TEST_FRAME  ==========================
 355      =2  **    Send a test frame to specified nodeID, power is previously
 356      =2  **    set by calling ZW_RF_POWERLEVEL_SET.
 357      =2  **    Valid power index values are :
 358      =2  **
 359      =2  **          normalPower - Max power possible
 360      =2  **          minus1dBm   - normalPower - 1dB
 361      =2  **          minus2dBm   - normalPower - 2dB
 362      =2  **          minus3dBm   - normalPower - 3dB
 363      =2  **          minus4dBm   - normalPower - 4dB
 364      =2  **          minus5dBm   - normalPower - 5dB
 365      =2  **          minus6dBm   - normalPower - 6dB
 366      =2  **          minus7dBm   - normalPower - 7dB
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 723 

 367      =2  **          minus8dBm   - normalPower - 8dB
 368      =2  **          minus9dBm   - normalPower - 9dB
 369      =2  **
 370      =2  **--------------------------------------------------------------------------*/
 371      =2  
 372      =2  #define ZW_SEND_TEST_FRAME(nodeID, power, func) ZW_SendTestFrame(nodeID, power, func)
 373      =2  
 374      =2  
 375      =2  /*===========================   ZW_GetProtocolStatus   ==========================
 376      =2  **    Reprort the status of the protocol
 377      =2  **   The function return a mask telling which protocol function is currently running
 378      =2  **   possible MASK values:
 379      =2  **   ZW_PROTOCOL_STATUS_ROUTING:    protocol is analysing the routing table.
 380      =2  **   ZW_PROTOCOL_STATUS_SUC:        SUC is sending pending updates.
 381      =2  **
 382      =2  **   return value of ZERO means protocol is idle.
 383      =2  **--------------------------------------------------------------------------*/
 384      =2  #define ZW_GET_PROTOCOL_STATUS()   ZW_GetProtocolStatus()
 385      =2  
 386      =2  /*===============================   ZW_SET_EXT_INT_LEVEL   =========================================
 387      =2  **    Set the trigger level for external interrupt 0 or 1
 388      =2  **---------------------------------------------------------------------------------------------*/
 389      =2  #define ZW_SET_EXT_INT_LEVEL(SRC, TRIGGER_LEVEL)  ZW_SetExtIntLevel(SRC, TRIGGER_LEVEL)
 390      =2  
 391      =2  /*============================= ZW_WATCHDOG_ENABLE =========================================
 392      =2  **  Enable the watch dog.
 393      =2  **  parameters:
 394      =2  **----------------------------------------------------------------------------*/
 395      =2  #define ZW_WATCHDOG_ENABLE  ZW_WatchDogEnable()
 396      =2  /*============================= ZW_WATCHDOG_DISABLE =========================================
 397      =2  **  Disable the watch dog.
 398      =2  **  parameters:
 399      =2  **----------------------------------------------------------------------------*/
 400      =2  #define ZW_WATCHDOG_DISABLE ZW_WatchDogDisable()
 401      =2  
 402      =2  /*============================= ZW_WATCHDOG_KICK =========================================
 403      =2  **  Kick the watch dog to restarted.
 404      =2  **  parameters:
 405      =2  **----------------------------------------------------------------------------*/
 406      =2  #define ZW_WATCHDOG_KICK  ZW_WatchDogKick()
 407      =2  
 408      =2  /*============================   ZW_SET_PROMISCUOUS_MODE   ======================
 409      =2  **
 410      =2  **  Function description.
 411      =2  **   Enable / disable the installer library promiscuous mode.
 412      =2  **   When promiscuous mode is enabled, all application layer frames will be passed
 413      =2  **   to the application layer regardless if the frames are addressed to another node.
 414      =2  **   When promiscuous mode is disabled, only application frames addressed to the node will be passed
 415      =2  **   to the application layer.
 416      =2  **
 417      =2  **  Side effects:
 418      =2  **
 419      =2  **--------------------------------------------------------------------------*/
 420      =2  #define ZW_SET_PROMISCUOUS_MODE(state)   ZW_SetPromiscuousMode(state)
 421      =2  
 422      =2  
 423      =2  /*============================== ZW_GetRandomWord ===========================
 424      =2  **    Get a true random word
 425      =2  **
 426      =2  **  Side effects:
 427      =2  **
 428      =2  **--------------------------------------------------------------------------*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 724 

 429      =2  #define ZW_GET_RANDOM_WORD(randomWord)   ZW_GetRandomWord(randomWord)
 430      =2  
 431      =2  
 432      =2  /* TO#02781  fix - ZW_ExploreRequestInclusion not implemented in SerialAPI */
 433      =2  /*===========================   ZW_ExploreRequestInclusion   =================
 434      =2  **    Transmit a request for inclusion via a explore frame.
 435      =2  **
 436      =2  **    Side effects:
 437      =2  **
 438      =2  **--------------------------------------------------------------------------*/
 439      =2  #define ZW_EXPLORE_REQUEST_INCLUSION() ZW_ExploreRequestInclusion()
 440      =2  
 441      =2  /*===========================   ZW_ExploreRequestInclusion   =================
 442      =2  **    Transmit a request for inclusion via a explore frame.
 443      =2  **
 444      =2  **    Side effects:
 445      =2  **
 446      =2  **--------------------------------------------------------------------------*/
 447      =2  #define ZW_EXPLORE_REQUEST_EXCLUSION() ZW_ExploreRequestExclusion()
 448      =2  
 449      =2  /****************************************************************************/
 450      =2  /*                              EXPORTED DATA                               */
 451      =2  /****************************************************************************/
 452      =2  
 453      =2  /* bWakeupReason can have the following values */
 454      =2  #define ZW_WAKEUP_RESET   0       /* Wake up after HW Reset (RESET_N pin activation) */
 455      =2  #define ZW_WAKEUP_WUT     1       /* Wake up by WUT timer */
 456      =2  #define ZW_WAKEUP_SENSOR  2       /* Wake up by a Wakeup Beam */
 457      =2  #define ZW_WAKEUP_WATCHDOG 3      /* Wake up after Watchdog Reset */
 458      =2  #define ZW_WAKEUP_EXT_INT  4      /* Wake up by External INT */
 459      =2  #define ZW_WAKEUP_POR      5      /* Wake up after Power On Reset */
 460      =2  #define ZW_WAKEUP_USB_SUSPEND 6   /* Wake up by USB suspend */
 461      =2  #define ZW_WAKEUP_SMARTSTART  7   /* Wake up in SMARTSTART */
 462      =2  
 463      =2  
 464      =2  typedef enum _SW_WAKEUP
 465      =2  {
 466      =2    /**
 467      =2     * Wake up after Hardware Reset (RESET_N pin activation)
 468      =2     */
 469      =2    SW_WAKEUP_RESET = ZW_WAKEUP_RESET,
 470      =2    /**
 471      =2     * Wake up by the WUT timer
 472      =2     */
 473      =2    SW_WAKEUP_WUT = ZW_WAKEUP_WUT,
 474      =2    /**
 475      =2     * Wake up by a Wakeup Beam
 476      =2     */
 477      =2    SW_WAKEUP_SENSOR = ZW_WAKEUP_SENSOR,
 478      =2    /**
 479      =2     * Reset because of a watchdog timeout
 480      =2     */
 481      =2    SW_WAKEUP_WATCHDOG = ZW_WAKEUP_WATCHDOG,
 482      =2    /**
 483      =2     * Wake up by External Interrupt
 484      =2     */
 485      =2    SW_WAKEUP_EXT_INT = ZW_WAKEUP_EXT_INT,
 486      =2    /**
 487      =2     * Reset by Power On Reset circuit
 488      =2     */
 489      =2    SW_WAKEUP_POR = ZW_WAKEUP_POR,
 490      =2    /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 725 

 491      =2     * Wake up by USB suspend
 492      =2     */
 493      =2    SW_WAKEUP_USB_SUSPEND = ZW_WAKEUP_USB_SUSPEND,
 494      =2    /**
 495      =2     * Wake up in SMARTSTART
 496      =2     */
 497      =2    SW_WAKEUP_SMARTSTART = ZW_WAKEUP_SMARTSTART,
 498      =2    /**
 499      =2     * Unknown Wakeup reason
 500      =2     */
 501      =2    SW_WAKEUP_UNKNOWN = 0xFF
 502      =2  }
 503      =2  wakeup_reason_t;
 504      =2  
 505      =2  /**
 506      =2   * For backwards compatibility.
 507      =2   */
 508      =2  typedef wakeup_reason_t SW_WAKEUP;
 509      =2  
 510      =2  typedef enum _ZW_NVM_STATUS_
 511      =2  {
 512      =2    /**
 513      =2     * Nvm was empty or corrupt during startup and has been initialized to default state. This may indicate 
             -a first time startup of the system.
 514      =2     */
 515      =2    ZW_NVM_INITIALIZED = 0,
 516      =2    /**
 517      =2     * Nvm was valid during startup and layout is matching current application. This will be the normal star
             -tup scenario.
 518      =2     */
 519      =2    ZW_NVM_VALID = 1,
 520      =2    /**
 521      =2     * Nvm was upgraded during startup. This indicate a firmware update has completed and the nvm layout has
             - been updated to match the definition of the new firmware.
 522      =2     */
 523      =2    ZW_NVM_UPGRADED,
 524      =2  } ZW_NVM_STATUS;
 525      =2  
 526      =2  
 527      =2  typedef enum _E_APPLICATION_STATE_
 528      =2  {
 529      =2    /**
 530      =2     * Application active - not ready for sleep/powerdown
 531      =2     */
 532      =2    E_APPLICATION_STATE_ACTIVE = 0,
 533      =2    /**
 534      =2     * Application want powerdown - ready for system powerdown - if applicable
 535      =2     */
 536      =2    E_APPLICATION_STATE_READY_FOR_POWERDOWN = 1,
 537      =2    /**
 538      =2     * Number of known Application states
 539      =2     */
 540      =2    E_APPLICATION_STATE_COUNT
 541      =2  } E_APPLICATION_STATE;
 542      =2  
 543      =2  
 544      =2  typedef enum _E_PROTOCOL_STATE_
 545      =2  {
 546      =2    /**
 547      =2     * Protocol active - not ready for sytem shutdown
 548      =2     */
 549      =2    E_PROTOCOL_STATE_ACTIVE = 0,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 726 

 550      =2    /**
 551      =2     * Protocol power down pending - protocol making ready for system shutdown
 552      =2     */
 553      =2    E_PROTOCOL_STATE_SHUTDOWN_PENDING = 1,
 554      =2    /**
 555      =2     * Protocol going in powerdown - now ready for system shutdown
 556      =2     */
 557      =2    E_PROTOCOL_STATE_READY_FOR_SHUTDOWN = 2,
 558      =2    /**
 559      =2     * Number of known Protocol states
 560      =2     */
 561      =2    E_PROTOCOL_STATE_COUNT
 562      =2  } E_PROTOCOL_STATE;
 563      =2  
 564      =2  
 565      =2  /*============================================================================
 566      =2  **    Defines for ApplicationNodeInformation field deviceOptionMask
 567      =2  **--------------------------------------------------------------------------*/
 568      =2  #define APPLICATION_NODEINFO_NOT_LISTENING            0x00
 569      =2  #define APPLICATION_NODEINFO_LISTENING                0x01
 570      =2  #define APPLICATION_NODEINFO_OPTIONAL_FUNCTIONALITY   0x02
 571      =2  #define APPLICATION_FREQ_LISTENING_MODE_1000ms        0x10
 572      =2  #define APPLICATION_FREQ_LISTENING_MODE_250ms         0x20
 573      =2  
 574      =2  /**
 575      =2   *
 576      =2   */
 577      =2  typedef enum _E_SYSTEM_TYPE_
 578      =2  {
 579      =2    /**
 580      =2     *
 581      =2     */
 582      =2    E_SYSTEM_TYPE_NON_LISTENING = APPLICATION_NODEINFO_NOT_LISTENING,     /* 0x00 */
 583      =2    /**
 584      =2     *
 585      =2     */
 586      =2    E_SYSTEM_TYPE_LISTENING = APPLICATION_NODEINFO_LISTENING,     /* 0x01 */
 587      =2    /**
 588      =2     *
 589      =2     */
 590      =2    E_SYSTEM_TYPE_FLIRS = 0x02,                                       /* 0x02 */
 591      =2  } E_SYSTEM_TYPE;
 592      =2  
 593      =2  #define SYSTEM_TYPE_LISTENING_MASK          E_SYSTEM_TYPE_LISTENING
 594      =2  #define SYSTEM_TYPE_FLIRS_MASK              E_SYSTEM_TYPE_FLIRS
 595      =2  
 596      =2  extern code const BYTE ZW_3CH_Build;
 597      =2  
 598      =2  /*==============================   ApplicationInitHW   ======================*/
 599      =2  /**
 600      =2   * \ingroup COMMON
 601      =2   * \ref ApplicationInitHW is used to initialize hardware used by the application.
 602      =2   * The Z Wave hardware initialization function set all application IO pins to input mode.
 603      =2   * The \ref ApplicationInitHW function MUST be called by the Z Wave main function during system startup.
 604      =2   * At this point of time the Z Wave timer system is not started so waiting on hardware to get ready SHOULD
             - be done by MCU busy loops.
 605      =2   *
 606      =2   * Declared in: ZW_basis_api.h
 607      =2   *
 608      =2   * \return TRUE  Application hardware initialized
 609      =2   * \return FALSE Application hardware initialization failed. Protocol enters test mode and Calls Applicati
             -onTestPoll
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 727 

 610      =2   * \param[in] bWakeupReason
 611      =2        - \ref ZW_WAKEUP_RESET       Wake up after Hardware Reset (RESET_N pin activation)
 612      =2        - \ref ZW_WAKEUP_WUT         Wake up by the WUT timer
 613      =2        - \ref ZW_WAKEUP_SENSOR      Wake up by a Wakeup Beam
 614      =2        - \ref ZW_WAKEUP_WATCHDOG    Reset because of a Watchdog Timeout
 615      =2        - \ref ZW_WAKEUP_EXT_INT     Wake up by External Interrupt
 616      =2        - \ref ZW_WAKEUP_POR         Reset by Power On Reset circuit
 617      =2        - \ref ZW_WAKEUP_USB_SUSPEND Wake up by USB suspend
 618      =2   *
 619      =2   * Serial API (Not supported)
 620      =2   *
 621      =2   */
 622      =2  extern  BYTE        /*RET TRUE if HW initialized */
 623      =2  ApplicationInitHW(
 624      =2    SW_WAKEUP bWakeupReason  /* Reason for the powerup of the chip */
 625      =2  );
 626      =2  
 627      =2  
 628      =2  /*==========================   ApplicationInitSW   ==========================*/
 629      =2  /**
 630      =2   * \ingroup COMMON
 631      =2   *
 632      =2   * \ref ApplicationInitSW is used to initialize memory used by the application and driver software.
 633      =2   *      ApplicationInitSW return code is used to make the protocol determine if node should go
 634      =2   *      into Power Down mode and if so; when and which Power Down mode should be used.
 635      =2   *
 636      =2   * \ref ApplicationInitSW MUST be called from the Z Wave main function during system startup.
 637      =2   * Notice that watchdog is enabled by default and MUST be kicked by the application
 638      =2   * to avoid resetting the system (See \ref ZW_WatchDogKick).
 639      =2   *
 640      =2   * Declared in: ZW_basis_api.h
 641      =2   *
 642      =2   * \return Application type - Listening/None-Listening or FREQ_LISTENING_250ms/FREQ_LISTENING_1000ms
 643      =2   *    - \ref APPLICATION_NODEINFO_NOT_LISTENING
 644      =2   *    - \ref APPLICATION_NODEINFO_LISTENING
 645      =2   *    - \ref APPLICATION_FREQ_LISTENING_MODE_250ms
 646      =2   *    - \ref APPLICATION_FREQ_LISTENING_MODE_1000ms
 647      =2   * \param[in] bNvmStatus
 648      =2   *    - \ref ZW_NVM_INITIALIZED     Nvm was empty or invalid during startup and has now been initialized a
             -s first time startup.
 649      =2   *    - \ref ZW_NVM_VALID           Nvm is valid, that is in normal running condition.
 650      =2   *    - \ref ZW_NVM_UPDATED         Nvm has been updated to match the layout of a newly installed firmware
             -. Nvm is thus ready for normal operation.
 651      =2   * Serial API (Not supported)
 652      =2   *
 653      =2   */
 654      =2  extern  BYTE        /*RET Application type - Listening/NotListening or FREQ_LISTENING_250ms/FREQ_LISTENING
             -_1000ms */
 655      =2  ApplicationInitSW(
 656      =2    ZW_NVM_STATUS bNvmStatus  /* Status of the nvm at startup. */
 657      =2  );
 658      =2  
 659      =2  
 660      =2  /*===========================   ApplicationPoll   ===========================*/
 661      =2  /**
 662      =2   * \ingroup COMMON
 663      =2   * The \ref ApplicationPoll function is the entry point from the Z Wave basis
 664      =2   * software to the application software modules. The \ref ApplicationPoll function
 665      =2   * is called from the Z Wave main loop when no low-level time critical actions are active.
 666      =2   * In order not to disrupt the radio communication and the protocol,
 667      =2   * the application code MUST return within 2ms measured from the call of \ref ApplicationPoll.
 668      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 728 

 669      =2   * To determine the \ref ApplicationPoll frequency (see table below) a LED Dimmer
 670      =2   * application is modified to be able to measure how often \ref ApplicationPoll
 671      =2   * is called via an output pin. The minimum value is measured when the module is idle,
 672      =2   * i.e. no RF communication, no push button activation etc. The maximum value
 673      =2   * is measured when the ERTT application at the same time sends Basic Set Commands
 674      =2   * (value equal 0) as fast as possible to the LED Dimmer (DUT).
 675      =2   *
 676      =2   * ApplicationPoll frequency:
 677      =2   * |       |ZW0201 LED Dimmer|ZW0301 LED Dimmer|400 Series LED Dimmer|500 Series LED Dimmer|
 678      =2   * |-------|-----------------|-----------------|---------------------|---------------------|
 679      =2   * |Minimum|           7.2 us|           7.2 us|                80 us|                  TBD|
 680      =2   * |Maximum|           2.4 ms|           2.4 ms|               180 us|                  TBD|
 681      =2   *
 682      =2   * The abovementioned output pin mapped to the ApplicationPoll SHOULD also be used during
 683      =2   * application testing to ensure that the application code never runs for more than 2msec
 684      =2   * even in worst-case scenarios; setting the pin high when entering and low when leaving
 685      =2   * the ApplicationPoll function.
 686      =2   *
 687      =2   * Declared in: ZW_basis_api.h
 688      =2   *
 689      =2   * Serial API (Not supported)
 690      =2   */
 691      =2  
 692      =2  
 693      =2  #ifdef ZW_SMARTSTART_ENABLED
 694      =2  extern E_APPLICATION_STATE          /*RET Application active state - if TRUE, ready to powerdown */
 695      =2  ApplicationPoll(
 696      =2    E_PROTOCOL_STATE bProtocolState); /* IN Protocol current state - If FALSE, ready to shutdown */
 697      =2  #else
 702      =2  
 703      =2  
 704      =2  /*===========================   ApplicationTestPoll   ===========================*/
 705      =2  /**
 706      =2   * \ingroup COMMON
 707      =2   * The \ref ApplicationTestPoll function is the entry point from the Z Wave basis
 708      =2   * software to the application software when the production test mode is enabled
 709      =2   * in the protocol. This will happen when \ref ApplicationInitHW returns FALSE.
 710      =2   * The \ref ApplicationTestPoll function will be called indefinitely until the device is reset.
 711      =2   * The device must be reset and \ref ApplicationInitHW must return TRUE in order to exit this mode.
 712      =2   * When \ref ApplicationTestPoll is called the protocol will acknowledge frames
 713      =2   * sent to home ID equal to 0x00000000 and node ID as follows:
 714      =2   *
 715      =2   * |Device                                  | Node ID|
 716      =2   * |----------------------------------------|--------|
 717      =2   * |Slave                                   |    0x00|
 718      =2   * |Controllers before Dev. Kit v3.40       |    0xEF|
 719      =2   * |Controllers from Dev. Kit v3.40 or later|    0x01|
 720      =2   *
 721      =2   * The following API calls are only available in production test mode:
 722      =2   *   - \ref ZW_EepromInit is used to initialize the external NVM.
 723      =2   *   Remember to initialize controllers with a unique home ID that
 724      =2   *   typically can be transferred via the UART on the production line.
 725      =2   *   - \ref ZW_SendConst is used to validate RF communication.
 726      =2   *   Remember to enable RF communication when testing products
 727      =2   *   based on a portable controller, routing slave or enhanced 232 slave.
 728      =2   *
 729      =2   * Declared in: ZW_basis_api.h
 730      =2   *
 731      =2   * Serial API (Not supported)
 732      =2   */
 733      =2  extern  void          /*RET Nothing */
 734      =2  ApplicationTestPoll(
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 729 

 735      =2    void);              /* IN Nothing */
 736      =2  
 737      =2  #ifndef ZW_CONTROLLER_BRIDGE
 738      =2  
 739      =2  /*===========================   ApplicationCommandHandler   =================*/
 740      =2  /**
 741      =2   * \ingroup COMMON
 742      =2   * \warning doc bridge
 743      =2   *
 744      =2   * The Z Wave protocol will call the \ref ApplicationCommandHandler function
 745      =2   * when an application command or request has been received from another
 746      =2   * node. The receive buffer is released when returning from this
 747      =2   * function. The type of frame used by the request can be determined
 748      =2   * (single cast, mulitcast or broadcast frame). This is used to avoid
 749      =2   * flooding the network by responding on a multicast or broadcast. In
 750      =2   * order not to disrupt the radio communication and the protocol, no
 751      =2   * application function must execute code for more than 5ms without returning.
 752      =2   *
 753      =2   * Except for the Bridge Controller library, this function MUST be implemented
 754      =2   * by the Application layer.
 755      =2   *
 756      =2   * Declared in: ZW_basis_api.h
 757      =2   *
 758      =2   * \param[in] pCmd IN Payload from the received frame.  The command class is the very first byte.
 759      =2   * \param[in] cmdLength IN  Number of Command class bytes.
 760      =2   * \param[in] rxopt IN RECEIVE_OPTIONS_TYPE struct.
 761      =2   * |RECEIVE_OPTIONS_TYPE struct member|Flag description see \ref RECEIVE_OPTIONS_TYPE                     
             -              |
 762      =2   * |----------------------------------|-------------------------------------------------------------------
             ---------------|
 763      =2   * |\ref destNode                     |Command destination Node ID Only valid in promiscuous mode and sing
             -lecast frames.|
 764      =2   * |\ref sourceNode                   |Command sender Node ID.                                            
             -              |
 765      =2   * |\ref rxRSSIVal                    |RSSI val in dBm with which frame was received with.                
             -              |
 766      =2   * |\ref rxStatus                     |Received frame status flags, see \ref RECEIVE_STATUS               
             -              |
 767      =2   *  |Flag Name                         |Flag Mask|Flag description                                        
             -                         |
 768      =2   *  |----------------------------------|---------|--------------------------------------------------------
             --------------------------|
 769      =2   *  |\ref RECEIVE_STATUS_ROUTED_BUSY   |xxxxxxx1 |A response route is locked by the application           
             -                         |
 770      =2   *  |\ref RECEIVE_STATUS_LOW_POWER     |xxxxxx1x |Received at low output power level                      
             -                         |
 771      =2   *  |\ref RECEIVE_STATUS_TYPE_SINGLE   |xxxx00xx |Received a single cast frame                            
             -                         |
 772      =2   *  |\ref RECEIVE_STATUS_TYPE_BROAD    |xxxx01xx |Received a broadcast frame                              
             -                         |
 773      =2   *  |\ref RECEIVE_STATUS_TYPE_MULTI    |xxxx10xx |Received a multicast frame                              
             -                         |
 774      =2   *  |\ref RECEIVE_STATUS_TYPE_EXPLORE  |xxx10xxx |Received an explore frame                               
             -                         |
 775      =2   *  |\ref RECEIVE_STATUS_FOREIGN_FRAME |x1xxxxxx |The received frame is not addressed to this node (Only v
             -alid in promiscuous mode)|
 776      =2   *
 777      =2   * \serialapi{ZW->HOST: REQ | 0x04 | rxopt->rxStatus | rxopt->sourceNode | cmdLength | pCmd[ ] | rxopt->rx
             -RSSIVal }
 778      =2   *
 779      =2   * When a foreign frame is received in promiscuous mode (only valid for controller portable) :
 780      =2   * \serialapi{ZW->HOST: REQ | 0xD1 | rxopt->rxStatus | rxopt->sourceNode | cmdLength | pCmd[ ] | rxopt->de
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 730 

             -stNode | rxopt->rxRSSIVal }
 781      =2   *
 782      =2   * The destNode parameter is only valid for singlecast frames.
 783      =2   * @todo doxygen #if defined(ZW_CONTROLLER) && !defined(ZW_CONTROLLER_STATIC) &&
 784      =2   * !defined(ZW_CONTROLLER_BRIDGE) around param destNode.
 785      =2   *
 786      =2   */
 787      =2  extern  void    /*RET Nothing  */
 788      =2  ApplicationCommandHandler(
 789      =2    ZW_APPLICATION_TX_BUFFER *pCmd,  /* IN  Payload from the received frame, the union
 790      =2                                            should be used to access the fields*/
 791      =2    BYTE   cmdLength,                /* IN  Number of command bytes including the command */
 792      =2    RECEIVE_OPTIONS_TYPE *rxopt);    /* IN  rxopt struct contains rxStatus, sourceNodeID, destNodeID and rss
             -iVal */
 793      =2  
 794      =2  #endif  /* ZW_CONTROLLER_BRIDGE */
 795      =2  
 796      =2  /*===========================   ApplicationRfNotify   ===========================*/
 797      =2  /**
 798      =2   * \ingroup COMMON
 799      =2   * This function is used to inform the application about the current state of the radio
 800      =2   * enabling control of an external power amplifier (PA). The Z Wave protocol will call
 801      =2   * the \ref ApplicationRfNotify function when the radio changes state as follows:
 802      =2   * - From Tx to Rx
 803      =2   * - From Rx to Tx
 804      =2   * - From powered down to Rx
 805      =2   * - From powered down to Tx
 806      =2   * - When PA is powered up
 807      =2   * - When PA is powered down
 808      =2   *
 809      =2   * This enables the application to control an external PA using the appropriate number
 810      =2   * of I/O pins. For details, refer to [35].
 811      =2   *
 812      =2   * A device incorporating an external PA, MUST set the parameter FLASH_APPL_PLL_STEPUP_OFFS
 813      =2   * in App_RFSetup.a51 to 0 (zero) for adjustment of the signal quality.
 814      =2   * This is necessary to be able to pass a FCC compliance test.
 815      =2   *
 816      =2   * The \ref ApplicationRfNotify function MUST be defined in the application regardless
 817      =2   * not used for controlling an external PA.
 818      =2   *
 819      =2   * Declared in: ZW_basis_api.h
 820      =2   *
 821      =2   * \param[in] rfState   The current state of the radio.
 822      =2   *                      Refer to ZW_transport_API.h header file
 823      =2   * - \ref ZW_RF_TX_MODE The radio is in Tx state.
 824      =2   *                      Previous state is either Rx or power down
 825      =2   * - \ref ZW_RF_RX_MODE The radio in Rx or power down state.
 826      =2   *                      Previous state is ether Tx or power down
 827      =2   * - \ref ZW_RF_PA_ON   The radio in Tx moode and the PA is powered on
 828      =2   * - \ref ZW_RF_PA_OFF  The radio in Tx mode and the PA is powered off
 829      =2   *
 830      =2   * \b Serial API:
 831      =2   *
 832      =2   * Not implemented.
 833      =2   *
 834      =2   */
 835      =2  extern  void          /*RET Nothing */
 836      =2  ApplicationRfNotify(
 837      =2    BYTE rfState);
 838      =2  
 839      =2  
 840      =2  #if 0
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 731 

 856      =2  /*==========================   ApplicationNodeInformation   =================*/
 857      =2  /**
 858      =2   * \ingroup COMMON
 859      =2  
 860      =2   * The Z-Wave Application Layer MUST use the \ref ApplicationNodeInformation
 861      =2   * function to generate the Node Information frame and to save information about
 862      =2   * node capabilities. All Z Wave application related fields of the Node Information
 863      =2   * structure MUST be initialized by this function. For a description of the Generic
 864      =2   * Device Classes, Specific Device Classes, and Command Classes refer to
 865      =2   * [4], [5] and [9]. The deviceOptionsMask is a Bit mask where Listening and
 866      =2   * Optional functionality flags MUST be set or cleared accordingly to the nodes
 867      =2   * capabilities.
 868      =2   *
 869      =2   * The listening option in the deviceOptionsMask (APPLICATION_NODEINFO_LISTENING)
 870      =2   * indicates a continuously powered node ready to receive frames.
 871      =2   * A listening node assists as repeater in the network.
 872      =2   *
 873      =2   * The non-listening option in the deviceOptionsMask (APPLICATION_NODEINFO_NOT_LISTENING)
 874      =2   * indicates a battery-operated node that power off RF reception when idle
 875      =2   * (prolongs battery lifetime)..
 876      =2   *
 877      =2   * The optional functionality option in the deviceOptionsMask
 878      =2   * (APPLICATION_NODEINFO_OPTIONAL_FUNCTIONALITY) indicates that this node supports
 879      =2   * other command classes than the mandatory classes for the selected generic and
 880      =2   * specific device class.
 881      =2   *
 882      =2   * To set a device as Listening with Optional Functionality:
 883      =2   * \code
 884      =2  *deviceOptionsMask = APPLICATION_NODEINFO_LISTENING |
 885      =2                       APPLICATION_NODEINFO_OPTIONAL_FUNCTIONALITY;
 886      =2  \endcode
 887      =2   *
 888      =2   * To set a device as not listening and with no Optional functionality support:
 889      =2   * \code
 890      =2  *deviceOptionsMask =  APPLICATION_NODEINFO_NOT_LISTENING;
 891      =2  \endcode
 892      =2   *
 893      =2   * \note for Controllers:
 894      =2   * Because controller libraries store some basic information about themselves
 895      =2   * from ApplicationNodeInformation in nonvolatile memory.
 896      =2   * ApplicationNodeInformation should be set to the correct values before Application
 897      =2   * return from \ref ApplicationInitHW(), for applications where this cannot be done.
 898      =2   * The Application must call \ref ZW_SET_DEFAULT() after updating
 899      =2   * ApplicationNodeInformation in order to force the Z Wave library to store
 900      =2   * the correct values.
 901      =2   *
 902      =2   * A way to verify if ApplicationNodeInformation is stored by the protocol
 903      =2   * is to call \ref ZW_GetNodeProtocolInfo to verify that Generic and specific nodetype
 904      =2   * are correct. If they differ from what is expected, the Application should Set the
 905      =2   * ApplicationNodeInformation to the correct values and call \ref ZW_SET_DEFAULT()
 906      =2   * to force the protocol to update its information.
 907      =2   *
 908      =2   * Declared in: ZW_basis_api.h
 909      =2   *
 910      =2   * \param[out] deviceOptionsMask Bitmask with options
 911      =2   * - \ref APPLICATION_NODEINFO_LISTENING  In case this node is always listening
 912      =2   *                                        (typically AC powered nodes) and stationary.
 913      =2   * - \ref APPLICATION_NODEINFO_NOT_LISTENING  In case this node is non-listening
 914      =2   *                                        (typically battery powered nodes).
 915      =2   * - \ref APPLICATION_NODEINFO_OPTIONAL_FUNCTIONALITY  If the node supports other command
 916      =2   *                                                     classes than the ones mandatory for
 917      =2   *                                                     this nodes Generic and Specific
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 732 

 918      =2   *                                                     Device Class
 919      =2   * - \ref APPLICATION_FREQ_LISTENING_MODE_250ms This option bit should be set if the node
 920      =2   *                                              should act as a Frequently Listening
 921      =2   *                                              Routing Slave with a wakeup interval of 250ms.
 922      =2   *                                              This option is only avalaibe on Routing Slaves.
 923      =2   *                                              This option is not available on 3-channel
 924      =2   *                                              systems (the JP frequency).
 925      =2   * - \ref APPLICATION_FREQ_LISTENING_MODE_1000ms This option bit should be set if the node
 926      =2   *                                               should act as a Frequently Listening
 927      =2   *                                               Routing Slave with a wakeup interval of 1000ms.
 928      =2   *                                               This option is only avalaibe on
 929      =2   *                                               Routing Slaves.
 930      =2   * \param[out] nodeType Pointer to structure with the Device Class:
 931      =2   * - (*nodeType).generic   The Generic Device Class [5]. Do not enter zero in this field.
 932      =2   * - (*nodeType).specific  The Specific Device Class [5].
 933      =2   * \param[out] nodeParm Command Class buffer pointer.
 934      =2   *                      Command Classes [9] supported by the device itself and optional
 935      =2   *                      Command Classes the device can control in other devices.
 936      =2   * \param[out] parmLength Number of Command Class bytes.
 937      =2   *
 938      =2   * \serialapi{HOST->ZW: REQ | 0x03 | deviceOptionsMask | generic | specific | parmLength | nodeParm[ ]}
 939      =2   *
 940      =2   * The \ref ApplicationNodeInformation is replaced by \ref SerialAPI_ApplicationNodeInformation.
 941      =2   * Used to set information that will be used in subsequent calls to \ref ZW_SendNodeInformation.
 942      =2   * Replaces the functionality provided by the \ref ApplicationNodeInformation() callback function.
 943      =2   * \code
 944      =2  void SerialAPI_ApplicationNodeInformation(BYTE  deviceOptionsMask,
 945      =2    APPL_NODE_TYPE *nodeType,
 946      =2    BYTE  *nodeParm,
 947      =2    BYTE  parmLength)
 948      =2  \endcode
 949      =2   *
 950      =2   * Information is stored in NVM application area. The define APPL_NODEPARM_MAX in
 951      =2   * serialappl.h must be modified accordingly to the number of command classes to be notified.
 952      =2   *
 953      =2   * The figure below lists the Node Information Frame structure on application level.
 954      =2   * The Z Wave Protocol creates this frame via ApplicationNodeInformation.
 955      =2   * The Node Information Frame structure when transmitted by RF does not include
 956      =2   * the Basic byte descriptor field. The Basic byte descriptor field on application
 957      =2   * level is deducted from the Capability and Security byte descriptor fields.
 958      =2   *
 959      =2   * | Byte descriptor \ bit number   | 7          | 6  | 5  | 4  | 3  | 2  | 1  | 0            |
 960      =2   * |--------------------------------|------------|----|----|----|----|----|----|--------------|
 961      =2   * | Capability                     | Liste-ning ||||||| Z Wave Protocol Specific Part        |
 962      =2   * | Security                       | Opt. Func. ||||||| Z Wave Protocol Specific Part        |
 963      =2   * | Reserved                       ||||||||          Z Wave Protocol Specific Part           |
 964      =2   * | Basic                          ||||||||Basic Device Class (Z Wave Protocol Specific Part)|
 965      =2   * | Generic                        ||||||||                 Generic Device Class             |
 966      =2   * | Specific                       ||||||||                 Specific Device Class            |
 967      =2   * | NodeInfo[0]                    ||||||||                  Command Class 1                 |
 968      =2   * | NodeInfo[n-1]                  ||||||||                  Command Class n                 |
 969      =2   *
 970      =2   * Figure 8. Node Information frame structure on application level
 971      =2   * @todo doxygen colspan in table rows below header.
 972      =2   *
 973      =2   * \warning Must use deviceOptionsMask parameter and associated defines to initialize
 974      =2   * Node Information Frame with respect to listening, non-listening and optional
 975      =2   * functionality options.
 976      =2   */
 977      =2  extern  void                /*RET Nothing */
 978      =2  ApplicationNodeInformation(
 979      =2    BYTE      *deviceOptionsMask,  /*OUT Bitmask with application options     */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 733 

 980      =2    APPL_NODE_TYPE *nodeType, /*OUT Generic and Specific Device Type          */
 981      =2    BYTE      **nodeParm,     /*OUT Device parameter buffer pointer           */
 982      =2    BYTE      *parmLength );  /*OUT Number of Device parameter bytes          */
 983      =2  #endif
 984      =2  
 985      =2  
 986      =2  /****************************************************************************/
 987      =2  /*                           EXPORTED FUNCTIONS                             */
 988      =2  /*                 Implemented within the Z-Wave modules                    */
 989      =2  /****************************************************************************/
 990      =2  
 991      =2  
 992      =2  /*========================= ZW_NetworkLearnModeStart =========================
 993      =2   *
 994      =2   * \ingroup BASIS
 995      =2   * \ref ZW_NetworkLearnModeStart is used to enable/disable the Z-Wave Network
 996      =2   * Node inclusion/exclusion functionality.
 997      =2   *
 998      =2   * Declared in: ZW_basis_api.h
 999      =2   *
1000      =2   * \return TRUE  Requested Network Learn process initiated
1001      =2   * \return FALSE
1002      =2   * \param[in] bMode
1003      =2        - \ref E_NETWORK_LEARN_MODE_DISABLE       Disable learn process
1004      =2        - \ref E_NETWORK_LEARN_MODE_INCLUSION     Enable the learn process to do an inclusion
1005      =2        - \ref E_NETWORK_LEARN_MODE_EXCLUSION     Enable the learn process to do an exclusion
1006      =2        - \ref E_NETWORK_LEARN_MODE_EXCLUSION_NWE Enable the learn process to do an network wide exclusion
1007      =2        - \ref E_NETWORK_LEARN_MODE_INCLUSION_SMARTSTART Enable the learn process to do an SMARTSTART inclus
             -ion based on local DSK
1008      =2   *
1009      =2   * \b Serial API:
1010      =2   *
1011      =2   * Uses ZW_SetLearnMode functionality.
1012      =2   *
1013      =2   */
1014      =2  BYTE
1015      =2  ZW_NetworkLearnModeStart(
1016      =2    E_NETWORK_LEARN_MODE_ACTION bMode);
1017      =2  
1018      =2  
1019      =2  /**
1020      =2   *
1021      =2   * \ingroup BASIS
1022      =2   * \ref ZW_NetworkManagementSetMaxInclusionRequestIntervals can be used to set the maximum interval inbetw
             -een SmartStart Inclusion requests
1023      =2   *
1024      =2   * Declared in: ZW_basis_api.h
1025      =2   *
1026      =2   * \return 0    Requested maximum intervals either 0(default) or not valid
1027      =2   * \return 5-99 The requested number of intervals set
1028      =2   * \param[in] bInclRequestIntervals The maximum number of 128sec ticks inbetween SmartStart inclusion requ
             -ests.
1029      =2                Valid range 5-99, which corresponds to 640-12672sec.
1030      =2   *
1031      =2    \serialapi{
1032      =2    HOST->ZW: REQ | 0xD6 | bInclRequestIntervals
1033      =2    ZW->HOST: RES | 0xD6 | retVal
1034      =2    }
1035      =2   *
1036      =2   * FUNC_ID_ZW_NETWORK_MANAGEMENT_SET_MAX_INCLUSION_REQUEST_INTERVALS = 0xD6
1037      =2   *
1038      =2   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 734 

1039      =2  BYTE
1040      =2  ZW_NetworkManagementSetMaxInclusionRequestIntervals(
1041      =2    BYTE bInclRequestIntervals);
1042      =2  
1043      =2  
1044      =2  /*========================= ZW_Power_Management_Init =========================
1045      =2   *
1046      =2   * \ingroup BASIS
1047      =2   * \ref ZW_Power_Management_Init is used to setup number of seconds a
1048      =2   * non listening node sleeps inbetween wakeups (use WUTtimer)
1049      =2   *
1050      =2   * Declared in: ZW_basis_api.h
1051      =2   *
1052      =2   * \return Nothing
1053      =2   *
1054      =2   * \b Serial API:
1055      =2   *
1056      =2   * Not implemented.
1057      =2   */
1058      =2  void
1059      =2  ZW_Power_Management_Init(
1060      =2    DWORD sleep,        /* IN number of seconds to sleep until next wakeup */
1061      =2    BYTE IntEnable);    /* IN interrupts Enable bitmask, If a bit is 1, */
1062      =2  
1063      =2  
1064      =2  /*============================== ZW_ClearTxTimers ===========================
1065      =2  **    Clear the Tx timers for the 3 channels
1066      =2  **
1067      =2  **--------------------------------------------------------------------------*/
1068      =2  void
1069      =2  ZW_ClearTxTimers();
1070      =2  
1071      =2  
1072      =2  /*============================== ZW_GetTxTimer =============================
1073      =2  **    Get the Tx timer in ms for 1 channel
1074      =2  **
1075      =2  **--------------------------------------------------------------------------*/
1076      =2  void
1077      =2  ZW_GetTxTimer(
1078      =2    BYTE bChannel,
1079      =2    DWORD *dwValue);
1080      =2  
1081      =2  
1082      =2  /*============================= ZW_ClearNetworkStats =========================
1083      =2  **    Clear the Network statistics
1084      =2  **
1085      =2  **--------------------------------------------------------------------------*/
1086      =2  void
1087      =2  ZW_ClearNetworkStats();
1088      =2  
1089      =2  
1090      =2  /*============================= ZW_GetNetworkStats ===========================
1091      =2  **    Get current Network statistics
1092      =2  **
1093      =2  **--------------------------------------------------------------------------*/
1094      =2  void
1095      =2  ZW_GetNetworkStats(
1096      =2    S_NETWORK_STATISTICS *sNetworkStats);
1097      =2  
1098      =2  
1099      =2  /*===============================   ZW_SetRFReceiveMode   ===================
1100      =2  **    Initialize the Z-Wave RF chip.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 735 

1101      =2  **    Mode on:  Set the RF chip in receive mode and starts the data sampling.
1102      =2  **    Mode off: Set the RF chip in power down mode.
1103      =2  **
1104      =2  **--------------------------------------------------------------------------*/
1105      =2  extern BYTE         /*RET TRUE if operation was executed successfully, FALSE if not */
1106      =2  ZW_SetRFReceiveMode(
1107      =2    BYTE mode);       /* IN TRUE: On; FALSE: Off mode */
1108      =2  
1109      =2  
1110      =2  /*===========================   ZW_SendNodeInformation   ====================*/
1111      =2  /**
1112      =2   * \ingroup BASIS
1113      =2   *
1114      =2   * \macro{ ZW_SEND_NODE_INFO(node,option,func) }
1115      =2   * Create and transmit a "Node Information" frame. The Z Wave transport layer builds a frame,
1116      =2   * request application node information (see ApplicationNodeInformation) and queue the
1117      =2   * "Node Information" frame for transmission. The completed call back function (completedFunc)
1118      =2   * is called when the transmission is complete.
1119      =2   *
1120      =2   * The Node Information Frame is a protocol frame and will therefore not be directly
1121      =2   * available to the application on the receiver. The API call ZW_SetLearnMode() can be used
1122      =2   * to instruct the protocol to pass the Node Information Frame to the application.
1123      =2   *
1124      =2   * When ZW_SendNodeInformation() is used in learn mode for adding or removing the node
1125      =2   * from the network the transmit option TRANSMIT_OPTION_LOW_POWER should NOT be used.
1126      =2   * \note ZW_SendNodeInformation uses the transmit queue in the API, so using other transmit functions befo
             -re the complete callback has been called by the API is not recommended.
1127      =2   *
1128      =2   * \return TRUE  If frame was put in the transmit queue
1129      =2   * \return FALSE If it was not (callback will not be called)
1130      =2   *
1131      =2   * \param[in] destNode Destination Node ID (NODE_BROADCAST == all nodes)
1132      =2   * \param[in] txOptions  Transmit option flags. (see ZW_SendData)
1133      =2   * \param[in] completedFunc  Transmit completed call back function
1134      =2   *
1135      =2   * Callback function Parameters:
1136      =2   * \param[in] txStatus (see \ref ZW_SendData)
1137      =2   *
1138      =2   * Timeout: 65s
1139      =2   * Exception recovery: Resume normal operation, no recovery needed
1140      =2   * \serialapi{
1141      =2   * HOST->ZW: REQ | 0x12 | destNode | txOptions | funcID
1142      =2   * ZW->HOST: RES | 0x12 | retVal
1143      =2   * ZW->HOST: REQ | 0x12 | funcID | txStatus
1144      =2   * }
1145      =2   *
1146      =2   */
1147      =2  extern BYTE                    /*RET  FALSE if transmitter queue overflow   */
1148      =2  ZW_SendNodeInformation(
1149      =2    BYTE destNode,                 /*IN  Destination Node ID  */
1150      =2    BYTE txOptions,                /*IN  Transmit option flags         */
1151      =2    VOID_CALLBACKFUNC(completedFunc)(
1152      =2        BYTE, TX_STATUS_TYPE *));  /*IN  Transmit completed call back function  */
1153      =2  
1154      =2  
1155      =2  /*===============================   ZW_Poll   ================================
1156      =2  **    Z-Wave low level poll function.
1157      =2  **    This function must be called while waiting on HW ready states and
1158      =2  **    when executing time consuming functions.
1159      =2  **
1160      =2  **    Not to lose RF receive data the time limit is 3/4 bit time, which is
1161      =2  **    around 70 usec at 9600 bps (500 clockcycles). Interrupt must not be
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 736 

1162      =2  **    disabled more than 1/12 bit time which is around 8 usec (40 clock cycles).
1163      =2  **
1164      =2  **
1165      =2  **--------------------------------------------------------------------------*/
1166      =2  extern void  /*RET Nothing  */
1167      =2  ZW_Poll(
1168      =2    void );    /* IN Nothing */
1169      =2  
1170      =2  
1171      =2  /*===============================   ZW_Random   =============================*/
1172      =2  /**
1173      =2   * \ingroup BASIS
1174      =2   * \macro{ZW_RANDOM()}
1175      =2   *
1176      =2   * A pseudo-random number generator that generates a sequence of numbers,
1177      =2   * the elements of which are approximately independent of each other.
1178      =2   * The same sequence of pseudo-random numbers will be repeated in
1179      =2   * case the module is power cycled. The Z-Wave protocol uses also this
1180      =2   * function in the random backoff algorithm etc.
1181      =2   *
1182      =2   * \return
1183      =2   * Random number (0 â 0xFF)
1184      =2   *
1185      =2   *
1186      =2   * \serialapi{
1187      =2   * HOST->ZW: REQ | 0x1D
1188      =2   * ZW->HOST: RES | 0x1D | rndNo
1189      =2   * }
1190      =2   */
1191      =2  extern BYTE /*RET Random number */
1192      =2  ZW_Random(
1193      =2    void);    /*IN Nothing */
1194      =2  
1195      =2  
1196      =2  /*===============================   ZW_Version   ============================
1197      =2  **    Copy Z-Wave basis version from code memory (Flash) to data memory (SRAM)
1198      =2  **    destintaion should be in XDATA
1199      =2  **    Returns the
1200      =2  **--------------------------------------------------------------------------*/
1201      =2  extern BYTE      /*RET Library type ZW_LIB_xxx  */
1202      =2  ZW_Version(
1203      =2    XBYTE *dst);   /* IN Destination pointer in RAM */
1204      =2  
1205      =2  
1206      =2  /**
1207      =2   * Copies protocol version information to a variable given by a pointer.
1208      =2   *
1209      =2   * Destination should be in XDATA.
1210      =2   * @param dst Given pointer.
1211      =2   */
1212      =2  extern void
1213      =2  ZW_GetProtocolVersion(
1214      =2    PROTOCOL_VERSION xdata *dst);
1215      =2  
1216      =2  
1217      =2  /*============================   ZW_Type_Library   ===========================
1218      =2  ** Get Z-Wave library type
1219      =2  **
1220      =2  **    Side effects:
1221      =2  **
1222      =2  **--------------------------------------------------------------------------*/
1223      =2  extern BYTE      /*RET  Z-Wave library type (ZW_LIB_xxxx) */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 737 

1224      =2  ZW_Type_Library(void);
1225      =2  
1226      =2  
1227      =2  /*=========================  ZW_RFAbove3vSupplyGuaranteed  ======================
1228      =2  **    this function to disable\enable the OTP charge pump in RX mode.
1229      =2  **    Switching the charge pump off in RX lowers the sensitivity variation.
1230      =2  **     However the charge pump can only be switched off if the supply is guaranteed
1231      =2  **     to be above 3V
1232      =2  **
1233      =2  **    Side effects:
1234      =2  **-------------------------------------------------------------------------------------*/
1235      =2  void
1236      =2  ZW_RFAbove3vSupplyGuaranteed(
1237      =2    BOOL above_3v_supply);
1238      =2  
1239      =2  
1240      =2  /*==========================   ZW_RFPowerLevelSet  ==========================*/
1241      =2  /*
1242      =2  **       normalPower : Max power possible
1243      =2  **       minus2dBm    - normalPower - 2dBm
1244      =2  **       minus4dBm    - normalPower - 4dBm
1245      =2  **       minus6dBm    - normalPower - 6dBm
1246      =2  **       minus8dBm    - normalPower - 8dBm
1247      =2  **       minus10dBm   - normalPower - 10dBm
1248      =2  **       minus12dBm   - normalPower - 12dBm
1249      =2  **       minus14dBm   - normalPower - 14dBm
1250      =2  **       minus16dBm   - normalPower - 16dBm
1251      =2  **       minus18dBm   - normalPower - 18dBm
1252      =2  */
1253      =2  /**
1254      =2   * \ingroup BASIS
1255      =2   * Set the power level used in RF transmitting. The actual RF power is dependent
1256      =2   * on the settings for transmit power level in App_RFSetup.a51. If this value is
1257      =2   *  changed from using the default library value the resulting power levels might differ
1258      =2   *  from the intended values. The returned value is however always the actual one used.
1259      =2   *
1260      =2   *  \note
1261      =2   *  This function should only be used in an install/test link situation and the power level
1262      =2   *  should always be set back to normalPower when the testing is done.
1263      =2   *
1264      =2   *  \param[in] powerLevel powerlevel to use in RF transmission, valid values:
1265      =2    - \ref normalPower Max power possible
1266      =2    - \ref minus1dBm  Normal power - 1dB (mapped to minus2dB )
1267      =2    - \ref minus2dBm  Normal power - 2dB
1268      =2    - \ref minus3dBm  Normal power - 3dB (mapped to minus4dB)
1269      =2    - \ref minus4dBm  Normal power - 4dB
1270      =2    - \ref minus5dBm  Normal power - 5dB (mapped to minus6dB)
1271      =2    - \ref minus6dBm  Normal power - 6dB
1272      =2    - \ref minus7dBm  Normal power - 7dB (mapped to minus8dB)
1273      =2    - \ref minus8dBm  Normal power - 8dB
1274      =2    - \ref minus9dBm  Normal power - 9dB (mapped to minus10dB)
1275      =2    \return The powerlevel set.
1276      =2  
1277      =2    \macro{ZW_RF_POWERLEVEL_SET(POWERLEVEL)}
1278      =2  
1279      =2    \serialapi{
1280      =2    HOST->ZW: REQ | 0x17 | powerLevel
1281      =2    ZW->HOST: RES | 0x17 | retVal
1282      =2    }
1283      =2   *
1284      =2   */
1285      =2  BYTE                /*RET The powerlevel set */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 738 

1286      =2  ZW_RFPowerLevelSet(
1287      =2    BYTE powerLevel); /* IN Powerlevel to set */
1288      =2  
1289      =2  
1290      =2  /*==========================   ZW_RFPowerLevelGet  ==========================*/
1291      =2  /*
1292      =2  **       normalPower : Max power possible
1293      =2  **       minus2dBm    - normalPower - 2dBm
1294      =2  **       minus4dBm    - normalPower - 4dBm
1295      =2  **       minus6dBm    - normalPower - 6dBm
1296      =2  **       minus8dBm    - normalPower - 8dBm
1297      =2  **       minus10dBm   - normalPower - 10dBm
1298      =2  **       minus12dBm   - normalPower - 12dBm
1299      =2  **       minus14dBm   - normalPower - 14dBm
1300      =2  **       minus16dBm   - normalPower - 16dBm
1301      =2  **       minus18dBm   - normalPower - 18dBm
1302      =2  */
1303      =2  /**
1304      =2   * \ingroup BASIS
1305      =2   * \macro{ZW_RF_POWERLEVEL_GET()}
1306      =2   *
1307      =2   * Get the current power level used in RF transmitting.
1308      =2   *
1309      =2   * \note This function should only be used in an install/test link situation.
1310      =2   *
1311      =2   * \return The power level currently in effect during RF transmissions.
1312      =2   *
1313      =2   * \serialapi{
1314      =2   * HOST->ZW: REQ | 0xBA
1315      =2   * ZW->HOST: RES | 0xBA | powerlevel
1316      =2   * }
1317      =2   */
1318      =2  BYTE                /*RET The current powerlevel */
1319      =2  ZW_RFPowerLevelGet(
1320      =2    void);            /* IN Nothing */
1321      =2  
1322      =2  
1323      =2  /*===========================   ZW_SendTestFrame   ==========================*/
1324      =2  /*
1325      =2  **       normalPower : Max power possible
1326      =2  **       minus2dBm    - normalPower - 2dBm
1327      =2  **       minus4dBm    - normalPower - 4dBm
1328      =2  **       minus6dBm    - normalPower - 6dBm
1329      =2  **       minus8dBm    - normalPower - 8dBm
1330      =2  **       minus10dBm   - normalPower - 10dBm
1331      =2  **       minus12dBm   - normalPower - 12dBm
1332      =2  **       minus14dBm   - normalPower - 14dBm
1333      =2  **       minus16dBm   - normalPower - 16dBm
1334      =2  **       minus18dBm   - normalPower - 18dBm
1335      =2  */
1336      =2  /**
1337      =2   * \ingroup BASIS
1338      =2   *
1339      =2   * \macro {ZW_SEND_TEST_FRAME(nodeID, power, func)}
1340      =2   *
1341      =2   * Send a test frame directly to nodeID without any routing, RF transmission
1342      =2   * power is previously set to powerlevel by calling ZW_RF_POWERLEVEL_SET. The
1343      =2   * test frame is acknowledged at the RF transmission powerlevel indicated by the
1344      =2   * parameter powerlevel by nodeID (if the test frame got through).  This test will
1345      =2   * be done using 9600 kbit/s transmission rate.
1346      =2   *
1347      =2   * \note This function should only be used in an install/test link situation.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 739 

1348      =2   *
1349      =2   * \param[IN] nodeID Node ID on the node ID (1..232) the test frame should be transmitted to.
1350      =2   * \param[IN] powerLevel Powerlevel to use in RF transmission, valid values:
1351      =2   *  - normalPower Max power possible
1352      =2   *  -  minus1dB  Normal power - 1dB (mapped to minus2dB )
1353      =2   *  -  minus2dB  Normal power - 2dB
1354      =2   *  -  minus3dB  Normal power - 3dB (mapped to minus4dB)
1355      =2   *  -  minus4dB  Normal power - 4dB
1356      =2   *  -  minus5dB  Normal power - 5dB (mapped to minus6dB)
1357      =2   *  -  minus6dB  Normal power - 6dB
1358      =2   *  -  minus7dB  Normal power - 7dB (mapped to minus8dB)
1359      =2   *  -  minus8dB  Normal power - 8dB
1360      =2   *  -  minus9dB  Normal power - 9dB (mapped to minus10dB)
1361      =2   * \param[in] func Callback function called when done.
1362      =2   * Callback function Parameters:
1363      =2   * \param[in] txStatus (see \ref ZW_SendData)
1364      =2   *
1365      =2   * \return FALSE If transmit queue overflow.
1366      =2   *
1367      =2   * Timeout: 200ms
1368      =2   * Exception recovery: Resume normal operation, no recovery needed
1369      =2   *
1370      =2   */
1371      =2  BYTE               /*RET FALSE if transmitter busy else TRUE */
1372      =2  ZW_SendTestFrame(
1373      =2    BYTE nodeID,     /* IN nodeID to transmit to */
1374      =2    BYTE powerLevel, /* IN powerlevel index */
1375      =2    VOID_CALLBACKFUNC(func)(BYTE txStatus, TX_STATUS_TYPE *txStatusReport)); /* Call back function called wh
             -en done */
1376      =2  
1377      =2  
1378      =2  /*===========================   ZW_GetProtocolStatus   ==========================*/
1379      =2  /**
1380      =2   * \ingroup BASIS
1381      =2   * \macro{ZW_GET_PROTOCOL_STATUS()}
1382      =2   *
1383      =2   * Report the status of the protocol.
1384      =2   *
1385      =2   * The function return a mask telling which protocol function is currently running
1386      =2   *
1387      =2   * \return Returns the protocol status as one of the following:
1388      =2   * - Zero  Protocol is idle.
1389      =2   * - \ref ZW_PROTOCOL_STATUS_ROUTING  Protocol is analyzing the routing table.
1390      =2   * - \ref ZW_PROTOCOL_STATUS_SUC  SUC sends pending updates.
1391      =2   *
1392      =2   * \serialapi{
1393      =2   * HOST->ZW: REQ | 0xBF
1394      =2   * ZW->HOST: RES | 0xBF | retVal
1395      =2   * }
1396      =2   */
1397      =2  BYTE
1398      =2  ZW_GetProtocolStatus(void);
1399      =2  
1400      =2  
1401      =2  /*===============================   ZW_SetExtIntLevel   =========================================
1402      =2  **    Set the trigger level for external interrupt 0 or 1
1403      =2  **---------------------------------------------------------------------------------------------*/
1404      =2  void
1405      =2  ZW_SetExtIntLevel(
1406      =2    BYTE intSrc,        /*IN: The interrupt src to set its level ZW_INT0 or ZW_INT1*/
1407      =2    BYTE triggerLevel); /*IN: The trigger level of the interrupt source, TRUE active high/rising edge,*/
1408      =2                        /*     FALSE active low faling edge*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 740 

1409      =2  
1410      =2  
1411      =2  //#endif
1412      =2  /*============================= ZW_WatchDogEnable() =========================================
1413      =2  **  Enable the watch dog.
1414      =2  **  parameters:
1415      =2  **----------------------------------------------------------------------------*/
1416      =2  void
1417      =2  ZW_WatchDogEnable();
1418      =2  
1419      =2  
1420      =2  /*============================= ZW_WatchDogDisable() =========================================
1421      =2  **  Disable the watch dog.
1422      =2  **  parameters:
1423      =2  **----------------------------------------------------------------------------*/
1424      =2  void
1425      =2  ZW_WatchDogDisable();
1426      =2  
1427      =2  
1428      =2  /*============================= ZW_WatchDogKick() =========================================
1429      =2  **  Kick the watchdog to restarted.
1430      =2  **  parameters:
1431      =2  **----------------------------------------------------------------------------*/
1432      =2  void
1433      =2  ZW_WatchDogKick();
1434      =2  
1435      =2  
1436      =2  #ifdef ZW_PROMISCUOUS_MODE
1453      =2  
1454      =2  
1455      =2  /*============================== ZW_GetRandomWord ===========================*/
1456      =2  /**
1457      =2   *
1458      =2   * \ingroup BASIS
1459      =2   *
1460      =2   * The API call generates a random word using the ZW0201/ZW0301 builtin random number
1461      =2   * generator (RNG). If RF needs to be in Receive then ZW_SetRFReceiveMode should be called afterwards.
1462      =2   * \return
1463      =2   * TRUE If possible to generate random number.
1464      =2   * \return
1465      =2   * FALSE  If not possible e.g. RF not powered down.
1466      =2   * \param[in,out] randomWord Pointer to word variable, which should receive the random word.
1467      =2   * \param[in] bResetRadio  If TRUE the RF radio is reinitialized after generating the random word.
1468      =2   *
1469      =2   * \note
1470      =2   * The ZW0201/ZW0301 RNG is based on the RF transceiver, which must be in powerdown
1471      =2   * state (see ZW_SetRFReceiveMode) to assure proper operation of the RNG. Remember
1472      =2   * to call ZW_GetRandomWord with bResetRadio = TRUE when the last random word is to
1473      =2   * be generated. This is needed for the RF to be reinitialized, so that it can be
1474      =2   * used to transmit and receive again.
1475      =2   * *
1476      =2   * \macro{ZW_GET_RANDOM_WORD(randomWord\,bResetRadio)}
1477      =2   * \serialapi{
1478      =2   * HOST -> ZW: REQ | 0x1C | noRandomBytes
1479      =2   * ZW -> HOST: RES | 0x1C | randomGenerationSuccess | noRandomBytesGenerated | randombytes[]
1480      =2   * }
1481      =2   * \note
1482      =2   * The Serial API function 0x1C makes use of the ZW_GetRandomWord to generate a specified number of random
             - bytes and takes care of the handling of the RF:
1483      =2   * - Set the RF in powerdown prior to calling the ZW_GetRandomWord the first time, if not possible then re
             -turn result to HOST.
1484      =2   * - Call ZW_GetRandomWord until enough random bytes generated or ZW_GetRandomWord returns FALSE.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 741 

1485      =2   * - Call ZW_GetRandomWord with bResetRadio = TRUE to reinitialize the radio.
1486      =2   * - Call ZW_SetRFReceiveMode with TRUE if the serialAPI hardware is a listening device or with FALSE if i
             -t is a non-listening device.
1487      =2   * - Return result to HOST.
1488      =2   *
1489      =2   * @param[in]  noRandomBytes to generate
1490      =2   * @param[out] randomGenerationSuccess  TRUE if random bytes could be generated
1491      =2   * @param[out] noRandomBytesGenerated   Number of random numbers generated
1492      =2   * @param[out] randombytes[] Array of generated random bytes
1493      =2   *
1494      =2   */
1495      =2  BOOL
1496      =2  ZW_GetRandomWord(
1497      =2    BYTE *randomWord);
1498      =2  
1499      =2  
1500      =2  /*============================== ZW_GetRandomArray ===========================
1501      =2  **    Fill Array with random bytes in a multiple number of 2
1502      =2  **
1503      =2  **    returns:   Number of random bytes generated and filled into Array
1504      =2  **
1505      =2  **  Side effects:
1506      =2  **
1507      =2  **--------------------------------------------------------------------------*/
1508      =2  BYTE
1509      =2  ZW_GetRandomArray(
1510      =2    BYTE *pRandomArray,
1511      =2    BYTE bArrayByteCount);
1512      =2  
1513      =2  
1514      =2  /*===========================   ZW_ExploreRequestInclusion   =================*/
1515      =2  /**
1516      =2   * \ingroup BASIS
1517      =2   *
1518      =2   * This function sends out an explorer frame requesting inclusion into a network.
1519      =2   * If the inclusion request is accepted by a controller in network wide inclusion
1520      =2   * mode then the application on this node will get notified through the callback
1521      =2   * from the ZW_SetLearnMode() function. Once a callback is received from ZW_SetLearnMode()
1522      =2   * saying that the inclusion process has started the application should not make further
1523      =2   * calls to this function.
1524      =2   *
1525      =2   * \note Recommend not to call this function more than once every 4 seconds.
1526      =2   *
1527      =2   * \return TRUE  Inclusion request queued for transmission
1528      =2   * \return FALSE Node is not in learn mode
1529      =2   * \serialapi{
1530      =2   * HOST->ZW: REQ | 0x5E
1531      =2   * ZW->HOST: RES | 0x5E | retVal
1532      =2   * }
1533      =2   *
1534      =2   */
1535      =2  BYTE
1536      =2  ZW_ExploreRequestInclusion();
1537      =2  
1538      =2  
1539      =2  /*===========================   ZW_ExploreRequestExclusion   =================*/
1540      =2  /**
1541      =2   * \ingroup BASIS
1542      =2   *
1543      =2   * This function sends out an explorer frame requesting exclusion from the network.
1544      =2   * If the exclusion request is accepted by a controller in network wide exclusion
1545      =2   * mode then the application on this node will get notified through the callback
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 742 

1546      =2   * from the ZW_SetLearnMode() function. Once a callback is received from ZW_SetLearnMode()
1547      =2   * saying that the exclusion process has started the application should not make further
1548      =2   * calls to this function.
1549      =2   *
1550      =2   * \note Recommend not to call this function more than once every 4 seconds.
1551      =2   *
1552      =2   * \return TRUE  Exclusion request queued for transmission
1553      =2   * \return FALSE Node is not in learn mode
1554      =2   * \serialapi{
1555      =2   * HOST->ZW: REQ | 0x5F
1556      =2   * ZW->HOST: RES | 0x5F | retVal
1557      =2   * }
1558      =2   *
1559      =2   */
1560      =2  BYTE
1561      =2  ZW_ExploreRequestExclusion();
1562      =2  
1563      =2  
1564      =2  /*============================== ZW_IOS_enable ===========================
1565      =2  **  Enables/disables IO ports.
1566      =2  **
1567      =2  **  Side effects:
1568      =2  **
1569      =2  **--------------------------------------------------------------------------*/
1570      =2  void
1571      =2  ZW_IOS_enable(
1572      =2    BYTE bState);  /* IN  byte containing IO state. TRUE: IO port states are controllable
1573      =2                   *                               FALSE: IO port states are frozen */
1574      =2  
1575      =2  /*============================== ZW_IOS_set ===========================
1576      =2  **  Setup IO ports.
1577      =2  **
1578      =2  **  Side effects:
1579      =2  **
1580      =2  **--------------------------------------------------------------------------*/
1581      =2  void  /* RET Nothing */
1582      =2  ZW_IOS_set(BYTE bPort,         /* IN  port#,  0 => P0, 1 => P1, 2 => P2, 3 => P3 */
1583      =2             BYTE bDirection,    /* IN  Direction bit pattern. 0b=output, 1b=input.
1584      =2                                  * E.g. 0xF0=> upper 4 IO's are inputs and the
1585      =2                                  * lower 4 IO's are outputs                       */
1586      =2             BYTE bValue);       /* IN  Output setting / Pull-up state
1587      =2                                  *
1588      =2                                  * When an IO is set as output the corresponding
1589      =2                                  * bit in bValue will determine the output setting
1590      =2                                  * 1b=high
1591      =2                                  * 0b=low
1592      =2                                  *
1593      =2                                  * When an IO is set as input the
1594      =2                                  * corresponding bit in bValue will determine the
1595      =2                                  * state of the pull-up resistor in the IO cell.
1596      =2                                  * 1b=pull-up disabled
1597      =2                                  * 0b=pull-up enabled                             */
1598      =2  
1599      =2  
1600      =2  /*============================== ZW_IOS_get ===========================
1601      =2  **  Returns the IO port state.
1602      =2  **
1603      =2  **  Side effects:
1604      =2  **
1605      =2  **--------------------------------------------------------------------------*/
1606      =2  void  /* RET Nothing */
1607      =2  ZW_IOS_get(BYTE bPort,         /* IN  port#,  0 => P0, 1 => P1, 2 => P2, 3 => P3 */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 743 

1608      =2             BYTE *bDirection,   /* OUT Direction bit pattern. 0b=output, 1b=input.
1609      =2                                  * E.g. 0xF0=> upper 4 IO's are inputs and the
1610      =2                                  * lower 4 IO's are outputs.                      */
1611      =2             BYTE *bValue);      /* OUT State of the IO pad                        */
1612      =2  
1613      =2  
1614      =2  /*============================== ZW_CHIP_type_get ===========================
1615      =2  **  Returns the Z-Wave Single Chip type number
1616      =2  **
1617      =2  **  Side effects:
1618      =2  **
1619      =2  **--------------------------------------------------------------------------*/
1620      =2  BYTE  /* RET type number */
1621      =2  ZW_CHIP_type_get(void);
1622      =2  
1623      =2  
1624      =2  /*============================== ZW_CHIP_revision_get ===========================
1625      =2  **  Returns the Z-Wave Single Chip revision number
1626      =2  **
1627      =2  **  Side effects:
1628      =2  **
1629      =2  **--------------------------------------------------------------------------*/
1630      =2  BYTE  /* RET revision number */
1631      =2  ZW_CHIP_revision_get(void);
1632      =2  
1633      =2  
1634      =2  /*============================ ZW_AddPollTask ===============================
1635      =2  ** Function description
1636      =2  ** Add a PollTask to main poll queue.
1637      =2  **
1638      =2  ** Side effects: queue has size 1.
1639      =2  **
1640      =2  **-------------------------------------------------------------------------*/
1641      =2  BOOL ZW_AddPollTask( VOID_CALLBACKFUNC (CBPolltask)(void));
1642      =2  
1643      =2  
1644      =2  /*===================   ZW_GetBackgroundRSSI   ===========================
1645      =2  **
1646      =2  **  Returns an estimate of the current background RSSI level.
1647      =2  **
1648      =2  **  A separate measurement is returned for each channel.
1649      =2  **
1650      =2  **-------------------------------------------------------------------------*/
1651      =2  void
1652      =2  ZW_GetBackgroundRSSI(
1653      =2      RSSI_LEVELS *noise_levels);    /*OUT Structure to be filled with noise levels */
1654      =2  
1655      =2  
1656      =2  /*==================   ZW_RegisterBackgroundRSSICallback   =====================
1657      =2  **
1658      =2  **  Register a callback function to be called whenever new background
1659      =2  **  RSSI samples are available.
1660      =2  **
1661      =2  **  Side effects: None
1662      =2  **
1663      =2  **-------------------------------------------------------------------------*/
1664      =2  void ZW_RegisterBackgroundRSSICallback(
1665      =2      VOID_CALLBACKFUNC(cbFun)(RSSI_LEVELS *)); /* IN Callback function to register*/
1666      =2  
1667      =2  
1668      =2  /*===========================   ZW_SetDefaultPowerLevel   ==================*/
1669      =2  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 744 

1670      =2   * \ingroup BASIS
1671      =2   *
1672      =2   * Set the default power levels used for transmitting Z-Wave frames
1673      =2   *
1674      =2   * This function should only be called in ApplicationInitSW() and it should
1675      =2   * only be used when it isn't possible to modify the Tx power througt
1676      =2   * the App_RFSetup.c file
1677      =2   *
1678      =2   * \return TRUE  Power level is set
1679      =2   * \return FALSE Power level is not set, function called outside scope
1680      =2   * \serialapi{
1681      =2   *    Not supported (See serialAPI documentation of FUNC_ID_SERIAL_API_SETUP)
1682      =2   * }
1683      =2   *
1684      =2  **/
1685      =2  BOOL ZW_SetDefaultPowerLevels(BYTE bNormalPower0, BYTE bNormalPower1, BYTE bNormalPower2,
1686      =2                               BYTE bLowPower0, BYTE bLowPower1, BYTE bLowPower2);
1687      =2  
1688      =2  
1689      =2  /*===========================   ZW_GetDefaultPowerLevel   ==================*/
1690      =2  /**
1691      =2   * \ingroup BASIS
1692      =2   *
1693      =2   * Get the default power levels used for transmitting Z-Wave frames
1694      =2   *
1695      =2   * \serialapi{
1696      =2   *    Not supported (See serialAPI documentation of FUNC_ID_SERIAL_API_SETUP)
1697      =2   * }
1698      =2   *
1699      =2  **/
1700      =2  void ZW_GetDefaultPowerLevels(BYTE *pPowerlevels);
1701      =2  
1702      =2  
1703      =2  /*========================   ZW_GetMaxPayloadSize   =========================*/
1704      =2  /**
1705      =2   * \ingroup BASIS
1706      =2   *
1707      =2   *  Get the max payload size the protocol can handle
1708      =2   *
1709      =2   * \return Maximum payload size supported by protocol.
1710      =2   * \serialapi{
1711      =2   *    Supported through the FUNC_ID_SERIAL_API_SETUP functionality
1712      =2   * HOST->ZW: REQ | 0x0B | 0x10
1713      =2   * ZW->HOST: RES | 0x0B | 0x10 | maxPayloadSize
1714      =2   * }
1715      =2  **/
1716      =2  BYTE
1717      =2  ZW_GetMaxPayloadSize();
1718      =2  
1719      =2  
1720      =2  #endif /* _ZW_BASIS_API_H_ */
1721      =2  
  29      =1  
  30      =1  
  31      =1  /****************************************************************************/
  32      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  33      =1  /****************************************************************************/
  34      =1  
  35      =1  /* ApplicationcSlaveUpdate status */
  36      =1  #define UPDATE_STATE_NODE_INFO_RECEIVED     0x84
  37      =1  #define UPDATE_STATE_NOP_POWER_RECEIVED     0x83
  38      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 745 

  39      =1  /*Defines used to handle inclusion and exclusion of node*/
  40      =1  #define ASSIGN_COMPLETE           0x00
  41      =1  #define ASSIGN_NODEID_DONE        0x01  /*Node ID have been assigned*/
  42      =1  #define ASSIGN_RANGE_INFO_UPDATE  0x02  /*Node is doing Neighbor discovery*/
  43      =1  
  44      =1  /* Mode parameters to ZW_SetLearnMode */
  45      =1  #define ZW_SET_LEARN_MODE_DISABLE                       0x00
  46      =1  #define ZW_SET_LEARN_MODE_CLASSIC                       0x01
  47      =1  #define ZW_SET_LEARN_MODE_NWI                           0x02
  48      =1  #define ZW_SET_LEARN_MODE_NWE                           0x03
  49      =1  
  50      =1  /*===========================   ZW_SetLearnMode   ===========================
  51      =1  **    Enable/Disable home/node ID learn mode.
  52      =1  **    When learn mode is enabled, received "Assign ID's Command" are handled:
  53      =1  **    If the current stored ID's are zero, the received ID's will be stored.
  54      =1  **    If the received ID's are zero the stored ID's will be set to zero.
  55      =1  **
  56      =1  **    The learnFunc is called when the received assign command has been handled.
  57      =1  **    The returned parameter is the learned Node ID.
  58      =1  **
  59      =1  ** void           RET  Nothing
  60      =1  ** ZW_SetLearnMode(
  61      =1  ** BYTE mode,                IN  learnMode bitmask
  62      =1  ** VOID_CALLBACKFUNC(learnFunc)(BYTE)); IN  Node learn call back function.
  63      =1  **--------------------------------------------------------------------------*/
  64      =1  #define ZW_SET_LEARN_MODE(mode, func) ZW_SetLearnMode(mode, func)
  65      =1  
  66      =1  
  67      =1  /*===========================   ZW_SetDefault   ================================
  68      =1  **    Remove all Nodes and timers from the EEPROM memory.
  69      =1  **    Reset the homeID and nodeID
  70      =1  **    Side effects:
  71      =1  **
  72      =1  **--------------------------------------------------------------------------*/
  73      =1  #define ZW_SET_DEFAULT     ZW_SetDefault
  74      =1  
  75      =1  
  76      =1  /****************************************************************************/
  77      =1  /*                              EXPORTED DATA                               */
  78      =1  /****************************************************************************/
  79      =1  
  80      =1  /****************************************************************************/
  81      =1  /*                           EXPORTED FUNCTIONS                             */
  82      =1  /*                 Implemented within the application moduls                */
  83      =1  /****************************************************************************/
  84      =1  
  85      =1  
  86      =1  /*==========================   ApplictionSlaveUpdate   =======================
  87      =1  **   Inform a slave application that a node information is received.
  88      =1  **   Called from the slave command handler when a node information frame
  89      =1  **   is received and the Z-Wave protocol is not in a state where it is needed.
  90      =1  **
  91      =1  **--------------------------------------------------------------------------*/
  92      =1  
  93      =1  /**
  94      =1   * \ingroup COMMON
  95      =1   * The Z Wave protocol MAY notify a slave application by calling
  96      =1   * \ref ApplicationSlaveUpdate when a Node Information Frame has been received.
  97      =1   * The Z Wave protocol MAY refrain from calling the function if the protocol is
  98      =1   * currently expecting node information.
  99      =1   *
 100      =1   * All slave libraries requires this function implemented by the application.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 746 

 101      =1   *
 102      =1   * Declared in: ZW_slave_api.h
 103      =1   *
 104      =1   * \param[in] bStatus The status, value could be one of the following:
 105      =1   *  - UPDATE_STATE_NODE_INFO_RECEIVED A node has sent its Node Info while the
 106      =1   *                                    Z Wave protocol is idle.
 107      =1   * \param[in] bNodeID The updated node's node ID (1..232).
 108      =1   * \param[in] pCmd Pointer of the updated node's node info.
 109      =1   * \param[in] bLen  The length of the pCmd parameter.
 110      =1   * \serialapi{ZW->HOST: REQ | 0x49 | bStatus | bNodeID | bLen | basic | generic | specific | commandclasse
             -s[ ]}
 111      =1   *
 112      =1   */
 113      =1  extern void
 114      =1  ApplicationSlaveUpdate(
 115      =1    BYTE bStatus,     /*IN  Status event */
 116      =1    BYTE bNodeID,     /*IN  Node id of the node that send node info */
 117      =1    BYTE* pCmd,       /*IN  Pointer to Application Node information */
 118      =1    BYTE bLen);       /*IN  Node info length                        */
 119      =1  
 120      =1  
 121      =1  /**
 122      =1   * Defines for ApplicationNetworkLearnModeCompleted nodeID.
 123      =1   * if not 0-232 then following values are defined
 124      =1   */
 125      =1  #define APPLICATION_NETWORK_LEARN_MODE_COMPLETED_FAILED                   0xFF
 126      =1  #define APPLICATION_NETWORK_LEARN_MODE_COMPLETED_SMART_START_IN_PROGRESS  0xFE
 127      =1  #define APPLICATION_NETWORK_LEARN_MODE_COMPLETED_TIMEOUT                  0xFD
 128      =1  
 129      =1  
 130      =1  /**
 131      =1   * @brief ApplicationNetworkLearnModeCompleted
 132      =1   * Should be implemented by the Application. Called when node have started
 133      =1   * inclusion/exclusion through ZW_NetworkLearnModeStart and node has been
 134      =1   * included, excluded or learnmode either failed or timed out:
 135      =1   * valid values for nodeID parameter:
 136      =1   * @param nodeID IN parameter nodeID assigned, value can be on of the following
 137      =1   *  - 0      node has been Excluded and has been assigned this nodeID
 138      =1   *  - 1-232  node has been Included and has been assigned this nodeID
 139      =1   *  - APPLICATION_NETWORK_LEARN_MODE_COMPLETED_FAILED
 140      =1   *    Smart Start Security inclusion failed
 141      =1   *  - APPLICATION_NETWORK_LEARN_MODE_COMPLETED_SMART_START_IN_PROGRESS
 142      =1   *    A nodeID has been assigned do not go into sleepmode. Another call to
 143      =1   *    ApplicationNetworkLearnModeCompleted will come with final result.
 144      =1   *  - APPLICATION_NETWORK_LEARN_MODE_COMPLETED_TIMEOUT
 145      =1   *    LearnMode process timeout inclusion/exclusion did not start.
 146      =1   *
 147      =1   */
 148      =1  extern void
 149      =1  ApplicationNetworkLearnModeCompleted(
 150      =1    BYTE nodeID);
 151      =1  
 152      =1  
 153      =1  /****************************************************************************/
 154      =1  /*                           EXPORTED FUNCTIONS                             */
 155      =1  /*                 Implemented within the Z-Wave slave modules              */
 156      =1  /****************************************************************************/
 157      =1  
 158      =1  
 159      =1  /*===========================   ZW_SetLearnMode   ===========================
 160      =1  **    Enable/Disable home/node ID learn mode.
 161      =1  **    When learn mode is enabled, received "Assign ID's Command" are handled:
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 747 

 162      =1  **    If the current stored ID's are zero, the received ID's will be stored.
 163      =1  **    If the received ID's are zero the stored ID's will be set to zero.
 164      =1  **
 165      =1  **    The learnFunc is called when the received assign command has been handled.
 166      =1  **
 167      =1  **--------------------------------------------------------------------------*/
 168      =1  extern void         /*RET  Nothing        */
 169      =1  ZW_SetLearnMode(
 170      =1    BYTE mode,                                       /* IN  learnMode bitmask */
 171      =1    VOID_CALLBACKFUNC(learnFunc)(BYTE bStatus, BYTE nodeID));  /*IN  Node learn call back function. */
 172      =1  
 173      =1  
 174      =1  /*===========================   ZW_SetDefault   ================================
 175      =1  **    Reset the slave to its default state.
 176      =1  **    Delete all routes in routing slave
 177      =1  **    Reset the homeID and nodeID
 178      =1  **    Side effects:
 179      =1  **
 180      =1  **--------------------------------------------------------------------------*/
 181      =1  void           /*RET  Nothing        */
 182      =1  ZW_SetDefault(void);
 183      =1  
 184      =1  #endif /* _ZW_SLAVE_API_H_ */
 185      =1  
  32          #ifdef ZW_SLAVE_32
  33          #include <ZW_slave_32_api.h>
   1      =1  /*******************************  ZW_SLAVE_32_API.H  *******************************
   2      =1   *           #######
   3      =1   *           ##  ##
   4      =1   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =1   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =1   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =1   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =1   *          #######   ####   ##  ##  #####       ##  #####
   9      =1   *                                           #####
  10      =1   *          Z-Wave, the wireless lauguage.
  11      =1   *
  12      =1   *              Copyright (c) 2001
  13      =1   *              Zensys A/S
  14      =1   *              Denmark
  15      =1   *
  16      =1   *              All Rights Reserved
  17      =1   *
  18      =1   *    This source file is subject to the terms and conditions of the
  19      =1   *    Zensys Software License Agreement which restricts the manner
  20      =1   *    in which it may be used.
  21      =1   *
  22      =1   *---------------------------------------------------------------------------
  23      =1   *
  24      =1   * Description: Z-Wave Slave node on Enhanced Module application interface
  25      =1   *
  26      =1   * Author:   Johann Sigfredsson
  27      =1   *
  28      =1   * Last Changed By:  $Author: sse $
  29      =1   * Revision:         $Revision: 9286 $
  30      =1   * Last Changed:     $Date: 2007-09-11 16:13:14 +0200 (ti, 11 sep 2007) $
  31      =1   *
  32      =1   ****************************************************************************/
  33      =1  #ifndef _ZW_SLAVE_32_API_H_
  34      =1  #define _ZW_SLAVE_32_API_H_
  35      =1  
  36      =1  #ifndef ZW_SLAVE_32
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 748 

  39      =1  
  40      =1  /****************************************************************************/
  41      =1  /*                              INCLUDE FILES                               */
  42      =1  /****************************************************************************/
  43      =1  /* Include the basic slave functionality */
  44      =1  #include <ZW_slave_routing_api.h>
   1      =2  /*******************************  ZW_SLAVE_ROUTING_API.H  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Z-Wave Routing Slave node application interface
  25      =2   *
  26      =2   * Author:   Johann Sigfredsson
  27      =2   *
  28      =2   * Last Changed By:  $Author: jbu $
  29      =2   * Revision:         $Revision: 30174 $
  30      =2   * Last Changed:     $Date: 2014-12-08 15:02:53 +0100 (ma, 08 dec 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SLAVE_ROUTING_API_H_
  34      =2  #define _ZW_SLAVE_ROUTING_API_H_
  35      =2  
  36      =2  #ifndef ZW_SLAVE_ROUTING
  39      =2  
  40      =2  /****************************************************************************/
  41      =2  /*                              INCLUDE FILES                               */
  42      =2  /****************************************************************************/
  43      =2  /* Include the basic slave functionality */
  44      =2  #include <ZW_slave_api.h>
   1      =3  /****************************************************************************
   2      =3   *
   3      =3   * Copyright (c) 2001-2013
   4      =3   * Sigma Designs, Inc.
   5      =3   * All Rights Reserved
   6      =3   *
   7      =3   *---------------------------------------------------------------------------
   8      =3   *
   9      =3   * Description: Z-Wave Slave node application interface
  10      =3   *
  11      =3   * Author:   Ivar Jeppesen
  12      =3   *
  13      =3   * Last Changed By:  $Author: jsi $
  14      =3   * Revision:         $Revision: 28977 $
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 749 

  15      =3   * Last Changed:     $Date: 2014-06-04 13:28:14 +0200 (on, 04 jun 2014) $
  16      =3   *
  17      =3   ****************************************************************************/
  18      =3  #ifndef _ZW_SLAVE_API_H_
 185      =3  
  45      =2  
  46      =2  #include <ZW_nodemask_api.h>
   1      =3  /*******************************  ZW_NODEMASK_API.H  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Z-Wave, the wireless language.
  11      =3   *
  12      =3   *              Copyright (c) 2001
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Functions used to manipulate bits (Node ID) in a NodeMask array.
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: jbu $
  29      =3   * Revision:         $Revision: 26038 $
  30      =3   * Last Changed:     $Date: 2013-06-10 09:08:11 +0200 (ma, 10 jun 2013) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_NODEMASK_API_H_
  47      =2  
  48      =2  /****************************************************************************/
  49      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  50      =2  /****************************************************************************/
  51      =2  
  52      =2  
  53      =2  /* ZW_REQUEST_NETWORK_UPDATE callback values */
  54      =2  #define ZW_ROUTE_UPDATE_DONE      0x00
  55      =2  #define ZW_ROUTE_UPDATE_ABORT     0x01
  56      =2  #define ZW_ROUTE_UPDATE_WAIT      0x02
  57      =2  #define ZW_ROUTE_UPDATE_DISABLED  0x03
  58      =2  
  59      =2  
  60      =2  /*==================   ZW_REQUEST_NEW_ROUTE_DESTINATIONS ====================
  61      =2  **    Request new destinations for return routes.
  62      =2  **      list = pointer to array of node ids
  63      =2  **      len = length of nodeID array (Max len =
  64      =2  **            ZW_MAX_RETURN_ROUTE_DESTINATIONS
  65      =2  **      func = callback, called with status when operation is done.
  66      =2  **             status can be one of the following:
  67      =2  **
  68      =2  **    ZW_ROUTE_UPDATE_DONE      - The update process is ended successfully.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 750 

  69      =2  **    ZW_ROUTE_UPDATE_ABORT     - The update process aborted because of error.
  70      =2  **    ZW_ROUTE_UPDATE_WAIT      - The SUC node is busy.
  71      =2  **    ZW_ROUTE_UPDATE_DISABLED  - The SUC functionality is disabled.
  72      =2  **
  73      =2  **--------------------------------------------------------------------------*/
  74      =2  #define ZW_REQUEST_NEW_ROUTE_DESTINATIONS(list,len,func) ZW_RequestNewRouteDestinations(list,len,func)
  75      =2  
  76      =2  /*==================   ZW_REQUEST_NEW_ROUTE_DESTINATIONS ====================
  77      =2  ** This function request network update from the Static Update Controller
  78      =2  **  Callback status will be one of following
  79      =2  **    ZW_ROUTE_UPDATE_DONE      - The update process is ended successfully.
  80      =2  **    ZW_ROUTE_UPDATE_ABORT     - The update process aborted because of error.
  81      =2  **    ZW_ROUTE_UPDATE_WAIT      - The SUC node is busy.
  82      =2  **    ZW_ROUTE_UPDATE_DISABLED  - The SUC functionality is disabled.
  83      =2  
  84      =2  ------------------------------------------------------------------------*/
  85      =2  #define ZW_REQUEST_NETWORK_UPDATE(FUNC) ZW_RequestNetWorkUpdate(FUNC)
  86      =2  
  87      =2  /*====================  ZW_IS_NODE_WITHIN_DIRECT_RANGE =====================
  88      =2  **    Test if ReturnRouted indicate that bNodeID is within direct range.
  89      =2  **
  90      =2  **--------------------------------------------------------------------------*/
  91      =2  #define ZW_IS_NODE_WITHIN_DIRECT_RANGE(nid) ZW_IsNodeWithinDirectRange(nid)
  92      =2  
  93      =2  /*============================   ZW_RequestNodeInfo   ======================
  94      =2  **    Function description.
  95      =2  **     Request a node to send it's node information.
  96      =2  **     Function return TRUE if the request is send, else it return FALSE.
  97      =2  **     FUNC is a callback function, which is called with the status of the
  98      =2  **     Request nodeinformation frame transmission.
  99      =2  **     If a node sends its node info, ApplicationSlaveUpdate will be called
 100      =2  **     with UPDATE_STATE_NODE_INFO_RECEIVED as status together with the received
 101      =2  **     nodeinformation.
 102      =2  **
 103      =2  **    Side effects:
 104      =2  **
 105      =2  **--------------------------------------------------------------------------*/
 106      =2  #define ZW_REQUEST_NODE_INFO(NODEID, FUNC)  ZW_RequestNodeInfo(NODEID, FUNC)
 107      =2  
 108      =2  
 109      =2  /*===========================   ZW_GET_SUC_NODEID  ===========================
 110      =2  **    Function description
 111      =2  **    This function gets the nodeID of the current Static Update Controller
 112      =2  **    if ZERO then no SUC is available
 113      =2  **
 114      =2  **--------------------------------------------------------------------------*/
 115      =2  #define ZW_GET_SUC_NODEID() ZW_GetSUCNodeID()
 116      =2  
 117      =2  
 118      =2  /****************************************************************************/
 119      =2  /*                           EXPORTED FUNCTIONS                             */
 120      =2  /*                 Implemented within the Z-Wave moduls                     */
 121      =2  /****************************************************************************/
 122      =2  
 123      =2  /*======================  ZW_AreNodeWithinDirectRange   ======================
 124      =2  **    Test if ReturnRouted indicate that bNodeID is within direct range.
 125      =2  **
 126      =2  **--------------------------------------------------------------------------*/
 127      =2  BOOL                          /*RET TRUE if neighbours, FALSE if not*/
 128      =2  ZW_IsNodeWithinDirectRange(
 129      =2    BYTE bNodeID);              /*IN nodeID to check*/
 130      =2  /*=======================   ZW_RequestNewRouteDestinations   =================
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 751 

 131      =2  **    Request new destinations for return routes.
 132      =2  **
 133      =2  **    Side effects:
 134      =2  **
 135      =2  **--------------------------------------------------------------------------*/
 136      =2  BOOL                                                /*RET TRUE if SUC/SIS exist FALSE if not*/
 137      =2  ZW_RequestNewRouteDestinations(
 138      =2    BYTE_P destList,                                  /*IN Pointer to new destinations*/
 139      =2    BYTE destListLen,                                 /*IN len of buffer */
 140      =2    VOID_CALLBACKFUNC(completedFunc)(BYTE txStatus)); /* IN callback function called when completed*/
 141      =2  
 142      =2  /*----------------------------------------------------------------------------
 143      =2   This function resquest network update from the Static Update Controller
 144      =2  ----------------------------------------------------------------------------*/
 145      =2  BYTE                      /* RET: True; SUC is known to the controller,  */
 146      =2                            /*      FALSE; SUC not known to the controller */
 147      =2  ZW_RequestNetWorkUpdate(
 148      =2    VOID_CALLBACKFUNC(completedFunc)(BYTE txStatus)); /* IN call back function indicates of the update suces
             -sed or failed*/
 149      =2  
 150      =2  /*============================   ZW_RequestNodeInfo   ======================
 151      =2  **    Function description.
 152      =2  **     Request a node to send it's node information.
 153      =2  **     Function return TRUE if the request is send, else it return FALSE.
 154      =2  **     FUNC is a callback function, which is called with the status of the
 155      =2  **     Request nodeinformation frame transmission.
 156      =2  **     If a node sends its node info, ApplicationSlaveUpdate will be called
 157      =2  **     with UPDATE_STATE_NODE_INFO_RECEIVED as status together with the received
 158      =2  **     nodeinformation.
 159      =2  **
 160      =2  **    Side effects:
 161      =2  **
 162      =2  **--------------------------------------------------------------------------*/
 163      =2  BOOL                      /*RET FALSE if transmitter busy */
 164      =2  ZW_RequestNodeInfo(
 165      =2    BYTE nodeID,                     /*IN: node id of the node to request node info from it.*/
 166      =2    VOID_CALLBACKFUNC(completedFunc)(BYTE, TX_STATUS_TYPE *)); /* IN Callback function */
 167      =2  
 168      =2  
 169      =2  /*============================   ZW_GetSUCNodeID  ===========================
 170      =2  **    Function description
 171      =2  **    This function gets the nodeID of the current Static Update Controller
 172      =2  **    if ZERO then no SUC is available
 173      =2  **
 174      =2  **--------------------------------------------------------------------------*/
 175      =2  BYTE                    /*RET nodeID on SUC, if ZERO -> no SUC */
 176      =2  ZW_GetSUCNodeID(void);  /* IN Nothing */
 177      =2  
 178      =2  #endif /* _ZW_SLAVE_ROUTING_API_H_ */
 179      =2  
  45      =1  
  46      =1  
  47      =1  /****************************************************************************/
  48      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  49      =1  /****************************************************************************/
  50      =1  
  51      =1  #endif  /* _ZW_SLAVE_32_API_H_ */
  52      =1  
  34          #else
  37          #include <ZW_classcmd.h>
   1      =1  // Generated on: 04.08.2017 15:17:23
   2      =1  /*******************************  ZW_classcmd.h  *******************************
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 752 

   3      =1   *
   4      =1   * Copyright (c) 2001-2016
   5      =1   * Sigma Designs, Inc.
   6      =1   * All Rights Reserved
   7      =1   *
   8      =1   *---------------------------------------------------------------------------
   9      =1   *
  10      =1   * Description: Device and command class types and definitions.
  11      =1   *
  12      =1   *              Be aware that temporary types and definitions can be present
  13      =1   *              in this header file. Only the types and definitions found in
  14      =1   *              the latest version of the Z-Wave Device Class Specification
  15      =1   *              (doc. nr. 9031002xx) is valid.
  16      =1   *
  17      =1   * Author: JÑrgen Franck
  18      =1   *
  19      =1   * Last Changed By:  $Author: sro $
  20      =1   * Revision:         $Revision: 35619 $
  21      =1   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =1   *
  23      =1   ****************************************************************************/
  24      =1  #ifndef _ZW_CLASSCMD_H_
  38          #include <ZW_mem_api.h>
   1      =1  /*******************************  ZW_MEM_API.H  *******************************
   2      =1   *           #######
   3      =1   *           ##  ##
   4      =1   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =1   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =1   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =1   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =1   *          #######   ####   ##  ##  #####       ##  #####
   9      =1   *                                           #####
  10      =1   *          Z-Wave, the wireless lauguage.
  11      =1   *
  12      =1   *              Copyright (c) 2001
  13      =1   *              Zensys A/S
  14      =1   *              Denmark
  15      =1   *
  16      =1   *              All Rights Reserved
  17      =1   *
  18      =1   *    This source file is subject to the terms and conditions of the
  19      =1   *    Zensys Software License Agreement which restricts the manner
  20      =1   *    in which it may be used.
  21      =1   *
  22      =1   *---------------------------------------------------------------------------
  23      =1   *
  24      =1   * Description: Copy of data to/from non-volatile memory (EEPROM)
  25      =1   *              Standard memory functions.
  26      =1   *
  27      =1   * Author:   Ivar Jeppesen
  28      =1   *
  29      =1   * Last Changed By:  $Author: efh $
  30      =1   * Revision:         $Revision: 29682 $
  31      =1   * Last Changed:     $Date: 2014-10-06 15:12:09 +0200 (ma, 06 okt 2014) $
  32      =1   *
  33      =1   ****************************************************************************/
  34      =1  #ifndef _ZW_MEM_API_H_
  39          #include <eeprom.h>
   1      =1  /****************************************************************************
   2      =1   *
   3      =1   * Copyright (c) 2001-2014
   4      =1   * Sigma Designs, Inc.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 753 

   5      =1   * All Rights Reserved
   6      =1   *
   7      =1   *---------------------------------------------------------------------------
   8      =1   *
   9      =1   * Description: Application NVM variable declarations
  10      =1   *
  11      =1   *        All far variables (NVM offsets) should be defined in the application's eeprom.h module
  12      =1   *        in the struct t_nvmApplDescriptor
  13      =1   *
  14      =1   * Author:   Peter Shorty
  15      =1   *
  16      =1   * Last Changed By:  $Author: sse $
  17      =1   * Revision:         $Revision: 8501 $
  18      =1   * Last Changed:     $Date: 2007-01-29 15:03:16 +0200 (??, 29 ??? 2007) $
  19      =1   *
  20      =1   ****************************************************************************/
  21      =1  #ifndef _EEPROM_H_
  22      =1  #define _EEPROM_H_
  23      =1  
  24      =1  /****************************************************************************/
  25      =1  /*                              INCLUDE FILES                               */
  26      =1  /****************************************************************************/
  27      =1  #include "config_app.h"
   1      =2  /**
   2      =2   * @file config_app.h
   3      =2   * @brief Configuration file for Power Strip sample application.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   * @details This file contains definitions for the Z-Wave+ Framework as well for the sample app.
   8      =2   *
   9      =2   * NOTICE: The file name must not be changed and the two definitions APP_VERSION and APP_REVISION
  10      =2   * must not be changed since they are used by the build environment.
  11      =2   */
  12      =2  #ifndef _CONFIG_APP_H_
  28      =1  #include <ZW_nvm_descriptor.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2014
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: Declaration of Z-Wave NVM descriptor.
  10      =2   *
  11      =2   * Author:   Erik Friis Harck
  12      =2   *
  13      =2   * Last Changed By:  $Author: iza $
  14      =2   * Revision:         $Revision: 22797 $
  15      =2   * Last Changed:     $Date: 2012-05-10 15:55:06 +0200 (to, 10 maj 2012) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _NVM_DESCRIPTOR_H_
  19      =2  #define _NVM_DESCRIPTOR_H_
  20      =2  #include <ZW_typedefs.h>
   1      =3  /*******************************  ZW_typedefs.h  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 754 

   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Products that speak Z-Wave work together better
  11      =3   *
  12      =3   *              Copyright (c) 2008
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Module description
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: efh $
  29      =3   * Revision:         $Revision: 29359 $
  30      =3   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_TYPEDEFS_H_
  21      =2  
  22      =2  /****************************************************************************/
  23      =2  /*                              EXTERNALS                                   */
  24      =2  /****************************************************************************/
  25      =2  
  26      =2  /* Make _ZW_VERSION_ public, so that Z-Wave application code can access it.              */
  27      =2  /* Use it from C-code like this:                                                         */
  28      =2  extern unsigned char _ZW_VERSION_;      /* referenced with = (WORD)&_ZW_VERSION_);       */
  29      =2  /* Make _APP_VERSION_ public, so that Z-Wave protocol code can access it.                */
  30      =2  /* Use it from C-code like this:                                                         */
  31      =2  extern unsigned char _APP_VERSION_;     /* referenced with = (WORD)&_APP_VERSION_);      */
  32      =2  
  33      =2  /****************************************************************************/
  34      =2  /*                              EXPORTED DATA                               */
  35      =2  /****************************************************************************/
  36      =2  
  37      =2  typedef enum _eNvmModuleType
  38      =2  {
  39      =2    NVM_MODULE_TYPE_UNDEFINED = 0x00,
  40      =2    NVM_MODULE_TYPE_ZW_PHY_LIBRARY = 0x01,
  41      =2    NVM_MODULE_TYPE_ZW_LIBRARY = 0x02,
  42      =2    NVM_MODULE_TYPE_ZW_FRAMEWORK = 0x03,
  43      =2    NVM_MODULE_TYPE_APPLICATION  = 0x04,
  44      =2    NVM_MODULE_TYPE_HOST_APPLICATION = 0x05,
  45      =2    NVM_MODULE_TYPE_SECURITY_2 = 0x06,
  46      =2    NVM_MODULE_TYPE_NVM_DESCRIPTOR = 0xFF
  47      =2  } eNvmModuleType;
  48      =2  
  49      =2  typedef WORD t_NvmModuleSize;
  50      =2  
  51      =2  /* NVM module descriptor for module. Located at the end of NVM module. */
  52      =2  typedef struct s_nvmModuleDescriptor_
  53      =2  {
  54      =2    t_NvmModuleSize wNvmModuleSize;       /* Used to compare with nvmModuleSize for validation   */
  55      =2    eNvmModuleType bNvmModuleType;        /* Used to compare with other firmware module type     */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 755 

  56      =2    WORD wNvmModuleVersion;               /* Used to compare with other firmware version         */
  57      =2  } t_nvmModuleDescriptor;
  58      =2  
  59      =2  typedef t_nvmModuleDescriptor * p_nvmModuleDescriptor;
  60      =2  
  61      =2  /* NVM module structure */
  62      =2  typedef struct s_nvmModule_
  63      =2  {
  64      =2    t_NvmModuleSize nvmModuleSize; /* Offset from &nvmModule where nvmModuleDescriptor structure is placed *
             -/
  65      =2    BYTE nvmModuleVariables[1000];        /* 1000 is just an arbitrary example                   */
  66      =2                                          /* Every field beyond this you must calculate the      */
  67      =2                                          /* pointer to, because the size of the mvmModule       */
  68      =2                                          /* is unknown at compilation time for other versions   */
  69      =2                                          /* of the firmware.                                    */
  70      =2    t_nvmModuleDescriptor nvmModuleDescriptor;
  71      =2  } t_nvmModule;
  72      =2  
  73      =2  typedef t_nvmModule * p_nvmModule;
  74      =2  
  75      =2  /* NVM module update structure */
  76      =2  typedef struct s_nvmModuleUpdate_
  77      =2  {
  78      =2    p_nvmModule nvmModulePtr;   /* Pointer to where nvmModule structure will be placed in NVM memory */
  79      =2    t_NvmModuleSize wNvmModuleSizeOld;    /* Size of the old NVM data from previous version of   */
  80      =2                                          /* firmware, which may not be prepared for keeping old */
  81      =2                                          /* NVM data across firmware updates.                   */
  82      =2                                          /* Set this to the beginning of new NVM data.          */
  83      =2    t_nvmModuleDescriptor nvmModuleDescriptor;
  84      =2  } t_nvmModuleUpdate;
  85      =2  
  86      =2  /* NVM descriptor for OTA firmware update. Located at the end of NVM. */
  87      =2  typedef struct s_nvmDescriptor_
  88      =2  {
  89      =2    WORD manufacturerID;
  90      =2    WORD firmwareID;
  91      =2    WORD productTypeID;
  92      =2    WORD productID;
  93      =2    WORD applicationVersion;
  94      =2    WORD zwaveProtocolVersion;
  95      =2  } t_nvmDescriptor;
  96      =2  
  97      =2  typedef t_nvmDescriptor * p_nvmDescriptor;
  98      =2  
  99      =2  /* Note from Keil knowledgebase: http://www.keil.com/support/docs/901.htm   */
 100      =2  /* "The order is not necessarily taken from the variable declarations, but  */
 101      =2  /* the first use of the variables."                                         */
 102      =2  /* Therefore, when using #pragma ORDER to order variables, declare them in  */
 103      =2  /* the order they should be in a collection. And none of them may be        */
 104      =2  /* declared or known in any way from other header files.                    */
 105      =2  /* As nvmDescriptor shall be loacated last, the declaration below must not  */
 106      =2  /* be done here, when someone includes this file to get knowledge of the    */
 107      =2  /* struct t_nvmDescriptor for its size.                                     */
 108      =2  /* "extern t_nvmDescriptor far nvmDescriptor;"                              */
 109      =2  
 110      =2  /* NVM layout of NVM descriptor for firmware */
 111      =2  extern t_NvmModuleSize far nvmDescriptorSize;
 112      =2  extern t_nvmDescriptor far nvmDescriptor;
 113      =2  extern t_nvmModuleDescriptor far nvmDescriptorDescriptor;
 114      =2  extern WORD far nvmModuleSizeEndMarker; /* Marks the end of NVM (no more NVM modules) with a zero WORD */
 115      =2  
 116      =2  /* The starting address of the segment ?FD?ZW_NVM_DESCRIPTOR (to be used as a constant as (WORD)&_FD_ZW_NV
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 756 

             -M_DESCRIPTOR_S_) */
 117      =2  extern unsigned char _FD_ZW_NVM_DESCRIPTOR_S_;
 118      =2  /* The length of the segment ?FD?ZW_NVM_DESCRIPTOR in bytes (to be used as a constant as (WORD)&_FD_ZW_NVM
             -_DESCRIPTOR_L_) */
 119      =2  extern unsigned char _FD_ZW_NVM_DESCRIPTOR_L_;
 120      =2  
 121      =2  #endif /* _NVM_DESCRIPTOR_H_ */
  29      =1  #include <association_plus.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association and Command Class Multi Channel Association.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _ASSOCIATION_PLUS_H_
   8      =2  #define _ASSOCIATION_PLUS_H_
   9      =2  
  10      =2  /****************************************************************************/
  11      =2  /*                              INCLUDE FILES                               */
  12      =2  /****************************************************************************/
  13      =2  
  14      =2  #include "config_app.h"
   1      =3  /**
   2      =3   * @file config_app.h
   3      =3   * @brief Configuration file for Power Strip sample application.
   4      =3   * @copyright Copyright (c) 2001-2017
   5      =3   * Sigma Designs, Inc.
   6      =3   * All Rights Reserved
   7      =3   * @details This file contains definitions for the Z-Wave+ Framework as well for the sample app.
   8      =3   *
   9      =3   * NOTICE: The file name must not be changed and the two definitions APP_VERSION and APP_REVISION
  10      =3   * must not be changed since they are used by the build environment.
  11      =3   */
  12      =3  #ifndef _CONFIG_APP_H_
  15      =2  #include <agi.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Helper module for Command Class Association Group Information.
   4      =3   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =3   */
   6      =3  
   7      =3  #ifndef _AGI_H_
  16      =2  
  17      =2  /****************************************************************************/
  18      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  19      =2  /****************************************************************************/
  20      =2  
  21      =2  /**
  22      =2   * Size of an association group
  23      =2   */
  24      =2  #define ASSOCIATION_SIZE (MAX_ASSOCIATION_GROUPS * MAX_ASSOCIATION_IN_GROUP)
  25      =2  
  26      =2  /**
  27      =2   * Group id numbers
  28      =2   */
  29      =2  typedef enum _ASSOCIATION_GROUP_ID_
  30      =2  {
  31      =2    ASS_GRP_ID_1 = 1,
  32      =2    ASS_GRP_ID_2,
  33      =2    ASS_GRP_ID_3,
  34      =2    ASS_GRP_ID_4,
  35      =2    ASS_GRP_ID_5,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 757 

  36      =2    ASS_GRP_ID_6,
  37      =2    ASS_GRP_ID_7,
  38      =2    ASS_GRP_ID_8,
  39      =2    ASS_GRP_ID_9
  40      =2  }
  41      =2  ASSOCIATION_GROUP_ID;
  42      =2  
  43      =2  /**
  44      =2   * Structure for mapping root groups to endpoint groups
  45      =2   */
  46      =2  typedef struct _ENDPOINT_ASSOCIATION_MAPPING_
  47      =2  {
  48      =2    BYTE rootGrpId;
  49      =2    BYTE endpoint;
  50      =2    BYTE endpointGrpId;
  51      =2  }
  52      =2  ASSOCIATION_ROOT_GROUP_MAPPING;
  53      =2  
  54      =2  typedef struct _EEOFFS_NVM_TRANSPORT_CAPABILITIES_STRUCT_
  55      =2  {
  56      =2    BYTE security             : 4; /**< bit 0-3 of type security_key_t: 0-NON_KEY,1-S2_UNAUTHENTICATED,
  57      =2                                        2-S2_AUTHENTICATED, 3-S2_ACCESS, 4-S0 (security_key_t)*/
  58      =2    BYTE unused                 : 1; /**< bit 4 */
  59      =2    BYTE BitMultiChannelEncap   : 1; /**< bit 5 */
  60      =2    BYTE unused2                : 1; /**< bit 6 */
  61      =2    BYTE unused3                : 1; /**< bit 7 */
  62      =2  }
  63      =2  EEOFFSET_TRANSPORT_CAPABILITIES_STRUCT;
  64      =2  
  65      =2  /****************************************************************************/
  66      =2  /*                              EXPORTED DATA                               */
  67      =2  /****************************************************************************/
  68      =2  
  69      =2  // Nothing here.
  70      =2  
  71      =2  /****************************************************************************/
  72      =2  /*                           EXPORTED FUNCTIONS                             */
  73      =2  /****************************************************************************/
  74      =2  
  75      =2  /**
  76      =2   * @brief Initializes the Association module. This function must be called by devices not using
  77      =2   * endpoints.
  78      =2   * @param[in] forceClearMem If TRUE, the association NVM will be cleared.
  79      =2   */
  80      =2  void
  81      =2  AssociationInit(BOOL forceClearMem);
  82      =2  
  83      =2  /**
  84      =2   * @brief Initializes the Association module. This function must be called by devices using
  85      =2   * endpoints.
  86      =2   * @param[in] forceClearMem If TRUE, the association NVM will be cleared.
  87      =2   * @param[in] pMapping is used for backwards compatibility to non-Multi Channel
  88      =2   * devices. The mapping is used to configure the Root Device advertises the
  89      =2   * association groups on behalf of Endpoints.
  90      =2   * @param[in] nbrGrp is number of groups in pMapping list.
  91      =2   */
  92      =2  void
  93      =2  AssociationInitEndpointSupport(
  94      =2    BOOL forceClearMem,
  95      =2    ASSOCIATION_ROOT_GROUP_MAPPING* pMapping,
  96      =2    BYTE nbrGrp);
  97      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 758 

  98      =2  /**
  99      =2   * @brief handleAssociationGetnodeList
 100      =2   * Deliver group number node list
 101      =2   * @param[in] groupIden Group ID.
 102      =2   * @param[in] ep Endpoint.
 103      =2   * @param[out] ppList is out double-pointer of type MULTICHAN_NODE_ID deliver node list
 104      =2   * @param[out] pListLen length of list
 105      =2   * @return enum type NODE_LIST_STATUS
 106      =2   */
 107      =2  NODE_LIST_STATUS
 108      =2  handleAssociationGetnodeList(
 109      =2    BYTE groupIden,
 110      =2    BYTE ep,
 111      =2    MULTICHAN_NODE_ID** ppList,
 112      =2    BYTE* pListLen);
 113      =2  
 114      =2  /**
 115      =2   * @brief Removes all nodes or given node(s) from all groups or a given group.
 116      =2   * @details See Association CC and Multi Channel Association CC for details.
 117      =2   * @param[in] groupIden A given group ID.
 118      =2   * @param[in] ep A given endpoint.
 119      =2   * @param[in] pCmd Pointer to the command containing the node IDs to remove.
 120      =2   * @param[in] cmdLength Length of the command.
 121      =2   */
 122      =2  BOOL AssociationRemove(
 123      =2    BYTE groupIden,
 124      =2    BYTE ep,
 125      =2    ZW_MULTI_CHANNEL_ASSOCIATION_REMOVE_1BYTE_V2_FRAME* pCmd,
 126      =2    BYTE cmdLength);
 127      =2  
 128      =2  /**
 129      =2   * @brief Returns the number of association groups for a given endpoint.
 130      =2   * @param[in] endpoint A given endpoint where 0 is the root device.
 131      =2   * @return Number of association groups.
 132      =2   */
 133      =2  BYTE
 134      =2  handleGetMaxAssociationGroups(BYTE endpoint);
 135      =2  
 136      =2  /**
 137      =2   * @brief Handles an incoming (Multi Channel) Association Get command and composes a (Multi Channel)
 138      =2   * Association Report.
 139      =2   * @param[in] endpoint The endpoint from which the associated nodes must be read.
 140      =2   * @param[in] incomingFrame The incoming frame including CC and command.
 141      =2   * @param[out] outgoingFrame The composed frame ready for transmission.
 142      =2   * @param[out] outgoingFrameLength The total length of the outgoing frame.
 143      =2   */
 144      =2  void
 145      =2  AssociationGet(
 146      =2      uint8_t endpoint,
 147      =2      uint8_t * incomingFrame,
 148      =2      uint8_t * outgoingFrame,
 149      =2      uint8_t * outgoingFrameLength);
 150      =2  
 151      =2  /**
 152      =2   * @brief Associates a given node in the given group for a given endpoint.
 153      =2   * @details The endpoint argument specifies the local endpoint for which the association is made.
 154      =2   * E.g. if this device would be a Wall Controller/Switch with 4 endpoints, one for each switch, and
 155      =2   * an association was to be made for endpoint 1. The associated node would receive something when
 156      =2   * button 1 is pressed (if of course button one represents endpoint 1).
 157      =2   * @param groupID ID of the group in which the association must be made.
 158      =2   * @param endpoint Endpoint for which the association must be made.
 159      =2   * @param pNode Pointer to a node with info about node ID, endpoint, etc.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 759 

 160      =2   * @param multiChannelAssociation Specifies whether the associated node ID includes an endpoint or
 161      =2   * not.
 162      =2   * @return TRUE if association is added, FALSE otherwise.
 163      =2   */
 164      =2  BOOL AssociationAddNode(
 165      =2      BYTE groupID,
 166      =2      BYTE endpoint,
 167      =2      MULTICHAN_DEST_NODE_ID* pNode,
 168      =2      BOOL multiChannelAssociation);
 169      =2  
 170      =2  #endif /* _ASSOCIATION_PLUS_H_ */
  30      =1  #include <CommandClassManufacturerSpecific.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Handler for Command Class Manufacturer Specific.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _COMMANDCLASSMANUFACTURERSPECIFIC_H_
  31      =1  #include <ZW_TransportLayer.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport Layer include file.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _TRANSPORT_LAYER_H_
   8      =2  #define _TRANSPORT_LAYER_H_
   9      =2  
  10      =2  /****************************************************************************/
  11      =2  /*                              INCLUDE FILES                               */
  12      =2  /****************************************************************************/
  13      =2  #include <ZW_TransportMulticast.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Handles multicast frames in the Z-Wave Framework.
   4      =3   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =3   */
   6      =3  
   7      =3  #ifndef PRODUCTPLUS_APPLICATIONUTILITIES_ZW_TRANSPORTMULTICAST_H_
   8      =3  #define PRODUCTPLUS_APPLICATIONUTILITIES_ZW_TRANSPORTMULTICAST_H_
   9      =3  
  10      =3  //#ifdef ZW_SECURITY_PROTOCOL
  11      =3  
  12      =3  #include <ZW_stdint.h>
   1      =4  /*
   2      =4   * ZW_stdint.h
   3      =4   *
   4      =4   * Define integer types by their conventional POSIX names [1].
   5      =4   * Note: This is a small subset of the spec, NOT a complete definition.
   6      =4   *
   7      =4   *  [1] http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html
   8      =4   *
   9      =4   *  Created on: 18/01/2013
  10      =4   *      Author: jbu
  11      =4   */
  12      =4  #ifndef ZW_STDINT_H_
  13      =3  #include <ZW_typedefs.h>
   1      =4  /*******************************  ZW_typedefs.h  *******************************
   2      =4   *           #######
   3      =4   *           ##  ##
   4      =4   *           #  ##    ####   #####    #####  ##  ##   #####
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 760 

   5      =4   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =4   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =4   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =4   *          #######   ####   ##  ##  #####       ##  #####
   9      =4   *                                           #####
  10      =4   *          Products that speak Z-Wave work together better
  11      =4   *
  12      =4   *              Copyright (c) 2008
  13      =4   *              Zensys A/S
  14      =4   *              Denmark
  15      =4   *
  16      =4   *              All Rights Reserved
  17      =4   *
  18      =4   *    This source file is subject to the terms and conditions of the
  19      =4   *    Zensys Software License Agreement which restricts the manner
  20      =4   *    in which it may be used.
  21      =4   *
  22      =4   *---------------------------------------------------------------------------
  23      =4   *
  24      =4   * Description: Module description
  25      =4   *
  26      =4   * Author:   Ivar Jeppesen
  27      =4   *
  28      =4   * Last Changed By:  $Author: efh $
  29      =4   * Revision:         $Revision: 29359 $
  30      =4   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =4   *
  32      =4   ****************************************************************************/
  33      =4  #ifndef _ZW_TYPEDEFS_H_
  14      =3  #include <CommandClassAssociation.h>
   1      =4  /**
   2      =4   * @file
   3      =4   * Handler for Command Class Association.
   4      =4   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =4   */
   6      =4  
   7      =4  #ifndef _COMMAND_CLASS_ASSOCIATION_H_
   8      =4  #define _COMMAND_CLASS_ASSOCIATION_H_
   9      =4  
  10      =4  /****************************************************************************/
  11      =4  /*                              INCLUDE FILES                               */
  12      =4  /****************************************************************************/
  13      =4  
  14      =4  #include <ZW_typedefs.h>
   1      =5  /*******************************  ZW_typedefs.h  *******************************
   2      =5   *           #######
   3      =5   *           ##  ##
   4      =5   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =5   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =5   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =5   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =5   *          #######   ####   ##  ##  #####       ##  #####
   9      =5   *                                           #####
  10      =5   *          Products that speak Z-Wave work together better
  11      =5   *
  12      =5   *              Copyright (c) 2008
  13      =5   *              Zensys A/S
  14      =5   *              Denmark
  15      =5   *
  16      =5   *              All Rights Reserved
  17      =5   *
  18      =5   *    This source file is subject to the terms and conditions of the
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 761 

  19      =5   *    Zensys Software License Agreement which restricts the manner
  20      =5   *    in which it may be used.
  21      =5   *
  22      =5   *---------------------------------------------------------------------------
  23      =5   *
  24      =5   * Description: Module description
  25      =5   *
  26      =5   * Author:   Ivar Jeppesen
  27      =5   *
  28      =5   * Last Changed By:  $Author: efh $
  29      =5   * Revision:         $Revision: 29359 $
  30      =5   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =5   *
  32      =5   ****************************************************************************/
  33      =5  #ifndef _ZW_TYPEDEFS_H_
  15      =4  #include <ZW_classcmd.h>
   1      =5  // Generated on: 04.08.2017 15:17:23
   2      =5  /*******************************  ZW_classcmd.h  *******************************
   3      =5   *
   4      =5   * Copyright (c) 2001-2016
   5      =5   * Sigma Designs, Inc.
   6      =5   * All Rights Reserved
   7      =5   *
   8      =5   *---------------------------------------------------------------------------
   9      =5   *
  10      =5   * Description: Device and command class types and definitions.
  11      =5   *
  12      =5   *              Be aware that temporary types and definitions can be present
  13      =5   *              in this header file. Only the types and definitions found in
  14      =5   *              the latest version of the Z-Wave Device Class Specification
  15      =5   *              (doc. nr. 9031002xx) is valid.
  16      =5   *
  17      =5   * Author: JÑrgen Franck
  18      =5   *
  19      =5   * Last Changed By:  $Author: sro $
  20      =5   * Revision:         $Revision: 35619 $
  21      =5   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =5   *
  23      =5   ****************************************************************************/
  24      =5  #ifndef _ZW_CLASSCMD_H_
  16      =4  #include <ZW_TransportEndpoint.h>
   1      =5  /**
   2      =5   * @file
   3      =5   * Transport layer for Multi Channel endpoint functionality.
   4      =5   * @copyright Copyright (c) 2001-2017
   5      =5   * Sigma Designs, Inc.
   6      =5   * All Rights Reserved
   7      =5   */
   8      =5  
   9      =5  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =5  
 385      =5  
  17      =4  
  18      =4  /****************************************************************************/
  19      =4  /*                     EXPORTED TYPES and DEFINITIONS                       */
  20      =4  /****************************************************************************/
  21      =4  
  22      =4  /**
  23      =4   * Returns the version of this CC.
  24      =4   */
  25      =4  #define CommandClassAssociationVersionGet() ASSOCIATION_VERSION_V2
  26      =4  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 762 

  27      =4  /****************************************************************************/
  28      =4  /*                              EXPORTED DATA                               */
  29      =4  /****************************************************************************/
  30      =4  
  31      =4  // Nothing here.
  32      =4  
  33      =4  /****************************************************************************/
  34      =4  /*                           EXPORTED FUNCTIONS                             */
  35      =4  /****************************************************************************/
  36      =4  
  37      =4  /**
  38      =4   * @brief Handler for Command Class Association
  39      =4   * @param[in] rxOpt Receive options.
  40      =4   * @param[in] pCmd Payload from the received frame.
  41      =4   * @param[in] cmdLength Length of the given payload.
  42      =4   * @return receive frame status.
  43      =4   */
  44      =4  received_frame_status_t handleCommandClassAssociation(
  45      =4    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  46      =4    ZW_APPLICATION_TX_BUFFER *pCmd,
  47      =4    uint8_t cmdLength);
  48      =4  
  49      =4  /**
  50      =4   * @brief Returns the latest used association group.
  51      =4   * @return Latest used association group.
  52      =4   */
  53      =4  extern uint8_t ApplicationGetLastActiveGroupId(void);
  54      =4  
  55      =4  /**
  56      =4   * @brief Returns the maximum number of nodes that can be stored in a given association group for
  57      =4   * a given endpoint.
  58      =4   * @param[in] groupIden A given Group ID.
  59      =4   * @param[in] ep A given endpoint.
  60      =4   * @return The maximum number of nodes.
  61      =4   */
  62      =4  extern uint8_t handleGetMaxNodesInGroup(
  63      =4      uint8_t groupIden,
  64      =4      uint8_t ep);
  65      =4  
  66      =4  /**
  67      =4   * @brief Handler for Association Set command.
  68      =4   * @param[in] ep A given endpoint.
  69      =4   * @param[in] pCmd A command containing the nodes to save in the association database.
  70      =4   * @param[in] cmdLength Length of the command.
  71      =4   */
  72      =4  extern BOOL handleAssociationSet(
  73      =4      uint8_t ep,
  74      =4      ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V2_FRAME* pCmd,
  75      =4      uint8_t cmdLength);
  76      =4  
  77      =4  #endif // _COMMAND_CLASS_ASSOCIATION_H_
  15      =3  
  16      =3  /**
  17      =3   * @brief Initiates transmission of a request using multicast if possible. If
  18      =3   * not it falls back to singlecast.
  19      =3   * @param[in] p_data Pointer to data.
  20      =3   * @param[in] data_length Length of data in bytes.
  21      =3   * @param[in] fSupervisionEnable Enable Supervision encapsulation if set to TRUE.
  22      =3   * @param[in] p_nodelist Pointer to a list of nodes.
  23      =3   * @param[in] p_callback Pointer to a callback function which is called for each transmission to a node.
  24      =3   * @return Returns status of transmission.
  25      =3   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 763 

  26      =3  enum ZW_SENDDATA_EX_RETURN_CODES
  27      =3  ZW_TransportMulticast_SendRequest(const uint8_t * const p_data,
  28      =3                                    uint8_t data_length,
  29      =3                                    uint8_t fSupervisionEnable,
  30      =3                                    TRANSMIT_OPTIONS_TYPE_EX * p_nodelist,
  31      =3                                    VOID_CALLBACKFUNC(p_callback)(TRANSMISSION_RESULT * pTransmissionResult)
             -);
  32      =3  
  33      =3  /**
  34      =3   * @brief
  35      =3   */
  36      =3  void ZW_TransportMulticast_clearTimeout(void);
  37      =3  
  38      =3  //#endif /* ZW_SECURITY_PROTOCOL */
  39      =3  
  40      =3  #endif /* PRODUCTPLUS_APPLICATIONUTILITIES_ZW_TRANSPORTMULTICAST_H_ */
  14      =2  #include <ZW_TransportSecProtocol.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Implements functions for transporting frames over the secure protocol Z-Wave Network.
   4      =3   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =3   */
   6      =3  
   7      =3  #ifndef _TRANSPORT_SEC_PROTOCOL_H_
   8      =3  #define _TRANSPORT_SEC_PROTOCOL_H_
   9      =3  
  10      =3  
  11      =3  /****************************************************************************/
  12      =3  /*                              INCLUDE FILES                               */
  13      =3  /****************************************************************************/
  14      =3  #include <ZW_basis_api.h>
   1      =4  /****************************************************************************
   2      =4   *
   3      =4   * Copyright (c) 2001-2013
   4      =4   * Sigma Designs, Inc.
   5      =4   * All Rights Reserved
   6      =4   *
   7      =4   *---------------------------------------------------------------------------
   8      =4   *
   9      =4   * Description: Z-Wave common controller/slave application interface
  10      =4   *
  11      =4   * Author:   Ivar Jeppesen
  12      =4   *
  13      =4   * Last Changed By:  $Author: jsi $
  14      =4   * Revision:         $Revision: 31343 $
  15      =4   * Last Changed:     $Date: 2015-04-17 10:57:14 +0200 (fr, 17 apr 2015) $
  16      =4   *
  17      =4   ****************************************************************************/
  18      =4  /**
  19      =4   * @file ZW_basis_api.h
  20      =4   * @brief Z-Wave common controller/slave application interface.
  21      =4   *
  22      =4   * Z Wave <=> Application general software interface.
  23      =4   */
  24      =4  #ifndef _ZW_BASIS_API_H_
1721      =4  
  15      =3  #include <ZW_transport_api.h>
   1      =4  /****************************************************************************
   2      =4   *
   3      =4   * Copyright (c) 2001-2013
   4      =4   * Sigma Designs, Inc.
   5      =4   * All Rights Reserved
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 764 

   6      =4   *
   7      =4   *---------------------------------------------------------------------------
   8      =4   *
   9      =4   * Description: Z-Wave Transport Application layer interface
  10      =4   *
  11      =4   * Author:   Ivar Jeppesen
  12      =4   *
  13      =4   * Last Changed By:  $Author: jsi $
  14      =4   * Revision:         $Revision: 31344 $
  15      =4   * Last Changed:     $Date: 2015-04-17 13:53:23 +0200 (fr, 17 apr 2015) $
  16      =4   *
  17      =4   ****************************************************************************/
  18      =4  /**
  19      =4   * \file ZW_transport_api.h
  20      =4   * \brief Z-Wave Transport Application layer interface.
  21      =4   *
  22      =4   * The Z Wave transport layer controls transfer of data between Z Wave nodes
  23      =4   * including retransmission, frame check and acknowledgement. The Z Wave
  24      =4   * transport interface includes functions for transfer of data to other Z Wave
  25      =4   * nodes. Application data received from other nodes is handed over to the
  26      =4   * application via the \ref ApplicationCommandHandler function. The ZW_MAX_NODES
  27      =4   * define defines the maximum of nodes possible in a Z Wave network.
  28      =4   */
  29      =4  #ifndef _ZW_TRANSPORT_API_H_
 793      =4  
  16      =3  #include <ZW_TransportEndpoint.h>
   1      =4  /**
   2      =4   * @file
   3      =4   * Transport layer for Multi Channel endpoint functionality.
   4      =4   * @copyright Copyright (c) 2001-2017
   5      =4   * Sigma Designs, Inc.
   6      =4   * All Rights Reserved
   7      =4   */
   8      =4  
   9      =4  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =4  
 385      =4  
  17      =3  
  18      =3  
  19      =3  #define NETWORK_KEY_LENGTH  16
  20      =3  
  21      =3  /****************************************************************************/
  22      =3  /*                       PUBLIC TYPES and DEFINITIONS                       */
  23      =3  /****************************************************************************/
  24      =3  
  25      =3  
  26      =3  typedef struct _eeoffs_network_security_struct_
  27      =3  {
  28      =3  #ifdef ZW_CONTROLLER
  31      =3    uint8_t      EEOFFS_NETWORK_SECURITY_field;
  32      =3    uint8_t      EEOFFS_NETWORK_KEY_START_field[NETWORK_KEY_LENGTH];
  33      =3  //new eeprom variables add only before this magic byte variable (and don't forget to change offset of magi
             -c byte!!!)
  34      =3    uint8_t      EEOFFS_MAGIC_BYTE_field;
  35      =3    uint8_t      EEOFFS_NETWORK_SECURITY_RESERVED_field;  /* Deprecated field used to live here - is it okay
             - to recycle it? */
  36      =3  } EEOFFS_NETWORK_SECURITY_STRUCT;
  37      =3  
  38      =3  
  39      =3  /****************************************************************************/
  40      =3  /*                              IMPORTED DATA                               */
  41      =3  /****************************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 765 

  42      =3  
  43      =3  
  44      =3  /****************************************************************************/
  45      =3  /*                              EXPORTED DATA                               */
  46      =3  /****************************************************************************/
  47      =3  
  48      =3  /**
  49      =3   * Structure holding information about node lists, device option mask and node type.
  50      =3   */
  51      =3  typedef struct
  52      =3  {
  53      =3    uint8_t *cmdClassListNonSecure;            /**< Nonsecure-list of supported command classes, when node c
             -ommunicate by this transport */
  54      =3    uint8_t cmdClassListNonSecureCount;        /**< Count of elements in supported command classes Nonsecure
             --list */
  55      =3    uint8_t *cmdClassListNonSecureIncludedSecure; /**< Nonsecure-list of supported command classes, when nod
             -e communicate by this transport */
  56      =3    uint8_t cmdClassListNonSecureIncludedSecureCount;  /**< Count of elements in supported command classes N
             -onsecure-list */
  57      =3    uint8_t *cmdClassListSecure;               /**< Secure-list of supported command classes, when node comm
             -unicate by this transport */
  58      =3    uint8_t cmdClassListSecureCount;           /**< Count of elements in supported command classes Secure-li
             -st */
  59      =3    uint8_t deviceOptionsMask; /**< See ZW_basic_api.h for ApplicationNodeInformation field deviceOptionMask
             - */
  60      =3    APPL_NODE_TYPE nodeType;
  61      =3  }
  62      =3  APP_NODE_INFORMATION;
  63      =3  
  64      =3  
  65      =3  /****************************************************************************/
  66      =3  /*                     EXPORTED TYPES and DEFINITIONS                       */
  67      =3  /****************************************************************************/
  68      =3  /* params used by ApplicationNodeInformation */
  69      =3  #ifdef slave_routing
  72      =3  #define APPL_NODEPARM_MAX       35
  73      =3  #endif
  74      =3  
  75      =3  
  76      =3  /****************************************************************************/
  77      =3  /*                           IMPORTED FUNCTIONS                             */
  78      =3  /****************************************************************************/
  79      =3  
  80      =3  /**
  81      =3   * Handles commands.
  82      =3   * @param[in] pCmd Pointer to command.
  83      =3   * @param[in] cmdLength Command length.
  84      =3   * @param[in] rxOpt Receive options.
  85      =3   */
  86      =3  extern void Transport_ApplicationCommandHandler(
  87      =3      ZW_APPLICATION_TX_BUFFER *pCmd,
  88      =3      uint8_t cmdLength,
  89      =3      RECEIVE_OPTIONS_TYPE *rxOpt);
  90      =3  
  91      =3  /****************************************************************************/
  92      =3  /*                           EXPORTED FUNCTIONS                             */
  93      =3  /****************************************************************************/
  94      =3  
  95      =3  /**
  96      =3   * This function is not used for anything at the moment, but was added for possible future
  97      =3   * needs. It does nothing and the call for this function in ApplicationInitHW can be omitted
  98      =3   * if desired.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 766 

  99      =3   * @param[in] bStatus Status of hardware initialization.
 100      =3   * @return Returns TRUE always.
 101      =3   */
 102      =3  BOOL Transport_OnApplicationInitHW(uint8_t bStatus);
 103      =3  
 104      =3  /**
 105      =3   * Initializes the framework transport layer. It must be called at the end of
 106      =3   * ApplicationInitSW() in the application.
 107      =3   * @param[in] pAppNode Pointer to a struct holding information about the node.
 108      =3   * @return TRUE if transport layer is initialized, FALSE otherwise.
 109      =3   */
 110      =3  uint8_t Transport_OnApplicationInitSW(
 111      =3      APP_NODE_INFORMATION * pAppNode);
 112      =3  
 113      =3  /**
 114      =3   * Resets the transport layer.
 115      =3   */
 116      =3  void Transport_SetDefault(void);
 117      =3  
 118      =3  /**
 119      =3   * Must be called upon learn mode completion.
 120      =3   * @param[in] nodeID The node ID obtained from learn mode.
 121      =3   * @return
 122      =3   */
 123      =3  uint8_t Transport_OnLearnCompleted(uint8_t nodeID);
 124      =3  
 125      =3  /**
 126      =3   * Returns whether a command class is supported on a given security level.
 127      =3   * @param[in] commandClass Command class to test for.
 128      =3   * @param[in] command Command to test for.
 129      =3   * @param[in] eKey Security level to test upon.
 130      =3   * @return TRUE if the command class is supported, FALSE otherwise.
 131      =3   */
 132      =3  BOOL TransportCmdClassSupported(uint8_t commandClass,
 133      =3                                  uint8_t command,
 134      =3                                  enum SECURITY_KEY eKey);
 135      =3  
 136      =3  /**
 137      =3   * Get highest secure level
 138      =3   * @param protocolSecBits secure bits
 139      =3   * @return secure level
 140      =3   */
 141      =3  enum SECURITY_KEY GetHighestSecureLevel(uint8_t protocolSecBits);
 142      =3  
 143      =3  /**
 144      =3   * Returns the node ID.
 145      =3   * @return Node ID.
 146      =3   */
 147      =3  uint8_t GetNodeId(void);
 148      =3  
 149      =3  /**
 150      =3   * Get command class list from device
 151      =3   * @param[in] included boolean value for node is included
 152      =3   * @param[in] eKey security key of type security_key_t
 153      =3   * @param[in] endpoint 0 - root, 1 - X endpoint number
 154      =3   */
 155      =3  CMD_CLASS_LIST * GetCommandClassList(
 156      =3      BOOL included,
 157      =3      security_key_t eKey,
 158      =3      uint8_t endpoint);
 159      =3  
 160      =3  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 767 

 161      =3   * Kicks the keep awake timer.
 162      =3   */
 163      =3  void ZW_TSP_timer_kick(void);
 164      =3  
 165      =3  #endif /*_TRANSPORT_SEC_PROTOCOL_H_*/
  15      =2  #include <ZW_TransportEndpoint.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Transport layer for Multi Channel endpoint functionality.
   4      =3   * @copyright Copyright (c) 2001-2017
   5      =3   * Sigma Designs, Inc.
   6      =3   * All Rights Reserved
   7      =3   */
   8      =3  
   9      =3  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =3  
 385      =3  
  16      =2  
  17      =2  #endif /*_TRANSPORT_LAYER_H_*/
  32      =1  
  33      =1  
  34      =1  /****************************************************************************/
  35      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  36      =1  /****************************************************************************/
  37      =1  
  38      =1  /* Default values */
  39      =1  #define APPL_MAGIC_VALUE                 0x42
  40      =1  
  41      =1  /*
  42      =1   * WARNING: The following definitions must not be changed across versions of a product since they
  43      =1   * contribute to the structure of the NVM. If they are changed, NVM data will be corrupted.
  44      =1   * - NUMBER_OF_ENDPOINTS_NVM_MAX
  45      =1   * - ASSOCIATION_SIZE_NVM_MAX
  46      =1   */
  47      =1  #define NUMBER_OF_ENDPOINTS_NVM_MAX (3)
  48      =1  
  49      =1  // ASSOCIATION_SIZE_NVM_MAX is the product of MAX_ASSOCIATION_GROUPS and MAX_ASSOCIATION_IN_GROUP
  50      =1  #define ASSOCIATION_SIZE_NVM_MAX    (20)
  51      =1  
  52      =1  #if NUMBER_OF_ENDPOINTS > NUMBER_OF_ENDPOINTS_NVM_MAX
  55      =1  
  56      =1  #if ASSOCIATION_SIZE > ASSOCIATION_SIZE_NVM_MAX
  59      =1  
  60      =1  /***********************************/
  61      =1  /*      Application NVM layout     */
  62      =1  /***********************************/
  63      =1  
  64      =1  /* Note from Keil knowledgebase: http://www.keil.com/support/docs/901.htm   */
  65      =1  /* "The order is not necessarily taken from the variable declarations, but  */
  66      =1  /* the first use of the variables."                                         */
  67      =1  /* Therefore, when using #pragma ORDER to order variables, declare them in  */
  68      =1  /* the order they should be in a collection. And none of them may be        */
  69      =1  /* declared or known in any way from other header files.                    */
  70      =1  
  71      =1  /* NVM layout PowerStrip */
  72      =1  extern t_NvmModuleSize far nvmApplicationSize;
  73      =1  
  74      =1  extern BYTE far EEOFFSET_ASSOCIATION_START_far[(NUMBER_OF_ENDPOINTS_NVM_MAX + 1) * ASSOCIATION_SIZE_NVM_MA
             -X];
  75      =1  extern BYTE far EEOFFSET_ASSOCIATION_MAGIC_far;
  76      =1  extern BYTE far EEOFFSET_ASSOCIATION_ENDPOINT_START_far[(NUMBER_OF_ENDPOINTS_NVM_MAX + 1) * ASSOCIATION_SI
             -ZE_NVM_MAX];
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 768 

  77      =1  extern EEOFFSET_TRANSPORT_CAPABILITIES_STRUCT far EEOFFSET_TRANSPORT_CAPABILITIES_START_far[(NUMBER_OF_END
             -POINTS_NVM_MAX + 1) * ASSOCIATION_SIZE_NVM_MAX];
  78      =1  extern BYTE far EEOFFSET_ASSOCIATION_ENDPOINT_MAGIC_far;
  79      =1  
  80      =1  extern EEOFFS_NETWORK_SECURITY_STRUCT far EEOFFS_SECURITY_RESERVED;
  81      =1  
  82      =1  /*
  83      =1   * The following 2 EEPROM variables is no longer used and should not be used in a new application.
  84      =1   * They're still here to avoid reset when doing firmware update.
  85      =1   */
  86      =1  extern BYTE far EEOFFSET_MAN_SPECIFIC_DEVICE_ID_far[MAN_DEVICE_ID_SIZE];
  87      =1  extern BYTE far EEOFFSET_MAN_SPECIFIC_MAGIC_far;
  88      =1  
  89      =1  extern BYTE far EEOFFSET_TEST_NODE_ID_far;
  90      =1  extern BYTE far EEOFFSET_TEST_POWER_LEVEL_far;
  91      =1  extern BYTE far EEOFFSET_TEST_FRAME_COUNT_SUCCESS_far[2];
  92      =1  extern BYTE far EEOFFSET_TEST_STATUS_far;
  93      =1  extern BYTE far EEOFFSET_TEST_SOURCE_NODE_ID_far;
  94      =1  extern BYTE far EEOFFSET_unused;
  95      =1  extern BYTE far Valve_state_far;
  96      =1  extern BYTE far Flow_state_far;
  97      =1  extern BYTE far Leak_state_far;
  98      =1  extern BYTE far Config_far;
  99      =1  extern BYTE far Meter_config_far;
 100      =1  extern BYTE far EEOFFSET_alarmStatus_far[MAX_NOTIFICATIONS];
 101      =1  extern BYTE far EEOFFSET_MAGIC_far;
 102      =1  extern BYTE far EEOFFSET_MAGIC_SDK_6_70_ASSOCIATION_SECURE_far;
 103      =1  
 104      =1  extern t_nvmModuleDescriptor far nvmApplicationDescriptor;
 105      =1  
 106      =1  /* The starting address of the segment ?FD?EEPROM (to be used as a constant as (WORD)&_FD_EEPROM_S_) */
 107      =1  extern unsigned char _FD_EEPROM_S_;
 108      =1  /* The length of the segment ?FD?EEPROM in bytes (to be used as a constant as (WORD)&_FD_EEPROM_L_) */
 109      =1  extern unsigned char _FD_EEPROM_L_;
 110      =1  
 111      =1  
 112      =1  #endif /* _EEPROM_H_ */
  40          #include <ZW_uart_api.h>
   1      =1  /***************************************************************************
   2      =1  *
   3      =1  * Copyright (c) 2001-2012
   4      =1  * Sigma Designs, Inc.
   5      =1  * All Rights Reserved
   6      =1  *
   7      =1  *---------------------------------------------------------------------------
   8      =1  *
   9      =1  * Description: Interface driver for the 500 Series Z-Wave Single Chip
  10      =1  *              built-in UART's
  11      =1  *
  12      =1  * Author:      Morten Vested Olesen and Jess Christensen
  13      =1  *
  14      =1  * Last Changed By:  $Author: jsi $
  15      =1  * Revision:         $Revision: 30544 $
  16      =1  * Last Changed:     $Date: 2015-01-09 14:18:09 +0100 (fr, 09 jan 2015) $
  17      =1  *
  18      =1  ****************************************************************************/
  19      =1  #ifndef _ZW_UART_API_H_
  20      =1  #define _ZW_UART_API_H_
  21      =1  
  22      =1  /***************************************************************************/
  23      =1  /*                              INCLUDE FILES                              */
  24      =1  /***************************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 769 

  25      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  26      =1  
  27      =1  /****************************************************************************/
  28      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  29      =1  /****************************************************************************/
  30      =1  
  31      =1  /* Macroes for debug output */
  32      =1  #define ZW_DEBUG_BAUD_RATE    1152
  33      =1  
  34      =1  #ifdef ZW_DEBUG
  63      =1  #ifdef ZW_DEBUG_USB
  74      =1  #ifdef ZW_DEBUG_UART0
  83      =1  #define ZW_DEBUG_INIT(baud)
  84      =1  #define ZW_DEBUG_SEND_BYTE(bData)
  85      =1  #define ZW_DEBUG_SEND_NUM(bData)
  86      =1  #define ZW_DEBUG_SEND_WORD_NUM(bData)
  87      =1  #define ZW_DEBUG_SEND_NL()
  88      =1  #define ZW_DEBUG_SEND_STR(STR)
  89      =1  #define ZW_DEBUG_TX_STATUS()
  90      =1  #endif /* ZW_DEBUG_UART0*/
  91      =1  #endif /* ZW_DEBUG_USB */
  92      =1  #endif /* ZW_DEBUG */
  93      =1  
  94      =1  #define ZW_UART0_INIT(baud)        ZW_UART0_init(baud, TRUE, FALSE)
  95      =1  #define ZW_UART0_SEND_BYTE(bData)  ZW_UART0_tx_send_byte(bData)
  96      =1  #define ZW_UART0_SEND_NUM(bData)   ZW_UART0_tx_send_num(bData)
  97      =1  #define ZW_UART0_SEND_DEC(bData)   ZW_UART0_tx_send_dec(bData)
  98      =1  #define ZW_UART0_REC_STATUS        (ZW_UART0_rx_int_get())
  99      =1  #define ZW_UART0_REC_BYTE          (ZW_UART0_rx_data_wait_get())
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 770 

 100      =1  #define ZW_UART0_SEND_NL()         ZW_UART0_tx_send_nl()
 101      =1  #define ZW_UART0_SEND_STATUS       (ZW_UART0_tx_active_get())
 102      =1  #define ZW_UART0_SEND_STR(STR)     (ZW_UART0_tx_send_str(STR))
 103      =1  
 104      =1  #define ZW_UART_INIT(baud)        ZW_UART1_init(baud, TRUE, FALSE)
 105      =1  #define ZW_UART_SEND_BYTE(bData)  ZW_UART1_tx_send_byte(bData)
 106      =1  #define ZW_UART_SEND_NUM(bData)   ZW_UART1_tx_send_num(bData)
 107      =1  #define ZW_UART_REC_STATUS        (ZW_UART1_rx_int_get())
 108      =1  #define ZW_UART_REC_BYTE          (ZW_UART1_rx_data_wait_get())
 109      =1  #define ZW_UART_SEND_NL()         ZW_UART1_tx_send_nl()
 110      =1  #define ZW_UART_SEND_STATUS       (ZW_UART1_tx_int_get())
 111      =1  #define ZW_UART_SEND_STR(STR)     (ZW_UART1_tx_send_str(STR))
 112      =1  
 113      =1  #define UART_RX_DMA_STATUS_LOD       0x80
 114      =1  #define UART_RX_DMA_STATUS_EOR       0x40
 115      =1  #define UART_RX_DMA_STATUS_BUFFULL   0x20
 116      =1  #define UART_RX_DMA_STATUS_RUNNING   0x10
 117      =1  #define UART_RX_DMA_STATUS_CURBUF1   0x02
 118      =1  
 119      =1  #define UART_RX_DMA_LOD_INT_EN       0x20
 120      =1  #define UART_RX_DMA_SWITCH_COUNT     0x08
 121      =1  #define UART_RX_DMA_SWITCH_FULL      0x04
 122      =1  #define UART_RX_DMA_SWITCH_EOR       0x01
 123      =1  
 124      =1  #define UART_TX_DMA_STATUS_SLOW_XRAM 0x80
 125      =1  #define UART_TX_DMA_STATUS_RUNNING   0x10
 126      =1  
 127      =1  /***************************************************************************/
 128      =1  /*                              EXPORTED DATA                              */
 129      =1  /***************************************************************************/
 130      =1  
 131      =1  /***************************************************************************/
 132      =1  /*                           EXPORTED FUNCTIONS                            */
 133      =1  /***************************************************************************/
 134      =1  
 135      =1  /*===============================   ZW_UART_init   =============================
 136      =1  **  Initializes UART0.
 137      =1  **  Optionally enables transmit and/or receive, clears the rx and tx interrupt
 138      =1  **  flags, and sets the specified baudrate.
 139      =1  **
 140      =1  **  Side effects:
 141      =1  **--------------------------------------------------------------------------*/
 142      =1  void             /*RET Nothing */
 143      =1  ZW_UART_init(
 144      =1    WORD bBaudRate,  /* IN  Baud rate / 100 (e.g. 96 => 9600baud/s, 1152 => 115200baud/s) */
 145      =1    BYTE bEnableTx,  /* IN  TRUE: Tx enabled, FALSE: Tx disabled */
 146      =1    BYTE bEnableRx); /* IN  TRUE: Rx enabled, FALSE: Rx disabled */
 147      =1  
 148      =1  /*===============================   ZW_UART0_init   =============================
 149      =1  **  Initializes UART0.
 150      =1  **  Optionally enables transmit and/or receive, clears the rx and tx interrupt
 151      =1  **  flags, and sets the specified baudrate.
 152      =1  **
 153      =1  **  Side effects:
 154      =1  **--------------------------------------------------------------------------*/
 155      =1  void             /*RET Nothing */
 156      =1  ZW_UART0_init(
 157      =1    WORD bBaudRate,  /* IN  Baud rate / 100 (e.g. 96 => 9600baud/s, 1152 => 115200baud/s) */
 158      =1    BYTE bEnableTx,  /* IN  TRUE: Tx enabled, FALSE: Tx disabled */
 159      =1    BYTE bEnableRx); /* IN  TRUE: Rx enabled, FALSE: Rx disabled */
 160      =1  
 161      =1  /*==============================   ZW_UART0_INT_ENABLE  =============================
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 771 

 162      =1  **  Enables UART0 interrupt
 163      =1  **
 164      =1  **    Side effects:
 165      =1  **--------------------------------------------------------------------------*/
 166      =1  
 167      =1  #define ZW_UART0_INT_ENABLE  ES0=1
 168      =1  
 169      =1  /*==============================   ZW_UART0_INT_DISABLE  =============================
 170      =1  **  Disables UART0 interrupt
 171      =1  **
 172      =1  **    Side effects:
 173      =1  **--------------------------------------------------------------------------*/
 174      =1  
 175      =1  #define ZW_UART0_INT_DISABLE ES0=0
 176      =1  
 177      =1  /*===============================   ZW_UART_tx_send_byte   ========================
 178      =1  **  Wait until UART0 Tx is idle, then write data byte to UART0 transmit register
 179      =1  **
 180      =1  **    Side effects: waits until UART0 Tx is idle
 181      =1  **--------------------------------------------------------------------------*/
 182      =1  void
 183      =1  ZW_UART_tx_send_byte(
 184      =1    BYTE bData);  /* IN a byte to written to the UART transmit register.*/
 185      =1  
 186      =1  /*===========================  ZW_UART_tx_send_dec  ==========================
 187      =1  **  Converts a byte to a two-digit decimal ASCII representation,
 188      =1  **  and transmits it over UART0.
 189      =1  **
 190      =1  **    Side effects:
 191      =1  **
 192      =1  **--------------------------------------------------------------------------*/
 193      =1  void            /*RET Nothing */
 194      =1  ZW_UART_tx_send_dec(
 195      =1    BYTE bData);  /* IN data to send */
 196      =1  
 197      =1  /*===========================  ZW_UART_tx_send_hex  ==========================
 198      =1  **  Converts a byte to a two-byte hexadecimal ASCII representation,
 199      =1  **  and transmits it over UART0.
 200      =1  **
 201      =1  **    Side effects:
 202      =1  **
 203      =1  **--------------------------------------------------------------------------*/
 204      =1  #define ZW_UART_tx_send_num ZW_UART_tx_send_hex
 205      =1  
 206      =1  void            /*RET Nothing */
 207      =1  ZW_UART_tx_send_hex(
 208      =1    BYTE bData);   /* IN data to send */
 209      =1  
 210      =1  
 211      =1  /*===========================  ZW_UART_tx_send_w_num  ==========================
 212      =1  **  Converts a WORD to a 4-byte hexadecimal ASCII representation,
 213      =1  **  and transmits it over UART0.
 214      =1  **
 215      =1  **    Side effects:
 216      =1  **
 217      =1  **--------------------------------------------------------------------------*/
 218      =1  void            /*RET Nothing */
 219      =1  ZW_UART_tx_send_w_num(
 220      =1    WORD bData);   /* IN data to send */
 221      =1  
 222      =1  /*============================   ZW_UART_tx_send_str   ========================
 223      =1  **  Transmit a null terminated string over UART0.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 772 

 224      =1  **  The null data is not transmitted.
 225      =1  **
 226      =1  **    Side effects:
 227      =1  **
 228      =1  **--------------------------------------------------------------------------*/
 229      =1  void          /*RET Nothing */
 230      =1  ZW_UART_tx_send_str(
 231      =1    BYTE_P str); /* IN String pointer */
 232      =1  
 233      =1  /*=============================   ZW_UART_send_nl   =========================
 234      =1  **  Transmit CR + LF over UART0.
 235      =1  **
 236      =1  **    Side effects:
 237      =1  **
 238      =1  **--------------------------------------------------------------------------*/
 239      =1  void                /*RET Nothing */
 240      =1  ZW_UART_tx_send_nl( void ); /*IN Nothing */
 241      =1  
 242      =1  /*===============================   ZW_UART_tx_active_get   ========================
 243      =1  **  This function checks if the UART0 is sending.
 244      =1  **
 245      =1  **    Side effects:
 246      =1  **--------------------------------------------------------------------------*/
 247      =1  
 248      =1  BYTE    /* RET zero (0x00): UART0 tx is idle,
 249      =1           *     non-zero:  : UART0 tx is active     */
 250      =1  ZW_UART_tx_active_get(void);
 251      =1  
 252      =1  
 253      =1  /*===============================   ZW_UART0_rx_int_clear   ========================
 254      =1  **  Clear the UART0 Rx interrupt flag
 255      =1  **
 256      =1  **    Side effects:
 257      =1  **--------------------------------------------------------------------------*/
 258      =1  void
 259      =1  ZW_UART0_rx_int_clear(void);
 260      =1  
 261      =1  /*=============================   ZW_UART0_tx_int_clear   ========================
 262      =1  **  Clear the UART0 Tx interrupt flag
 263      =1  **
 264      =1  **    Side effects:
 265      =1  **--------------------------------------------------------------------------*/
 266      =1  void
 267      =1  ZW_UART0_tx_int_clear(void);
 268      =1  
 269      =1  /*===============================   ZW_UART0_rx_data_wait_get   ========================
 270      =1  **  Read the content of the UART0 receive register
 271      =1  **
 272      =1  **    Side effects:
 273      =1  **--------------------------------------------------------------------------*/
 274      =1  BYTE    /* RET the content of the receive register*/
 275      =1  ZW_UART0_rx_data_wait_get(void);
 276      =1  
 277      =1  /*===============================   ZW_UART0_rx_data_get   ========================
 278      =1  **  Read the content of the UART0 receive register
 279      =1  **
 280      =1  **    Side effects:
 281      =1  **--------------------------------------------------------------------------*/
 282      =1  
 283      =1  BYTE    /* RET the content of the receive register*/
 284      =1  ZW_UART0_rx_data_get(void);
 285      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 773 

 286      =1  /*===============================   ZW_UART0_tx_data_set   ========================
 287      =1  **  Write data byte to UART0 transmit register
 288      =1  **
 289      =1  **    Side effects:
 290      =1  **--------------------------------------------------------------------------*/
 291      =1  void
 292      =1  ZW_UART0_tx_data_set(
 293      =1    BYTE txByte);  /* IN a byte to written to the UART transmit register.*/
 294      =1  
 295      =1  /*===============================   ZW_UART0_tx_send_byte   ========================
 296      =1  **  Wait until UART0 Tx is idle, then write data byte to UART0 transmit register
 297      =1  **
 298      =1  **    Side effects: waits until UART0 Tx is idle
 299      =1  **--------------------------------------------------------------------------*/
 300      =1  void
 301      =1  ZW_UART0_tx_send_byte(
 302      =1    BYTE bData);  /* IN a byte to written to the UART transmit register.*/
 303      =1  
 304      =1  /*===============================   ZW_UART0_rx_enable   ========================
 305      =1  **  Enable the UART receiver and reserve IO.
 306      =1  **
 307      =1  **    Side effects:
 308      =1  **--------------------------------------------------------------------------*/
 309      =1  void
 310      =1  ZW_UART0_rx_enable(
 311      =1    BYTE bState); /* IN  TRUE: enables UART0 rx function, FALSE: disables UART0 rx function */
 312      =1  
 313      =1  /*===============================   ZW_UART0_tx_enable   ========================
 314      =1  **  Enable the UART transmitter and reserve IO.
 315      =1  **
 316      =1  **    Side effects:
 317      =1  **--------------------------------------------------------------------------*/
 318      =1  void
 319      =1  ZW_UART0_tx_enable(
 320      =1    BYTE bState); /* IN  TRUE: enables UART0 tx function, FALSE: disables UART0 tx function */
 321      =1  
 322      =1  
 323      =1  /*===============================   ZW_UART0_tx_int_get   ========================
 324      =1  **  This function checks if the UART0 has sent a byte.
 325      =1  **
 326      =1  **    Side effects:
 327      =1  **--------------------------------------------------------------------------*/
 328      =1  
 329      =1  BYTE    /* RET zero (0x00): tx interrupt flag is not set,
 330      =1           *     non-zero:  : tx interrupt flag is set      */
 331      =1  ZW_UART0_tx_int_get(void);
 332      =1  
 333      =1  /*===============================   ZW_UART0_tx_active_get   ========================
 334      =1  **  This function checks if the UART0 is sending.
 335      =1  **
 336      =1  **    Side effects:
 337      =1  **--------------------------------------------------------------------------*/
 338      =1  
 339      =1  BYTE    /* RET zero (0x00): UART0 tx is idle,
 340      =1           *     non-zero:  : UART0 tx is active     */
 341      =1  ZW_UART0_tx_active_get(void);
 342      =1  
 343      =1  /*===============================   ZW_UART0_rx_int_get   ========================
 344      =1  **  This function checks if the UART0 has received a byte.
 345      =1  **
 346      =1  **    Side effects:
 347      =1  **--------------------------------------------------------------------------*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 774 

 348      =1  BYTE    /* RET zero (0x00): rx interrupt flag is not set,
 349      =1           *     non-zero:  : rx interrupt flag is set      */
 350      =1  ZW_UART0_rx_int_get(void);
 351      =1  
 352      =1  
 353      =1  /*===========================  ZW_UART0_tx_send_dec  ==========================
 354      =1  **  Converts a byte to a two-digit decimal ASCII representation,
 355      =1  **  and transmits it over UART0.
 356      =1  **
 357      =1  **    Side effects:
 358      =1  **
 359      =1  **--------------------------------------------------------------------------*/
 360      =1  void            /*RET Nothing */
 361      =1  ZW_UART0_tx_send_dec(
 362      =1    BYTE bData);  /* IN data to send */
 363      =1  
 364      =1  /*===========================  ZW_UART0_tx_send_hex  ==========================
 365      =1  **  Converts a byte to a two-byte hexadecimal ASCII representation,
 366      =1  **  and transmits it over UART0.
 367      =1  **
 368      =1  **    Side effects:
 369      =1  **
 370      =1  **--------------------------------------------------------------------------*/
 371      =1  #define ZW_UART0_tx_send_num ZW_UART0_tx_send_hex
 372      =1  
 373      =1  void            /*RET Nothing */
 374      =1  ZW_UART0_tx_send_hex(
 375      =1    BYTE bData);   /* IN data to send */
 376      =1  
 377      =1  
 378      =1  /*===========================  ZW_UART0_tx_send_w_num  ==========================
 379      =1  **  Converts a WORD to a 4-byte hexadecimal ASCII representation,
 380      =1  **  and transmits it over UART0.
 381      =1  **
 382      =1  **    Side effects:
 383      =1  **
 384      =1  **--------------------------------------------------------------------------*/
 385      =1  void            /*RET Nothing */
 386      =1  ZW_UART0_tx_send_w_num(
 387      =1    WORD bData);   /* IN data to send */
 388      =1  
 389      =1  /*============================   ZW_UART0_tx_send_str   ========================
 390      =1  **  Transmit a null terminated string over UART0.
 391      =1  **  The null data is not transmitted.
 392      =1  **
 393      =1  **    Side effects:
 394      =1  **
 395      =1  **--------------------------------------------------------------------------*/
 396      =1  void          /*RET Nothing */
 397      =1  ZW_UART0_tx_send_str(
 398      =1    BYTE_P str); /* IN String pointer */
 399      =1  
 400      =1  /*=============================   ZW_UART0_send_nl   =========================
 401      =1  **  Transmit CR + LF over UART0.
 402      =1  **
 403      =1  **    Side effects:
 404      =1  **
 405      =1  **--------------------------------------------------------------------------*/
 406      =1  void                /*RET Nothing */
 407      =1  ZW_UART0_tx_send_nl( void ); /*IN Nothing */
 408      =1  
 409      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 775 

 410      =1  /*===============================   ZW_UART1_init   =============================
 411      =1  **  Initializes UART1.
 412      =1  **  Optionally enables transmit and/or receive, clears the rx and tx interrupt
 413      =1  **  flags, and sets the specified baudrate.
 414      =1  **
 415      =1  **  Side effects:
 416      =1  **--------------------------------------------------------------------------*/
 417      =1  void             /*RET Nothing */
 418      =1  ZW_UART1_init(
 419      =1    WORD bBaudRate,  /* IN  Baud rate / 100 (e.g. 96 => 9600baud/s, 1152 => 115200baud/s) */
 420      =1    BYTE bEnableTx,  /* IN  TRUE: Tx enabled, FALSE: Tx disabled */
 421      =1    BYTE bEnableRx); /* IN  TRUE: Rx enabled, FALSE: Rx disabled */
 422      =1  
 423      =1  /*==============================   ZW_UART1_INT_ENABLE  =============================
 424      =1  **  Enables UART0 interrupt
 425      =1  **
 426      =1  **    Side effects:
 427      =1  **--------------------------------------------------------------------------*/
 428      =1  
 429      =1  #define ZW_UART1_INT_ENABLE  ES1=1
 430      =1  
 431      =1  /*==============================   ZW_UART1_INT_DISABLE  =============================
 432      =1  **  Disables UART0 interrupt
 433      =1  **
 434      =1  **    Side effects:
 435      =1  **--------------------------------------------------------------------------*/
 436      =1  
 437      =1  #define ZW_UART1_INT_DISABLE ES1=0
 438      =1  
 439      =1  /*===============================   ZW_UART1_rx_int_clear   ========================
 440      =1  **  Clear the UART1 Rx interrupt flag
 441      =1  **
 442      =1  **    Side effects:
 443      =1  **--------------------------------------------------------------------------*/
 444      =1  void
 445      =1  ZW_UART1_rx_int_clear(void);
 446      =1  
 447      =1  /*=============================   ZW_UART1_tx_int_clear   ========================
 448      =1  **  Clear the UART1 Tx interrupt flag
 449      =1  **
 450      =1  **    Side effects:
 451      =1  **--------------------------------------------------------------------------*/
 452      =1  void
 453      =1  ZW_UART1_tx_int_clear(void);
 454      =1  
 455      =1  /*===============================   ZW_UART1_rx_data_wait_get   ========================
 456      =1  **  Read the content of the UART1 receive register
 457      =1  **
 458      =1  **    Side effects:
 459      =1  **--------------------------------------------------------------------------*/
 460      =1  BYTE    /* RET the content of the receive register*/
 461      =1  ZW_UART1_rx_data_wait_get(void);
 462      =1  
 463      =1  /*===============================   ZW_UART1_rx_data_get   ========================
 464      =1  **  Read the content of the UART1 receive register
 465      =1  **
 466      =1  **    Side effects:
 467      =1  **--------------------------------------------------------------------------*/
 468      =1  
 469      =1  BYTE    /* RET the content of the receive register*/
 470      =1  ZW_UART1_rx_data_get(void);
 471      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 776 

 472      =1  /*===============================   ZW_UART1_tx_data_set   ========================
 473      =1  **  Write data byte to UART1 transmit register
 474      =1  **
 475      =1  **    Side effects:
 476      =1  **--------------------------------------------------------------------------*/
 477      =1  void
 478      =1  ZW_UART1_tx_data_set(
 479      =1    BYTE txByte);  /* IN a byte to written to the UART transmit register.*/
 480      =1  
 481      =1  /*===============================   ZW_UART1_tx_send_byte   ========================
 482      =1  **  Wait until UART1 Tx is idle, then write data byte to UART1 transmit register
 483      =1  **
 484      =1  **    Side effects: waits until UART1 Tx is idle
 485      =1  **--------------------------------------------------------------------------*/
 486      =1  void
 487      =1  ZW_UART1_tx_send_byte(
 488      =1    BYTE bData);  /* IN a byte to written to the UART transmit register.*/
 489      =1  
 490      =1  /*===============================   ZW_UART1_rx_enable   ========================
 491      =1  **  Enable the UART receiver and reserve IO.
 492      =1  **
 493      =1  **    Side effects:
 494      =1  **--------------------------------------------------------------------------*/
 495      =1  void
 496      =1  ZW_UART1_rx_enable(
 497      =1    BYTE bState); /* IN  TRUE: enables UART1 rx function, FALSE: disables UART1 rx function */
 498      =1  
 499      =1  /*===============================   ZW_UART1_tx_enable   ========================
 500      =1  **  Enable the UART transmitter and reserve IO.
 501      =1  **
 502      =1  **    Side effects:
 503      =1  **--------------------------------------------------------------------------*/
 504      =1  void
 505      =1  ZW_UART1_tx_enable(
 506      =1    BYTE bState); /* IN  TRUE: enables UART1 tx function, FALSE: disables UART1 tx function */
 507      =1  
 508      =1  
 509      =1  /*===============================   ZW_UART1_tx_int_get   ========================
 510      =1  **  This function checks if the UART1 has sent a byte.
 511      =1  **
 512      =1  **    Side effects:
 513      =1  **--------------------------------------------------------------------------*/
 514      =1  
 515      =1  BYTE    /* RET zero (0x00): tx interrupt flag is not set,
 516      =1           *     non-zero:  : tx interrupt flag is set      */
 517      =1  ZW_UART1_tx_int_get(void);
 518      =1  
 519      =1  /*===============================   ZW_UART1_tx_active_get   ========================
 520      =1  **  This function checks if the UART1 is sending.
 521      =1  **
 522      =1  **    Side effects:
 523      =1  **--------------------------------------------------------------------------*/
 524      =1  
 525      =1  BYTE    /* RET zero (0x00): UART1 tx is idle,
 526      =1           *     non-zero:  : UART1 tx is active     */
 527      =1  ZW_UART1_tx_active_get(void);
 528      =1  
 529      =1  
 530      =1  /*===============================   ZW_UART1_rx_int_get   ========================
 531      =1  **  This function checks if the UART1 has received a byte.
 532      =1  **
 533      =1  **    Side effects:
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 777 

 534      =1  **--------------------------------------------------------------------------*/
 535      =1  BYTE    /* RET zero (0x00): rx interrupt flag is not set,
 536      =1           *     non-zero:  : rx interrupt flag is set      */
 537      =1  ZW_UART1_rx_int_get(void);
 538      =1  
 539      =1  
 540      =1  /*===========================  ZW_UART1_tx_send_num  ==========================
 541      =1  **  Converts a byte to a two-byte hexadecimal ASCII representation,
 542      =1  **  and transmits it over UART1.
 543      =1  **
 544      =1  **
 545      =1  **    Side effects:
 546      =1  **
 547      =1  **--------------------------------------------------------------------------*/
 548      =1  #define ZW_UART1_tx_send_num ZW_UART1_tx_send_hex
 549      =1  
 550      =1  void            /*RET Nothing */
 551      =1  ZW_UART1_tx_send_hex(BYTE bData);   /* IN data to send */
 552      =1  
 553      =1  /*===========================  ZW_UART1_tx_send_num  ==========================
 554      =1  **  Converts a WORD to a 4-byte hexadecimal ASCII representation,
 555      =1  **  and transmits it over UART1.
 556      =1  **
 557      =1  **    Side effects:
 558      =1  **
 559      =1  **--------------------------------------------------------------------------*/
 560      =1  void            /*RET Nothing */
 561      =1  ZW_UART1_tx_send_w_num(
 562      =1    WORD bData);   /* IN data to send */
 563      =1  
 564      =1  /*============================   ZW_UART1_tx_send_str   ========================
 565      =1  **  Transmit a null terminated string over UART1.
 566      =1  **  The null data is not transmitted.
 567      =1  **
 568      =1  **    Side effects:
 569      =1  **
 570      =1  **--------------------------------------------------------------------------*/
 571      =1  void          /*RET Nothing */
 572      =1  ZW_UART1_tx_send_str(BYTE_P str); /* IN String pointer */
 573      =1  
 574      =1  /*=============================   ZW_UART1_send_nl   =========================
 575      =1  **  Transmit CR + LF over UART1.
 576      =1  **
 577      =1  **    Side effects:
 578      =1  **
 579      =1  **--------------------------------------------------------------------------*/
 580      =1  void                /*RET Nothing */
 581      =1  ZW_UART1_tx_send_nl( void ); /*IN Nothing */
 582      =1  
 583      =1  
 584      =1  /*--------------------------------------------------------------------------
 585      =1  **--------------------------------------------------------------------------
 586      =1  **
 587      =1  **  WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING
 588      =1  
 589      =1  ** The following API calls are obsolete and should NOT be used.
 590      =1  ** The API calls will be removed in a later developers kit release.
 591      =1  **
 592      =1  **--------------------------------------------------------------------------
 593      =1  **--------------------------------------------------------------------------*/
 594      =1  
 595      =1  /*===============================   ZW_UART0_tx_dma_int_byte_count  ========================
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 778 

 596      =1  **  Set interrupt tx byte count
 597      =1  **
 598      =1  **  Parameters
 599      =1  **
 600      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed to the UART
 601      =1  **                    Disabled when set to 0x00 which is default after reset
 602      =1  **   Side effects:
 603      =1  **--------------------------------------------------------------------------*/
 604      =1  void                    /*RET Nothing */
 605      =1  ZW_UART0_tx_dma_int_byte_count( BYTE bByteCount);   /*IN Number of tx'ed bytes */
 606      =1  
 607      =1  /*===============================   ZW_UART0_tx_dma_inter_byte_delay  ========================
 608      =1  **  Set Tx inter byte delay
 609      =1  **  Parameters
 610      =1  **
 611      =1  **   bDelay:   IN Sets the inter byte delay 0x00 no delay (default after reset)
 612      =1  **                                          0x01  125ns delay
 613      =1  **                                          0x02  250ns delay
 614      =1  **                                                 :
 615      =1  **                                          0x0F 1875ns delay
 616      =1  **   Side effects:
 617      =1  **--------------------------------------------------------------------------*/
 618      =1  void                    /*RET Nothing */
 619      =1  ZW_UART0_tx_dma_inter_byte_delay( BYTE bDelay);   /*IN inter byte delay */
 620      =1  
 621      =1  /*===============================   ZW_UART0_tx_dma_data  ========================
 622      =1  **  Set buffer address and length and then start UART0 DMA
 623      =1  **  Parameters
 624      =1  **
 625      =1  **   pbAddress:  IN pointer to Tx buffer in lower 4kB XRAM
 626      =1  **   bBufferLen: IN length of Tx buffer in bytes
 627      =1  **
 628      =1  **   Side effects:
 629      =1  **       Discards any ongoing UART TX DMA process
 630      =1  **--------------------------------------------------------------------------*/
 631      =1  void                    /*RET Nothing */
 632      =1  ZW_UART0_tx_dma_data( XBYTE *pbAddress,    /*IN buffer base address */
 633      =1                        BYTE bBufferLen); /*IN buffer len */
 634      =1  
 635      =1  /*===============================   ZW_UART0_tx_dma_status  ========================
 636      =1  **  If the UART0 DMA process is ongoing this function Returns the status of this ongoing
 637      =1  **  process. Returns the status of the latest UART0 DMA process if the DMA has stopped.
 638      =1  **
 639      =1  **  Returned values:
 640      =1  **       UART_TX_DMA_STATUS_SLOW_XRAM: DMA can not keep up with configured inter byte
 641      =1  **                                     process because of congestion in XRAM access
 642      =1  **       UART_TX_DMA_STATUS_RUNNING:   The DMA is transferring data to UART0
 643      =1  **
 644      =1  **  Parameters: None
 645      =1  **
 646      =1  **   Side effects:
 647      =1  **--------------------------------------------------------------------------*/
 648      =1  BYTE                    /*RET status */
 649      =1  ZW_UART0_tx_dma_status(void); /*IN Nothing */
 650      =1  
 651      =1  /*===============================   ZW_UART0_tx_dma_bytes_transferred  ========================
 652      =1  **  Returns the number of bytes that has been transferred to UART0 from XRAM for the ongoing DMA
 653      =1  **  process. If no transfer is ongoing the number of bytes that has been transferred to UART0
 654      =1  **  from XRAM from the latest process is returned.
 655      =1  **
 656      =1  **  Parameters: None
 657      =1  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 779 

 658      =1  **   Side effects:
 659      =1  **--------------------------------------------------------------------------*/
 660      =1  BYTE                    /*RET bytes transferred */
 661      =1  ZW_UART0_tx_dma_bytes_transferred(void); /*IN Nothing */
 662      =1  
 663      =1  /*===============================   ZW_UART0_tx_dma_cancel  ========================
 664      =1  **  Cancels any ongoing DMA process and brings UART TX DMA to idle state
 665      =1  **
 666      =1  **  Parameters: None
 667      =1  **
 668      =1  **   Side effects:
 669      =1  **--------------------------------------------------------------------------*/
 670      =1  void                    /*RET nothing */
 671      =1  ZW_UART0_tx_dma_cancel(void); /*IN Nothing */
 672      =1  
 673      =1  
 674      =1  
 675      =1  /*===============================   ZW_UART0_rx_dma_init  ===============================
 676      =1  **  Initialize the buffers and setup for the UART0 Rx DMA
 677      =1  **
 678      =1  **  Parameters
 679      =1  **     pbAddress:  IN pointer to the base address of the two Rx buffers
 680      =1  **     bBufLength: IN length of UART0 RX Buffer - must be greater than 0
 681      =1  **     bBitMask:   IN bit mask contains the setting of the Rx DMA
 682      =1  **                      UART_RX_DMA_LOD_INT_EN    Enable Loss Of Data interrupt
 683      =1  **                      UART_RX_DMA_SWITCH_COUNT  Switch buffer when byte count is reached
 684      =1  **                      UART_RX_DMA_SWITCH_FULL   Switch buffer when buffer full
 685      =1  **                      UART_RX_DMA_SWITCH_EOR    Switch buffer when EOR is received
 686      =1  **
 687      =1  **    Side effects:
 688      =1  **       Discards any ongoing UART RX DMA process
 689      =1  **       Clears status information
 690      =1  **-------------------------------------------------------------------------------------*/
 691      =1  void                    /*RET Nothing */
 692      =1  ZW_UART0_rx_dma_init( XBYTE *pbAddress,   /* IN pointer to base address of RX buffers */
 693      =1                        BYTE bBufLength, /* IN byte length of each of the two buffers*/
 694      =1                        BYTE bBitMask);  /* IN see above */
 695      =1  
 696      =1  /*===============================   ZW_UART0_rx_dma_int_byte_count  ===============================
 697      =1  **  Set interrupt rx byte count. A value of 0x00 means disabled
 698      =1  **
 699      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed from the UART
 700      =1  **                  Disabled when set to 0x00
 701      =1  **    Side effects:
 702      =1  **-------------------------------------------------------------------------------------*/
 703      =1  void                    /*RET Nothing */
 704      =1  ZW_UART0_rx_dma_int_byte_count(BYTE bByteCount); /*IN */
 705      =1  
 706      =1  
 707      =1  /*===============================   ZW_UART0_rx_dma_status  ========================
 708      =1  **  If the UART0 RX DMA process is ongoing this function returns the status of this ongoing
 709      =1  **  process. Returns the status of the latest UART0 RX DMA process if the DMA has stopped.
 710      =1  **
 711      =1  **  Returned values:
 712      =1  **       UART_RX_DMA_STATUS_EOR:     The DMA switched RX buffer because it has
 713      =1  **                                   recieved an End of Record char
 714      =1  **       UART_RX_DMA_STATUS_LOD:     DMA can not keep up with the speed of the incomming data
 715      =1  **       UART_RX_DMA_STATUS_CURBUF1: Set when the UART0 RX DMA currently is transferring data
 716      =1  **                                   from buffer 1. When cleared the UART0 RX DMA currently is
 717      =1  **                                   transferring data from buffer 0
 718      =1  **       UART_RX_DMA_STATUS_BUFFULL: Set when a buffer has been filled to the limit
 719      =1  **       UART_RX_DMA_STATUS_RUNNING: The DMA is enabled
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 780 

 720      =1  **
 721      =1  **  Parameters: None
 722      =1  **
 723      =1  **   Side effects:
 724      =1  **--------------------------------------------------------------------------*/
 725      =1  BYTE                    /*RET status */
 726      =1  ZW_UART0_rx_dma_status(void); /*IN Nothing */
 727      =1  
 728      =1  /*===============================   ZW_UART0_rx_dma_bytes_transferred  ========================
 729      =1  **  Returns the number of bytes that has been transferred to UART0 to XRAM for the ongoing DMA
 730      =1  **  process.
 731      =1  **
 732      =1  **  Parameters: None
 733      =1  **
 734      =1  **   Side effects:
 735      =1  **--------------------------------------------------------------------------*/
 736      =1  BYTE                    /*RET bytes transferred */
 737      =1  ZW_UART0_rx_dma_bytes_transferred(void); /*IN Nothing */
 738      =1  
 739      =1  /*===============================   ZW_UART0_rx_dma_cancel  ========================
 740      =1  **  Cancels any ongoing DMA process and brings UART RX DMA to idle state
 741      =1  **
 742      =1  **  Parameters: None
 743      =1  **
 744      =1  **   Side effects:
 745      =1  **--------------------------------------------------------------------------*/
 746      =1  void                    /*RET nothing */
 747      =1  ZW_UART0_rx_dma_cancel(void); /*IN Nothing */
 748      =1  
 749      =1  /*=============================   ZW_UART0_rx_dma_eor_set =======================
 750      =1  **
 751      =1  **  Sets the End of Record (EoR) character. The EoR function makes it possible
 752      =1  **  to switch receive buffer when a certain character is recieved, .e.g Linefeed.
 753      =1  **  UART_RX_DMA_SWITCH_EOR must have been set in the ZW_UART0_rx_dma_init call
 754      =1  **  for the function to be enabled.
 755      =1  **
 756      =1  **  Parameters:
 757      =1  **
 758      =1  **   Side effects:
 759      =1  **--------------------------------------------------------------------------*/
 760      =1  void                    /*RET nothing */
 761      =1  ZW_UART0_rx_dma_eor_set(BYTE bChar);  /*IN EoR character */
 762      =1  
 763      =1  /*=====================   ZW_UART0_rx_dma_byte_count_enable  =====================
 764      =1  **
 765      =1  **  Enables or disabled the function switch buffer when a certain byte count is
 766      =1  **  reached
 767      =1  **
 768      =1  **  Parameters: None
 769      =1  **
 770      =1  **   Side effects:
 771      =1  **--------------------------------------------------------------------------*/
 772      =1  void                    /*RET nothing */
 773      =1  ZW_UART0_rx_dma_byte_count_enable(BYTE bEnable); /* IN TRUE bute count switch is enabled */
 774      =1  
 775      =1  
 776      =1  
 777      =1  
 778      =1  
 779      =1  /*===============================   ZW_UART1_tx_dma_int_byte_count  ========================
 780      =1  **  Set interrupt tx byte count
 781      =1  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 781 

 782      =1  **  Parameters
 783      =1  **
 784      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed to the UART
 785      =1  **                    Disabled when set to 0x00
 786      =1  **   Side effects:
 787      =1  **--------------------------------------------------------------------------*/
 788      =1  void                    /*RET Nothing */
 789      =1  ZW_UART1_tx_dma_int_byte_count( BYTE bByteCount);   /*IN Number of tx'ed bytes */
 790      =1  
 791      =1  /*===============================   ZW_UART1_tx_dma_inter_byte_delay  ========================
 792      =1  **  Set Tx inter byte delay
 793      =1  **  Parameters
 794      =1  **
 795      =1  **   bDelay:   IN Sets the inter byte delay 0x00 no delay (default after reset)
 796      =1  **                                          0x01  125ns delay
 797      =1  **                                          0x02  250ns delay
 798      =1  **                                                 :
 799      =1  **                                          0x0F 1875ns delay
 800      =1  **   Side effects:
 801      =1  **--------------------------------------------------------------------------*/
 802      =1  void                    /*RET Nothing */
 803      =1  ZW_UART1_tx_dma_inter_byte_delay( BYTE bDelay);   /*IN inter byte delay */
 804      =1  
 805      =1  /*===============================   ZW_UART1_tx_dma_data  ========================
 806      =1  **  Set buffer address and length and then start UART1 DMA
 807      =1  **  Parameters
 808      =1  **
 809      =1  **   pbAddress:  IN pointer to Tx buffer in lower 4kB XRAM
 810      =1  **   bBufferLen: IN length of Tx buffer in bytes
 811      =1  **
 812      =1  **   Side effects:
 813      =1  **       Discards any ongoing UART TX DMA process
 814      =1  **--------------------------------------------------------------------------*/
 815      =1  void                    /*RET Nothing */
 816      =1  ZW_UART1_tx_dma_data( XBYTE *pbAddress,    /*IN buffer base address */
 817      =1                        BYTE bBufferLen); /*IN buffer len */
 818      =1  
 819      =1  /*===============================   ZW_UART1_tx_dma_status  ========================
 820      =1  **  If the UART1 DMA process is ongoing this function Returns the status of this ongoing
 821      =1  **  process. Returns the status of the latest UART1 DMA process if the DMA has stopped.
 822      =1  **
 823      =1  **  Returned values:
 824      =1  **       UART_TX_DMA_STATUS_SLOW_XRAM: DMA can not keep up with configured inter byte
 825      =1  **                                     process because of congestion in XRAM access
 826      =1  **       UART_TX_DMA_STATUS_RUNNING:   The DMA is transferring data to UART1
 827      =1  **
 828      =1  **  Parameters: None
 829      =1  **
 830      =1  **   Side effects:
 831      =1  **--------------------------------------------------------------------------*/
 832      =1  BYTE                    /*RET status */
 833      =1  ZW_UART1_tx_dma_status(void); /*IN Nothing */
 834      =1  
 835      =1  /*===============================   ZW_UART1_tx_dma_bytes_transferred  ========================
 836      =1  **  Returns the number of bytes that has been transferred to UART1 from XRAM for the ongoing DMA
 837      =1  **  process. If no transfer is ongoing the number of bytes that has been transferred to UART1
 838      =1  **  from XRAM from the latest process is returned.
 839      =1  **
 840      =1  **  Parameters: None
 841      =1  **
 842      =1  **   Side effects:
 843      =1  **--------------------------------------------------------------------------*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 782 

 844      =1  BYTE                    /*RET bytes transferred */
 845      =1  ZW_UART1_tx_dma_bytes_transferred(void); /*IN Nothing */
 846      =1  
 847      =1  /*===============================   ZW_UART1_tx_dma_cancel  ========================
 848      =1  **  Cancels any ongoing DMA process and brings UART TX DMA to idle state
 849      =1  **
 850      =1  **  Parameters: None
 851      =1  **
 852      =1  **   Side effects:
 853      =1  **--------------------------------------------------------------------------*/
 854      =1  void                    /*RET nothing */
 855      =1  ZW_UART1_tx_dma_cancel(void); /*IN Nothing */
 856      =1  
 857      =1  /*===============================   ZW_UART1_rx_dma_init  ===============================
 858      =1  **  Initialize the buffers and setup for the UART1 Rx DMA
 859      =1  **
 860      =1  **  Parameters
 861      =1  **     pbAddress:  IN pointer to the base address of the two Rx buffers
 862      =1  **     bBufLength: IN length of UART1 RX Buffer - must be greater than 0
 863      =1  **     bBitMap:    IN bit mask contains the setting of the Rx DMA
 864      =1  **                      UART_RX_DMA_LOD_INT_EN    Enable Loss Of Data interrupt
 865      =1  **                      UART_RX_DMA_SWITCH_COUNT  Switch buffer when byte count is reached
 866      =1  **                      UART_RX_DMA_SWITCH_FULL   Switch buffer when buffer full
 867      =1  **
 868      =1  **    Side effects:
 869      =1  **       Discards any ongoing UART RX DMA process
 870      =1  **       Clears status information
 871      =1  **-------------------------------------------------------------------------------------*/
 872      =1  void                    /*RET Nothing */
 873      =1  ZW_UART1_rx_dma_init( XBYTE *pbAddress, /*IN pointer to base address of RX buffers */
 874      =1                        BYTE bBufLength, /* IN buffer byte length */
 875      =1                        BYTE bBitMap); /*IN the rx dmaBuf's threshold value of the almost full flag*/
 876      =1  
 877      =1  /*===============================   ZW_UART1_rx_dma_int_byte_count  ===============================
 878      =1  **  Set interrupt rx byte count. A value of 0x00 means disabled
 879      =1  **
 880      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed from the UART
 881      =1  **                  Disabled when set to 0x00
 882      =1  **    Side effects:
 883      =1  **-------------------------------------------------------------------------------------*/
 884      =1  void                    /*RET Nothing */
 885      =1  ZW_UART1_rx_dma_int_byte_count(BYTE bByteCount); /*IN */
 886      =1  
 887      =1  /*===============================   ZW_UART1_rx_dma_status  ========================
 888      =1  **  If the UART1 RX DMA process is ongoing this function returns the status of this ongoing
 889      =1  **  process. Returns the status of the latest UART1 RX DMA process if the DMA has stopped.
 890      =1  **
 891      =1  **  Returned values:
 892      =1  **       UART_RX_DMA_STATUS_EOR:     The DMA switched RX buffer because it has
 893      =1  **                                   recieved an End of Record char
 894      =1  **       UART_RX_DMA_STATUS_LOD:     DMA can not keep up with the speed of the incomming data
 895      =1  **       UART_RX_DMA_STATUS_CURBUF1: Set when the UART1 RX DMA currently is transferring data
 896      =1  **                                   from buffer 1. When cleared the UART1 RX DMA currently is
 897      =1  **                                   transferring data from buffer 0
 898      =1  **       UART_RX_DMA_STATUS_BUFFULL: Set when a buffer has been filled to the limit
 899      =1  **       UART_RX_DMA_STATUS_RUNNING: The DMA is enabled
 900      =1  **
 901      =1  **  Parameters: None
 902      =1  **
 903      =1  **   Side effects:
 904      =1  **--------------------------------------------------------------------------*/
 905      =1  BYTE                    /*RET status */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 783 

 906      =1  ZW_UART1_rx_dma_status(void); /*IN Nothing */
 907      =1  
 908      =1  /*===============================   ZW_UART1_rx_dma_bytes_transferred  ========================
 909      =1  **  Returns the number of bytes that has been transferred to UART1 to XRAM for the ongoing DMA
 910      =1  **  process.
 911      =1  **
 912      =1  **  Parameters: None
 913      =1  **
 914      =1  **   Side effects:
 915      =1  **--------------------------------------------------------------------------*/
 916      =1  BYTE                    /*RET bytes transferred */
 917      =1  ZW_UART1_rx_dma_bytes_transferred(void); /*IN Nothing */
 918      =1  
 919      =1  /*===============================   ZW_UART1_rx_dma_cancel  ========================
 920      =1  **  Cancels any ongoing DMA process and brings UART RX DMA to idle state
 921      =1  **
 922      =1  **  Parameters: None
 923      =1  **
 924      =1  **   Side effects:
 925      =1  **--------------------------------------------------------------------------*/
 926      =1  void                    /*RET nothing */
 927      =1  ZW_UART1_rx_dma_cancel(void); /*IN Nothing */
 928      =1  
 929      =1  
 930      =1  /*=============================   ZW_UART1_rx_dma_eor_set =======================
 931      =1  **
 932      =1  **  Sets the End of Record (EoR) character. The EoR function makes it possible
 933      =1  **  to switch receive buffer when a certain character is recieved, .e.g Linefeed.
 934      =1  **  UART_RX_DMA_SWITCH_EOR must have been set in the ZW_UART1_rx_dma_init call
 935      =1  **  for the function to be enabled.
 936      =1  **
 937      =1  **  Parameters:
 938      =1  **
 939      =1  **   Side effects:
 940      =1  **--------------------------------------------------------------------------*/
 941      =1  void                    /*RET nothing */
 942      =1  ZW_UART1_rx_dma_eor_set(BYTE bChar);  /*IN EoR character */
 943      =1  
 944      =1  /*=====================   ZW_UART1_rx_dma_byte_count_enable  =====================
 945      =1  **
 946      =1  **  Enables or disabled the function switch buffer when a certain byte count is
 947      =1  **  reached
 948      =1  **
 949      =1  **  Parameters: None
 950      =1  **
 951      =1  **   Side effects:
 952      =1  **--------------------------------------------------------------------------*/
 953      =1  void                    /*RET nothing */
 954      =1  ZW_UART1_rx_dma_byte_count_enable(BYTE bEnable); /* IN TRUE bute count switch is enabled */
 955      =1  
 956      =1  
 957      =1  #endif /* _ZW_UART_API_H_ */
  41          #include <misc.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Miscellaneous stuff.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _MISC_H_
   8      =1  #define _MISC_H_
   9      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 784 

  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  //#include <ZW_classcmd.h>
  15      =1  #include <ZW_transport_api.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2013
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: Z-Wave Transport Application layer interface
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: jsi $
  14      =2   * Revision:         $Revision: 31344 $
  15      =2   * Last Changed:     $Date: 2015-04-17 13:53:23 +0200 (fr, 17 apr 2015) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  /**
  19      =2   * \file ZW_transport_api.h
  20      =2   * \brief Z-Wave Transport Application layer interface.
  21      =2   *
  22      =2   * The Z Wave transport layer controls transfer of data between Z Wave nodes
  23      =2   * including retransmission, frame check and acknowledgement. The Z Wave
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 785 

  24      =2   * transport interface includes functions for transfer of data to other Z Wave
  25      =2   * nodes. Application data received from other nodes is handed over to the
  26      =2   * application via the \ref ApplicationCommandHandler function. The ZW_MAX_NODES
  27      =2   * define defines the maximum of nodes possible in a Z Wave network.
  28      =2   */
  29      =2  #ifndef _ZW_TRANSPORT_API_H_
 793      =2  
  16      =1  
  17      =1  /****************************************************************************/
  18      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  19      =1  /****************************************************************************/
  20      =1  
  21      =1  /**
  22      =1   * This define holds a default set of transmit options.
  23      =1   */
  24      =1  #define ZWAVE_PLUS_TX_OPTIONS (TRANSMIT_OPTION_ACK | TRANSMIT_OPTION_AUTO_ROUTE | TRANSMIT_OPTION_EXPLORE)
  25      =1  
  26      =1  /**
  27      =1   * This define forces the function into the interbank call table. It is needed
  28      =1   * for every function which will be passed as a function pointer.
  29      =1   */
  30      =1  #ifdef __C51__
  31      =1  #define PCB(func) code const void (code * func ## _p)(void) = &func; \
  32      =1   void func
  33      =1  #else
  36      =1  
  37      =1  #ifdef __C51__
  38      =1  #define PCB_BOOL(func) code const BOOL (code * func ## _p)(void) = &func; \
  39      =1   BOOL func
  40      =1  #else
  43      =1  
  44      =1  #ifdef __C51__
  45      =1  #define PCB_UINT8_T(func) code const uint8_t (code * func ## _p)(void) = &func; \
  46      =1   uint8_t func
  47      =1  #else
  50      =1  
  51      =1  /**
  52      =1   * This define forces the function into the interbank call table. It is needed
  53      =1   * for every function which will be passed as a function pointer.
  54      =1   * "Static" keyword is added.
  55      =1   */
  56      =1  #ifdef __C51__
  57      =1  #define SPCB(func) code const void (code * func ## _p)(void) = &func; \
  58      =1   static void func
  59      =1  #else
  62      =1  
  63      =1  
  64      =1  /****************************************************************************/
  65      =1  /*                              EXPORTED DATA                               */
  66      =1  /****************************************************************************/
  67      =1  
  68      =1  
  69      =1  /****************************************************************************/
  70      =1  /*                           EXPORTED FUNCTIONS                             */
  71      =1  /****************************************************************************/
  72      =1  
  73      =1  
  74      =1  
  75      =1  
  76      =1  /*=============================   GetMyNodeID  ===============================
  77      =1  **
  78      =1  **        Get the device node ID
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 786 

  79      =1  **  Side effects: None
  80      =1  **
  81      =1  **------------------------------------------------------------------------------*/
  82      =1  extern BYTE GetMyNodeID(void);
  83      =1  
  84      =1  #endif /*#ifndef _MISC_H_*/
  42          #ifdef BOOTLOADER_ENABLED
  43          #include <ota_util.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Header file for ota_util.c. This module implements functions used in combination with command
   4      =1   * class firmware update.
   5      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   6      =1   */
   7      =1  
   8      =1  #ifndef _OTA_UTIL_H_
   9      =1  #define _OTA_UTIL_H_
  10      =1  
  11      =1  /****************************************************************************/
  12      =1  /*                              INCLUDE FILES                               */
  13      =1  /****************************************************************************/
  14      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  15      =1  #include <CommandClassFirmwareUpdate.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Handler for Command Class Firmware Update.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   *
   6      =2   * @brief Current version do not support FIRMWARE_UPDATE_ACTIVATION_SET_V4 why
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 787 

   7      =2   * FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V4 return status ERROR_ACTIVATION_FIRMWARE.
   8      =2   * Customers who need this feature can modify command class source and header
   9      =2   * files for the specific purpose.
  10      =2   */
  11      =2  
  12      =2  #ifndef _COMMANDCLASSFIRMWAREUPDATE_H_
  13      =2  #define _COMMANDCLASSFIRMWAREUPDATE_H_
  14      =2  
  15      =2  /****************************************************************************/
  16      =2  /*                              INCLUDE FILES                               */
  17      =2  /****************************************************************************/
  18      =2  #include <CommandClass.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Common types and definitions for all command classes.
   4      =3   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =3   */
   6      =3  
   7      =3  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  19      =2  #include <ZW_TransportEndpoint.h>
   1      =3  /**
   2      =3   * @file
   3      =3   * Transport layer for Multi Channel endpoint functionality.
   4      =3   * @copyright Copyright (c) 2001-2017
   5      =3   * Sigma Designs, Inc.
   6      =3   * All Rights Reserved
   7      =3   */
   8      =3  
   9      =3  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =3  
 385      =3  
  20      =2  #include <ZW_classcmd.h>
   1      =3  // Generated on: 04.08.2017 15:17:23
   2      =3  /*******************************  ZW_classcmd.h  *******************************
   3      =3   *
   4      =3   * Copyright (c) 2001-2016
   5      =3   * Sigma Designs, Inc.
   6      =3   * All Rights Reserved
   7      =3   *
   8      =3   *---------------------------------------------------------------------------
   9      =3   *
  10      =3   * Description: Device and command class types and definitions.
  11      =3   *
  12      =3   *              Be aware that temporary types and definitions can be present
  13      =3   *              in this header file. Only the types and definitions found in
  14      =3   *              the latest version of the Z-Wave Device Class Specification
  15      =3   *              (doc. nr. 9031002xx) is valid.
  16      =3   *
  17      =3   * Author: JÑrgen Franck
  18      =3   *
  19      =3   * Last Changed By:  $Author: sro $
  20      =3   * Revision:         $Revision: 35619 $
  21      =3   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =3   *
  23      =3   ****************************************************************************/
  24      =3  #ifndef _ZW_CLASSCMD_H_
  21      =2  
  22      =2  /****************************************************************************/
  23      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  24      =2  /****************************************************************************/
  25      =2  
  26      =2  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 788 

  27      =2   * Returns the version of this CC.
  28      =2   */
  29      =2  #define CommandClassFirmwareUpdateMdVersionGet() FIRMWARE_UPDATE_MD_VERSION_V4
  30      =2  
  31      =2  /**
  32      =2   * Information struct for firmware update.
  33      =2   */
  34      =2  typedef struct
  35      =2  {
  36      =2    uint16_t manufacturerId;
  37      =2    uint16_t firmwareId;
  38      =2    uint16_t checksum;
  39      =2  }
  40      =2  FW_UPDATE_GET;
  41      =2  
  42      =2  
  43      =2  typedef enum
  44      =2  {
  45      =2    INVALID_COMBINATION = 0x00,
  46      =2    ERROR_ACTIVATION_FIRMWARE = 0x01,
  47      =2    FWU_SUCCESS = 0xFF
  48      =2  } e_firmware_update_activation_status_report_update_status;
  49      =2  /****************************************************************************/
  50      =2  /*                              EXPORTED DATA                               */
  51      =2  /****************************************************************************/
  52      =2  
  53      =2  
  54      =2  /****************************************************************************/
  55      =2  /*                           EXPORTED FUNCTIONS                             */
  56      =2  /****************************************************************************/
  57      =2  
  58      =2  /**
  59      =2   * @brief handleCommandClassFWUpdate
  60      =2   * @param[in] *rxOpt Frame header info.
  61      =2   * @param[in] *pCmd Payload from the received frame, the union should be used to access
  62      =2   * the fields.
  63      =2   * @param[in] cmdLength IN Number of command bytes including the command.
  64      =2   * @return receive frame status.
  65      =2   */
  66      =2  received_frame_status_t handleCommandClassFWUpdate(
  67      =2    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  68      =2    ZW_APPLICATION_TX_BUFFER *pCmd,
  69      =2    BYTE cmdLength
  70      =2  );
  71      =2  
  72      =2  
  73      =2  
  74      =2  /**
  75      =2   * @brief handleCmdClassFirmwareUpdateMdReport
  76      =2   * Application function to handle incomming frame Firmware update  MD Report
  77      =2   * @param crc16Result
  78      =2   * @param firmwareUpdateReportNumber
  79      =2   * @param properties
  80      =2   * @param pData
  81      =2   * @param fw_actualFrameSize
  82      =2   */
  83      =2  extern void
  84      =2  handleCmdClassFirmwareUpdateMdReport( WORD crc16Result,
  85      =2                                        WORD firmwareUpdateReportNumber,
  86      =2                                        BYTE properties,
  87      =2                                        BYTE* pData,
  88      =2                                        BYTE fw_actualFrameSize);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 789 

  89      =2  
  90      =2  
  91      =2  
  92      =2  /**
  93      =2   * @brief Send a Md status report
  94      =2   * @param[in] rxOpt receive options
  95      =2   * @param[in] status Values used for Firmware Update Md Status Report command
  96      =2   * FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR_V3     0x00
  97      =2   * FIRMWARE_UPDATE_MD_STATUS_REPORT_UNABLE_TO_RECEIVE_V3                            0x01
  98      =2   * FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_STORED_V3                          0xFE
  99      =2   * FIRMWARE_UPDATE_MD_STATUS_REPORT_SUCCESSFULLY_V3                                 0xFF
 100      =2   * @param[in] waitTime field MUST report the time that is needed before the receiving
 101      =2   * node again becomes available for communication after the transfer of an image. The unit is
 102      =2   * the second. The value 0 (zero) indicates that the node is already available again. The value
 103      =2   * 0 (zero) MUST be returned when the Status field carries the values 0x00, 0x01 and 0xFE.
 104      =2   * The value 0xFFFF is reserved for future use and MUST NOT be returned.
 105      =2   * @param[out] pCbFunc function pointer returning status on the job.
 106      =2   * @return JOB_STATUS..
 107      =2   */
 108      =2  JOB_STATUS
 109      =2  CmdClassFirmwareUpdateMdStatusReport(
 110      =2    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
 111      =2    BYTE status,
 112      =2    WORD waitTime ,
 113      =2    VOID_CALLBACKFUNC(pCbFunc)(TRANSMISSION_RESULT * pTransmissionResult));
 114      =2  
 115      =2  
 116      =2  /**
 117      =2   * @brief Send command Firmware update  MD Get
 118      =2   * @param[in] rxOpt receive options
 119      =2   * @param[in] firmwareUpdateReportNumber current frame number.
 120      =2   * @return JOB_STATUS
 121      =2   */
 122      =2  JOB_STATUS
 123      =2  CmdClassFirmwareUpdateMdGet( RECEIVE_OPTIONS_TYPE_EX *rxOpt, WORD firmwareUpdateReportNumber );
 124      =2  
 125      =2  
 126      =2  /**
 127      =2   * @brief Remote request for firmware update
 128      =2   * @return TRUE: we are ready to firmware update. FALSE: reject it.
 129      =2   */
 130      =2  extern BOOL
 131      =2  RemoteReqAuthentication();
 132      =2  
 133      =2  
 134      =2  /**
 135      =2   * @brief Authentication fw to update.
 136      =2   * @param[in] rxOpt receive options of type RECEIVE_OPTIONS_TYPE_EX
 137      =2   * @param[in] fwTarget is firmware target to update.
 138      =2   * @param[in] fragmetSize size of incoming fw-frame.
 139      =2   * @param[in] pData pointer to firmware information of type FW_UPDATE_GET
 140      =2   * @param[out] pStatus pointer of including values FIRMWARE_UPDATE_MD_REQUEST_REPORT_INVALID_COMBINATION_V
             -3,
 141      =2   * FIRMWARE_UPDATE_MD_REQUEST_REPORT_REQUIRES_AUTHENTICATION_V3 or
 142      =2   * FIRMWARE_UPDATE_MD_REQUEST_REPORT_VALID_COMBINATION_V3
 143      =2   */
 144      =2  extern void
 145      =2  handleCmdClassFirmwareUpdateMdReqGet(
 146      =2    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
 147      =2    BYTE fwTarget,
 148      =2    WORD fragmetSize,
 149      =2    FW_UPDATE_GET* pData,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 790 

 150      =2    BYTE* pStatus);
 151      =2  
 152      =2  
 153      =2  /**
 154      =2   * @brief ZCB_CmdClassFwUpdateMdReqReport
 155      =2   * Callback function receive status on Send data FIRMWARE_UPDATE_MD_REQUEST_REPORT_V3
 156      =2   * @param txStatus : TRANSMIT_COMPLETE_OK, TRANSMIT_COMPLETE_NO_ACK, TRANSMIT_COMPLETE_FAIL...
 157      =2   * @return description..
 158      =2   */
 159      =2  extern void
 160      =2  ZCB_CmdClassFwUpdateMdReqReport(BYTE txStatus);
 161      =2  
 162      =2  /**
 163      =2   * Returns the maximum supported fragment size.
 164      =2   *
 165      =2   * The maximum fragment Size field MUST report the maximum fragment size that a device is able to
 166      =2   * receive at a time. A sending device MAY send shorter fragments. The fragment size actually used
 167      =2   * is indicated in the Firmware Update Meta Data Request Get Command and confirmed in the Firmware
 168      =2   * Update Meta Data Request Report Command.
 169      =2   * @return Maximum fragment size.
 170      =2   */
 171      =2  extern uint16_t handleCommandClassFirmwareUpdateMaxFragmentSize();
 172      =2  
 173      =2  /**
 174      =2   * @brief handleFirmWareIdGet
 175      =2   * This function called by the framework to get firmware Id of target n (0 => is device FW ID)
 176      =2   * @param[in] n the target index (0,1..N-1)
 177      =2   * @return target n firmware ID
 178      =2   */
 179      =2  extern WORD
 180      =2  handleFirmWareIdGet(BYTE n);
 181      =2  
 182      =2  #endif /* _COMMANDCLASSFIRMWAREUPDATE_H_*/
 183      =2  
  16      =1  
  17      =1  /****************************************************************************/
  18      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  19      =1  /****************************************************************************/
  20      =1  
  21      =1  /**
  22      =1   * The OTA status is used to tell the application the result of the firmware update.
  23      =1   */
  24      =1  typedef enum
  25      =1  {
  26      =1    OTA_STATUS_DONE = 0,
  27      =1    OTA_STATUS_ABORT = 1,
  28      =1    OTA_STATUS_TIMEOUT = 2
  29      =1  } OTA_STATUS;
  30      =1  
  31      =1  /**
  32      =1   * Defines for WaitTime field used in commmand = FIRMWARE_UPDATE_MD_STATUS_REPORT.
  33      =1   * The WaitTime field MUST report the time that is needed before the receiving
  34      =1   * node again becomes available for communication after the transfer of an image.
  35      =1   * The unit is the second.
  36      =1   * This changed to 30 sec. for protocol to extract image etc. Please see TO# 07591.
  37      =1   */
  38      =1  #ifndef WAITTIME_FWU_SUCCESS
  39      =1  #define WAITTIME_FWU_SUCCESS 30
  40      =1  #endif
  41      =1  #ifndef WAITTIME_FWU_FAIL
  42      =1  #define WAITTIME_FWU_FAIL 2
  43      =1  #endif
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 791 

  44      =1  /****************************************************************************/
  45      =1  /*                              EXPORTED DATA                               */
  46      =1  /****************************************************************************/
  47      =1  
  48      =1  
  49      =1  /****************************************************************************/
  50      =1  /*                           EXPORTED FUNCTIONS                             */
  51      =1  /****************************************************************************/
  52      =1  
  53      =1  
  54      =1  
  55      =1  /**
  56      =1   * @brief OtaInit
  57      =1   * Initialization of Firmware Update module "OTA" has  3 input parameters pOtaStart, pOtaExtWrite
  58      =1   * and pOtaFinish.
  59      =1   * Input parameters pOtaStart and pOtaFinish is used to inform Application of
  60      =1   * the status of firmware update and give application possibility to control
  61      =1   * start of firmware update. It is possible to not call OtaInit and the process
  62      =1   * run without the application with standard parameters for txOption. Input parameter
  63      =1   * pOtaExtWrite is used to update host firmware.
  64      =1   *
  65      =1   * @param[in] pOtaStart function pointer is called when firmware update is ready to
  66      =1   * start. As input parameters are firmware-Id of the firmware to be upgraded and CRC of the firmware.
  67      =1   *  pOtaStart can be set to NULL and OTA process is started automatically.
  68      =1   * @param[in] pOtaExtWrite function pointer is called when fw-data is received for extern host.
  69      =1   * Write process end with following call pOtaExtWrite( NULL, 0) to application.
  70      =1   * Can be initialized to NULL if firmware only is for the device.
  71      =1   * @param[in] pOtaFinish function pointer is called when the firmware update proces
  72      =1   * i finish. As input parameter is status of the process of type OTA_STATUS.
  73      =1   * If set to NULL, ota_util module will reboot when process is finish.
  74      =1   * @return 1 if NVM is supported else 0.
  75      =1   */
  76      =1  BYTE
  77      =1  OtaInit(
  78      =1    BOOL (CODE *pOtaStart)(WORD fwId, WORD CRC),
  79      =1    VOID_CALLBACKFUNC(pOtaExtWrite)( BYTE *pData, BYTE dataLen),
  80      =1    VOID_CALLBACKFUNC(pOtaFinish)(BYTE val));
  81      =1  
  82      =1  
  83      =1  /**
  84      =1   * @brief OtaHostFWU_WriteFinish
  85      =1   * Host call function when finish reading incoming frame. Ota start to get
  86      =1   * next frame.
  87      =1   */
  88      =1  void
  89      =1  OtaHostFWU_WriteFinish(void);
  90      =1  
  91      =1  
  92      =1  /**
  93      =1   * @brief OtaHostFWU_Status
  94      =1   * Application call this function when firmware update process is finish. Status
  95      =1   * of the process is send to the controller.
  96      =1   * @param[in] userReboot Tell user to reboot host on successfull firmware update.
  97      =1   * @param[in] status of the process. TRUE - successfull, FALSE - process failed.
  98      =1   */
  99      =1  void
 100      =1  OtaHostFWU_Status( BOOL userReboot, BOOL status );
 101      =1  
 102      =1  /**
 103      =1   * Function to query if an OTA firmware update is currently in progress.
 104      =1   * @return TRUE if an update is in progress. Else FALSE.
 105      =1   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 792 

 106      =1  BOOL
 107      =1  Ota_UpdateIsInProgress(void);
 108      =1  
 109      =1  #endif /* _OTA_UTIL_H_ */
 110      =1  
  44          #include <CommandClassFirmwareUpdate.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Firmware Update.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   *
   6      =1   * @brief Current version do not support FIRMWARE_UPDATE_ACTIVATION_SET_V4 why
   7      =1   * FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT_V4 return status ERROR_ACTIVATION_FIRMWARE.
   8      =1   * Customers who need this feature can modify command class source and header
   9      =1   * files for the specific purpose.
  10      =1   */
  11      =1  
  12      =1  #ifndef _COMMANDCLASSFIRMWAREUPDATE_H_
 183      =1  
  45          #endif
  46          #include <nvm_util.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Header file for nvm_util.c. This module implements functions used in for application data
   4      =1   * migration after firmware update. Module should only be used for migration from SDK 6.5x and
   5      =1   * 6.6x. There is no reason to use this module if target is build on SDK 6.7x or later.
   6      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   7      =1   */
   8      =1  
   9      =1  #ifndef _NVM_UTIL_H_
  10      =1  #define _NVM_UTIL_H_
  11      =1  
  12      =1  /****************************************************************************/
  13      =1  /*                              INCLUDE FILES                               */
  14      =1  /****************************************************************************/
  15      =1  #include <ZW_basis_api.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2013
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: Z-Wave common controller/slave application interface
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: jsi $
  14      =2   * Revision:         $Revision: 31343 $
  15      =2   * Last Changed:     $Date: 2015-04-17 10:57:14 +0200 (fr, 17 apr 2015) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  /**
  19      =2   * @file ZW_basis_api.h
  20      =2   * @brief Z-Wave common controller/slave application interface.
  21      =2   *
  22      =2   * Z Wave <=> Application general software interface.
  23      =2   */
  24      =2  #ifndef _ZW_BASIS_API_H_
1721      =2  
  16      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 793 

  17      =1  /****************************************************************************/
  18      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  19      =1  /****************************************************************************/
  20      =1  #define EEPROM_MAGIC_BYTE_VALUE     0x56 // Magic value used in SDK 6.51 and 6.60 when security is support
             -ed.
  21      =1  
  22      =1  /****************************************************************************/
  23      =1  /*                              EXPORTED DATA                               */
  24      =1  /****************************************************************************/
  25      =1  
  26      =1  
  27      =1  /****************************************************************************/
  28      =1  /*                           EXPORTED FUNCTIONS                             */
  29      =1  /****************************************************************************/
  30      =1  
  31      =1  
  32      =1  
  33      =1  /**
  34      =1   * @brief NvmInit
  35      =1   *
  36      =1   * Initialization of application nvm area.
  37      =1   * This function will ensure the layout of application area of the nvm are 
  38      =1   * according to the design stated in the firmware.
  39      =1   *
  40      =1   * @param[in] nvmStatus NVM_STATUS_INITIALIZE will fill the application nvm area with default data.
  41      =1   *                      NVM_STATUS_VALID will do nothing.
  42      =1   *                      NVM_STATUS_UPGRADED will migrate data from previous firmware to match the 
  43      =1   *                      newly installed firmware.
  44      =1   */
  45      =1  void
  46      =1  NvmInit(
  47      =1    ZW_NVM_STATUS nvmStatus
  48      =1  );
  49      =1  
  50      =1  #endif /* _NVM_UTIL_H_ */
  51      =1  
  47          /*IO control*/
  48          #include <io_zdp03a.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * A helper module which eases implementation of an application on the ZDP03A development board.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _IO_ZDP03A_H_
   8      =1  #define _IO_ZDP03A_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 794 

  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ev_man.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Framework event manager, handling all event types for the framework
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _ev_man_H_
   8      =2  #define _ev_man_H_
   9      =2  
  10      =2  /****************************************************************************/
  11      =2  /*                              INCLUDE FILES                               */
  12      =2  /****************************************************************************/
  13      =2  #include <ZW_basis_api.h>
   1      =3  /****************************************************************************
   2      =3   *
   3      =3   * Copyright (c) 2001-2013
   4      =3   * Sigma Designs, Inc.
   5      =3   * All Rights Reserved
   6      =3   *
   7      =3   *---------------------------------------------------------------------------
   8      =3   *
   9      =3   * Description: Z-Wave common controller/slave application interface
  10      =3   *
  11      =3   * Author:   Ivar Jeppesen
  12      =3   *
  13      =3   * Last Changed By:  $Author: jsi $
  14      =3   * Revision:         $Revision: 31343 $
  15      =3   * Last Changed:     $Date: 2015-04-17 10:57:14 +0200 (fr, 17 apr 2015) $
  16      =3   *
  17      =3   ****************************************************************************/
  18      =3  /**
  19      =3   * @file ZW_basis_api.h
  20      =3   * @brief Z-Wave common controller/slave application interface.
  21      =3   *
  22      =3   * Z Wave <=> Application general software interface.
  23      =3   */
  24      =3  #ifndef _ZW_BASIS_API_H_
1721      =3  
  14      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 795 

  15      =2  /****************************************************************************/
  16      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  17      =2  /****************************************************************************/
  18      =2  
  19      =2  #ifndef EVENT_QUEUE_BUFFER_SIZE
  20      =2  /**
  21      =2   * Size of event queue buffer
  22      =2   */
  23      =2  #define EVENT_QUEUE_BUFFER_SIZE 5
  24      =2  #endif /* EVENT_QUEUE_BUFFER_SIZE*/
  25      =2  
  26      =2  #define DEFINE_EVENT_WAKEUP ZW_WAKEUP_RESET
  27      =2  /**
  28      =2   * Event groups for application state event machine
  29      =2   */
  30      =2  #define DEFINE_EVENT_KEYPAD_NBR 0x10
  31      =2  #define DEFINE_EVENT_IR_NBR 0x20
  32      =2  #define DEFINE_EVENT_SYSTEM_NBR 0x30
  33      =2  
  34      =2  /**
  35      =2   * Event group for keys 0x40 - 0x6F
  36      =2   */
  37      =2  #define DEFINE_EVENT_KEY_NBR 0x40
  38      =2  #define DEFINE_EVENT_APP_NBR 0x70
  39      =2  
  40      =2  
  41      =2  /**
  42      =2   * System events
  43      =2   */
  44      =2  typedef enum _EVENT_SYSTEM_
  45      =2  {
  46      =2    EVENT_SYSTEM_RESET = DEFINE_EVENT_SYSTEM_NBR,
  47      =2    EVENT_SYSTEM_LEARNMODE_START,
  48      =2    EVENT_SYSTEM_LEARNMODE_FINISH,
  49      =2    EVENT_SYSTEM_LEARNMODE_END,
  50      =2    EVENT_SYSTEM_WATCHDOG_RESET,
  51      =2    EVENT_SYSTEM_OTA_START,
  52      =2    EVENT_SYSTEM_LEARNMODE_DSK_START
  53      =2  } EVENT_SYSTEM;
  54      =2  
  55      =2  
  56      =2  /**
  57      =2   * Protocol wakeup events
  58      =2   */
  59      =2  typedef enum _EVENT_WAKEUP_
  60      =2  {
  61      =2    EVENT_WAKEUP_RESET = DEFINE_EVENT_WAKEUP, /**< Woken up by reset or external int */
  62      =2    EVENT_WAKEUP_WUT,                     /**< Woken up by the WUT timer */
  63      =2    EVENT_WAKEUP_SENSOR,                  /**< Woken up by a wakeup beam */
  64      =2    EVENT_WAKEUP_WATCHDOG,                /**< Reset because of a watchdog timeout */
  65      =2    EVENT_WAKEUP_EXT_INT,                 /**< Woken up by external interrupt */
  66      =2    EVENT_WAKEUP_POR,                     /**< Reset by Power on reset circuit */
  67      =2    EVENT_WAKEUP_USB_SUSPEND,             /**< Woken up by USB suspend */
  68      =2    EVENT_WAKEUP_NVR_ERROR,               /**< Error in protocol NVR read */
  69      =2    EVENT_WAKEUP_SMART_START,             /**< Woken up by time to start smart start */
  70      =2    EVENT_WAKEUP_MAX                      /**< EVENT_WAKEUP_MAX define the last enum type */
  71      =2  } EVENT_WAKEUP;
  72      =2  
  73      =2  /****************************************************************************/
  74      =2  /*                              EXPORTED DATA                               */
  75      =2  /****************************************************************************/
  76      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 796 

  77      =2  
  78      =2  /****************************************************************************/
  79      =2  /*                           EXPORTED FUNCTIONS                             */
  80      =2  /****************************************************************************/
  81      =2  
  82      =2  #define EventSchedulerInit ZAF_eventSchedulerInit
  83      =2  /**
  84      =2   * @brief Initializes event scheduler.
  85      =2   */
  86      =2  void ZAF_eventSchedulerInit(VOID_CALLBACKFUNC(pApplicationStateMachine)(BYTE));
  87      =2  
  88      =2  
  89      =2  #define ZCB_EventSchedulerEventAdd ZCB_eventSchedulerEventAdd
  90      =2  /**
  91      =2   * @brief Adds a given event to the event queue.
  92      =2   * @param event A given event.
  93      =2   * @return TRUE if given event is added to queue, FALSE if queue full.
  94      =2   */
  95      =2  BOOL ZCB_eventSchedulerEventAdd(BYTE event);
  96      =2  
  97      =2  
  98      =2  #define ZCB_EventScheduler ZCB_eventScheduler
  99      =2  /**
 100      =2   * Processes events by calling the function given by pointer in ZAF_eventSchedulerInit().
 101      =2   * @return Returns TRUE if there are more events in the event queue after this call. FALSE
 102      =2   * otherwise.
 103      =2   */
 104      =2  BOOL ZCB_eventScheduler(void);
 105      =2  
 106      =2  /**
 107      =2   * Returns the number of events in the event queue.
 108      =2   * @return Number of events in the event queue.
 109      =2   */
 110      =2  uint8_t ZAF_EventScheduler_GetNumberOfEventsInQueue(void);
 111      =2  
 112      =2  
 113      =2  #define ZCB_EventEnqueue ZAF_jobEnqueue
 114      =2  /**
 115      =2   * @brief Adds a given event to the job queue.
 116      =2   * @param event A given event.
 117      =2   * @return TRUE if given event is added to queue, FALSE if queue full.
 118      =2   */
 119      =2  BOOL ZAF_jobEnqueue(BYTE event);
 120      =2  
 121      =2  
 122      =2  #define ZCB_EventDequeue ZAF_jobDequeue
 123      =2  /**
 124      =2   * @brief Deque job queue
 125      =2   * @param[out] pEvent return event from the queue.
 126      =2   * @return FALSE if queue is empty else TRUE.
 127      =2   */
 128      =2  BOOL ZAF_jobDequeue(BYTE* pEvent);
 129      =2  
 130      =2  
 131      =2  /**
 132      =2   * @brief Get number of events on queue
 133      =2   * @return number of events on queue
 134      =2   */
 135      =2  uint8_t ZAF_jobQueueCount(void);
 136      =2  
 137      =2  #endif /* _ev_man_H_ */
 138      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 797 

 139      =2  
  15      =1  #include <key_driver.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * This key driver offers an interface for easily setting up key actions.
   4      =2   *
   5      =2   * The driver assumes a hardware design similar to the one on ZDP03A.
   6      =2   *
   7      =2   * Here's what this module does and does not:
   8      =2   * - It does configure a given set of keys to trigger on certain events.
   9      =2   * - It does offer the opportunity to add further keys than the six represented
  10      =2   *   on the Z-Wave ZDP03A development platform.
  11      =2   * - It does offer the opportunity to add further key events if you're willing
  12      =2   *   to code a little.
  13      =2   * - It does NOT trigger on several keys simultaneously due to the chip and
  14      =2   *   hardware design.
  15      =2   *
  16      =2   * Ideas for future version:
  17      =2   * - Configure repeat/non-repeat for hold event.
  18      =2   * - Configure hold time.
  19      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
  20      =2   */
  21      =2  
  22      =2  #ifndef KEY_DRIVER_H_
  23      =2  #define KEY_DRIVER_H_
  24      =2  
  25      =2  #include <ZW_typedefs.h>
   1      =3  /*******************************  ZW_typedefs.h  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Products that speak Z-Wave work together better
  11      =3   *
  12      =3   *              Copyright (c) 2008
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Module description
  25      =3   *
  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: efh $
  29      =3   * Revision:         $Revision: 29359 $
  30      =3   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_TYPEDEFS_H_
  26      =2  
  27      =2  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 798 

  28      =2   * Holds the key names and the max number of keys. Add more keys before
  29      =2   * NUMBER_OF_KEYS, if necessary.
  30      =2   */
  31      =2  typedef enum
  32      =2  {
  33      =2    KEY01,         //!< KEY01
  34      =2    KEY02,         //!< KEY02
  35      =2    KEY03,         //!< KEY03
  36      =2    KEY04,         //!< KEY04
  37      =2    KEY05,         //!< KEY05
  38      =2    KEY06,         //!< KEY06
  39      =2    NUMBER_OF_KEYS,//!< NUMBER_OF_KEYS
  40      =2    WHICH_BUTTON_RESET = 0xFF
  41      =2  }
  42      =2  KEY_NAME_T;
  43      =2  
  44      =2  /**
  45      =2   * Holds the key events and the number of events. Add more events before
  46      =2   * NUMBER_OF_KEY_EVENTS, if necessary.
  47      =2   */
  48      =2  typedef enum
  49      =2  {
  50      =2    KEY_DOWN,           //!< KEY_DOWN
  51      =2    KEY_UP,             //!< KEY_UP
  52      =2    KEY_PRESS,          //!< KEY_PRESS
  53      =2    KEY_HOLD,           //!< KEY_HOLD
  54      =2    KEY_TRIPLE_PRESS,   //!< KEY_TRIPLE_PRESS
  55      =2    NUMBER_OF_KEY_EVENTS//!< NUMBER_OF_KEY_EVENTS
  56      =2  }
  57      =2  KEY_EVENT_T;
  58      =2  
  59      =2  /**
  60      =2   * Holds the key events and the number of events. Add more events before
  61      =2   * NUMBER_OF_KEY_EVENTS, if necessary.
  62      =2   */
  63      =2  typedef enum
  64      =2  {
  65      =2    BITFIELD_KEY_DOWN = 0x01,                  //!< KEY_DOWN
  66      =2    BITFIELD_KEY_UP = (0x01 << 1),             //!< KEY_UP
  67      =2    BITFIELD_KEY_PRESS = (0x01 << 2),          //!< KEY_PRESS
  68      =2    BITFIELD_KEY_HOLD = (0x01 << 3),           //!< KEY_HOLD
  69      =2    BITFIELD_KEY_TRIPLE_PRESS = (0x01 << 4),   //!< KEY_TRIPLE_PRESS
  70      =2    BITFIELD_NUMBER_OF_KEY_EVENTS = 5          //!< NUMBER_OF_KEY_EVENTS
  71      =2  }
  72      =2  BITFIELD_KEY_EVENT_T;
  73      =2  
  74      =2  
  75      =2  /**
  76      =2   * @brief Register a callback function for a certain key event.
  77      =2   * @param keyName   The name of the key in correspondence to the enumeration.
  78      =2   * @param keyPin    Physical pin of the chip.
  79      =2   * @param keyEvents  Key event in correspondence to the enumeration.
  80      =2   * @param pCallback Pointer to callback function.
  81      =2   */
  82      =2  void KeyDriverRegisterCallback(KEY_NAME_T keyName, BYTE keyPin, BYTE keyEvents, VOID_CALLBACKFUNC(pCallbac
             -k)(KEY_NAME_T keyName, KEY_EVENT_T keyEvent, BYTE holdCount));
  83      =2  
  84      =2  /**
  85      =2   * @brief Initializes the key driver.
  86      =2   */
  87      =2  BOOL KeyDriverInit(void);
  88      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 799 

  89      =2  #endif /* KEY_DRIVER_H_ */
  16      =1  /****************************************************************************/
  17      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  18      =1  /****************************************************************************/
  19      =1  
  20      =1  #define ZDP03A_KEY_INTP  0x11// P1.1
  21      =1  
  22      =1  /**
  23      =1   * Key manager events
  24      =1   */
  25      =1  typedef enum _EVENT_KEY_
  26      =1  {
  27      =1    EVENT_KEY_B1_DOWN = DEFINE_EVENT_KEY_NBR,
  28      =1    EVENT_KEY_B1_UP,
  29      =1    EVENT_KEY_B1_PRESS,
  30      =1    EVENT_KEY_B1_HELD,
  31      =1    EVENT_KEY_B1_TRIPLE_PRESS,
  32      =1    EVENT_KEY_B1_HELD_10_SEC,
  33      =1    EVENT_KEY_B2_DOWN,
  34      =1    EVENT_KEY_B2_UP,
  35      =1    EVENT_KEY_B2_PRESS,
  36      =1    EVENT_KEY_B2_HELD,
  37      =1    EVENT_KEY_B3_DOWN,
  38      =1    EVENT_KEY_B3_UP,
  39      =1    EVENT_KEY_B3_PRESS,
  40      =1    EVENT_KEY_B3_HELD,
  41      =1    EVENT_KEY_B4_DOWN,
  42      =1    EVENT_KEY_B4_UP,
  43      =1    EVENT_KEY_B4_PRESS,
  44      =1    EVENT_KEY_B4_HELD,
  45      =1    EVENT_KEY_B5_DOWN,
  46      =1    EVENT_KEY_B5_UP,
  47      =1    EVENT_KEY_B5_PRESS,
  48      =1    EVENT_KEY_B5_HELD,
  49      =1    EVENT_KEY_B6_DOWN,
  50      =1    EVENT_KEY_B6_UP,
  51      =1    EVENT_KEY_B6_PRESS,
  52      =1    EVENT_KEY_B6_HELD,
  53      =1    EVENT_KEY_MAX /**< EVENT_KEY_MAX define the last enum type*/
  54      =1  } EVENT_KEY;
  55      =1  
  56      =1  
  57      =1  
  58      =1  /**
  59      =1   * ZDP03A key port enum types
  60      =1   */
  61      =1  typedef enum _ZDP03A_KEY_
  62      =1  {
  63      =1    ZDP03A_KEY_1 = 0x24,
  64      =1    ZDP03A_KEY_2 = 0x36,
  65      =1    ZDP03A_KEY_3 = 0x23, // Do not use this key because it shares pin with SPI for NVM.
  66      =1    ZDP03A_KEY_4 = 0x22,
  67      =1    ZDP03A_KEY_5 = 0x21, // This button is used by the Test Interface as well.
  68      =1    ZDP03A_KEY_6 = 0x34
  69      =1  } ZDP03A_KEY;
  70      =1  
  71      =1  
  72      =1  /**
  73      =1   * ZDP03A Led port enum types
  74      =1   */
  75      =1  typedef enum _LED_OUT_
  76      =1  {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 800 

  77      =1    ZDP03A_LED_D1 = 0x07, // P0.7
  78      =1    ZDP03A_LED_D2 = 0x37, // P3.7
  79      =1    ZDP03A_LED_D3 = 0x10, // P1.0
  80      =1    ZDP03A_LED_D4 = 0x12, // P1.2
  81      =1    ZDP03A_LED_D5 = 0x14, // P1.4
  82      =1    ZDP03A_LED_D6 = 0x15, // P1.5
  83      =1    ZDP03A_LED_D7 = 0x16, // P1.6
  84      =1    ZDP03A_LED_D8 = 0x17  // P1.7
  85      =1  } LED_OUT;
  86      =1  
  87      =1  
  88      =1  typedef enum _LED_ACTION_ { ON = 0, OFF } LED_ACTION;
  89      =1  /****************************************************************************/
  90      =1  /*                              EXPORTED DATA                               */
  91      =1  /****************************************************************************/
  92      =1  
  93      =1  
  94      =1  /****************************************************************************/
  95      =1  /*                           EXPORTED FUNCTIONS                             */
  96      =1  /****************************************************************************/
  97      =1  
  98      =1  /**
  99      =1   * @brief Initialization of ZDP03A IO drivers. This function must be called
 100      =1   *        before setting op IO ports (SetPinIn(...) and SetPinOut(...) )
 101      =1   * @param pEventKeyQueue is function pointer to application key-event queue or
 102      =1   *        direct to application state machine
 103      =1   */
 104      =1  void ZDP03A_InitHW(
 105      =1    VOID_CALLBACKFUNC(pEventKeyQueue)(BYTE));
 106      =1  
 107      =1  
 108      =1  /**
 109      =1   * @brief Setup input port for a button
 110      =1   * @param[in] key  number
 111      =1   * @param[in] pullUp define if port is active high/low
 112      =1   */
 113      =1  void SetPinIn( ZDP03A_KEY key, BOOL pullUp);
 114      =1  
 115      =1  
 116      =1  /**
 117      =1   * @brief Setup output port for a LED
 118      =1   * @param[in] led number
 119      =1   */
 120      =1  void SetPinOut( LED_OUT led);
 121      =1  
 122      =1  /**
 123      =1   * @brief Set led on/off
 124      =1   * @param[in] led number
 125      =1   * @param[in] action on/off of type LED_ACTION
 126      =1   */
 127      =1  void Led( LED_OUT led, LED_ACTION action);
 128      =1  
 129      =1  /**
 130      =1   * @brief Get key state
 131      =1   * @param[in] key port
 132      =1   * @return high (1) or low (0)
 133      =1   */
 134      =1  BYTE KeyGet(ZDP03A_KEY key);
 135      =1  
 136      =1  void ti_csa_prompt(void);
 137      =1  
 138      =1  #endif /* _IO_ZDP03A_H_ */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 801 

 139      =1  
  49          #include <ZW_task.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Task pool handler.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _ZW_TASK_H_
   8      =1  #define _ZW_TASK_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  
  14      =1  #include <ZW_stdint.h>
   1      =2  /*
   2      =2   * ZW_stdint.h
   3      =2   *
   4      =2   * Define integer types by their conventional POSIX names [1].
   5      =2   * Note: This is a small subset of the spec, NOT a complete definition.
   6      =2   *
   7      =2   *  [1] http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html
   8      =2   *
   9      =2   *  Created on: 18/01/2013
  10      =2   *      Author: jbu
  11      =2   */
  12      =2  #ifndef ZW_STDINT_H_
  15      =1  
  16      =1  /****************************************************************************/
  17      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  18      =1  /****************************************************************************/
  19      =1  #ifndef TASK_POOL_SIZE
  20      =1  #define TASK_POOL_SIZE 5
  21      =1  #endif
  22      =1  
  23      =1  
  24      =1  /****************************************************************************/
  25      =1  /*                              EXPORTED DATA                               */
  26      =1  /****************************************************************************/
  27      =1  
  28      =1  
  29      =1  /****************************************************************************/
  30      =1  /*                           EXPORTED FUNCTIONS                             */
  31      =1  /****************************************************************************/
  32      =1  
  33      =1  
  34      =1  /**
  35      =1   * @brief Add task to task pool.
  36      =1   * @param[in] CBPolltask function pointer to the task to poll.
  37      =1   * @param[in] pTaskName pointer to a string descriping the Task name.
  38      =1   * @return task handle ID or 0 if task-pool is full. Increase TASK_POOL_SIZE
  39      =1   * if pool is full.
  40      =1   */
  41      =1  uint8_t TaskAdd(BOOL (CODE *CBPolltask)(void), const char * pTaskName);
  42      =1  
  43      =1  /**
  44      =1   * @brief Pause the task.
  45      =1   * @param[in] taskhandeId task handle ID
  46      =1   * @return FALSE if taskhandeId is unknown else TRUE.
  47      =1   */
  48      =1  BOOL TaskPause(uint8_t taskhandeId);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 802 

  49      =1  
  50      =1  /**
  51      =1   * @brief Run the paused task. If running do nothing.
  52      =1   * @param[in] taskhandeId task handle ID
  53      =1   * @return FALSE if taskhandeId is unknown else TRUE.
  54      =1   */
  55      =1  BOOL TaskRun(uint8_t taskhandeId);
  56      =1  
  57      =1  
  58      =1  /**
  59      =1   * @brief Remove the task from pool.
  60      =1   * @param[in] taskhandeId task handle ID
  61      =1   * @return FALSE if taskhandeId is unknown else TRUE.
  62      =1   */
  63      =1  BOOL TaskRemove(uint8_t taskhandeId);
  64      =1  
  65      =1  
  66      =1  /**
  67      =1   * @brief Interrupt process signal to the Task Handler to run all task in pool
  68      =1   * to check for new jobs.
  69      =1   */
  70      =1  void TaskInterruptSignal(void);
  71      =1  
  72      =1  /**
  73      =1   * @brief Task handler main poll queue.
  74      =1   * @return FALSE if pool tasks has no jobs or no Interrupt has occur.
  75      =1   * TRUE if one or more task has job.
  76      =1   */
  77      =1  BOOL TaskApplicationPoll(void);
  78      =1  
  79      =1  
  80      =1  /**
  81      =1   * @brief TaskJobHasWork
  82      =1   * Ask task handler if more task job to run. If not go to sleep.
  83      =1   * @return FALSE if pool tasks has no jobs or no Interrupt has occur.
  84      =1   * TRUE if one or more task has job.
  85      =1   */
  86      =1  BOOL TaskJobHasWork();
  87      =1  
  88      =1  
  89      =1  #endif /* _ZW_TASK_H_ */
  90      =1  
  91      =1  
  50          #include <ev_man.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Framework event manager, handling all event types for the framework
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _ev_man_H_
 138      =1  
 139      =1  
  51          #ifdef ZW_ISD51_DEBUG
  54          #include <association_plus.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Helper module for Command Class Association and Command Class Multi Channel Association.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _ASSOCIATION_PLUS_H_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 803 

  55          #include <agi.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Helper module for Command Class Association Group Information.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _AGI_H_
  56          #include <CommandClass.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Common types and definitions for all command classes.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  57          #include <CommandClassAssociation.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Association.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_ASSOCIATION_H_
  58          #include <CommandClassAssociationGroupInfo.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Association Group Info.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_ASSOCIATION_GROUP_INFO_H_
   8      =1  #define _COMMAND_CLASS_ASSOCIATION_GROUP_INFO_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  
  14      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 804 

  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  15      =1  #include <ZW_sysdefs.h>
   1      =2  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Z-Wave system defines
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: tro $
  29      =2   * Revision:         $Revision: 23873 $
  30      =2   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SYSDEFS_H_
  16      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 805 

  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  17      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  18      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  19      =1  
  20      =1  /**
  21      =1   * Returns the version of this CC.
  22      =1   */
  23      =1  #define CC_AGI_getVersion() ASSOCIATION_GRP_INFO_VERSION
  24      =1  
  25      =1  /**
  26      =1   * For backwards compatibility.
  27      =1   */
  28      =1  #define CommandClassAssociationGroupInfoVersionGet()    CC_AGI_getVersion()
  29      =1  #define handleCommandClassAssociationGroupInfo(a, b, c) CC_AGI_handler(a, b, c)
  30      =1  #define GetApplGroupName(a, b, c)                       CC_AGI_groupNameGet_handler(a, b, c)
  31      =1  #define GetApplGroupInfo(a, b, c)                       CC_AGI_groupInfoGet_handler(a, b, c)
  32      =1  #define GetApplAssoGroupsSize(a)                        CC_AGI_groupCount_handler(a)
  33      =1  
  34      =1  /**
  35      =1   * @brief Read AGI group name
  36      =1   * @param[out] pGroupName OUT point to group name
  37      =1   * @param[in] groupId IN group identifier
  38      =1   * @param[in] endpoint IN end-point number
  39      =1   */
  40      =1  extern uint8_t CC_AGI_groupNameGet_handler(
  41      =1      char * pGroupName,
  42      =1      uint8_t groupId,
  43      =1      uint8_t endpoint);
  44      =1  
  45      =1  /**
  46      =1   * @brief Get application specific Group Info
  47      =1   * @param[in] groupId group identifier
  48      =1   * @param[in] endpoint is the endpoint number
  49      =1   * @param[out] report pointer to data of type VG_ASSOCIATION_GROUP_INFO_REPORT_VG
  50      =1   */
  51      =1  extern void CC_AGI_groupInfoGet_handler(
  52      =1    uint8_t groupId,
  53      =1    uint8_t endpoint,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 806 

  54      =1    VG_ASSOCIATION_GROUP_INFO_REPORT_VG* report);
  55      =1  
  56      =1  /**
  57      =1   * @brief Returns the number of association groups for a given endpoint.
  58      =1   * @param[in] endpoint A given endpoint where 0 is the root device.
  59      =1   * @return Number of association groups.
  60      =1   */
  61      =1  extern uint8_t CC_AGI_groupCount_handler(uint8_t endpoint);
  62      =1  
  63      =1  /**
  64      =1   * @brief Set Application specific Group Command List
  65      =1   * @param[out] pGroupList pointer to the list
  66      =1   * @param[in] groupId group identifier
  67      =1   * @param[in] endpoint is the endpoint number
  68      =1   */
  69      =1  extern void GetApplGroupCommandList(
  70      =1      uint8_t * pGroupList,
  71      =1      uint8_t groupId,
  72      =1      uint8_t endpoint);
  73      =1  
  74      =1  /**
  75      =1   * @brief Application specific Group Command List Size
  76      =1   * @param[in] groupId group identifier
  77      =1   * @param[in] endpoint is the endpoint number
  78      =1   * @return size
  79      =1   */
  80      =1  extern uint8_t GetApplGroupCommandListSize(
  81      =1      uint8_t groupId,
  82      =1      uint8_t endpoint);
  83      =1  
  84      =1  /**
  85      =1   * @brief Handler for Association Group Info Command Class.
  86      =1   * @param[in] rxOpt receive options of type RECEIVE_OPTIONS_TYPE_EX
  87      =1   * @param[in] pCmd Payload from the received frame
  88      =1   * @param[in] cmdLength Number of command bytes including the command
  89      =1   * @return receive frame status.
  90      =1   */
  91      =1  received_frame_status_t CC_AGI_handler(
  92      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  93      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  94      =1    uint8_t cmdLength);
  95      =1  
  96      =1  /**
  97      =1   * Corrects a given group ID if it's invalid.
  98      =1   *
  99      =1   * According to CC:0059.01.05.12.002 in SDS13782-4 "Association Group Command List Report" SHOULD
 100      =1   * respond with commands for group 1 if the given group ID is invalid (0 or higher than the number
 101      =1   * of groups for a given endpoint.
 102      =1   * @param endpoint Endpoint to match against.
 103      =1   * @param pGroupId Pointer to group ID.
 104      =1   */
 105      =1  extern void ZAF_CC_AGI_CorrectGroupIdIfInvalid(uint8_t endpoint, uint8_t * pGroupId);
 106      =1  
 107      =1  #endif
  59          #include <CommandClassVersion.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Version.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_VERSION_H_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 807 

   8      =1  #define _COMMAND_CLASS_VERSION_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ZW_sysdefs.h>
   1      =2  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 808 

  23      =2   *
  24      =2   * Description: Z-Wave system defines
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: tro $
  29      =2   * Revision:         $Revision: 23873 $
  30      =2   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SYSDEFS_H_
  15      =1  #include <ZW_pindefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: In/Out definitions Z-Wave Single Chips
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: efh $
  14      =2   * Revision:         $Revision: 23305 $
  15      =2   * Last Changed:     $Date: 2012-09-04 08:36:50 +0200 (ti, 04 sep 2012) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_PINDEFS_H_
  19      =2  #define _ZW_PINDEFS_H_
  20      =2  
  21      =2  /****************************************************************************/
  22      =2  /*                              INCLUDE FILES                               */
  23      =2  /****************************************************************************/
  24      =2  #ifdef __C51__
  25      =2  #include <ZW_typedefs.h>
   1      =3  /*******************************  ZW_typedefs.h  *******************************
   2      =3   *           #######
   3      =3   *           ##  ##
   4      =3   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =3   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =3   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =3   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =3   *          #######   ####   ##  ##  #####       ##  #####
   9      =3   *                                           #####
  10      =3   *          Products that speak Z-Wave work together better
  11      =3   *
  12      =3   *              Copyright (c) 2008
  13      =3   *              Zensys A/S
  14      =3   *              Denmark
  15      =3   *
  16      =3   *              All Rights Reserved
  17      =3   *
  18      =3   *    This source file is subject to the terms and conditions of the
  19      =3   *    Zensys Software License Agreement which restricts the manner
  20      =3   *    in which it may be used.
  21      =3   *
  22      =3   *---------------------------------------------------------------------------
  23      =3   *
  24      =3   * Description: Module description
  25      =3   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 809 

  26      =3   * Author:   Ivar Jeppesen
  27      =3   *
  28      =3   * Last Changed By:  $Author: efh $
  29      =3   * Revision:         $Revision: 29359 $
  30      =3   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =3   *
  32      =3   ****************************************************************************/
  33      =3  #ifndef _ZW_TYPEDEFS_H_
  26      =2  #endif /* __C51__ */
  27      =2  
  28      =2  /****************************************************************************/
  29      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  30      =2  /****************************************************************************/
  31      =2  /*!!!WARNING DO NOT MODIFY THESE VARIABLES ONLY USED BY THE Z-WAVE STACK !!!*/
  32      =2  #ifdef __C51__
  33      =2  extern IBYTE P0Shadow;
  34      =2  extern IBYTE P1Shadow;
  35      =2  extern IBYTE P2Shadow;
  36      =2  extern IBYTE P3Shadow;
  37      =2  
  38      =2  extern IBYTE P0ShadowDIR;
  39      =2  extern IBYTE P1ShadowDIR;
  40      =2  extern IBYTE P2ShadowDIR;
  41      =2  extern IBYTE P3ShadowDIR;
  42      =2  #endif /* __C51__ */
  43      =2  
  44      =2  
  45      =2  #ifdef __C51__
  46      =2  /* Macros for I/O Port controlling */
  47      =2  
  48      =2  /* Set I/O pin as input:
  49      =2   *    pin     - Z-Wave pin name
  50      =2   *    pullup  - if not zero activate the internal pullup resistor
  51      =2   */
  52      =2  #if defined (ZW040x) || defined(ZW050x)
  53      =2  /*Fix TO#02731*/
  54      =2  #define PIN_IN(pin,pullup)  {pin##DIR_PAGE;(pin##SHADOWDIR |= (1<<pin)); (pullup)?(pin##SHADOW &=~(1<<pin)
             -):(pin##SHADOW |= (1<<pin));pin##Port = pin##SHADOW;pin##DIR = pin##SHADOWDIR;}
  55      =2  #endif /* #if defined (ZW040x) || defined(ZW050x) */
  56      =2  
  57      =2  
  58      =2  /* Set I/O pin as output:
  59      =2   *    pin     - Z-Wave pin name
  60      =2   */
  61      =2  #if defined (ZW040x) || defined(ZW050x)
  62      =2  #define PIN_OUT(pin)  {pin##DIR_PAGE;(pin##SHADOWDIR &=~(1<<pin)) ;(pin##DIR = pin##SHADOWDIR);}
  63      =2  #endif /* #if defined (ZW040x) || defined(ZW050x) */
  64      =2  
  65      =2  
  66      =2  /* Read pin value:
  67      =2   *    pin     - Z-Wave pin name
  68      =2   */
  69      =2  #define PIN_GET(pin)  (pin##Port & (1<<pin))
  70      =2  
  71      =2  /* Set output pin to 1:
  72      =2   *    pin     - Z-Wave pin name
  73      =2   */
  74      =2   /*Fix TO#02731*/
  75      =2  #define PIN_ON(pin)  {pin##SHADOW |= (1<<pin);pin##Port = pin##SHADOW;}
  76      =2  #define PIN_HIGH(pin) {pin##SHADOW |= (1<<pin);pin##Port = pin##SHADOW;}
  77      =2  
  78      =2  /* Set output pin to 0:
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 810 

  79      =2   *    pin     - Z-Wave pin name
  80      =2   */
  81      =2   /*Fix TO#02731*/
  82      =2  #define PIN_OFF(pin) {pin##SHADOW &= ~(1<<pin);pin##Port = pin##SHADOW;}
  83      =2  #define PIN_LOW(pin) {pin##SHADOW &= ~(1<<pin);pin##Port = pin##SHADOW;}
  84      =2  
  85      =2  /* Toggle output pin:
  86      =2   *    pin     - Z-Wave pin name
  87      =2   */
  88      =2   /*Fix TO#02731*/
  89      =2  #define PIN_TOGGLE(pin) {pin##SHADOW ^= (1<<pin);pin##Port = pin##SHADOW;}
  90      =2  
  91      =2  /* Button pressed */
  92      =2  #define BUTTON_PRESSED() ((PIN_GET(Button))?0:1)
  93      =2  
  94      =2  #endif
  95      =2  
  96      =2  
  97      =2  #if defined (ZW040x) || defined(ZW050x)
  98      =2  
  99      =2  /* Z-Wave Button - INT1 */
 100      =2  #define ButtonPort          P1
 101      =2  #define ButtonSHADOW        P1Shadow
 102      =2  #define ButtonDIR           P1DIR
 103      =2  #define ButtonSHADOWDIR     P1ShadowDIR
 104      =2  #define ButtonDIR_PAGE      P1DIR_PAGE;
 105      =2  #define Button              1
 106      =2  
 107      =2  
 108      =2  /*ZW-Wave  EEPROM CS */
 109      =2  #define EECSPort          P2
 110      =2  #define EECSSHADOW        P2Shadow
 111      =2  #define EECSDIR           P2DIR
 112      =2  #define EECSSHADOWDIR     P2ShadowDIR
 113      =2  #define EECSDIR_PAGE      P2DIR_PAGE
 114      =2  #define EECS              5
 115      =2  
 116      =2  #define P00Port          P0
 117      =2  #define P00SHADOW        P0Shadow
 118      =2  #define P00DIR           P0DIR
 119      =2  #define P00SHADOWDIR     P0ShadowDIR
 120      =2  #define P00DIR_PAGE      P0DIR_PAGE
 121      =2  #define P00              0
 122      =2  
 123      =2  #define P01Port          P0
 124      =2  #define P01SHADOW        P0Shadow
 125      =2  #define P01DIR           P0DIR
 126      =2  #define P01SHADOWDIR     P0ShadowDIR
 127      =2  #define P01DIR_PAGE      P0DIR_PAGE
 128      =2  #define P01              1
 129      =2  
 130      =2  #define P02Port          P0
 131      =2  #define P02SHADOW        P0Shadow
 132      =2  #define P02DIR           P0DIR
 133      =2  #define P02SHADOWDIR     P0ShadowDIR
 134      =2  #define P02DIR_PAGE      P0DIR_PAGE
 135      =2  #define P02              2
 136      =2  
 137      =2  #define P03Port          P0
 138      =2  #define P03SHADOW        P0Shadow
 139      =2  #define P03DIR           P0DIR
 140      =2  #define P03SHADOWDIR     P0ShadowDIR
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 811 

 141      =2  #define P03DIR_PAGE      P0DIR_PAGE
 142      =2  #define P03              3
 143      =2  
 144      =2  #define P04Port          P0
 145      =2  #define P04SHADOW        P0Shadow
 146      =2  #define P04DIR           P0DIR
 147      =2  #define P04SHADOWDIR     P0ShadowDIR
 148      =2  #define P04DIR_PAGE      P0DIR_PAGE
 149      =2  #define P04              4
 150      =2  
 151      =2  #define P05Port          P0
 152      =2  #define P05SHADOW        P0Shadow
 153      =2  #define P05DIR           P0DIR
 154      =2  #define P05SHADOWDIR     P0ShadowDIR
 155      =2  #define P05DIR_PAGE      P0DIR_PAGE
 156      =2  #define P05              5
 157      =2  
 158      =2  #define P06Port          P0
 159      =2  #define P06SHADOW        P0Shadow
 160      =2  #define P06DIR           P0DIR
 161      =2  #define P06SHADOWDIR     P0ShadowDIR
 162      =2  #define P06DIR_PAGE      P0DIR_PAGE
 163      =2  #define P06              6
 164      =2  
 165      =2  #define P07Port          P0
 166      =2  #define P07SHADOW        P0Shadow
 167      =2  #define P07DIR           P0DIR
 168      =2  #define P07SHADOWDIR     P0ShadowDIR
 169      =2  #define P07DIR_PAGE      P0DIR_PAGE
 170      =2  #define P07              7
 171      =2  
 172      =2  #define P10Port          P1
 173      =2  #define P10SHADOW        P1Shadow
 174      =2  #define P10DIR           P1DIR
 175      =2  #define P10SHADOWDIR     P1ShadowDIR
 176      =2  #define P10DIR_PAGE      P1DIR_PAGE
 177      =2  #define P10              0
 178      =2  
 179      =2  #define P11Port          P1
 180      =2  #define P11SHADOW        P1Shadow
 181      =2  #define P11DIR           P1DIR
 182      =2  #define P11SHADOWDIR     P1ShadowDIR
 183      =2  #define P11DIR_PAGE      P1DIR_PAGE
 184      =2  #define P11              1
 185      =2  
 186      =2  #define P12Port          P1
 187      =2  #define P12SHADOW        P1Shadow
 188      =2  #define P12DIR           P1DIR
 189      =2  #define P12SHADOWDIR     P1ShadowDIR
 190      =2  #define P12DIR_PAGE      P1DIR_PAGE
 191      =2  #define P12              2
 192      =2  
 193      =2  #define P13Port          P1
 194      =2  #define P13SHADOW        P1Shadow
 195      =2  #define P13DIR           P1DIR
 196      =2  #define P13SHADOWDIR     P1ShadowDIR
 197      =2  #define P13DIR_PAGE      P1DIR_PAGE
 198      =2  #define P13              3
 199      =2  
 200      =2  #define P14Port          P1
 201      =2  #define P14SHADOW        P1Shadow
 202      =2  #define P14DIR           P1DIR
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 812 

 203      =2  #define P14SHADOWDIR     P1ShadowDIR
 204      =2  #define P14DIR_PAGE      P1DIR_PAGE
 205      =2  #define P14              4
 206      =2  
 207      =2  #define P15Port          P1
 208      =2  #define P15SHADOW        P1Shadow
 209      =2  #define P15DIR           P1DIR
 210      =2  #define P15SHADOWDIR     P1ShadowDIR
 211      =2  #define P15DIR_PAGE      P1DIR_PAGE
 212      =2  #define P15              5
 213      =2  
 214      =2  #define P16Port          P1
 215      =2  #define P16SHADOW        P1Shadow
 216      =2  #define P16DIR           P1DIR
 217      =2  #define P16SHADOWDIR     P1ShadowDIR
 218      =2  #define P16DIR_PAGE      P1DIR_PAGE
 219      =2  #define P16              6
 220      =2  
 221      =2  #define P17Port          P1
 222      =2  #define P17SHADOW        P1Shadow
 223      =2  #define P17DIR           P1DIR
 224      =2  #define P17SHADOWDIR     P1ShadowDIR
 225      =2  #define P17DIR_PAGE      P1DIR_PAGE
 226      =2  #define P17              7
 227      =2  
 228      =2  
 229      =2  #define P20Port          P2
 230      =2  #define P20SHADOW        P2Shadow
 231      =2  #define P20DIR           P2DIR
 232      =2  #define P20SHADOWDIR     P2ShadowDIR
 233      =2  #define P20DIR_PAGE      P2DIR_PAGE
 234      =2  #define P20              0
 235      =2  
 236      =2  #define P21Port          P2
 237      =2  #define P21SHADOW        P2Shadow
 238      =2  #define P21DIR           P2DIR
 239      =2  #define P21SHADOWDIR     P2ShadowDIR
 240      =2  #define P21DIR_PAGE      P2DIR_PAGE
 241      =2  #define P21              1
 242      =2  
 243      =2  #define P22Port          P2
 244      =2  #define P22SHADOW        P2Shadow
 245      =2  #define P22DIR           P2DIR
 246      =2  #define P22SHADOWDIR     P2ShadowDIR
 247      =2  #define P22DIR_PAGE      P2DIR_PAGE
 248      =2  #define P22              2
 249      =2  
 250      =2  #define P23Port          P2
 251      =2  #define P23SHADOW        P2Shadow
 252      =2  #define P23DIR           P2DIR
 253      =2  #define P23SHADOWDIR     P2ShadowDIR
 254      =2  #define P23DIR_PAGE      P2DIR_PAGE
 255      =2  #define P23              3
 256      =2  
 257      =2  #define P24Port          P2
 258      =2  #define P24SHADOW        P2Shadow
 259      =2  #define P24DIR           P2DIR
 260      =2  #define P24SHADOWDIR     P2ShadowDIR
 261      =2  #define P24DIR_PAGE      P2DIR_PAGE
 262      =2  #define P24              4
 263      =2  
 264      =2  #define P25Port          P2
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 813 

 265      =2  #define P25SHADOW        P2Shadow
 266      =2  #define P25DIR           P2DIR
 267      =2  #define P25SHADOWDIR     P2ShadowDIR
 268      =2  #define P25DIR_PAGE      P2DIR_PAGE
 269      =2  #define P25              5
 270      =2  
 271      =2  #define P26Port          P2
 272      =2  #define P26SHADOW        P2Shadow
 273      =2  #define P26DIR           P2DIR
 274      =2  #define P26SHADOWDIR     P2ShadowDIR
 275      =2  #define P26DIR_PAGE      P2DIR_PAGE
 276      =2  #define P26              6
 277      =2  
 278      =2  #define P27Port          P2
 279      =2  #define P27SHADOW        P2Shadow
 280      =2  #define P27DIR           P2DIR
 281      =2  #define P27SHADOWDIR     P2ShadowDIR
 282      =2  #define P27DIR_PAGE      P2DIR_PAGE
 283      =2  #define P27              7
 284      =2  
 285      =2  #define P30Port          P3
 286      =2  #define P30SHADOW        P3Shadow
 287      =2  #define P30DIR           P3DIR
 288      =2  #define P30SHADOWDIR     P3ShadowDIR
 289      =2  #define P30DIR_PAGE      P3DIR_PAGE
 290      =2  #define P30              0
 291      =2  
 292      =2  #define P31Port          P3
 293      =2  #define P31SHADOW        P3Shadow
 294      =2  #define P31DIR           P3DIR
 295      =2  #define P31SHADOWDIR     P3ShadowDIR
 296      =2  #define P31DIR_PAGE      P3DIR_PAGE
 297      =2  #define P31              1
 298      =2  
 299      =2  #define P34Port          P3
 300      =2  #define P34SHADOW        P3Shadow
 301      =2  #define P34DIR           P3DIR
 302      =2  #define P34SHADOWDIR     P3ShadowDIR
 303      =2  #define P34DIR_PAGE      P3DIR_PAGE
 304      =2  #define P34              4
 305      =2  
 306      =2  #define P35Port          P3
 307      =2  #define P35SHADOW        P3Shadow
 308      =2  #define P35DIR           P3DIR
 309      =2  #define P35SHADOWDIR     P3ShadowDIR
 310      =2  #define P35DIR_PAGE      P3DIR_PAGE
 311      =2  #define P35              5
 312      =2  
 313      =2  #define P36Port          P3
 314      =2  #define P36SHADOW        P3Shadow
 315      =2  #define P36DIR           P3DIR
 316      =2  #define P36SHADOWDIR     P3ShadowDIR
 317      =2  #define P36DIR_PAGE      P3DIR_PAGE
 318      =2  #define P36              6
 319      =2  
 320      =2  #define P37Port          P3
 321      =2  #define P37SHADOW        P3Shadow
 322      =2  #define P37DIR           P3DIR
 323      =2  #define P37SHADOWDIR     P3ShadowDIR
 324      =2  #define P37DIR_PAGE      P3DIR_PAGE
 325      =2  #define P37              7
 326      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 814 

 327      =2  /* IO function definitions
 328      =2  ^(#define ^(*Port^)^( +P[0-9]^)^)
 329      =2  ^1 #define ^2SHADOW     ^3
 330      =2  */
 331      =2  
 332      =2  /* Production Test Pin for Prod_Test_Dut, Pin 5 */
 333      =2  #define SSNPort          P0
 334      =2  #define SSNSHADOW        P0Shadow
 335      =2  #define SSNDIR           P0DIR
 336      =2  #define SSNSHADOWDIR     P0ShadowDIR
 337      =2  #define SSNDIR_PAGE      P0DIR_PAGE
 338      =2  #define SSN              4
 339      =2  
 340      =2  #define LED_OUT0Port          P0
 341      =2  #define LED_OUT0SHADOW        P0Shadow
 342      =2  #define LED_OUT0DIR           P0DIR
 343      =2  #define LED_OUT0SHADOWDIR     P0ShadowDIR
 344      =2  #define LED_OUT0DIR_PAGE      P0DIR_PAGE
 345      =2  #define LED_OUT0              4
 346      =2  
 347      =2  #define LED_OUT1Port          P0
 348      =2  #define LED_OUT1SHADOW        P0Shadow
 349      =2  #define LED_OUT1DIR           P0DIR
 350      =2  #define LED_OUT1SHADOWDIR     P0ShadowDIR
 351      =2  #define LED_OUT1DIR_PAGE      P0DIR_PAGE
 352      =2  #define LED_OUT1              5
 353      =2  
 354      =2  #define LED_OUT2Port          P0
 355      =2  #define LED_OUT2SHADOW        P0Shadow
 356      =2  #define LED_OUT2DIR           P0DIR
 357      =2  #define LED_OUT2SHADOWDIR     P0ShadowDIR
 358      =2  #define LED_OUT2DIR_PAGE      P0DIR_PAGE
 359      =2  #define LED_OUT2              6
 360      =2  
 361      =2  #define LED_OUT3Port          P0
 362      =2  #define LED_OUT3SHADOW        P0Shadow
 363      =2  #define LED_OUT3DIR           P0DIR
 364      =2  #define LED_OUT3SHADOWDIR     P0ShadowDIR
 365      =2  #define LED_OUT3DIR_PAGE      P0DIR_PAGE
 366      =2  #define LED_OUT3              7
 367      =2  
 368      =2  #define KP_OUT0Port          P0
 369      =2  #define KP_OUT0SHADOW        P0Shadow
 370      =2  #define KP_OUT0DIR           P0DIR
 371      =2  #define KP_OUT0SHADOWDIR     P0ShadowDIR
 372      =2  #define KP_OUT0DIR_PAGE      P0DIR_PAGE
 373      =2  #define KP_OUT0              0
 374      =2  
 375      =2  #define KP_OUT1Port          P0
 376      =2  #define KP_OUT1SHADOW        P0Shadow
 377      =2  #define KP_OUT1DIR           P0DIR
 378      =2  #define KP_OUT1SHADOWDIR     P0ShadowDIR
 379      =2  #define KP_OUT1DIR_PAGE      P0DIR_PAGE
 380      =2  #define KP_OUT1              1
 381      =2  
 382      =2  #define KP_OUT2Port          P0
 383      =2  #define KP_OUT2SHADOW        P0Shadow
 384      =2  #define KP_OUT2DIR           P0DIR
 385      =2  #define KP_OUT2SHADOWDIR     P0ShadowDIR
 386      =2  #define KP_OUT2DIR_PAGE      P0DIR_PAGE
 387      =2  #define KP_OUT2              2
 388      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 815 

 389      =2  #define KP_OUT3Port          P0
 390      =2  #define KP_OUT3SHADOW        P0Shadow
 391      =2  #define KP_OUT3DIR           P0DIR
 392      =2  #define KP_OUT3SHADOWDIR     P0ShadowDIR
 393      =2  #define KP_OUT3DIR_PAGE      P0DIR_PAGE
 394      =2  #define KP_OUT3              3
 395      =2  
 396      =2  #define KP_OUT4Port          P0
 397      =2  #define KP_OUT4SHADOW        P0Shadow
 398      =2  #define KP_OUT4DIR           P0DIR
 399      =2  #define KP_OUT4SHADOWDIR     P0ShadowDIR
 400      =2  #define KP_OUT4DIR_PAGE      P0DIR_PAGE
 401      =2  #define KP_OUT4              4
 402      =2  
 403      =2  #define KP_OUT5Port          P0
 404      =2  #define KP_OUT5SHADOW        P0Shadow
 405      =2  #define KP_OUT5DIR           P0DIR
 406      =2  #define KP_OUT5SHADOWDIR     P0ShadowDIR
 407      =2  #define KP_OUT5DIR_PAGE      P0DIR_PAGE
 408      =2  #define KP_OUT5              5
 409      =2  
 410      =2  #define KP_OUT6Port          P0
 411      =2  #define KP_OUT6SHADOW        P0Shadow
 412      =2  #define KP_OUT6DIR           P0DIR
 413      =2  #define KP_OUT6SHADOWDIR     P0ShadowDIR
 414      =2  #define KP_OUT6DIR_PAGE      P0DIR_PAGE
 415      =2  #define KP_OUT6              6
 416      =2  
 417      =2  #define KP_OUT7Port          P0
 418      =2  #define KP_OUT7SHADOW        P0Shadow
 419      =2  #define KP_OUT7DIR           P0DIR
 420      =2  #define KP_OUT7SHADOWDIR     P0ShadowDIR
 421      =2  #define KP_OUT7DIR_PAGE      P0DIR_PAGE
 422      =2  #define KP_OUT7              7
 423      =2  
 424      =2  #define KP_OUT8Port          P3
 425      =2  #define KP_OUT8SHADOW        P3Shadow
 426      =2  #define KP_OUT8DIR           P3DIR
 427      =2  #define KP_OUT8SHADOWDIR     P3ShadowDIR
 428      =2  #define KP_OUT8DIR_PAGE      P3DIR_PAGE
 429      =2  #define KP_OUT8              7
 430      =2  
 431      =2  #define KP_OUT9Port          P3
 432      =2  #define KP_OUT9SHADOW        P3Shadow
 433      =2  #define KP_OUT9DIR           P3DIR
 434      =2  #define KP_OUT9SHADOWDIR     P3ShadowDIR
 435      =2  #define KP_OUT9DIR_PAGE      P3DIR_PAGE
 436      =2  #define KP_OUT9              6
 437      =2  
 438      =2  #define KP_OUT10Port          P3
 439      =2  #define KP_OUT10SHADOW        P3Shadow
 440      =2  #define KP_OUT10DIR           P3DIR
 441      =2  #define KP_OUT10SHADOWDIR     P3ShadowDIR
 442      =2  #define KP_OUT10DIR_PAGE      P3DIR_PAGE
 443      =2  #define KP_OUT10              5
 444      =2  
 445      =2  #define KP_OUT11Port          P3
 446      =2  #define KP_OUT11SHADOW        P3Shadow
 447      =2  #define KP_OUT11DIR           P3DIR
 448      =2  #define KP_OUT11SHADOWDIR     P3ShadowDIR
 449      =2  #define KP_OUT11DIR_PAGE      P3DIR_PAGE
 450      =2  #define KP_OUT11              4
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 816 

 451      =2  
 452      =2  #define KP_OUT12Port          P3
 453      =2  #define KP_OUT12SHADOW        P3Shadow
 454      =2  #define KP_OUT12DIR           P3DIR
 455      =2  #define KP_OUT12SHADOWDIR     P3ShadowDIR
 456      =2  #define KP_OUT12DIR_PAGE      P3DIR_PAGE
 457      =2  #define KP_OUT12              1
 458      =2  
 459      =2  #define KP_OUT13Port          P3
 460      =2  #define KP_OUT13SHADOW        P3Shadow
 461      =2  #define KP_OUT13DIR           P3DIR
 462      =2  #define KP_OUT13SHADOWDIR     P3ShadowDIR
 463      =2  #define KP_OUT13DIR_PAGE      P3DIR_PAGE
 464      =2  #define KP_OUT13              0
 465      =2  
 466      =2  #define KP_OUT14Port          P2
 467      =2  #define KP_OUT14SHADOW        P2Shadow
 468      =2  #define KP_OUT14DIR           P2DIR
 469      =2  #define KP_OUT14SHADOWDIR     P2ShadowDIR
 470      =2  #define KP_OUT14DIR_PAGE      P2DIR_PAGE
 471      =2  #define KP_OUT14              1
 472      =2  
 473      =2  #define KP_OUT15Port          P2
 474      =2  #define KP_OUT15SHADOW        P2Shadow
 475      =2  #define KP_OUT15DIR           P2DIR
 476      =2  #define KP_OUT15SHADOWDIR     P2ShadowDIR
 477      =2  #define KP_OUT15DIR_PAGE      P2DIR_PAGE
 478      =2  #define KP_OUT15              0
 479      =2  
 480      =2  #define KP_IN0Port          P1
 481      =2  #define KP_IN0SHADOW        P1Shadow
 482      =2  #define KP_IN0DIR           P1DIR
 483      =2  #define KP_IN0SHADOWDIR     P1ShadowDIR
 484      =2  #define KP_IN0DIR_PAGE      P1DIR_PAGE
 485      =2  #define KP_IN0              0
 486      =2  
 487      =2  #define KP_IN1Port          P1
 488      =2  #define KP_IN1SHADOW        P1Shadow
 489      =2  #define KP_IN1DIR           P1DIR
 490      =2  #define KP_IN1SHADOWDIR     P1ShadowDIR
 491      =2  #define KP_IN1DIR_PAGE      P1DIR_PAGE
 492      =2  #define KP_IN1              1
 493      =2  
 494      =2  #define KP_IN2Port          P1
 495      =2  #define KP_IN2SHADOW        P1Shadow
 496      =2  #define KP_IN2DIR           P1DIR
 497      =2  #define KP_IN2SHADOWDIR     P1ShadowDIR
 498      =2  #define KP_IN2DIR_PAGE      P1DIR_PAGE
 499      =2  #define KP_IN2              2
 500      =2  
 501      =2  #define KP_IN3Port          P1
 502      =2  #define KP_IN3SHADOW        P1Shadow
 503      =2  #define KP_IN3DIR           P1DIR
 504      =2  #define KP_IN3SHADOWDIR     P1ShadowDIR
 505      =2  #define KP_IN3DIR_PAGE      P1DIR_PAGE
 506      =2  #define KP_IN3              3
 507      =2  
 508      =2  #define KP_IN4Port          P1
 509      =2  #define KP_IN4SHADOW        P1Shadow
 510      =2  #define KP_IN4DIR           P1DIR
 511      =2  #define KP_IN4SHADOWDIR     P1ShadowDIR
 512      =2  #define KP_IN4DIR_PAGE      P1DIR_PAGE
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 817 

 513      =2  #define KP_IN4              4
 514      =2  
 515      =2  #define KP_IN5Port          P1
 516      =2  #define KP_IN5SHADOW        P1Shadow
 517      =2  #define KP_IN5DIR           P1DIR
 518      =2  #define KP_IN5SHADOWDIR     P1ShadowDIR
 519      =2  #define KP_IN5DIR_PAGE      P1DIR_PAGE
 520      =2  #define KP_IN5              5
 521      =2  
 522      =2  #define KP_IN6Port          P1
 523      =2  #define KP_IN6SHADOW        P1Shadow
 524      =2  #define KP_IN6DIR           P1DIR
 525      =2  #define KP_IN6SHADOWDIR     P1ShadowDIR
 526      =2  #define KP_IN6DIR_PAGE      P1DIR_PAGE
 527      =2  #define KP_IN6              6
 528      =2  
 529      =2  #define KP_IN7Port          P1
 530      =2  #define KP_IN7SHADOW        P1Shadow
 531      =2  #define KP_IN7DIR           P1DIR
 532      =2  #define KP_IN7SHADOWDIR     P1ShadowDIR
 533      =2  #define KP_IN7DIR_PAGE      P1DIR_PAGE
 534      =2  #define KP_IN7              7
 535      =2  
 536      =2  #define INT0Port          P1
 537      =2  #define INT0SHADOW        P1Shadow
 538      =2  #define INT0DIR           P1DIR
 539      =2  #define INT0SHADOWDIR     P1ShadowDIR
 540      =2  #define INT0DIR_PAGE      P1DIR_PAGE
 541      =2  #define INT0              0
 542      =2  
 543      =2  #define INT1Port          P1
 544      =2  #define INT1SHADOW        P1Shadow
 545      =2  #define INT1DIR           P1DIR
 546      =2  #define INT1SHADOWDIR     P1ShadowDIR
 547      =2  #define INT1DIR_PAGE      P1DIR_PAGE
 548      =2  #define INT1              1
 549      =2  
 550      =2  #define INT2Port          P1
 551      =2  #define INT2SHADOW        P1Shadow
 552      =2  #define INT2DIR           P1DIR
 553      =2  #define INT2SHADOWDIR     P1ShadowDIR
 554      =2  #define INT2DIR_PAGE      P1DIR_PAGE
 555      =2  #define INT2              2
 556      =2  
 557      =2  #define INT3Port          P1
 558      =2  #define INT3SHADOW        P1Shadow
 559      =2  #define INT3DIR           P1DIR
 560      =2  #define INT3SHADOWDIR     P1ShadowDIR
 561      =2  #define INT3DIR_PAGE      P1DIR_PAGE
 562      =2  #define INT3              3
 563      =2  
 564      =2  #define INT4Port          P1
 565      =2  #define INT4SHADOW        P1Shadow
 566      =2  #define INT4DIR           P1DIR
 567      =2  #define INT4SHADOWDIR     P1ShadowDIR
 568      =2  #define INT4DIR_PAGE      P1DIR_PAGE
 569      =2  #define INT4              4
 570      =2  
 571      =2  #define INT5Port          P1
 572      =2  #define INT5SHADOW        P1Shadow
 573      =2  #define INT5DIR           P1DIR
 574      =2  #define INT5SHADOWDIR     P1ShadowDIR
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 818 

 575      =2  #define INT5DIR_PAGE      P1DIR_PAGE
 576      =2  #define INT5              5
 577      =2  
 578      =2  #define INT6Port          P1
 579      =2  #define INT6SHADOW        P1Shadow
 580      =2  #define INT6DIR           P1DIR
 581      =2  #define INT6SHADOWDIR     P1ShadowDIR
 582      =2  #define INT6DIR_PAGE      P1DIR_PAGE
 583      =2  #define INT6              6
 584      =2  
 585      =2  #define INT7Port          P1
 586      =2  #define INT7SHADOW        P1Shadow
 587      =2  #define INT7DIR           P1DIR
 588      =2  #define INT7SHADOWDIR     P1ShadowDIR
 589      =2  #define INT7DIR_PAGE      P1DIR_PAGE
 590      =2  #define INT7              7
 591      =2  
 592      =2  #define UART0_RXDPort          P2
 593      =2  #define UART0_RXDSHADOW        P2Shadow
 594      =2  #define UART0_RXDDIR           P2DIR
 595      =2  #define UART0_RXDSHADOWDIR     P2ShadowDIR
 596      =2  #define UART0_RXDDIR_PAGE      P2DIR_PAGE
 597      =2  #define UART0_RXD              0
 598      =2  
 599      =2  #define UART0_TXDPort          P2
 600      =2  #define UART0_TXDSHADOW        P2Shadow
 601      =2  #define UART0_TXDDIR           P2DIR
 602      =2  #define UART0_TXDSHADOWDIR     P2ShadowDIR
 603      =2  #define UART0_TXDDIR_PAGE      P2DIR_PAGE
 604      =2  #define UART0_TXD              1
 605      =2  
 606      =2  #define SPI1_MOSIPort          P2
 607      =2  #define SPI1_MOSISHADOW        P2Shadow
 608      =2  #define SPI1_MOSIDIR           P2DIR
 609      =2  #define SPI1_MOSISHADOWDIR     P2ShadowDIR
 610      =2  #define SPI1_MOSIDIR_PAGE      P2DIR_PAGE
 611      =2  #define SPI1_MOSI              2
 612      =2  
 613      =2  #define SPI1_MISOPort          P2
 614      =2  #define SPI1_MISOSHADOW        P2Shadow
 615      =2  #define SPI1_MISODIR           P2DIR
 616      =2  #define SPI1_MISOSHADOWDIR     P2ShadowDIR
 617      =2  #define SPI1_MISODIR_PAGE      P2DIR_PAGE
 618      =2  #define SPI1_MISO              3
 619      =2  
 620      =2  #define SPI1_SCKPort          P2
 621      =2  #define SPI1_SCKSHADOW        P2Shadow
 622      =2  #define SPI1_SCKDIR           P2DIR
 623      =2  #define SPI1_SCKSHADOWDIR     P2ShadowDIR
 624      =2  #define SPI1_SCKDIR_PAGE      P2DIR_PAGE
 625      =2  #define SPI1_SCK              4
 626      =2  
 627      =2  #define ISP_MISOPort          P2
 628      =2  #define ISP_MISOSHADOW        P2Shadow
 629      =2  #define ISP_MISODIR           P2DIR
 630      =2  #define ISP_MISOSHADOWDIR     P2ShadowDIR
 631      =2  #define ISP_MISODIR_PAGE      P2DIR_PAGE
 632      =2  #define ISP_MISO              2
 633      =2  
 634      =2  #define ISP_MOSIPort          P2
 635      =2  #define ISP_MOSISHADOW        P2Shadow
 636      =2  #define ISP_MOSIDIR           P2DIR
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 819 

 637      =2  #define ISP_MOSISHADOWDIR     P2ShadowDIR
 638      =2  #define ISP_MOSIDIR_PAGE      P2DIR_PAGE
 639      =2  #define ISP_MOSI              3
 640      =2  
 641      =2  #define ISP_SCKPort          P2
 642      =2  #define ISP_SCKSHADOW        P2Shadow
 643      =2  #define ISP_SCKDIR           P2DIR
 644      =2  #define ISP_SCKSHADOWDIR     P2ShadowDIR
 645      =2  #define ISP_SCKDIR_PAGE      P2DIR_PAGE
 646      =2  #define ISP_SCK              4
 647      =2  
 648      =2  #define IR_TX0Port          P3
 649      =2  #define IR_TX0SHADOW        P3Shadow
 650      =2  #define IR_TX0DIR           P3DIR
 651      =2  #define IR_TX0SHADOWDIR     P3ShadowDIR
 652      =2  #define IR_TX0DIR_PAGE      P3DIR_PAGE
 653      =2  #define IR_TX0              4
 654      =2  
 655      =2  #define IR_TX1Port          P3
 656      =2  #define IR_TX1SHADOW        P3Shadow
 657      =2  #define IR_TX1DIR           P3DIR
 658      =2  #define IR_TX1SHADOWDIR     P3ShadowDIR
 659      =2  #define IR_TX1DIR_PAGE      P3DIR_PAGE
 660      =2  #define IR_TX1              5
 661      =2  
 662      =2  #define IR_TX2Port          P3
 663      =2  #define IR_TX2SHADOW        P3Shadow
 664      =2  #define IR_TX2DIR           P3DIR
 665      =2  #define IR_TX2SHADOWDIR     P3ShadowDIR
 666      =2  #define IR_TX2DIR_PAGE      P3DIR_PAGE
 667      =2  #define IR_TX2              6
 668      =2  
 669      =2  #define ADC0Port          P3
 670      =2  #define ADC0SHADOW        P3Shadow
 671      =2  #define ADC0DIR           P3DIR
 672      =2  #define ADC0SHADOWDIR     P3ShadowDIR
 673      =2  #define ADC0DIR_PAGE      P3DIR_PAGE
 674      =2  #define ADC0              4
 675      =2  
 676      =2  #define ADC1Port          P3
 677      =2  #define ADC1SHADOW        P3Shadow
 678      =2  #define ADC1DIR           P3DIR
 679      =2  #define ADC1SHADOWDIR     P3ShadowDIR
 680      =2  #define ADC1DIR_PAGE      P3DIR_PAGE
 681      =2  #define ADC1              5
 682      =2  
 683      =2  #define ADC2Port          P3
 684      =2  #define ADC2SHADOW        P3Shadow
 685      =2  #define ADC2DIR           P3DIR
 686      =2  #define ADC2SHADOWDIR     P3ShadowDIR
 687      =2  #define ADC2DIR_PAGE      P3DIR_PAGE
 688      =2  #define ADC2              6
 689      =2  
 690      =2  #define ADC3Port          P3
 691      =2  #define ADC3SHADOW        P3Shadow
 692      =2  #define ADC3DIR           P3DIR
 693      =2  #define ADC3SHADOWDIR     P3ShadowDIR
 694      =2  #define ADC3DIR_PAGE      P3DIR_PAGE
 695      =2  #define ADC3              7
 696      =2  
 697      =2  #define UART1_TXDPort          P3
 698      =2  #define UART1_TXDSHADOW        P3Shadow
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 820 

 699      =2  #define UART1_TXDDIR           P3DIR
 700      =2  #define UART1_TXDSHADOWDIR     P3ShadowDIR
 701      =2  #define UART1_TXDDIR_PAGE      P3DIR_PAGE
 702      =2  #define UART1_TXD              1
 703      =2  
 704      =2  #define UART1_RXDPort          P3
 705      =2  #define UART1_RXDSHADOW        P3Shadow
 706      =2  #define UART1_RXDDIR           P3DIR
 707      =2  #define UART1_RXDSHADOWDIR     P3ShadowDIR
 708      =2  #define UART1_RXDDIR_PAGE      P3DIR_PAGE
 709      =2  #define UART1_RXD              0
 710      =2  
 711      =2  #define SPI0_SSNPort          P3
 712      =2  #define SPI0_SSNSHADOW        P3Shadow
 713      =2  #define SPI0_SSNDIR           P3DIR
 714      =2  #define SPI0_SSNSHADOWDIR     P3ShadowDIR
 715      =2  #define SPI0_SSNDIR_PAGE      P3DIR_PAGE
 716      =2  #define SPI0_SSN              0
 717      =2  
 718      =2  #define SPI0_MOSIPort          P2
 719      =2  #define SPI0_MOSISHADOW        P2Shadow
 720      =2  #define SPI0_MOSIDIR           P2DIR
 721      =2  #define SPI0_MOSISHADOWDIR     P2ShadowDIR
 722      =2  #define SPI0_MOSIDIR_PAGE      P2DIR_PAGE
 723      =2  #define SPI0_MOSI              5
 724      =2  
 725      =2  #define SPI0_MISOPort          P2
 726      =2  #define SPI0_MISOSHADOW        P2Shadow
 727      =2  #define SPI0_MISODIR           P2DIR
 728      =2  #define SPI0_MISOSHADOWDIR     P2ShadowDIR
 729      =2  #define SPI0_MISODIR_PAGE      P2DIR_PAGE
 730      =2  #define SPI0_MISO              6
 731      =2  
 732      =2  #define SPI0_SCKPort          P2
 733      =2  #define SPI0_SCKSHADOW        P2Shadow
 734      =2  #define SPI0_SCKDIR           P2DIR
 735      =2  #define SPI0_SCKSHADOWDIR     P2ShadowDIR
 736      =2  #define SPI0_SCKDIR_PAGE      P2DIR_PAGE
 737      =2  #define SPI0_SCK              7
 738      =2  
 739      =2  #define IR_RXPort          P3
 740      =2  #define IR_RXSHADOW        P3Shadow
 741      =2  #define IR_RXDIR           P3DIR
 742      =2  #define IR_RXSHADOWDIR     P3ShadowDIR
 743      =2  #define IR_RXDIR_PAGE      P3DIR_PAGE
 744      =2  #define IR_RX              1
 745      =2  
 746      =2  
 747      =2  #define FIREPort          P3
 748      =2  #define FIRESHADOW        P3Shadow
 749      =2  #define FIREDIR           P3DIR
 750      =2  #define FIRESHADOWDIR     P3ShadowDIR
 751      =2  #define FIREDIR_PAGE      P3DIR_PAGE
 752      =2  #define FIRE              6
 753      =2  
 754      =2  #define TRIACPort          P3
 755      =2  #define TRIACSHADOW        P3Shadow
 756      =2  #define TRIACDIR           P3DIR
 757      =2  #define TRIACSHADOWDIR     P3ShadowDIR
 758      =2  #define TRIACDIR_PAGE      P3DIR_PAGE
 759      =2  #define TRIAC              6
 760      =2  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 821 

 761      =2  #define GP_PWMPort          P3
 762      =2  #define GP_PWMSHADOW        P3Shadow
 763      =2  #define GP_PWMDIR           P3DIR
 764      =2  #define GP_PWMSHADOWDIR     P3ShadowDIR
 765      =2  #define GP_PWMDIR_PAGE      P3DIR_PAGE
 766      =2  #define GP_PWM              7
 767      =2  
 768      =2  #define ZEROXPort          P3
 769      =2  #define ZEROXSHADOW        P3Shadow
 770      =2  #define ZEROXDIR           P3DIR
 771      =2  #define ZEROXSHADOWDIR     P3ShadowDIR
 772      =2  #define ZEROXDIR_PAGE      P3DIR_PAGE
 773      =2  #define ZEROX              7
 774      =2  
 775      =2  #define IR_PWMPort          P3
 776      =2  #define IR_PWMSHADOW        P3Shadow
 777      =2  #define IR_PWMDIR           P3DIR
 778      =2  #define IR_PWMSHADOWDIR     P3ShadowDIR
 779      =2  #define IR_PWMDIR_PAGE      P3DIR_PAGE
 780      =2  #define IR_PWM              7
 781      =2  
 782      =2  #endif /* #if defined (ZW040x) || defined(ZW050x) */
 783      =2  
 784      =2  #endif /* _ZW_PINDEFS_H_ */
 785      =2  
  16      =1  #include <ZW_evaldefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: IO definitions for the Z-Wave Evaluation board
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: tro $
  14      =2   * Revision:         $Revision: 25909 $
  15      =2   * Last Changed:     $Date: 2013-05-29 14:49:43 +0200 (on, 29 maj 2013) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_EVALDEFS_H_
  19      =2  #define _ZW_EVALDEFS_H_
  20      =2  
  21      =2  /****************************************************************************/
  22      =2  /*                              INCLUDE FILES                               */
  23      =2  /****************************************************************************/
  24      =2  
  25      =2  /****************************************************************************/
  26      =2  /*                     EXPORTED TYPES and DEFINITIONS                       */
  27      =2  /****************************************************************************/
  28      =2  
  29      =2  /* Evaluation board LEDs */
  30      =2  
  31      =2  /* Turn LED on/off
  32      =2   *  led - LED number
  33      =2   */
  34      =2  
  35      =2  
  36      =2  #define LED_ON(led)   PIN_OFF(LED##led)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 822 

  37      =2  #define LED_OFF(led)  PIN_ON(LED##led)
  38      =2  
  39      =2  #define LED_TOGGLE(led) PIN_TOGGLE(LED##led)
  40      =2  
  41      =2  
  42      =2  /* LED number       Z-Wave Device pin */
  43      =2  
  44      =2  /* old stuff.. need to be removed*/
  45      =2  #define LEDZM4102_1Port       P1
  46      =2  #define LEDZM4102_1SHADOW     P1Shadow
  47      =2  #define LEDZM4102_1SHADOWDIR  P1ShadowDIR
  48      =2  #define LEDZM4102_1DIR        P1DIR
  49      =2  #define LEDZM4102_1DIR_PAGE   P1DIR_PAGE
  50      =2  #define LEDZM4102_1           0
  51      =2  
  52      =2  #ifdef ZM5202
  70      =2  /*LED1 P0_7*/
  71      =2  #define LED1Port        P0
  72      =2  #define LED1SHADOW      P0Shadow
  73      =2  #define LED1SHADOWDIR   P0ShadowDIR
  74      =2  #define LED1DIR         P0DIR
  75      =2  #define LED1DIR_PAGE    P0DIR_PAGE
  76      =2  #define LED1            7
  77      =2  
  78      =2  /*LED2 P3_7*/
  79      =2  #define LED2Port       P3
  80      =2  #define LED2SHADOW     P3Shadow
  81      =2  #define LED2SHADOWDIR  P3ShadowDIR
  82      =2  #define LED2DIR        P3DIR
  83      =2  #define LED2DIR_PAGE   P3DIR_PAGE
  84      =2  #define LED2           7
  85      =2  
  86      =2  /*LED3 P1_0*/
  87      =2  #define LED3Port       P1
  88      =2  #define LED3SHADOW     P1Shadow
  89      =2  #define LED3SHADOWDIR  P1ShadowDIR
  90      =2  #define LED3DIR        P1DIR
  91      =2  #define LED3DIR_PAGE   P1DIR_PAGE
  92      =2  #define LED3           0
  93      =2  
  94      =2  /*LED4 P1_2*/
  95      =2  #define LED4Port        P1
  96      =2  #define LED4SHADOW      P1Shadow
  97      =2  #define LED4SHADOWDIR   P1ShadowDIR
  98      =2  #define LED4DIR         P1DIR
  99      =2  #define LED4DIR_PAGE    P1DIR_PAGE
 100      =2  #define LED4            2
 101      =2  #endif
 102      =2  
 103      =2  
 104      =2  #endif /* _ZW_EVALDEFS_H_ */
  17      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 823 

  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  18      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  19      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  20      =1  
  21      =1  /****************************************************************************/
  22      =1  /*                          TYPES and DEFINITIONS                           */
  23      =1  /****************************************************************************/
  24      =1  
  25      =1  /**
  26      =1   * Returns the version of this CC.
  27      =1   */
  28      =1  #define CC_Version_getVersion() VERSION_VERSION_V3
  29      =1  
  30      =1  /**
  31      =1   * For backwards compatibility.
  32      =1   */
  33      =1  #define CommandClassVersionVersionGet()     CC_Version_getVersion()
  34      =1  #define handleCommandClassVersionAppl(a)    CC_Version_getCommandClassVersion_handler(a)
  35      =1  #define handleCommandClassVersion(a, b, c)  CC_Version_handler(a, b, c)
  36      =1  #define handleNbrFirmwareVersions()         CC_Version_getNumberOfFirmwareTargets_handler()
  37      =1  #define handleGetFirmwareVersion(a, b)      CC_Version_GetFirmwareVersion_handler(a, b)
  38      =1  #define handleGetFirmwareHwVersion()        CC_Version_GetHardwareVersion()
  39      =1  
  40      =1  typedef struct
  41      =1  {
  42      =1    uint8_t major;
  43      =1    uint8_t minor;
  44      =1    uint8_t patch;
  45      =1    uint16_t build_number;
  46      =1  }
  47      =1  version_info_t;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 824 

  48      =1  
  49      =1  /****************************************************************************/
  50      =1  /*                                FUNCTIONS                                 */
  51      =1  /****************************************************************************/
  52      =1  
  53      =1  /**
  54      =1   * @brief Read command class version
  55      =1   * @param cmdClass command class
  56      =1   * @return version
  57      =1   */
  58      =1  extern uint8_t CC_Version_getCommandClassVersion_handler(uint8_t cmdClass);
  59      =1  
  60      =1  /**
  61      =1   * @brief Handler for call command class modules version functions
  62      =1   * @param[in] rxOpt pointer to rx options
  63      =1   * @param[in] pCmd pointer to command
  64      =1   * @param[in] cmdLength length of command
  65      =1   * @return receive frame status.
  66      =1   */
  67      =1  received_frame_status_t CC_Version_handler(
  68      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  69      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  70      =1    uint8_t cmdLength);
  71      =1  
  72      =1  /**
  73      =1   * @brief Return number (N) of firmware versions.
  74      =1   * @return N
  75      =1   */
  76      =1  extern uint8_t CC_Version_getNumberOfFirmwareTargets_handler(void);
  77      =1  
  78      =1  /**
  79      =1   * Get firmware version of given firmware target index.
  80      =1   *
  81      =1   * @param[in] firmwareTargetIndex The number of firmware target [0;N-1] where N is the max number
  82      =1   * of available firmware targets.
  83      =1   * @param[out] pVariantgroup returns pointer to application version group number n.
  84      =1   */
  85      =1  extern void CC_Version_GetFirmwareVersion_handler(
  86      =1      uint8_t firmwareTargetIndex,
  87      =1      VG_VERSION_REPORT_V2_VG* pVariantgroup);
  88      =1  
  89      =1  /**
  90      =1   * @brief The Hardware Version field MUST report a value which is unique to this particular
  91      =1   * version of the product. It MUST be possible to uniquely determine the hardware
  92      =1   * characteristics from the Hardware Version field in combination with the Manufacturer
  93      =1   * ID, Product Type ID and Product ID fields of Manufacturer Specific Info Report
  94      =1   * of the Manufacturer Specific Command Class.
  95      =1   * This information allows a user to pick a firmware image version that is guaranteed
  96      =1   * to work with this particular version of the product.
  97      =1   * Note that the Hardware Version field is intended for the hardware version of the
  98      =1   * entire product, not just the version of the Z-Wave radio chip
  99      =1   * @return Hardware version
 100      =1   */
 101      =1  uint8_t CC_Version_GetHardwareVersion(void);
 102      =1  
 103      =1  /**
 104      =1   * Sets the host interface version and build number.
 105      =1   *
 106      =1   * The host interface could be a Serial API application. Hence, this function is only relevant
 107      =1   * in two-chip products.
 108      =1   *
 109      =1   * @param major Major version
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 825 

 110      =1   * @param minor Minor version
 111      =1   * @param patch Patch version
 112      =1   * @param build_number Build number
 113      =1   */
 114      =1  void CC_Version_SetHostInterfaceVersionInfo(
 115      =1      uint8_t major,
 116      =1      uint8_t minor,
 117      =1      uint8_t patch,
 118      =1      uint16_t build_number);
 119      =1  
 120      =1  /**
 121      =1   * Sets the application version and build number.
 122      =1   *
 123      =1   * @param major Major version
 124      =1   * @param minor Minor version
 125      =1   * @param patch Patch version
 126      =1   * @param build_number Build number
 127      =1   */
 128      =1  void CC_Version_SetApplicationVersionInfo(
 129      =1      uint8_t major,
 130      =1      uint8_t minor,
 131      =1      uint8_t patch,
 132      =1      uint16_t build_number);
 133      =1  
 134      =1  #endif /*_COMMAND_CLASS_VERSION_H_*/
  60          #include <CommandClassZWavePlusInfo.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Z-Wave Plus Info.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_ZWAVE_PLUS_INFO_H_
   8      =1  #define _COMMAND_CLASS_ZWAVE_PLUS_INFO_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 826 

  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ZW_sysdefs.h>
   1      =2  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Z-Wave system defines
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: tro $
  29      =2   * Revision:         $Revision: 23873 $
  30      =2   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SYSDEFS_H_
  15      =1  #include <ZW_pindefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: In/Out definitions Z-Wave Single Chips
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: efh $
  14      =2   * Revision:         $Revision: 23305 $
  15      =2   * Last Changed:     $Date: 2012-09-04 08:36:50 +0200 (ti, 04 sep 2012) $
  16      =2   *
  17      =2   ****************************************************************************/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 827 

  18      =2  #ifndef _ZW_PINDEFS_H_
 785      =2  
  16      =1  #include <ZW_evaldefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: IO definitions for the Z-Wave Evaluation board
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: tro $
  14      =2   * Revision:         $Revision: 25909 $
  15      =2   * Last Changed:     $Date: 2013-05-29 14:49:43 +0200 (on, 29 maj 2013) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_EVALDEFS_H_
  17      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  18      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  19      =1  
  20      =1  /**
  21      =1   * Returns the version of this CC.
  22      =1   */
  23      =1  #define CommandClassZWavePlusVersionGet() ZWAVEPLUS_INFO_VERSION_V2
  24      =1  #define CommandClassZWavePlusVersion() CommandClassZWavePlusVersionGet()
  25      =1  
  26      =1  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 828 

  27      =1   * Endpoint Icons data struct
  28      =1   */
  29      =1  typedef struct _ENDPOINT_ICONS_
  30      =1  {
  31      =1    uint16_t installerIconType;
  32      =1    uint16_t userIconType;
  33      =1  } ST_ENDPOINT_ICONS;
  34      =1  
  35      =1  /**
  36      =1   * @brief Init Command class Z-Wave Plus Info
  37      =1   * @param[in] pEpIcon pointer to device incon types
  38      =1   * @param[in] nbrOfElements number of elements
  39      =1   * @return description..
  40      =1   */
  41      =1  void CommandClassZWavePlusInfoInit(ST_ENDPOINT_ICONS* pEpIcon, uint8_t nbrOfElements);
  42      =1  
  43      =1  /**
  44      =1   * @brief Handler for Z-Wave Plus Info CC.
  45      =1   * @param[in] rxOpt Pointer to receive options.
  46      =1   * @param[in] pCmd Pointer to payload from the received frame
  47      =1   * @param[in] cmdLength Length of the received command given in bytes.
  48      =1   * @return receive frame status.
  49      =1   */
  50      =1  received_frame_status_t handleCommandClassZWavePlusInfo(
  51      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  52      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  53      =1    uint8_t cmdLength);
  54      =1  
  55      =1  #endif
  61          #include <CommandClassPowerLevel.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Powerlevel.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_POWERLEVEL_H_
   8      =1  #define _COMMAND_CLASS_POWERLEVEL_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 829 

  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  15      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  16      =1  
  17      =1  /**
  18      =1   * Returns the version of this CC.
  19      =1   */
  20      =1  #define CC_Powerlevel_getVersion() POWERLEVEL_VERSION
  21      =1  
  22      =1  /**
  23      =1   * For backwards compatibility.
  24      =1   */
  25      =1  #define CommandClassPowerLevelVersionGet()    CC_Powerlevel_getVersion()
  26      =1  #define handleCommandClassPowerLevel(a, b, c) CC_Powerlevel_handler(a, b, c)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 830 

  27      =1  #define CommandClassPowerLevelIsInProgress()  CC_Powerlevel_isInProgress()
  28      =1  
  29      =1  /*
  30      =1   * TODO: Merge the following two functions (loadStatusPowerLevel & loadInitStatusPowerLevel) into
  31      =1   * one init function if we're not saving anything in NVM.
  32      =1   */
  33      =1  /**
  34      =1   * @brief loadStatusPowerLevel
  35      =1   * Load parameters from NVM
  36      =1   */
  37      =1  void loadStatusPowerLevel(void);
  38      =1  
  39      =1   /**
  40      =1   * @brief loadInitStatusPowerLevel
  41      =1   * loads initial power level status from nvram
  42      =1   */
  43      =1  void loadInitStatusPowerLevel(void);
  44      =1  
  45      =1  /**
  46      =1   * @brief Handler for Powerlevel CC.
  47      =1   * @param[in] rxOpt Pointer to receive options.
  48      =1   * @param[in] pCmd Pointer to payload from the received frame
  49      =1   * @param[in] cmdLength Length of the received command given in bytes.
  50      =1   * @return receive frame status.
  51      =1   */
  52      =1  received_frame_status_t CC_Powerlevel_handler(
  53      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  54      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  55      =1    uint8_t cmdLength);
  56      =1  
  57      =1  /**
  58      =1   * Returns whether a powerlevel test is in progress.
  59      =1   * @return TRUE if in progress, FALSE otherwise.
  60      =1   */
  61      =1  BOOL CC_Powerlevel_isInProgress(void);
  62      =1  
  63      =1  #endif
  62          #include <CommandClassDeviceResetLocally.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Device Reset Locally.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_DEVICE_RESET_LOCALLY_H_
   8      =1  #define _COMMAND_CLASS_DEVICE_RESET_LOCALLY_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 831 

  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  15      =1  
  16      =1  /****************************************************************************/
  17      =1  /*                       PUBLIC TYPES and DEFINITIONS                       */
  18      =1  /****************************************************************************/
  19      =1  
  20      =1  /**
  21      =1   * Returns the version of this CC.
  22      =1   */
  23      =1  #define CommandClassDeviceResetLocallyVersionGet() DEVICE_RESET_LOCALLY_VERSION
  24      =1  
  25      =1  /**
  26      =1   * For backwards compatibility.
  27      =1   */
  28      =1  #define handleCommandClassDeviceResetLocally(a,b) CC_DeviceResetLocally_notification_tx(a,b)
  29      =1  
  30      =1  /****************************************************************************/
  31      =1  /*                            PUBLIC FUNCTIONS                              */
  32      =1  /****************************************************************************/
  33      =1  
  34      =1  /**
  35      =1   * Transmits a Device Reset Locally Notification.
  36      =1   * @param[in] pProfile Pointer to AGI profile.
  37      =1   * @param[in] pCallback Callback function pointer. Use the callback call to reset the node.
  38      =1   * This function callback MUST be implemented.
  39      =1   */
  40      =1  void CC_DeviceResetLocally_notification_tx(
  41      =1    agi_profile_t * pProfile,
  42      =1    VOID_CALLBACKFUNC(pCallback)(transmission_result_t * pTransmissionResult));
  43      =1  
  44      =1  #endif
  63          #include <CommandClassBasic.h>
   1      =1  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 832 

   2      =1   * @file
   3      =1   * Handler for Command Class Basic.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_BASIC_H_
   8      =1  #define _COMMAND_CLASS_BASIC_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 833 

  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  15      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  16      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
  17      =1  
  18      =1  /**
  19      =1   * Returns the version of this CC.
  20      =1   */
  21      =1  #define CommandClassBasicVersionGet() BASIC_VERSION_V2
  22      =1  
  23      =1  /**
  24      =1   * @brief handleBasicSetCommand
  25      =1   * Application code. Incoming command class Set call to set value in application endpoint
  26      =1   * @param[in] val parmeter dependent of the application device class
  27      =1   * @param[in] endpoint is the destination endpoint
  28      =1   */
  29      =1  extern void handleBasicSetCommand(
  30      =1    BYTE val,
  31      =1    BYTE endpoint
  32      =1  );
  33      =1  
  34      =1  
  35      =1  /**
  36      =1   * @brief getAppBasicReport
  37      =1   * Application code. Incoming command class Report call to set value in application endpoint
  38      =1   * @param[in] endpoint is the destination endpoint
  39      =1   * @return get application value to send in a report
  40      =1   */
  41      =1  extern BYTE getAppBasicReport( BYTE endpoint );
  42      =1  
  43      =1  /**
  44      =1   * @brief getAppBasicReportTarget
  45      =1   * Return the value of an ongoing transition or the most recent transition.
  46      =1   * @param[in] endpoint is the destination endpoint
  47      =1   * @return target value.
  48      =1   */
  49      =1  extern BYTE getAppBasicReportTarget( BYTE endpoint );
  50      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 834 

  51      =1  /**
  52      =1   * @brief Return the time needed to reach the Target Value at the actual transition rate.
  53      =1   * @details Duration encoded as follow:
  54      =1   * Duration      Description
  55      =1   *  0x00           0 seconds. Already at the Target Value.
  56      =1   *  0x01-0x7F      1 second (0x01) to 127 seconds (0x7F) in 1 second resolution.
  57      =1   *  0x80-0xFD      1 minute (0x80) to 126 minutes (0xFD) in 1 minute resolution.
  58      =1   *  0xFE           Unknown duration
  59      =1   *  0xFF           Reserved
  60      =1   * @param[in] endpoint is the destination endpoint
  61      =1   * @return duration time.
  62      =1   */
  63      =1  BYTE getAppBasicReportDuration(BYTE endpoint);
  64      =1  
  65      =1  /**
  66      =1   * @brief Handler for CC Basic.
  67      =1   * @param[in] rxOpt receive options of type RECEIVE_OPTIONS_TYPE_EX
  68      =1   * @param[in] pCmd Payload from the received frame
  69      =1   * @param[in] cmdLength number of command bytes including the command
  70      =1   * @return receive frame status.
  71      =1  */
  72      =1  received_frame_status_t handleCommandClassBasic(
  73      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  74      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  75      =1    BYTE cmdLength);
  76      =1  
  77      =1  
  78      =1  /**
  79      =1   * @brief Send unsolicited command class Basic report
  80      =1   * @param[in] pProfile pointer to AGI profile
  81      =1   * @param[in] sourceEndpoint source endpoint
  82      =1   * @param[in] bValue Basic Report value
  83      =1   * @param[out] pCbFunc callback function pointer returning status on job. Can be initialized to NULL.
  84      =1   * @return status of the job of type JOB_STATUS
  85      =1   */
  86      =1  JOB_STATUS CmdClassBasicReportSend(
  87      =1    AGI_PROFILE* pProfile,
  88      =1    BYTE sourceEndpoint,
  89      =1    BYTE bValue,
  90      =1    VOID_CALLBACKFUNC(pCbFunc)(TRANSMISSION_RESULT * pTransmissionResult));
  91      =1  
  92      =1  /**
  93      =1   * @brief Sends an unsolicited Basic Set command.
  94      =1   * @param[in] pProfile Pointer to an AGI profile defined in the config_app.h of the application.
  95      =1   * @param[in] sourceEndpoint Source endpoint if the sending device use endpoints. Otherwise 0.
  96      =1   * @param[in] bValue Value as defined in the specification of the command.
  97      =1   * @param[out] pCbFunc Callback function pointer giving a result of the transmission.
  98      =1   * @return Status on whether the transmission could be initiated.
  99      =1   */
 100      =1  //@ [CmdClassBasicSetSend_ID]
 101      =1  JOB_STATUS CmdClassBasicSetSend(
 102      =1    AGI_PROFILE* pProfile,
 103      =1    BYTE sourceEndpoint,
 104      =1    BYTE bValue,
 105      =1    VOID_CALLBACKFUNC(pCbFunc)(TRANSMISSION_RESULT * pTransmissionResult));
 106      =1  //@ [CmdClassBasicSetSend_ID]
 107      =1  
 108      =1  #endif
  64          #include <CommandClassBinarySwitch.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Binary Switch.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 835 

   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_BINARY_SWITCH_H_
   8      =1  #define _COMMAND_CLASS_BINARY_SWITCH_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ZW_sysdefs.h>
   1      =2  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 836 

  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Z-Wave system defines
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: tro $
  29      =2   * Revision:         $Revision: 23873 $
  30      =2   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SYSDEFS_H_
  15      =1  #include <ZW_pindefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: In/Out definitions Z-Wave Single Chips
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: efh $
  14      =2   * Revision:         $Revision: 23305 $
  15      =2   * Last Changed:     $Date: 2012-09-04 08:36:50 +0200 (ti, 04 sep 2012) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_PINDEFS_H_
 785      =2  
  16      =1  #include <ZW_evaldefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: IO definitions for the Z-Wave Evaluation board
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: tro $
  14      =2   * Revision:         $Revision: 25909 $
  15      =2   * Last Changed:     $Date: 2013-05-29 14:49:43 +0200 (on, 29 maj 2013) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_EVALDEFS_H_
  17      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 837 

   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  18      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  19      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  20      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
  21      =1  
  22      =1  /**
  23      =1   * Returns the version of this CC.
  24      =1   */
  25      =1  #define CommandClassBinarySwitchVersionGet() SWITCH_BINARY_VERSION
  26      =1  
  27      =1  /**
  28      =1   * The value can be either 0x00 (off/disable) or 0xFF (on/enable). The values from
  29      =1   * 1 to 99 (0x01 to 0x63) MUST be mapped to 0xFF upon receipt of the Command in the
  30      =1   * device. All other values are reserved and MUST be ignored by the receiving device.
  31      =1   */
  32      =1  typedef enum
  33      =1  {
  34      =1    CMD_CLASS_BIN_OFF = SWITCH_BINARY_SET_OFF_DISABLE_V2,
  35      =1    CMD_CLASS_BIN_ON  = SWITCH_BINARY_SET_ON_ENABLE_V2
  36      =1  }
  37      =1  CMD_CLASS_BIN_SW_VAL;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 838 

  38      =1  
  39      =1  /**
  40      =1   * Application code. Incoming command class Get call to read value from application endpoint
  41      =1   * @param[in] endpoint is endpoint destination for the Get job
  42      =1   * @return value
  43      =1   */
  44      =1  extern uint8_t handleAppltBinarySwitchGet(uint8_t endpoint);
  45      =1  
  46      =1  /**
  47      =1   * @brief Application code. Incoming command class Set call to set value in
  48      =1   * application endpoint.
  49      =1   * @param[in] val parmeter of type  CMD_CLASS_BIN_SW_VAL
  50      =1   * @param[in] endpoint is the destination endpoint
  51      =1   */
  52      =1  extern void handleApplBinarySwitchSet(
  53      =1    CMD_CLASS_BIN_SW_VAL val,
  54      =1    uint8_t endpoint);
  55      =1  
  56      =1  /**
  57      =1   * Handler for command class Binary Switch.
  58      =1   * @param[in] rxOpt receive options of type RECEIVE_OPTIONS_TYPE_EX
  59      =1   * @param[in] pCmd Payload from the received frame
  60      =1   * @param[in] cmdLength Number of command bytes including the command
  61      =1   * @return receive frame status.
  62      =1   */
  63      =1  received_frame_status_t handleCommandClassBinarySwitch(
  64      =1    RECEIVE_OPTIONS_TYPE_EX * rxOpt,
  65      =1    ZW_APPLICATION_TX_BUFFER * pCmd,
  66      =1    uint8_t cmdLength);
  67      =1  
  68      =1  /**
  69      =1   * Check value is correct for current class and call application handleApplBinarySwitchSet function
  70      =1   * @param[in] val is value to validate
  71      =1   * @param[in] endpoint is the destination endpoint
  72      =1   */
  73      =1  void CommandClassBinarySwitchSupportSet(
  74      =1    uint8_t val,
  75      =1    uint8_t endpoint);
  76      =1  
  77      =1  /**
  78      =1   * Send a unsolicited command class Binary Switch report.
  79      =1   * @param[in] pProfile pointer to AGI profile
  80      =1   * @param[in] sourceEndpoint source endpoint
  81      =1   * @param[in] bValue report value of enum type CMD_CLASS_BIN_SW_VAL
  82      =1   * @param[out] pCbFunc callback funtion returning status destination node receive job.
  83      =1   * @return status on the job.
  84      =1   */
  85      =1  JOB_STATUS CmdClassBinarySwitchReportSendUnsolicited(
  86      =1    AGI_PROFILE* pProfile,
  87      =1    uint8_t sourceEndpoint,
  88      =1    CMD_CLASS_BIN_SW_VAL bValue,
  89      =1    VOID_CALLBACKFUNC(pCbFunc)(TRANSMISSION_RESULT * pTransmissionResult));
  90      =1  
  91      =1  #endif /* _COMMAND_CLASS_BINARY_SWITCH_H_ */
  65          #include <CommandClassSupervision.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Supervision.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   *
   6      =1   * ## Description
   7      =1   * Command Class Supervision is built into the Application Framework and handle
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 839 

   8      =1   * Supervision communication on S2 encapsulated frames. Each Command Class
   9      =1   * request job setup if Supervision should be enabled. Only Set and Report commands
  10      =1   * are Supervision Get enabled why Get is disabled.
  11      =1   *
  12      =1   * Command Class Supervision is default configuration to not support more Supervision
  13      =1   * reports on a Supervision Get command. In Supervision Get command is 'more status
  14      =1   * updates' field set to CC_SUPERVISION_STATUS_UPDATES_NOT_SUPPORTED.
  15      =1   *
  16      =1   * ## Configuration scenarios
  17      =1   *
  18      =1   * ### Default configuration
  19      =1   * Device does not handle more Supervision reports. Device receive request jobs and return
  20      =1   * always only one Supervision report result = CC_SUPERVISION_STATUS_SUCCESS. No need to
  21      =1   * call CommandClassSupervisionInit() for initialization of Command Class Supervision.
  22      =1   *
  23      =1   * @startuml
  24      =1   * title Handle one Supervision Report sequence
  25      =1   * actor User
  26      =1   * box "Source node" #LightBlue
  27      =1   *    participant WallSwitch_appl
  28      =1   *    participant Framework_protocol
  29      =1   * end box
  30      =1   * participant host_node
  31      =1   *
  32      =1   * == Usage ==
  33      =1   * User->WallSwitch_appl: key press
  34      =1   * WallSwitch_appl->Framework_protocol: Basic Set
  35      =1   * activate Framework_protocol
  36      =1   * Framework_protocol->host_node: S2[SupervisionGet[BasicSet]]
  37      =1   * activate host_node
  38      =1   * note right
  39      =1   *  Status Updates = STATUS_UPDATES_NOT_SUPPORTED
  40      =1   *  why only one Supervision report is returned
  41      =1   * end note
  42      =1   * host_node-->Framework_protocol: ack
  43      =1   * Framework_protocol-->WallSwitch_appl: status
  44      =1   * deactivate Framework_protocol
  45      =1   * host_node->Framework_protocol: S2[SupervisionReport(SUPERVISION STATUS)]
  46      =1   * deactivate host_node
  47      =1   *
  48      =1   * host_node->Framework_protocol : S2[SupervisionGet[BasicSet]]
  49      =1   * activate Framework_protocol
  50      =1   * Framework_protocol->WallSwitch_appl : Basic Set
  51      =1   * WallSwitch_appl-->Framework_protocol
  52      =1   * Framework_protocol->host_node: S2[SupervisionReport(SUPERVISION STATUS)]
  53      =1   * deactivate Framework_protocol
  54      =1   *
  55      =1   * @enduml
  56      =1   *
  57      =1   * ### Handle more Supervision Reports
  58      =1   * Device has the possibility to display destination node is working. Example Wall controller
  59      =1   * with a display showing a device is working (CC_SUPERVISION_STATUS_WORKING) until position
  60      =1   * is reached (CC_SUPERVISION_STATUS_SUCCESS).
  61      =1   *
  62      =1   * @code
  63      =1   *    void ApplicationInitSW(..)
  64      =1   *    {
  65      =1   *       CommandClassSupervisionInit(
  66      =1   *         CC_SUPERVISION_STATUS_UPDATES_NOT_SUPPORTED,
  67      =1   *         NULL,
  68      =1   *         ZCB_CommandClassSupervisionReportReceivedHandler);
  69      =1   *    }
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 840 

  70      =1   *
  71      =1   *
  72      =1   *    void ZCB_CommandClassSupervisionReportReceivedHandler(cc_supervision_status_t status, uint8_t durati
             -on)
  73      =1   *    {
  74      =1   *      :
  75      =1   *    }
  76      =1   * @endcode
  77      =1   *
  78      =1   * @startuml
  79      =1   * title Handle more Supervision reports sequence
  80      =1   * actor User
  81      =1   * box "Source node" #LightBlue
  82      =1   *    participant WallSwitch_appl
  83      =1   *    participant Framework_protocol
  84      =1   * end box
  85      =1   * participant host_node
  86      =1   *
  87      =1   * == Initialization ==
  88      =1   *   WallSwitch_appl->Framework_protocol: CommandClassSupervisionInit(..)
  89      =1   *   Framework_protocol-->WallSwitch_appl
  90      =1   * == Usage ==
  91      =1   * User->WallSwitch_appl: key press
  92      =1   * WallSwitch_appl->Framework_protocol: Basic Set
  93      =1   * activate Framework_protocol
  94      =1   * Framework_protocol->host_node: S2[SupervisionGet[BasicSet]]
  95      =1   * activate host_node
  96      =1   * host_node-->Framework_protocol: ack
  97      =1   * Framework_protocol-->WallSwitch_appl: status BasicSet
  98      =1   * deactivate Framework_protocol
  99      =1   * host_node->Framework_protocol: S2[SupervisionReport(WORKING)]
 100      =1   * Framework_protocol->WallSwitch_appl: CC_SUPERVISION_STATUS_WORKING
 101      =1   * WallSwitch_appl->User: Display indication working
 102      =1   * host_node->Framework_protocol: S2[SupervisionReport(SUCCESS)]
 103      =1   * deactivate host_node
 104      =1   * Framework_protocol->WallSwitch_appl: CC_SUPERVISION_STATUS_SUCCESS
 105      =1   * WallSwitch_appl->User: Display indication finish
 106      =1   *
 107      =1   * host_node->Framework_protocol : S2[SupervisionGet[BasicSet]]
 108      =1   * activate Framework_protocol
 109      =1   * Framework_protocol->WallSwitch_appl : Basic Set
 110      =1   * WallSwitch_appl-->Framework_protocol
 111      =1   * Framework_protocol->host_node: S2[SupervisionReport(SUPERVISION STATUS)]
 112      =1   * deactivate Framework_protocol
 113      =1   *
 114      =1   * @enduml
 115      =1   *
 116      =1   * ### Control Supervision Reports
 117      =1   * Device has the possibility to send more Supervision Reports to report
 118      =1   * ongoing Request job. Example application Doorlock Keypad reports back Doorlock
 119      =1   * operation is started and a report when it is finish.
 120      =1   *
 121      =1   * @code
 122      =1   *    void ApplicationInitSW(..)
 123      =1   *    {
 124      =1   *       CommandClassSupervisionInit(
 125      =1   *         CC_SUPERVISION_STATUS_UPDATES_SUPPORTED,
 126      =1   *         ZCB_CommandClassSupervisionGetReceived,
 127      =1   *         NULL);
 128      =1   *    }
 129      =1   *
 130      =1   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 841 

 131      =1   *    void ZCB_CommandClassSupervisionGetReceived(SUPERVISION_GET_RECEIVED_HANDLER_ARGS * pArgs)
 132      =1   *    {
 133      =1   *      :
 134      =1   *    }
 135      =1   * @endcode
 136      =1   *
 137      =1   * @startuml
 138      =1   * title Control Supervision reports sequence
 139      =1   * box "Doorlock Keypad node" #LightBlue
 140      =1   *    participant DoorlockKeyPad_appl
 141      =1   *    participant Framework_protocol
 142      =1   * end box
 143      =1   * participant controller_node
 144      =1   *
 145      =1   * == Initialization ==
 146      =1   *   DoorlockKeyPad_appl -> Framework_protocol: CommandClassSupervisionInit(..)
 147      =1   *   Framework_protocol --> DoorlockKeyPad_appl
 148      =1   *
 149      =1   * == Usage controller do not support more Supervision Reports ==
 150      =1   * controller_node -> Framework_protocol : S2[SupervisionGet[DoorlockOperation]]
 151      =1   * activate Framework_protocol
 152      =1   * Framework_protocol -->  controller_node : ack
 153      =1   *
 154      =1   * Framework_protocol -> DoorlockKeyPad_appl : DoorlockOperation
 155      =1   * DoorlockKeyPad_appl --> Framework_protocol
 156      =1   * Framework_protocol -> DoorlockKeyPad_appl : ZCB_CommandClassSupervisionGetReceived
 157      =1   * DoorlockKeyPad_appl --> Framework_protocol : CC_SUPERVISION_STATUS_WORKING & duration = 2
 158      =1   * Framework_protocol -> controller_node : SupervisionReport
 159      =1   * deactivate Framework_protocol
 160      =1   * DoorlockKeyPad_appl -> DoorlockKeyPad_appl : DoorlockOperation finish
 161      =1   *
 162      =1   * == Usage controller support more Supervision Reports ==
 163      =1   * controller_node -> Framework_protocol : S2[SupervisionGet[DoorlockOperation]]
 164      =1   * activate Framework_protocol
 165      =1   * Framework_protocol -->  controller_node : ack
 166      =1   * Framework_protocol -> DoorlockKeyPad_appl : DoorlockOperation
 167      =1   * DoorlockKeyPad_appl --> Framework_protocol
 168      =1   * Framework_protocol -> DoorlockKeyPad_appl : ZCB_CommandClassSupervisionGetReceived
 169      =1   * DoorlockKeyPad_appl --> Framework_protocol : CC_SUPERVISION_STATUS_WORKING & duration = 2
 170      =1   * Framework_protocol -> controller_node : SupervisionReport
 171      =1   * deactivate Framework_protocol
 172      =1   * ...2 sec later...
 173      =1   * DoorlockKeyPad_appl -> Framework_protocol : CmdClassSupervisionReportSend CC_SUPERVISION_STATUS_SUCCESS
             - & duration = 0
 174      =1   * Framework_protocol -> controller_node : SupervisionReport
 175      =1   *
 176      =1   * @enduml
 177      =1   */
 178      =1  
 179      =1  
 180      =1  
 181      =1  
 182      =1  
 183      =1  #ifndef _COMMAND_CLASS_SUPERVISION_H_
 184      =1  #define _COMMAND_CLASS_SUPERVISION_H_
 185      =1  
 186      =1  
 187      =1  /****************************************************************************/
 188      =1  /*                              INCLUDE FILES                               */
 189      =1  /****************************************************************************/
 190      =1  #include <ZW_stdint.h>
   1      =2  /*
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 842 

   2      =2   * ZW_stdint.h
   3      =2   *
   4      =2   * Define integer types by their conventional POSIX names [1].
   5      =2   * Note: This is a small subset of the spec, NOT a complete definition.
   6      =2   *
   7      =2   *  [1] http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html
   8      =2   *
   9      =2   *  Created on: 18/01/2013
  10      =2   *      Author: jbu
  11      =2   */
  12      =2  #ifndef ZW_STDINT_H_
 191      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
 192      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 843 

  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
 193      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
 194      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
 195      =1  
 196      =1  
 197      =1  #define CC_SUPERVISION_EXTRACT_SESSION_ID(properties)  (properties & 0x3F) /**< extract session id from pr
             -operties bits [0..5] */
 198      =1  #define CC_SUPERVISION_ADD_SESSION_ID(properties)  (properties & 0x3F)     /**< add session id from proper
             -ties bits [0..5] */
 199      =1  #define CC_SUPERVISION_EXTRACT_MORE_STATUS_UPDATE(status) (status >> 7)    /**< extract more status update
             - field bit 7, CC SUPERVISION_REPORT */
 200      =1  #define CC_SUPERVISION_ADD_MORE_STATUS_UPDATE(status)  (status << 7)       /**< status values: {0,1}. Set 
             -bit 7, CC SUPERVISION_REPORT */
 201      =1  #define CC_SUPERVISION_EXTRACT_STATUS_UPDATE(status) (status >> 7)    /**< extract more status update fiel
             -d bit 7, CC SUPERVISION_GET */
 202      =1  #define CC_SUPERVISION_ADD_STATUS_UPDATE(status)  (status << 7)       /**< status values: {0,1}. Set bit 7
             -, CC SUPERVISION_GET */
 203      =1  
 204      =1  #define CC_SUPERVISION_COMMAND_PROPERTIES_SESSION_ID_BITMASK         0x3F
 205      =1  #define CC_SUPERVISION_COMMAND_PROPERTIES_RESERVED_BITMASK           0x40
 206      =1  #define CC_SUPERVISION_COMMAND_PROPERTIES_MORE_STATUS_UPDATE_BITMASK 0x80
 207      =1  
 208      =1  /**
 209      =1   * Enum type is used in CC SUPERVISION_REPORT to allow a receiving node to advertise
 210      =1   * application status updates in future Supervision Report Commands
 211      =1   */
 212      =1  typedef enum
 213      =1  {
 214      =1    CC_SUPERVISION_MORE_STATUS_UPDATES_THIS_IS_LAST,
 215      =1    CC_SUPERVISION_MORE_STATUS_UPDATES_REPORTS_TO_FOLLOW
 216      =1  } cc_supervision_more_status_updates_t;
 217      =1  
 218      =1  /**
 219      =1   * enum type used in CC SUPERVISION_GET to advertise if more Supervision Reports follow
 220      =1   * for the actual Session ID.
 221      =1   */
 222      =1  typedef enum
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 844 

 223      =1  {
 224      =1    CC_SUPERVISION_STATUS_UPDATES_NOT_SUPPORTED,
 225      =1    CC_SUPERVISION_STATUS_UPDATES_SUPPORTED
 226      =1  }cc_supervision_status_updates_t;
 227      =1  
 228      =1  /**
 229      =1   * Returns the version of this CC.
 230      =1   */
 231      =1  #define CommandClassSupervisionVersionGet() SUPERVISION_VERSION
 232      =1  
 233      =1  /**
 234      =1   * Status of Supervision.
 235      =1   */
 236      =1  typedef enum _SUPERVISION_STATUS_
 237      =1  {
 238      =1    CC_SUPERVISION_STATUS_NOT_SUPPORTED,/**< SUPERVISION_STATUS_NOT_SUPPORTED */
 239      =1    CC_SUPERVISION_STATUS_WORKING,      /**< SUPERVISION_STATUS_WORKING */
 240      =1    CC_SUPERVISION_STATUS_FAIL,         /**< SUPERVISION_STATUS_FAIL */
 241      =1    CC_SUPERVISION_STATUS_SUCCESS = 0xFF/**< SUPERVISION_STATUS_SUCCESS */
 242      =1  } cc_supervision_status_t;
 243      =1  
 244      =1  /**
 245      =1   * This struct is used for the arguments in pGetReceivedHandler function
 246      =1   * pointer in CommandClassSupervisionInit.
 247      =1   */
 248      =1  typedef struct
 249      =1  {
 250      =1    uint8_t cmdClass; /**< Input */
 251      =1    uint8_t cmd; /**< Input */
 252      =1    uint8_t properties1; /**< Input: bit[0..5] session id, bit[7] status update of type cc_supervision_statu
             -s_updates_t.
 253      =1                           Output: bit[0..5] session id, bit[7] more status updates of type cc_supervision_m
             -ore_status_updates_t */
 254      =1    cc_supervision_status_t status; /**< Output */
 255      =1    uint8_t duration; /**< Output */
 256      =1    RECEIVE_OPTIONS_TYPE_EX * rxOpt; /**< Input */
 257      =1  }
 258      =1  SUPERVISION_GET_RECEIVED_HANDLER_ARGS;
 259      =1  
 260      =1  
 261      =1  
 262      =1  /**
 263      =1   * @brief Initialize the Supervision command class with suitable callback
 264      =1   * functions.
 265      =1   * @param status_updates parameter is used CC SUPERVISION_GET command. This flag is
 266      =1   * used to allow a receiving node to advertise application status updates in future
 267      =1   * Supervision Report Commands. Default value 'status_updates_not_supported'.
 268      =1   * @param pGetReceivedHandler Pointer to function which can be called when a
 269      =1   * Supervision get command is received.
 270      =1   * @param pReportReceivedHandler Pointer to function which can be called when a
 271      =1   * Supervision report command is received.
 272      =1   */
 273      =1  void
 274      =1  CommandClassSupervisionInit( cc_supervision_status_updates_t status_updates,
 275      =1          VOID_CALLBACKFUNC(pGetReceivedHandler)(SUPERVISION_GET_RECEIVED_HANDLER_ARGS * pArgs),
 276      =1          VOID_CALLBACKFUNC(pReportReceivedHandler)(cc_supervision_status_t status, uint8_t duration));
 277      =1  
 278      =1  /**
 279      =1   * @brief Handler for command class Supervision
 280      =1   * @param[in] rxOpt receive options of type RECEIVE_OPTIONS_TYPE_EX
 281      =1   * @param[in] pCmd Payload from the received frame
 282      =1   * @param[in] cmdLength number of command bytes including the command
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 845 

 283      =1   * @return receive frame status.
 284      =1   */
 285      =1  received_frame_status_t handleCommandClassSupervision(
 286      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
 287      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
 288      =1    uint8_t cmdLength);
 289      =1  
 290      =1  /**
 291      =1   * @brief CmdClassSupervisionReportSend
 292      =1   * @param[in] pTxOptionsEx Transmit options of type TRANSMIT_OPTIONS_TYPE_EX
 293      =1   * @param[in] properties includes:
 294      =1   *  bit[0..5] Session ID
 295      =1   *  bit[6] unused and
 296      =1   *  bit[7] more status updates. This field is used to advertise if more Supervision Reports
 297      =1   *  follow for the actual Session ID. [0] last report, [1] more report follow.
 298      =1   * @param[in] status Supervision status.
 299      =1   * @param[in] duration The duration must comply with the following:
 300      =1   * 0x00 0 seconds. (Already at the Target Value.)
 301      =1   * 0x01-0x7F  1 second (0x01) to 127 seconds (0x7F) in 1 second resolution.
 302      =1   * 0x80-0xFD  1 minute (0x80) to 126 minutes (0xFD) in 1 minute resolution.
 303      =1   * 0xFE Unknown duration
 304      =1   * 0xFF Reserved
 305      =1   * @return status of the job of type JOB_STATUS
 306      =1   */
 307      =1  JOB_STATUS
 308      =1  CmdClassSupervisionReportSend(
 309      =1    TRANSMIT_OPTIONS_TYPE_SINGLE_EX* pTxOptionsEx,
 310      =1    uint8_t properties,
 311      =1    cc_supervision_status_t status,
 312      =1    uint8_t duration);
 313      =1  
 314      =1  
 315      =1  /**
 316      =1   * @brief Used by Framework and should not be used be application!
 317      =1   * Add supervision Get payload
 318      =1   * @param[in] pPayload pointer to supervision get payload
 319      =1   */
 320      =1  void CommandClassSupervisionGetAdd(ZW_SUPERVISION_GET_FRAME* pPayload);
 321      =1  
 322      =1  /**
 323      =1   * @brief Used by Framework and should not be used be application!
 324      =1   * Write supervision Get payload
 325      =1   * @param[in] pbuf Pointer to supervision get payload
 326      =1   */
 327      =1  void CommandClassSupervisionGetWrite(ZW_SUPERVISION_GET_FRAME* pbuf);
 328      =1  
 329      =1  /**
 330      =1   * @brief Used by Framework and should not be used be application!
 331      =1   * Sets the payload length in a Supervision Get command.
 332      =1   * @param[in] pbuf Pointer to supervision get payload
 333      =1   * @param[in] payLoadlen Payload length.
 334      =1   */
 335      =1  void CommandClassSupervisionGetSetPayloadLength(ZW_SUPERVISION_GET_FRAME* pbuf, uint8_t payLoadlen);
 336      =1  
 337      =1  /**
 338      =1   * Returns the length of the encapsulated command.
 339      =1   */
 340      =1  uint8_t CommandClassSupervisionGetGetPayloadLength(ZW_SUPERVISION_GET_FRAME* pbuf);
 341      =1  
 342      =1  #endif /*_COMMAND_CLASS_SUPERVISION_H_*/
 343      =1  
  66          #include <CommandClassMultiChan.h>
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 846 

   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Multi Channel.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _CMULTICHAN_H_
   8      =1  #define _CMULTICHAN_H_
   9      =1  
  10      =1  #include "config_app.h"
   1      =2  /**
   2      =2   * @file config_app.h
   3      =2   * @brief Configuration file for Power Strip sample application.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   * @details This file contains definitions for the Z-Wave+ Framework as well for the sample app.
   8      =2   *
   9      =2   * NOTICE: The file name must not be changed and the two definitions APP_VERSION and APP_REVISION
  10      =2   * must not be changed since they are used by the build environment.
  11      =2   */
  12      =2  #ifndef _CONFIG_APP_H_
  11      =1  #include <ZW_basis_api.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2013
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: Z-Wave common controller/slave application interface
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: jsi $
  14      =2   * Revision:         $Revision: 31343 $
  15      =2   * Last Changed:     $Date: 2015-04-17 10:57:14 +0200 (fr, 17 apr 2015) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  /**
  19      =2   * @file ZW_basis_api.h
  20      =2   * @brief Z-Wave common controller/slave application interface.
  21      =2   *
  22      =2   * Z Wave <=> Application general software interface.
  23      =2   */
  24      =2  #ifndef _ZW_BASIS_API_H_
1721      =2  
  12      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  13      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 847 

   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  14      =1  
  15      =1  
  16      =1  /****************************************************************************/
  17      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  18      =1  /****************************************************************************/
  19      =1  
  20      =1  /**
  21      =1   * Returns the version of this CC.
  22      =1   */
  23      =1  #define CmdClassMultiChannelVersionGet() MULTI_CHANNEL_VERSION_V4
  24      =1  #define CmdClassMultiChannelGet() CmdClassMultiChannelVersionGet()
  25      =1  
  26      =1  /****************************************************************************/
  27      =1  /*                              EXPORTED DATA                               */
  28      =1  /****************************************************************************/
  29      =1  
  30      =1  /**
  31      =1   * Given a frame and the associated receive options this function returns whether the command is
  32      =1   * supported or not.
  33      =1   * @param[in] pRxOpt Receive options.
  34      =1   * @param[in] pCmd Frame including command.
  35      =1   * @return TRUE if the command is supported, FALSE otherwise.
  36      =1   */
  37      =1  BOOL ZAF_CC_MultiChannel_IsCCSupported(
  38      =1    RECEIVE_OPTIONS_TYPE_EX * pRxOpt,
  39      =1    ZW_APPLICATION_TX_BUFFER * pCmd);
  40      =1  
  41      =1  /**
  42      =1   * Handler for multi channel commands.
  43      =1   * @param[in] rxOpt Frame header info
  44      =1   * @param[in] pCmd Payload from the received frame
  45      =1   * @param[in] cmdLength Number of command bytes including the command
  46      =1   */
  47      =1  received_frame_status_t MultiChanCommandHandler(
  48      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  49      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  50      =1    BYTE cmdLength);
  51      =1  
  52      =1  /**
  53      =1   * Encapsulates a frame with Multi Channel.
  54      =1   * @param[in,out] ppData Pointer to data.
  55      =1   * @param[in,out] dataLength Pointer to data length.
  56      =1   * @param[in] pTxOptionsEx Pointer to transmit options.
  57      =1   */
  58      =1  void CmdClassMultiChannelEncapsulate(
  59      =1    BYTE **ppData,
  60      =1    BYTE *dataLength,
  61      =1    TRANSMIT_OPTIONS_TYPE_SINGLE_EX *pTxOptionsEx);
  62      =1  
  63      =1  #endif /* _CVERSION_H_ */
  67          #include <CommandClassMultiChanAssociation.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Multi Channel Association.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 848 

   6      =1  
   7      =1  #ifndef _COMMANDCLASSMULTICHANASSOCIATION_H_
   8      =1  #define _COMMANDCLASSMULTICHANASSOCIATION_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  
  14      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  15      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 849 

  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  16      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  17      =1  
  18      =1  /****************************************************************************/
  19      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  20      =1  /****************************************************************************/
  21      =1  
  22      =1  /**
  23      =1   * Returns the version of this CC.
  24      =1   */
  25      =1  #define CmdClassMultiChannelAssociationVersion() MULTI_CHANNEL_ASSOCIATION_VERSION_V3
  26      =1  
  27      =1  /****************************************************************************/
  28      =1  /*                              EXPORTED DATA                               */
  29      =1  /****************************************************************************/
  30      =1  
  31      =1  // Nothing here.
  32      =1  
  33      =1  /****************************************************************************/
  34      =1  /*                           EXPORTED FUNCTIONS                             */
  35      =1  /****************************************************************************/
  36      =1  
  37      =1  /**
  38      =1   * @brief Handler for the Multi Channel Association Command Class.
  39      =1   * @param[in] rxOpt Receive options.
  40      =1   * @param[in] pCmd Payload from the received frame.
  41      =1   * @param[in] cmdLength Length of the given payload.
  42      =1   * @return receive frame status.
  43      =1   */
  44      =1  received_frame_status_t handleCommandClassMultiChannelAssociation(
  45      =1      RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  46      =1      ZW_APPLICATION_TX_BUFFER *pCmd,
  47      =1      BYTE cmdLength);
  48      =1  
  49      =1  #endif /* _COMMANDCLASSMULTICHANASSOCIATION_H_ */
  68          #include <CommandClassNotification.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Notification.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _COMMAND_CLASS_NOTIFICATION_H_
   8      =1  #define _COMMAND_CLASS_NOTIFICATION_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 850 

  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  15      =1  #include <CommandClass.h>
   1      =2  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 851 

   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  16      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
  17      =1  
  18      =1  /**
  19      =1   * Returns the version of this CC.
  20      =1   */
  21      =1  #define CommandClassNotificationVersionGet() 8
  22      =1  
  23      =1  /**
  24      =1   * Notification type (8 bit).
  25      =1   */
  26      =1  typedef enum
  27      =1  {
  28      =1    NOTIFICATION_TYPE_NONE,
  29      =1    NOTIFICATION_TYPE_SMOKE_ALARM = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_SMOKE_ALARM),
  30      =1    NOTIFICATION_TYPE_CO_ALARM = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_CO_ALARM),
  31      =1    NOTIFICATION_TYPE_CO2_ALARM = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_CO2_ALARM),
  32      =1    NOTIFICATION_TYPE_HEAT_ALARM = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_HEAT_ALARM),
  33      =1    NOTIFICATION_TYPE_WATER_ALARM = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_WATER_ALARM),
  34      =1    NOTIFICATION_TYPE_AcCESS_CONTROL = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_ACCESS_CONTROL),
  35      =1    NOTIFICATION_TYPE_HOME_SECURITY = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_HOME_SECURITY),
  36      =1    NOTIFICATION_TYPE_POWER_MANAGEMENT = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_POWER_MANAGEMENT),
  37      =1    NOTIFICATION_TYPE_SYSTEM = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_SYSTEM),
  38      =1    NOTIFICATION_TYPE_EMERGENCY_ALARM = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_EMERGENCY_ALARM),
  39      =1    NOTIFICATION_TYPE_CLOCK = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_CLOCK),
  40      =1    NOTIFICATION_TYPE_MULTIDEVICE = (0xFF & ICON_TYPE_SPECIFIC_SENSOR_NOTIFICATION_MULTIDEVICE)
  41      =1  } NOTIFICATION_TYPE;
  42      =1  
  43      =1  
  44      =1  /**
  45      =1   * Notification event (8 bit) for notification type NOTIFICATION_TYPE_HOME_SECURITY.
  46      =1   */
  47      =1  typedef enum
  48      =1  {
  49      =1    NOTIFICATION_EVENT_HOME_SECURITY_NO_EVENT,
  50      =1    NOTIFICATION_EVENT_HOME_SECURITY_INTRUSION,
  51      =1    NOTIFICATION_EVENT_HOME_SECURITY_INTRUSION_UNKNOWN_EV,
  52      =1    NOTIFICATION_EVENT_HOME_SECURITY_TAMPERING_COVERING_REMOVED,
  53      =1    NOTIFICATION_EVENT_HOME_SECURITY_TAMPERING_INVALID_CODE,
  54      =1    NOTIFICATION_EVENT_HOME_SECURITY_GLASS_BREAKAGE,
  55      =1    NOTIFICATION_EVENT_HOME_SECURITY_GLASS_BREAKAGE_UNKNOWN_LOCATION,
  56      =1    NOTIFICATION_EVENT_HOME_SECURITY_MOTION_DETECTION,
  57      =1    NOTIFICATION_EVENT_HOME_SECURITY_MOTION_DETECTION_UNKNOWN_LOCATION,
  58      =1    NOTIFICATION_EVENT_HOME_SECURITY_UNKNOWN_EVENT = 0xFE
  59      =1  }NOTIFICATION_EVENT_HOME_SECURITY;
  60      =1  
  61      =1  /**
  62      =1   * Notification event (8 bit) for notification type NOTIFICATION_TYPE_POWER_MANAGEMENT.
  63      =1   */
  64      =1  typedef enum
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 852 

  65      =1  {
  66      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_NO_EVENT,
  67      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_POWER_HAS_BEEN_APPLIED,
  68      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_AC_MAINS_DISCONNECED,
  69      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_AC_MAINS_RECONNECED,
  70      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_SURGE_DETECTED,
  71      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_VOLTAGE_DROP_DRIFT,
  72      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_OVERCURRENT_DETECTED,
  73      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_OVERVOLTAGE_DETECTION,
  74      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_OVERLOADED_DETECTED,
  75      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_LOAD_ERROR,
  76      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_REPLACE_BATTERY_SOON,
  77      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_REPLACE_BATTERY_NOW,
  78      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_BATTERY_IS_CHARGING,
  79      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_BATTERY_IS_FULLY_CHARGED,
  80      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_CHARGE_BATTERY_SOON,
  81      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_CHARGE_BATTERY_NOW,
  82      =1    NOTIFICATION_EVENT_POWER_MANAGEMENT_UNKNOWN_EVENT = 0xFE
  83      =1  }NOTIFICATION_EVENT_POWER_MANAGEMENT;
  84      =1  
  85      =1  
  86      =1  /**
  87      =1   * Notification event (8 bit) for notification type NOTIFICATION_TYPE_SMOKE_ALARM.
  88      =1   */
  89      =1  typedef enum
  90      =1  {
  91      =1    NOTIFICATION_EVENT_EMERGENCY_ALARM_NO_EVENT,
  92      =1    NOTIFICATION_EVENT_EMERGENCY_ALARM_CONTACT_POLICE,
  93      =1    NOTIFICATION_EVENT_EMERGENCY_ALARM_CONTACT_FIRE_SERVICE,
  94      =1    NOTIFICATION_EVENT_EMERGENCY_ALARM_CONTACT_MEDICAL_SERVICE,
  95      =1    NOTIFICATION_EVENT_EMERGENCY_UNKNOWN_EVENT = 0xFE
  96      =1  }NOTIFICATION_EVENT_EMERGENCY_ALARM;
  97      =1  
  98      =1  
  99      =1  /**
 100      =1   * Notification event (8 bit) for notification type NOTIFICATION_TYPE_SYSTEM.
 101      =1   */
 102      =1  typedef enum
 103      =1  {
 104      =1    NOTIFICATION_EVENT_SYSTEM_NO_EVENT,
 105      =1    NOTIFICATION_EVENT_SYSTEM_HARDWARE_FAILURE,
 106      =1    NOTIFICATION_EVENT_SYSTEM_SOFTWARE_FAILURE,
 107      =1    NOTIFICATION_EVENT_SYSTEM_HARDWARE_FAILURE_WITH_MANUFACTURER_PROPRIETARY_FAILURE_CODE,
 108      =1    NOTIFICATION_EVENT_SYSTEM_SOFTWARE_FAILURE_WITH_MANUFACTURER_PROPRIETARY_FAILURE_CODE,
 109      =1    NOTIFICATION_EVENT_SYSTEM_UNKNOWN_EVENT = 0xFE
 110      =1  }NOTIFICATION_EVENT_SYSTEM;
 111      =1  
 112      =1  
 113      =1  
 114      =1  /**
 115      =1   * Notification event (8 bit) for notification type NOTIFICATION_TYPE_SMOKE_ALARM.
 116      =1   */
 117      =1  typedef enum
 118      =1  {
 119      =1    NOTIFICATION_EVENT_SMOKE_ALARM_NO_EVENT,
 120      =1    NOTIFICATION_EVENT_SMOKE_ALARM_SMOKE_DETECTED,
 121      =1    NOTIFICATION_EVENT_SMOKE_ALARM_SMODE_DETECTED_UNKNOWN_LOCATION,
 122      =1    NOTIFICATION_EVENT_SMOKE_ALARM_TEST,
 123      =1    NOTIFICATION_EVENT_SMOKE_ALARM_REPLACEMENT_REQUIRED,
 124      =1    NOTIFICATION_EVENT_SMOKE_ALARM_UNKNOWN_EVENT = 0xFE
 125      =1  }NOTIFICATION_EVENT_SMOKE_ALARM;
 126      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 853 

 127      =1  /**
 128      =1   * Notification status unsolicited set
 129      =1   */
 130      =1  typedef enum
 131      =1  {
 132      =1    NOTIFICATION_STATUS_SET_UNSOLICIT_DEACTIVATED = 0x00,
 133      =1    NOTIFICATION_STATUS_SET_UNSOLICIT_ACTIVED = 0xFF
 134      =1  }
 135      =1  notification_status_set_t;
 136      =1  
 137      =1  typedef notification_status_set_t NOTIFICATION_STATUS_SET;
 138      =1  
 139      =1  /**
 140      =1   * Notification status Get
 141      =1   */
 142      =1  typedef enum
 143      =1  {
 144      =1    NOTIFICATION_STATUS_UNSOLICIT_DEACTIVATED = 0x00,
 145      =1    NOTIFICATION_STATUS_NO_PENDING_NOTIFICATION = 0xFE,
 146      =1    NOTIFICATION_STATUS_UNSOLICIT_ACTIVED = 0xFF
 147      =1  } NOTIFICATION_STATUS;
 148      =1  
 149      =1  /**
 150      =1   * @brief Application specific Notification Set cmd handler.
 151      =1   * @param[in] notificationType notification type
 152      =1   * @param[in] notificationStatus notification status of type NOTIFICATION_STATUS_SET
 153      =1   * @param[in] endpoint is the destination endpoint
 154      =1   */
 155      =1  extern BOOL handleAppNotificationSet(
 156      =1      NOTIFICATION_TYPE notificationType,
 157      =1      NOTIFICATION_STATUS_SET notificationStatus,
 158      =1      uint8_t endpoint);
 159      =1  
 160      =1  /**
 161      =1   * @brief CmdClassNotificationGetNotification
 162      =1   *  User application function. The Notification Status identifier can be set to the
 163      =1   *  following values:
 164      =1   *  Notification Status | Description
 165      =1   *  --------------------|-------------------------------------------------------------
 166      =1   *  0x00                | Unsolicited notification is deactivated. The group mapped to Notification Comman
             -d Class in Association Command Class is not configured with any node IDs.
 167      =1   *  0xFF                | Unsolicited notification is activated or a pending notification is present.
 168      =1   * @param notificationType 8 bit type. If 0xFF, return first detected Notification on supported list.
 169      =1   * @param[in] endpoint is the destination endpoint
 170      =1   * @return 8 bit notification status.
 171      =1   */
 172      =1  extern NOTIFICATION_STATUS CmdClassNotificationGetNotificationStatus(
 173      =1      uint8_t notificationType,
 174      =1      uint8_t endpoint);
 175      =1  
 176      =1  /**
 177      =1   * @brief CmdClassNotificationGetNotificationEvent
 178      =1   * User application function. Read event.
 179      =1   * Event Parameter 1  Event Parameter N (N * Bytes).
 180      =1   * If the Event Parameters Length field is not equal to 0, these field(s)
 181      =1   * contains the encapsulated information available to the Notification Type
 182      =1   * and Event.
 183      =1   * @param[out] pNotificationType pointer to 8 bit type. If 0xFF, return first
 184      =1   *             detected Notification on supported list.
 185      =1   * @param[out] pNotificationEvent pointer to 8 bit event.
 186      =1   * @param[out] pEventPar pointer to Event Parameter 1  Event Parameter N .
 187      =1   * @param[out] pEvNbrs pointer to number of parameters N.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 854 

 188      =1   * @param[in] endpoint is the destination endpoint
 189      =1   * @return if event is legal.
 190      =1   */
 191      =1  extern BOOL CmdClassNotificationGetNotificationEvent(
 192      =1      uint8_t * pNotificationType,
 193      =1      uint8_t * pNotificationEvent,
 194      =1      uint8_t * pEventPar,
 195      =1      uint8_t * pEvNbrs,
 196      =1      uint8_t endpoint);
 197      =1  
 198      =1  
 199      =1  /**
 200      =1   * @brief CmdClassNotificationGetType
 201      =1   * User application function. See SDS11060.doc table "4.73.3.1  Table of defined
 202      =1   * Notification Types & Events".
 203      =1   * @param[in] endpoint is the destination endpoint
 204      =1   * @return 8 bit type.
 205      =1   */
 206      =1  extern uint8_t CmdClassNotificationGetType(uint8_t endpoint);
 207      =1  
 208      =1  
 209      =1  /**
 210      =1   * @brief CmdClassNotificationGetEvent
 211      =1   * User application function. See SDS11060.doc table "4.73.3.1  Table of defined
 212      =1   * Notification Types & Events".
 213      =1   * @param[in] endpoint is the destination endpoint
 214      =1   * @return 8 bit event.
 215      =1   */
 216      =1  extern uint8_t CmdClassNotificationGetEvent(uint8_t endpoint);
 217      =1  
 218      =1  
 219      =1  /**
 220      =1   * @brief handleCmdClassNotificationSupportedReport
 221      =1   * The Notification Supported Report Command is used to report the supported
 222      =1   * Notification Types in the application. The Notification Supported Report Command
 223      =1   * is transmitted as a result of a received Notification Supported Get Command and
 224      =1   * MUST not be sent unsolicited.
 225      =1   * @param[out] pNbrBitMask Indicates the Number of Bit Masks fields (1-31) used
 226      =1   *             in bytes.
 227      =1   * @param[out] pBitMaskArray The Bit Mask fields describe the supported Notification
 228      =1   *             Type(s) by the device
 229      =1   * @param[in] endpoint is the destination endpoint
 230      =1   */
 231      =1  extern void handleCmdClassNotificationSupportedReport(
 232      =1    uint8_t * pNbrBitMask,
 233      =1    uint8_t * pBitMaskArray,
 234      =1    uint8_t endpoint);
 235      =1  
 236      =1  
 237      =1  /**
 238      =1   * @brief handleAppNotificationEventSupportedReport
 239      =1   * The Event Supported Report Command is transmitted as a result of a received
 240      =1   * Event Supported Get Command and MUST not be sent unsolicited.  If an Event
 241      =1   * Supported Get is received with a not supported Notification Type or Notification
 242      =1   * @param[in] notificationType notification Type.
 243      =1   * @param[out] pNbrBitMask Indicates the Number of Bit Masks fields (1-31) used in bytes.
 244      =1   * @param[out] pBitMaskArray The Bit Mask fields describe the supported Events within the requested Notifi
             -cation Type.
 245      =1   *             Example if Notification Type = Heat Alarm (0x04):
 246      =1   * @param[in] endpoint is the destination endpoint
 247      =1   */
 248      =1  extern void handleCmdClassNotificationEventSupportedReport(
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 855 

 249      =1      uint8_t notificationType,
 250      =1      uint8_t * pNbrBitMask,
 251      =1      uint8_t * pBitMaskArray,
 252      =1      uint8_t endpoint);
 253      =1  
 254      =1  
 255      =1  /**
 256      =1   * @brief Handler for command class Notification
 257      =1   * @param[in] rxOpt IN receive options of type RECEIVE_OPTIONS_TYPE_EX
 258      =1   * @param[in] pCmd IN  Payload from the received frame
 259      =1   * @param[in] cmdLength IN Number of command bytes including the command
 260      =1   * @return receive frame status.
 261      =1   */
 262      =1  received_frame_status_t handleCommandClassNotification(
 263      =1    RECEIVE_OPTIONS_TYPE_EX * rxOpt,
 264      =1    ZW_APPLICATION_TX_BUFFER * pCmd,
 265      =1    uint8_t cmdLength);
 266      =1  
 267      =1  /**
 268      =1   * @brief Sends notification report. See SDS11060.doc Table of defined Notification Types &
 269      =1   * Events.
 270      =1   * @param[in] pProfile pointer to AGI profile
 271      =1   * @param[in] sourceEndpoint source endpoint
 272      =1   * @param[in] notificationType Notification Type (8 bit)
 273      =1   * @param[in] notificationEvent Event (8 bit)
 274      =1   * @param[in] pCallback callback function returning state on job
 275      =1   * @return JOB_STATUS
 276      =1   */
 277      =1  JOB_STATUS CmdClassNotificationReport(
 278      =1    AGI_PROFILE * pProfile,
 279      =1    uint8_t sourceEndpoint,
 280      =1    uint8_t notificationType,
 281      =1    uint8_t notificationEvent,
 282      =1    VOID_CALLBACKFUNC(pCallback)(TRANSMISSION_RESULT * pTransmissionResult));
 283      =1  
 284      =1  /**
 285      =1   * @brief GetGroupNotificationType
 286      =1   * Read last active notification type
 287      =1   * @param[in,out] pNotificationType
 288      =1   * @param[in] endpoint is the destination endpoint
 289      =1   * @return Success: group number, else: 0xFF
 290      =1   */
 291      =1  extern uint8_t GetGroupNotificationType(uint8_t * pNotificationType, uint8_t endpoint);
 292      =1  
 293      =1  /**
 294      =1   * Validates or finds a combination of notification type and endpoint.
 295      =1   *
 296      =1   * If the endpoint is zero meaning root device and a notification has been added for an endpoint,
 297      =1   * the function will find this endpoint and modify the variable pointed to.
 298      =1   * @param[in] notificationType Type of notification.
 299      =1   * @param[in,out] pEndpoint Multichannel endpoint destination.
 300      =1   * @return TRUE if endpoint was found, FALSE otherwise.
 301      =1   */
 302      =1  extern BOOL FindNotificationEndpoint(NOTIFICATION_TYPE notificationType, uint8_t * pEndpoint);
 303      =1  
 304      =1  #endif /*_COMMAND_CLASS_NOTIFICATION_H_*/
  69          #include <zaf_version.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Contains version definitions for the Z-Wave Application Framework.
   4      =1   * @copyright 2019 Silicon Laboratories Inc.
   5      =1   */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 856 

   6      =1  #define ZAF_VERSION_MAJOR 4
   7      =1  #define ZAF_VERSION_MINOR 5
   8      =1  #define ZAF_VERSION_PATCH 0
  70          #include <gpio_driver.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Offers functions for controlling GPIO.
   4      =1   *
   5      =1   * This driver includes pin swap because certain Z-Wave development
   6      =1   * boards have pins which are swapped. This driver takes the pin swap into
   7      =1   * account.
   8      =1   *
   9      =1   * The GPIO driver is dependent on function gpio_GetPinSwapList() which must be
  10      =1   * placed in the application folder and implement an array of PIN_T type and
  11      =1   * the function gpio_GetPinSwapList externally declared in the header file for
  12      =1   * the GPIO driver. Function gpio_GetPinSwapList()is not called if function
  13      =1   * gpio_driver_init() is initiated with automaticPinSwap = FALSE!
  14      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
  15      =1   */
  16      =1  
  17      =1  #ifndef _GPIO_DRIVER_H_
  18      =1  #define _GPIO_DRIVER_H_
  19      =1  
  20      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  21      =1  
  22      =1  typedef struct
  23      =1  {
  24      =1    BYTE pin;
  25      =1    BYTE pinSwap;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 857 

  26      =1  } PIN_T;
  27      =1  
  28      =1  typedef PIN_T PIN_T_ARRAY[];
  29      =1  
  30      =1  /**
  31      =1   * @brief Gets the pin list and its size from the application.
  32      =1   * @param[out] pPinList Pointer to an array containing the swapped pins.
  33      =1   * @param[out] pPinListSize Pointer to the size of the pin list.
  34      =1   */
  35      =1  extern void
  36      =1  gpio_GetPinSwapList(PIN_T_ARRAY xdata ** pPinList, BYTE * const pPinListSize);
  37      =1  
  38      =1  /**
  39      =1   * @brief Initializes the GPIO driver by reading out pin swap value from NVM.
  40      =1   * @param[in] automaticPinSwap Sets whether the GPIO driver should swap pins
  41      =1   * automatically or not.
  42      =1   * @return TRUE if initialized successfully, FALSE otherwise.
  43      =1   */
  44      =1  BOOL
  45      =1  gpio_DriverInit(BOOL automaticPinSwap);
  46      =1  
  47      =1  /**
  48      =1   * @brief Sets a pin as input.
  49      =1   * @param[in] pin A given pin.
  50      =1   * @param[in] fPullUp set pin to intern pull high or low
  51      =1   */
  52      =1  void gpio_SetPinIn(BYTE pin, BOOL fPullUp);
  53      =1  
  54      =1  /**
  55      =1   * @brief Sets a given pin as output.
  56      =1   * @param[in] pin A given pin.
  57      =1   */
  58      =1  void gpio_SetPinOut(BYTE pin);
  59      =1  
  60      =1  /**
  61      =1   * @brief Sets a given pin to a given state.
  62      =1   * @param[in] pin A given pin.
  63      =1   * @param[in] fValue TRUE for high, FALSE for low.
  64      =1   */
  65      =1  void gpio_SetPin(BYTE pin, BOOL fValue);
  66      =1  
  67      =1  /**
  68      =1   * @brief Returns the state of a given pin.
  69      =1   * @param[in] pin A given pin.
  70      =1   * @return TRUE if high, FALSE if low.
  71      =1   */
  72      =1  BOOL gpio_GetPin(BYTE pin);
  73      =1  
  74      =1  /**
  75      =1   * @brief Returns the state of a given pin as boolean.
  76      =1   * @param pin A given pin.
  77      =1   * @param pfState Pointer to result variable.
  78      =1   * @return TRUE if pin port exists, FALSE otherwise.
  79      =1   */
  80      =1  BOOL gpio_GetPinBool(BYTE pin, BYTE * pfState);
  81      =1  
  82      =1  #endif /* _GPIO_DRIVER_H_ */
  83      =1  
  71          
  72          #include <endpoint_lookup.h>
   1      =1  /**
   2      =1   * @file
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 858 

   3      =1   * A utility to find the endpoint ID / index.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef _ENDPOINT_LOOKUP_H_
   8      =1  #define _ENDPOINT_LOOKUP_H_
   9      =1  
  10      =1  /****************************************************************************/
  11      =1  /*                              INCLUDE FILES                               */
  12      =1  /****************************************************************************/
  13      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  14      =1  #include <ZW_sysdefs.h>
   1      =2  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 859 

  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Z-Wave system defines
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: tro $
  29      =2   * Revision:         $Revision: 23873 $
  30      =2   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SYSDEFS_H_
  15      =1  #include <ZW_evaldefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: IO definitions for the Z-Wave Evaluation board
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: tro $
  14      =2   * Revision:         $Revision: 25909 $
  15      =2   * Last Changed:     $Date: 2013-05-29 14:49:43 +0200 (on, 29 maj 2013) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_EVALDEFS_H_
  16      =1  #define ENDPOINT_NOT_VALID   0xFF
  17      =1  
  18      =1  /**
  19      =1   * Structure Endpoint look-up
  20      =1   */
  21      =1  
  22      =1  typedef struct _ENDPOINT_LOOKUP_
  23      =1  {
  24      =1    BYTE bEndPointsCount;
  25      =1    BYTE * pEndPointList;
  26      =1  }ENDPOINT_LOOKUP;
  27      =1  
  28      =1  
  29      =1  /**
  30      =1   * @brief FindEndPointID
  31      =1   * Get the supported primary switch type used by the HW.
  32      =1   * @param pEPLookup pointer to the endpoint lookup data structure
  33      =1   * @param endpointIndex the index of the endpoint in the endpoints IDs list
  34      =1   * @return endpoint ID
  35      =1   */
  36      =1  BYTE FindEndPointID(ENDPOINT_LOOKUP *pEPLookup, BYTE endpointIndex);
  37      =1  
  38      =1  /**
  39      =1   * @brief GetEndPointCount
  40      =1   * Get the number of endpoints ID in the endpoints IDs list.
  41      =1   * @param pEPLookup pointer to the endpoint lookup data structure
  42      =1   * @return endpoints count
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 860 

  43      =1   */
  44      =1  BYTE GetEndPointCount(ENDPOINT_LOOKUP *pEPLookup);
  45      =1  
  46      =1  /**
  47      =1   * @brief FindEndPointIndex
  48      =1   * Find the endpoint index in the endpoints IDs list.
  49      =1    * @param pEPLookup pointer to the endpoint lookup data structure
  50      =1   * @param endpoint the endpoint ID
  51      =1   * @return endpoints count
  52      =1   */
  53      =1  BYTE FindEndPointIndex(ENDPOINT_LOOKUP *pEPLookup, BYTE endpoint);
  54      =1  
  55      =1  #endif /* _ENDPOINT_LOOKUP_H_ */
  56      =1  
  73          #include <conhandle.h>
   1      =1  /****************************************************************************
   2      =1   *
   3      =1   * Copyright (c) 2001-2013
   4      =1   * Sigma Designs, Inc.
   5      =1   * All Rights Reserved
   6      =1   *
   7      =1   *---------------------------------------------------------------------------
   8      =1   *
   9      =1   * Description:     Header file for conhandle module
  10      =1   *
  11      =1   * Last Changed By:  $Author: jsi $
  12      =1   * Revision:         $Revision: 30505 $
  13      =1   * Last Changed:     $Date: 2014-12-23 13:26:32 +0100 (ti, 23 dec 2014) $
  14      =1   *
  15      =1   ****************************************************************************/
  16      =1  #ifndef _CONHANDLE_H_
  17      =1  #define _CONHANDLE_H_
  18      =1  
  19      =1  /****************************************************************************/
  20      =1  /*                              INCLUDE FILES                               */
  21      =1  /****************************************************************************/
  22      =1  
  23      =1  
  24      =1  /****************************************************************************/
  25      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  26      =1  /****************************************************************************/
  27      =1  /* return values for ConUpdate */
  28      =1  enum T_CON_TYPE
  29      =1  {
  30      =1    conIdle,            // returned if nothing special has happened
  31      =1    conFrameReceived,   // returned when a valid frame has been received
  32      =1    conFrameSent,       // returned if frame was ACKed by the other end
  33      =1    conFrameErr,        // returned if frame has error in Checksum
  34      =1    conRxTimeout,       // returned if Rx timeout has happened
  35      =1    conTxTimeout        // returned if Tx timeout (waiting for ACK) ahs happened
  36      =1  };
  37      =1  
  38      =1  /* defines for accessing serial protocol data */
  39      =1  #define serFrameLen (*serBuf)
  40      =1  #define serFrameType (*(serBuf + 1))
  41      =1  #define serFrameCmd (*(serBuf + 2))
  42      =1  #define serFrameDataPtr (serBuf + 3)
  43      =1  
  44      =1  /****************************************************************************/
  45      =1  /*                              EXPORTED DATA                               */
  46      =1  /****************************************************************************/
  47      =1  /* Serial buffer size */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 861 

  48      =1  #define SERBUF_MAX  180
  49      =1  #define FRAME_LENGTH_MIN  3
  50      =1  #define FRAME_LENGTH_MAX  SERBUF_MAX
  51      =1  
  52      =1  /* Serial timeout definitions - These can be changed to fit the requirements present */
  53      =1  /* Either timeout definition should never be set lower than 2 (20ms) */
  54      =1  
  55      =1  /* ACK Timeout is 1500 ms to allow HOST system to react - module transmits and waits */
  56      =1  /* max 1500ms before either starting a retransmit or simply drops the frame */
  57      =1  #define RX_ACK_TIMEOUT_DEFAULT  150
  58      =1  /* Receive byte inframe timeout is 150 ms to allow for byte not being fetched */
  59      =1  /* "instantaneously" from receive buffer after physically being buffered by the */
  60      =1  /* interrupt routine - this also includes HOST system byte transmit delays */
  61      =1  #define RX_BYTE_TIMEOUT_DEFAULT 15
  62      =1  
  63      =1  
  64      =1  extern BYTE timeOutRX_ACK;
  65      =1  extern BYTE timeOutRX_BYTE;
  66      =1  extern BYTE serBuf[SERBUF_MAX];
  67      =1  extern BYTE serBufLen;
  68      =1  
  69      =1  /****************************************************************************/
  70      =1  /*                           EXPORTED FUNCTIONS                             */
  71      =1  /****************************************************************************/
  72      =1  
  73      =1  /*==============================   ConTxActive   =============================
  74      =1  **
  75      =1  **    Checks if TxQueue is actively transmitting
  76      =1  **
  77      =1  **--------------------------------------------------------------------------*/
  78      =1  BYTE
  79      =1  ConTxActive(void);
  80      =1  
  81      =1  /*===============================   ConTxFrame   =============================
  82      =1  **
  83      =1  **   Transmit frame via serial port by adding SOF, Len, Type, cmd and Chksum.
  84      =1  **   Frame  : SOF-Len-Type-Cmd-DATA-Chksum
  85      =1  **    where SOF is Start of frame byte
  86      =1  **          Len is length of bytes between and including Len to last DATA byte
  87      =1  **          Type is Response or Request
  88      =1  **          Cmd Serial application command describing what DATA is
  89      =1  **          DATA as it says
  90      =1  **          Chksum is a XOR checksum taken on all BYTEs from Len to last DATA byte
  91      =1  **
  92      =1  **          NOTE: If Buf is NULL then the previously used cmd, type, Buf and len
  93      =1  **          is used again (Retransmission)
  94      =1  **
  95      =1  **--------------------------------------------------------------------------*/
  96      =1  extern void   /*RET Nothing */
  97      =1  ConTxFrame(
  98      =1    BYTE cmd,   /* IN Command */
  99      =1    BYTE type,  /* IN frame Type to send (Response or Request) */
 100      =1    XBYTE *Buf, /* IN pointer to BYTE buffer containing DATA to send */
 101      =1    BYTE len    /* IN the length of DATA to transmit */
 102      =1  );
 103      =1  
 104      =1  /*==============================   ConUpdate   =============================
 105      =1  **
 106      =1  **   Parses serial data sent from external controller module (PC-controller).
 107      =1  **   Should be frequently called by main loop.
 108      =1  **
 109      =1  **   Return: conIdle          if nothing has happened
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 862 

 110      =1  **           conFrameReceived if valid frame was received
 111      =1  **           conFrameSent     if transmitted frame was ACKed by other end
 112      =1  **           conFrameErr      if received frame has error in Checksum
 113      =1  **           conRxTimeout     if a Rx timeout happened
 114      =1  **           conTxTimeout     if a Tx timeout waiting for ACK happened
 115      =1  **
 116      =1  **--------------------------------------------------------------------------*/
 117      =1  extern enum T_CON_TYPE  /*RET conState (See above) */
 118      =1  ConUpdate(
 119      =1    BYTE acknowledge      /* IN Nothing */
 120      =1  );
 121      =1  
 122      =1  /*==============================   ConInit   =============================
 123      =1  **
 124      =1  **   Initialize the module.
 125      =1  **
 126      =1  **--------------------------------------------------------------------------*/
 127      =1  void                    /*RET  Nothing */
 128      =1  ConInit(
 129      =1    WORD bBaudRate        /* IN  Baud rate / 100 (e.g. 96=>9600baud/s, 1152=>115200baud/s) */
 130      =1  );
 131      =1  
 132      =1  #endif /* _CONHANDLE_H_ */
  74          #include <ZW_conbufio.h>
   1      =1  /****************************************************************************
   2      =1   *
   3      =1   * Copyright (c) 2001-2013
   4      =1   * Sigma Designs, Inc.
   5      =1   * All Rights Reserved
   6      =1   *
   7      =1   *---------------------------------------------------------------------------
   8      =1   *
   9      =1   * Description:       Buffered transmit/receive of data through the UART
  10      =1   *
  11      =1   * Last Changed By:  $Author: jsi $
  12      =1   * Revision:         $Revision: 7079 $
  13      =1   * Last Changed:     $Date: 2005-11-14 16:57:30 +0200 (ÐÐ½, 14 ÐÐ¸Ñ 2005) $
  14      =1   *
  15      =1   ****************************************************************************/
  16      =1  #ifndef _CONBUFIO_H_
  17      =1  #define _CONBUFIO_H_
  18      =1  
  19      =1  /****************************************************************************/
  20      =1  /*                              INCLUDE FILES                               */
  21      =1  /****************************************************************************/
  22      =1  
  23      =1  /****************************************************************************/
  24      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  25      =1  /****************************************************************************/
  26      =1  
  27      =1  /****************************************************************************/
  28      =1  /*                              EXPORTED DATA                               */
  29      =1  /****************************************************************************/
  30      =1  
  31      =1  /****************************************************************************/
  32      =1  /*                           EXPORTED FUNCTIONS                             */
  33      =1  /****************************************************************************/
  34      =1  
  35      =1  #ifdef USBVCP
  44      =1  #define ZW_GetTxBufferFreeSize ZW_GetTxBufferFreeSize_uart
  45      =1  #define ZW_SerialTxActive ZW_SerialTxActive_uart
  46      =1  #define ZW_SerialCheck ZW_SerialCheck_uart
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 863 

  47      =1  #define ZW_SerialGetByte ZW_SerialGetByte_uart
  48      =1  #define ZW_SerialPutByte ZW_SerialPutByte_uart
  49      =1  #define ZW_SerialFlush ZW_SerialFlush_uart
  50      =1  #define ZW_InitSerialIf ZW_InitSerialIf_uart
  51      =1  #define ZW_FinishSerialIf ZW_FinishConfiguration_uart
  52      =1  #endif
  53      =1  
  54      =1  BYTE ZW_SerialCheck(void);
  55      =1  BYTE ZW_SerialGetByte(void);
  56      =1  BYTE ZW_SerialPutByte(BYTE ch);
  57      =1  void ZW_SerialFlush(void);
  58      =1  void ZW_InitSerialIf(
  59      =1    WORD bBaudRate   /* IN  Baud rate / 100 (e.g. 96=>9600baud/s, 1152=>115200baud/s) */
  60      =1  );
  61      =1  BOOL ZW_FinishSerialIf(void);
  62      =1  #ifndef USBVCP
  63      =1  BYTE ZW_SerialTxActive_uart(void);
  64      =1  BYTE ZW_GetTxBufferFreeSize_uart(void);
  65      =1  #endif
  66      =1  #endif /* _CONBUFIO_H_ */
  75          #include <ZW_basis_api.h>
   1      =1  /****************************************************************************
   2      =1   *
   3      =1   * Copyright (c) 2001-2013
   4      =1   * Sigma Designs, Inc.
   5      =1   * All Rights Reserved
   6      =1   *
   7      =1   *---------------------------------------------------------------------------
   8      =1   *
   9      =1   * Description: Z-Wave common controller/slave application interface
  10      =1   *
  11      =1   * Author:   Ivar Jeppesen
  12      =1   *
  13      =1   * Last Changed By:  $Author: jsi $
  14      =1   * Revision:         $Revision: 31343 $
  15      =1   * Last Changed:     $Date: 2015-04-17 10:57:14 +0200 (fr, 17 apr 2015) $
  16      =1   *
  17      =1   ****************************************************************************/
  18      =1  /**
  19      =1   * @file ZW_basis_api.h
  20      =1   * @brief Z-Wave common controller/slave application interface.
  21      =1   *
  22      =1   * Z Wave <=> Application general software interface.
  23      =1   */
  24      =1  #ifndef _ZW_BASIS_API_H_
1721      =1  
  76          #include <ZW_uart_api.h>
   1      =1  /***************************************************************************
   2      =1  *
   3      =1  * Copyright (c) 2001-2012
   4      =1  * Sigma Designs, Inc.
   5      =1  * All Rights Reserved
   6      =1  *
   7      =1  *---------------------------------------------------------------------------
   8      =1  *
   9      =1  * Description: Interface driver for the 500 Series Z-Wave Single Chip
  10      =1  *              built-in UART's
  11      =1  *
  12      =1  * Author:      Morten Vested Olesen and Jess Christensen
  13      =1  *
  14      =1  * Last Changed By:  $Author: jsi $
  15      =1  * Revision:         $Revision: 30544 $
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 864 

  16      =1  * Last Changed:     $Date: 2015-01-09 14:18:09 +0100 (fr, 09 jan 2015) $
  17      =1  *
  18      =1  ****************************************************************************/
  19      =1  #ifndef _ZW_UART_API_H_
  77          #include <ZW_SerialAPI.h>
   1      =1  /*****************************  ZW_SERIALAPI.H  *****************************
   2      =1   *
   3      =1   *          Z-Wave, the wireless language.
   4      =1   *
   5      =1   *              Copyright (c) 2001-2012
   6      =1   *              Sigma Designs
   7      =1   *
   8      =1   *              All Rights Reserved
   9      =1   *
  10      =1   *    This source file is subject to the terms and conditions of the
  11      =1   *    Sigma Design Software License Agreement which restricts the manner
  12      =1   *    in which it may be used.
  13      =1   *
  14      =1   *---------------------------------------------------------------------------
  15      =1   *
  16      =1   * Description:       Serial API
  17      =1   *
  18      =1   * Last Changed By:  $Author: jsi $
  19      =1   * Revision:         $Revision: 31344 $
  20      =1   * Last Changed:     $Date: 2015-04-17 13:53:23 +0200 (fr, 17 apr 2015) $
  21      =1   *
  22      =1   ****************************************************************************/
  23      =1  #ifndef _ZW_SERIALAPI_H_
  24      =1  #define _ZW_SERIALAPI_H_
  25      =1  
  26      =1  /****************************************************************************/
  27      =1  /*                              INCLUDE FILES                               */
  28      =1  /****************************************************************************/
  29      =1  
  30      =1  
  31      =1  /****************************************************************************/
  32      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  33      =1  /****************************************************************************/
  34      =1  
  35      =1  #define SOF 0x01  /* Start Of Frame */
  36      =1  #define ACK 0x06  /* Acknowledge successfull frame reception */
  37      =1  #define NAK 0x15  /* Not Acknowledge successfull frame reception - please retransmit... */
  38      =1  #define CAN 0x18  /* Frame received (from host) was dropped - waiting for ACK */
  39      =1  
  40      =1  /* Frame types */
  41      =1  #define REQUEST                                         0x00
  42      =1  #define RESPONSE                                        0x01
  43      =1  
  44      =1  /* Flags used in FUNC_ID_SERIAL_API_GET_INIT_DATA functionality */
  45      =1  #define GET_INIT_DATA_FLAG_SLAVE_API                    0x01
  46      =1  #define GET_INIT_DATA_FLAG_TIMER_SUPPORT                0x02
  47      =1  #define GET_INIT_DATA_FLAG_CONTROLLER_STATUS            0x04 /* Obsolete. USE next */
  48      =1  #define GET_INIT_DATA_FLAG_SECONDARY_CTRL               0x04
  49      =1  #define GET_INIT_DATA_FLAG_IS_SUC                       0x08
  50      =1  
  51      =1  /* Firmware update functionality specifics */
  52      =1  /* Enum definitions for Firmware Update functionality selector; firmwareUpdateFunction */
  53      =1  typedef enum
  54      =1  {
  55      =1    FIRMWARE_UPDATE_NVM_INIT = 0,
  56      =1    FIRMWARE_UPDATE_NVM_SET_NEW_IMAGE = 1,
  57      =1    FIRMWARE_UPDATE_NVM_GET_NEW_IMAGE = 2,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 865 

  58      =1    FIRMWARE_UPDATE_NVM_UPDATE_CRC16 = 3,
  59      =1    FIRMWARE_UPDATE_NVM_IS_VALID_CRC16 = 4,
  60      =1    FIRMWARE_UPDATE_NVM_WRITE = 5,
  61      =1    FIRMWARE_UPDATE_NVM_UNKNOWN = 0xFF
  62      =1  } FIRMWARE_UPDATE_NVM_T;
  63      =1  
  64      =1  /* Function IDs */
  65      =1  #define FUNC_ID_SERIAL_API_GET_INIT_DATA                0x02
  66      =1  #define FUNC_ID_SERIAL_API_APPL_NODE_INFORMATION        0x03
  67      =1  #define FUNC_ID_APPLICATION_COMMAND_HANDLER             0x04
  68      =1  #define FUNC_ID_ZW_GET_CONTROLLER_CAPABILITIES          0x05
  69      =1  
  70      =1  /* SERIAL API ver 4 added - START */
  71      =1  #define FUNC_ID_SERIAL_API_SET_TIMEOUTS                 0x06
  72      =1  #define FUNC_ID_SERIAL_API_GET_CAPABILITIES             0x07
  73      =1  #define FUNC_ID_SERIAL_API_SOFT_RESET                   0x08
  74      =1  /* SERIAL API ver 4 added - END */
  75      =1  
  76      =1  #define FUNC_ID_ZW_GET_PROTOCOL_VERSION                 0x09
  77      =1  
  78      =1  /* Function ID for startup message */
  79      =1  #define FUNC_ID_SERIAL_API_STARTED                      0x0A
  80      =1  #define FUNC_ID_SERIAL_API_SETUP                        0x0B
  81      =1  
  82      =1  #define FUNC_ID_SERIAL_API_APPL_NODE_INFORMATION_CMD_CLASSES  0x0C
  83      =1  
  84      =1  #define FUNC_ID_ZW_SEND_DATA_EX                         0x0E
  85      =1  #define FUNC_ID_ZW_SEND_DATA_MULTI_EX                   0x0F
  86      =1  
  87      =1  #define FUNC_ID_ZW_SET_RF_RECEIVE_MODE                  0x10
  88      =1  #define FUNC_ID_ZW_SET_SLEEP_MODE                       0x11
  89      =1  #define FUNC_ID_ZW_SEND_NODE_INFORMATION                0x12
  90      =1  #define FUNC_ID_ZW_SEND_DATA                            0x13
  91      =1  #define FUNC_ID_ZW_SEND_DATA_MULTI                      0x14
  92      =1  #define FUNC_ID_ZW_GET_VERSION                          0x15
  93      =1  
  94      =1  /* SERIAL API ver 4 added - START */
  95      =1  #define FUNC_ID_ZW_SEND_DATA_ABORT                      0x16
  96      =1  #define FUNC_ID_ZW_RF_POWER_LEVEL_SET                   0x17
  97      =1  #define FUNC_ID_ZW_SEND_DATA_META                       0x18
  98      =1  /* SERIAL API ver 4 added - END */
  99      =1  
 100      =1  #define FUNC_ID_ZW_RESERVED_SD                          0x19
 101      =1  #define FUNC_ID_ZW_RESERVED_SDM                         0x1A
 102      =1  #define FUNC_ID_ZW_RESERVED_SRI                         0x1B
 103      =1  
 104      =1  #define FUNC_ID_ZW_SET_ROUTING_INFO                     0x1B
 105      =1  
 106      =1  #define FUNC_ID_ZW_GET_RANDOM                           0x1C
 107      =1  #define FUNC_ID_ZW_RANDOM                               0x1D
 108      =1  #define FUNC_ID_ZW_RF_POWER_LEVEL_REDISCOVERY_SET       0x1E
 109      =1  
 110      =1  #define FUNC_ID_MEMORY_GET_ID                           0x20
 111      =1  #define FUNC_ID_MEMORY_GET_BYTE                         0x21
 112      =1  #define FUNC_ID_MEMORY_PUT_BYTE                         0x22
 113      =1  #define FUNC_ID_MEMORY_GET_BUFFER                       0x23
 114      =1  #define FUNC_ID_MEMORY_PUT_BUFFER                       0x24
 115      =1  /* Unimplemented - START */
 116      =1  #define FUNC_ID_SERIAL_API_GET_APPL_HOST_MEMORY_OFFSET  0x25
 117      =1  #define FUNC_ID_DEBUG_OUTPUT                            0x26
 118      =1  /* Unimplemented - END */
 119      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 866 

 120      =1  #define FUNC_ID_AUTO_PROGRAMMING                        0x27
 121      =1  
 122      =1  #define FUNC_ID_NVR_GET_VALUE                           0x28
 123      =1  
 124      =1  #define FUNC_ID_NVM_GET_ID                              0x29
 125      =1  #define FUNC_ID_NVM_EXT_READ_LONG_BUFFER                0x2A
 126      =1  #define FUNC_ID_NVM_EXT_WRITE_LONG_BUFFER               0x2B
 127      =1  #define FUNC_ID_NVM_EXT_READ_LONG_BYTE                  0x2C
 128      =1  #define FUNC_ID_NVM_EXT_WRITE_LONG_BYTE                 0x2D
 129      =1  #define FUNC_ID_NVM_BACKUP_RESTORE                      0x2E
 130      =1  
 131      =1  #define FUNC_ID_ZW_NVR_GET_APP_VALUE                    0x2F
 132      =1  
 133      =1  #define FUNC_ID_CLOCK_SET                               0x30
 134      =1  #define FUNC_ID_CLOCK_GET                               0x31
 135      =1  #define FUNC_ID_CLOCK_CMP                               0x32
 136      =1  #define FUNC_ID_RTC_TIMER_CREATE                        0x33
 137      =1  #define FUNC_ID_RTC_TIMER_READ                          0x34
 138      =1  #define FUNC_ID_RTC_TIMER_DELETE                        0x35
 139      =1  #define FUNC_ID_RTC_TIMER_CALL                          0x36
 140      =1  
 141      =1  #define FUNC_ID_CLEAR_TX_TIMERS                         0x37
 142      =1  #define FUNC_ID_GET_TX_TIMERS                           0x38
 143      =1  
 144      =1  #define FUNC_ID_ZW_CLEAR_NETWORK_STATS                  0x39
 145      =1  #define FUNC_ID_ZW_GET_NETWORK_STATS                    0x3A
 146      =1  #define FUNC_ID_ZW_GET_BACKGROUND_RSSI                  0x3B
 147      =1  #define FUNC_ID_ZW_SET_LISTEN_BEFORE_TALK_THRESHOLD     0x3C
 148      =1  #define FUNC_ID_ZW_REMOVE_NODE_ID_FROM_NETWORK          0x3F
 149      =1  
 150      =1  #define FUNC_ID_ZW_SET_LEARN_NODE_STATE                 0x40
 151      =1  #define FUNC_ID_ZW_GET_NODE_PROTOCOL_INFO               0x41
 152      =1  #define FUNC_ID_ZW_SET_DEFAULT                          0x42
 153      =1  #define FUNC_ID_ZW_NEW_CONTROLLER                       0x43
 154      =1  #define FUNC_ID_ZW_REPLICATION_COMMAND_COMPLETE         0x44
 155      =1  #define FUNC_ID_ZW_REPLICATION_SEND_DATA                0x45
 156      =1  #define FUNC_ID_ZW_ASSIGN_RETURN_ROUTE                  0x46
 157      =1  #define FUNC_ID_ZW_DELETE_RETURN_ROUTE                  0x47
 158      =1  #define FUNC_ID_ZW_REQUEST_NODE_NEIGHBOR_UPDATE         0x48
 159      =1  #define FUNC_ID_ZW_APPLICATION_UPDATE                   0x49
 160      =1  
 161      =1  /*Obsolete use ZW_APPLICATION_UPDATE */
 162      =1  #define FUNC_ID_ZW_APPLICATION_CONTROLLER_UPDATE        0x49
 163      =1  
 164      =1  #define FUNC_ID_ZW_ADD_NODE_TO_NETWORK                  0x4A
 165      =1  #define FUNC_ID_ZW_REMOVE_NODE_FROM_NETWORK             0x4B
 166      =1  #define FUNC_ID_ZW_CREATE_NEW_PRIMARY                   0x4C
 167      =1  #define FUNC_ID_ZW_CONTROLLER_CHANGE                    0x4D
 168      =1  
 169      =1  #define FUNC_ID_ZW_RESERVED_FN                          0x4E
 170      =1  
 171      =1  /* Devkit 6.6x */
 172      =1  #define FUNC_ID_ZW_ASSIGN_PRIORITY_RETURN_ROUTE         0x4F
 173      =1  
 174      =1  /* Slave only */
 175      =1  #define FUNC_ID_ZW_SET_LEARN_MODE                       0x50
 176      =1  /* Slave only end */
 177      =1  
 178      =1  #define FUNC_ID_ZW_ASSIGN_SUC_RETURN_ROUTE              0x51
 179      =1  #define FUNC_ID_ZW_ENABLE_SUC                           0x52
 180      =1  #define FUNC_ID_ZW_REQUEST_NETWORK_UPDATE               0x53
 181      =1  #define FUNC_ID_ZW_SET_SUC_NODE_ID                      0x54
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 867 

 182      =1  #define FUNC_ID_ZW_DELETE_SUC_RETURN_ROUTE              0x55
 183      =1  #define FUNC_ID_ZW_GET_SUC_NODE_ID                      0x56
 184      =1  #define FUNC_ID_ZW_SEND_SUC_ID                          0x57
 185      =1  
 186      =1  /* Devkit 6.6x */
 187      =1  #define FUNC_ID_ZW_ASSIGN_PRIORITY_SUC_RETURN_ROUTE     0x58
 188      =1  
 189      =1  /* Obsolete - Not available in devkit 6.6x+ */
 190      =1  #define FUNC_ID_ZW_REDISCOVERY_NEEDED                   0x59
 191      =1  
 192      =1  #define FUNC_ID_ZW_REQUEST_NODE_NEIGHBOR_UPDATE_OPTION  0x5A
 193      =1  
 194      =1  /* Slave only */
 195      =1  #define FUNC_ID_ZW_SUPPORT9600_ONLY                     0x5B
 196      =1  /* Slave only end */
 197      =1  
 198      =1  /* Enhanced/Routing Slave only */
 199      =1  #define FUNC_ID_ZW_REQUEST_NEW_ROUTE_DESTINATIONS       0x5C
 200      =1  #define FUNC_ID_ZW_IS_NODE_WITHIN_DIRECT_RANGE          0x5D
 201      =1  /* Enhanced/Routing Slave only end */
 202      =1  
 203      =1  #define FUNC_ID_ZW_EXPLORE_REQUEST_INCLUSION            0x5E
 204      =1  #define FUNC_ID_ZW_EXPLORE_REQUEST_EXCLUSION            0x5F
 205      =1  
 206      =1  #define FUNC_ID_ZW_REQUEST_NODE_INFO                    0x60
 207      =1  #define FUNC_ID_ZW_REMOVE_FAILED_NODE_ID                0x61
 208      =1  #define FUNC_ID_ZW_IS_FAILED_NODE_ID                    0x62
 209      =1  #define FUNC_ID_ZW_REPLACE_FAILED_NODE                  0x63
 210      =1  
 211      =1  /* In 6.0x the function id was wrong so we need to support this wrong function id as well in the future */
 212      =1  #define FUNC_ID_ZW_SET_ROUTING_MAX_6_00                 0x65
 213      =1  /* */
 214      =1  
 215      =1  #define FUNC_ID_ZW_IS_PRIMARY_CTRL                      0x66
 216      =1  
 217      =1  #define FUNC_ID_ZW_AES_ECB                              0x67
 218      =1  
 219      =1  #define FUNC_ID_TIMER_START                             0x70
 220      =1  #define FUNC_ID_TIMER_RESTART                           0x71
 221      =1  #define FUNC_ID_TIMER_CANCEL                            0x72
 222      =1  #define FUNC_ID_TIMER_CALL                              0x73
 223      =1  
 224      =1  /* Firmware Update API */
 225      =1  #define FUNC_ID_ZW_FIRMWARE_UPDATE_NVM                  0x78
 226      =1  
 227      =1  /* Installer API */
 228      =1  #define FUNC_ID_GET_ROUTING_TABLE_LINE                  0x80
 229      =1  #define FUNC_ID_GET_TX_COUNTER                          0x81
 230      =1  #define FUNC_ID_RESET_TX_COUNTER                        0x82
 231      =1  #define FUNC_ID_STORE_NODEINFO                          0x83
 232      =1  #define FUNC_ID_STORE_HOMEID                            0x84
 233      =1  /* Installer API only end */
 234      =1  
 235      =1  #define FUNC_ID_LOCK_ROUTE_RESPONSE                     0x90
 236      =1  #ifdef ZW_ROUTING_DEMO
 239      =1  
 240      =1  /* ZW_SetPriorityRoute/ZW_GetPriorityRoute replaces ZW_SetLastWorkingRoute/ZW_GetLastWorkingRoute */
 241      =1  #define FUNC_ID_ZW_GET_PRIORITY_ROUTE                   0x92
 242      =1  #define FUNC_ID_ZW_SET_PRIORITY_ROUTE                   0x93
 243      =1  /* NOTE: Obsoleted - BEGIN */
 244      =1  #define FUNC_ID_ZW_GET_LAST_WORKING_ROUTE               0x92
 245      =1  #define FUNC_ID_ZW_SET_LAST_WORKING_ROUTE               0x93
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 868 

 246      =1  /* NOTE: Obsoleted - END */
 247      =1  
 248      =1  #define FUNC_ID_SERIAL_API_TEST                         0x95
 249      =1  
 250      =1  #define FUNC_ID_SERIAL_API_EXT                          0x98
 251      =1  
 252      =1  /* DevKit 6.7x introduced - slave_enhanced_232 and slave_routing only */
 253      =1  #define FUNC_ID_ZW_SECURITY_SETUP                       0x9C
 254      =1  #define FUNC_ID_APPLICATION_SECURITY_EVENT              0x9D
 255      =1  
 256      =1  /* ZW_CONTROLLER_BRIDGE only START */
 257      =1  #define FUNC_ID_SERIAL_API_APPL_SLAVE_NODE_INFORMATION  0xA0
 258      =1  /* OBSOLETE: In DevKit 4.5x/6.0x Controller Bridge applications, this is obsoleted */
 259      =1  /* by the FUNC_ID_APPLICATION_COMMAND_HANDLER_BRIDGE */
 260      =1  #define FUNC_ID_APPLICATION_SLAVE_COMMAND_HANDLER       0xA1
 261      =1  #define FUNC_ID_ZW_SEND_SLAVE_NODE_INFORMATION          0xA2
 262      =1  #define FUNC_ID_ZW_SEND_SLAVE_DATA                      0xA3
 263      =1  #define FUNC_ID_ZW_SET_SLAVE_LEARN_MODE                 0xA4
 264      =1  #define FUNC_ID_ZW_GET_VIRTUAL_NODES                    0xA5
 265      =1  #define FUNC_ID_ZW_IS_VIRTUAL_NODE                      0xA6
 266      =1  #define FUNC_ID_ZW_RESERVED_SSD                         0xA7
 267      =1  /* DevKit 4.5x/6.0x added - obsoletes FUNC_ID_APPLICATION_SLAVE_COMMAND_HANDLER and */
 268      =1  /* FUNC_ID_APPLICATION_COMMAND_HANDLER for the Controller Bridge applications as */
 269      =1  /* this handles both cases - only for 4.5x/6.0x based Controller Bridge applications */
 270      =1  #define FUNC_ID_APPLICATION_COMMAND_HANDLER_BRIDGE      0xA8
 271      =1  /* DevKit 4.5x/6.0x added - Adds sourceNodeID to the parameter list */
 272      =1  #define FUNC_ID_ZW_SEND_DATA_BRIDGE                     0xA9
 273      =1  /* Obsolete */
 274      =1  #define FUNC_ID_ZW_SEND_DATA_META_BRIDGE                0xAA
 275      =1  #define FUNC_ID_ZW_SEND_DATA_MULTI_BRIDGE               0xAB
 276      =1  /* ZW_CONTROLLER_BRIDGE only END */
 277      =1  
 278      =1  #define FUNC_ID_PWR_SETSTOPMODE                         0xB0    // ZW102 only
 279      =1  #define FUNC_ID_PWR_CLK_PD                              0xB1    // ZW102 only
 280      =1  #define FUNC_ID_PWR_CLK_PUP                             0xB2    // ZW102 only
 281      =1  #define FUNC_ID_PWR_SELECT_CLK                          0xB3    // ZW102 only
 282      =1  #define FUNC_ID_ZW_SET_WUT_TIMEOUT                      0xB4
 283      =1  #define FUNC_ID_ZW_IS_WUT_KICKED                        0xB5    // ZW201 only
 284      =1  
 285      =1  #define FUNC_ID_ZW_WATCHDOG_ENABLE                      0xB6
 286      =1  #define FUNC_ID_ZW_WATCHDOG_DISABLE                     0xB7
 287      =1  #define FUNC_ID_ZW_WATCHDOG_KICK                        0xB8
 288      =1  /* Obsolete use FUNC_ID_ZW_INT_EXT_LEVEL_SET */
 289      =1  #define FUNC_ID_ZW_SET_EXT_INT_LEVEL                    0xB9    // ZW201 only
 290      =1  #define FUNC_ID_ZW_INT_EXT_LEVEL_SET                    0xB9
 291      =1  
 292      =1  #define FUNC_ID_ZW_RF_POWER_LEVEL_GET                   0xBA
 293      =1  #define FUNC_ID_ZW_GET_NEIGHBOR_COUNT                   0xBB
 294      =1  #define FUNC_ID_ZW_ARE_NODES_NEIGHBOURS                 0xBC
 295      =1  
 296      =1  #define FUNC_ID_ZW_TYPE_LIBRARY                         0xBD
 297      =1  #define FUNC_ID_ZW_SEND_TEST_FRAME                      0xBE
 298      =1  #define FUNC_ID_ZW_GET_PROTOCOL_STATUS                  0xBF
 299      =1  
 300      =1  #define FUNC_ID_ZW_SET_PROMISCUOUS_MODE                 0xD0
 301      =1  /* SERIAL API ver 5 added - START */
 302      =1  #define FUNC_ID_PROMISCUOUS_APPLICATION_COMMAND_HANDLER 0xD1
 303      =1  /* SERIAL API ver 5 added - END */
 304      =1  
 305      =1  #define FUNC_ID_ZW_WATCHDOG_START                       0xD2
 306      =1  #define FUNC_ID_ZW_WATCHDOG_STOP                        0xD3
 307      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 869 

 308      =1  #define FUNC_ID_ZW_SET_ROUTING_MAX                      0xD4
 309      =1  /* Unimplemented - START */
 310      =1  /* Obsoleted */
 311      =1  #define FUNC_ID_ZW_GET_ROUTING_MAX                      0xD5
 312      =1  /* Unimplemented - END */
 313      =1  
 314      =1  /* Allocated for setting the maximum number of 128sec ticks inbetween SmartStart inclusion requests. */
 315      =1  #define FUNC_ID_ZW_NETWORK_MANAGEMENT_SET_MAX_INCLUSION_REQUEST_INTERVALS 0xD6
 316      =1  
 317      =1  /* Allocated for NUNIT test */
 318      =1  #define FUNC_ID_ZW_NUNIT_CMD                            0xE0
 319      =1  #define FUNC_ID_ZW_NUNIT_INIT                           0xE1
 320      =1  #define FUNC_ID_ZW_NUNIT_LIST                           0xE2
 321      =1  #define FUNC_ID_ZW_NUNIT_RUN                            0xE3
 322      =1  #define FUNC_ID_ZW_NUNIT_END                            0xE4
 323      =1  
 324      =1  #define FUNC_ID_IO_PORT_STATUS                          0xE5
 325      =1  #define FUNC_ID_IO_PORT                                 0xE6
 326      =1  
 327      =1  /* Allocated for Power Management */
 328      =1  #define FUNC_ID_SERIAL_API_POWER_MANAGEMENT             0xEE
 329      =1  #define FUNC_ID_SERIAL_API_READY                        0xEF
 330      =1  
 331      =1  /* Allocated for proprietary serial API commands */
 332      =1  #define FUNC_ID_PROPRIETARY_0                           0xF0
 333      =1  #define FUNC_ID_PROPRIETARY_1                           0xF1
 334      =1  #define FUNC_ID_PROPRIETARY_2                           0xF2
 335      =1  #define FUNC_ID_PROPRIETARY_3                           0xF3
 336      =1  #define FUNC_ID_PROPRIETARY_4                           0xF4
 337      =1  #define FUNC_ID_PROPRIETARY_5                           0xF5
 338      =1  #define FUNC_ID_PROPRIETARY_6                           0xF6
 339      =1  #define FUNC_ID_PROPRIETARY_7                           0xF7
 340      =1  #define FUNC_ID_PROPRIETARY_8                           0xF8
 341      =1  #define FUNC_ID_PROPRIETARY_9                           0xF9
 342      =1  #define FUNC_ID_PROPRIETARY_A                           0xFA
 343      =1  #define FUNC_ID_PROPRIETARY_B                           0xFB
 344      =1  #define FUNC_ID_PROPRIETARY_C                           0xFC
 345      =1  #define FUNC_ID_PROPRIETARY_D                           0xFD
 346      =1  #define FUNC_ID_PROPRIETARY_E                           0xFE
 347      =1  
 348      =1  
 349      =1  /* Illegal function ID */
 350      =1  #define FUNC_ID_UNKNOWN                                 0xFF
 351      =1  
 352      =1  #endif /*_ZW_SERIALAPI_H_*/
  78          #include <uart_command.h>
   1      =1  
   2      =1  /****************************************************************************/
   3      =1  /*                      PRIVATE TYPES and DEFINITIONS                       */
   4      =1  /****************************************************************************/
   5      =1  /* serial Protocol handler states */
   6      =1  
   7      =1  #ifndef _UART_COMMAND_H_
   8      =1  #define _UART_COMMAND_H_
   9      =1  
  10      =1  
  11      =1  
  12      =1  //#define <ZW_typedefs.h>
  13      =1  
  14      =1  /* defines for accessing serial protocol data */
  15      =1  #define serFrameLen (*serBuf)
  16      =1  #define serFrameType (*(serBuf + 1))
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 870 

  17      =1  #define serFrameCmd (*(serBuf + 2))
  18      =1  #define serFrameDataPtr (serBuf + 3)
  19      =1  
  20      =1  #define SOF 0x01  /* Start Of Frame */
  21      =1  #define ACK 0x06  /* Acknowledge successfull frame reception */
  22      =1  #define NAK 0x15  /* Not Acknowledge successfull frame reception - please retransmit... */
  23      =1  #define CAN 0x18  /* Frame received (from host) was dropped - waiting for ACK */
  24      =1  
  25      =1  
  26      =1  #define REQUEST                                         0x00
  27      =1  #define RESPONSE                                        0x01
  28      =1  
  29      =1  /************************************************************/
  30      =1  /* Structs and unions that can be used by the application   */
  31      =1  /* to construct the frames to be sent                       */
  32      =1  /************************************************************/
  33      =1  
  34      =1  
  35      =1  typedef struct _ZW_UART_COMMON_FRAME_
  36      =1  {
  37      =1    BYTE length;
  38      =1    BYTE cmd;
  39      =1    BYTE type;
  40      =1  }ZW_UART_COMMON_FRAME;
  41      =1  
  42      =1  
  43      =1  
  44      =1  typedef struct _ZW_UART_COMMAND_SET
  45      =1  {
  46      =1    BYTE length;
  47      =1    BYTE cmd;
  48      =1    BYTE type;
  49      =1    BYTE value1;
  50      =1    BYTE value2;
  51      =1    BYTE value3;
  52      =1    BYTE value4;
  53      =1  }ZW_UART_COMMAND_SET;
  54      =1  
  55      =1  typedef struct _ZW_UART_COMMAND_REPORT
  56      =1  {
  57      =1    BYTE length;
  58      =1    BYTE cmd;
  59      =1    BYTE type;
  60      =1    
  61      =1    BYTE value1;
  62      =1    BYTE value2;
  63      =1    BYTE value3;
  64      =1    BYTE value4;
  65      =1    BYTE value5;
  66      =1    BYTE value6;
  67      =1    BYTE value7;
  68      =1    BYTE value8;
  69      =1    BYTE value9;
  70      =1    BYTE value10;
  71      =1    BYTE value11;
  72      =1    BYTE value12;
  73      =1    BYTE value13;
  74      =1  }ZW_UART_COMMAND_REPORT;
  75      =1  
  76      =1  typedef struct _ZW_UART_COMMAND_GET
  77      =1  {
  78      =1    BYTE length;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 871 

  79      =1    BYTE cmd;
  80      =1    BYTE type;
  81      =1    BYTE value;
  82      =1  }ZW_UART_COMMAND_GET;
  83      =1  
  84      =1  
  85      =1  typedef union _ZW_UART_COMMAND
  86      =1  {
  87      =1    ZW_UART_COMMON_FRAME zw_uartcommand;
  88      =1    ZW_UART_COMMAND_SET zw_uartcommandset;
  89      =1    ZW_UART_COMMAND_GET zw_uartcommandget;
  90      =1    ZW_UART_COMMAND_REPORT zw_uartcommandreport;
  91      =1  }ZW_UART_COMMAND;
  92      =1  
  93      =1  
  94      =1  
  95      =1  
  96      =1  /* Command Zwave to device*/
  97      =1  #define COMMAND_STATUS          0x00
  98      =1  #define COMMAND_VERSION         0x01
  99      =1  #define COMMAND_ZW_CONNECT      0x02
 100      =1  #define COMMAND_TIMER           0x03
 101      =1  #define COMMAND_TEMPERATURE     0x04
 102      =1  #define COMMAND_HUMIDITY        0x05
 103      =1  #define COMMAND_HEATER          0x06
 104      =1  #define COMMAND_ALARM           0x07
 105      =1  #define COMMAND_ACCELERATION    0x08
 106      =1  #define COMMAND_POWER_MODE      0x09
 107      =1  #define COMMAND_WAKEUP          0x0A
 108      =1  #define COMMAND_ZWAVE_RESET     0x0B
 109      =1  #define COMMAND_SWITCHBINARY    0x0C
 110      =1  #define COMMAND_METER           0x0D
 111      =1  #define COMMAND_FLOW            0x0E
 112      =1  #define COMMAND_VALVE           0x11
 113      =1  #define COMMAND_LEAK            0x12
 114      =1  #define COMMAND_CONFIGURATION   0x13  
 115      =1  
 116      =1  
 117      =1  #define COMMAND_END COMMAND_CONFIGURATION
 118      =1  
 119      =1  
 120      =1  /* Command Valve */
 121      =1  #define ZW_VALVE_GET    0x01 
 122      =1  #define ZW_VALVE_SET    0x02
 123      =1  #define ZW_VALVE_ON     0x03
 124      =1  #define ZW_VALVE_OFF    0x04
 125      =1  #define ZW_VALVE_RESET  0x05
 126      =1  
 127      =1  /* Command Zwave Status*/
 128      =1  #define ZW_SET_STATUS         0x01
 129      =1  #define ZW_GET_STATUS   0x02
 130      =1  #define ZW_REPORT_STATUS  0x03
 131      =1  
 132      =1  /* Command get version*/
 133      =1  #define ZW_SET_VERSION    0x01
 134      =1  #define ZW_GET_VERSION    0x02
 135      =1  #define ZW_REPORT_VERSION       0x03
 136      =1  
 137      =1  /* Command zwave reset*/
 138      =1  #define ZW_SET_RESET            0x01
 139      =1  #define ZW_GET_RESET            0x02
 140      =1  #define ZW_REPORT_RESET         0x03
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 872 

 141      =1  
 142      =1  /* Command wakeup*/
 143      =1  #define ZW_SET_WAKEUP   0x01
 144      =1  #define ZW_GET_WAKEUP   0x02
 145      =1  #define ZW_REPORT_WAKEUP  0x03
 146      =1  
 147      =1  /* Command z-wave inclusion Network*/
 148      =1  #define ZW_SET_CONNECT          0x01
 149      =1  #define ZW_GET_CONNECT          0x02
 150      =1  #define ZW_REPORT_CONNECT       0x03
 151      =1  #define ZW_CONNECT              0x01
 152      =1  #define ZW_DISCONNECT           0x00
 153      =1  
 154      =1  /* Command get/set Temperature*/
 155      =1  #define ZW_SETPOINT_SET_TEMPERATURE      0x01
 156      =1  #define ZW_SETPOINT_GET_TEMPERATURE      0x02
 157      =1  #define ZW_SETPOINT_REPORT_TEMPERATURE   0x03
 158      =1  #define ZW_GET_TEMPERATURE               0x04
 159      =1  #define ZW_REPORT_TEMPERATURE            0x05
 160      =1  
 161      =1  /* Command get Humidity*/
 162      =1  #define ZW_SET_HUMIDITY         0x01
 163      =1  #define ZW_GET_HUMIDITY         0x02
 164      =1  #define ZW_REPORT_HUMIDITY      0x03
 165      =1  
 166      =1  /* Command set/get Heater*/
 167      =1  #define ZW_MODESET_HEATER       0x01
 168      =1  #define ZW_MODEGET_HEATER       0x02
 169      =1  #define ZW_MODEREPORT_HEATER    0x03
 170      =1  #define ZW_MODESUPPORT_HEATER 0x04
 171      =1  
 172      =1  /* Command ACCELERATION */
 173      =1  #define ZW_ACCELERATION_GET_X   0x01
 174      =1  #define ZW_ACCELERATION_GET_Y   0x02
 175      =1  #define ZW_ACCELERATION_GET_Z   0x03
 176      =1  
 177      =1  /* Command Alarm*/
 178      =1  #define ZW_ALARM_SET            0x01
 179      =1  #define ZW_ALARM_GET            0x02
 180      =1  #define ZW_ALARM_REPORT         0x03
 181      =1  
 182      =1  /* Command Power Mode*/
 183      =1  #define ZW_POWER_SET            0x01
 184      =1  #define ZW_POWER_GET            0x02
 185      =1  #define ZW_POWER_HIGH_MODE      0x00
 186      =1  #define ZW_POWER_LOW_MODE       0x01
 187      =1  
 188      =1  /* Command Switch binary*/
 189      =1  #define ZW_SWITCHBINARY_SET   0x01
 190      =1  #define ZW_SWITCHBINARY_GET   0x02
 191      =1  #define ZW_SWITCHBINARY_REPORT  0x03
 192      =1  
 193      =1  /* Command Meter*/
 194      =1  #define ZW_METER_SET  0x01
 195      =1  #define ZW_METER_GET  0x02
 196      =1  #define ZW_METER_RESET  0x03
 197      =1  #define ZW_METER_REPORT 0x04
 198      =1  
 199      =1  /* Command Flow*/
 200      =1  #define ZW_FLOW_SET 0x01
 201      =1  #define ZW_FLOW_GET 0x02
 202      =1  #define ZW_FLOW_REPORT  0x03
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 873 

 203      =1  
 204      =1  
 205      =1  #define  CMD_CLASS_BIN_ON 0x00
 206      =1  #define  CMD_CLASS_BIN_OFF 0xFF
 207      =1  
 208      =1  
 209      =1  #define COMMAND_DEBUG 0x52
 210      =1  
 211      =1  /* Command Valve Leak */
 212      =1  #define ZW_LEAK     0x01
 213      =1  #define ZW_NON_LEAK 0x02
 214      =1  
 215      =1  /* Command For Configuration */
 216      =1  #define ZW_CONFIGURATION 0x01
 217      =1  #define ZW_CONFIGURATION_SET  0x02
 218      =1  #define ZW_CONFIGURATION_RESET  0x03
 219      =1  
 220      =1  /* Define UART for z_wave*/
 221      =1  //#define ZW_UART_WAIT_RECEIVE
 222      =1  //#define ZW_UART_REC_BYTE
 223      =1  
 224      =1  //#endif /*End _UART_COMMAND_H_*/
  79          #include <ZW_spi_api.h>
   1      =1  /***************************************************************************
   2      =1  *
   3      =1  * Copyright (c) 2001-2012
   4      =1  * Sigma Designs, Inc.
   5      =1  * All Rights Reserved
   6      =1  *
   7      =1  *---------------------------------------------------------------------------
   8      =1  *
   9      =1  * Description: Interface driver for the 400 and 500 Series Z-Wave
  10      =1  *              Single Chip built-in SPI controllers
  11      =1  *
  12      =1  * Author:      Morten Vested Olesen
  13      =1  *
  14      =1  * Last Changed By:  $Author: jdo $
  15      =1  * Revision:         $Revision: 1.38 $
  16      =1  * Last Changed:     $Date: 2005/07/27 15:12:54 $
  17      =1  *
  18      =1  ****************************************************************************/
  19      =1  #ifndef _ZW_SPI_API_H_
  20      =1  #define _ZW_SPI_API_H_
  21      =1  /****************************************************************************/
  22      =1  /*                              INCLUDE FILES                               */
  23      =1  /****************************************************************************/
  24      =1  
  25      =1  /****************************************************************************/
  26      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  27      =1  /****************************************************************************/
  28      =1  
  29      =1  /* SPI clock speed */
  30      =1  #define SPI_SPEED_8_MHZ   0x00
  31      =1  #define SPI_SPEED_4_MHZ   0x01
  32      =1  #define SPI_SPEED_2_MHZ   0x02
  33      =1  #define SPI_SPEED_1_MHZ   0x03
  34      =1  
  35      =1  /* SPI standard compliant mode numbering */
  36      =1  #define  SPI_MODE_0       0x00      /*(spi clock idle low, data sampled at rising edge and clocked at fall
             -ing edge)*/
  37      =1  #define  SPI_MODE_1       0x04      /*(spi clock idle low, data sampled at falling edge and clocked at ris
             -ing edge)*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 874 

  38      =1  #define  SPI_MODE_2       0x08      /*(spi clock idle high, data sampled at falling edge and clocked at ri
             -sing edge)*/
  39      =1  #define  SPI_MODE_3       0x0C      /*(spi clock idle high, data sampled at rising edge and clocked at fal
             -ling edge)*/
  40      =1  /* SPI signaling mode - *Obsolete* only for backward compatibility with prior Z-Wave code */
  41      =1  #define  SPI_SIG_MODE_1   0x00 /*(spi clock idle low, data sampled at rising edge and clocked at falling e
             -dge)*/
  42      =1  #define  SPI_SIG_MODE_2   0x04 /*(spi clock idle low, data sampled at falling edge and clocked at rising e
             -dge)*/
  43      =1  #define  SPI_SIG_MODE_3   0x08     /*(spi clock idle high, data sampled at falling edge and clocked at ris
             -ing edge)*/
  44      =1  #define  SPI_SIG_MODE_4   0x0C     /*(spi clock idle high, data sampled at rising edge and clocked at fall
             -ing edge)*/
  45      =1  
  46      =1  /* SPI data order */
  47      =1  #define SPI_MSB_FIRST     0x10
  48      =1  #define SPI_LSB_FIRST     0x00
  49      =1  
  50      =1  /* SPI master/slave */
  51      =1  #define SPI_MASTER        0x20
  52      =1  #define SPI_SLAVE         0x00
  53      =1  
  54      =1  /* SPI slave select */
  55      =1  #define SPI_SS_N_SS        0x08
  56      =1  #define SPI_SS_N_GPIO      0x00
  57      =1  
  58      =1  /* SPI DMA status and control defines */
  59      =1  #define SPI_TX_DMA_STATUS_SLOW_XRAM 0x80
  60      =1  #define SPI_TX_DMA_STATUS_RUNNING   0x10
  61      =1  #define SPI_RX_DMA_STATUS_LOD       0x80
  62      =1  #define SPI_RX_DMA_STATUS_EOR       0x40
  63      =1  #define SPI_RX_DMA_STATUS_BUFFULL   0x20
  64      =1  #define SPI_RX_DMA_STATUS_RUNNING   0x10
  65      =1  #define SPI_RX_DMA_STATUS_CURBUF1   0x02
  66      =1  #define SPI_RX_DMA_LOD_INT_EN       0x20
  67      =1  #define SPI_RX_DMA_SWITCH_COUNT     0x08
  68      =1  #define SPI_RX_DMA_SWITCH_FULL      0x04
  69      =1  #define SPI_RX_DMA_SWITCH_EOR       0x01
  70      =1  
  71      =1  /***************************************************************************/
  72      =1  /*                              EXPORTED DATA                              */
  73      =1  /***************************************************************************/
  74      =1  
  75      =1  /***************************************************************************/
  76      =1  /*                           EXPORTED FUNCTIONS                            */
  77      =1  /***************************************************************************/
  78      =1  
  79      =1  /****************************************************************************/
  80      =1  /*                           EXPORTED FUNCTIONS                             */
  81      =1  /****************************************************************************/
  82      =1  
  83      =1  
  84      =1  /*==============================   ZW_SPI1_int_enable   ============================
  85      =1  **    Enable the SPI1 interrupt
  86      =1  **
  87      =1  **--------------------------------------------------------------------------*/
  88      =1  void   /*RET Nothing */
  89      =1  ZW_SPI1_int_enable(BYTE bState); /*IN  TRUE: enable SPI1 interrupt ,
  90      =1                                    *    FALSE: disable SPI1 interrupt */
  91      =1  
  92      =1  /*==============================   ZW_SPI1_int_clear   ==============================
  93      =1  **    This function clears the SPI1 interface interrupt flag
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 875 

  94      =1  **
  95      =1  **--------------------------------------------------------------------------*/
  96      =1  void   /*RET Nothing */
  97      =1  ZW_SPI1_int_clear(void); /*IN  Nothing */
  98      =1  
  99      =1  /*==============================  ZW_SPI1_int_get   ==============================
 100      =1  **   Returns the state of the SPI1 interrupt flag
 101      =1  **
 102      =1  **--------------------------------------------------------------------------*/
 103      =1  
 104      =1  BYTE /* RET  zero (0x00): interrupt flag is not set , none-zero: Interrupt flag is set . */
 105      =1  ZW_SPI1_int_get(void);
 106      =1  
 107      =1  /*==============================   ZW_SPI1_coll_get   ==============================
 108      =1  **    This function returns the state of the SPI1 collision flag
 109      =1  **
 110      =1  **    Side effects: clears the collision flag after it has been read
 111      =1  **--------------------------------------------------------------------------*/
 112      =1  BYTE   /*RET  Byte with state bit mask */
 113      =1  ZW_SPI1_coll_get(void); /*IN  Nothing */
 114      =1  
 115      =1  /*==============================  ZW_SPI1_active_get   ==============================
 116      =1  **   Returns the active state is the SPI1 controller
 117      =1  **
 118      =1  **--------------------------------------------------------------------------*/
 119      =1  
 120      =1  BYTE /* RET  zero (0x00): SPI1 is idle, non-zero: SPI1 is active. */
 121      =1  ZW_SPI1_active_get(void);
 122      =1  
 123      =1  /*==============================   ZW_SPI1_enable   ==============================
 124      =1  **    Enable the SPI interface
 125      =1  **
 126      =1  **--------------------------------------------------------------------------*/
 127      =1  void   /*RET Nothing */
 128      =1  ZW_SPI1_enable(BYTE bState); /*IN  TRUE: enable SPI1, FALSE: disable SPI1 */
 129      =1  
 130      =1  /*===============================   ZW_SPI1_init   ==============================
 131      =1  **    ZW_SPI1_init the SPI interface
 132      =1  **
 133      =1  **    Parameters:
 134      =1  **
 135      =1  **      bSpiInit IN: Bit mask that defines the setting of the spi controller
 136      =1  **
 137      =1  **        Speed of the SPI clock (master only)
 138      =1  **                - SPI_SPEED_8_MHZ
 139      =1  **                - SPI_SPEED_4_MHZ
 140      =1  **                - SPI_SPEED_2_MHZ
 141      =1  **                - SPI_SPEED_1_MHZ
 142      =1  **        SPI signaling modes
 143      =1  **                - SPI_MODE_0   (spi clock idle low, data sampled at rising edge and clocked at falling e
             -dge)
 144      =1  **                - SPI_MODE_1   (spi clock idle low, data sampled at falling edge and clocked at rising e
             -dge)
 145      =1  **                - SPI_MODE_2   (spi clock idle high, data sampled at falling edge and clocked at rising 
             -edge)
 146      =1  **                - SPI_MODE_3   (spi clock idle high, data sampled at rising edge and clocked at falling 
             -edge)
 147      =1  **        Data order
 148      =1  **                - SPI_MSB_FIRST (send MSB bit first)
 149      =1  **                - SPI_LSB_FIRST (Send LSB bit first)
 150      =1  **
 151      =1  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 876 

 152      =1  ** Side effects: Enables the SPI controller
 153      =1  **
 154      =1  **--------------------------------------------------------------------------*/
 155      =1  void                /*RET  Nothing        */
 156      =1  ZW_SPI1_init(BYTE bSpiInit);    /*IN: bit mask that define the setting of the spi controller*/
 157      =1  
 158      =1  /*===============================   ZW_SPI1_rx_get   ==============================
 159      =1  **    Returns a received byte from the Serial Peripheral Interface
 160      =1  **
 161      =1  **    Side effects:
 162      =1  **
 163      =1  **--------------------------------------------------------------------------*/
 164      =1  BYTE               /*RET  Received SPI data        */
 165      =1  ZW_SPI1_rx_get( void );   /*IN   Nothing        */
 166      =1  
 167      =1  /*===============================   ZW_SPI1_tx_set  ==============================
 168      =1  **    This functions waits until the SPI1 is idle, then it writes a byte to the
 169      =1  **    SPI1 transmit register. It will start to transmit the data and the
 170      =1  **    function will return immediatly after the transmission is started.
 171      =1  **
 172      =1  **    Side effects:
 173      =1  **
 174      =1  **--------------------------------------------------------------------------*/
 175      =1  void          /*RET  Nothing        */
 176      =1  ZW_SPI1_tx_set(BYTE bData);   /*IN   SPI data to be transmitted       */
 177      =1  
 178      =1  /*==============================   ZW_SPI0_int_enable   ============================
 179      =1  **    Enable the SPI0 interruptlo
 180      =1  **
 181      =1  **--------------------------------------------------------------------------*/
 182      =1  void   /*RET Nothing */
 183      =1  ZW_SPI0_int_enable(BYTE bState); /*IN  TRUE: enable SPI0 interrupt ,
 184      =1                                    *    FALSE: disable SPI0 interrupt */
 185      =1  
 186      =1    /*==============================   ZW_SPI0_int_clear   ==============================
 187      =1  **    This function clears the SPI0 interface interrupt flag
 188      =1  **
 189      =1  **--------------------------------------------------------------------------*/
 190      =1  void   /*RET Nothing */
 191      =1  ZW_SPI0_int_clear(void); /*IN  Nothing */
 192      =1  
 193      =1  /*==============================   ZW_SPI0_coll_get   ==============================
 194      =1  **    This function returns the state of the SPI0 collision flag
 195      =1  **
 196      =1  **    Side effects: clears the collision flag after it has been read
 197      =1  **--------------------------------------------------------------------------*/
 198      =1  BYTE   /*RET  Byte with state bit mask */
 199      =1  ZW_SPI0_coll_get(void); /*IN  Nothing */
 200      =1  
 201      =1  /*==============================  ZW_SPI0_active_get   ==============================
 202      =1  **   Returns the active state is the SPI0 controller
 203      =1  **
 204      =1  **--------------------------------------------------------------------------*/
 205      =1  
 206      =1  BYTE /* RET  zero (0x00): SPI0 is idle, non-zero: SPI0 is active. */
 207      =1  ZW_SPI0_active_get(void);
 208      =1  
 209      =1  /*==============================  ZW_SPI0_int_get   ==============================
 210      =1  **   Returns the state of the SPI0 interrupt flag
 211      =1  **
 212      =1  **--------------------------------------------------------------------------*/
 213      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 877 

 214      =1  BYTE /* RET  zero (0x00): interrupt flag is not set , none-zero: Interrupt flag is set . */
 215      =1  ZW_SPI0_int_get(void);
 216      =1  
 217      =1  
 218      =1  /*==============================   ZW_SPI0_enable   ==============================
 219      =1  **    Enable the SPI interface
 220      =1  **
 221      =1  **--------------------------------------------------------------------------*/
 222      =1  void   /*RET Nothing */
 223      =1  ZW_SPI0_enable(BYTE bState); /*IN  TRUE: enable SPI0, FALSE: disable SPI0 */
 224      =1  
 225      =1  /*===============================   ZW_SPI0_init   ==============================
 226      =1  **    ZW_SPI0_init the SPI interface
 227      =1  **
 228      =1  **    Parameters:
 229      =1  **
 230      =1  **      bSpiInit IN: Bit mask that defines the setting of the spi controller
 231      =1  **
 232      =1  **        Speed of the SPI clock (master only)
 233      =1  **                - SPI_SPEED_8_MHZ
 234      =1  **                - SPI_SPEED_4_MHZ
 235      =1  **                - SPI_SPEED_2_MHZ
 236      =1  **                - SPI_SPEED_1_MHZ
 237      =1  **        SPI signaling modes
 238      =1  **                - SPI_MODE_0   (spi clock idle low, data sampled at rising edge and clocked at falling e
             -dge)
 239      =1  **                - SPI_MODE_1   (spi clock idle low, data sampled at falling edge and clocked at rising e
             -dge)
 240      =1  **                - SPI_MODE_2   (spi clock idle high, data sampled at falling edge and clocked at rising 
             -edge)
 241      =1  **                - SPI_MODE_3   (spi clock idle high, data sampled at rising edge and clocked at falling 
             -edge)
 242      =1  **        Data order
 243      =1  **                - SPI_MSB_FIRST (send MSB bit first)
 244      =1  **                - SPI_LSB_FIRST (Send LSB bit first)
 245      =1  **        Master/slave
 246      =1  **                - SPI_MASTER (use SPI master mode)
 247      =1  **                - SPI_SLAVE (use SPI slave mode)
 248      =1  **        Slave select
 249      =1  **                - SPI_SS_N_SS (use io SS_N as the slave select when the ZW050x is a SPI slave)
 250      =1  **                - SPI_SS_N_GPIO (use SS_N as normal GPIO or for other functions)
 251      =1  **
 252      =1  **
 253      =1  ** Side effects: Enables the SPI controller
 254      =1  **
 255      =1  **--------------------------------------------------------------------------*/
 256      =1  void                /*RET  Nothing        */
 257      =1  ZW_SPI0_init(BYTE bSpiInit);    /*IN: bit mask that define the setting of the spi controller*/
 258      =1  
 259      =1  /*===============================   ZW_SPI0_rx_get   ==============================
 260      =1  **    Returns a received byte from the Serial Peripheral Interface
 261      =1  **
 262      =1  **    Side effects:
 263      =1  **
 264      =1  **--------------------------------------------------------------------------*/
 265      =1  BYTE               /*RET  Received SPI data        */
 266      =1  ZW_SPI0_rx_get( void );   /*IN   Nothing        */
 267      =1  
 268      =1  /*===============================   ZW_SPI0_tx_set  ==============================
 269      =1  **    This functions waits until the SPI0 is idle, then it writes a byte to the
 270      =1  **    SPI0 transmit register. It will start to transmit the data and the
 271      =1  **    function will return immediatly after the transmission is started.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 878 

 272      =1  **
 273      =1  **    Side effects:
 274      =1  **
 275      =1  **--------------------------------------------------------------------------*/
 276      =1  void          /*RET  Nothing        */
 277      =1  ZW_SPI0_tx_set(BYTE bData);   /*IN   SPI data to be transmitted       */
 278      =1  
 279      =1  /*--------------------------------------------------------------------------
 280      =1  **--------------------------------------------------------------------------
 281      =1  **
 282      =1  **  WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING
 283      =1  
 284      =1  ** The following API calls are obsolete and should NOT be used.
 285      =1  ** The API calls will be removed in a later developers kit release.
 286      =1  **
 287      =1  **--------------------------------------------------------------------------
 288      =1  **--------------------------------------------------------------------------*/
 289      =1  
 290      =1  /*===============================   ZW_SPI0_tx_dma_int_byte_count  ========================
 291      =1  **  Sets interrupt tx byte count. Only applicable when SPI0 Tx DMA is enabled.
 292      =1  **
 293      =1  **  Parameters
 294      =1  **
 295      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed to the SPI
 296      =1  **                    Disabled when set to 0x00
 297      =1  **   Side effects:
 298      =1  **--------------------------------------------------------------------------*/
 299      =1  void                    /*RET Nothing */
 300      =1  ZW_SPI0_tx_dma_int_byte_count( BYTE bByteCount);   /*IN Number of tx'ed bytes */
 301      =1  
 302      =1  /*===============================   ZW_SPI0_tx_dma_inter_byte_delay  ========================
 303      =1  **  Sets Tx inter byte delay
 304      =1  **  Parameters
 305      =1  **
 306      =1  **   bDelay:   IN Sets the inter byte delay 0x00 no delay (default after reset)
 307      =1  **                                          0x01  125ns delay
 308      =1  **                                          0x02  250ns delay
 309      =1  **                                                 :
 310      =1  **                                          0x0F 1875ns delay
 311      =1  **   Side effects:
 312      =1  **--------------------------------------------------------------------------*/
 313      =1  void                    /*RET Nothing */
 314      =1  ZW_SPI0_tx_dma_inter_byte_delay( BYTE bDelay);   /*IN inter byte delay */
 315      =1  
 316      =1  /*===============================   ZW_SPI0_tx_dma_data  ========================
 317      =1  **  Sets buffer address and length and then starts SPI0 DMA
 318      =1  **  Parameters
 319      =1  **
 320      =1  **   pbAddress:   IN pointer to Tx buffer in lower 4kB XRAM
 321      =1  **   bBufferLen:  IN length of Tx buffer in bytes
 322      =1  **
 323      =1  **   Side effects:
 324      =1  **       Discards any ongoing SPI TX DMA process
 325      =1  **--------------------------------------------------------------------------*/
 326      =1  void                    /*RET Nothing */
 327      =1  ZW_SPI0_tx_dma_data( XBYTE *pbAddress,    /*IN buffer base address */
 328      =1                       BYTE bBufferLen); /*IN buffer len */
 329      =1  
 330      =1  /*===============================   ZW_SPI0_tx_dma_status  ========================
 331      =1  **  If the SPI0 DMA process is ongoing this function Returns the status of this ongoing
 332      =1  **  process. Returns the status of the latest SPI0 DMA process if the DMA has stopped.
 333      =1  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 879 

 334      =1  **  Returned values:
 335      =1  **       SPI_TX_DMA_STATUS_SLOW_XRAM: DMA can not keep up with configured inter byte
 336      =1  **                                     process because of congestion in XRAM access
 337      =1  **       SPI_TX_DMA_STATUS_RUNNING:   The DMA is transferring data to SPI0
 338      =1  **
 339      =1  **  Parameters: None
 340      =1  **
 341      =1  **   Side effects:
 342      =1  **--------------------------------------------------------------------------*/
 343      =1  BYTE                    /*RET status */
 344      =1  ZW_SPI0_tx_dma_status(void); /*IN Nothing */
 345      =1  
 346      =1  /*===============================   ZW_SPI0_tx_dma_bytes_transferred  ========================
 347      =1  **  Returns the number of bytes that has been transferred to SPI0 from XRAM for the ongoing DMA
 348      =1  **  process. If no transfer is ongoing the number of bytes that has been transferred to SPI0
 349      =1  **  from XRAM from the latest process is returned.
 350      =1  **
 351      =1  **  Parameters: None
 352      =1  **
 353      =1  **   Side effects:
 354      =1  **--------------------------------------------------------------------------*/
 355      =1  BYTE                    /*RET bytes transferred */
 356      =1  ZW_SPI0_tx_dma_bytes_transferred(void); /*IN Nothing */
 357      =1  
 358      =1  /*===============================   ZW_SPI0_tx_dma_cancel  ========================
 359      =1  **  Cancels any ongoing DMA process and brings SPI TX DMA to idle state
 360      =1  **
 361      =1  **  Parameters: None
 362      =1  **
 363      =1  **   Side effects:
 364      =1  **--------------------------------------------------------------------------*/
 365      =1  void                    /*RET nothing */
 366      =1  ZW_SPI0_tx_dma_cancel(void); /*IN Nothing */
 367      =1  
 368      =1  
 369      =1  /*===============================   ZW_SPI0_rx_dma_init  ===============================
 370      =1  **  Initializes the buffers and setup for the SPI0 Rx DMA
 371      =1  **
 372      =1  **  Parameters
 373      =1  **     pbAddress:  IN pointer to the base address of the two Rx buffers
 374      =1  **     bBufLength: IN length of SPI0 RX Buffer - must be greater than 0
 375      =1  **     bBitMask:   IN bit mask contains the setting of the Rx DMA
 376      =1  **                      SPI_RX_DMA_LOD_INT_EN    Enable Loss Of Data interrupt
 377      =1  **                      SPI_RX_DMA_SWITCH_COUNT  Switch buffer when byte count is reached
 378      =1  **                      SPI_RX_DMA_SWITCH_FULL   Switch buffer when buffer full
 379      =1  **                      SPI_RX_DMA_SWITCH_EOR    Switch buffer when End-Of_Record char has
 380      =1  **                                               been received
 381      =1  **
 382      =1  **    Side effects:
 383      =1  **       Discards any ongoing SPI RX DMA process
 384      =1  **       Clears status information
 385      =1  **-------------------------------------------------------------------------------------*/
 386      =1  void                    /*RET Nothing */
 387      =1  ZW_SPI0_rx_dma_init( XBYTE *pbAddress, /*IN pointer to base address of RX buffers */
 388      =1                       BYTE bBufLength, /* IN buffer byte length */
 389      =1                       BYTE bBitMask); /*IN the rx dma control bitmask */
 390      =1  
 391      =1  /*===============================   ZW_SPI0_rx_dma_int_byte_count  ===============================
 392      =1  **  Sets interrupt rx byte count. A value of 0x00 means disabled
 393      =1  **
 394      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed from the SPI
 395      =1  **                  Disabled when set to 0x00
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 880 

 396      =1  **    Side effects:
 397      =1  **-------------------------------------------------------------------------------------*/
 398      =1  void                    /*RET Nothing */
 399      =1  ZW_SPI0_rx_dma_int_byte_count(BYTE bByteCount); /*IN */
 400      =1  
 401      =1  /*===============================   ZW_SPI0_rx_dma_status  ========================
 402      =1  **  If the SPI0 RX DMA process is ongoing this function returns the status of this ongoing
 403      =1  **  process. Returns the status of the latest SPI0 RX DMA process if the DMA has stopped.
 404      =1  **
 405      =1  **  Returned values:
 406      =1  **       SPI_RX_DMA_STATUS_EOR:     The DMA switched RX buffer because it has
 407      =1  **                                  recieved an End of Record char
 408      =1  **       SPI_RX_DMA_STATUS_LOD:     DMA can not keep up with the speed of the incomming data
 409      =1  **       SPI_RX_DMA_STATUS_CURBUF1: Set when the SPI0 RX DMA currently is transferring data
 410      =1  **                                  to buffer 1. When cleared the SPI0 RX DMA currently is
 411      =1  **                                  transferring data to buffer 0
 412      =1  **       SPI_RX_DMA_STATUS_BUFFULL: Set when the SPI0 DMA has filled a buffer to the limit
 413      =1  **       SPI_RX_DMA_STATUS_RUNNING: The DMA is enabled
 414      =1  **
 415      =1  **  Parameters: None
 416      =1  **
 417      =1  **   Side effects:
 418      =1  **--------------------------------------------------------------------------*/
 419      =1  BYTE                    /*RET status */
 420      =1  ZW_SPI0_rx_dma_status(void); /*IN Nothing */
 421      =1  
 422      =1  /*===============================   ZW_SPI0_rx_dma_bytes_transferred  ========================
 423      =1  **  Returns the number of bytes that has been transferred to SPI0 to XRAM for the ongoing DMA
 424      =1  **  process.
 425      =1  **
 426      =1  **  Parameters: None
 427      =1  **
 428      =1  **   Side effects:
 429      =1  **--------------------------------------------------------------------------*/
 430      =1  BYTE                    /*RET bytes transferred */
 431      =1  ZW_SPI0_rx_dma_bytes_transferred(void); /*IN Nothing */
 432      =1  
 433      =1  /*===============================   ZW_SPI0_rx_dma_cancel  ========================
 434      =1  **  Cancels any ongoing DMA process and brings SPI RX DMA
 435      =1  **  to idle state
 436      =1  **
 437      =1  **  Parameters: None
 438      =1  **
 439      =1  **   Side effects:
 440      =1  **--------------------------------------------------------------------------*/
 441      =1  void                    /*RET nothing */
 442      =1  ZW_SPI0_rx_dma_cancel(void); /*IN Nothing */
 443      =1  
 444      =1  /*===============================   ZW_SPI0_rx_dma_eor_set ====================
 445      =1  **  Sets SPI0 RX DMA End-Of-Record character
 446      =1  **
 447      =1  **  Parameters:
 448      =1  **    bEorChar: End Of Record character
 449      =1  **
 450      =1  **   Side effects:
 451      =1  **--------------------------------------------------------------------------*/
 452      =1  void                    /*RET nothing */
 453      =1  ZW_SPI0_rx_dma_eor_set(BYTE bEorChar);  /*IN EOR char */
 454      =1  
 455      =1  
 456      =1  
 457      =1  /*===============================   ZW_SPI1_tx_dma_int_byte_count  ========================
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 881 

 458      =1  **  Sets interrupt tx byte count. Only applicable when SPI1 Tx DMA is enabled.
 459      =1  **
 460      =1  **  Parameters
 461      =1  **
 462      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed to the SPI
 463      =1  **                    Disabled when set to 0x00
 464      =1  **   Side effects:
 465      =1  **--------------------------------------------------------------------------*/
 466      =1  void                    /*RET Nothing */
 467      =1  ZW_SPI1_tx_dma_int_byte_count( BYTE bByteCount);   /*IN Number of tx'ed bytes */
 468      =1  
 469      =1  /*===============================   ZW_SPI1_tx_dma_inter_byte_delay  ========================
 470      =1  **  Sets Tx inter byte delay
 471      =1  **  Parameters
 472      =1  **
 473      =1  **   bDelay:   IN Sets the inter byte delay 0x00 no delay (default after reset)
 474      =1  **                                          0x01  125ns delay
 475      =1  **                                          0x02  250ns delay
 476      =1  **                                                 :
 477      =1  **                                          0x0F 1875ns delay
 478      =1  **   Side effects:
 479      =1  **--------------------------------------------------------------------------*/
 480      =1  void                    /*RET Nothing */
 481      =1  ZW_SPI1_tx_dma_inter_byte_delay( BYTE bDelay);   /*IN inter byte delay */
 482      =1  
 483      =1  /*===============================   ZW_SPI1_tx_dma_data  ========================
 484      =1  **  Sets buffer address and length and then start SPI1 DMA
 485      =1  **  Parameters
 486      =1  **
 487      =1  **   pbAddress:  IN pointer to Tx buffer in lower 4kB XRAM
 488      =1  **   bBufferLen: IN length of Tx buffer in bytes
 489      =1  **
 490      =1  **   Side effects:
 491      =1  **       Discards any ongoing SPI TX DMA process
 492      =1  **--------------------------------------------------------------------------*/
 493      =1  void                    /*RET Nothing */
 494      =1  ZW_SPI1_tx_dma_data( XBYTE *pbAddress,    /*IN buffer base address */
 495      =1                       BYTE bBufferLen); /*IN buffer len */
 496      =1  
 497      =1  /*===============================   ZW_SPI1_tx_dma_status  ========================
 498      =1  **  If the SPI1 DMA process is ongoing this function Returns the status of this ongoing
 499      =1  **  process. Returns the status of the latest SPI1 DMA process if the DMA has stopped.
 500      =1  **
 501      =1  **  Returned values:
 502      =1  **       SPI_TX_DMA_STATUS_SLOW_XRAM: DMA can not keep up with configured inter byte
 503      =1  **                                     process because of congestion in XRAM access
 504      =1  **       SPI_TX_DMA_STATUS_RUNNING:   The DMA is transferring data to SPI1
 505      =1  **
 506      =1  **  Parameters: None
 507      =1  **
 508      =1  **   Side effects:
 509      =1  **--------------------------------------------------------------------------*/
 510      =1  BYTE                    /*RET status */
 511      =1  ZW_SPI1_tx_dma_status(void); /*IN Nothing */
 512      =1  
 513      =1  /*===============================   ZW_SPI1_tx_dma_bytes_transferred  ========================
 514      =1  **  Returns the number of bytes that has been transferred to SPI1 from XRAM for the ongoing DMA
 515      =1  **  process. If no transfer is ongoing the number of bytes that has been transferred to SPI1
 516      =1  **  from XRAM from the latest process is returned.
 517      =1  **
 518      =1  **  Parameters: None
 519      =1  **
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 882 

 520      =1  **   Side effects:
 521      =1  **--------------------------------------------------------------------------*/
 522      =1  BYTE                    /*RET bytes transferred */
 523      =1  ZW_SPI1_tx_dma_bytes_transferred(void); /*IN Nothing */
 524      =1  
 525      =1  /*===============================   ZW_SPI1_tx_dma_cancel  ========================
 526      =1  **  Cancels any ongoing DMA process and brings SPI TX DMA to idle state
 527      =1  **
 528      =1  **  Parameters: None
 529      =1  **
 530      =1  **   Side effects:
 531      =1  **--------------------------------------------------------------------------*/
 532      =1  void                    /*RET nothing */
 533      =1  ZW_SPI1_tx_dma_cancel(void); /*IN Nothing */
 534      =1  
 535      =1  /*===============================   ZW_SPI1_rx_dma_init  ===============================
 536      =1  **  Initializes the buffers and setup for the SPI1 Rx DMA
 537      =1  **
 538      =1  **  Parameters
 539      =1  **     pbAddress:  IN pointer to the base address of the two Rx buffers
 540      =1  **     bBufLength: IN length of SPI1 RX Buffer - must be greater than 0
 541      =1  **     bBitMask:   IN bit mask contains the setting of the Rx DMA
 542      =1  **                      SPI_RX_DMA_LOD_INT_EN    Enable Loss Of Data interrupt
 543      =1  **                      SPI_RX_DMA_SWITCH_COUNT  Switch buffer when byte count is reached
 544      =1  **                      SPI_RX_DMA_SWITCH_FULL   Switch buffer when buffer full
 545      =1  **                      SPI_RX_DMA_SWITCH_EOR    Switch buffer when End-Of_Record char has
 546      =1  **                                               been received
 547      =1  **
 548      =1  **    Side effects:
 549      =1  **       Discards any ongoing SPI RX DMA process
 550      =1  **       Clears status information
 551      =1  **-------------------------------------------------------------------------------------*/
 552      =1  void                    /*RET Nothing */
 553      =1  ZW_SPI1_rx_dma_init( XBYTE *pbAddress, /*IN pointer to base address of RX buffers */
 554      =1                       BYTE bBufLength, /* IN buffer byte length */
 555      =1                       BYTE bBitMask); /*IN the rx dma control bitmask */
 556      =1  
 557      =1  /*===============================   ZW_SPI1_rx_dma_int_byte_count  ===============================
 558      =1  **  Sets interrupt rx byte count. A value of 0x00 means disabled
 559      =1  **
 560      =1  **   bByteCount: IN Interrupt is issued when this number of bytes has been DMA'ed from the SPI
 561      =1  **                  Disabled when set to 0x00
 562      =1  **    Side effects:
 563      =1  **-------------------------------------------------------------------------------------*/
 564      =1  void                    /*RET Nothing */
 565      =1  ZW_SPI1_rx_dma_int_byte_count(BYTE bByteCount); /*IN */
 566      =1  
 567      =1  /*===============================   ZW_SPI1_rx_dma_status  ========================
 568      =1  **  If the SPI1 RX DMA process is ongoing this function returns the status of this ongoing
 569      =1  **  process. Returns the status of the latest SPI1 RX DMA process if the DMA has stopped.
 570      =1  **
 571      =1  **  Returned values:
 572      =1  **       SPI_RX_DMA_STATUS_EOR:     The DMA switched RX buffer because it has
 573      =1  **                                  recieved an End of Record char
 574      =1  **       SPI_RX_DMA_STATUS_LOD:     DMA can not keep up with the speed of the incomming data
 575      =1  **       SPI_RX_DMA_STATUS_CURBUF1: Set when the SPI1 RX DMA currently is transferring data
 576      =1  **                                  to buffer 1. When cleared the SPI1 RX DMA currently is
 577      =1  **                                  transferring data to buffer 0
 578      =1  **       SPI_RX_DMA_STATUS_BUFFULL: Set when the SPI1 DMA has filled a buffer to the limit
 579      =1  **       SPI_RX_DMA_STATUS_RUNNING: The DMA is enabled
 580      =1  **
 581      =1  **  Parameters: None
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 883 

 582      =1  **
 583      =1  **   Side effects:
 584      =1  **--------------------------------------------------------------------------*/
 585      =1  BYTE                    /*RET status */
 586      =1  ZW_SPI1_rx_dma_status(void); /*IN Nothing */
 587      =1  
 588      =1  /*===============================   ZW_SPI1_rx_dma_bytes_transferred  ========================
 589      =1  **  Returns the number of bytes that has been transferred to SPI1 to XRAM for the ongoing DMA
 590      =1  **  process.
 591      =1  **
 592      =1  **  Parameters: None
 593      =1  **
 594      =1  **   Side effects:
 595      =1  **--------------------------------------------------------------------------*/
 596      =1  BYTE                    /*RET bytes transferred */
 597      =1  ZW_SPI1_rx_dma_bytes_transferred(void); /*IN Nothing */
 598      =1  
 599      =1  /*===============================   ZW_SPI1_rx_dma_cancel  ========================
 600      =1  **  Cancels any ongoing DMA process and brings SPI RX DMA
 601      =1  **  to idle state
 602      =1  **
 603      =1  **  Parameters: None
 604      =1  **
 605      =1  **   Side effects:
 606      =1  **--------------------------------------------------------------------------*/
 607      =1  void                    /*RET nothing */
 608      =1  ZW_SPI1_rx_dma_cancel(void); /*IN Nothing */
 609      =1  
 610      =1  
 611      =1  /*===============================   ZW_SPI1_rx_dma_eor_set ====================
 612      =1  **  Sets SPI1 RX DMA End-Of-Record character
 613      =1  **
 614      =1  **  Parameters:
 615      =1  **    bEorChar: End Of Record character
 616      =1  **
 617      =1  **   Side effects:
 618      =1  **--------------------------------------------------------------------------*/
 619      =1  void                    /*RET nothing */
 620      =1  ZW_SPI1_rx_dma_eor_set(BYTE bEorChar);  /*IN EOR char */
 621      =1  
 622      =1  #endif /* _ZW_SPI_API_H_ */
  80          #include <notification.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Command Class Notification helper module.
   4      =1   *
   5      =1   * How to use Notification module:
   6      =1   *
   7      =1   * Current version cannot queue up more events, but it is possible to implement a queue in current
   8      =1   * design.
   9      =1   *
  10      =1   * Initialization:
  11      =1   * 1. Call constructor InitNotification()
  12      =1   * 2. Add application Notification types and events to the module by calling
  13      =1   *    AddNotification(...)
  14      =1   *
  15      =1   * Trigger event:
  16      =1   * 1.  First trigger an event on Communication Module by calling
  17      =1   *     NotificationEventTrigger (..) and then call AGI_NodeIdListInit (..) to
  18      =1   *     trig profile-event at AGI.
  19      =1   * 2. AGI now sends an unsolicited events to all nodes. It has the knowledge Command class and
  20      =1   *    and command (NextUnsolicitedEvent).
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 884 

  21      =1   * 3. Finally notification-type/event must to be cleared from the queue. This
  22      =1   *    done by calling ClearLastNotificationAction(). ClearLastNotificationAction ()
  23      =1   *    is called when it's done with the unsolicited event jobs.
  24      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
  25      =1   */
  26      =1  
  27      =1  #ifndef _NOTIFICATION_H_
  28      =1  #define _NOTIFICATION_H_
  29      =1  
  30      =1  /****************************************************************************/
  31      =1  /*                              INCLUDE FILES                               */
  32      =1  /****************************************************************************/
  33      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  34      =1  #include <CommandClassNotification.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Handler for Command Class Notification.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _COMMAND_CLASS_NOTIFICATION_H_
  35      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 885 

  36      =1  /****************************************************************************/
  37      =1  /*                     EXPORTED TYPES and DEFINITIONS                       */
  38      =1  /****************************************************************************/
  39      =1  
  40      =1  
  41      =1  /****************************************************************************/
  42      =1  /*                              EXPORTED DATA                               */
  43      =1  /****************************************************************************/
  44      =1  
  45      =1  
  46      =1  /****************************************************************************/
  47      =1  /*                           EXPORTED FUNCTIONS                             */
  48      =1  /****************************************************************************/
  49      =1  
  50      =1  
  51      =1  
  52      =1  /**
  53      =1   * @brief Init notification module
  54      =1   */
  55      =1  void InitNotification(void);
  56      =1  
  57      =1  
  58      =1  /**
  59      =1   * @brief Set default notification status if it is active or deactive.
  60      =1   * @param status of type NOTIFICATION_STATUS
  61      =1   */
  62      =1  void DefaultNotifactionStatus(NOTIFICATION_STATUS status);
  63      =1  
  64      =1  
  65      =1  /**
  66      =1   * @brief Configure notification event linked to a specific AGI profile. Notification module can
  67      =1   * handle notification event as a state. Example setting up notification = Power management
  68      =1   * (0x08), event = Over-load detected (0x08) and stateless = FALSE. If the event is triggered
  69      =1   * Notification module remeber the state that over-load is active until application trigger event
  70      =1   * notification = 0x08, event = 0x00, eventPar = Over-load detected (0x08) that clear the state.
  71      =1   * @param pAgiProfile of type AGI_PROFILE is used to link notification to AGI event.
  72      =1   * @param type of type NOTIFICATION_TYPE
  73      =1   * @param pSuppportedEvents is notification event list for the specific notification type.
  74      =1   * @param suppportedEventsLen is length of the list
  75      =1   * @param stateless define current notification has a state or is stateless.
  76      =1   * If stateless is FALSE do Notification-module remember last event until it is disabled.
  77      =1   * @param endpoint setting up the notification for a specific endpoint.
  78      =1   * @return TRUE if success else FALSE.
  79      =1   */
  80      =1  BOOL AddNotification(
  81      =1      AGI_PROFILE * pAgiProfile,
  82      =1      NOTIFICATION_TYPE type,
  83      =1      uint8_t * pSuppportedEvents,
  84      =1      uint8_t suppportedEventsLen,
  85      =1      BOOL stateless,
  86      =1      uint8_t endpoint);
  87      =1  
  88      =1  /**
  89      =1   * @brief Add event on queue (queue size 1)
  90      =1   * @param[in] pAgiProfile of type AGI_PROFILE is used to link notification to AGI event.
  91      =1   * @param[in] type notification type.
  92      =1   * @param[in] notificationEvent notification event.
  93      =1   * @param[in] pEvPar point to event parameters.
  94      =1   * @param[in] evParLen length of event parameters.
  95      =1   * @param[in] sourceEndpoint source endpoint
  96      =1   */
  97      =1  void NotificationEventTrigger(
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 886 

  98      =1      AGI_PROFILE * pAgiProfile,
  99      =1      uint8_t type,
 100      =1      uint8_t notificationEvent,
 101      =1      uint8_t * pEvPar,
 102      =1      uint8_t evParLen,
 103      =1      uint8_t sourceEndpoint);
 104      =1  
 105      =1  /**
 106      =1   * @brief Send unsolicited notification event to node in pnList.
 107      =1   * @param[in] pProfile pointer to AGI profile
 108      =1   * @param[in] sourceEndpoint source endpoint
 109      =1   * @param[out] pCallback callback function returning state on job
 110      =1   * @return JOB_STATUS
 111      =1   */
 112      =1  JOB_STATUS UnsolicitedNotificationAction(
 113      =1    AGI_PROFILE* pProfile,
 114      =1    BYTE sourceEndpoint,
 115      =1    VOID_CALLBACKFUNC(pCallback)(TRANSMISSION_RESULT * pTransmissionResult));
 116      =1  
 117      =1  
 118      =1  /**
 119      =1   * @brief Clear event on queue
 120      =1   * @param[in] pAgiProfile pointer to AGI profile
 121      =1   * @param[in] sourceEndpoint source endpoint
 122      =1   */
 123      =1  void ClearLastNotificationAction(AGI_PROFILE* pAgiProfile, BYTE sourceEndpoint);
 124      =1  
 125      =1  
 126      =1  #endif /* _NOTIFICATION_H_ */
 127      =1  
 128      =1  
  81          #include <CommandClassConfiguration.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Handler for Command Class Configuration 
   4      =1   */
   5      =1  
   6      =1  
   7      =1  
   8      =1  
   9      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  10      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
  11      =1  
  12      =1  #define WATER_MODE  0x01
  13      =1  #define METER_VALUE 0x02
  14      =1  #define METER_MODE  0x03
  15      =1  
  16      =1  #define WATER_MODE_0 0x01
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 887 

  17      =1  #define WATER_MODE_1 0x02
  18      =1  /**
  19      =1   * Contains all configuration parameters.
  20      =1   */
  21      =1  
  22      =1  typedef struct
  23      =1  {
  24      =1    uint8_t value;
  25      =1    uint8_t Endpoint_node;
  26      =1  }
  27      =1  configuration_t;
  28      =1  
  29      =1  
  30      =1  
  31      =1  /**
  32      =1   * Returns the version of this CC.
  33      =1   */
  34      =1  #define CommandClassCentralSceneVersionGet() CENTRAL_SCENE_VERSION_V3
  35      =1  
  36      =1  /**
  37      =1   * Function implemented by the application which defines what Central Scene capabilities the
  38      =1   * application supports.
  39      =1   * @param pData Pointer to the variable storing data as defined in the
  40      =1   * specification of the Central Scene command class.
  41      =1   * @return Number of bytes with key attributes.
  42      =1   */
  43      =1  extern uint8_t getConfiguration(uint8_t parameterNumber);
  44      =1  
  45      =1  /**
  46      =1   * Function implemented by the application which defines what Central Scene Configuration Get Command
  47      =1   * is used to read the use of optional node capabilities for scene notifications.
  48      =1   * @param pConfiguration Pointer to struct containing Central Scene configuration parameters.
  49      =1   */
  50      =1  //extern void getConfiguration2(central_scene_configuration_t * pConfiguration);
  51      =1  
  52      =1  /**
  53      =1   * Function implemented by the application which defines what Central Scene Configuration Set Command
  54      =1   * is used to configure the use of optional node capabilities for scene notifications.
  55      =1   * @param pConfiguration Pointer to struct containing Central Scene configuration parameters.
  56      =1   */
  57      =1  extern void setConfiguration(uint8_t parameterNumber, uint8_t value );
  58      =1  
  59      =1  /**
  60      =1   * Handles incoming commands in the Central Scene command class.
  61      =1   * @param[in] rxOpt Receive options.
  62      =1   * @param[in] pCmd Incoming payload.
  63      =1   * @param cmdLength Length of the payload.
  64      =1   * @return receive frame status.
  65      =1   */
  66      =1  received_frame_status_t
  67      =1  handleCommandClassConfiguration(
  68      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  69      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  70      =1    BYTE cmdLength);
  71      =1  
  72      =1  /**
  73      =1   * Initiates the transmission of a "Central Scene Notification" command.
  74      =1   * @param[in] pProfile pointer to AGI profile
  75      =1   * @param[in] sourceEndpoint source endpoint
  76      =1   * @param[in] keyAttribute The key event.
  77      =1   * @param[in] sceneNumber The scene number.
  78      =1   * @param[in] pCbFunc Callback function to be called when transmission is done/failed.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 888 

  79      =1   * @return Status of the job.
  80      =1   */
  81      =1  JOB_STATUS
  82      =1  CommandClassConfigurationReport(
  83      =1    AGI_PROFILE* pProfile,
  84      =1    BYTE sourceEndpoint,
  85      =1    BYTE bvalue,
  86      =1    VOID_CALLBACKFUNC(pCallback)(TRANSMISSION_RESULT * pTransmissionResult));
  87      =1  
  82          #include <CommandClassAllSwitch.h>
   1      =1  /***************************************************************************
   2      =1  *
   3      =1  * Copyright (c) 2001-2011
   4      =1  * Sigma Designs, Inc.
   5      =1  * All Rights Reserved
   6      =1  *
   7      =1  *---------------------------------------------------------------------------
   8      =1  *
   9      =1  * Description: Command Class All Switch Handle 
  10      =1  *
  11      =1  * Author:
  12      =1  *
  13      =1  * Last Changed By:  $Author:  NgocNguyen
  14      =1  * Revision:         $Revision:  $
  15      =1  * Last Changed:     $Date:  $
  16      =1  *
  17      =1  
  18      =1  
  19      =1  /****************************************************************************/
  20      =1  /*                              INCLUDE FILES                               */
  21      =1  /****************************************************************************/
  22      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 889 

  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  23      =1  #include <ZW_sysdefs.h>
   1      =2  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Z-Wave system defines
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: tro $
  29      =2   * Revision:         $Revision: 23873 $
  30      =2   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SYSDEFS_H_
  24      =1  #include <ZW_pindefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: In/Out definitions Z-Wave Single Chips
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: efh $
  14      =2   * Revision:         $Revision: 23305 $
  15      =2   * Last Changed:     $Date: 2012-09-04 08:36:50 +0200 (ti, 04 sep 2012) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_PINDEFS_H_
 785      =2  
  25      =1  #include <ZW_evaldefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 890 

   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: IO definitions for the Z-Wave Evaluation board
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: tro $
  14      =2   * Revision:         $Revision: 25909 $
  15      =2   * Last Changed:     $Date: 2013-05-29 14:49:43 +0200 (on, 29 maj 2013) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_EVALDEFS_H_
  26      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  27      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  28      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  29      =1  #include <CommandClassBinarySwitch.h>
   1      =2  /**
   2      =2   * @file
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 891 

   3      =2   * Handler for Command Class Binary Switch.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _COMMAND_CLASS_BINARY_SWITCH_H_
  30      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
  31      =1  
  32      =1  #define CommandClassBinarySwitchVersionGet() SWITCH_BINARY_VERSION
  33      =1  
  34      =1  /**
  35      =1   * The value can be either 0x00 (off/disable) or 0xFF (on/enable). The values from
  36      =1   * 1 to 99 (0x01 to 0x63) MUST be mapped to 0xFF upon receipt of the Command in the
  37      =1   * device. All other values are reserved and MUST be ignored by the receiving device.
  38      =1   */
  39      =1  
  40      =1  received_frame_status_t
  41      =1  handleCommandClassAllSwitch(
  42      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  43      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  44      =1    BYTE cmdLength);
  45      =1    
  46      =1  void CommandClassAllSwitchOn(
  47      =1    uint8_t val,
  48      =1    uint8_t endpoint);
  49      =1    
  50      =1  
  51      =1  void CommandClassAllSwitchOff(
  52      =1    uint8_t val,
  53      =1    uint8_t endpoint);
  54      =1    
  55      =1    
  56      =1  extern void handleApplAllSwitchSet(
  57      =1    CMD_CLASS_BIN_SW_VAL val,
  58      =1    uint8_t endpoint);  
  59      =1  
  60      =1    
  83          #include <CommandClassMeter.h>
   1      =1  /***************************************************************************
   2      =1  *
   3      =1  * Copyright (c) 2001-2011
   4      =1  * Sigma Designs, Inc.
   5      =1  * All Rights Reserved
   6      =1  *
   7      =1  *---------------------------------------------------------------------------
   8      =1  *
   9      =1  * Description: Command Class All Switch Handle 
  10      =1  *
  11      =1  * Author:
  12      =1  *
  13      =1  * Last Changed By:  $Author:  NgocNguyen
  14      =1  * Revision:         $Revision:  $
  15      =1  * Last Changed:     $Date:  $
  16      =1  *
  17      =1  
  18      =1  
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 892 

  19      =1  /****************************************************************************/
  20      =1  /*                              INCLUDE FILES                               */
  21      =1  /****************************************************************************/
  22      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  23      =1  #include <ZW_sysdefs.h>
   1      =2  /*******************************  ZW_SYSDEFS.H  *****************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Z-Wave, the wireless lauguage.
  11      =2   *
  12      =2   *              Copyright (c) 2001
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Z-Wave system defines
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 893 

  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: tro $
  29      =2   * Revision:         $Revision: 23873 $
  30      =2   * Last Changed:     $Date: 2012-12-10 10:47:43 +0100 (ma, 10 dec 2012) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_SYSDEFS_H_
  24      =1  #include <ZW_pindefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: In/Out definitions Z-Wave Single Chips
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: efh $
  14      =2   * Revision:         $Revision: 23305 $
  15      =2   * Last Changed:     $Date: 2012-09-04 08:36:50 +0200 (ti, 04 sep 2012) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_PINDEFS_H_
 785      =2  
  25      =1  #include <ZW_evaldefs.h>
   1      =2  /****************************************************************************
   2      =2   *
   3      =2   * Copyright (c) 2001-2011
   4      =2   * Sigma Designs, Inc.
   5      =2   * All Rights Reserved
   6      =2   *
   7      =2   *---------------------------------------------------------------------------
   8      =2   *
   9      =2   * Description: IO definitions for the Z-Wave Evaluation board
  10      =2   *
  11      =2   * Author:   Ivar Jeppesen
  12      =2   *
  13      =2   * Last Changed By:  $Author: tro $
  14      =2   * Revision:         $Revision: 25909 $
  15      =2   * Last Changed:     $Date: 2013-05-29 14:49:43 +0200 (on, 29 maj 2013) $
  16      =2   *
  17      =2   ****************************************************************************/
  18      =2  #ifndef _ZW_EVALDEFS_H_
  26      =1  #include <ZW_classcmd.h>
   1      =2  // Generated on: 04.08.2017 15:17:23
   2      =2  /*******************************  ZW_classcmd.h  *******************************
   3      =2   *
   4      =2   * Copyright (c) 2001-2016
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   *
   8      =2   *---------------------------------------------------------------------------
   9      =2   *
  10      =2   * Description: Device and command class types and definitions.
  11      =2   *
  12      =2   *              Be aware that temporary types and definitions can be present
  13      =2   *              in this header file. Only the types and definitions found in
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 894 

  14      =2   *              the latest version of the Z-Wave Device Class Specification
  15      =2   *              (doc. nr. 9031002xx) is valid.
  16      =2   *
  17      =2   * Author: JÑrgen Franck
  18      =2   *
  19      =2   * Last Changed By:  $Author: sro $
  20      =2   * Revision:         $Revision: 35619 $
  21      =2   * Last Changed:     $Date: 2017-08-04 15:18:59 +0300 (ÐÑ, 04 Ð¡ÐµÑ 2017) $
  22      =2   *
  23      =2   ****************************************************************************/
  24      =2  #ifndef _ZW_CLASSCMD_H_
  27      =1  #include <CommandClass.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Common types and definitions for all command classes.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef PRODUCTPLUS_APPLICATIONCOMMANDHANDLERS_COMMANDCLASS_H_
  28      =1  #include <ZW_TransportEndpoint.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Transport layer for Multi Channel endpoint functionality.
   4      =2   * @copyright Copyright (c) 2001-2017
   5      =2   * Sigma Designs, Inc.
   6      =2   * All Rights Reserved
   7      =2   */
   8      =2  
   9      =2  #ifndef _ZW_TRANSPORTENDPOINT_H_
 384      =2  
 385      =2  
  29      =1  #include <agi.h>
   1      =2  /**
   2      =2   * @file
   3      =2   * Helper module for Command Class Association Group Information.
   4      =2   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =2   */
   6      =2  
   7      =2  #ifndef _AGI_H_
  30      =1  
  31      =1  
  32      =1  
  33      =1  
  34      =1  /**
  35      =1   * The value can be either 0x00 (off/disable) or 0xFF (on/enable). The values from
  36      =1   * 1 to 99 (0x01 to 0x63) MUST be mapped to 0xFF upon receipt of the Command in the
  37      =1   * device. All other values are reserved and MUST be ignored by the receiving device.
  38      =1   */
  39      =1  
  40      =1  received_frame_status_t
  41      =1  handleCommandClassMeter(
  42      =1    RECEIVE_OPTIONS_TYPE_EX *rxOpt,
  43      =1    ZW_APPLICATION_TX_BUFFER *pCmd,
  44      =1    BYTE cmdLength);
  45      =1   
  46      =1  BYTE getMeter(void);
  47      =1  void MeterReset(void);
  48      =1  
  49      =1    /*
  50      =1  void CommandClassAllSwitchOn(
  51      =1    uint8_t val,
  52      =1    uint8_t endpoint);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 895 

  53      =1    
  54      =1  
  55      =1  void CommandClassAllSwitchOff(
  56      =1    uint8_t val,
  57      =1    uint8_t endpoint);
  58      =1    
  59      =1    
  60      =1  extern void handleApplAllSwitchSet(
  61      =1    CMD_CLASS_BIN_SW_VAL val,
  62      =1    uint8_t endpoint);  
  63      =1  
  64      =1    
  65      =1    */
  84          
  85          #include <key.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * This key driver offers an interface for easily setting up key actions.
   4      =1   *
   5      =1   * The driver assumes a hardware design similar to the one on ZDP03A.
   6      =1   *
   7      =1   * Here's what this module does and does not:
   8      =1   * - It does configure a given set of keys to trigger on certain events.
   9      =1   * - It does offer the opportunity to add further keys than the six represented
  10      =1   *   on the Z-Wave ZDP03A development platform.
  11      =1   * - It does offer the opportunity to add further key events if you're willing
  12      =1   *   to code a little.
  13      =1   * - It does NOT trigger on several keys simultaneously due to the chip and
  14      =1   *   hardware design.
  15      =1   *
  16      =1   * Ideas for future version:
  17      =1   * - Configure repeat/non-repeat for hold event.
  18      =1   * - Configure hold time.
  19      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
  20      =1   */
  21      =1  
  22      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 896 

  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
  23      =1  
  24      =1  /**
  25      =1   * Holds the key names and the max number of keys. Add more keys before
  26      =1   * NUMBER_OF_KEYS, if necessary.
  27      =1   */
  28      =1  
  29      =1  
  30      =1  /**
  31      =1   * Holds the key events and the number of events. Add more events before
  32      =1   * NUMBER_OF_KEY_EVENTS, if necessary.
  33      =1   */
  34      =1  typedef enum
  35      =1  {
  36      =1    KEY_HELD,
  37      =1      KEY_IDLE,
  38      =1    KEY_DOUBLE,
  39      =1    KEY_PREDOUBLE,
  40      =1    KEY_LEARNMODE,
  41      =1    KEY_FACTORYNEW_RESET,
  42      =1    KEY_READY_FOR_LEARNMODE,
  43      =1    KEY_READY_FOR_FACTORYNEW_RESET,
  44      =1    KEY_PRE_LEARNMODE,
  45      =1    KEY_PRE_FACTORYNEW
  46      =1  }
  47      =1  P_KEY_EVENT_T;
  48      =1  
  49      =1   
  50      =1  //void KeyDriverRegisterCallback(KEY_NAME_T keyName, BYTE keyPin, BYTE keyEvents, VOID_CALLBACKFUNC(pCallb
             -ack)(KEY_NAME_T keyName, KEY_EVENT_T keyEvent, BYTE holdCount));
  51      =1  
  52      =1  /**
  53      =1   * @brief Initializes the key driver.
  54      =1   */
  55      =1  BOOL Valvekeyinit(void);
  56      =1  
  86          #include <interrupt_driver.h>
   1      =1  /**
   2      =1   * @file
   3      =1   * Generic interrupt driver making it possible to register a callback function on edge detection.
   4      =1   * @copyright Copyright (c) 2001-2017, Sigma Designs Inc., All Rights Reserved
   5      =1   */
   6      =1  
   7      =1  #ifndef INTERRUPT_H_
   8      =1  #define INTERRUPT_H_
   9      =1  
  10      =1  typedef enum
  11      =1  {
  12      =1    ZW_EXT_INT0,
  13      =1    ZW_EXT_INT1,
  14      =1    ZW_NUMBER_OF_EXT_INT
  15      =1  }
  16      =1  ZW_EXT_INT_NAME_T;
  17      =1  
  18      =1  /**
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 897 

  19      =1   * @brief Initializes the interrupt driver.
  20      =1   * @param[in] id of type ZW_EXT_INT_NAME_T
  21      =1   * @param[in,out] pEdgeCallbackLocal Pointer to function to call on an edge detection.
  22      =1   * @return TRUE if initialized, FALSE otherwise.
  23      =1   */
  24      =1  BOOL
  25      =1  InterruptDriverInit(ZW_EXT_INT_NAME_T id, VOID_CALLBACKFUNC(pEdgeCallbackLocal)(BYTE));
  26      =1  
  27      =1  #endif /* INTERRUPT_H_ */
  87          #include <Cat25256.h>
   1      =1  //#include <ZW_spi_api.h>
   2      =1  #include <ZW_typedefs.h>
   1      =2  /*******************************  ZW_typedefs.h  *******************************
   2      =2   *           #######
   3      =2   *           ##  ##
   4      =2   *           #  ##    ####   #####    #####  ##  ##   #####
   5      =2   *             ##    ##  ##  ##  ##  ##      ##  ##  ##
   6      =2   *            ##  #  ######  ##  ##   ####   ##  ##   ####
   7      =2   *           ##  ##  ##      ##  ##      ##   #####      ##
   8      =2   *          #######   ####   ##  ##  #####       ##  #####
   9      =2   *                                           #####
  10      =2   *          Products that speak Z-Wave work together better
  11      =2   *
  12      =2   *              Copyright (c) 2008
  13      =2   *              Zensys A/S
  14      =2   *              Denmark
  15      =2   *
  16      =2   *              All Rights Reserved
  17      =2   *
  18      =2   *    This source file is subject to the terms and conditions of the
  19      =2   *    Zensys Software License Agreement which restricts the manner
  20      =2   *    in which it may be used.
  21      =2   *
  22      =2   *---------------------------------------------------------------------------
  23      =2   *
  24      =2   * Description: Module description
  25      =2   *
  26      =2   * Author:   Ivar Jeppesen
  27      =2   *
  28      =2   * Last Changed By:  $Author: efh $
  29      =2   * Revision:         $Revision: 29359 $
  30      =2   * Last Changed:     $Date: 2014-07-11 11:13:33 +0200 (fr, 11 jul 2014) $
  31      =2   *
  32      =2   ****************************************************************************/
  33      =2  #ifndef _ZW_TYPEDEFS_H_
   3      =1  
   4      =1  #define WREN 0x06  // enable write ope
   5      =1  #define WRDI 0x04 // disable write ope
   6      =1  #define RDSR 0x05 // read stt reg
   7      =1  #define WRSR 0x01 // write stt reg
   8      =1  #define READ 0x03 // read 
   9      =1  #define WRITE 0x02  // write 
  10      =1  
  11      =1  void Cat25256_init(void);
  12      =1  BYTE Cat25256_read(BYTE address1, BYTE Address2);
  13      =1  void Cat25256_write(BYTE address1, BYTE Address2, BYTE Data);
  14      =1  void Cat25256_reset(void);
  15      =1  BYTE reg_status(void);
  16      =1  void Cat25256_write_reg(BYTE reg_value);
  88          
  89          
  90          
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 898 

  91          /****************************************************************************/
  92          /*                      PRIVATE TYPES and DEFINITIONS                       */
  93          /****************************************************************************/
  94          /**
  95           * @def ZW_DEBUG_MYPRODUCT_SEND_BYTE(data)
  96           * Transmits a given byte to the debug port.
  97           * @def ZW_DEBUG_MYPRODUCT_SEND_STR(STR)
  98           * Transmits a given string to the debug port.
  99           * @def ZW_DEBUG_MYPRODUCT_SEND_NUM(data)
 100           * Transmits a given number to the debug port.
 101           * @def ZW_DEBUG_MYPRODUCT_SEND_WORD_NUM(data)
 102           * Transmits a given WORD number to the debug port.
 103           * @def ZW_DEBUG_MYPRODUCT_SEND_NL()
 104           * Transmits a newline to the debug port.
 105           */
 106          #ifdef ZW_DEBUG_APP
 113          #define ZW_DEBUG_MYPRODUCT_SEND_BYTE(data)
 114          #define ZW_DEBUG_MYPRODUCT_SEND_STR(STR)
 115          #define ZW_DEBUG_MYPRODUCT_SEND_NUM(data)
 116          #define ZW_DEBUG_MYPRODUCT_SEND_WORD_NUM(data)
 117          #define ZW_DEBUG_MYPRODUCT_SEND_NL()
 118          #endif
 119          
 120          #define Sw_inex 0x11
 121          #define led_in  0x04   // GPIO PIN 5
 122          #define led_ex  0x36    // GPIO PIN 13
 123          #define led_er  0x10    // GPIO PIN 4
 124          
 125          #define spi_cs  0x37
 126          
 127          
 128          
 129          /**
 130           * Application events for AppStateManager(..)
 131           */
 132          typedef enum _EVENT_APP_
 133          {
 134            EVENT_EMPTY = DEFINE_EVENT_APP_NBR,
 135            EVENT_APP_INIT,
 136            EVENT_APP_REFRESH_MMI,
 137            EVENT_APP_NEXT_EVENT_JOB,
 138            EVENT_APP_FINISH_EVENT_JOB,
 139            EVENT_APP_GET_NODELIST,
 140            EVENT_APP_SEND_OVERLOAD_NOTIFICATION,
 141            EVENT_APP_SMARTSTART_IN_PROGRESS,
 142            FACTORYNEW_RESET
 143          } EVENT_APP;
 144          
 145          /**
 146           * Application states. Function AppStateManager(..) includes the state
 147           * event machine.
 148           */
 149          typedef enum _STATE_APP_
 150          {
 151            STATE_APP_STARTUP,
 152            STATE_APP_IDLE,
 153            STATE_APP_LEARN_MODE,
 154            STATE_APP_WATCHDOG_RESET,
 155            STATE_APP_OTA,
 156            STATE_APP_TRANSMIT_DATA
 157          } STATE_APP;
 158          
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 899 

 159          
 160          /****************************************************************************/
 161          /*                              PRIVATE DATA                                */
 162          /****************************************************************************/
 163          
 164          /**
 165           * Unsecure node information list.
 166           * Be sure Command classes are not duplicated in both lists.
 167           * CHANGE THIS - Add all supported non-secure command classes here
 168           **/
 169          static code BYTE cmdClassListNonSecureNotIncluded[] =
 170          {
 171            COMMAND_CLASS_ZWAVEPLUS_INFO_V2,
 172            COMMAND_CLASS_SWITCH_BINARY,
 173            COMMAND_CLASS_CONFIGURATION,
 174            COMMAND_CLASS_ASSOCIATION,
 175            COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V3,
 176            COMMAND_CLASS_MULTI_CHANNEL_V4,
 177            COMMAND_CLASS_ASSOCIATION_GRP_INFO,
 178            COMMAND_CLASS_TRANSPORT_SERVICE_V2,
 179            COMMAND_CLASS_NOTIFICATION_V3,
 180            COMMAND_CLASS_VERSION_V2,
 181            COMMAND_CLASS_MANUFACTURER_SPECIFIC,
 182            COMMAND_CLASS_DEVICE_RESET_LOCALLY,
 183            COMMAND_CLASS_POWERLEVEL,
 184            COMMAND_CLASS_SECURITY,
 185            COMMAND_CLASS_SECURITY_2,
 186            COMMAND_CLASS_SUPERVISION,
 187            COMMAND_CLASS_CONFIGURATION,
 188            COMMAND_CLASS_SWITCH_ALL,
 189            COMMAND_CLASS_METER
 190          #ifdef BOOTLOADER_ENABLED
 191            ,COMMAND_CLASS_FIRMWARE_UPDATE_MD_V2
 192          #endif
 193          };
 194          
 195          /**
 196           * Unsecure node information list Secure included.
 197           * Be sure Command classes are not duplicated in both lists.
 198           * CHANGE THIS - Add all supported non-secure command classes here
 199           **/
 200          static code BYTE cmdClassListNonSecureIncludedSecure[] =
 201          {
 202            COMMAND_CLASS_ZWAVEPLUS_INFO,
 203            COMMAND_CLASS_SUPERVISION,
 204            COMMAND_CLASS_TRANSPORT_SERVICE_V2,
 205            COMMAND_CLASS_SECURITY,
 206            COMMAND_CLASS_SECURITY_2
 207          };
 208          
 209          
 210          /**
 211           * Secure node inforamtion list.
 212           * Be sure Command classes are not duplicated in both lists.
 213           * CHANGE THIS - Add all supported secure command classes here
 214           **/
 215          static code BYTE cmdClassListSecure[] =
 216          {
 217            COMMAND_CLASS_NOTIFICATION_V3,
 218            COMMAND_CLASS_VERSION,
 219            COMMAND_CLASS_SWITCH_BINARY,
 220            COMMAND_CLASS_ASSOCIATION,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 900 

 221            COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2,
 222            COMMAND_CLASS_ASSOCIATION_GRP_INFO,
 223            COMMAND_CLASS_MANUFACTURER_SPECIFIC,
 224            COMMAND_CLASS_DEVICE_RESET_LOCALLY,
 225            COMMAND_CLASS_MULTI_CHANNEL_V3,
 226            COMMAND_CLASS_CONFIGURATION,
 227            COMMAND_CLASS_SWITCH_ALL,
 228            COMMAND_CLASS_METER
 229          #ifdef BOOTLOADER_ENABLED
 230            ,COMMAND_CLASS_FIRMWARE_UPDATE_MD_V2
 231          #endif
 232          };
 233          
 234          
 235          /**
 236           * Structure includes application node information list's and device type.
 237           */
 238          APP_NODE_INFORMATION m_AppNIF =
 239          {
 240            cmdClassListNonSecureNotIncluded, sizeof(cmdClassListNonSecureNotIncluded),
 241            cmdClassListNonSecureIncludedSecure, sizeof(cmdClassListNonSecureIncludedSecure),
 242            cmdClassListSecure, sizeof(cmdClassListSecure),
 243            DEVICE_OPTIONS_MASK, GENERIC_TYPE, SPECIFIC_TYPE
 244          };
 245          
 246          static code BYTE cmdClassListNonSecureIncludedNonSecure_Endpoints[] =
 247          {
 248            COMMAND_CLASS_ZWAVEPLUS_INFO,
 249            COMMAND_CLASS_SWITCH_BINARY,
 250            COMMAND_CLASS_BASIC,
 251            COMMAND_CLASS_ASSOCIATION,
 252            COMMAND_CLASS_ASSOCIATION_GRP_INFO,
 253            COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2,
 254            COMMAND_CLASS_MULTI_CHANNEL_V3,
 255            COMMAND_CLASS_CONFIGURATION,
 256            COMMAND_CLASS_SWITCH_ALL
 257          
 258          };
 259          
 260          static code BYTE cmdClassListNonSecureIncludedSecure_Endpoints[] =
 261          {
 262            COMMAND_CLASS_ZWAVEPLUS_INFO,
 263            COMMAND_CLASS_SUPERVISION,
 264            COMMAND_CLASS_SECURITY,
 265            COMMAND_CLASS_SECURITY_2
 266          };
 267          
 268          static code BYTE cmdClassListSecure_Endpoints[] =
 269          {
 270            COMMAND_CLASS_SWITCH_BINARY,
 271            COMMAND_CLASS_ASSOCIATION,
 272            COMMAND_CLASS_ASSOCIATION_GRP_INFO,
 273            COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2,
 274            COMMAND_CLASS_MULTI_CHANNEL_V3,
 275            COMMAND_CLASS_CONFIGURATION,
 276            COMMAND_CLASS_SWITCH_ALL
 277          };
 278          
 279          static code BYTE cmdClassListNonSecureIncludedNonSecure_Sensor[] =
 280          {
 281            COMMAND_CLASS_NOTIFICATION_V3,
 282            COMMAND_CLASS_ZWAVEPLUS_INFO,
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 901 

 283            COMMAND_CLASS_NOTIFICATION_V3,
 284            COMMAND_CLASS_SUPERVISION,
 285            COMMAND_CLASS_BASIC,
 286            COMMAND_CLASS_ASSOCIATION,
 287            COMMAND_CLASS_ASSOCIATION_GRP_INFO,
 288            COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2,
 289            COMMAND_CLASS_MULTI_CHANNEL_V3,
 290            COMMAND_CLASS_CONFIGURATION
 291          };
 292          
 293          static code BYTE cmdClassListNonSecureIncludedSecure_Sensor[] =
 294          {
 295            COMMAND_CLASS_ZWAVEPLUS_INFO,
 296            COMMAND_CLASS_SUPERVISION,
 297            COMMAND_CLASS_SECURITY,
 298            COMMAND_CLASS_SECURITY_2
 299          };
 300          
 301          static code BYTE cmdClassListSecure_Sensor[] =
 302          {
 303            COMMAND_CLASS_NOTIFICATION_V3,
 304            COMMAND_CLASS_ASSOCIATION,
 305            COMMAND_CLASS_ASSOCIATION_GRP_INFO,
 306            COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2,
 307            COMMAND_CLASS_MULTI_CHANNEL_V3,
 308            COMMAND_CLASS_CONFIGURATION
 309          };
 310          
 311          
 312          static EP_NIF endpointsNIF[NUMBER_OF_ENDPOINTS] = 
 313          {
 314            /* EndPoint 1 */
 315            { GENERIC_TYPE_SWITCH_BINARY, SPECIFIC_TYPE_POWER_SWITCH_BINARY,
 316              {
 317            {cmdClassListNonSecureIncludedNonSecure_Endpoints, sizeof(cmdClassListNonSecureIncludedNonSecure_Endpoint
             -s)},
 318            {{cmdClassListNonSecureIncludedSecure_Endpoints, sizeof(cmdClassListNonSecureIncludedSecure_Endpoints)},
 319            {cmdClassListSecure_Endpoints, sizeof(cmdClassListSecure_Endpoints)}}
 320              }
 321            },
 322            /* EndPoint 2 */
 323            { GENERIC_TYPE_SENSOR_NOTIFICATION, SPECIFIC_TYPE_NOTIFICATION_SENSOR,
 324              {
 325            {cmdClassListNonSecureIncludedNonSecure_Endpoints, sizeof(cmdClassListNonSecureIncludedNonSecure_Endpoint
             -s)},
 326            {{cmdClassListNonSecureIncludedSecure_Endpoints, sizeof(cmdClassListNonSecureIncludedSecure_Endpoints)},
 327            {cmdClassListSecure_Endpoints, sizeof(cmdClassListSecure_Endpoints)}}
 328              }
 329            },
 330            /* Endpoitn 3 */
 331            { GENERIC_TYPE_SENSOR_NOTIFICATION, SPECIFIC_TYPE_NOTIFICATION_SENSOR,
 332              {
 333            {cmdClassListNonSecureIncludedNonSecure_Sensor, sizeof(cmdClassListNonSecureIncludedNonSecure_Sensor)},
 334            {{cmdClassListNonSecureIncludedSecure_Sensor, sizeof(cmdClassListNonSecureIncludedSecure_Sensor)},
 335            {cmdClassListSecure_Sensor, sizeof(cmdClassListSecure_Sensor)}}
 336              }
 337            }
 338          };
 339          
 340          
 341          EP_FUNCTIONALITY_DATA endPointFunctionality =
 342          {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 902 

 343            NUMBER_OF_INDIVIDUAL_ENDPOINTS,     /**< nbrIndividualEndpoints 7 bit*/
 344            RES_ZERO,                           /**< resIndZeorBit 1 bit*/
 345            NUMBER_OF_AGGREGATED_ENDPOINTS,     /**< nbrAggregatedEndpoints 7 bit*/
 346            RES_ZERO,                           /**< resAggZeorBit 1 bit*/
 347            RES_ZERO,                           /**< resZero 6 bit*/
 348            ENDPOINT_IDENTICAL_DEVICE_CLASS_NO,/**< identical 1 bit*/
 349            ENDPOINT_DYNAMIC_NO                /**< dynamic 1 bit*/
 350          };
 351          
 352          /**
 353           * AGI lifeline string
 354           */
 355          const char GroupName[]   = "Lifeline";
 356          
 357          CMD_CLASS_GRP  agiTableLifeLine[] =         {AGITABLE_LIFELINE_GROUP};
 358          CMD_CLASS_GRP  agiTableLifeLineEndPoints[] = {AGITABLE_LIFELINE_GROUP_ENDPOINTS_VALVE};
 359          CMD_CLASS_GRP  agiTableLifeLineEndpoints_Sensor[] = {AGITABLE_LIFELINE_GROUP_ENDPOINTS_SENSOR};
 360          ST_ENDPOINT_ICONS ZWavePlusEndpointIcons[] = {ENDPOINT_ICONS};
 361          
 362          AGI_GROUP agiTableRootDeviceGroups[] =        {AGITABLE_ROOTDEVICE_GROUPS};
 363          AGI_GROUP agiTableEndpoint1Groups[] = {AGITABLE_ENDPOINT_1_GROUPS};
 364          AGI_GROUP agiTableEndpoint2Groups[] = {AGITABLE_ENDPOINT_2_GROUPS};
 365          AGI_GROUP agiTableEndpoint3Groups[] = {AGITABLE_ENDPOINT_3_GROUPS};
 366          
 367          
 368          //static const AGI_PROFILE lifelineProfile = {
 369          //  ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL,
 370          //  ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_LIFELINE
 371          //};
 372          
 373          //static const AGI_PROFILE lifelineProfileEndPoint1 = {
 374          //  ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_V3,
 375          //  ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY01_V3
 376          //};
 377          
 378          //static const AGI_PROFILE lifelineProfileEndPoint2 = {
 379          //  ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_V3,
 380          //  ASSOCIATION_GROUP_INFO_REPORT_PROFILE_CONTROL_KEY02_V3
 381          //};
 382          
 383          static BYTE Valve_state = 0x00;
 384          static BYTE Flow_state  = 0x00;
 385          static BYTE Leak_state  = 0x00;
 386          static BYTE Flow_value  = 0x00;
 387          ASSOCIATION_ROOT_GROUP_MAPPING rootGroupMapping[] = { ASSOCIATION_ROOT_GROUP_MAPPING_CONFIG};
 388          extern BOOL initstatus = FALSE;
 389          KEY_EVENT_T Button_state_check;
 390          BYTE supportedEvents = 0x00;
 391          BYTE Config_Value ;
 392          BYTE Stt_Value;
 393          BYTE Meter_Value = 0x50;
 394          BYTE Meter_config ;
 395          BYTE Meter_scale_value;
 396          
 397          
 398          /**
 399           * Application node ID
 400           */
 401          BYTE myNodeID = 0;
 402          
 403          /**
 404           * Application state-machine state.
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 903 

 405           */
 406          static STATE_APP currentState = STATE_APP_IDLE;
 407          
 408          /**
 409           * Parameter is used to save wakeup reason after ApplicationInitHW(..)
 410           */
 411          SW_WAKEUP wakeupReason;
 412          
 413          
 414          /**
 415           * Use to tell if the host OTA required auto rebooting or not
 416           */
 417          BOOL userReboot = FALSE;
 418          
 419          #ifdef APP_SUPPORTS_CLIENT_SIDE_AUTHENTICATION
 422          
 423          /****************************************************************************/
 424          /*                              EXPORTED DATA                               */
 425          /****************************************************************************/
 426          
 427          // No exported data.
 428          
 429            
 430          
 431          /****************************************************************************/
 432          /*                            PRIVATE FUNCTIONS                             */
 433          /****************************************************************************/
 434          
 435          void ZCB_DeviceResetLocallyDone(TRANSMISSION_RESULT * pTransmissionResult);
 436          void ZCB_ResetDelay(void);
 437          STATE_APP GetAppState();
 438          void AppStateManager( EVENT_APP event);
 439          void ChangeState( STATE_APP newState);
 440          #ifdef BOOTLOADER_ENABLED
 441          void ZCB_OTAFinish(OTA_STATUS otaStatus);
 442          BOOL ZCB_OTAStart(void);
 443          void ZCB_OTAWrite(BYTE *pData, BYTE len);
 444          #endif
 445          
 446          void SetDefaultConfiguration(void);
 447          
 448          void RefreshMMI(void);
 449          
 450          
 451          /* **************** PRIVATE FUNCTIONS *******************/
 452          
 453          void InexInfo(void);
 454          void ReportState(BYTE endpoint, BYTE state);
 455          void InexPoll(void);
 456          void UARTPoll(void);
 457          void LoadConfiguration(ZW_NVM_STATUS nvmStatus);
 458          void ZCB_CommandClassSupervisionGetReceived(SUPERVISION_GET_RECEIVED_HANDLER_ARGS * pArgs);
 459          void learnmode_reset(void);
 460          void Blink_light(void);
 461          P_KEY_EVENT_T GetButtonstatus(void);
 462          void Clear_Button_status(void);
 463          void ZCB_JobStatus(TRANSMISSION_RESULT * pTransmissionResult);
 464          
 465          void Notificationrp(BYTE state);
 466          
 467          void ReportState2(BYTE endpoint, BYTE state);
 468          void ReportState3(BYTE endpoint, BYTE state);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 904 

 469          BOOL Delay_Handle();
 470          
 471          
 472          
 473          
 474          
 475            
 476          /**
 477           * @brief See description for function prototype in ZW_basis_api.h.
 478           */
 479          void
 480          ApplicationRfNotify(BYTE rfState)
 481          {
 482   1        UNUSED(rfState);
 483   1      }
 484          
 485          
 486          /**
 487           * @brief See description for function prototype in ZW_basis_api.h.
 488           */
 489          BYTE
 490          ApplicationInitHW(SW_WAKEUP bWakeupReason)
 491          {
 492   1        wakeupReason = bWakeupReason;
 493   1      
 494   1          //ZDP03A_InitHW(ZCB_eventSchedulerEventAdd);
 495   1        
 496   1        
 497   1        
 498   1        ConInit(96);
 499   1        SetPinOut(led_in);
*** WARNING C259 IN LINE 499 OF SwitchOnOff.c: 'parameter 1': different enumeration types
 500   1        SetPinOut(led_ex);
*** WARNING C259 IN LINE 500 OF SwitchOnOff.c: 'parameter 1': different enumeration types
 501   1        SetPinOut(led_er);
 502   1        SetPinIn(Sw_inex, TRUE);
*** WARNING C259 IN LINE 502 OF SwitchOnOff.c: 'parameter 1': different enumeration types
 503   1        
 504   1        gpio_SetPin(led_in, TRUE);
 505   1        gpio_SetPin(led_ex, TRUE);
 506   1        gpio_SetPin(led_er, TRUE);
 507   1        
 508   1        
 509   1        //Cat25256_init();
 510   1            
 511   1      
 512   1        
 513   1      //  ZW_SPI1_init(SPI_SPEED_8_MHZ|SPI_MODE_0|SPI_MSB_FIRST);
 514   1      //  ZW_SPI1_enable(TRUE);
 515   1        
 516   1        
 517   1        
 518   1        Transport_OnApplicationInitHW(bWakeupReason);
 519   1      
 520   1        return(TRUE);
 521   1      }
 522          
 523          
 524          /**
 525           * @brief See description for function prototype in ZW_basis_api.h.
 526           */
 527          BYTE
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 905 

 528          ApplicationInitSW(ZW_NVM_STATUS nvmStatus)
 529          {
 530   1        BYTE application_node_type = DEVICE_OPTIONS_MASK;
 531   1      
 532   1        /* Init state machine*/
 533   1        currentState = STATE_APP_STARTUP;
 534   1        /* Do not reinitialize the UART if already initialized for ISD51 in ApplicationInitHW() */
 535   1        
 536   1        initstatus =  Valvekeyinit();
 537   1        ZW_SPI1_enable(TRUE);
 538   1        ZW_SPI1_init(SPI_SPEED_8_MHZ|SPI_MODE_0|SPI_MSB_FIRST);
 539   1        
 540   1        
 541   1      #ifndef ZW_ISD51_DEBUG
 542   1        ZW_DEBUG_INIT(1152);
 543   1      #endif
 544   1      
 545   1      
 546   1      
 547   1      #ifdef WATCHDOG_ENABLED
 550   1        
 551   1        
 552   1        ConInit(96);
 553   1        
 554   1        LoadConfiguration(nvmStatus);
 555   1        AssociationInitEndpointSupport(FALSE,
 556   1                                       rootGroupMapping,
 557   1                                       sizeof(rootGroupMapping)/sizeof(ASSOCIATION_ROOT_GROUP_MAPPING));
 558   1      
 559   1        /* Setup AGI group lists*/
 560   1        AGI_Init();
 561   1        AGI_LifeLineGroupSetup(agiTableLifeLine,
 564   1                               (sizeof(agiTableLifeLine)/sizeof(CMD_CLASS_GRP)),
 564   1                               NULL,
 564   1                               ENDPOINT_ROOT);
 565   1        AGI_LifeLineGroupSetup(agiTableLifeLineEndPoints,
 567   1                               (sizeof(agiTableLifeLine)/sizeof(CMD_CLASS_GRP)), 
 567   1                                 NULL, ENDPOINT_1);
 568   1        AGI_LifeLineGroupSetup(agiTableLifeLineEndPoints, 
 570   1                               (sizeof(agiTableLifeLine)/sizeof(CMD_CLASS_GRP)), 
 570   1                                 NULL, ENDPOINT_2);
 571   1        
 572   1        AGI_LifeLineGroupSetup(agiTableLifeLineEndPoints, 
 574   1                               (sizeof(agiTableLifeLine)/sizeof(CMD_CLASS_GRP)), 
 574   1                                 NULL, ENDPOINT_3);
 575   1        
 576   1      
 577   1      InitNotification();
 578   1        {
 579   2      //    AddNotification(&(agiTableEndpoint1Groups->profile),
 580   2      //                    NOTIFICATION_TYPE_POWER_MANAGEMENT,
 581   2      //                    &supportedEvents,
 582   2      //                    sizeof(supportedEvents),
 583   2      //                    FALSE,
 584   2      //                    ENDPOINT_1);
 585   2      
 586   2      //    AddNotification(&(agiTableEndpoint2Groups->profile),
 587   2      //                    NOTIFICATION_TYPE_POWER_MANAGEMENT,
 588   2      //                    &supportedEvents,
 589   2      //                    sizeof(supportedEvents),
 590   2      //                    FALSE,
 591   2      //                    ENDPOINT_2);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 906 

 592   2      
 593   2          AddNotification(&(agiTableEndpoint3Groups->profile),
 594   2                          NOTIFICATION_REPORT_WATER_V3,
 595   2                          &supportedEvents,
 596   2                          sizeof(supportedEvents),
 597   2                          FALSE,
 598   2                          ENDPOINT_3);
 599   2        }                        
 600   1                               
 601   1        CommandClassZWavePlusInfoInit(ZWavePlusEndpointIcons,
 602   1                                      sizeof(ZWavePlusEndpointIcons)/sizeof(ST_ENDPOINT_ICONS));
 603   1        CommandClassSupervisionInit(
 604   1            CC_SUPERVISION_STATUS_UPDATES_NOT_SUPPORTED,
 605   1            ZCB_CommandClassSupervisionGetReceived,
 606   1            NULL);
 607   1                               
 608   1                               
 609   1        /* Get this sensors identification on the network */
 610   1        MemoryGetID(NULL, &myNodeID);
 611   1      
 612   1        /* Initialize manufactory specific module */
 613   1        ManufacturerSpecificDeviceIDInit();
 614   1                               
 615   1                               
 616   1                               
 617   1      #ifdef BOOTLOADER_ENABLED
 618   1        /* Initialize OTA module */
 619   1          OtaInit( ZCB_OTAStart, NULL, ZCB_OTAFinish);
 620   1      #endif
 621   1      
 622   1        CC_Version_SetApplicationVersionInfo(APP_VERSION, APP_REVISION, APP_VERSION_PATCH, APP_BUILD_NUMBER);
 623   1      
 624   1       /*
 625   1         * Initialize Event Scheduler.
 626   1         */
 627   1        ZAF_eventSchedulerInit(AppStateManager);
 628   1      
 629   1        Transport_OnApplicationInitSW( &m_AppNIF);
 630   1         Transport_AddEndpointSupport( &endPointFunctionality, endpointsNIF, NUMBER_OF_ENDPOINTS);
 631   1        ZCB_eventSchedulerEventAdd(EVENT_APP_INIT);
 632   1      
 633   1        return(application_node_type);
 634   1      }
 635          
 636          
 637          /**
 638           * @brief See description for function prototype in ZW_basis_api.h.
 639           */
 640          void
 641          ApplicationTestPoll(void)
 642          {
 643   1      }
 644          
 645          
 646          
 647          /**
 648           * @brief See description for function prototype in ZW_basis_api.h.
 649           */
 650          E_APPLICATION_STATE ApplicationPoll(E_PROTOCOL_STATE bProtocolState)
 651          {
 652   1        static BOOL tmp = TRUE;
 653   1        static BYTE reg_stt;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 907 

 654   1        
 655   1        ZW_UART_COMMAND cmd;
 656   1        UNUSED(bProtocolState);
 657   1        
 658   1        ZCB_InterruptCallback();
*** WARNING C206 IN LINE 658 OF SwitchOnOff.c: 'ZCB_InterruptCallback': missing function-prototype
 659   1        
 660   1          InexInfo();
 661   1          UARTPoll();
 662   1        
 663   1          ZW_SPI1_tx_set(0x01);
 664   1          ZW_SPI1_tx_set(0x02);
 665   1          ZW_SPI1_tx_set(0x03);
 666   1        ZW_SPI1_tx_set(0x01);
 667   1          ZW_SPI1_tx_set(0x02);
 668   1          ZW_SPI1_tx_set(0x03);
 669   1          ZW_SPI1_tx_set(0xFF);
 670   1        
 671   1      
 672   1        TaskApplicationPoll();
 673   1      
 674   1        return E_APPLICATION_STATE_ACTIVE;
 675   1      }
 676          
 677          void InexInfo(void){
 678   1        static ZW_UART_COMMAND cmd;
 679   1          Button_state_check = GetButtonstatus();
 680   1        
 681   1        if(Button_state_check == KEY_LEARNMODE){
 682   2            ChangeState(STATE_APP_IDLE);        
 683   2            ZCB_eventSchedulerEventAdd(EVENT_SYSTEM_LEARNMODE_START);
 684   2            Clear_Button_status();
 685   2            Button_state_check = KEY_IDLE;
 686   2        }
 687   1        
 688   1        if(Button_state_check == KEY_FACTORYNEW_RESET){
 689   2            ChangeState(STATE_APP_IDLE);        
 690   2            ZCB_eventSchedulerEventAdd(FACTORYNEW_RESET);
 691   2            Clear_Button_status();
 692   2            Button_state_check = KEY_IDLE;
 693   2                cmd.zw_uartcommandset.length =4;
 694   2                cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
 695   2                cmd.zw_uartcommandset.type = ZW_VALVE_RESET;
 696   2                cmd.zw_uartcommandset.value1 = ZW_VALVE_RESET;
 697   2                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3); 
 698   2        }
 699   1        if(Button_state_check == KEY_IDLE)
 700   1          {
 701   2            if(myNodeID){
 702   3              gpio_SetPin(led_in, FALSE);
 703   3              gpio_SetPin(led_ex, TRUE);
 704   3              gpio_SetPin(led_er, TRUE);
 705   3            }
 706   2            else
 707   2            {
 708   3              gpio_SetPin(led_in, TRUE);
 709   3              gpio_SetPin(led_ex, FALSE);
 710   3              gpio_SetPin(led_er, TRUE);
 711   3            }
 712   2          }
 713   1      }
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 908 

 714          void UARTPoll(void)
 715          {
 716   1        ZW_UART_COMMAND cmd;
 717   1        BYTE cmdLength;
 718   1        BYTE bMyNodeID;
 719   1        
 720   1        if (ConUpdate(TRUE) == conFrameReceived)
 721   1        { 
 722   2          /* Get command length*/
 723   2          cmdLength = serBuf[0];
 724   2          /* Coppy The Command from serBuf to cmd*/ 
 725   2          __ZW_memcpy(cmdLength, &cmd.zw_uartcommand.length,(serBuf+2));
 726   2          /* Check the command*/
 727   2          switch(cmd.zw_uartcommand.cmd)
 728   2          {
 729   3            case COMMAND_VALVE:
 730   3              
 731   3              if(cmd.zw_uartcommandset.type == ZW_VALVE_SET)
 732   3              {
 733   4                if(cmd.zw_uartcommandset.value1 == ZW_VALVE_ON){
 734   5                  Valve_state = CMD_CLASS_BIN_OFF;   // with ha, off show on
 735   5                  ReportState(ENDPOINT_1, Valve_state);
 736   5                  ReportState2(ENDPOINT_2, Valve_state);
 737   5            //      ReportState3(ENDPOINT_2, Valve_state);
 738   5                  
 739   5            //      ReportState(ENDPOINT_ROOT, Valve_state);
 740   5                  MemoryPutByte((WORD)&Valve_state_far, Valve_state);
 741   5                }
 742   4                
 743   4                if(cmd.zw_uartcommandset.value1 == ZW_VALVE_OFF){
 744   5                  
 745   5                  Valve_state = CMD_CLASS_BIN_ON; // with ha, on show off
 746   5                  ReportState(ENDPOINT_1, Valve_state);
 747   5                  ReportState2(ENDPOINT_2, Valve_state);
 748   5            //      ReportState3(ENDPOINT_2, Valve_state);
 749   5            //      ReportState(ENDPOINT_ROOT, Valve_state);
 750   5                  MemoryPutByte((WORD)&Valve_state_far, Valve_state);
 751   5                }
 752   4              }
 753   3              break;
 754   3              
 755   3            case COMMAND_LEAK:
 756   3              if(cmd.zw_uartcommandset.value1 == ZW_LEAK)
 757   3                {
 758   4                  Leak_state = CMD_CLASS_BIN_OFF;
 759   4                  Flow_state = CMD_CLASS_BIN_OFF;
 760   4                  MemoryPutByte((WORD)&Leak_state_far, Leak_state);
 761   4                  //MemoryPutByte((WORD)&Flow_state_far, Flow_state);
 762   4                  ReportState(ENDPOINT_2, Leak_state);
 763   4      //            ReportState(ENDPOINT_3, Flow_state);
 764   4                  Notificationrp(Leak_state);
 765   4                }
 766   3                if(cmd.zw_uartcommandset.value1 == ZW_NON_LEAK){
 767   4                  Leak_state = CMD_CLASS_BIN_ON;
 768   4                  Flow_state = CMD_CLASS_BIN_ON;
 769   4                  MemoryPutByte((WORD)&Leak_state_far, Leak_state);
 770   4                  //MemoryPutByte((WORD)&Flow_state_far, Flow_state);
 771   4                  ReportState(ENDPOINT_2, Leak_state);
 772   4                  Notificationrp(Leak_state);
 773   4      //            ReportState(ENDPOINT_3, Flow_state);
 774   4                }
 775   3              break;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 909 

 776   3            
 777   3            case COMMAND_METER:
 778   3              if(cmd.zw_uartcommandset.type == ZW_METER_REPORT){
 779   4                Meter_Value = cmd.zw_uartcommandset.value1 ;
 780   4              }
 781   3              break;
 782   3              
 783   3          }
 784   2        }
 785   1      }
 786          
 787          received_frame_status_t
 788          Transport_ApplicationCommandHandlerEx(
 789            RECEIVE_OPTIONS_TYPE_EX *rxOpt,
 790            ZW_APPLICATION_TX_BUFFER *pCmd,
 791            BYTE cmdLength)
 792          {
 793   1        received_frame_status_t frame_status = RECEIVED_FRAME_STATUS_NO_SUPPORT;
 794   1        /* Call command class handlers */
 795   1        switch (pCmd->ZW_Common.cmdClass)
 796   1        {
 797   2          case COMMAND_CLASS_VERSION:
 798   2            frame_status = handleCommandClassVersion(rxOpt, pCmd, cmdLength);
 799   2            break;
 800   2      
 801   2      #ifdef BOOTLOADER_ENABLED
 802   2          case COMMAND_CLASS_FIRMWARE_UPDATE_MD_V2:
 803   2            frame_status = handleCommandClassFWUpdate(rxOpt, pCmd, cmdLength);
 804   2            break;
 805   2      #endif
 806   2      
 807   2          case COMMAND_CLASS_ASSOCIATION_GRP_INFO:
 808   2            frame_status = CC_AGI_handler( rxOpt, pCmd, cmdLength);
 809   2            break;
 810   2      
 811   2          case COMMAND_CLASS_ASSOCIATION:
 812   2            frame_status = handleCommandClassAssociation(rxOpt, pCmd, cmdLength);
 813   2            break;
 814   2      
 815   2          case COMMAND_CLASS_MANUFACTURER_SPECIFIC:
 816   2            frame_status = handleCommandClassManufacturerSpecific(rxOpt, pCmd, cmdLength);
 817   2            break;
 818   2      
 819   2          case COMMAND_CLASS_ZWAVEPLUS_INFO:
 820   2            frame_status = handleCommandClassZWavePlusInfo(rxOpt, pCmd, cmdLength);
 821   2            break;
 822   2      
 823   2          case COMMAND_CLASS_BASIC:
 824   2            frame_status = handleCommandClassBasic(rxOpt, pCmd, cmdLength);
 825   2            break;
 826   2      
 827   2          case COMMAND_CLASS_NOTIFICATION_V3:
 828   2            frame_status = handleCommandClassNotification(rxOpt, pCmd, cmdLength);
 829   2            break;
 830   2          
 831   2          case COMMAND_CLASS_SWITCH_BINARY:
 832   2            frame_status = handleCommandClassBinarySwitch(rxOpt, pCmd, cmdLength);
 833   2            break;
 834   2      
 835   2          case COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2:
 836   2            frame_status = handleCommandClassMultiChannelAssociation(rxOpt, pCmd, cmdLength);
 837   2            break;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 910 

 838   2          case COMMAND_CLASS_MULTI_CHANNEL_V3:
 839   2            frame_status = MultiChanCommandHandler(rxOpt, pCmd, cmdLength);
 840   2            break;
 841   2      //    case COMMAND_CLASS_CENTRAL_SCENE_V3:
 842   2      //      frame_status = handleCommandClassCentralScene(rxOpt, pCmd, cmdLength);
 843   2      //      break;
 844   2          case COMMAND_CLASS_CONFIGURATION:
 845   2            frame_status = handleCommandClassConfiguration(rxOpt, pCmd, cmdLength);
 846   2            break;
 847   2          case COMMAND_CLASS_SWITCH_ALL:
 848   2            frame_status = handleCommandClassAllSwitch(rxOpt, pCmd, cmdLength);
 849   2            break;
 850   2          case COMMAND_CLASS_METER:
 851   2            frame_status = handleCommandClassMeter(rxOpt, pCmd, cmdLength);
 852   2            break;
 853   2        }
 854   1        return frame_status;
 855   1      }
 856          
 857          
 858          
 859          BYTE
 860          handleCommandClassVersionAppl( BYTE cmdClass )
 861          {
 862   1        BYTE commandClassVersion = UNKNOWN_VERSION;
 863   1      
 864   1        switch (cmdClass)
 865   1        {
 866   2          case COMMAND_CLASS_VERSION:
 867   2           commandClassVersion = CommandClassVersionVersionGet();
 868   2            break;
 869   2      
 870   2          case COMMAND_CLASS_BASIC:
 871   2           commandClassVersion =  CommandClassBasicVersionGet();
 872   2            break;
 873   2      #ifdef BOOTLOADER_ENABLED
 874   2          case COMMAND_CLASS_FIRMWARE_UPDATE_MD:
 875   2            commandClassVersion = CommandClassFirmwareUpdateMdVersionGet();
 876   2            break;
 877   2      #endif
 878   2      
 879   2          case COMMAND_CLASS_MANUFACTURER_SPECIFIC:
 880   2           commandClassVersion = CommandClassManufacturerVersionGet();
 881   2            break;
 882   2      
 883   2          case COMMAND_CLASS_ASSOCIATION:
 884   2           commandClassVersion = CommandClassAssociationVersionGet();
 885   2            break;
 886   2      
 887   2          case COMMAND_CLASS_ASSOCIATION_GRP_INFO:
 888   2           commandClassVersion = CommandClassAssociationGroupInfoVersionGet();
 889   2            break;
 890   2      
 891   2          case COMMAND_CLASS_DEVICE_RESET_LOCALLY:
 892   2           commandClassVersion = CommandClassDeviceResetLocallyVersionGet();
 893   2            break;
 894   2      
 895   2          case COMMAND_CLASS_ZWAVEPLUS_INFO:
 896   2           commandClassVersion = CommandClassZWavePlusVersion();
 897   2            break;
 898   2          case COMMAND_CLASS_SWITCH_BINARY:
 899   2           commandClassVersion = CommandClassBinarySwitchVersionGet();
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 911 

 900   2            break;
 901   2          
 902   2          case COMMAND_CLASS_NOTIFICATION_V3:
 903   2            commandClassVersion = CommandClassNotificationVersionGet();
 904   2            break;
 905   2            
 906   2          case COMMAND_CLASS_MULTI_CHANNEL_ASSOCIATION_V2:
 907   2            commandClassVersion = CmdClassMultiChannelAssociationVersion();
 908   2            break;
 909   2          
 910   2          case COMMAND_CLASS_MULTI_CHANNEL_V3:
 911   2            commandClassVersion = CmdClassMultiChannelGet();
 912   2            break;
 913   2          
 914   2          default:
 915   2           commandClassVersion = ZW_Transport_CommandClassVersionGet(cmdClass);
 916   2        }
 917   1        return commandClassVersion;
 918   1      }
 919          
 920          
 921          
 922          
 923          void
 924          ApplicationSlaveUpdate(
 925            BYTE bStatus,
 926            BYTE bNodeID,
 927            BYTE* pCmd,
 928            BYTE bLen)
 929          {
 930   1        UNUSED(bStatus);
 931   1        UNUSED(bNodeID);
 932   1        UNUSED(pCmd);
 933   1        UNUSED(bLen);
 934   1      }
 935          
 936          
 937          void ApplicationNetworkLearnModeCompleted(uint8_t bNodeID)
 938          {
 939   1        
 940   1                  gpio_SetPin(led_in, TRUE);
 941   1                gpio_SetPin(led_ex, TRUE);
 942   1                gpio_SetPin(led_er, TRUE);
 943   1        if(APPLICATION_NETWORK_LEARN_MODE_COMPLETED_SMART_START_IN_PROGRESS == bNodeID)
 944   1        {
 945   2          ZCB_eventSchedulerEventAdd(EVENT_APP_SMARTSTART_IN_PROGRESS);
 946   2        }
 947   1        else
 948   1        {
 949   2          if (APPLICATION_NETWORK_LEARN_MODE_COMPLETED_FAILED == bNodeID)
 950   2          {
 951   3            MemoryPutByte((WORD)&EEOFFSET_MAGIC_far, APPL_MAGIC_VALUE + 1);
 952   3            ZCB_eventSchedulerEventAdd((EVENT_APP) EVENT_SYSTEM_WATCHDOG_RESET);
 953   3          }
 954   2          else
 955   2          {
 956   3            if (APPLICATION_NETWORK_LEARN_MODE_COMPLETED_TIMEOUT == bNodeID)
 957   3            {
 958   4              /**
 959   4               * Inclusion or exclusion timed out. We need to make sure that the application triggers
 960   4               * Smartstart inclusion.
 961   4               */
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 912 

 962   4              ZCB_eventSchedulerEventAdd(EVENT_APP_INIT);
 963   4              ChangeState(STATE_APP_STARTUP);
 964   4            }
 965   3            else
 966   3            {
 967   4              /*Success*/
 968   4              myNodeID = bNodeID;
 969   4              if (0 == myNodeID)
 970   4              {
 971   5      
 972   5                /*Clear association*/
 973   5                AssociationInit(TRUE);
 974   5                SetDefaultConfiguration();
 975   5      
 976   5                ZCB_eventSchedulerEventAdd(EVENT_APP_INIT);
 977   5                ChangeState(STATE_APP_STARTUP);
 978   5              }
 979   4            }
 980   3          }
 981   2          ZCB_eventSchedulerEventAdd((EVENT_APP) EVENT_SYSTEM_LEARNMODE_FINISH);
 982   2          Transport_OnLearnCompleted(bNodeID);
 983   2        }
 984   1      }
 985          
 986          
 987          
 988          BYTE
 989          GetMyNodeID(void)
 990          {
 991   1        return myNodeID;
 992   1      }
 993          
 994          
 995          
 996          STATE_APP
 997          GetAppState(void)
 998          {
 999   1        return currentState;
1000   1      }
1001          
1002          
1003          void
1004          AppStateManager(EVENT_APP event)
1005          {
1006   1        if(EVENT_SYSTEM_WATCHDOG_RESET == event)
1007   1        {
1008   2          ChangeState(STATE_APP_WATCHDOG_RESET);
1009   2        }
1010   1      
1011   1      
1012   1        switch(currentState)
1013   1        {
1014   2          case STATE_APP_STARTUP:
1015   2      
1016   2            if(EVENT_APP_INIT == event)
1017   2            {
1018   3              ZW_NetworkLearnModeStart(E_NETWORK_LEARN_MODE_INCLUSION_SMARTSTART);
1019   3            }
1020   2      
1021   2            ChangeState(STATE_APP_IDLE);
1022   2           break;
1023   2      
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 913 

1024   2          case STATE_APP_IDLE:
1025   2            if( FACTORYNEW_RESET == event){
1026   3              MemoryPutByte((WORD)&Config_far,0x00);
1027   3              MemoryPutByte((WORD)&Valve_state_far, CMD_CLASS_BIN_OFF);
1028   3              Valve_state = CMD_CLASS_BIN_OFF;
1029   3              
1030   3              MemoryPutByte((WORD)&EEOFFSET_MAGIC_far, 1 + APPL_MAGIC_VALUE);
1031   3              ZW_TIMER_START(ZCB_ResetDelay, 50, 1); // 50 * 10 = 500 ms  to be sure.
1032   3      
1033   3      
1034   3            }
1035   2            if (EVENT_APP_REFRESH_MMI == event)
1036   2            {
1037   3            }
1038   2      
1039   2            if(EVENT_APP_SMARTSTART_IN_PROGRESS == event)
1040   2            {
1041   3              ChangeState(STATE_APP_LEARN_MODE);
1042   3            }
1043   2      
1044   2            if (EVENT_SYSTEM_LEARNMODE_START == event)
1045   2            {
1046   3              
1047   3              if (myNodeID)
1048   3              {
1049   4                gpio_SetPin(led_ex, FALSE);
1050   4                ZW_NetworkLearnModeStart(E_NETWORK_LEARN_MODE_EXCLUSION_NWE);
1051   4              }
1052   3              else
1053   3              {
1054   4                gpio_SetPin(led_in, FALSE);
1055   4                ZW_NetworkLearnModeStart(E_NETWORK_LEARN_MODE_INCLUSION);
1056   4              }
1057   3              ChangeState(STATE_APP_LEARN_MODE);
1058   3            }
1059   2      
1060   2            if (EVENT_SYSTEM_RESET == event)
1061   2            {
1062   3              AGI_PROFILE lifelineProfile = {
1063   3                      ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_NA_V2,
1064   3                      ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_LIFELINE
1065   3              };
1066   3              MemoryPutByte((WORD)&EEOFFSET_MAGIC_far, 1 + APPL_MAGIC_VALUE);
1067   3      //        ZW_TIMER_START(ZCB_ResetDelay, 50, 1); // 50 * 10 = 500 ms  to be sure.
1068   3              handleCommandClassDeviceResetLocally(&lifelineProfile, ZCB_DeviceResetLocallyDone);
1069   3              break;
1070   3            }
1071   2            break;
1072   2      
1073   2          case STATE_APP_LEARN_MODE:
1074   2            if(EVENT_APP_REFRESH_MMI == event){}
1075   2            if((EVENT_KEY_B1_PRESS == event)||(EVENT_SYSTEM_LEARNMODE_END == event))
1076   2            {
1077   3              ZW_NetworkLearnModeStart(E_NETWORK_LEARN_MODE_DISABLE);
1078   3              ZCB_eventSchedulerEventAdd(EVENT_APP_INIT);
1079   3              ChangeState(STATE_APP_STARTUP);
1080   3            }
1081   2      
1082   2            if(EVENT_SYSTEM_LEARNMODE_FINISH == event)
1083   2            {
1084   3              ChangeState(STATE_APP_IDLE);
1085   3            }
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 914 

1086   2            break;
1087   2      
1088   2          case STATE_APP_WATCHDOG_RESET:
1089   2            if(EVENT_APP_REFRESH_MMI == event){}
1090   2      
1091   2      
1092   2            ZW_WatchDogEnable(); /*reset asic*/
1093   2            for (;;) {}
1094   2            break;
1095   2          case STATE_APP_OTA:
1096   2            if(EVENT_APP_REFRESH_MMI == event){}
1097   2            /*OTA state... do nothing until firmware update is finish*/
1098   2            break;
1099   2      
1100   2          case STATE_APP_TRANSMIT_DATA:
1101   2            if (EVENT_APP_FINISH_EVENT_JOB == event)
1102   2            {
1103   3      //        ClearLastNotificationAction(&agiTableRootDeviceGroups[notificationOverLoadendpoint - 1].profile,
             - notificationOverLoadendpoint);
1104   3              ChangeState(STATE_APP_IDLE);
1105   3            }
1106   2      
1107   2            if (EVENT_KEY_B6_PRESS == event)
1108   2            {
1109   3              /*
1110   3               * Pressing the B6/S6 key will toggle the overload timer. This timer
1111   3               * will transmit a notification every 30th second.
1112   3               */
1113   3      
1114   3            }
1115   2            break;
1116   2        }
1117   1        
1118   1      }
1119          
1120          
1121          
1122          static void
1123          ChangeState(STATE_APP newState)
1124          {
1125   1        ZW_DEBUG_MYPRODUCT_SEND_NL();
1126   1        ZW_DEBUG_MYPRODUCT_SEND_STR("State changed: ");
1127   1        ZW_DEBUG_MYPRODUCT_SEND_NUM(currentState);
1128   1        ZW_DEBUG_MYPRODUCT_SEND_STR(" -> ");
1129   1        ZW_DEBUG_MYPRODUCT_SEND_NUM(newState);
1130   1      
1131   1        currentState = newState;
1132   1      
1133   1        /**< Pre-action on new state is to refresh MMI */
1134   1        ZCB_eventSchedulerEventAdd(EVENT_APP_REFRESH_MMI);
1135   1      }
1136          
1137          
1138          PCB(ZCB_DeviceResetLocallyDone)(TRANSMISSION_RESULT * pTransmissionResult)
1139          {
1140   1        if (TRANSMISSION_RESULT_FINISHED == pTransmissionResult->isFinished)
1141   1        {
1142   2          ZW_DEBUG_MYPRODUCT_SEND_NL();
1143   2          ZW_DEBUG_MYPRODUCT_SEND_STR("DRLD");
1144   2      
1145   2          ZCB_eventSchedulerEventAdd((EVENT_APP) EVENT_SYSTEM_WATCHDOG_RESET);
1146   2        }
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 915 

1147   1      }
1148          
1149          
1150          PCB(ZCB_ResetDelay)(void)
1151          {
1152   1        AGI_PROFILE lifelineProfile = {
1153   1            ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL,
1154   1            ASSOCIATION_GROUP_INFO_REPORT_PROFILE_GENERAL_LIFELINE
1155   1        };
1156   1      
1157   1      
1158   1        handleCommandClassDeviceResetLocally(&lifelineProfile, ZCB_DeviceResetLocallyDone);
1159   1      
1160   1      }
1161          
1162          
1163          
1164          
1165          
1166          
1167          PCB(ZCB_OTAFinish)(OTA_STATUS otaStatus)
1168          {
1169   1        UNUSED(otaStatus);
1170   1        /*Just reboot node to cleanup and start on new FW.*/
1171   1        ZW_WatchDogEnable(); /*reset asic*/
1172   1        while(1);
1173   1      }
1174          
1175          
1176          
1177          code const BOOL (code * ZCB_OTAStart_p)(void) = &ZCB_OTAStart;
1178          
1179          BOOL
1180          ZCB_OTAStart(void)
1181          {
1182   1        BOOL  status = FALSE;
1183   1        if (STATE_APP_IDLE == GetAppState())
1184   1        {
1185   2          status = TRUE;
1186   2        }
1187   1        return status;
1188   1      }
1189          
1190          void
1191          handleBasicSetCommand(BYTE val, BYTE endpoint )
1192          {
1193   1        ZW_UART_COMMAND cmd;
1194   1          if(ENDPOINT_1 == endpoint){
1195   2              if(val == CMD_CLASS_BIN_OFF){
1196   3                Valve_state = CMD_CLASS_BIN_OFF;
1197   3                
1198   3            //    ReportState(ENDPOINT_ROOT, Valve_state);
1199   3                ReportState(ENDPOINT_1, Valve_state);
1200   3                
1201   3                cmd.zw_uartcommandset.length =4;
1202   3                cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
1203   3                cmd.zw_uartcommandset.type = ZW_VALVE_SET;
1204   3                cmd.zw_uartcommandset.value1 = ZW_VALVE_ON;
1205   3                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3);       
1206   3                }     
1207   2              
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 916 

1208   2              if(val == CMD_CLASS_BIN_ON){
1209   3                Valve_state = CMD_CLASS_BIN_ON;
1210   3                
1211   3              //  ReportState(ENDPOINT_ROOT, Valve_state);
1212   3                ReportState(ENDPOINT_1, Valve_state);
1213   3                
1214   3                cmd.zw_uartcommandset.length =4;
1215   3                cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
1216   3                cmd.zw_uartcommandset.type = ZW_VALVE_SET;
1217   3                cmd.zw_uartcommandset.value1 = ZW_VALVE_OFF;
1218   3                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3);
1219   3                }
1220   2          }
1221   1      }
1222          
1223          
1224          
1225          BYTE
1226          getAppBasicReport( BYTE endpoint )
1227          {
1228   1        if(ENDPOINT_1 ==  endpoint)
1229   1        {
1230   2          return handleAppltBinarySwitchGet(endpoint);
1231   2        }
1232   1        if(ENDPOINT_2 == endpoint)
1233   1        {
1234   2          return handleAppltBinarySwitchGet(endpoint);
1235   2        }
1236   1      //  if(ENDPOINT_3 == endpoint)
1237   1      //  {
1238   1      //    return handleAppltBinarySwitchGet(endpoint);
1239   1      //  }
1240   1      }
1241          
1242          
1243          
1244          BYTE
1245          getAppBasicReportTarget( BYTE endpoint )
1246          {
1247   1       if(ENDPOINT_1 ==  endpoint)
1248   1        {
1249   2          return handleAppltBinarySwitchGet(endpoint);
1250   2        }
1251   1        if(ENDPOINT_2 == endpoint)
1252   1        {
1253   2          return handleAppltBinarySwitchGet(endpoint);
1254   2        }
1255   1      //  if(ENDPOINT_3 == endpoint)
1256   1      //  {
1257   1      //    return handleAppltBinarySwitchGet(endpoint);
1258   1      //  }
1259   1      }
1260          
1261          
1262          
1263          BYTE
1264          getAppBasicReportDuration( BYTE endpoint )
1265          {
1266   1        if(ENDPOINT_1 ==  endpoint)
1267   1        {
1268   2          return handleAppltBinarySwitchGet(endpoint);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 917 

1269   2        }
1270   1        if(ENDPOINT_2 == endpoint)
1271   1        {
1272   2          return handleAppltBinarySwitchGet(endpoint);
1273   2        }
1274   1      //  if(ENDPOINT_3 == endpoint)
1275   1      //  {
1276   1      //    return handleAppltBinarySwitchGet(endpoint);
1277   1      //  }
1278   1      }
1279          
1280          uint8_t handleNbrFirmwareVersions()
1281          {
1282   1        return 1; /*CHANGE THIS - firmware 0 version*/
1283   1      }
1284          
1285          
1286          
1287          void
1288          handleGetFirmwareVersion(
1290                  BYTE bFirmwareNumber,
1290                  VG_VERSION_REPORT_V2_VG* pVariantgroup)
1291          {
1292   1        /*firmware 0 version and sub version*/
1293   1        if(bFirmwareNumber == 0)
1294   1        {
1295   2          pVariantgroup->firmwareVersion = APP_VERSION;
1296   2          pVariantgroup->firmwareSubVersion = APP_REVISION;
1297   2        }
1298   1        else
1299   1        {
1300   2          /*Just set it to 0 if firmware n is not present*/
1301   2          pVariantgroup->firmwareVersion = 0;
1302   2          pVariantgroup->firmwareSubVersion = 0;
1303   2        }
1304   1      }
1305          
1306          
1307          /**
1308           * Function return firmware Id of target n (0 => is device FW ID)
1309           * n read version of firmware number n (0,1..N-1)
1310           * @return firmaware ID.
1311           */
1312          WORD
1313          handleFirmWareIdGet( BYTE n)
1314          {
1315   1        if(n == 0)
1316   1        {
1317   2          return APP_FIRMWARE_ID;
1318   2        }
1319   1        else if (n == 1)
1320   1        {
1321   2          return 0x1234;
1322   2        }
1323   1        return 0;
1324   1      }
1325          
1326          void setConfiguration(uint8_t Parameter,  uint8_t value )
1327          {
1328   1        ZW_UART_COMMAND cmd;
1329   1        if(Parameter == WATER_MODE){
1330   2          if(WATER_MODE_0 == value){
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 918 

1331   3                Config_Value = value;
1332   3                MemoryPutByte((WORD)&Config_far,value);
1333   3                cmd.zw_uartcommandset.length =4;
1334   3                cmd.zw_uartcommandset.cmd = COMMAND_CONFIGURATION;
1335   3                cmd.zw_uartcommandset.type = ZW_CONFIGURATION;
1336   3                cmd.zw_uartcommandset.value1 = Config_Value;
1337   3                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,
1338   3                &cmd.zw_uartcommandset.value1,cmd.zw_uartcommandset.length-3);
1339   3          }
1340   2          if(WATER_MODE_1 == value){
1341   3                Config_Value = value;
1342   3                MemoryPutByte((WORD)&Config_far,value);
1343   3                cmd.zw_uartcommandset.length =4;
1344   3                cmd.zw_uartcommandset.cmd = COMMAND_CONFIGURATION;
1345   3                cmd.zw_uartcommandset.type = ZW_CONFIGURATION;
1346   3                cmd.zw_uartcommandset.value1 = Config_Value;
1347   3                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,
1348   3                &cmd.zw_uartcommandset.value1,cmd.zw_uartcommandset.length-3);
1349   3          }
1350   2        }
1351   1        if(Parameter == METER_VALUE){
1352   2          MemoryPutByte((WORD)&Meter_config_far,value);
1353   2          Meter_config = value;
1354   2          cmd.zw_uartcommandset.length =4;
1355   2                cmd.zw_uartcommandset.cmd = COMMAND_METER;
1356   2                cmd.zw_uartcommandset.type = ZW_METER_SET;
1357   2                cmd.zw_uartcommandset.value1 = Meter_config ;
1358   2                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,
1359   2                &cmd.zw_uartcommandset.value1,cmd.zw_uartcommandset.length-3);
1360   2        } 
1361   1      }
1362          
1363          
1364          
1365          uint8_t getConfiguration(uint8_t parameterNumber){
1366   1        return Stt_Value;
1367   1      //  if(parameterNumber == 1){
1368   1      //    return Config_Value;
1369   1      //  }
1370   1      //  if(parameterNumber == 2){
1371   1      //    return Meter_config;
1372   1      //  }
1373   1      }
1374          
1375          BYTE getMeter(void){
1376   1        return Meter_Value;
1377   1      }
1378          
1379          void MeterReset(void){
1380   1        ZW_UART_COMMAND cmd;
1381   1        Meter_config = 0;
1382   1        MemoryPutByte((WORD)&Meter_config_far,Meter_config);
1383   1        cmd.zw_uartcommandset.length =4;
1384   1                cmd.zw_uartcommandset.cmd = COMMAND_METER;
1385   1                cmd.zw_uartcommandset.type = ZW_METER_RESET;
1386   1                cmd.zw_uartcommandset.value1 = Meter_config;
1387   1                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,
1388   1                &cmd.zw_uartcommandset.value1,cmd.zw_uartcommandset.length-3);
1389   1      }
1390          
1391          BYTE
1392          handleAppltBinarySwitchGet(BYTE endpoint)
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 919 

1393          {
1394   1        if(ENDPOINT_1 == endpoint){
1395   2            return Valve_state;
1396   2        }
1397   1        if(ENDPOINT_2 == endpoint){
1398   2            return Leak_state;
1399   2        }
1400   1      //  if(ENDPOINT_3 == endpoint){
1401   1      //      return Flow_state;
1402   1      //  }
1403   1      }
1404          
1405          
1406          
1407          
1408          
1409          
1410          BOOL handleAssociationSet(
1411              uint8_t ep,
1412              ZW_MULTI_CHANNEL_ASSOCIATION_SET_1BYTE_V2_FRAME* pCmd,
1413              uint8_t cmdLength)
1414          { 
1415   1        ZW_MultiChannelAssociationSet1byteV2Frame CMD = pCmd;
*** ERROR C202 IN LINE 1415 OF SwitchOnOff.c: 'ZW_MultiChannelAssociationSet1byteV2Frame': undefined identifier
*** ERROR C141 IN LINE 1415 OF SwitchOnOff.c: syntax error near 'CMD'
1416   1        
1417   1        if(ENDPOINT_1 == ep){
1418   2          handleApplBinarySwitchSet(CMD.properties1,ENDPOINT_1);
1419   2        return TRUE;
1420   2        }
1421   1      }
1422            
1423          
1424          
1425          
1426          
1427            
1428          void
1429          handleApplBinarySwitchSet(CMD_CLASS_BIN_SW_VAL val, BYTE endpoint )
1430          {
1431   1          ZW_UART_COMMAND cmd;
1432   1          if(ENDPOINT_1 == endpoint){
1433   2              if(val == CMD_CLASS_BIN_OFF){
1434   3                Valve_state = CMD_CLASS_BIN_OFF;
1435   3        
1436   3      //          ReportState(ENDPOINT_ROOT, Valve_state);
1437   3                ReportState(ENDPOINT_1, Valve_state);
1438   3                MemoryPutByte((WORD)&Valve_state_far, Valve_state);
1439   3                
1440   3                cmd.zw_uartcommandset.length =4;
1441   3                cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
1442   3                cmd.zw_uartcommandset.type = ZW_VALVE_SET;
1443   3                cmd.zw_uartcommandset.value1 = ZW_VALVE_ON;
1444   3                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3); 
1445   3                
1446   3                }   
1447   2              if(val == CMD_CLASS_BIN_ON){
1448   3                Valve_state = CMD_CLASS_BIN_ON;
1449   3        
1450   3      //          ReportState(ENDPOINT_ROOT, Valve_state);
1451   3                ReportState(ENDPOINT_1, Valve_state);
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 920 

1452   3                MemoryPutByte((WORD)&Valve_state_far, Valve_state);
1453   3                
1454   3                cmd.zw_uartcommandset.length =4;
1455   3                cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
1456   3                cmd.zw_uartcommandset.type = ZW_VALVE_SET;
1457   3                cmd.zw_uartcommandset.value1 = ZW_VALVE_OFF;
1458   3                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3);
1459   3                
1460   3                }
1461   2          }
1462   1      }
1463          void
1464          SetDefaultConfiguration(void)
1465          {
1466   1        ZW_DEBUG_MYPRODUCT_SEND_NL();
1467   1        ZW_DEBUG_MYPRODUCT_SEND_BYTE('C');
1468   1        ZW_DEBUG_MYPRODUCT_SEND_BYTE('d');
1469   1      
1470   1        
1471   1        MemoryPutByte((WORD)&EEOFFSET_MAGIC_far, APPL_MAGIC_VALUE);
1472   1      }
1473          
1474          
1475          
1476          void
1477          LoadConfiguration(ZW_NVM_STATUS nvmStatus)
1478          {
1479   1        ZW_UART_COMMAND cmd;
1480   1        MemoryGetID( NULL, &myNodeID);
1481   1        ManufacturerSpecificDeviceIDInit();
1482   1        
1483   1        #ifdef BOOTLOADER_ENABLED
1484   1        NvmInit(nvmStatus);
1485   1      #else
1488   1        
1489   1      
1490   1      
1491   1          Config_Value = MemoryGetByte((WORD)&Config_far);
1492   1          Valve_state = MemoryGetByte((WORD)&Valve_state_far);
1493   1          Leak_state = MemoryGetByte((WORD)&Leak_state_far);
1494   1          Flow_state = MemoryGetByte((WORD)&Flow_state_far);
1495   1          
1496   1          /* Initialize the NVM if needed */
1497   1        if (MemoryGetByte((WORD)&EEOFFSET_MAGIC_far) == APPL_MAGIC_VALUE)
1498   1        {
1499   2          /* Initialize PowerLevel functionality*/
1500   2          Config_Value = MemoryGetByte((WORD)&Config_far);
1501   2          Valve_state = MemoryGetByte((WORD)&Valve_state_far);
1502   2          Leak_state = MemoryGetByte((WORD)&Leak_state_far);
1503   2          Flow_state = MemoryGetByte((WORD)&Flow_state_far);
1504   2          
1505   2         // loadStatusPowerLevel();
1506   2        }
1507   1        
1508   1        else
1509   1        {
1510   2          /* Initialize transport layer NVM */
1511   2          Transport_SetDefault();
1512   2          /* Reset protocol */
1513   2          ZW_SetDefault();
1514   2          /* Initialize PowerLevel functionality.*/
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 921 

1515   2          loadInitStatusPowerLevel();
1516   2      
1517   2          /* Force reset of associations. */
1518   2          AssociationInit(TRUE);
1519   2      
1520   2          ZW_MEM_PUT_BYTE((WORD)&EEOFFSET_MAGIC_far, APPL_MAGIC_VALUE);
1521   2          ZW_MEM_PUT_BYTE((WORD)&EEOFFS_SECURITY_RESERVED.EEOFFS_MAGIC_BYTE_field, EEPROM_MAGIC_BYTE_VALUE);
1522   2         // DefaultNotifactionStatus(NOTIFICATION_STATUS_UNSOLICIT_ACTIVED);
1523   2        }
1524   1        cmd.zw_uartcommandset.length =4;
1525   1                cmd.zw_uartcommandset.cmd = COMMAND_CONFIGURATION;
1526   1                cmd.zw_uartcommandset.type = ZW_CONFIGURATION;
1527   1                cmd.zw_uartcommandset.value1 = Config_Value;
1528   1                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3);
1529   1      
1530   1              if(Valve_state == CMD_CLASS_BIN_OFF){
1531   2      
1532   2                ReportState(ENDPOINT_1, Valve_state);
1533   2                cmd.zw_uartcommandset.length =4;
1534   2                cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
1535   2                cmd.zw_uartcommandset.type = ZW_VALVE_SET;
1536   2                cmd.zw_uartcommandset.value1 = ZW_VALVE_ON;
1537   2                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3);       
1538   2                }     
1539   1              
1540   1              if(Valve_state == CMD_CLASS_BIN_ON){
1541   2      
1542   2                ReportState(ENDPOINT_1, Valve_state);
1543   2                
1544   2                cmd.zw_uartcommandset.length =4;
1545   2                cmd.zw_uartcommandset.cmd = COMMAND_VALVE;
1546   2                cmd.zw_uartcommandset.type = ZW_VALVE_SET;
1547   2                cmd.zw_uartcommandset.value1 = ZW_VALVE_OFF;
1548   2                ConTxFrame(cmd.zw_uartcommandset.cmd,cmd.zw_uartcommandset.type,&cmd.zw_uartcommandset.value1,cmd.zw_
             -uartcommandset.length-3);
1549   2                }   
1550   1      }
1551          
1552          
1553          
1554          
1555          
1556          
1557          
1558          /*
1559          void
1560          RefreshMMI(void)
1561          {
1562            if (CMD_CLASS_BIN_OFF == onOffState)
1563            {
1564              Led(ZDP03A_LED_D2,OFF);
1565            }
1566            else if (CMD_CLASS_BIN_ON == onOffState)
1567            {
1568              Led(ZDP03A_LED_D2,ON);
1569            }
1570          }
1571          
1572          */
1573          
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 922 

1574          
1575          
1576          /*
1577           * @brief Called when protocol needs to inform Application about a Security Event.
1578           * @details If the app does not need/want the Security Event the handling can be left empty.
1579           *
1580           *    Event E_APPLICATION_SECURITY_EVENT_S2_INCLUSION_REQUEST_DSK_CSA
1581           *          If CSA is needed, the app must do the following when this event occures:
1582           *             1. Obtain user input with first 4 bytes of the S2 including node DSK
1583           *             2. Store the user input in a response variable of type s_SecurityS2InclusionCSAPublicDSK_t.
1584           *             3. Call ZW_SetSecurityS2InclusionPublicDSK_CSA(response)
1585           *
1586           */
1587          void
1588          ApplicationSecurityEvent(
1589            s_application_security_event_data_t *securityEvent)
1590          {
1591   1        switch (securityEvent->event)
1592   1        {
1593   2      #ifdef APP_SUPPORTS_CLIENT_SIDE_AUTHENTICATION
1600   2      
1601   2          default:
1602   2            break;
1603   2        }
1604   1      }
1605          
1606          
1607          /**
1608          * Set up security keys to request when joining a network.
1609          * These are taken from the config_app.h header file.
1610          */
1611          BYTE ApplicationSecureKeysRequested(void)
1612          {
1613   1      //  return REQUESTED_SECURITY_KEYS_SECURITY_KEY_NON_MASK;
1614   1      }
1615          
1616          /**
1617          * Set up security S2 inclusion authentication to request when joining a network.
1618          * These are taken from the config_app.h header file.
1619          */
1620          BYTE ApplicationSecureAuthenticationRequested(void)
1621          {
1622   1        return REQUESTED_SECURITY_AUTHENTICATION;
1623   1      }
1624          
1625          
1626          
1627          
1628          
1629          void ReportState(BYTE endpoint, BYTE state)
1630          {
1631   1        ZW_APPLICATION_TX_BUFFER *pTxBuf = GetResponseBuffer(); 
1632   1      
1633   1        if( NON_NULL( pTxBuf ) ) 
1634   1        {
1635   2          TRANSMIT_OPTIONS_TYPE_SINGLE_EX *pTxOptionsEx;
1636   2          TRANSMIT_OPTIONS_TYPE_SINGLE_EX txOptionsEx;
1637   2          MULTICHAN_NODE_ID destNode;
1638   2          txOptionsEx.pDestNode = &destNode;
1639   2          *(&pTxOptionsEx) = &txOptionsEx;
1640   2          
1641   2          destNode.node.nodeId = 1;               //controller_id =1
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 923 

1642   2          destNode.node.endpoint = 0;         
1643   2          destNode.nodeInfo.BitMultiChannelEncap = 0;  
1644   2          destNode.nodeInfo.security = 0x00;              //security_key_none
1645   2      
1646   2          txOptionsEx.txOptions = TRANSMIT_OPTION_ACK | TRANSMIT_OPTION_EXPLORE | ZWAVE_PLUS_TX_OPTIONS;
1647   2          txOptionsEx.sourceEndpoint = endpoint;
1648   2          txOptionsEx.txSecOptions = 0;
1649   2          txOptionsEx.pDestNode->nodeInfo.security = 0x00;
1650   2          
1651   2          pTxBuf->ZW_SwitchBinaryReportFrame.cmdClass = COMMAND_CLASS_SWITCH_BINARY;
1652   2          pTxBuf->ZW_SwitchBinaryReportFrame.cmd = SWITCH_BINARY_REPORT;
1653   2          pTxBuf->ZW_SwitchBinaryReportFrame.value = state;
1654   2      
1655   2          if(ZW_TX_IN_PROGRESS != Transport_SendResponseEP(
1656   2              (BYTE *)pTxBuf,
1657   2              sizeof(ZW_SWITCH_BINARY_REPORT_FRAME),
1658   2              pTxOptionsEx,
1659   2              ZCB_ResponseJobStatus))   
1660   2          {
1661   3            /*Job failed, free transmit-buffer pTxBuf by cleaing mutex */
1662   3            FreeResponseBuffer();
1663   3          }
1664   2        }
1665   1      }
1666          
1667          void ReportState2(BYTE endpoint, BYTE state)
1668          {
1669   1        ZW_APPLICATION_TX_BUFFER *pTxBuf = GetResponseBuffer(); 
1670   1      
1671   1        if( NON_NULL( pTxBuf ) ) 
1672   1        {
1673   2          TRANSMIT_OPTIONS_TYPE_SINGLE_EX *pTxOptionsEx;
1674   2          TRANSMIT_OPTIONS_TYPE_SINGLE_EX txOptionsEx;
1675   2          MULTICHAN_NODE_ID destNode;
1676   2          txOptionsEx.pDestNode = &destNode;
1677   2          *(&pTxOptionsEx) = &txOptionsEx;
1678   2          
1679   2          destNode.node.nodeId = 1;               //controller_id =1
1680   2          destNode.node.endpoint = 0;         
1681   2          destNode.nodeInfo.BitMultiChannelEncap = 0;  
1682   2          destNode.nodeInfo.security = 0x00;              //security_key_none
1683   2      
1684   2          txOptionsEx.txOptions = TRANSMIT_OPTION_ACK | TRANSMIT_OPTION_EXPLORE | ZWAVE_PLUS_TX_OPTIONS;
1685   2          txOptionsEx.sourceEndpoint = endpoint;
1686   2          txOptionsEx.txSecOptions = 0;
1687   2          txOptionsEx.pDestNode->nodeInfo.security = 0x00;
1688   2          
1689   2          pTxBuf->ZW_ConfigurationReport1byteFrame.cmdClass = COMMAND_CLASS_CONFIGURATION;
1690   2          pTxBuf->ZW_ConfigurationReport1byteFrame.cmd = CONFIGURATION_REPORT;
1691   2          pTxBuf->ZW_ConfigurationReport1byteFrame.parameterNumber = endpoint;
1692   2            pTxBuf->ZW_ConfigurationReport1byteFrame.level = 0x01;
1693   2            pTxBuf->ZW_ConfigurationReport1byteFrame.configurationValue1 = state;
1694   2      
1695   2          if(ZW_TX_IN_PROGRESS != Transport_SendResponseEP(
1696   2              (BYTE *)pTxBuf,
1697   2              sizeof(ZW_CONFIGURATION_REPORT_1BYTE_FRAME),
1698   2              pTxOptionsEx,
1699   2              ZCB_ResponseJobStatus))   
1700   2          {
1701   3            /*Job failed, free transmit-buffer pTxBuf by cleaing mutex */
1702   3            FreeResponseBuffer();
1703   3          }
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 924 

1704   2        }
1705   1      }
1706          
1707          
1708          PCB(ZCB_CommandClassSupervisionGetReceived)(SUPERVISION_GET_RECEIVED_HANDLER_ARGS * pArgs)
1709          {
1710   1        /*
1711   1        if (SWITCH_MULTILEVEL_SET == pArgs->cmd && COMMAND_CLASS_SWITCH_MULTILEVEL_V4 == pArgs->cmdClass)
1712   1        {
1713   1          uint8_t duration = GetCurrentDuration(pArgs->rxOpt->destNode.endpoint);
1714   1          pArgs->duration = duration;
1715   1          if (0 < duration)
1716   1          {
1717   1            pArgs->status = CC_SUPERVISION_STATUS_WORKING;
1718   1      
1719   1            if (CC_SUPERVISION_STATUS_UPDATES_SUPPORTED == CC_SUPERVISION_EXTRACT_STATUS_UPDATE(pArgs->propertie
             -s1))
1720   1            {
1721   1              // Save the data
1722   1              rxOptionSupervision = *(pArgs->rxOpt);
1723   1              sessionID = CC_SUPERVISION_EXTRACT_SESSION_ID(pArgs->properties1);
1724   1      
1725   1              pArgs->properties1 = CC_SUPERVISION_ADD_MORE_STATUS_UPDATE(CC_SUPERVISION_MORE_STATUS_UPDATES_REPO
             -RTS_TO_FOLLOW) | CC_SUPERVISION_ADD_SESSION_ID(sessionID);
1726   1      
1727   1              /*
1728   1               * Start timer that will send another Supervision report when triggered.
1729   1               *
1730   1               * Checking whether duration is higher than 127 is done because these values are
1731   1               * interpreted as minutes. Please see table 8, SDS13781-4.
1732   1               */
1733   1               
1734   1               
1735   1               /*
1736   1              ZW_TimerLongStart(ZCB_SupervisionTimerCallback, ((127 < duration) ? (duration - 127) * 1000 * 60 :
             - duration * 1000), 1);
1737   1            }
1738   1          }
1739   1          else {
1740   1            // Duration == 0. I.e. the command has already been handled and completed. Clear the "more status up
             -dates" flag
1741   1            pArgs->properties1 &= (CC_SUPERVISION_ADD_MORE_STATUS_UPDATE(CC_SUPERVISION_MORE_STATUS_UPDATES_THIS
             -_IS_LAST) |
1742   1                                   CC_SUPERVISION_COMMAND_PROPERTIES_RESERVED_BITMASK |
1743   1                                   CC_SUPERVISION_COMMAND_PROPERTIES_SESSION_ID_BITMASK);
1744   1          }
1745   1        }
1746   1        else
1747   1        {
1748   1      
1749   1          pArgs->properties1 &= (CC_SUPERVISION_ADD_MORE_STATUS_UPDATE(CC_SUPERVISION_MORE_STATUS_UPDATES_THIS_I
             -S_LAST) |
1750   1                                 CC_SUPERVISION_COMMAND_PROPERTIES_RESERVED_BITMASK |
1751   1                                 CC_SUPERVISION_COMMAND_PROPERTIES_SESSION_ID_BITMASK);
1752   1          pArgs->duration = 0;
1753   1        }
1754   1        */
1755   1      }
1756          
1757          
1758          PCB(ZCB_JobStatus)(TRANSMISSION_RESULT * pTransmissionResult)
1759          {
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 925 

1760   1        
1761   1        if (TRANSMISSION_RESULT_FINISHED == pTransmissionResult->isFinished)
1762   1        {
1763   2          ZCB_eventSchedulerEventAdd(EVENT_APP_FINISH_EVENT_JOB);
1764   2        }
1765   1      }
1766          
1767          void Notificationrp(BYTE state){
1768   1         JOB_STATUS jobStatus;
1769   1        
1770   1        
1771   1        
1772   1        if(state == CMD_CLASS_BIN_ON)
1773   1        {
1774   2          supportedEvents = 0x02;
1775   2        NotificationEventTrigger(&agiTableRootDeviceGroups[3 -1].profile,
1776   2              NOTIFICATION_TYPE_WATER_ALARM,
1777   2              supportedEvents,
1778   2              &supportedEvents, 1,
1779   2              ENDPOINT_3);
1780   2          
1781   2            jobStatus = UnsolicitedNotificationAction(
1782   2            &agiTableRootDeviceGroups[3 - 1].profile,
1783   2            ENDPOINT_3,
1784   2            ZCB_JobStatus);
1785   2        //@ [NOTIFICATION_TRANSMIT]
1786   2      
1787   2        if (JOB_STATUS_SUCCESS != jobStatus)
1788   2        {
1789   3          TRANSMISSION_RESULT transmissionResult;
1790   3      
1791   3          
1792   3      
1793   3          transmissionResult.status = FALSE;
1794   3          transmissionResult.nodeId = 0;
1795   3          transmissionResult.isFinished = TRANSMISSION_RESULT_FINISHED;
1796   3      
1797   3          ZCB_JobStatus(&transmissionResult);
1798   3        }
1799   2          
1800   2        }
1801   1        else{
1802   2          
1803   2          supportedEvents = 0x05;
1804   2            NotificationEventTrigger(&agiTableRootDeviceGroups[3 -1].profile,
1805   2              NOTIFICATION_TYPE_WATER_ALARM,
1806   2              supportedEvents,
1807   2              &supportedEvents, 1,
1808   2              ENDPOINT_3);
1809   2          
1810   2            jobStatus = UnsolicitedNotificationAction(
1811   2            &agiTableRootDeviceGroups[3 - 1].profile,
1812   2            ENDPOINT_3,
1813   2            ZCB_JobStatus);
1814   2        //@ [NOTIFICATION_TRANSMIT]
1815   2      
1816   2        if (JOB_STATUS_SUCCESS != jobStatus)
1817   2        {
1818   3          TRANSMISSION_RESULT transmissionResult;
1819   3      
1820   3      
1821   3          transmissionResult.status = FALSE;
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 926 

1822   3          transmissionResult.nodeId = 0;
1823   3          transmissionResult.isFinished = TRANSMISSION_RESULT_FINISHED;
1824   3      
1825   3          ZCB_JobStatus(&transmissionResult);
1826   3        }
1827   2          
1828   2        }
1829   1        
1830   1      }
1831          
1832          
1833          void Cat25256_init(void){
1834   1        //SetPinOut(spi_cs);
1835   1        ZW_SPI1_init(SPI_SPEED_8_MHZ|SPI_MODE_0|SPI_MSB_FIRST);
1836   1        ZW_SPI1_enable(TRUE);
1837   1        //gpio_SetPin(spi_cs, TRUE);
1838   1      }
1839          
1840          BYTE Cat25256_read(BYTE address1, BYTE address2 ){
1841   1        BYTE Data;
1842   1        gpio_SetPin(spi_cs, FALSE);
1843   1        ZW_SPI1_tx_set(READ);
1844   1        ZW_SPI1_tx_set(address1);
1845   1        ZW_SPI1_tx_set(address2);
1846   1        Data = ZW_SPI1_rx_get();
1847   1        gpio_SetPin(spi_cs, TRUE);
1848   1        return Data;
1849   1      }
1850          
1851          void Cat25256_write(BYTE address1, BYTE address2, BYTE Data){
1852   1        gpio_SetPin(spi_cs, FALSE);
1853   1        ZW_SPI1_tx_set(WRITE);
1854   1        ZW_SPI1_tx_set(address1);
1855   1        ZW_SPI1_tx_set(address2);
1856   1        ZW_SPI1_tx_set(Data);
1857   1        gpio_SetPin(spi_cs,TRUE);
1858   1      }
1859          
1860          BYTE reg_status(void){
1861   1        BYTE Data;
1862   1        //gpio_SetPin(spi_cs, FALSE);
1863   1        ZW_SPI1_tx_set(0xFF);
1864   1      //while(ZW_SPI1_active_get() != 0){
1865   1      //}
1866   1      
1867   1      //  ZW_TIMER_START(Delay_Handle, 1, 1);
1868   1        Data = ZW_SPI1_rx_get();
1869   1      //  gpio_SetPin(spi_cs, TRUE);
1870   1        return Data;
1871   1      }
1872          
1873          void Cat25256_write_reg(BYTE reg_value){
1874   1        gpio_SetPin(spi_cs, FALSE);
1875   1        ZW_SPI1_tx_set(WRSR);
1876   1        ZW_SPI1_tx_set(reg_value);
1877   1        gpio_SetPin(spi_cs, TRUE);
1878   1      }
1879          
1880          BOOL Delay_Handle()
1881          {
1882   1        return TRUE;
1883   1      
C51 COMPILER V9.54   SWITCHONOFF                                                           12/21/2021 20:06:27 PAGE 927 

1884   1      }
*** WARNING C316 IN LINE 1884 OF SwitchOnOff.c: unterminated conditionals

C51 COMPILATION COMPLETE.  5 WARNING(S),  2 ERROR(S)
